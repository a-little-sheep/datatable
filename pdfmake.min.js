/**
 * Created by user on 2017/9/18.
 */
/*! pdfmake v0.1.32, @license MIT, @link http://pdfmake.org */
(function webpackUniversalModuleDefinition(root, factory) {
    if(typeof exports === 'object' && typeof module === 'object')
        module.exports = factory();
    else if(typeof define === 'function' && define.amd)
        define([], factory);
    else {
        var a = factory();
        for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
    }
})(this, function() {
    return /******/ (function(modules) { // webpackBootstrap
        /******/ 	// The module cache
        /******/ 	var installedModules = {};

        /******/ 	// The require function
        /******/ 	function __webpack_require__(moduleId) {

            /******/ 		// Check if module is in cache
            /******/ 		if(installedModules[moduleId])
            /******/ 			return installedModules[moduleId].exports;

            /******/ 		// Create a new module (and put it into the cache)
            /******/ 		var module = installedModules[moduleId] = {
                /******/ 			exports: {},
                /******/ 			id: moduleId,
                /******/ 			loaded: false
                /******/ 		};

            /******/ 		// Execute the module function
            /******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

            /******/ 		// Flag the module as loaded
            /******/ 		module.loaded = true;

            /******/ 		// Return the exports of the module
            /******/ 		return module.exports;
            /******/ 	}


        /******/ 	// expose the modules object (__webpack_modules__)
        /******/ 	__webpack_require__.m = modules;

        /******/ 	// expose the module cache
        /******/ 	__webpack_require__.c = installedModules;

        /******/ 	// __webpack_public_path__
        /******/ 	__webpack_require__.p = "";

        /******/ 	// Load entry module and return exports
        /******/ 	return __webpack_require__(0);
        /******/ })
    /************************************************************************/
    /******/ ([
        /* 0 */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(global) {module.exports = global["pdfMake"] = __webpack_require__(1);
                /* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

            /***/ }),
        /* 1 */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(Buffer, global) {/* jslint node: true */
                /* jslint browser: true */
                'use strict';

                var PdfPrinter = __webpack_require__(6);
                var FileSaver = __webpack_require__(300);
                var saveAs = FileSaver.saveAs;

                var defaultClientFonts = {
                    Roboto: {
                        normal: 'Roboto-Regular.ttf',
                        bold: 'Roboto-Medium.ttf',
                        italics: 'Roboto-Italic.ttf',
                        bolditalics: 'Roboto-MediumItalic.ttf'
                    }
                };

                function Document(docDefinition, tableLayouts, fonts, vfs) {
                    this.docDefinition = docDefinition;
                    this.tableLayouts = tableLayouts || null;
                    this.fonts = fonts || defaultClientFonts;
                    this.vfs = vfs;
                }

                function canCreatePdf() {
                    // Ensure the browser provides the level of support needed
                    if (!Object.keys) {
                        return false;
                    }
                    return true;
                }

                Document.prototype._createDoc = function (options, callback) {
                    options = options || {};
                    if (this.tableLayouts) {
                        options.tableLayouts = this.tableLayouts;
                    }

                    var printer = new PdfPrinter(this.fonts);
                    printer.fs.bindFS(this.vfs);

                    var doc = printer.createPdfKitDocument(this.docDefinition, options);
                    var chunks = [];
                    var result;

                    doc.on('readable', function () {
                        var chunk;
                        while ((chunk = doc.read(9007199254740991)) !== null) {
                            chunks.push(chunk);
                        }
                    });
                    doc.on('end', function () {
                        result = Buffer.concat(chunks);
                        callback(result, doc._pdfMakePages);
                    });
                    doc.end();
                };

                Document.prototype._getPages = function (options, cb) {
                    if (!cb) {
                        throw '_getPages is an async method and needs a callback argument';
                    }
                    this._createDoc(options, function (ignoreBuffer, pages) {
                        cb(pages);
                    });
                };

                Document.prototype._bufferToBlob = function (buffer) {
                    var blob;
                    try {
                        blob = new Blob([buffer], {type: 'application/pdf'});
                    } catch (e) {
                        // Old browser which can't handle it without making it an byte array (ie10)
                        if (e.name === 'InvalidStateError') {
                            var byteArray = new Uint8Array(buffer);
                            blob = new Blob([byteArray.buffer], {type: 'application/pdf'});
                        }
                    }

                    if (!blob) {
                        throw 'Could not generate blob';
                    }

                    return blob;
                };

                Document.prototype._openWindow = function () {
                    // we have to open the window immediately and store the reference
                    // otherwise popup blockers will stop us
                    var win = global.open('', '_blank');
                    if (win === null) {
                        throw 'Open PDF in new window blocked by browser';
                    }

                    return win;
                };

                Document.prototype._openPdf = function (options, win) {
                    if (!win) {
                        win = this._openWindow();
                    }
                    try {
                        this.getBlob(function (result) {
                            var urlCreator = global.URL || global.webkitURL;
                            var pdfUrl = urlCreator.createObjectURL(result);
                            win.location.href = pdfUrl;
                        }, options);
                    } catch (e) {
                        win.close();
                        throw e;
                    }
                };

                Document.prototype.open = function (options, win) {
                    options = options || {};
                    options.autoPrint = false;
                    win = win || null;

                    this._openPdf(options, win);
                };


                Document.prototype.print = function (options, win) {
                    options = options || {};
                    options.autoPrint = true;
                    win = win || null;

                    this._openPdf(options, win);
                };

                Document.prototype.download = function (defaultFileName, cb, options) {
                    if (typeof defaultFileName === 'function') {
                        cb = defaultFileName;
                        defaultFileName = null;
                    }

                    defaultFileName = defaultFileName || 'file.pdf';
                    this.getBlob(function (result) {
                        saveAs(result, defaultFileName);

                        if (typeof cb === 'function') {
                            cb();
                        }
                    }, options);
                };

                Document.prototype.getBase64 = function (cb, options) {
                    if (!cb) {
                        throw 'getBase64 is an async method and needs a callback argument';
                    }
                    this.getBuffer(function (buffer) {
                        cb(buffer.toString('base64'));
                    }, options);
                };

                Document.prototype.getDataUrl = function (cb, options) {
                    if (!cb) {
                        throw 'getDataUrl is an async method and needs a callback argument';
                    }
                    this.getBuffer(function (buffer) {
                        cb('data:application/pdf;base64,' + buffer.toString('base64'));
                    }, options);
                };

                Document.prototype.getBlob = function (cb, options) {
                    if (!cb) {
                        throw 'getBlob is an async method and needs a callback argument';
                    }
                    var that = this;
                    this.getBuffer(function (result) {
                        var blob = that._bufferToBlob(result);
                        cb(blob);
                    }, options);
                };

                Document.prototype.getBuffer = function (cb, options) {
                    if (!cb) {
                        throw 'getBuffer is an async method and needs a callback argument';
                    }
                    this._createDoc(options, function (buffer) {
                        cb(buffer);
                    });
                };

                module.exports = {
                    createPdf: function (docDefinition) {
                        if (!canCreatePdf()) {
                            throw 'Your browser does not provide the level of support needed';
                        }
                        return new Document(docDefinition, global.pdfMake.tableLayouts, global.pdfMake.fonts, global.pdfMake.vfs);
                    }
                };

                /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer, (function() { return this; }())))

            /***/ }),
        /* 2 */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(global) {/*!
             * The buffer module from node.js, for the browser.
             *
             * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
             * @license  MIT
             */
                /* eslint-disable no-proto */

                'use strict'

                var base64 = __webpack_require__(3)
                var ieee754 = __webpack_require__(4)
                var isArray = __webpack_require__(5)

                exports.Buffer = Buffer
                exports.SlowBuffer = SlowBuffer
                exports.INSPECT_MAX_BYTES = 50

                /**
                 * If `Buffer.TYPED_ARRAY_SUPPORT`:
                 *   === true    Use Uint8Array implementation (fastest)
                 *   === false   Use Object implementation (most compatible, even IE6)
                 *
                 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
                 * Opera 11.6+, iOS 4.2+.
                 *
                 * Due to various browser bugs, sometimes the Object implementation will be used even
                 * when the browser supports typed arrays.
                 *
                 * Note:
                 *
                 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
                 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
                 *
                 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
                 *
                 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
                 *     incorrect length in some situations.

                 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
                 * get the Object implementation, which is slower but behaves correctly.
                 */
                Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
                    ? global.TYPED_ARRAY_SUPPORT
                    : typedArraySupport()

                /*
                 * Export kMaxLength after typed array support is determined.
                 */
                exports.kMaxLength = kMaxLength()

                function typedArraySupport () {
                    try {
                        var arr = new Uint8Array(1)
                        arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
                        return arr.foo() === 42 && // typed array instances can be augmented
                            typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
                            arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
                    } catch (e) {
                        return false
                    }
                }

                function kMaxLength () {
                    return Buffer.TYPED_ARRAY_SUPPORT
                        ? 0x7fffffff
                        : 0x3fffffff
                }

                function createBuffer (that, length) {
                    if (kMaxLength() < length) {
                        throw new RangeError('Invalid typed array length')
                    }
                    if (Buffer.TYPED_ARRAY_SUPPORT) {
                        // Return an augmented `Uint8Array` instance, for best performance
                        that = new Uint8Array(length)
                        that.__proto__ = Buffer.prototype
                    } else {
                        // Fallback: Return an object instance of the Buffer class
                        if (that === null) {
                            that = new Buffer(length)
                        }
                        that.length = length
                    }

                    return that
                }

                /**
                 * The Buffer constructor returns instances of `Uint8Array` that have their
                 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
                 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
                 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
                 * returns a single octet.
                 *
                 * The `Uint8Array` prototype remains unmodified.
                 */

                function Buffer (arg, encodingOrOffset, length) {
                    if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
                        return new Buffer(arg, encodingOrOffset, length)
                    }

                    // Common case.
                    if (typeof arg === 'number') {
                        if (typeof encodingOrOffset === 'string') {
                            throw new Error(
                                'If encoding is specified then the first argument must be a string'
                            )
                        }
                        return allocUnsafe(this, arg)
                    }
                    return from(this, arg, encodingOrOffset, length)
                }

                Buffer.poolSize = 8192 // not used by this implementation

                // TODO: Legacy, not needed anymore. Remove in next major version.
                Buffer._augment = function (arr) {
                    arr.__proto__ = Buffer.prototype
                    return arr
                }

                function from (that, value, encodingOrOffset, length) {
                    if (typeof value === 'number') {
                        throw new TypeError('"value" argument must not be a number')
                    }

                    if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
                        return fromArrayBuffer(that, value, encodingOrOffset, length)
                    }

                    if (typeof value === 'string') {
                        return fromString(that, value, encodingOrOffset)
                    }

                    return fromObject(that, value)
                }

                /**
                 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
                 * if value is a number.
                 * Buffer.from(str[, encoding])
                 * Buffer.from(array)
                 * Buffer.from(buffer)
                 * Buffer.from(arrayBuffer[, byteOffset[, length]])
                 **/
                Buffer.from = function (value, encodingOrOffset, length) {
                    return from(null, value, encodingOrOffset, length)
                }

                if (Buffer.TYPED_ARRAY_SUPPORT) {
                    Buffer.prototype.__proto__ = Uint8Array.prototype
                    Buffer.__proto__ = Uint8Array
                    if (typeof Symbol !== 'undefined' && Symbol.species &&
                        Buffer[Symbol.species] === Buffer) {
                        // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
                        Object.defineProperty(Buffer, Symbol.species, {
                            value: null,
                            configurable: true
                        })
                    }
                }

                function assertSize (size) {
                    if (typeof size !== 'number') {
                        throw new TypeError('"size" argument must be a number')
                    } else if (size < 0) {
                        throw new RangeError('"size" argument must not be negative')
                    }
                }

                function alloc (that, size, fill, encoding) {
                    assertSize(size)
                    if (size <= 0) {
                        return createBuffer(that, size)
                    }
                    if (fill !== undefined) {
                        // Only pay attention to encoding if it's a string. This
                        // prevents accidentally sending in a number that would
                        // be interpretted as a start offset.
                        return typeof encoding === 'string'
                            ? createBuffer(that, size).fill(fill, encoding)
                            : createBuffer(that, size).fill(fill)
                    }
                    return createBuffer(that, size)
                }

                /**
                 * Creates a new filled Buffer instance.
                 * alloc(size[, fill[, encoding]])
                 **/
                Buffer.alloc = function (size, fill, encoding) {
                    return alloc(null, size, fill, encoding)
                }

                function allocUnsafe (that, size) {
                    assertSize(size)
                    that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
                    if (!Buffer.TYPED_ARRAY_SUPPORT) {
                        for (var i = 0; i < size; ++i) {
                            that[i] = 0
                        }
                    }
                    return that
                }

                /**
                 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
                 * */
                Buffer.allocUnsafe = function (size) {
                    return allocUnsafe(null, size)
                }
                /**
                 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
                 */
                Buffer.allocUnsafeSlow = function (size) {
                    return allocUnsafe(null, size)
                }

                function fromString (that, string, encoding) {
                    if (typeof encoding !== 'string' || encoding === '') {
                        encoding = 'utf8'
                    }

                    if (!Buffer.isEncoding(encoding)) {
                        throw new TypeError('"encoding" must be a valid string encoding')
                    }

                    var length = byteLength(string, encoding) | 0
                    that = createBuffer(that, length)

                    var actual = that.write(string, encoding)

                    if (actual !== length) {
                        // Writing a hex string, for example, that contains invalid characters will
                        // cause everything after the first invalid character to be ignored. (e.g.
                        // 'abxxcd' will be treated as 'ab')
                        that = that.slice(0, actual)
                    }

                    return that
                }

                function fromArrayLike (that, array) {
                    var length = array.length < 0 ? 0 : checked(array.length) | 0
                    that = createBuffer(that, length)
                    for (var i = 0; i < length; i += 1) {
                        that[i] = array[i] & 255
                    }
                    return that
                }

                function fromArrayBuffer (that, array, byteOffset, length) {
                    array.byteLength // this throws if `array` is not a valid ArrayBuffer

                    if (byteOffset < 0 || array.byteLength < byteOffset) {
                        throw new RangeError('\'offset\' is out of bounds')
                    }

                    if (array.byteLength < byteOffset + (length || 0)) {
                        throw new RangeError('\'length\' is out of bounds')
                    }

                    if (byteOffset === undefined && length === undefined) {
                        array = new Uint8Array(array)
                    } else if (length === undefined) {
                        array = new Uint8Array(array, byteOffset)
                    } else {
                        array = new Uint8Array(array, byteOffset, length)
                    }

                    if (Buffer.TYPED_ARRAY_SUPPORT) {
                        // Return an augmented `Uint8Array` instance, for best performance
                        that = array
                        that.__proto__ = Buffer.prototype
                    } else {
                        // Fallback: Return an object instance of the Buffer class
                        that = fromArrayLike(that, array)
                    }
                    return that
                }

                function fromObject (that, obj) {
                    if (Buffer.isBuffer(obj)) {
                        var len = checked(obj.length) | 0
                        that = createBuffer(that, len)

                        if (that.length === 0) {
                            return that
                        }

                        obj.copy(that, 0, 0, len)
                        return that
                    }

                    if (obj) {
                        if ((typeof ArrayBuffer !== 'undefined' &&
                            obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
                            if (typeof obj.length !== 'number' || isnan(obj.length)) {
                                return createBuffer(that, 0)
                            }
                            return fromArrayLike(that, obj)
                        }

                        if (obj.type === 'Buffer' && isArray(obj.data)) {
                            return fromArrayLike(that, obj.data)
                        }
                    }

                    throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
                }

                function checked (length) {
                    // Note: cannot use `length < kMaxLength()` here because that fails when
                    // length is NaN (which is otherwise coerced to zero.)
                    if (length >= kMaxLength()) {
                        throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                            'size: 0x' + kMaxLength().toString(16) + ' bytes')
                    }
                    return length | 0
                }

                function SlowBuffer (length) {
                    if (+length != length) { // eslint-disable-line eqeqeq
                        length = 0
                    }
                    return Buffer.alloc(+length)
                }

                Buffer.isBuffer = function isBuffer (b) {
                    return !!(b != null && b._isBuffer)
                }

                Buffer.compare = function compare (a, b) {
                    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
                        throw new TypeError('Arguments must be Buffers')
                    }

                    if (a === b) return 0

                    var x = a.length
                    var y = b.length

                    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                        if (a[i] !== b[i]) {
                            x = a[i]
                            y = b[i]
                            break
                        }
                    }

                    if (x < y) return -1
                    if (y < x) return 1
                    return 0
                }

                Buffer.isEncoding = function isEncoding (encoding) {
                    switch (String(encoding).toLowerCase()) {
                        case 'hex':
                        case 'utf8':
                        case 'utf-8':
                        case 'ascii':
                        case 'latin1':
                        case 'binary':
                        case 'base64':
                        case 'ucs2':
                        case 'ucs-2':
                        case 'utf16le':
                        case 'utf-16le':
                            return true
                        default:
                            return false
                    }
                }

                Buffer.concat = function concat (list, length) {
                    if (!isArray(list)) {
                        throw new TypeError('"list" argument must be an Array of Buffers')
                    }

                    if (list.length === 0) {
                        return Buffer.alloc(0)
                    }

                    var i
                    if (length === undefined) {
                        length = 0
                        for (i = 0; i < list.length; ++i) {
                            length += list[i].length
                        }
                    }

                    var buffer = Buffer.allocUnsafe(length)
                    var pos = 0
                    for (i = 0; i < list.length; ++i) {
                        var buf = list[i]
                        if (!Buffer.isBuffer(buf)) {
                            throw new TypeError('"list" argument must be an Array of Buffers')
                        }
                        buf.copy(buffer, pos)
                        pos += buf.length
                    }
                    return buffer
                }

                function byteLength (string, encoding) {
                    if (Buffer.isBuffer(string)) {
                        return string.length
                    }
                    if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
                        (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
                        return string.byteLength
                    }
                    if (typeof string !== 'string') {
                        string = '' + string
                    }

                    var len = string.length
                    if (len === 0) return 0

                    // Use a for loop to avoid recursion
                    var loweredCase = false
                    for (;;) {
                        switch (encoding) {
                            case 'ascii':
                            case 'latin1':
                            case 'binary':
                                return len
                            case 'utf8':
                            case 'utf-8':
                            case undefined:
                                return utf8ToBytes(string).length
                            case 'ucs2':
                            case 'ucs-2':
                            case 'utf16le':
                            case 'utf-16le':
                                return len * 2
                            case 'hex':
                                return len >>> 1
                            case 'base64':
                                return base64ToBytes(string).length
                            default:
                                if (loweredCase) return utf8ToBytes(string).length // assume utf8
                                encoding = ('' + encoding).toLowerCase()
                                loweredCase = true
                        }
                    }
                }
                Buffer.byteLength = byteLength

                function slowToString (encoding, start, end) {
                    var loweredCase = false

                    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
                    // property of a typed array.

                    // This behaves neither like String nor Uint8Array in that we set start/end
                    // to their upper/lower bounds if the value passed is out of range.
                    // undefined is handled specially as per ECMA-262 6th Edition,
                    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
                    if (start === undefined || start < 0) {
                        start = 0
                    }
                    // Return early if start > this.length. Done here to prevent potential uint32
                    // coercion fail below.
                    if (start > this.length) {
                        return ''
                    }

                    if (end === undefined || end > this.length) {
                        end = this.length
                    }

                    if (end <= 0) {
                        return ''
                    }

                    // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
                    end >>>= 0
                    start >>>= 0

                    if (end <= start) {
                        return ''
                    }

                    if (!encoding) encoding = 'utf8'

                    while (true) {
                        switch (encoding) {
                            case 'hex':
                                return hexSlice(this, start, end)

                            case 'utf8':
                            case 'utf-8':
                                return utf8Slice(this, start, end)

                            case 'ascii':
                                return asciiSlice(this, start, end)

                            case 'latin1':
                            case 'binary':
                                return latin1Slice(this, start, end)

                            case 'base64':
                                return base64Slice(this, start, end)

                            case 'ucs2':
                            case 'ucs-2':
                            case 'utf16le':
                            case 'utf-16le':
                                return utf16leSlice(this, start, end)

                            default:
                                if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
                                encoding = (encoding + '').toLowerCase()
                                loweredCase = true
                        }
                    }
                }

                // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
                // Buffer instances.
                Buffer.prototype._isBuffer = true

                function swap (b, n, m) {
                    var i = b[n]
                    b[n] = b[m]
                    b[m] = i
                }

                Buffer.prototype.swap16 = function swap16 () {
                    var len = this.length
                    if (len % 2 !== 0) {
                        throw new RangeError('Buffer size must be a multiple of 16-bits')
                    }
                    for (var i = 0; i < len; i += 2) {
                        swap(this, i, i + 1)
                    }
                    return this
                }

                Buffer.prototype.swap32 = function swap32 () {
                    var len = this.length
                    if (len % 4 !== 0) {
                        throw new RangeError('Buffer size must be a multiple of 32-bits')
                    }
                    for (var i = 0; i < len; i += 4) {
                        swap(this, i, i + 3)
                        swap(this, i + 1, i + 2)
                    }
                    return this
                }

                Buffer.prototype.swap64 = function swap64 () {
                    var len = this.length
                    if (len % 8 !== 0) {
                        throw new RangeError('Buffer size must be a multiple of 64-bits')
                    }
                    for (var i = 0; i < len; i += 8) {
                        swap(this, i, i + 7)
                        swap(this, i + 1, i + 6)
                        swap(this, i + 2, i + 5)
                        swap(this, i + 3, i + 4)
                    }
                    return this
                }

                Buffer.prototype.toString = function toString () {
                    var length = this.length | 0
                    if (length === 0) return ''
                    if (arguments.length === 0) return utf8Slice(this, 0, length)
                    return slowToString.apply(this, arguments)
                }

                Buffer.prototype.equals = function equals (b) {
                    if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
                    if (this === b) return true
                    return Buffer.compare(this, b) === 0
                }

                Buffer.prototype.inspect = function inspect () {
                    var str = ''
                    var max = exports.INSPECT_MAX_BYTES
                    if (this.length > 0) {
                        str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
                        if (this.length > max) str += ' ... '
                    }
                    return '<Buffer ' + str + '>'
                }

                Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
                    if (!Buffer.isBuffer(target)) {
                        throw new TypeError('Argument must be a Buffer')
                    }

                    if (start === undefined) {
                        start = 0
                    }
                    if (end === undefined) {
                        end = target ? target.length : 0
                    }
                    if (thisStart === undefined) {
                        thisStart = 0
                    }
                    if (thisEnd === undefined) {
                        thisEnd = this.length
                    }

                    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
                        throw new RangeError('out of range index')
                    }

                    if (thisStart >= thisEnd && start >= end) {
                        return 0
                    }
                    if (thisStart >= thisEnd) {
                        return -1
                    }
                    if (start >= end) {
                        return 1
                    }

                    start >>>= 0
                    end >>>= 0
                    thisStart >>>= 0
                    thisEnd >>>= 0

                    if (this === target) return 0

                    var x = thisEnd - thisStart
                    var y = end - start
                    var len = Math.min(x, y)

                    var thisCopy = this.slice(thisStart, thisEnd)
                    var targetCopy = target.slice(start, end)

                    for (var i = 0; i < len; ++i) {
                        if (thisCopy[i] !== targetCopy[i]) {
                            x = thisCopy[i]
                            y = targetCopy[i]
                            break
                        }
                    }

                    if (x < y) return -1
                    if (y < x) return 1
                    return 0
                }

                // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
                // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
                //
                // Arguments:
                // - buffer - a Buffer to search
                // - val - a string, Buffer, or number
                // - byteOffset - an index into `buffer`; will be clamped to an int32
                // - encoding - an optional encoding, relevant is val is a string
                // - dir - true for indexOf, false for lastIndexOf
                function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
                    // Empty buffer means no match
                    if (buffer.length === 0) return -1

                    // Normalize byteOffset
                    if (typeof byteOffset === 'string') {
                        encoding = byteOffset
                        byteOffset = 0
                    } else if (byteOffset > 0x7fffffff) {
                        byteOffset = 0x7fffffff
                    } else if (byteOffset < -0x80000000) {
                        byteOffset = -0x80000000
                    }
                    byteOffset = +byteOffset  // Coerce to Number.
                    if (isNaN(byteOffset)) {
                        // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
                        byteOffset = dir ? 0 : (buffer.length - 1)
                    }

                    // Normalize byteOffset: negative offsets start from the end of the buffer
                    if (byteOffset < 0) byteOffset = buffer.length + byteOffset
                    if (byteOffset >= buffer.length) {
                        if (dir) return -1
                        else byteOffset = buffer.length - 1
                    } else if (byteOffset < 0) {
                        if (dir) byteOffset = 0
                        else return -1
                    }

                    // Normalize val
                    if (typeof val === 'string') {
                        val = Buffer.from(val, encoding)
                    }

                    // Finally, search either indexOf (if dir is true) or lastIndexOf
                    if (Buffer.isBuffer(val)) {
                        // Special case: looking for empty string/buffer always fails
                        if (val.length === 0) {
                            return -1
                        }
                        return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
                    } else if (typeof val === 'number') {
                        val = val & 0xFF // Search for a byte value [0-255]
                        if (Buffer.TYPED_ARRAY_SUPPORT &&
                            typeof Uint8Array.prototype.indexOf === 'function') {
                            if (dir) {
                                return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
                            } else {
                                return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
                            }
                        }
                        return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
                    }

                    throw new TypeError('val must be string, number or Buffer')
                }

                function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
                    var indexSize = 1
                    var arrLength = arr.length
                    var valLength = val.length

                    if (encoding !== undefined) {
                        encoding = String(encoding).toLowerCase()
                        if (encoding === 'ucs2' || encoding === 'ucs-2' ||
                            encoding === 'utf16le' || encoding === 'utf-16le') {
                            if (arr.length < 2 || val.length < 2) {
                                return -1
                            }
                            indexSize = 2
                            arrLength /= 2
                            valLength /= 2
                            byteOffset /= 2
                        }
                    }

                    function read (buf, i) {
                        if (indexSize === 1) {
                            return buf[i]
                        } else {
                            return buf.readUInt16BE(i * indexSize)
                        }
                    }

                    var i
                    if (dir) {
                        var foundIndex = -1
                        for (i = byteOffset; i < arrLength; i++) {
                            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                                if (foundIndex === -1) foundIndex = i
                                if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
                            } else {
                                if (foundIndex !== -1) i -= i - foundIndex
                                foundIndex = -1
                            }
                        }
                    } else {
                        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
                        for (i = byteOffset; i >= 0; i--) {
                            var found = true
                            for (var j = 0; j < valLength; j++) {
                                if (read(arr, i + j) !== read(val, j)) {
                                    found = false
                                    break
                                }
                            }
                            if (found) return i
                        }
                    }

                    return -1
                }

                Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
                    return this.indexOf(val, byteOffset, encoding) !== -1
                }

                Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
                    return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
                }

                Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
                    return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
                }

                function hexWrite (buf, string, offset, length) {
                    offset = Number(offset) || 0
                    var remaining = buf.length - offset
                    if (!length) {
                        length = remaining
                    } else {
                        length = Number(length)
                        if (length > remaining) {
                            length = remaining
                        }
                    }

                    // must be an even number of digits
                    var strLen = string.length
                    if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

                    if (length > strLen / 2) {
                        length = strLen / 2
                    }
                    for (var i = 0; i < length; ++i) {
                        var parsed = parseInt(string.substr(i * 2, 2), 16)
                        if (isNaN(parsed)) return i
                        buf[offset + i] = parsed
                    }
                    return i
                }

                function utf8Write (buf, string, offset, length) {
                    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
                }

                function asciiWrite (buf, string, offset, length) {
                    return blitBuffer(asciiToBytes(string), buf, offset, length)
                }

                function latin1Write (buf, string, offset, length) {
                    return asciiWrite(buf, string, offset, length)
                }

                function base64Write (buf, string, offset, length) {
                    return blitBuffer(base64ToBytes(string), buf, offset, length)
                }

                function ucs2Write (buf, string, offset, length) {
                    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
                }

                Buffer.prototype.write = function write (string, offset, length, encoding) {
                    // Buffer#write(string)
                    if (offset === undefined) {
                        encoding = 'utf8'
                        length = this.length
                        offset = 0
                        // Buffer#write(string, encoding)
                    } else if (length === undefined && typeof offset === 'string') {
                        encoding = offset
                        length = this.length
                        offset = 0
                        // Buffer#write(string, offset[, length][, encoding])
                    } else if (isFinite(offset)) {
                        offset = offset | 0
                        if (isFinite(length)) {
                            length = length | 0
                            if (encoding === undefined) encoding = 'utf8'
                        } else {
                            encoding = length
                            length = undefined
                        }
                        // legacy write(string, encoding, offset, length) - remove in v0.13
                    } else {
                        throw new Error(
                            'Buffer.write(string, encoding, offset[, length]) is no longer supported'
                        )
                    }

                    var remaining = this.length - offset
                    if (length === undefined || length > remaining) length = remaining

                    if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
                        throw new RangeError('Attempt to write outside buffer bounds')
                    }

                    if (!encoding) encoding = 'utf8'

                    var loweredCase = false
                    for (;;) {
                        switch (encoding) {
                            case 'hex':
                                return hexWrite(this, string, offset, length)

                            case 'utf8':
                            case 'utf-8':
                                return utf8Write(this, string, offset, length)

                            case 'ascii':
                                return asciiWrite(this, string, offset, length)

                            case 'latin1':
                            case 'binary':
                                return latin1Write(this, string, offset, length)

                            case 'base64':
                                // Warning: maxLength not taken into account in base64Write
                                return base64Write(this, string, offset, length)

                            case 'ucs2':
                            case 'ucs-2':
                            case 'utf16le':
                            case 'utf-16le':
                                return ucs2Write(this, string, offset, length)

                            default:
                                if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
                                encoding = ('' + encoding).toLowerCase()
                                loweredCase = true
                        }
                    }
                }

                Buffer.prototype.toJSON = function toJSON () {
                    return {
                        type: 'Buffer',
                        data: Array.prototype.slice.call(this._arr || this, 0)
                    }
                }

                function base64Slice (buf, start, end) {
                    if (start === 0 && end === buf.length) {
                        return base64.fromByteArray(buf)
                    } else {
                        return base64.fromByteArray(buf.slice(start, end))
                    }
                }

                function utf8Slice (buf, start, end) {
                    end = Math.min(buf.length, end)
                    var res = []

                    var i = start
                    while (i < end) {
                        var firstByte = buf[i]
                        var codePoint = null
                        var bytesPerSequence = (firstByte > 0xEF) ? 4
                            : (firstByte > 0xDF) ? 3
                            : (firstByte > 0xBF) ? 2
                            : 1

                        if (i + bytesPerSequence <= end) {
                            var secondByte, thirdByte, fourthByte, tempCodePoint

                            switch (bytesPerSequence) {
                                case 1:
                                    if (firstByte < 0x80) {
                                        codePoint = firstByte
                                    }
                                    break
                                case 2:
                                    secondByte = buf[i + 1]
                                    if ((secondByte & 0xC0) === 0x80) {
                                        tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
                                        if (tempCodePoint > 0x7F) {
                                            codePoint = tempCodePoint
                                        }
                                    }
                                    break
                                case 3:
                                    secondByte = buf[i + 1]
                                    thirdByte = buf[i + 2]
                                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
                                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                                            codePoint = tempCodePoint
                                        }
                                    }
                                    break
                                case 4:
                                    secondByte = buf[i + 1]
                                    thirdByte = buf[i + 2]
                                    fourthByte = buf[i + 3]
                                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
                                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                                            codePoint = tempCodePoint
                                        }
                                    }
                            }
                        }

                        if (codePoint === null) {
                            // we did not generate a valid codePoint so insert a
                            // replacement char (U+FFFD) and advance only 1 byte
                            codePoint = 0xFFFD
                            bytesPerSequence = 1
                        } else if (codePoint > 0xFFFF) {
                            // encode to utf16 (surrogate pair dance)
                            codePoint -= 0x10000
                            res.push(codePoint >>> 10 & 0x3FF | 0xD800)
                            codePoint = 0xDC00 | codePoint & 0x3FF
                        }

                        res.push(codePoint)
                        i += bytesPerSequence
                    }

                    return decodeCodePointsArray(res)
                }

                // Based on http://stackoverflow.com/a/22747272/680742, the browser with
                // the lowest limit is Chrome, with 0x10000 args.
                // We go 1 magnitude less, for safety
                var MAX_ARGUMENTS_LENGTH = 0x1000

                function decodeCodePointsArray (codePoints) {
                    var len = codePoints.length
                    if (len <= MAX_ARGUMENTS_LENGTH) {
                        return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
                    }

                    // Decode in chunks to avoid "call stack size exceeded".
                    var res = ''
                    var i = 0
                    while (i < len) {
                        res += String.fromCharCode.apply(
                            String,
                            codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
                        )
                    }
                    return res
                }

                function asciiSlice (buf, start, end) {
                    var ret = ''
                    end = Math.min(buf.length, end)

                    for (var i = start; i < end; ++i) {
                        ret += String.fromCharCode(buf[i] & 0x7F)
                    }
                    return ret
                }

                function latin1Slice (buf, start, end) {
                    var ret = ''
                    end = Math.min(buf.length, end)

                    for (var i = start; i < end; ++i) {
                        ret += String.fromCharCode(buf[i])
                    }
                    return ret
                }

                function hexSlice (buf, start, end) {
                    var len = buf.length

                    if (!start || start < 0) start = 0
                    if (!end || end < 0 || end > len) end = len

                    var out = ''
                    for (var i = start; i < end; ++i) {
                        out += toHex(buf[i])
                    }
                    return out
                }

                function utf16leSlice (buf, start, end) {
                    var bytes = buf.slice(start, end)
                    var res = ''
                    for (var i = 0; i < bytes.length; i += 2) {
                        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
                    }
                    return res
                }

                Buffer.prototype.slice = function slice (start, end) {
                    var len = this.length
                    start = ~~start
                    end = end === undefined ? len : ~~end

                    if (start < 0) {
                        start += len
                        if (start < 0) start = 0
                    } else if (start > len) {
                        start = len
                    }

                    if (end < 0) {
                        end += len
                        if (end < 0) end = 0
                    } else if (end > len) {
                        end = len
                    }

                    if (end < start) end = start

                    var newBuf
                    if (Buffer.TYPED_ARRAY_SUPPORT) {
                        newBuf = this.subarray(start, end)
                        newBuf.__proto__ = Buffer.prototype
                    } else {
                        var sliceLen = end - start
                        newBuf = new Buffer(sliceLen, undefined)
                        for (var i = 0; i < sliceLen; ++i) {
                            newBuf[i] = this[i + start]
                        }
                    }

                    return newBuf
                }

                /*
                 * Need to make sure that buffer isn't trying to write out of bounds.
                 */
                function checkOffset (offset, ext, length) {
                    if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
                    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
                }

                Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
                    offset = offset | 0
                    byteLength = byteLength | 0
                    if (!noAssert) checkOffset(offset, byteLength, this.length)

                    var val = this[offset]
                    var mul = 1
                    var i = 0
                    while (++i < byteLength && (mul *= 0x100)) {
                        val += this[offset + i] * mul
                    }

                    return val
                }

                Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
                    offset = offset | 0
                    byteLength = byteLength | 0
                    if (!noAssert) {
                        checkOffset(offset, byteLength, this.length)
                    }

                    var val = this[offset + --byteLength]
                    var mul = 1
                    while (byteLength > 0 && (mul *= 0x100)) {
                        val += this[offset + --byteLength] * mul
                    }

                    return val
                }

                Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
                    if (!noAssert) checkOffset(offset, 1, this.length)
                    return this[offset]
                }

                Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
                    if (!noAssert) checkOffset(offset, 2, this.length)
                    return this[offset] | (this[offset + 1] << 8)
                }

                Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
                    if (!noAssert) checkOffset(offset, 2, this.length)
                    return (this[offset] << 8) | this[offset + 1]
                }

                Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
                    if (!noAssert) checkOffset(offset, 4, this.length)

                    return ((this[offset]) |
                        (this[offset + 1] << 8) |
                        (this[offset + 2] << 16)) +
                        (this[offset + 3] * 0x1000000)
                }

                Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
                    if (!noAssert) checkOffset(offset, 4, this.length)

                    return (this[offset] * 0x1000000) +
                        ((this[offset + 1] << 16) |
                        (this[offset + 2] << 8) |
                        this[offset + 3])
                }

                Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
                    offset = offset | 0
                    byteLength = byteLength | 0
                    if (!noAssert) checkOffset(offset, byteLength, this.length)

                    var val = this[offset]
                    var mul = 1
                    var i = 0
                    while (++i < byteLength && (mul *= 0x100)) {
                        val += this[offset + i] * mul
                    }
                    mul *= 0x80

                    if (val >= mul) val -= Math.pow(2, 8 * byteLength)

                    return val
                }

                Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
                    offset = offset | 0
                    byteLength = byteLength | 0
                    if (!noAssert) checkOffset(offset, byteLength, this.length)

                    var i = byteLength
                    var mul = 1
                    var val = this[offset + --i]
                    while (i > 0 && (mul *= 0x100)) {
                        val += this[offset + --i] * mul
                    }
                    mul *= 0x80

                    if (val >= mul) val -= Math.pow(2, 8 * byteLength)

                    return val
                }

                Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
                    if (!noAssert) checkOffset(offset, 1, this.length)
                    if (!(this[offset] & 0x80)) return (this[offset])
                    return ((0xff - this[offset] + 1) * -1)
                }

                Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
                    if (!noAssert) checkOffset(offset, 2, this.length)
                    var val = this[offset] | (this[offset + 1] << 8)
                    return (val & 0x8000) ? val | 0xFFFF0000 : val
                }

                Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
                    if (!noAssert) checkOffset(offset, 2, this.length)
                    var val = this[offset + 1] | (this[offset] << 8)
                    return (val & 0x8000) ? val | 0xFFFF0000 : val
                }

                Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
                    if (!noAssert) checkOffset(offset, 4, this.length)

                    return (this[offset]) |
                        (this[offset + 1] << 8) |
                        (this[offset + 2] << 16) |
                        (this[offset + 3] << 24)
                }

                Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
                    if (!noAssert) checkOffset(offset, 4, this.length)

                    return (this[offset] << 24) |
                        (this[offset + 1] << 16) |
                        (this[offset + 2] << 8) |
                        (this[offset + 3])
                }

                Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
                    if (!noAssert) checkOffset(offset, 4, this.length)
                    return ieee754.read(this, offset, true, 23, 4)
                }

                Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
                    if (!noAssert) checkOffset(offset, 4, this.length)
                    return ieee754.read(this, offset, false, 23, 4)
                }

                Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
                    if (!noAssert) checkOffset(offset, 8, this.length)
                    return ieee754.read(this, offset, true, 52, 8)
                }

                Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
                    if (!noAssert) checkOffset(offset, 8, this.length)
                    return ieee754.read(this, offset, false, 52, 8)
                }

                function checkInt (buf, value, offset, ext, max, min) {
                    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
                    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
                    if (offset + ext > buf.length) throw new RangeError('Index out of range')
                }

                Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
                    value = +value
                    offset = offset | 0
                    byteLength = byteLength | 0
                    if (!noAssert) {
                        var maxBytes = Math.pow(2, 8 * byteLength) - 1
                        checkInt(this, value, offset, byteLength, maxBytes, 0)
                    }

                    var mul = 1
                    var i = 0
                    this[offset] = value & 0xFF
                    while (++i < byteLength && (mul *= 0x100)) {
                        this[offset + i] = (value / mul) & 0xFF
                    }

                    return offset + byteLength
                }

                Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
                    value = +value
                    offset = offset | 0
                    byteLength = byteLength | 0
                    if (!noAssert) {
                        var maxBytes = Math.pow(2, 8 * byteLength) - 1
                        checkInt(this, value, offset, byteLength, maxBytes, 0)
                    }

                    var i = byteLength - 1
                    var mul = 1
                    this[offset + i] = value & 0xFF
                    while (--i >= 0 && (mul *= 0x100)) {
                        this[offset + i] = (value / mul) & 0xFF
                    }

                    return offset + byteLength
                }

                Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
                    value = +value
                    offset = offset | 0
                    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
                    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
                    this[offset] = (value & 0xff)
                    return offset + 1
                }

                function objectWriteUInt16 (buf, value, offset, littleEndian) {
                    if (value < 0) value = 0xffff + value + 1
                    for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
                        buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
                            (littleEndian ? i : 1 - i) * 8
                    }
                }

                Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
                    value = +value
                    offset = offset | 0
                    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
                    if (Buffer.TYPED_ARRAY_SUPPORT) {
                        this[offset] = (value & 0xff)
                        this[offset + 1] = (value >>> 8)
                    } else {
                        objectWriteUInt16(this, value, offset, true)
                    }
                    return offset + 2
                }

                Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
                    value = +value
                    offset = offset | 0
                    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
                    if (Buffer.TYPED_ARRAY_SUPPORT) {
                        this[offset] = (value >>> 8)
                        this[offset + 1] = (value & 0xff)
                    } else {
                        objectWriteUInt16(this, value, offset, false)
                    }
                    return offset + 2
                }

                function objectWriteUInt32 (buf, value, offset, littleEndian) {
                    if (value < 0) value = 0xffffffff + value + 1
                    for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
                        buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
                    }
                }

                Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
                    value = +value
                    offset = offset | 0
                    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
                    if (Buffer.TYPED_ARRAY_SUPPORT) {
                        this[offset + 3] = (value >>> 24)
                        this[offset + 2] = (value >>> 16)
                        this[offset + 1] = (value >>> 8)
                        this[offset] = (value & 0xff)
                    } else {
                        objectWriteUInt32(this, value, offset, true)
                    }
                    return offset + 4
                }

                Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
                    value = +value
                    offset = offset | 0
                    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
                    if (Buffer.TYPED_ARRAY_SUPPORT) {
                        this[offset] = (value >>> 24)
                        this[offset + 1] = (value >>> 16)
                        this[offset + 2] = (value >>> 8)
                        this[offset + 3] = (value & 0xff)
                    } else {
                        objectWriteUInt32(this, value, offset, false)
                    }
                    return offset + 4
                }

                Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
                    value = +value
                    offset = offset | 0
                    if (!noAssert) {
                        var limit = Math.pow(2, 8 * byteLength - 1)

                        checkInt(this, value, offset, byteLength, limit - 1, -limit)
                    }

                    var i = 0
                    var mul = 1
                    var sub = 0
                    this[offset] = value & 0xFF
                    while (++i < byteLength && (mul *= 0x100)) {
                        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                            sub = 1
                        }
                        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
                    }

                    return offset + byteLength
                }

                Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
                    value = +value
                    offset = offset | 0
                    if (!noAssert) {
                        var limit = Math.pow(2, 8 * byteLength - 1)

                        checkInt(this, value, offset, byteLength, limit - 1, -limit)
                    }

                    var i = byteLength - 1
                    var mul = 1
                    var sub = 0
                    this[offset + i] = value & 0xFF
                    while (--i >= 0 && (mul *= 0x100)) {
                        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                            sub = 1
                        }
                        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
                    }

                    return offset + byteLength
                }

                Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
                    value = +value
                    offset = offset | 0
                    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
                    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
                    if (value < 0) value = 0xff + value + 1
                    this[offset] = (value & 0xff)
                    return offset + 1
                }

                Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
                    value = +value
                    offset = offset | 0
                    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
                    if (Buffer.TYPED_ARRAY_SUPPORT) {
                        this[offset] = (value & 0xff)
                        this[offset + 1] = (value >>> 8)
                    } else {
                        objectWriteUInt16(this, value, offset, true)
                    }
                    return offset + 2
                }

                Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
                    value = +value
                    offset = offset | 0
                    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
                    if (Buffer.TYPED_ARRAY_SUPPORT) {
                        this[offset] = (value >>> 8)
                        this[offset + 1] = (value & 0xff)
                    } else {
                        objectWriteUInt16(this, value, offset, false)
                    }
                    return offset + 2
                }

                Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
                    value = +value
                    offset = offset | 0
                    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
                    if (Buffer.TYPED_ARRAY_SUPPORT) {
                        this[offset] = (value & 0xff)
                        this[offset + 1] = (value >>> 8)
                        this[offset + 2] = (value >>> 16)
                        this[offset + 3] = (value >>> 24)
                    } else {
                        objectWriteUInt32(this, value, offset, true)
                    }
                    return offset + 4
                }

                Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
                    value = +value
                    offset = offset | 0
                    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
                    if (value < 0) value = 0xffffffff + value + 1
                    if (Buffer.TYPED_ARRAY_SUPPORT) {
                        this[offset] = (value >>> 24)
                        this[offset + 1] = (value >>> 16)
                        this[offset + 2] = (value >>> 8)
                        this[offset + 3] = (value & 0xff)
                    } else {
                        objectWriteUInt32(this, value, offset, false)
                    }
                    return offset + 4
                }

                function checkIEEE754 (buf, value, offset, ext, max, min) {
                    if (offset + ext > buf.length) throw new RangeError('Index out of range')
                    if (offset < 0) throw new RangeError('Index out of range')
                }

                function writeFloat (buf, value, offset, littleEndian, noAssert) {
                    if (!noAssert) {
                        checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
                    }
                    ieee754.write(buf, value, offset, littleEndian, 23, 4)
                    return offset + 4
                }

                Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
                    return writeFloat(this, value, offset, true, noAssert)
                }

                Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
                    return writeFloat(this, value, offset, false, noAssert)
                }

                function writeDouble (buf, value, offset, littleEndian, noAssert) {
                    if (!noAssert) {
                        checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
                    }
                    ieee754.write(buf, value, offset, littleEndian, 52, 8)
                    return offset + 8
                }

                Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
                    return writeDouble(this, value, offset, true, noAssert)
                }

                Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
                    return writeDouble(this, value, offset, false, noAssert)
                }

                // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
                Buffer.prototype.copy = function copy (target, targetStart, start, end) {
                    if (!start) start = 0
                    if (!end && end !== 0) end = this.length
                    if (targetStart >= target.length) targetStart = target.length
                    if (!targetStart) targetStart = 0
                    if (end > 0 && end < start) end = start

                    // Copy 0 bytes; we're done
                    if (end === start) return 0
                    if (target.length === 0 || this.length === 0) return 0

                    // Fatal error conditions
                    if (targetStart < 0) {
                        throw new RangeError('targetStart out of bounds')
                    }
                    if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
                    if (end < 0) throw new RangeError('sourceEnd out of bounds')

                    // Are we oob?
                    if (end > this.length) end = this.length
                    if (target.length - targetStart < end - start) {
                        end = target.length - targetStart + start
                    }

                    var len = end - start
                    var i

                    if (this === target && start < targetStart && targetStart < end) {
                        // descending copy from end
                        for (i = len - 1; i >= 0; --i) {
                            target[i + targetStart] = this[i + start]
                        }
                    } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
                        // ascending copy from start
                        for (i = 0; i < len; ++i) {
                            target[i + targetStart] = this[i + start]
                        }
                    } else {
                        Uint8Array.prototype.set.call(
                            target,
                            this.subarray(start, start + len),
                            targetStart
                        )
                    }

                    return len
                }

                // Usage:
                //    buffer.fill(number[, offset[, end]])
                //    buffer.fill(buffer[, offset[, end]])
                //    buffer.fill(string[, offset[, end]][, encoding])
                Buffer.prototype.fill = function fill (val, start, end, encoding) {
                    // Handle string cases:
                    if (typeof val === 'string') {
                        if (typeof start === 'string') {
                            encoding = start
                            start = 0
                            end = this.length
                        } else if (typeof end === 'string') {
                            encoding = end
                            end = this.length
                        }
                        if (val.length === 1) {
                            var code = val.charCodeAt(0)
                            if (code < 256) {
                                val = code
                            }
                        }
                        if (encoding !== undefined && typeof encoding !== 'string') {
                            throw new TypeError('encoding must be a string')
                        }
                        if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
                            throw new TypeError('Unknown encoding: ' + encoding)
                        }
                    } else if (typeof val === 'number') {
                        val = val & 255
                    }

                    // Invalid ranges are not set to a default, so can range check early.
                    if (start < 0 || this.length < start || this.length < end) {
                        throw new RangeError('Out of range index')
                    }

                    if (end <= start) {
                        return this
                    }

                    start = start >>> 0
                    end = end === undefined ? this.length : end >>> 0

                    if (!val) val = 0

                    var i
                    if (typeof val === 'number') {
                        for (i = start; i < end; ++i) {
                            this[i] = val
                        }
                    } else {
                        var bytes = Buffer.isBuffer(val)
                            ? val
                            : utf8ToBytes(new Buffer(val, encoding).toString())
                        var len = bytes.length
                        for (i = 0; i < end - start; ++i) {
                            this[i + start] = bytes[i % len]
                        }
                    }

                    return this
                }

                // HELPER FUNCTIONS
                // ================

                var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

                function base64clean (str) {
                    // Node strips out invalid characters like \n and \t from the string, base64-js does not
                    str = stringtrim(str).replace(INVALID_BASE64_RE, '')
                    // Node converts strings with length < 2 to ''
                    if (str.length < 2) return ''
                    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
                    while (str.length % 4 !== 0) {
                        str = str + '='
                    }
                    return str
                }

                function stringtrim (str) {
                    if (str.trim) return str.trim()
                    return str.replace(/^\s+|\s+$/g, '')
                }

                function toHex (n) {
                    if (n < 16) return '0' + n.toString(16)
                    return n.toString(16)
                }

                function utf8ToBytes (string, units) {
                    units = units || Infinity
                    var codePoint
                    var length = string.length
                    var leadSurrogate = null
                    var bytes = []

                    for (var i = 0; i < length; ++i) {
                        codePoint = string.charCodeAt(i)

                        // is surrogate component
                        if (codePoint > 0xD7FF && codePoint < 0xE000) {
                            // last char was a lead
                            if (!leadSurrogate) {
                                // no lead yet
                                if (codePoint > 0xDBFF) {
                                    // unexpected trail
                                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                                    continue
                                } else if (i + 1 === length) {
                                    // unpaired lead
                                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                                    continue
                                }

                                // valid lead
                                leadSurrogate = codePoint

                                continue
                            }

                            // 2 leads in a row
                            if (codePoint < 0xDC00) {
                                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                                leadSurrogate = codePoint
                                continue
                            }

                            // valid surrogate pair
                            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
                        } else if (leadSurrogate) {
                            // valid bmp char, but last char was a lead
                            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                        }

                        leadSurrogate = null

                        // encode utf8
                        if (codePoint < 0x80) {
                            if ((units -= 1) < 0) break
                            bytes.push(codePoint)
                        } else if (codePoint < 0x800) {
                            if ((units -= 2) < 0) break
                            bytes.push(
                                codePoint >> 0x6 | 0xC0,
                                codePoint & 0x3F | 0x80
                            )
                        } else if (codePoint < 0x10000) {
                            if ((units -= 3) < 0) break
                            bytes.push(
                                codePoint >> 0xC | 0xE0,
                                codePoint >> 0x6 & 0x3F | 0x80,
                                codePoint & 0x3F | 0x80
                            )
                        } else if (codePoint < 0x110000) {
                            if ((units -= 4) < 0) break
                            bytes.push(
                                codePoint >> 0x12 | 0xF0,
                                codePoint >> 0xC & 0x3F | 0x80,
                                codePoint >> 0x6 & 0x3F | 0x80,
                                codePoint & 0x3F | 0x80
                            )
                        } else {
                            throw new Error('Invalid code point')
                        }
                    }

                    return bytes
                }

                function asciiToBytes (str) {
                    var byteArray = []
                    for (var i = 0; i < str.length; ++i) {
                        // Node's code seems to be doing this and not & 0x7F..
                        byteArray.push(str.charCodeAt(i) & 0xFF)
                    }
                    return byteArray
                }

                function utf16leToBytes (str, units) {
                    var c, hi, lo
                    var byteArray = []
                    for (var i = 0; i < str.length; ++i) {
                        if ((units -= 2) < 0) break

                        c = str.charCodeAt(i)
                        hi = c >> 8
                        lo = c % 256
                        byteArray.push(lo)
                        byteArray.push(hi)
                    }

                    return byteArray
                }

                function base64ToBytes (str) {
                    return base64.toByteArray(base64clean(str))
                }

                function blitBuffer (src, dst, offset, length) {
                    for (var i = 0; i < length; ++i) {
                        if ((i + offset >= dst.length) || (i >= src.length)) break
                        dst[i + offset] = src[i]
                    }
                    return i
                }

                function isnan (val) {
                    return val !== val // eslint-disable-line no-self-compare
                }

                /* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

            /***/ }),
        /* 3 */
        /***/ (function(module, exports) {

            'use strict'

            exports.byteLength = byteLength
            exports.toByteArray = toByteArray
            exports.fromByteArray = fromByteArray

            var lookup = []
            var revLookup = []
            var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

            var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
            for (var i = 0, len = code.length; i < len; ++i) {
                lookup[i] = code[i]
                revLookup[code.charCodeAt(i)] = i
            }

            revLookup['-'.charCodeAt(0)] = 62
            revLookup['_'.charCodeAt(0)] = 63

            function placeHoldersCount (b64) {
                var len = b64.length
                if (len % 4 > 0) {
                    throw new Error('Invalid string. Length must be a multiple of 4')
                }

                // the number of equal signs (place holders)
                // if there are two placeholders, than the two characters before it
                // represent one byte
                // if there is only one, then the three characters before it represent 2 bytes
                // this is just a cheap hack to not do indexOf twice
                return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
            }

            function byteLength (b64) {
                // base64 is 4/3 + up to two characters of the original data
                return (b64.length * 3 / 4) - placeHoldersCount(b64)
            }

            function toByteArray (b64) {
                var i, l, tmp, placeHolders, arr
                var len = b64.length
                placeHolders = placeHoldersCount(b64)

                arr = new Arr((len * 3 / 4) - placeHolders)

                // if there are placeholders, only get up to the last complete 4 chars
                l = placeHolders > 0 ? len - 4 : len

                var L = 0

                for (i = 0; i < l; i += 4) {
                    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
                    arr[L++] = (tmp >> 16) & 0xFF
                    arr[L++] = (tmp >> 8) & 0xFF
                    arr[L++] = tmp & 0xFF
                }

                if (placeHolders === 2) {
                    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
                    arr[L++] = tmp & 0xFF
                } else if (placeHolders === 1) {
                    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
                    arr[L++] = (tmp >> 8) & 0xFF
                    arr[L++] = tmp & 0xFF
                }

                return arr
            }

            function tripletToBase64 (num) {
                return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
            }

            function encodeChunk (uint8, start, end) {
                var tmp
                var output = []
                for (var i = start; i < end; i += 3) {
                    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
                    output.push(tripletToBase64(tmp))
                }
                return output.join('')
            }

            function fromByteArray (uint8) {
                var tmp
                var len = uint8.length
                var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
                var output = ''
                var parts = []
                var maxChunkLength = 16383 // must be multiple of 3

                // go through the array every three bytes, we'll deal with trailing stuff later
                for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
                    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
                }

                // pad the end with zeros, but make sure to not forget the extra bytes
                if (extraBytes === 1) {
                    tmp = uint8[len - 1]
                    output += lookup[tmp >> 2]
                    output += lookup[(tmp << 4) & 0x3F]
                    output += '=='
                } else if (extraBytes === 2) {
                    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
                    output += lookup[tmp >> 10]
                    output += lookup[(tmp >> 4) & 0x3F]
                    output += lookup[(tmp << 2) & 0x3F]
                    output += '='
                }

                parts.push(output)

                return parts.join('')
            }


            /***/ }),
        /* 4 */
        /***/ (function(module, exports) {

            exports.read = function (buffer, offset, isLE, mLen, nBytes) {
                var e, m
                var eLen = nBytes * 8 - mLen - 1
                var eMax = (1 << eLen) - 1
                var eBias = eMax >> 1
                var nBits = -7
                var i = isLE ? (nBytes - 1) : 0
                var d = isLE ? -1 : 1
                var s = buffer[offset + i]

                i += d

                e = s & ((1 << (-nBits)) - 1)
                s >>= (-nBits)
                nBits += eLen
                for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

                m = e & ((1 << (-nBits)) - 1)
                e >>= (-nBits)
                nBits += mLen
                for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

                if (e === 0) {
                    e = 1 - eBias
                } else if (e === eMax) {
                    return m ? NaN : ((s ? -1 : 1) * Infinity)
                } else {
                    m = m + Math.pow(2, mLen)
                    e = e - eBias
                }
                return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
            }

            exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
                var e, m, c
                var eLen = nBytes * 8 - mLen - 1
                var eMax = (1 << eLen) - 1
                var eBias = eMax >> 1
                var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
                var i = isLE ? 0 : (nBytes - 1)
                var d = isLE ? 1 : -1
                var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

                value = Math.abs(value)

                if (isNaN(value) || value === Infinity) {
                    m = isNaN(value) ? 1 : 0
                    e = eMax
                } else {
                    e = Math.floor(Math.log(value) / Math.LN2)
                    if (value * (c = Math.pow(2, -e)) < 1) {
                        e--
                        c *= 2
                    }
                    if (e + eBias >= 1) {
                        value += rt / c
                    } else {
                        value += rt * Math.pow(2, 1 - eBias)
                    }
                    if (value * c >= 2) {
                        e++
                        c /= 2
                    }

                    if (e + eBias >= eMax) {
                        m = 0
                        e = eMax
                    } else if (e + eBias >= 1) {
                        m = (value * c - 1) * Math.pow(2, mLen)
                        e = e + eBias
                    } else {
                        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
                        e = 0
                    }
                }

                for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

                e = (e << mLen) | m
                eLen += mLen
                for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

                buffer[offset + i - d] |= s * 128
            }


            /***/ }),
        /* 5 */
        /***/ (function(module, exports) {

            var toString = {}.toString;

            module.exports = Array.isArray || function (arr) {
                    return toString.call(arr) == '[object Array]';
                };


            /***/ }),
        /* 6 */
        /***/ (function(module, exports, __webpack_require__) {

            /* jslint node: true */
            'use strict';

            var _ = __webpack_require__(7);
            var FontProvider = __webpack_require__(9);
            var LayoutBuilder = __webpack_require__(10);
            var PdfKit = __webpack_require__(30);
            var sizes = __webpack_require__(297);
            var ImageMeasure = __webpack_require__(298);
            var textDecorator = __webpack_require__(299);
            var TextTools = __webpack_require__(15);

            _.noConflict();

            ////////////////////////////////////////
            // PdfPrinter

            /**
             * @class Creates an instance of a PdfPrinter which turns document definition into a pdf
             *
             * @param {Object} fontDescriptors font definition dictionary
             *
             * @example
             * var fontDescriptors = {
	 *	Roboto: {
	 *		normal: 'fonts/Roboto-Regular.ttf',
	 *		bold: 'fonts/Roboto-Medium.ttf',
	 *		italics: 'fonts/Roboto-Italic.ttf',
	 *		bolditalics: 'fonts/Roboto-MediumItalic.ttf'
	 *	}
	 * };
             *
             * var printer = new PdfPrinter(fontDescriptors);
             */
            function PdfPrinter(fontDescriptors) {
                this.fontDescriptors = fontDescriptors;
            }

            /**
             * Executes layout engine for the specified document and renders it into a pdfkit document
             * ready to be saved.
             *
             * @param {Object} docDefinition document definition
             * @param {Object} docDefinition.content an array describing the pdf structure (for more information take a look at the examples in the /examples folder)
             * @param {Object} [docDefinition.defaultStyle] default (implicit) style definition
             * @param {Object} [docDefinition.styles] dictionary defining all styles which can be used in the document
             * @param {Object} [docDefinition.pageSize] page size (pdfkit units, A4 dimensions by default)
             * @param {Number} docDefinition.pageSize.width width
             * @param {Number} docDefinition.pageSize.height height
             * @param {Object} [docDefinition.pageMargins] page margins (pdfkit units)
             * @param {Number} docDefinition.maxPagesNumber maximum number of pages to render
             *
             * @example
             *
             * var docDefinition = {
	 * 	info: {
	 *		title: 'awesome Document',
	 *		author: 'john doe',
	 *		subject: 'subject of document',
	 *		keywords: 'keywords for document',
	 * 	},
	 *	content: [
	 *		'First paragraph',
	 *		'Second paragraph, this time a little bit longer',
	 *		{ text: 'Third paragraph, slightly bigger font size', fontSize: 20 },
	 *		{ text: 'Another paragraph using a named style', style: 'header' },
	 *		{ text: ['playing with ', 'inlines' ] },
	 *		{ text: ['and ', { text: 'restyling ', bold: true }, 'them'] },
	 *	],
	 *	styles: {
	 *		header: { fontSize: 30, bold: true }
	 *	}
	 * }
             *
             * var pdfKitDoc = printer.createPdfKitDocument(docDefinition);
             *
             * pdfKitDoc.pipe(fs.createWriteStream('sample.pdf'));
             * pdfKitDoc.end();
             *
             * @return {Object} a pdfKit document object which can be saved or encode to data-url
             */
            PdfPrinter.prototype.createPdfKitDocument = function (docDefinition, options) {
                options = options || {};

                var pageSize = fixPageSize(docDefinition.pageSize, docDefinition.pageOrientation);

                this.pdfKitDoc = new PdfKit({size: [pageSize.width, pageSize.height], autoFirstPage: false, compress: docDefinition.compress || true});
                setMetadata(docDefinition, this.pdfKitDoc);

                this.fontProvider = new FontProvider(this.fontDescriptors, this.pdfKitDoc);

                docDefinition.images = docDefinition.images || {};

                var builder = new LayoutBuilder(pageSize, fixPageMargins(docDefinition.pageMargins || 40), new ImageMeasure(this.pdfKitDoc, docDefinition.images));

                registerDefaultTableLayouts(builder);
                if (options.tableLayouts) {
                    builder.registerTableLayouts(options.tableLayouts);
                }

                var pages = builder.layoutDocument(docDefinition.content, this.fontProvider, docDefinition.styles || {}, docDefinition.defaultStyle || {fontSize: 12, font: 'Roboto'}, docDefinition.background, docDefinition.header, docDefinition.footer, docDefinition.images, docDefinition.watermark, docDefinition.pageBreakBefore);
                var maxNumberPages = docDefinition.maxPagesNumber || -1;
                if (typeof maxNumberPages === 'number' && maxNumberPages > -1) {
                    pages = pages.slice(0, maxNumberPages);
                }

                // if pageSize.height is set to Infinity, calculate the actual height of the page that
                // was laid out using the height of each of the items in the page.
                if (pageSize.height === Infinity) {
                    var pageHeight = calculatePageHeight(pages, docDefinition.pageMargins);
                    this.pdfKitDoc.options.size = [pageSize.width, pageHeight];
                }

                renderPages(pages, this.fontProvider, this.pdfKitDoc, options.progressCallback);

                if (options.autoPrint) {
                    var printActionRef = this.pdfKitDoc.ref({
                        Type: 'Action',
                        S: 'Named',
                        N: 'Print'
                    });
                    this.pdfKitDoc._root.data.OpenAction = printActionRef;
                    printActionRef.end();
                }
                return this.pdfKitDoc;
            };

            function setMetadata(docDefinition, pdfKitDoc) {
                // PDF standard has these properties reserved: Title, Author, Subject, Keywords,
                // Creator, Producer, CreationDate, ModDate, Trapped.
                // To keep the pdfmake api consistent, the info field are defined lowercase.
                // Custom properties don't contain a space.
                function standardizePropertyKey(key) {
                    var standardProperties = ['Title', 'Author', 'Subject', 'Keywords',
                        'Creator', 'Producer', 'CreationDate', 'ModDate', 'Trapped'];
                    var standardizedKey = key.charAt(0).toUpperCase() + key.slice(1);
                    if (standardProperties.indexOf(standardizedKey) !== -1) {
                        return standardizedKey;
                    }

                    return key.replace(/\s+/g, '');
                }

                pdfKitDoc.info.Producer = 'pdfmake';
                pdfKitDoc.info.Creator = 'pdfmake';

                if (docDefinition.info) {
                    for (var key in docDefinition.info) {
                        var value = docDefinition.info[key];
                        if (value) {
                            key = standardizePropertyKey(key);
                            pdfKitDoc.info[key] = value;
                        }
                    }
                }
            }

            function calculatePageHeight(pages, margins) {
                function getItemHeight(item) {
                    if (typeof item.item.getHeight === 'function') {
                        return item.item.getHeight();
                    } else if (item.item._height) {
                        return item.item._height;
                    } else {
                        // TODO: add support for next item types
                        return 0;
                    }
                }

                var fixedMargins = fixPageMargins(margins || 40);
                var height = fixedMargins.top + fixedMargins.bottom;
                pages.forEach(function (page) {
                    page.items.forEach(function (item) {
                        height += getItemHeight(item);
                    });
                });
                return height;
            }

            function fixPageSize(pageSize, pageOrientation) {
                function isNeedSwapPageSizes(pageOrientation) {
                    if (typeof pageOrientation === 'string' || pageOrientation instanceof String) {
                        pageOrientation = pageOrientation.toLowerCase();
                        return ((pageOrientation === 'portrait') && (size.width > size.height)) ||
                            ((pageOrientation === 'landscape') && (size.width < size.height));
                    }
                    return false;
                }

                // if pageSize.height is set to auto, set the height to infinity so there are no page breaks.
                if (pageSize && pageSize.height === 'auto') {
                    pageSize.height = Infinity;
                }

                var size = pageSize2widthAndHeight(pageSize || 'A4');
                if (isNeedSwapPageSizes(pageOrientation)) { // swap page sizes
                    size = {width: size.height, height: size.width};
                }
                size.orientation = size.width > size.height ? 'landscape' : 'portrait';
                return size;
            }

            function fixPageMargins(margin) {
                if (!margin) {
                    return null;
                }

                if (typeof margin === 'number' || margin instanceof Number) {
                    margin = {left: margin, right: margin, top: margin, bottom: margin};
                } else if (Array.isArray(margin)) {
                    if (margin.length === 2) {
                        margin = {left: margin[0], top: margin[1], right: margin[0], bottom: margin[1]};
                    } else if (margin.length === 4) {
                        margin = {left: margin[0], top: margin[1], right: margin[2], bottom: margin[3]};
                    } else {
                        throw 'Invalid pageMargins definition';
                    }
                }

                return margin;
            }

            function registerDefaultTableLayouts(layoutBuilder) {
                /*jshint unused: false */
                layoutBuilder.registerTableLayouts({
                    noBorders: {
                        hLineWidth: function (i) {
                            return 0;
                        },
                        vLineWidth: function (i) {
                            return 0;
                        },
                        paddingLeft: function (i) {
                            return i && 4 || 0;
                        },
                        paddingRight: function (i, node) {
                            return (i < node.table.widths.length - 1) ? 4 : 0;
                        }
                    },
                    headerLineOnly: {
                        hLineWidth: function (i, node) {
                            if (i === 0 || i === node.table.body.length) {
                                return 0;
                            }
                            return (i === node.table.headerRows) ? 2 : 0;
                        },
                        vLineWidth: function (i) {
                            return 0;
                        },
                        paddingLeft: function (i) {
                            return i === 0 ? 0 : 8;
                        },
                        paddingRight: function (i, node) {
                            return (i === node.table.widths.length - 1) ? 0 : 8;
                        }
                    },
                    lightHorizontalLines: {
                        hLineWidth: function (i, node) {
                            if (i === 0 || i === node.table.body.length) {
                                return 0;
                            }
                            return (i === node.table.headerRows) ? 2 : 1;
                        },
                        vLineWidth: function (i) {
                            return 0;
                        },
                        hLineColor: function (i) {
                            return i === 1 ? 'black' : '#aaa';
                        },
                        paddingLeft: function (i) {
                            return i === 0 ? 0 : 8;
                        },
                        paddingRight: function (i, node) {
                            return (i === node.table.widths.length - 1) ? 0 : 8;
                        }
                    }
                });
            }

            function pageSize2widthAndHeight(pageSize) {
                if (typeof pageSize === 'string' || pageSize instanceof String) {
                    var size = sizes[pageSize.toUpperCase()];
                    if (!size) {
                        throw 'Page size ' + pageSize + ' not recognized';
                    }
                    return {width: size[0], height: size[1]};
                }

                return pageSize;
            }

            function updatePageOrientationInOptions(currentPage, pdfKitDoc) {
                var previousPageOrientation = pdfKitDoc.options.size[0] > pdfKitDoc.options.size[1] ? 'landscape' : 'portrait';

                if (currentPage.pageSize.orientation !== previousPageOrientation) {
                    var width = pdfKitDoc.options.size[0];
                    var height = pdfKitDoc.options.size[1];
                    pdfKitDoc.options.size = [height, width];
                }
            }

            function renderPages(pages, fontProvider, pdfKitDoc, progressCallback) {
                pdfKitDoc._pdfMakePages = pages;
                pdfKitDoc.addPage();

                var totalItems = progressCallback && _.sumBy(pages, function (page) {
                        return page.items.length;
                    });
                var renderedItems = 0;
                progressCallback = progressCallback || function () {};

                for (var i = 0; i < pages.length; i++) {
                    if (i > 0) {
                        updatePageOrientationInOptions(pages[i], pdfKitDoc);
                        pdfKitDoc.addPage(pdfKitDoc.options);
                    }

                    var page = pages[i];
                    for (var ii = 0, il = page.items.length; ii < il; ii++) {
                        var item = page.items[ii];
                        switch (item.type) {
                            case 'vector':
                                renderVector(item.item, pdfKitDoc);
                                break;
                            case 'line':
                                renderLine(item.item, item.item.x, item.item.y, pdfKitDoc);
                                break;
                            case 'image':
                                renderImage(item.item, item.item.x, item.item.y, pdfKitDoc);
                                break;
                        }
                        renderedItems++;
                        progressCallback(renderedItems / totalItems);
                    }
                    if (page.watermark) {
                        renderWatermark(page, pdfKitDoc);
                    }
                }
            }

            function renderLine(line, x, y, pdfKitDoc) {
                if (line._tocItemNode) {
                    var newWidth;
                    var diffWidth;
                    var textTools = new TextTools(null);

                    line.inlines[0].text = line._tocItemNode.positions[0].pageNumber.toString();
                    newWidth = textTools.widthOfString(line.inlines[0].text, line.inlines[0].font, line.inlines[0].fontSize, line.inlines[0].characterSpacing);
                    diffWidth = line.inlines[0].width - newWidth;
                    line.inlines[0].width = newWidth;

                    switch (line.inlines[0].alignment) {
                        case 'right':
                            line.inlines[0].x += diffWidth;
                            break;
                        case 'center':
                            line.inlines[0].x += diffWidth / 2;
                            break;
                    }
                }

                x = x || 0;
                y = y || 0;

                var lineHeight = line.getHeight();
                var ascenderHeight = line.getAscenderHeight();
                var descent = lineHeight - ascenderHeight;

                textDecorator.drawBackground(line, x, y, pdfKitDoc);

                //TODO: line.optimizeInlines();
                for (var i = 0, l = line.inlines.length; i < l; i++) {
                    var inline = line.inlines[i];
                    var shiftToBaseline = lineHeight - ((inline.font.ascender / 1000) * inline.fontSize) - descent;

                    pdfKitDoc.fill(inline.color || 'black');

                    pdfKitDoc._font = inline.font;
                    pdfKitDoc.fontSize(inline.fontSize);
                    pdfKitDoc.text(inline.text, x + inline.x, y + shiftToBaseline, {
                        lineBreak: false,
                        textWidth: inline.width,
                        characterSpacing: inline.characterSpacing,
                        wordCount: 1,
                        link: inline.link
                    });

                    if (inline.linkToPage) {
                        var _ref = pdfKitDoc.ref({Type: 'Action', S: 'GoTo', D: [inline.linkToPage, 0, 0]}).end();
                        pdfKitDoc.annotate(x + inline.x, y + shiftToBaseline, inline.width, inline.height, {Subtype: 'Link', Dest: [inline.linkToPage - 1, 'XYZ', null, null, null]});
                    }

                }

                textDecorator.drawDecorations(line, x, y, pdfKitDoc);
            }

            function renderWatermark(page, pdfKitDoc) {
                var watermark = page.watermark;

                pdfKitDoc.fill(watermark.color);
                pdfKitDoc.opacity(watermark.opacity);

                pdfKitDoc.save();

                var angle = Math.atan2(pdfKitDoc.page.height, pdfKitDoc.page.width) * -180 / Math.PI;
                pdfKitDoc.rotate(angle, {origin: [pdfKitDoc.page.width / 2, pdfKitDoc.page.height / 2]});

                var x = pdfKitDoc.page.width / 2 - watermark.size.size.width / 2;
                var y = pdfKitDoc.page.height / 2 - watermark.size.size.height / 4;

                pdfKitDoc._font = watermark.font;
                pdfKitDoc.fontSize(watermark.size.fontSize);
                pdfKitDoc.text(watermark.text, x, y, {lineBreak: false});

                pdfKitDoc.restore();
            }

            function renderVector(vector, pdfKitDoc) {
                //TODO: pdf optimization (there's no need to write all properties everytime)
                pdfKitDoc.lineWidth(vector.lineWidth || 1);
                if (vector.dash) {
                    pdfKitDoc.dash(vector.dash.length, {space: vector.dash.space || vector.dash.length, phase: vector.dash.phase || 0});
                } else {
                    pdfKitDoc.undash();
                }
                pdfKitDoc.lineJoin(vector.lineJoin || 'miter');

                //TODO: clipping

                switch (vector.type) {
                    case 'ellipse':
                        pdfKitDoc.ellipse(vector.x, vector.y, vector.r1, vector.r2);
                        break;
                    case 'rect':
                        if (vector.r) {
                            pdfKitDoc.roundedRect(vector.x, vector.y, vector.w, vector.h, vector.r);
                        } else {
                            pdfKitDoc.rect(vector.x, vector.y, vector.w, vector.h);
                        }

                        if (vector.linearGradient) {
                            var gradient = pdfKitDoc.linearGradient(vector.x, vector.y, vector.x + vector.w, vector.y);
                            var step = 1 / (vector.linearGradient.length - 1);

                            for (var i = 0; i < vector.linearGradient.length; i++) {
                                gradient.stop(i * step, vector.linearGradient[i]);
                            }

                            vector.color = gradient;
                        }
                        break;
                    case 'line':
                        pdfKitDoc.moveTo(vector.x1, vector.y1);
                        pdfKitDoc.lineTo(vector.x2, vector.y2);
                        break;
                    case 'polyline':
                        if (vector.points.length === 0) {
                            break;
                        }

                        pdfKitDoc.moveTo(vector.points[0].x, vector.points[0].y);
                        for (var i = 1, l = vector.points.length; i < l; i++) {
                            pdfKitDoc.lineTo(vector.points[i].x, vector.points[i].y);
                        }

                        if (vector.points.length > 1) {
                            var p1 = vector.points[0];
                            var pn = vector.points[vector.points.length - 1];

                            if (vector.closePath || p1.x === pn.x && p1.y === pn.y) {
                                pdfKitDoc.closePath();
                            }
                        }
                        break;
                    case 'path':
                        pdfKitDoc.path(vector.d);
                        break;
                }

                if (vector.color && vector.lineColor) {
                    pdfKitDoc.fillColor(vector.color, vector.fillOpacity || 1);
                    pdfKitDoc.strokeColor(vector.lineColor, vector.strokeOpacity || 1);
                    pdfKitDoc.fillAndStroke();
                } else if (vector.color) {
                    pdfKitDoc.fillColor(vector.color, vector.fillOpacity || 1);
                    pdfKitDoc.fill();
                } else {
                    pdfKitDoc.strokeColor(vector.lineColor || 'black', vector.strokeOpacity || 1);
                    pdfKitDoc.stroke();
                }
            }

            function renderImage(image, x, y, pdfKitDoc) {
                pdfKitDoc.image(image.image, image.x, image.y, {width: image._width, height: image._height});
                if (image.link) {
                    pdfKitDoc.link(image.x, image.y, image._width, image._height, image.link);
                }
            }

            module.exports = PdfPrinter;


            /* temporary browser extension */
            PdfPrinter.prototype.fs = __webpack_require__(56);


            /***/ }),
        /* 7 */
        /***/ (function(module, exports, __webpack_require__) {

            var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(global, module) {/**
             * @license
             * Lodash <https://lodash.com/>
             * Copyright JS Foundation and other contributors <https://js.foundation/>
             * Released under MIT license <https://lodash.com/license>
             * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
             * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
             */
                ;(function() {

                    /** Used as a safe reference for `undefined` in pre-ES5 environments. */
                    var undefined;

                    /** Used as the semantic version number. */
                    var VERSION = '4.17.4';

                    /** Used as the size to enable large array optimizations. */
                    var LARGE_ARRAY_SIZE = 200;

                    /** Error message constants. */
                    var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
                        FUNC_ERROR_TEXT = 'Expected a function';

                    /** Used to stand-in for `undefined` hash values. */
                    var HASH_UNDEFINED = '__lodash_hash_undefined__';

                    /** Used as the maximum memoize cache size. */
                    var MAX_MEMOIZE_SIZE = 500;

                    /** Used as the internal argument placeholder. */
                    var PLACEHOLDER = '__lodash_placeholder__';

                    /** Used to compose bitmasks for cloning. */
                    var CLONE_DEEP_FLAG = 1,
                        CLONE_FLAT_FLAG = 2,
                        CLONE_SYMBOLS_FLAG = 4;

                    /** Used to compose bitmasks for value comparisons. */
                    var COMPARE_PARTIAL_FLAG = 1,
                        COMPARE_UNORDERED_FLAG = 2;

                    /** Used to compose bitmasks for function metadata. */
                    var WRAP_BIND_FLAG = 1,
                        WRAP_BIND_KEY_FLAG = 2,
                        WRAP_CURRY_BOUND_FLAG = 4,
                        WRAP_CURRY_FLAG = 8,
                        WRAP_CURRY_RIGHT_FLAG = 16,
                        WRAP_PARTIAL_FLAG = 32,
                        WRAP_PARTIAL_RIGHT_FLAG = 64,
                        WRAP_ARY_FLAG = 128,
                        WRAP_REARG_FLAG = 256,
                        WRAP_FLIP_FLAG = 512;

                    /** Used as default options for `_.truncate`. */
                    var DEFAULT_TRUNC_LENGTH = 30,
                        DEFAULT_TRUNC_OMISSION = '...';

                    /** Used to detect hot functions by number of calls within a span of milliseconds. */
                    var HOT_COUNT = 800,
                        HOT_SPAN = 16;

                    /** Used to indicate the type of lazy iteratees. */
                    var LAZY_FILTER_FLAG = 1,
                        LAZY_MAP_FLAG = 2,
                        LAZY_WHILE_FLAG = 3;

                    /** Used as references for various `Number` constants. */
                    var INFINITY = 1 / 0,
                        MAX_SAFE_INTEGER = 9007199254740991,
                        MAX_INTEGER = 1.7976931348623157e+308,
                        NAN = 0 / 0;

                    /** Used as references for the maximum length and index of an array. */
                    var MAX_ARRAY_LENGTH = 4294967295,
                        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
                        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

                    /** Used to associate wrap methods with their bit flags. */
                    var wrapFlags = [
                        ['ary', WRAP_ARY_FLAG],
                        ['bind', WRAP_BIND_FLAG],
                        ['bindKey', WRAP_BIND_KEY_FLAG],
                        ['curry', WRAP_CURRY_FLAG],
                        ['curryRight', WRAP_CURRY_RIGHT_FLAG],
                        ['flip', WRAP_FLIP_FLAG],
                        ['partial', WRAP_PARTIAL_FLAG],
                        ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
                        ['rearg', WRAP_REARG_FLAG]
                    ];

                    /** `Object#toString` result references. */
                    var argsTag = '[object Arguments]',
                        arrayTag = '[object Array]',
                        asyncTag = '[object AsyncFunction]',
                        boolTag = '[object Boolean]',
                        dateTag = '[object Date]',
                        domExcTag = '[object DOMException]',
                        errorTag = '[object Error]',
                        funcTag = '[object Function]',
                        genTag = '[object GeneratorFunction]',
                        mapTag = '[object Map]',
                        numberTag = '[object Number]',
                        nullTag = '[object Null]',
                        objectTag = '[object Object]',
                        promiseTag = '[object Promise]',
                        proxyTag = '[object Proxy]',
                        regexpTag = '[object RegExp]',
                        setTag = '[object Set]',
                        stringTag = '[object String]',
                        symbolTag = '[object Symbol]',
                        undefinedTag = '[object Undefined]',
                        weakMapTag = '[object WeakMap]',
                        weakSetTag = '[object WeakSet]';

                    var arrayBufferTag = '[object ArrayBuffer]',
                        dataViewTag = '[object DataView]',
                        float32Tag = '[object Float32Array]',
                        float64Tag = '[object Float64Array]',
                        int8Tag = '[object Int8Array]',
                        int16Tag = '[object Int16Array]',
                        int32Tag = '[object Int32Array]',
                        uint8Tag = '[object Uint8Array]',
                        uint8ClampedTag = '[object Uint8ClampedArray]',
                        uint16Tag = '[object Uint16Array]',
                        uint32Tag = '[object Uint32Array]';

                    /** Used to match empty string literals in compiled template source. */
                    var reEmptyStringLeading = /\b__p \+= '';/g,
                        reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
                        reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

                    /** Used to match HTML entities and HTML characters. */
                    var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
                        reUnescapedHtml = /[&<>"']/g,
                        reHasEscapedHtml = RegExp(reEscapedHtml.source),
                        reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

                    /** Used to match template delimiters. */
                    var reEscape = /<%-([\s\S]+?)%>/g,
                        reEvaluate = /<%([\s\S]+?)%>/g,
                        reInterpolate = /<%=([\s\S]+?)%>/g;

                    /** Used to match property names within property paths. */
                    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
                        reIsPlainProp = /^\w*$/,
                        reLeadingDot = /^\./,
                        rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

                    /**
                     * Used to match `RegExp`
                     * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
                     */
                    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
                        reHasRegExpChar = RegExp(reRegExpChar.source);

                    /** Used to match leading and trailing whitespace. */
                    var reTrim = /^\s+|\s+$/g,
                        reTrimStart = /^\s+/,
                        reTrimEnd = /\s+$/;

                    /** Used to match wrap detail comments. */
                    var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
                        reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
                        reSplitDetails = /,? & /;

                    /** Used to match words composed of alphanumeric characters. */
                    var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

                    /** Used to match backslashes in property paths. */
                    var reEscapeChar = /\\(\\)?/g;

                    /**
                     * Used to match
                     * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
                     */
                    var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

                    /** Used to match `RegExp` flags from their coerced string values. */
                    var reFlags = /\w*$/;

                    /** Used to detect bad signed hexadecimal string values. */
                    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

                    /** Used to detect binary string values. */
                    var reIsBinary = /^0b[01]+$/i;

                    /** Used to detect host constructors (Safari). */
                    var reIsHostCtor = /^\[object .+?Constructor\]$/;

                    /** Used to detect octal string values. */
                    var reIsOctal = /^0o[0-7]+$/i;

                    /** Used to detect unsigned integer values. */
                    var reIsUint = /^(?:0|[1-9]\d*)$/;

                    /** Used to match Latin Unicode letters (excluding mathematical operators). */
                    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

                    /** Used to ensure capturing order of template delimiters. */
                    var reNoMatch = /($^)/;

                    /** Used to match unescaped characters in compiled string literals. */
                    var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

                    /** Used to compose unicode character classes. */
                    var rsAstralRange = '\\ud800-\\udfff',
                        rsComboMarksRange = '\\u0300-\\u036f',
                        reComboHalfMarksRange = '\\ufe20-\\ufe2f',
                        rsComboSymbolsRange = '\\u20d0-\\u20ff',
                        rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
                        rsDingbatRange = '\\u2700-\\u27bf',
                        rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
                        rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
                        rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
                        rsPunctuationRange = '\\u2000-\\u206f',
                        rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
                        rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
                        rsVarRange = '\\ufe0e\\ufe0f',
                        rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

                    /** Used to compose unicode capture groups. */
                    var rsApos = "['\u2019]",
                        rsAstral = '[' + rsAstralRange + ']',
                        rsBreak = '[' + rsBreakRange + ']',
                        rsCombo = '[' + rsComboRange + ']',
                        rsDigits = '\\d+',
                        rsDingbat = '[' + rsDingbatRange + ']',
                        rsLower = '[' + rsLowerRange + ']',
                        rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
                        rsFitz = '\\ud83c[\\udffb-\\udfff]',
                        rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
                        rsNonAstral = '[^' + rsAstralRange + ']',
                        rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
                        rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
                        rsUpper = '[' + rsUpperRange + ']',
                        rsZWJ = '\\u200d';

                    /** Used to compose unicode regexes. */
                    var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
                        rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
                        rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
                        rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
                        reOptMod = rsModifier + '?',
                        rsOptVar = '[' + rsVarRange + ']?',
                        rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
                        rsOrdLower = '\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)',
                        rsOrdUpper = '\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)',
                        rsSeq = rsOptVar + reOptMod + rsOptJoin,
                        rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
                        rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

                    /** Used to match apostrophes. */
                    var reApos = RegExp(rsApos, 'g');

                    /**
                     * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
                     * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
                     */
                    var reComboMark = RegExp(rsCombo, 'g');

                    /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
                    var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

                    /** Used to match complex or compound words. */
                    var reUnicodeWord = RegExp([
                        rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
                        rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
                        rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
                        rsUpper + '+' + rsOptContrUpper,
                        rsOrdUpper,
                        rsOrdLower,
                        rsDigits,
                        rsEmoji
                    ].join('|'), 'g');

                    /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
                    var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

                    /** Used to detect strings that need a more robust regexp to match words. */
                    var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

                    /** Used to assign default `context` object properties. */
                    var contextProps = [
                        'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
                        'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
                        'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
                        'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
                        '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
                    ];

                    /** Used to make template sourceURLs easier to identify. */
                    var templateCounter = -1;

                    /** Used to identify `toStringTag` values of typed arrays. */
                    var typedArrayTags = {};
                    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
                        typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
                            typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
                                typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
                                    typedArrayTags[uint32Tag] = true;
                    typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
                        typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
                            typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
                                typedArrayTags[errorTag] = typedArrayTags[funcTag] =
                                    typedArrayTags[mapTag] = typedArrayTags[numberTag] =
                                        typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
                                            typedArrayTags[setTag] = typedArrayTags[stringTag] =
                                                typedArrayTags[weakMapTag] = false;

                    /** Used to identify `toStringTag` values supported by `_.clone`. */
                    var cloneableTags = {};
                    cloneableTags[argsTag] = cloneableTags[arrayTag] =
                        cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
                            cloneableTags[boolTag] = cloneableTags[dateTag] =
                                cloneableTags[float32Tag] = cloneableTags[float64Tag] =
                                    cloneableTags[int8Tag] = cloneableTags[int16Tag] =
                                        cloneableTags[int32Tag] = cloneableTags[mapTag] =
                                            cloneableTags[numberTag] = cloneableTags[objectTag] =
                                                cloneableTags[regexpTag] = cloneableTags[setTag] =
                                                    cloneableTags[stringTag] = cloneableTags[symbolTag] =
                                                        cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
                                                            cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
                    cloneableTags[errorTag] = cloneableTags[funcTag] =
                        cloneableTags[weakMapTag] = false;

                    /** Used to map Latin Unicode letters to basic Latin letters. */
                    var deburredLetters = {
                        // Latin-1 Supplement block.
                        '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
                        '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
                        '\xc7': 'C',  '\xe7': 'c',
                        '\xd0': 'D',  '\xf0': 'd',
                        '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
                        '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
                        '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
                        '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
                        '\xd1': 'N',  '\xf1': 'n',
                        '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
                        '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
                        '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
                        '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
                        '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
                        '\xc6': 'Ae', '\xe6': 'ae',
                        '\xde': 'Th', '\xfe': 'th',
                        '\xdf': 'ss',
                        // Latin Extended-A block.
                        '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
                        '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
                        '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
                        '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
                        '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
                        '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
                        '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
                        '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
                        '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
                        '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
                        '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
                        '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
                        '\u0134': 'J',  '\u0135': 'j',
                        '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
                        '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
                        '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
                        '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
                        '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
                        '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
                        '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
                        '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
                        '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
                        '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
                        '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
                        '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
                        '\u0163': 't',  '\u0165': 't', '\u0167': 't',
                        '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
                        '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
                        '\u0174': 'W',  '\u0175': 'w',
                        '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
                        '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
                        '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
                        '\u0132': 'IJ', '\u0133': 'ij',
                        '\u0152': 'Oe', '\u0153': 'oe',
                        '\u0149': "'n", '\u017f': 's'
                    };

                    /** Used to map characters to HTML entities. */
                    var htmlEscapes = {
                        '&': '&amp;',
                        '<': '&lt;',
                        '>': '&gt;',
                        '"': '&quot;',
                        "'": '&#39;'
                    };

                    /** Used to map HTML entities to characters. */
                    var htmlUnescapes = {
                        '&amp;': '&',
                        '&lt;': '<',
                        '&gt;': '>',
                        '&quot;': '"',
                        '&#39;': "'"
                    };

                    /** Used to escape characters for inclusion in compiled string literals. */
                    var stringEscapes = {
                        '\\': '\\',
                        "'": "'",
                        '\n': 'n',
                        '\r': 'r',
                        '\u2028': 'u2028',
                        '\u2029': 'u2029'
                    };

                    /** Built-in method references without a dependency on `root`. */
                    var freeParseFloat = parseFloat,
                        freeParseInt = parseInt;

                    /** Detect free variable `global` from Node.js. */
                    var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

                    /** Detect free variable `self`. */
                    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

                    /** Used as a reference to the global object. */
                    var root = freeGlobal || freeSelf || Function('return this')();

                    /** Detect free variable `exports`. */
                    var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

                    /** Detect free variable `module`. */
                    var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

                    /** Detect the popular CommonJS extension `module.exports`. */
                    var moduleExports = freeModule && freeModule.exports === freeExports;

                    /** Detect free variable `process` from Node.js. */
                    var freeProcess = moduleExports && freeGlobal.process;

                    /** Used to access faster Node.js helpers. */
                    var nodeUtil = (function() {
                        try {
                            return freeProcess && freeProcess.binding && freeProcess.binding('util');
                        } catch (e) {}
                    }());

                    /* Node.js helper references. */
                    var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
                        nodeIsDate = nodeUtil && nodeUtil.isDate,
                        nodeIsMap = nodeUtil && nodeUtil.isMap,
                        nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
                        nodeIsSet = nodeUtil && nodeUtil.isSet,
                        nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

                    /*--------------------------------------------------------------------------*/

                    /**
                     * Adds the key-value `pair` to `map`.
                     *
                     * @private
                     * @param {Object} map The map to modify.
                     * @param {Array} pair The key-value pair to add.
                     * @returns {Object} Returns `map`.
                     */
                    function addMapEntry(map, pair) {
                        // Don't return `map.set` because it's not chainable in IE 11.
                        map.set(pair[0], pair[1]);
                        return map;
                    }

                    /**
                     * Adds `value` to `set`.
                     *
                     * @private
                     * @param {Object} set The set to modify.
                     * @param {*} value The value to add.
                     * @returns {Object} Returns `set`.
                     */
                    function addSetEntry(set, value) {
                        // Don't return `set.add` because it's not chainable in IE 11.
                        set.add(value);
                        return set;
                    }

                    /**
                     * A faster alternative to `Function#apply`, this function invokes `func`
                     * with the `this` binding of `thisArg` and the arguments of `args`.
                     *
                     * @private
                     * @param {Function} func The function to invoke.
                     * @param {*} thisArg The `this` binding of `func`.
                     * @param {Array} args The arguments to invoke `func` with.
                     * @returns {*} Returns the result of `func`.
                     */
                    function apply(func, thisArg, args) {
                        switch (args.length) {
                            case 0: return func.call(thisArg);
                            case 1: return func.call(thisArg, args[0]);
                            case 2: return func.call(thisArg, args[0], args[1]);
                            case 3: return func.call(thisArg, args[0], args[1], args[2]);
                        }
                        return func.apply(thisArg, args);
                    }

                    /**
                     * A specialized version of `baseAggregator` for arrays.
                     *
                     * @private
                     * @param {Array} [array] The array to iterate over.
                     * @param {Function} setter The function to set `accumulator` values.
                     * @param {Function} iteratee The iteratee to transform keys.
                     * @param {Object} accumulator The initial aggregated object.
                     * @returns {Function} Returns `accumulator`.
                     */
                    function arrayAggregator(array, setter, iteratee, accumulator) {
                        var index = -1,
                            length = array == null ? 0 : array.length;

                        while (++index < length) {
                            var value = array[index];
                            setter(accumulator, value, iteratee(value), array);
                        }
                        return accumulator;
                    }

                    /**
                     * A specialized version of `_.forEach` for arrays without support for
                     * iteratee shorthands.
                     *
                     * @private
                     * @param {Array} [array] The array to iterate over.
                     * @param {Function} iteratee The function invoked per iteration.
                     * @returns {Array} Returns `array`.
                     */
                    function arrayEach(array, iteratee) {
                        var index = -1,
                            length = array == null ? 0 : array.length;

                        while (++index < length) {
                            if (iteratee(array[index], index, array) === false) {
                                break;
                            }
                        }
                        return array;
                    }

                    /**
                     * A specialized version of `_.forEachRight` for arrays without support for
                     * iteratee shorthands.
                     *
                     * @private
                     * @param {Array} [array] The array to iterate over.
                     * @param {Function} iteratee The function invoked per iteration.
                     * @returns {Array} Returns `array`.
                     */
                    function arrayEachRight(array, iteratee) {
                        var length = array == null ? 0 : array.length;

                        while (length--) {
                            if (iteratee(array[length], length, array) === false) {
                                break;
                            }
                        }
                        return array;
                    }

                    /**
                     * A specialized version of `_.every` for arrays without support for
                     * iteratee shorthands.
                     *
                     * @private
                     * @param {Array} [array] The array to iterate over.
                     * @param {Function} predicate The function invoked per iteration.
                     * @returns {boolean} Returns `true` if all elements pass the predicate check,
                     *  else `false`.
                     */
                    function arrayEvery(array, predicate) {
                        var index = -1,
                            length = array == null ? 0 : array.length;

                        while (++index < length) {
                            if (!predicate(array[index], index, array)) {
                                return false;
                            }
                        }
                        return true;
                    }

                    /**
                     * A specialized version of `_.filter` for arrays without support for
                     * iteratee shorthands.
                     *
                     * @private
                     * @param {Array} [array] The array to iterate over.
                     * @param {Function} predicate The function invoked per iteration.
                     * @returns {Array} Returns the new filtered array.
                     */
                    function arrayFilter(array, predicate) {
                        var index = -1,
                            length = array == null ? 0 : array.length,
                            resIndex = 0,
                            result = [];

                        while (++index < length) {
                            var value = array[index];
                            if (predicate(value, index, array)) {
                                result[resIndex++] = value;
                            }
                        }
                        return result;
                    }

                    /**
                     * A specialized version of `_.includes` for arrays without support for
                     * specifying an index to search from.
                     *
                     * @private
                     * @param {Array} [array] The array to inspect.
                     * @param {*} target The value to search for.
                     * @returns {boolean} Returns `true` if `target` is found, else `false`.
                     */
                    function arrayIncludes(array, value) {
                        var length = array == null ? 0 : array.length;
                        return !!length && baseIndexOf(array, value, 0) > -1;
                    }

                    /**
                     * This function is like `arrayIncludes` except that it accepts a comparator.
                     *
                     * @private
                     * @param {Array} [array] The array to inspect.
                     * @param {*} target The value to search for.
                     * @param {Function} comparator The comparator invoked per element.
                     * @returns {boolean} Returns `true` if `target` is found, else `false`.
                     */
                    function arrayIncludesWith(array, value, comparator) {
                        var index = -1,
                            length = array == null ? 0 : array.length;

                        while (++index < length) {
                            if (comparator(value, array[index])) {
                                return true;
                            }
                        }
                        return false;
                    }

                    /**
                     * A specialized version of `_.map` for arrays without support for iteratee
                     * shorthands.
                     *
                     * @private
                     * @param {Array} [array] The array to iterate over.
                     * @param {Function} iteratee The function invoked per iteration.
                     * @returns {Array} Returns the new mapped array.
                     */
                    function arrayMap(array, iteratee) {
                        var index = -1,
                            length = array == null ? 0 : array.length,
                            result = Array(length);

                        while (++index < length) {
                            result[index] = iteratee(array[index], index, array);
                        }
                        return result;
                    }

                    /**
                     * Appends the elements of `values` to `array`.
                     *
                     * @private
                     * @param {Array} array The array to modify.
                     * @param {Array} values The values to append.
                     * @returns {Array} Returns `array`.
                     */
                    function arrayPush(array, values) {
                        var index = -1,
                            length = values.length,
                            offset = array.length;

                        while (++index < length) {
                            array[offset + index] = values[index];
                        }
                        return array;
                    }

                    /**
                     * A specialized version of `_.reduce` for arrays without support for
                     * iteratee shorthands.
                     *
                     * @private
                     * @param {Array} [array] The array to iterate over.
                     * @param {Function} iteratee The function invoked per iteration.
                     * @param {*} [accumulator] The initial value.
                     * @param {boolean} [initAccum] Specify using the first element of `array` as
                     *  the initial value.
                     * @returns {*} Returns the accumulated value.
                     */
                    function arrayReduce(array, iteratee, accumulator, initAccum) {
                        var index = -1,
                            length = array == null ? 0 : array.length;

                        if (initAccum && length) {
                            accumulator = array[++index];
                        }
                        while (++index < length) {
                            accumulator = iteratee(accumulator, array[index], index, array);
                        }
                        return accumulator;
                    }

                    /**
                     * A specialized version of `_.reduceRight` for arrays without support for
                     * iteratee shorthands.
                     *
                     * @private
                     * @param {Array} [array] The array to iterate over.
                     * @param {Function} iteratee The function invoked per iteration.
                     * @param {*} [accumulator] The initial value.
                     * @param {boolean} [initAccum] Specify using the last element of `array` as
                     *  the initial value.
                     * @returns {*} Returns the accumulated value.
                     */
                    function arrayReduceRight(array, iteratee, accumulator, initAccum) {
                        var length = array == null ? 0 : array.length;
                        if (initAccum && length) {
                            accumulator = array[--length];
                        }
                        while (length--) {
                            accumulator = iteratee(accumulator, array[length], length, array);
                        }
                        return accumulator;
                    }

                    /**
                     * A specialized version of `_.some` for arrays without support for iteratee
                     * shorthands.
                     *
                     * @private
                     * @param {Array} [array] The array to iterate over.
                     * @param {Function} predicate The function invoked per iteration.
                     * @returns {boolean} Returns `true` if any element passes the predicate check,
                     *  else `false`.
                     */
                    function arraySome(array, predicate) {
                        var index = -1,
                            length = array == null ? 0 : array.length;

                        while (++index < length) {
                            if (predicate(array[index], index, array)) {
                                return true;
                            }
                        }
                        return false;
                    }

                    /**
                     * Gets the size of an ASCII `string`.
                     *
                     * @private
                     * @param {string} string The string inspect.
                     * @returns {number} Returns the string size.
                     */
                    var asciiSize = baseProperty('length');

                    /**
                     * Converts an ASCII `string` to an array.
                     *
                     * @private
                     * @param {string} string The string to convert.
                     * @returns {Array} Returns the converted array.
                     */
                    function asciiToArray(string) {
                        return string.split('');
                    }

                    /**
                     * Splits an ASCII `string` into an array of its words.
                     *
                     * @private
                     * @param {string} The string to inspect.
                     * @returns {Array} Returns the words of `string`.
                     */
                    function asciiWords(string) {
                        return string.match(reAsciiWord) || [];
                    }

                    /**
                     * The base implementation of methods like `_.findKey` and `_.findLastKey`,
                     * without support for iteratee shorthands, which iterates over `collection`
                     * using `eachFunc`.
                     *
                     * @private
                     * @param {Array|Object} collection The collection to inspect.
                     * @param {Function} predicate The function invoked per iteration.
                     * @param {Function} eachFunc The function to iterate over `collection`.
                     * @returns {*} Returns the found element or its key, else `undefined`.
                     */
                    function baseFindKey(collection, predicate, eachFunc) {
                        var result;
                        eachFunc(collection, function(value, key, collection) {
                            if (predicate(value, key, collection)) {
                                result = key;
                                return false;
                            }
                        });
                        return result;
                    }

                    /**
                     * The base implementation of `_.findIndex` and `_.findLastIndex` without
                     * support for iteratee shorthands.
                     *
                     * @private
                     * @param {Array} array The array to inspect.
                     * @param {Function} predicate The function invoked per iteration.
                     * @param {number} fromIndex The index to search from.
                     * @param {boolean} [fromRight] Specify iterating from right to left.
                     * @returns {number} Returns the index of the matched value, else `-1`.
                     */
                    function baseFindIndex(array, predicate, fromIndex, fromRight) {
                        var length = array.length,
                            index = fromIndex + (fromRight ? 1 : -1);

                        while ((fromRight ? index-- : ++index < length)) {
                            if (predicate(array[index], index, array)) {
                                return index;
                            }
                        }
                        return -1;
                    }

                    /**
                     * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
                     *
                     * @private
                     * @param {Array} array The array to inspect.
                     * @param {*} value The value to search for.
                     * @param {number} fromIndex The index to search from.
                     * @returns {number} Returns the index of the matched value, else `-1`.
                     */
                    function baseIndexOf(array, value, fromIndex) {
                        return value === value
                            ? strictIndexOf(array, value, fromIndex)
                            : baseFindIndex(array, baseIsNaN, fromIndex);
                    }

                    /**
                     * This function is like `baseIndexOf` except that it accepts a comparator.
                     *
                     * @private
                     * @param {Array} array The array to inspect.
                     * @param {*} value The value to search for.
                     * @param {number} fromIndex The index to search from.
                     * @param {Function} comparator The comparator invoked per element.
                     * @returns {number} Returns the index of the matched value, else `-1`.
                     */
                    function baseIndexOfWith(array, value, fromIndex, comparator) {
                        var index = fromIndex - 1,
                            length = array.length;

                        while (++index < length) {
                            if (comparator(array[index], value)) {
                                return index;
                            }
                        }
                        return -1;
                    }

                    /**
                     * The base implementation of `_.isNaN` without support for number objects.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
                     */
                    function baseIsNaN(value) {
                        return value !== value;
                    }

                    /**
                     * The base implementation of `_.mean` and `_.meanBy` without support for
                     * iteratee shorthands.
                     *
                     * @private
                     * @param {Array} array The array to iterate over.
                     * @param {Function} iteratee The function invoked per iteration.
                     * @returns {number} Returns the mean.
                     */
                    function baseMean(array, iteratee) {
                        var length = array == null ? 0 : array.length;
                        return length ? (baseSum(array, iteratee) / length) : NAN;
                    }

                    /**
                     * The base implementation of `_.property` without support for deep paths.
                     *
                     * @private
                     * @param {string} key The key of the property to get.
                     * @returns {Function} Returns the new accessor function.
                     */
                    function baseProperty(key) {
                        return function(object) {
                            return object == null ? undefined : object[key];
                        };
                    }

                    /**
                     * The base implementation of `_.propertyOf` without support for deep paths.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @returns {Function} Returns the new accessor function.
                     */
                    function basePropertyOf(object) {
                        return function(key) {
                            return object == null ? undefined : object[key];
                        };
                    }

                    /**
                     * The base implementation of `_.reduce` and `_.reduceRight`, without support
                     * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
                     *
                     * @private
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} iteratee The function invoked per iteration.
                     * @param {*} accumulator The initial value.
                     * @param {boolean} initAccum Specify using the first or last element of
                     *  `collection` as the initial value.
                     * @param {Function} eachFunc The function to iterate over `collection`.
                     * @returns {*} Returns the accumulated value.
                     */
                    function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
                        eachFunc(collection, function(value, index, collection) {
                            accumulator = initAccum
                                ? (initAccum = false, value)
                                : iteratee(accumulator, value, index, collection);
                        });
                        return accumulator;
                    }

                    /**
                     * The base implementation of `_.sortBy` which uses `comparer` to define the
                     * sort order of `array` and replaces criteria objects with their corresponding
                     * values.
                     *
                     * @private
                     * @param {Array} array The array to sort.
                     * @param {Function} comparer The function to define sort order.
                     * @returns {Array} Returns `array`.
                     */
                    function baseSortBy(array, comparer) {
                        var length = array.length;

                        array.sort(comparer);
                        while (length--) {
                            array[length] = array[length].value;
                        }
                        return array;
                    }

                    /**
                     * The base implementation of `_.sum` and `_.sumBy` without support for
                     * iteratee shorthands.
                     *
                     * @private
                     * @param {Array} array The array to iterate over.
                     * @param {Function} iteratee The function invoked per iteration.
                     * @returns {number} Returns the sum.
                     */
                    function baseSum(array, iteratee) {
                        var result,
                            index = -1,
                            length = array.length;

                        while (++index < length) {
                            var current = iteratee(array[index]);
                            if (current !== undefined) {
                                result = result === undefined ? current : (result + current);
                            }
                        }
                        return result;
                    }

                    /**
                     * The base implementation of `_.times` without support for iteratee shorthands
                     * or max array length checks.
                     *
                     * @private
                     * @param {number} n The number of times to invoke `iteratee`.
                     * @param {Function} iteratee The function invoked per iteration.
                     * @returns {Array} Returns the array of results.
                     */
                    function baseTimes(n, iteratee) {
                        var index = -1,
                            result = Array(n);

                        while (++index < n) {
                            result[index] = iteratee(index);
                        }
                        return result;
                    }

                    /**
                     * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
                     * of key-value pairs for `object` corresponding to the property names of `props`.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @param {Array} props The property names to get values for.
                     * @returns {Object} Returns the key-value pairs.
                     */
                    function baseToPairs(object, props) {
                        return arrayMap(props, function(key) {
                            return [key, object[key]];
                        });
                    }

                    /**
                     * The base implementation of `_.unary` without support for storing metadata.
                     *
                     * @private
                     * @param {Function} func The function to cap arguments for.
                     * @returns {Function} Returns the new capped function.
                     */
                    function baseUnary(func) {
                        return function(value) {
                            return func(value);
                        };
                    }

                    /**
                     * The base implementation of `_.values` and `_.valuesIn` which creates an
                     * array of `object` property values corresponding to the property names
                     * of `props`.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @param {Array} props The property names to get values for.
                     * @returns {Object} Returns the array of property values.
                     */
                    function baseValues(object, props) {
                        return arrayMap(props, function(key) {
                            return object[key];
                        });
                    }

                    /**
                     * Checks if a `cache` value for `key` exists.
                     *
                     * @private
                     * @param {Object} cache The cache to query.
                     * @param {string} key The key of the entry to check.
                     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                     */
                    function cacheHas(cache, key) {
                        return cache.has(key);
                    }

                    /**
                     * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
                     * that is not found in the character symbols.
                     *
                     * @private
                     * @param {Array} strSymbols The string symbols to inspect.
                     * @param {Array} chrSymbols The character symbols to find.
                     * @returns {number} Returns the index of the first unmatched string symbol.
                     */
                    function charsStartIndex(strSymbols, chrSymbols) {
                        var index = -1,
                            length = strSymbols.length;

                        while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
                        return index;
                    }

                    /**
                     * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
                     * that is not found in the character symbols.
                     *
                     * @private
                     * @param {Array} strSymbols The string symbols to inspect.
                     * @param {Array} chrSymbols The character symbols to find.
                     * @returns {number} Returns the index of the last unmatched string symbol.
                     */
                    function charsEndIndex(strSymbols, chrSymbols) {
                        var index = strSymbols.length;

                        while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
                        return index;
                    }

                    /**
                     * Gets the number of `placeholder` occurrences in `array`.
                     *
                     * @private
                     * @param {Array} array The array to inspect.
                     * @param {*} placeholder The placeholder to search for.
                     * @returns {number} Returns the placeholder count.
                     */
                    function countHolders(array, placeholder) {
                        var length = array.length,
                            result = 0;

                        while (length--) {
                            if (array[length] === placeholder) {
                                ++result;
                            }
                        }
                        return result;
                    }

                    /**
                     * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
                     * letters to basic Latin letters.
                     *
                     * @private
                     * @param {string} letter The matched letter to deburr.
                     * @returns {string} Returns the deburred letter.
                     */
                    var deburrLetter = basePropertyOf(deburredLetters);

                    /**
                     * Used by `_.escape` to convert characters to HTML entities.
                     *
                     * @private
                     * @param {string} chr The matched character to escape.
                     * @returns {string} Returns the escaped character.
                     */
                    var escapeHtmlChar = basePropertyOf(htmlEscapes);

                    /**
                     * Used by `_.template` to escape characters for inclusion in compiled string literals.
                     *
                     * @private
                     * @param {string} chr The matched character to escape.
                     * @returns {string} Returns the escaped character.
                     */
                    function escapeStringChar(chr) {
                        return '\\' + stringEscapes[chr];
                    }

                    /**
                     * Gets the value at `key` of `object`.
                     *
                     * @private
                     * @param {Object} [object] The object to query.
                     * @param {string} key The key of the property to get.
                     * @returns {*} Returns the property value.
                     */
                    function getValue(object, key) {
                        return object == null ? undefined : object[key];
                    }

                    /**
                     * Checks if `string` contains Unicode symbols.
                     *
                     * @private
                     * @param {string} string The string to inspect.
                     * @returns {boolean} Returns `true` if a symbol is found, else `false`.
                     */
                    function hasUnicode(string) {
                        return reHasUnicode.test(string);
                    }

                    /**
                     * Checks if `string` contains a word composed of Unicode symbols.
                     *
                     * @private
                     * @param {string} string The string to inspect.
                     * @returns {boolean} Returns `true` if a word is found, else `false`.
                     */
                    function hasUnicodeWord(string) {
                        return reHasUnicodeWord.test(string);
                    }

                    /**
                     * Converts `iterator` to an array.
                     *
                     * @private
                     * @param {Object} iterator The iterator to convert.
                     * @returns {Array} Returns the converted array.
                     */
                    function iteratorToArray(iterator) {
                        var data,
                            result = [];

                        while (!(data = iterator.next()).done) {
                            result.push(data.value);
                        }
                        return result;
                    }

                    /**
                     * Converts `map` to its key-value pairs.
                     *
                     * @private
                     * @param {Object} map The map to convert.
                     * @returns {Array} Returns the key-value pairs.
                     */
                    function mapToArray(map) {
                        var index = -1,
                            result = Array(map.size);

                        map.forEach(function(value, key) {
                            result[++index] = [key, value];
                        });
                        return result;
                    }

                    /**
                     * Creates a unary function that invokes `func` with its argument transformed.
                     *
                     * @private
                     * @param {Function} func The function to wrap.
                     * @param {Function} transform The argument transform.
                     * @returns {Function} Returns the new function.
                     */
                    function overArg(func, transform) {
                        return function(arg) {
                            return func(transform(arg));
                        };
                    }

                    /**
                     * Replaces all `placeholder` elements in `array` with an internal placeholder
                     * and returns an array of their indexes.
                     *
                     * @private
                     * @param {Array} array The array to modify.
                     * @param {*} placeholder The placeholder to replace.
                     * @returns {Array} Returns the new array of placeholder indexes.
                     */
                    function replaceHolders(array, placeholder) {
                        var index = -1,
                            length = array.length,
                            resIndex = 0,
                            result = [];

                        while (++index < length) {
                            var value = array[index];
                            if (value === placeholder || value === PLACEHOLDER) {
                                array[index] = PLACEHOLDER;
                                result[resIndex++] = index;
                            }
                        }
                        return result;
                    }

                    /**
                     * Converts `set` to an array of its values.
                     *
                     * @private
                     * @param {Object} set The set to convert.
                     * @returns {Array} Returns the values.
                     */
                    function setToArray(set) {
                        var index = -1,
                            result = Array(set.size);

                        set.forEach(function(value) {
                            result[++index] = value;
                        });
                        return result;
                    }

                    /**
                     * Converts `set` to its value-value pairs.
                     *
                     * @private
                     * @param {Object} set The set to convert.
                     * @returns {Array} Returns the value-value pairs.
                     */
                    function setToPairs(set) {
                        var index = -1,
                            result = Array(set.size);

                        set.forEach(function(value) {
                            result[++index] = [value, value];
                        });
                        return result;
                    }

                    /**
                     * A specialized version of `_.indexOf` which performs strict equality
                     * comparisons of values, i.e. `===`.
                     *
                     * @private
                     * @param {Array} array The array to inspect.
                     * @param {*} value The value to search for.
                     * @param {number} fromIndex The index to search from.
                     * @returns {number} Returns the index of the matched value, else `-1`.
                     */
                    function strictIndexOf(array, value, fromIndex) {
                        var index = fromIndex - 1,
                            length = array.length;

                        while (++index < length) {
                            if (array[index] === value) {
                                return index;
                            }
                        }
                        return -1;
                    }

                    /**
                     * A specialized version of `_.lastIndexOf` which performs strict equality
                     * comparisons of values, i.e. `===`.
                     *
                     * @private
                     * @param {Array} array The array to inspect.
                     * @param {*} value The value to search for.
                     * @param {number} fromIndex The index to search from.
                     * @returns {number} Returns the index of the matched value, else `-1`.
                     */
                    function strictLastIndexOf(array, value, fromIndex) {
                        var index = fromIndex + 1;
                        while (index--) {
                            if (array[index] === value) {
                                return index;
                            }
                        }
                        return index;
                    }

                    /**
                     * Gets the number of symbols in `string`.
                     *
                     * @private
                     * @param {string} string The string to inspect.
                     * @returns {number} Returns the string size.
                     */
                    function stringSize(string) {
                        return hasUnicode(string)
                            ? unicodeSize(string)
                            : asciiSize(string);
                    }

                    /**
                     * Converts `string` to an array.
                     *
                     * @private
                     * @param {string} string The string to convert.
                     * @returns {Array} Returns the converted array.
                     */
                    function stringToArray(string) {
                        return hasUnicode(string)
                            ? unicodeToArray(string)
                            : asciiToArray(string);
                    }

                    /**
                     * Used by `_.unescape` to convert HTML entities to characters.
                     *
                     * @private
                     * @param {string} chr The matched character to unescape.
                     * @returns {string} Returns the unescaped character.
                     */
                    var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

                    /**
                     * Gets the size of a Unicode `string`.
                     *
                     * @private
                     * @param {string} string The string inspect.
                     * @returns {number} Returns the string size.
                     */
                    function unicodeSize(string) {
                        var result = reUnicode.lastIndex = 0;
                        while (reUnicode.test(string)) {
                            ++result;
                        }
                        return result;
                    }

                    /**
                     * Converts a Unicode `string` to an array.
                     *
                     * @private
                     * @param {string} string The string to convert.
                     * @returns {Array} Returns the converted array.
                     */
                    function unicodeToArray(string) {
                        return string.match(reUnicode) || [];
                    }

                    /**
                     * Splits a Unicode `string` into an array of its words.
                     *
                     * @private
                     * @param {string} The string to inspect.
                     * @returns {Array} Returns the words of `string`.
                     */
                    function unicodeWords(string) {
                        return string.match(reUnicodeWord) || [];
                    }

                    /*--------------------------------------------------------------------------*/

                    /**
                     * Create a new pristine `lodash` function using the `context` object.
                     *
                     * @static
                     * @memberOf _
                     * @since 1.1.0
                     * @category Util
                     * @param {Object} [context=root] The context object.
                     * @returns {Function} Returns a new `lodash` function.
                     * @example
                     *
                     * _.mixin({ 'foo': _.constant('foo') });
                     *
                     * var lodash = _.runInContext();
                     * lodash.mixin({ 'bar': lodash.constant('bar') });
                     *
                     * _.isFunction(_.foo);
                     * // => true
                     * _.isFunction(_.bar);
                     * // => false
                     *
                     * lodash.isFunction(lodash.foo);
                     * // => false
                     * lodash.isFunction(lodash.bar);
                     * // => true
                     *
                     * // Create a suped-up `defer` in Node.js.
                     * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
                     */
                    var runInContext = (function runInContext(context) {
                        context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

                        /** Built-in constructor references. */
                        var Array = context.Array,
                            Date = context.Date,
                            Error = context.Error,
                            Function = context.Function,
                            Math = context.Math,
                            Object = context.Object,
                            RegExp = context.RegExp,
                            String = context.String,
                            TypeError = context.TypeError;

                        /** Used for built-in method references. */
                        var arrayProto = Array.prototype,
                            funcProto = Function.prototype,
                            objectProto = Object.prototype;

                        /** Used to detect overreaching core-js shims. */
                        var coreJsData = context['__core-js_shared__'];

                        /** Used to resolve the decompiled source of functions. */
                        var funcToString = funcProto.toString;

                        /** Used to check objects for own properties. */
                        var hasOwnProperty = objectProto.hasOwnProperty;

                        /** Used to generate unique IDs. */
                        var idCounter = 0;

                        /** Used to detect methods masquerading as native. */
                        var maskSrcKey = (function() {
                            var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
                            return uid ? ('Symbol(src)_1.' + uid) : '';
                        }());

                        /**
                         * Used to resolve the
                         * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
                         * of values.
                         */
                        var nativeObjectToString = objectProto.toString;

                        /** Used to infer the `Object` constructor. */
                        var objectCtorString = funcToString.call(Object);

                        /** Used to restore the original `_` reference in `_.noConflict`. */
                        var oldDash = root._;

                        /** Used to detect if a method is native. */
                        var reIsNative = RegExp('^' +
                            funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
                                .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
                        );

                        /** Built-in value references. */
                        var Buffer = moduleExports ? context.Buffer : undefined,
                            Symbol = context.Symbol,
                            Uint8Array = context.Uint8Array,
                            allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
                            getPrototype = overArg(Object.getPrototypeOf, Object),
                            objectCreate = Object.create,
                            propertyIsEnumerable = objectProto.propertyIsEnumerable,
                            splice = arrayProto.splice,
                            spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
                            symIterator = Symbol ? Symbol.iterator : undefined,
                            symToStringTag = Symbol ? Symbol.toStringTag : undefined;

                        var defineProperty = (function() {
                            try {
                                var func = getNative(Object, 'defineProperty');
                                func({}, '', {});
                                return func;
                            } catch (e) {}
                        }());

                        /** Mocked built-ins. */
                        var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
                            ctxNow = Date && Date.now !== root.Date.now && Date.now,
                            ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

                        /* Built-in method references for those with the same name as other `lodash` methods. */
                        var nativeCeil = Math.ceil,
                            nativeFloor = Math.floor,
                            nativeGetSymbols = Object.getOwnPropertySymbols,
                            nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
                            nativeIsFinite = context.isFinite,
                            nativeJoin = arrayProto.join,
                            nativeKeys = overArg(Object.keys, Object),
                            nativeMax = Math.max,
                            nativeMin = Math.min,
                            nativeNow = Date.now,
                            nativeParseInt = context.parseInt,
                            nativeRandom = Math.random,
                            nativeReverse = arrayProto.reverse;

                        /* Built-in method references that are verified to be native. */
                        var DataView = getNative(context, 'DataView'),
                            Map = getNative(context, 'Map'),
                            Promise = getNative(context, 'Promise'),
                            Set = getNative(context, 'Set'),
                            WeakMap = getNative(context, 'WeakMap'),
                            nativeCreate = getNative(Object, 'create');

                        /** Used to store function metadata. */
                        var metaMap = WeakMap && new WeakMap;

                        /** Used to lookup unminified function names. */
                        var realNames = {};

                        /** Used to detect maps, sets, and weakmaps. */
                        var dataViewCtorString = toSource(DataView),
                            mapCtorString = toSource(Map),
                            promiseCtorString = toSource(Promise),
                            setCtorString = toSource(Set),
                            weakMapCtorString = toSource(WeakMap);

                        /** Used to convert symbols to primitives and strings. */
                        var symbolProto = Symbol ? Symbol.prototype : undefined,
                            symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
                            symbolToString = symbolProto ? symbolProto.toString : undefined;

                        /*------------------------------------------------------------------------*/

                        /**
                         * Creates a `lodash` object which wraps `value` to enable implicit method
                         * chain sequences. Methods that operate on and return arrays, collections,
                         * and functions can be chained together. Methods that retrieve a single value
                         * or may return a primitive value will automatically end the chain sequence
                         * and return the unwrapped value. Otherwise, the value must be unwrapped
                         * with `_#value`.
                         *
                         * Explicit chain sequences, which must be unwrapped with `_#value`, may be
                         * enabled using `_.chain`.
                         *
                         * The execution of chained methods is lazy, that is, it's deferred until
                         * `_#value` is implicitly or explicitly called.
                         *
                         * Lazy evaluation allows several methods to support shortcut fusion.
                         * Shortcut fusion is an optimization to merge iteratee calls; this avoids
                         * the creation of intermediate arrays and can greatly reduce the number of
                         * iteratee executions. Sections of a chain sequence qualify for shortcut
                         * fusion if the section is applied to an array and iteratees accept only
                         * one argument. The heuristic for whether a section qualifies for shortcut
                         * fusion is subject to change.
                         *
                         * Chaining is supported in custom builds as long as the `_#value` method is
                         * directly or indirectly included in the build.
                         *
                         * In addition to lodash methods, wrappers have `Array` and `String` methods.
                         *
                         * The wrapper `Array` methods are:
                         * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
                         *
                         * The wrapper `String` methods are:
                         * `replace` and `split`
                         *
                         * The wrapper methods that support shortcut fusion are:
                         * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
                         * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
                         * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
                         *
                         * The chainable wrapper methods are:
                         * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
                         * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
                         * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
                         * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
                         * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
                         * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
                         * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
                         * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
                         * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
                         * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
                         * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
                         * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
                         * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
                         * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
                         * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
                         * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
                         * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
                         * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
                         * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
                         * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
                         * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
                         * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
                         * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
                         * `zipObject`, `zipObjectDeep`, and `zipWith`
                         *
                         * The wrapper methods that are **not** chainable by default are:
                         * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
                         * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
                         * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
                         * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
                         * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
                         * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
                         * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
                         * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
                         * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
                         * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
                         * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
                         * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
                         * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
                         * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
                         * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
                         * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
                         * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
                         * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
                         * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
                         * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
                         * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
                         * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
                         * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
                         * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
                         * `upperFirst`, `value`, and `words`
                         *
                         * @name _
                         * @constructor
                         * @category Seq
                         * @param {*} value The value to wrap in a `lodash` instance.
                         * @returns {Object} Returns the new `lodash` wrapper instance.
                         * @example
                         *
                         * function square(n) {
	     *   return n * n;
	     * }
                         *
                         * var wrapped = _([1, 2, 3]);
                         *
                         * // Returns an unwrapped value.
                         * wrapped.reduce(_.add);
                         * // => 6
                         *
                         * // Returns a wrapped value.
                         * var squares = wrapped.map(square);
                         *
                         * _.isArray(squares);
                         * // => false
                         *
                         * _.isArray(squares.value());
                         * // => true
                         */
                        function lodash(value) {
                            if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
                                if (value instanceof LodashWrapper) {
                                    return value;
                                }
                                if (hasOwnProperty.call(value, '__wrapped__')) {
                                    return wrapperClone(value);
                                }
                            }
                            return new LodashWrapper(value);
                        }

                        /**
                         * The base implementation of `_.create` without support for assigning
                         * properties to the created object.
                         *
                         * @private
                         * @param {Object} proto The object to inherit from.
                         * @returns {Object} Returns the new object.
                         */
                        var baseCreate = (function() {
                            function object() {}
                            return function(proto) {
                                if (!isObject(proto)) {
                                    return {};
                                }
                                if (objectCreate) {
                                    return objectCreate(proto);
                                }
                                object.prototype = proto;
                                var result = new object;
                                object.prototype = undefined;
                                return result;
                            };
                        }());

                        /**
                         * The function whose prototype chain sequence wrappers inherit from.
                         *
                         * @private
                         */
                        function baseLodash() {
                            // No operation performed.
                        }

                        /**
                         * The base constructor for creating `lodash` wrapper objects.
                         *
                         * @private
                         * @param {*} value The value to wrap.
                         * @param {boolean} [chainAll] Enable explicit method chain sequences.
                         */
                        function LodashWrapper(value, chainAll) {
                            this.__wrapped__ = value;
                            this.__actions__ = [];
                            this.__chain__ = !!chainAll;
                            this.__index__ = 0;
                            this.__values__ = undefined;
                        }

                        /**
                         * By default, the template delimiters used by lodash are like those in
                         * embedded Ruby (ERB) as well as ES2015 template strings. Change the
                         * following template settings to use alternative delimiters.
                         *
                         * @static
                         * @memberOf _
                         * @type {Object}
                         */
                        lodash.templateSettings = {

                            /**
                             * Used to detect `data` property values to be HTML-escaped.
                             *
                             * @memberOf _.templateSettings
                             * @type {RegExp}
                             */
                            'escape': reEscape,

                            /**
                             * Used to detect code to be evaluated.
                             *
                             * @memberOf _.templateSettings
                             * @type {RegExp}
                             */
                            'evaluate': reEvaluate,

                            /**
                             * Used to detect `data` property values to inject.
                             *
                             * @memberOf _.templateSettings
                             * @type {RegExp}
                             */
                            'interpolate': reInterpolate,

                            /**
                             * Used to reference the data object in the template text.
                             *
                             * @memberOf _.templateSettings
                             * @type {string}
                             */
                            'variable': '',

                            /**
                             * Used to import variables into the compiled template.
                             *
                             * @memberOf _.templateSettings
                             * @type {Object}
                             */
                            'imports': {

                                /**
                                 * A reference to the `lodash` function.
                                 *
                                 * @memberOf _.templateSettings.imports
                                 * @type {Function}
                                 */
                                '_': lodash
                            }
                        };

                        // Ensure wrappers are instances of `baseLodash`.
                        lodash.prototype = baseLodash.prototype;
                        lodash.prototype.constructor = lodash;

                        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
                        LodashWrapper.prototype.constructor = LodashWrapper;

                        /*------------------------------------------------------------------------*/

                        /**
                         * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
                         *
                         * @private
                         * @constructor
                         * @param {*} value The value to wrap.
                         */
                        function LazyWrapper(value) {
                            this.__wrapped__ = value;
                            this.__actions__ = [];
                            this.__dir__ = 1;
                            this.__filtered__ = false;
                            this.__iteratees__ = [];
                            this.__takeCount__ = MAX_ARRAY_LENGTH;
                            this.__views__ = [];
                        }

                        /**
                         * Creates a clone of the lazy wrapper object.
                         *
                         * @private
                         * @name clone
                         * @memberOf LazyWrapper
                         * @returns {Object} Returns the cloned `LazyWrapper` object.
                         */
                        function lazyClone() {
                            var result = new LazyWrapper(this.__wrapped__);
                            result.__actions__ = copyArray(this.__actions__);
                            result.__dir__ = this.__dir__;
                            result.__filtered__ = this.__filtered__;
                            result.__iteratees__ = copyArray(this.__iteratees__);
                            result.__takeCount__ = this.__takeCount__;
                            result.__views__ = copyArray(this.__views__);
                            return result;
                        }

                        /**
                         * Reverses the direction of lazy iteration.
                         *
                         * @private
                         * @name reverse
                         * @memberOf LazyWrapper
                         * @returns {Object} Returns the new reversed `LazyWrapper` object.
                         */
                        function lazyReverse() {
                            if (this.__filtered__) {
                                var result = new LazyWrapper(this);
                                result.__dir__ = -1;
                                result.__filtered__ = true;
                            } else {
                                result = this.clone();
                                result.__dir__ *= -1;
                            }
                            return result;
                        }

                        /**
                         * Extracts the unwrapped value from its lazy wrapper.
                         *
                         * @private
                         * @name value
                         * @memberOf LazyWrapper
                         * @returns {*} Returns the unwrapped value.
                         */
                        function lazyValue() {
                            var array = this.__wrapped__.value(),
                                dir = this.__dir__,
                                isArr = isArray(array),
                                isRight = dir < 0,
                                arrLength = isArr ? array.length : 0,
                                view = getView(0, arrLength, this.__views__),
                                start = view.start,
                                end = view.end,
                                length = end - start,
                                index = isRight ? end : (start - 1),
                                iteratees = this.__iteratees__,
                                iterLength = iteratees.length,
                                resIndex = 0,
                                takeCount = nativeMin(length, this.__takeCount__);

                            if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
                                return baseWrapperValue(array, this.__actions__);
                            }
                            var result = [];

                            outer:
                                while (length-- && resIndex < takeCount) {
                                    index += dir;

                                    var iterIndex = -1,
                                        value = array[index];

                                    while (++iterIndex < iterLength) {
                                        var data = iteratees[iterIndex],
                                            iteratee = data.iteratee,
                                            type = data.type,
                                            computed = iteratee(value);

                                        if (type == LAZY_MAP_FLAG) {
                                            value = computed;
                                        } else if (!computed) {
                                            if (type == LAZY_FILTER_FLAG) {
                                                continue outer;
                                            } else {
                                                break outer;
                                            }
                                        }
                                    }
                                    result[resIndex++] = value;
                                }
                            return result;
                        }

                        // Ensure `LazyWrapper` is an instance of `baseLodash`.
                        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
                        LazyWrapper.prototype.constructor = LazyWrapper;

                        /*------------------------------------------------------------------------*/

                        /**
                         * Creates a hash object.
                         *
                         * @private
                         * @constructor
                         * @param {Array} [entries] The key-value pairs to cache.
                         */
                        function Hash(entries) {
                            var index = -1,
                                length = entries == null ? 0 : entries.length;

                            this.clear();
                            while (++index < length) {
                                var entry = entries[index];
                                this.set(entry[0], entry[1]);
                            }
                        }

                        /**
                         * Removes all key-value entries from the hash.
                         *
                         * @private
                         * @name clear
                         * @memberOf Hash
                         */
                        function hashClear() {
                            this.__data__ = nativeCreate ? nativeCreate(null) : {};
                            this.size = 0;
                        }

                        /**
                         * Removes `key` and its value from the hash.
                         *
                         * @private
                         * @name delete
                         * @memberOf Hash
                         * @param {Object} hash The hash to modify.
                         * @param {string} key The key of the value to remove.
                         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                         */
                        function hashDelete(key) {
                            var result = this.has(key) && delete this.__data__[key];
                            this.size -= result ? 1 : 0;
                            return result;
                        }

                        /**
                         * Gets the hash value for `key`.
                         *
                         * @private
                         * @name get
                         * @memberOf Hash
                         * @param {string} key The key of the value to get.
                         * @returns {*} Returns the entry value.
                         */
                        function hashGet(key) {
                            var data = this.__data__;
                            if (nativeCreate) {
                                var result = data[key];
                                return result === HASH_UNDEFINED ? undefined : result;
                            }
                            return hasOwnProperty.call(data, key) ? data[key] : undefined;
                        }

                        /**
                         * Checks if a hash value for `key` exists.
                         *
                         * @private
                         * @name has
                         * @memberOf Hash
                         * @param {string} key The key of the entry to check.
                         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                         */
                        function hashHas(key) {
                            var data = this.__data__;
                            return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
                        }

                        /**
                         * Sets the hash `key` to `value`.
                         *
                         * @private
                         * @name set
                         * @memberOf Hash
                         * @param {string} key The key of the value to set.
                         * @param {*} value The value to set.
                         * @returns {Object} Returns the hash instance.
                         */
                        function hashSet(key, value) {
                            var data = this.__data__;
                            this.size += this.has(key) ? 0 : 1;
                            data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
                            return this;
                        }

                        // Add methods to `Hash`.
                        Hash.prototype.clear = hashClear;
                        Hash.prototype['delete'] = hashDelete;
                        Hash.prototype.get = hashGet;
                        Hash.prototype.has = hashHas;
                        Hash.prototype.set = hashSet;

                        /*------------------------------------------------------------------------*/

                        /**
                         * Creates an list cache object.
                         *
                         * @private
                         * @constructor
                         * @param {Array} [entries] The key-value pairs to cache.
                         */
                        function ListCache(entries) {
                            var index = -1,
                                length = entries == null ? 0 : entries.length;

                            this.clear();
                            while (++index < length) {
                                var entry = entries[index];
                                this.set(entry[0], entry[1]);
                            }
                        }

                        /**
                         * Removes all key-value entries from the list cache.
                         *
                         * @private
                         * @name clear
                         * @memberOf ListCache
                         */
                        function listCacheClear() {
                            this.__data__ = [];
                            this.size = 0;
                        }

                        /**
                         * Removes `key` and its value from the list cache.
                         *
                         * @private
                         * @name delete
                         * @memberOf ListCache
                         * @param {string} key The key of the value to remove.
                         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                         */
                        function listCacheDelete(key) {
                            var data = this.__data__,
                                index = assocIndexOf(data, key);

                            if (index < 0) {
                                return false;
                            }
                            var lastIndex = data.length - 1;
                            if (index == lastIndex) {
                                data.pop();
                            } else {
                                splice.call(data, index, 1);
                            }
                            --this.size;
                            return true;
                        }

                        /**
                         * Gets the list cache value for `key`.
                         *
                         * @private
                         * @name get
                         * @memberOf ListCache
                         * @param {string} key The key of the value to get.
                         * @returns {*} Returns the entry value.
                         */
                        function listCacheGet(key) {
                            var data = this.__data__,
                                index = assocIndexOf(data, key);

                            return index < 0 ? undefined : data[index][1];
                        }

                        /**
                         * Checks if a list cache value for `key` exists.
                         *
                         * @private
                         * @name has
                         * @memberOf ListCache
                         * @param {string} key The key of the entry to check.
                         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                         */
                        function listCacheHas(key) {
                            return assocIndexOf(this.__data__, key) > -1;
                        }

                        /**
                         * Sets the list cache `key` to `value`.
                         *
                         * @private
                         * @name set
                         * @memberOf ListCache
                         * @param {string} key The key of the value to set.
                         * @param {*} value The value to set.
                         * @returns {Object} Returns the list cache instance.
                         */
                        function listCacheSet(key, value) {
                            var data = this.__data__,
                                index = assocIndexOf(data, key);

                            if (index < 0) {
                                ++this.size;
                                data.push([key, value]);
                            } else {
                                data[index][1] = value;
                            }
                            return this;
                        }

                        // Add methods to `ListCache`.
                        ListCache.prototype.clear = listCacheClear;
                        ListCache.prototype['delete'] = listCacheDelete;
                        ListCache.prototype.get = listCacheGet;
                        ListCache.prototype.has = listCacheHas;
                        ListCache.prototype.set = listCacheSet;

                        /*------------------------------------------------------------------------*/

                        /**
                         * Creates a map cache object to store key-value pairs.
                         *
                         * @private
                         * @constructor
                         * @param {Array} [entries] The key-value pairs to cache.
                         */
                        function MapCache(entries) {
                            var index = -1,
                                length = entries == null ? 0 : entries.length;

                            this.clear();
                            while (++index < length) {
                                var entry = entries[index];
                                this.set(entry[0], entry[1]);
                            }
                        }

                        /**
                         * Removes all key-value entries from the map.
                         *
                         * @private
                         * @name clear
                         * @memberOf MapCache
                         */
                        function mapCacheClear() {
                            this.size = 0;
                            this.__data__ = {
                                'hash': new Hash,
                                'map': new (Map || ListCache),
                                'string': new Hash
                            };
                        }

                        /**
                         * Removes `key` and its value from the map.
                         *
                         * @private
                         * @name delete
                         * @memberOf MapCache
                         * @param {string} key The key of the value to remove.
                         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                         */
                        function mapCacheDelete(key) {
                            var result = getMapData(this, key)['delete'](key);
                            this.size -= result ? 1 : 0;
                            return result;
                        }

                        /**
                         * Gets the map value for `key`.
                         *
                         * @private
                         * @name get
                         * @memberOf MapCache
                         * @param {string} key The key of the value to get.
                         * @returns {*} Returns the entry value.
                         */
                        function mapCacheGet(key) {
                            return getMapData(this, key).get(key);
                        }

                        /**
                         * Checks if a map value for `key` exists.
                         *
                         * @private
                         * @name has
                         * @memberOf MapCache
                         * @param {string} key The key of the entry to check.
                         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                         */
                        function mapCacheHas(key) {
                            return getMapData(this, key).has(key);
                        }

                        /**
                         * Sets the map `key` to `value`.
                         *
                         * @private
                         * @name set
                         * @memberOf MapCache
                         * @param {string} key The key of the value to set.
                         * @param {*} value The value to set.
                         * @returns {Object} Returns the map cache instance.
                         */
                        function mapCacheSet(key, value) {
                            var data = getMapData(this, key),
                                size = data.size;

                            data.set(key, value);
                            this.size += data.size == size ? 0 : 1;
                            return this;
                        }

                        // Add methods to `MapCache`.
                        MapCache.prototype.clear = mapCacheClear;
                        MapCache.prototype['delete'] = mapCacheDelete;
                        MapCache.prototype.get = mapCacheGet;
                        MapCache.prototype.has = mapCacheHas;
                        MapCache.prototype.set = mapCacheSet;

                        /*------------------------------------------------------------------------*/

                        /**
                         *
                         * Creates an array cache object to store unique values.
                         *
                         * @private
                         * @constructor
                         * @param {Array} [values] The values to cache.
                         */
                        function SetCache(values) {
                            var index = -1,
                                length = values == null ? 0 : values.length;

                            this.__data__ = new MapCache;
                            while (++index < length) {
                                this.add(values[index]);
                            }
                        }

                        /**
                         * Adds `value` to the array cache.
                         *
                         * @private
                         * @name add
                         * @memberOf SetCache
                         * @alias push
                         * @param {*} value The value to cache.
                         * @returns {Object} Returns the cache instance.
                         */
                        function setCacheAdd(value) {
                            this.__data__.set(value, HASH_UNDEFINED);
                            return this;
                        }

                        /**
                         * Checks if `value` is in the array cache.
                         *
                         * @private
                         * @name has
                         * @memberOf SetCache
                         * @param {*} value The value to search for.
                         * @returns {number} Returns `true` if `value` is found, else `false`.
                         */
                        function setCacheHas(value) {
                            return this.__data__.has(value);
                        }

                        // Add methods to `SetCache`.
                        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
                        SetCache.prototype.has = setCacheHas;

                        /*------------------------------------------------------------------------*/

                        /**
                         * Creates a stack cache object to store key-value pairs.
                         *
                         * @private
                         * @constructor
                         * @param {Array} [entries] The key-value pairs to cache.
                         */
                        function Stack(entries) {
                            var data = this.__data__ = new ListCache(entries);
                            this.size = data.size;
                        }

                        /**
                         * Removes all key-value entries from the stack.
                         *
                         * @private
                         * @name clear
                         * @memberOf Stack
                         */
                        function stackClear() {
                            this.__data__ = new ListCache;
                            this.size = 0;
                        }

                        /**
                         * Removes `key` and its value from the stack.
                         *
                         * @private
                         * @name delete
                         * @memberOf Stack
                         * @param {string} key The key of the value to remove.
                         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                         */
                        function stackDelete(key) {
                            var data = this.__data__,
                                result = data['delete'](key);

                            this.size = data.size;
                            return result;
                        }

                        /**
                         * Gets the stack value for `key`.
                         *
                         * @private
                         * @name get
                         * @memberOf Stack
                         * @param {string} key The key of the value to get.
                         * @returns {*} Returns the entry value.
                         */
                        function stackGet(key) {
                            return this.__data__.get(key);
                        }

                        /**
                         * Checks if a stack value for `key` exists.
                         *
                         * @private
                         * @name has
                         * @memberOf Stack
                         * @param {string} key The key of the entry to check.
                         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                         */
                        function stackHas(key) {
                            return this.__data__.has(key);
                        }

                        /**
                         * Sets the stack `key` to `value`.
                         *
                         * @private
                         * @name set
                         * @memberOf Stack
                         * @param {string} key The key of the value to set.
                         * @param {*} value The value to set.
                         * @returns {Object} Returns the stack cache instance.
                         */
                        function stackSet(key, value) {
                            var data = this.__data__;
                            if (data instanceof ListCache) {
                                var pairs = data.__data__;
                                if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
                                    pairs.push([key, value]);
                                    this.size = ++data.size;
                                    return this;
                                }
                                data = this.__data__ = new MapCache(pairs);
                            }
                            data.set(key, value);
                            this.size = data.size;
                            return this;
                        }

                        // Add methods to `Stack`.
                        Stack.prototype.clear = stackClear;
                        Stack.prototype['delete'] = stackDelete;
                        Stack.prototype.get = stackGet;
                        Stack.prototype.has = stackHas;
                        Stack.prototype.set = stackSet;

                        /*------------------------------------------------------------------------*/

                        /**
                         * Creates an array of the enumerable property names of the array-like `value`.
                         *
                         * @private
                         * @param {*} value The value to query.
                         * @param {boolean} inherited Specify returning inherited property names.
                         * @returns {Array} Returns the array of property names.
                         */
                        function arrayLikeKeys(value, inherited) {
                            var isArr = isArray(value),
                                isArg = !isArr && isArguments(value),
                                isBuff = !isArr && !isArg && isBuffer(value),
                                isType = !isArr && !isArg && !isBuff && isTypedArray(value),
                                skipIndexes = isArr || isArg || isBuff || isType,
                                result = skipIndexes ? baseTimes(value.length, String) : [],
                                length = result.length;

                            for (var key in value) {
                                if ((inherited || hasOwnProperty.call(value, key)) &&
                                    !(skipIndexes && (
                                        // Safari 9 has enumerable `arguments.length` in strict mode.
                                        key == 'length' ||
                                        // Node.js 0.10 has enumerable non-index properties on buffers.
                                        (isBuff && (key == 'offset' || key == 'parent')) ||
                                        // PhantomJS 2 has enumerable non-index properties on typed arrays.
                                        (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
                                        // Skip index properties.
                                        isIndex(key, length)
                                    ))) {
                                    result.push(key);
                                }
                            }
                            return result;
                        }

                        /**
                         * A specialized version of `_.sample` for arrays.
                         *
                         * @private
                         * @param {Array} array The array to sample.
                         * @returns {*} Returns the random element.
                         */
                        function arraySample(array) {
                            var length = array.length;
                            return length ? array[baseRandom(0, length - 1)] : undefined;
                        }

                        /**
                         * A specialized version of `_.sampleSize` for arrays.
                         *
                         * @private
                         * @param {Array} array The array to sample.
                         * @param {number} n The number of elements to sample.
                         * @returns {Array} Returns the random elements.
                         */
                        function arraySampleSize(array, n) {
                            return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
                        }

                        /**
                         * A specialized version of `_.shuffle` for arrays.
                         *
                         * @private
                         * @param {Array} array The array to shuffle.
                         * @returns {Array} Returns the new shuffled array.
                         */
                        function arrayShuffle(array) {
                            return shuffleSelf(copyArray(array));
                        }

                        /**
                         * This function is like `assignValue` except that it doesn't assign
                         * `undefined` values.
                         *
                         * @private
                         * @param {Object} object The object to modify.
                         * @param {string} key The key of the property to assign.
                         * @param {*} value The value to assign.
                         */
                        function assignMergeValue(object, key, value) {
                            if ((value !== undefined && !eq(object[key], value)) ||
                                (value === undefined && !(key in object))) {
                                baseAssignValue(object, key, value);
                            }
                        }

                        /**
                         * Assigns `value` to `key` of `object` if the existing value is not equivalent
                         * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                         * for equality comparisons.
                         *
                         * @private
                         * @param {Object} object The object to modify.
                         * @param {string} key The key of the property to assign.
                         * @param {*} value The value to assign.
                         */
                        function assignValue(object, key, value) {
                            var objValue = object[key];
                            if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
                                (value === undefined && !(key in object))) {
                                baseAssignValue(object, key, value);
                            }
                        }

                        /**
                         * Gets the index at which the `key` is found in `array` of key-value pairs.
                         *
                         * @private
                         * @param {Array} array The array to inspect.
                         * @param {*} key The key to search for.
                         * @returns {number} Returns the index of the matched value, else `-1`.
                         */
                        function assocIndexOf(array, key) {
                            var length = array.length;
                            while (length--) {
                                if (eq(array[length][0], key)) {
                                    return length;
                                }
                            }
                            return -1;
                        }

                        /**
                         * Aggregates elements of `collection` on `accumulator` with keys transformed
                         * by `iteratee` and values set by `setter`.
                         *
                         * @private
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} setter The function to set `accumulator` values.
                         * @param {Function} iteratee The iteratee to transform keys.
                         * @param {Object} accumulator The initial aggregated object.
                         * @returns {Function} Returns `accumulator`.
                         */
                        function baseAggregator(collection, setter, iteratee, accumulator) {
                            baseEach(collection, function(value, key, collection) {
                                setter(accumulator, value, iteratee(value), collection);
                            });
                            return accumulator;
                        }

                        /**
                         * The base implementation of `_.assign` without support for multiple sources
                         * or `customizer` functions.
                         *
                         * @private
                         * @param {Object} object The destination object.
                         * @param {Object} source The source object.
                         * @returns {Object} Returns `object`.
                         */
                        function baseAssign(object, source) {
                            return object && copyObject(source, keys(source), object);
                        }

                        /**
                         * The base implementation of `_.assignIn` without support for multiple sources
                         * or `customizer` functions.
                         *
                         * @private
                         * @param {Object} object The destination object.
                         * @param {Object} source The source object.
                         * @returns {Object} Returns `object`.
                         */
                        function baseAssignIn(object, source) {
                            return object && copyObject(source, keysIn(source), object);
                        }

                        /**
                         * The base implementation of `assignValue` and `assignMergeValue` without
                         * value checks.
                         *
                         * @private
                         * @param {Object} object The object to modify.
                         * @param {string} key The key of the property to assign.
                         * @param {*} value The value to assign.
                         */
                        function baseAssignValue(object, key, value) {
                            if (key == '__proto__' && defineProperty) {
                                defineProperty(object, key, {
                                    'configurable': true,
                                    'enumerable': true,
                                    'value': value,
                                    'writable': true
                                });
                            } else {
                                object[key] = value;
                            }
                        }

                        /**
                         * The base implementation of `_.at` without support for individual paths.
                         *
                         * @private
                         * @param {Object} object The object to iterate over.
                         * @param {string[]} paths The property paths to pick.
                         * @returns {Array} Returns the picked elements.
                         */
                        function baseAt(object, paths) {
                            var index = -1,
                                length = paths.length,
                                result = Array(length),
                                skip = object == null;

                            while (++index < length) {
                                result[index] = skip ? undefined : get(object, paths[index]);
                            }
                            return result;
                        }

                        /**
                         * The base implementation of `_.clamp` which doesn't coerce arguments.
                         *
                         * @private
                         * @param {number} number The number to clamp.
                         * @param {number} [lower] The lower bound.
                         * @param {number} upper The upper bound.
                         * @returns {number} Returns the clamped number.
                         */
                        function baseClamp(number, lower, upper) {
                            if (number === number) {
                                if (upper !== undefined) {
                                    number = number <= upper ? number : upper;
                                }
                                if (lower !== undefined) {
                                    number = number >= lower ? number : lower;
                                }
                            }
                            return number;
                        }

                        /**
                         * The base implementation of `_.clone` and `_.cloneDeep` which tracks
                         * traversed objects.
                         *
                         * @private
                         * @param {*} value The value to clone.
                         * @param {boolean} bitmask The bitmask flags.
                         *  1 - Deep clone
                         *  2 - Flatten inherited properties
                         *  4 - Clone symbols
                         * @param {Function} [customizer] The function to customize cloning.
                         * @param {string} [key] The key of `value`.
                         * @param {Object} [object] The parent object of `value`.
                         * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
                         * @returns {*} Returns the cloned value.
                         */
                        function baseClone(value, bitmask, customizer, key, object, stack) {
                            var result,
                                isDeep = bitmask & CLONE_DEEP_FLAG,
                                isFlat = bitmask & CLONE_FLAT_FLAG,
                                isFull = bitmask & CLONE_SYMBOLS_FLAG;

                            if (customizer) {
                                result = object ? customizer(value, key, object, stack) : customizer(value);
                            }
                            if (result !== undefined) {
                                return result;
                            }
                            if (!isObject(value)) {
                                return value;
                            }
                            var isArr = isArray(value);
                            if (isArr) {
                                result = initCloneArray(value);
                                if (!isDeep) {
                                    return copyArray(value, result);
                                }
                            } else {
                                var tag = getTag(value),
                                    isFunc = tag == funcTag || tag == genTag;

                                if (isBuffer(value)) {
                                    return cloneBuffer(value, isDeep);
                                }
                                if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
                                    result = (isFlat || isFunc) ? {} : initCloneObject(value);
                                    if (!isDeep) {
                                        return isFlat
                                            ? copySymbolsIn(value, baseAssignIn(result, value))
                                            : copySymbols(value, baseAssign(result, value));
                                    }
                                } else {
                                    if (!cloneableTags[tag]) {
                                        return object ? value : {};
                                    }
                                    result = initCloneByTag(value, tag, baseClone, isDeep);
                                }
                            }
                            // Check for circular references and return its corresponding clone.
                            stack || (stack = new Stack);
                            var stacked = stack.get(value);
                            if (stacked) {
                                return stacked;
                            }
                            stack.set(value, result);

                            var keysFunc = isFull
                                ? (isFlat ? getAllKeysIn : getAllKeys)
                                : (isFlat ? keysIn : keys);

                            var props = isArr ? undefined : keysFunc(value);
                            arrayEach(props || value, function(subValue, key) {
                                if (props) {
                                    key = subValue;
                                    subValue = value[key];
                                }
                                // Recursively populate clone (susceptible to call stack limits).
                                assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
                            });
                            return result;
                        }

                        /**
                         * The base implementation of `_.conforms` which doesn't clone `source`.
                         *
                         * @private
                         * @param {Object} source The object of property predicates to conform to.
                         * @returns {Function} Returns the new spec function.
                         */
                        function baseConforms(source) {
                            var props = keys(source);
                            return function(object) {
                                return baseConformsTo(object, source, props);
                            };
                        }

                        /**
                         * The base implementation of `_.conformsTo` which accepts `props` to check.
                         *
                         * @private
                         * @param {Object} object The object to inspect.
                         * @param {Object} source The object of property predicates to conform to.
                         * @returns {boolean} Returns `true` if `object` conforms, else `false`.
                         */
                        function baseConformsTo(object, source, props) {
                            var length = props.length;
                            if (object == null) {
                                return !length;
                            }
                            object = Object(object);
                            while (length--) {
                                var key = props[length],
                                    predicate = source[key],
                                    value = object[key];

                                if ((value === undefined && !(key in object)) || !predicate(value)) {
                                    return false;
                                }
                            }
                            return true;
                        }

                        /**
                         * The base implementation of `_.delay` and `_.defer` which accepts `args`
                         * to provide to `func`.
                         *
                         * @private
                         * @param {Function} func The function to delay.
                         * @param {number} wait The number of milliseconds to delay invocation.
                         * @param {Array} args The arguments to provide to `func`.
                         * @returns {number|Object} Returns the timer id or timeout object.
                         */
                        function baseDelay(func, wait, args) {
                            if (typeof func != 'function') {
                                throw new TypeError(FUNC_ERROR_TEXT);
                            }
                            return setTimeout(function() { func.apply(undefined, args); }, wait);
                        }

                        /**
                         * The base implementation of methods like `_.difference` without support
                         * for excluding multiple arrays or iteratee shorthands.
                         *
                         * @private
                         * @param {Array} array The array to inspect.
                         * @param {Array} values The values to exclude.
                         * @param {Function} [iteratee] The iteratee invoked per element.
                         * @param {Function} [comparator] The comparator invoked per element.
                         * @returns {Array} Returns the new array of filtered values.
                         */
                        function baseDifference(array, values, iteratee, comparator) {
                            var index = -1,
                                includes = arrayIncludes,
                                isCommon = true,
                                length = array.length,
                                result = [],
                                valuesLength = values.length;

                            if (!length) {
                                return result;
                            }
                            if (iteratee) {
                                values = arrayMap(values, baseUnary(iteratee));
                            }
                            if (comparator) {
                                includes = arrayIncludesWith;
                                isCommon = false;
                            }
                            else if (values.length >= LARGE_ARRAY_SIZE) {
                                includes = cacheHas;
                                isCommon = false;
                                values = new SetCache(values);
                            }
                            outer:
                                while (++index < length) {
                                    var value = array[index],
                                        computed = iteratee == null ? value : iteratee(value);

                                    value = (comparator || value !== 0) ? value : 0;
                                    if (isCommon && computed === computed) {
                                        var valuesIndex = valuesLength;
                                        while (valuesIndex--) {
                                            if (values[valuesIndex] === computed) {
                                                continue outer;
                                            }
                                        }
                                        result.push(value);
                                    }
                                    else if (!includes(values, computed, comparator)) {
                                        result.push(value);
                                    }
                                }
                            return result;
                        }

                        /**
                         * The base implementation of `_.forEach` without support for iteratee shorthands.
                         *
                         * @private
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} iteratee The function invoked per iteration.
                         * @returns {Array|Object} Returns `collection`.
                         */
                        var baseEach = createBaseEach(baseForOwn);

                        /**
                         * The base implementation of `_.forEachRight` without support for iteratee shorthands.
                         *
                         * @private
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} iteratee The function invoked per iteration.
                         * @returns {Array|Object} Returns `collection`.
                         */
                        var baseEachRight = createBaseEach(baseForOwnRight, true);

                        /**
                         * The base implementation of `_.every` without support for iteratee shorthands.
                         *
                         * @private
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} predicate The function invoked per iteration.
                         * @returns {boolean} Returns `true` if all elements pass the predicate check,
                         *  else `false`
                         */
                        function baseEvery(collection, predicate) {
                            var result = true;
                            baseEach(collection, function(value, index, collection) {
                                result = !!predicate(value, index, collection);
                                return result;
                            });
                            return result;
                        }

                        /**
                         * The base implementation of methods like `_.max` and `_.min` which accepts a
                         * `comparator` to determine the extremum value.
                         *
                         * @private
                         * @param {Array} array The array to iterate over.
                         * @param {Function} iteratee The iteratee invoked per iteration.
                         * @param {Function} comparator The comparator used to compare values.
                         * @returns {*} Returns the extremum value.
                         */
                        function baseExtremum(array, iteratee, comparator) {
                            var index = -1,
                                length = array.length;

                            while (++index < length) {
                                var value = array[index],
                                    current = iteratee(value);

                                if (current != null && (computed === undefined
                                            ? (current === current && !isSymbol(current))
                                            : comparator(current, computed)
                                    )) {
                                    var computed = current,
                                        result = value;
                                }
                            }
                            return result;
                        }

                        /**
                         * The base implementation of `_.fill` without an iteratee call guard.
                         *
                         * @private
                         * @param {Array} array The array to fill.
                         * @param {*} value The value to fill `array` with.
                         * @param {number} [start=0] The start position.
                         * @param {number} [end=array.length] The end position.
                         * @returns {Array} Returns `array`.
                         */
                        function baseFill(array, value, start, end) {
                            var length = array.length;

                            start = toInteger(start);
                            if (start < 0) {
                                start = -start > length ? 0 : (length + start);
                            }
                            end = (end === undefined || end > length) ? length : toInteger(end);
                            if (end < 0) {
                                end += length;
                            }
                            end = start > end ? 0 : toLength(end);
                            while (start < end) {
                                array[start++] = value;
                            }
                            return array;
                        }

                        /**
                         * The base implementation of `_.filter` without support for iteratee shorthands.
                         *
                         * @private
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} predicate The function invoked per iteration.
                         * @returns {Array} Returns the new filtered array.
                         */
                        function baseFilter(collection, predicate) {
                            var result = [];
                            baseEach(collection, function(value, index, collection) {
                                if (predicate(value, index, collection)) {
                                    result.push(value);
                                }
                            });
                            return result;
                        }

                        /**
                         * The base implementation of `_.flatten` with support for restricting flattening.
                         *
                         * @private
                         * @param {Array} array The array to flatten.
                         * @param {number} depth The maximum recursion depth.
                         * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
                         * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
                         * @param {Array} [result=[]] The initial result value.
                         * @returns {Array} Returns the new flattened array.
                         */
                        function baseFlatten(array, depth, predicate, isStrict, result) {
                            var index = -1,
                                length = array.length;

                            predicate || (predicate = isFlattenable);
                            result || (result = []);

                            while (++index < length) {
                                var value = array[index];
                                if (depth > 0 && predicate(value)) {
                                    if (depth > 1) {
                                        // Recursively flatten arrays (susceptible to call stack limits).
                                        baseFlatten(value, depth - 1, predicate, isStrict, result);
                                    } else {
                                        arrayPush(result, value);
                                    }
                                } else if (!isStrict) {
                                    result[result.length] = value;
                                }
                            }
                            return result;
                        }

                        /**
                         * The base implementation of `baseForOwn` which iterates over `object`
                         * properties returned by `keysFunc` and invokes `iteratee` for each property.
                         * Iteratee functions may exit iteration early by explicitly returning `false`.
                         *
                         * @private
                         * @param {Object} object The object to iterate over.
                         * @param {Function} iteratee The function invoked per iteration.
                         * @param {Function} keysFunc The function to get the keys of `object`.
                         * @returns {Object} Returns `object`.
                         */
                        var baseFor = createBaseFor();

                        /**
                         * This function is like `baseFor` except that it iterates over properties
                         * in the opposite order.
                         *
                         * @private
                         * @param {Object} object The object to iterate over.
                         * @param {Function} iteratee The function invoked per iteration.
                         * @param {Function} keysFunc The function to get the keys of `object`.
                         * @returns {Object} Returns `object`.
                         */
                        var baseForRight = createBaseFor(true);

                        /**
                         * The base implementation of `_.forOwn` without support for iteratee shorthands.
                         *
                         * @private
                         * @param {Object} object The object to iterate over.
                         * @param {Function} iteratee The function invoked per iteration.
                         * @returns {Object} Returns `object`.
                         */
                        function baseForOwn(object, iteratee) {
                            return object && baseFor(object, iteratee, keys);
                        }

                        /**
                         * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
                         *
                         * @private
                         * @param {Object} object The object to iterate over.
                         * @param {Function} iteratee The function invoked per iteration.
                         * @returns {Object} Returns `object`.
                         */
                        function baseForOwnRight(object, iteratee) {
                            return object && baseForRight(object, iteratee, keys);
                        }

                        /**
                         * The base implementation of `_.functions` which creates an array of
                         * `object` function property names filtered from `props`.
                         *
                         * @private
                         * @param {Object} object The object to inspect.
                         * @param {Array} props The property names to filter.
                         * @returns {Array} Returns the function names.
                         */
                        function baseFunctions(object, props) {
                            return arrayFilter(props, function(key) {
                                return isFunction(object[key]);
                            });
                        }

                        /**
                         * The base implementation of `_.get` without support for default values.
                         *
                         * @private
                         * @param {Object} object The object to query.
                         * @param {Array|string} path The path of the property to get.
                         * @returns {*} Returns the resolved value.
                         */
                        function baseGet(object, path) {
                            path = castPath(path, object);

                            var index = 0,
                                length = path.length;

                            while (object != null && index < length) {
                                object = object[toKey(path[index++])];
                            }
                            return (index && index == length) ? object : undefined;
                        }

                        /**
                         * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
                         * `keysFunc` and `symbolsFunc` to get the enumerable property names and
                         * symbols of `object`.
                         *
                         * @private
                         * @param {Object} object The object to query.
                         * @param {Function} keysFunc The function to get the keys of `object`.
                         * @param {Function} symbolsFunc The function to get the symbols of `object`.
                         * @returns {Array} Returns the array of property names and symbols.
                         */
                        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
                            var result = keysFunc(object);
                            return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
                        }

                        /**
                         * The base implementation of `getTag` without fallbacks for buggy environments.
                         *
                         * @private
                         * @param {*} value The value to query.
                         * @returns {string} Returns the `toStringTag`.
                         */
                        function baseGetTag(value) {
                            if (value == null) {
                                return value === undefined ? undefinedTag : nullTag;
                            }
                            return (symToStringTag && symToStringTag in Object(value))
                                ? getRawTag(value)
                                : objectToString(value);
                        }

                        /**
                         * The base implementation of `_.gt` which doesn't coerce arguments.
                         *
                         * @private
                         * @param {*} value The value to compare.
                         * @param {*} other The other value to compare.
                         * @returns {boolean} Returns `true` if `value` is greater than `other`,
                         *  else `false`.
                         */
                        function baseGt(value, other) {
                            return value > other;
                        }

                        /**
                         * The base implementation of `_.has` without support for deep paths.
                         *
                         * @private
                         * @param {Object} [object] The object to query.
                         * @param {Array|string} key The key to check.
                         * @returns {boolean} Returns `true` if `key` exists, else `false`.
                         */
                        function baseHas(object, key) {
                            return object != null && hasOwnProperty.call(object, key);
                        }

                        /**
                         * The base implementation of `_.hasIn` without support for deep paths.
                         *
                         * @private
                         * @param {Object} [object] The object to query.
                         * @param {Array|string} key The key to check.
                         * @returns {boolean} Returns `true` if `key` exists, else `false`.
                         */
                        function baseHasIn(object, key) {
                            return object != null && key in Object(object);
                        }

                        /**
                         * The base implementation of `_.inRange` which doesn't coerce arguments.
                         *
                         * @private
                         * @param {number} number The number to check.
                         * @param {number} start The start of the range.
                         * @param {number} end The end of the range.
                         * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
                         */
                        function baseInRange(number, start, end) {
                            return number >= nativeMin(start, end) && number < nativeMax(start, end);
                        }

                        /**
                         * The base implementation of methods like `_.intersection`, without support
                         * for iteratee shorthands, that accepts an array of arrays to inspect.
                         *
                         * @private
                         * @param {Array} arrays The arrays to inspect.
                         * @param {Function} [iteratee] The iteratee invoked per element.
                         * @param {Function} [comparator] The comparator invoked per element.
                         * @returns {Array} Returns the new array of shared values.
                         */
                        function baseIntersection(arrays, iteratee, comparator) {
                            var includes = comparator ? arrayIncludesWith : arrayIncludes,
                                length = arrays[0].length,
                                othLength = arrays.length,
                                othIndex = othLength,
                                caches = Array(othLength),
                                maxLength = Infinity,
                                result = [];

                            while (othIndex--) {
                                var array = arrays[othIndex];
                                if (othIndex && iteratee) {
                                    array = arrayMap(array, baseUnary(iteratee));
                                }
                                maxLength = nativeMin(array.length, maxLength);
                                caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
                                    ? new SetCache(othIndex && array)
                                    : undefined;
                            }
                            array = arrays[0];

                            var index = -1,
                                seen = caches[0];

                            outer:
                                while (++index < length && result.length < maxLength) {
                                    var value = array[index],
                                        computed = iteratee ? iteratee(value) : value;

                                    value = (comparator || value !== 0) ? value : 0;
                                    if (!(seen
                                                ? cacheHas(seen, computed)
                                                : includes(result, computed, comparator)
                                        )) {
                                        othIndex = othLength;
                                        while (--othIndex) {
                                            var cache = caches[othIndex];
                                            if (!(cache
                                                    ? cacheHas(cache, computed)
                                                    : includes(arrays[othIndex], computed, comparator))
                                            ) {
                                                continue outer;
                                            }
                                        }
                                        if (seen) {
                                            seen.push(computed);
                                        }
                                        result.push(value);
                                    }
                                }
                            return result;
                        }

                        /**
                         * The base implementation of `_.invert` and `_.invertBy` which inverts
                         * `object` with values transformed by `iteratee` and set by `setter`.
                         *
                         * @private
                         * @param {Object} object The object to iterate over.
                         * @param {Function} setter The function to set `accumulator` values.
                         * @param {Function} iteratee The iteratee to transform values.
                         * @param {Object} accumulator The initial inverted object.
                         * @returns {Function} Returns `accumulator`.
                         */
                        function baseInverter(object, setter, iteratee, accumulator) {
                            baseForOwn(object, function(value, key, object) {
                                setter(accumulator, iteratee(value), key, object);
                            });
                            return accumulator;
                        }

                        /**
                         * The base implementation of `_.invoke` without support for individual
                         * method arguments.
                         *
                         * @private
                         * @param {Object} object The object to query.
                         * @param {Array|string} path The path of the method to invoke.
                         * @param {Array} args The arguments to invoke the method with.
                         * @returns {*} Returns the result of the invoked method.
                         */
                        function baseInvoke(object, path, args) {
                            path = castPath(path, object);
                            object = parent(object, path);
                            var func = object == null ? object : object[toKey(last(path))];
                            return func == null ? undefined : apply(func, object, args);
                        }

                        /**
                         * The base implementation of `_.isArguments`.
                         *
                         * @private
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is an `arguments` object,
                         */
                        function baseIsArguments(value) {
                            return isObjectLike(value) && baseGetTag(value) == argsTag;
                        }

                        /**
                         * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
                         *
                         * @private
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
                         */
                        function baseIsArrayBuffer(value) {
                            return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
                        }

                        /**
                         * The base implementation of `_.isDate` without Node.js optimizations.
                         *
                         * @private
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
                         */
                        function baseIsDate(value) {
                            return isObjectLike(value) && baseGetTag(value) == dateTag;
                        }

                        /**
                         * The base implementation of `_.isEqual` which supports partial comparisons
                         * and tracks traversed objects.
                         *
                         * @private
                         * @param {*} value The value to compare.
                         * @param {*} other The other value to compare.
                         * @param {boolean} bitmask The bitmask flags.
                         *  1 - Unordered comparison
                         *  2 - Partial comparison
                         * @param {Function} [customizer] The function to customize comparisons.
                         * @param {Object} [stack] Tracks traversed `value` and `other` objects.
                         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                         */
                        function baseIsEqual(value, other, bitmask, customizer, stack) {
                            if (value === other) {
                                return true;
                            }
                            if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
                                return value !== value && other !== other;
                            }
                            return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
                        }

                        /**
                         * A specialized version of `baseIsEqual` for arrays and objects which performs
                         * deep comparisons and tracks traversed objects enabling objects with circular
                         * references to be compared.
                         *
                         * @private
                         * @param {Object} object The object to compare.
                         * @param {Object} other The other object to compare.
                         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                         * @param {Function} customizer The function to customize comparisons.
                         * @param {Function} equalFunc The function to determine equivalents of values.
                         * @param {Object} [stack] Tracks traversed `object` and `other` objects.
                         * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
                         */
                        function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
                            var objIsArr = isArray(object),
                                othIsArr = isArray(other),
                                objTag = objIsArr ? arrayTag : getTag(object),
                                othTag = othIsArr ? arrayTag : getTag(other);

                            objTag = objTag == argsTag ? objectTag : objTag;
                            othTag = othTag == argsTag ? objectTag : othTag;

                            var objIsObj = objTag == objectTag,
                                othIsObj = othTag == objectTag,
                                isSameTag = objTag == othTag;

                            if (isSameTag && isBuffer(object)) {
                                if (!isBuffer(other)) {
                                    return false;
                                }
                                objIsArr = true;
                                objIsObj = false;
                            }
                            if (isSameTag && !objIsObj) {
                                stack || (stack = new Stack);
                                return (objIsArr || isTypedArray(object))
                                    ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
                                    : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
                            }
                            if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
                                var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
                                    othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

                                if (objIsWrapped || othIsWrapped) {
                                    var objUnwrapped = objIsWrapped ? object.value() : object,
                                        othUnwrapped = othIsWrapped ? other.value() : other;

                                    stack || (stack = new Stack);
                                    return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
                                }
                            }
                            if (!isSameTag) {
                                return false;
                            }
                            stack || (stack = new Stack);
                            return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
                        }

                        /**
                         * The base implementation of `_.isMap` without Node.js optimizations.
                         *
                         * @private
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a map, else `false`.
                         */
                        function baseIsMap(value) {
                            return isObjectLike(value) && getTag(value) == mapTag;
                        }

                        /**
                         * The base implementation of `_.isMatch` without support for iteratee shorthands.
                         *
                         * @private
                         * @param {Object} object The object to inspect.
                         * @param {Object} source The object of property values to match.
                         * @param {Array} matchData The property names, values, and compare flags to match.
                         * @param {Function} [customizer] The function to customize comparisons.
                         * @returns {boolean} Returns `true` if `object` is a match, else `false`.
                         */
                        function baseIsMatch(object, source, matchData, customizer) {
                            var index = matchData.length,
                                length = index,
                                noCustomizer = !customizer;

                            if (object == null) {
                                return !length;
                            }
                            object = Object(object);
                            while (index--) {
                                var data = matchData[index];
                                if ((noCustomizer && data[2])
                                        ? data[1] !== object[data[0]]
                                        : !(data[0] in object)
                                ) {
                                    return false;
                                }
                            }
                            while (++index < length) {
                                data = matchData[index];
                                var key = data[0],
                                    objValue = object[key],
                                    srcValue = data[1];

                                if (noCustomizer && data[2]) {
                                    if (objValue === undefined && !(key in object)) {
                                        return false;
                                    }
                                } else {
                                    var stack = new Stack;
                                    if (customizer) {
                                        var result = customizer(objValue, srcValue, key, object, source, stack);
                                    }
                                    if (!(result === undefined
                                                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                                                : result
                                        )) {
                                        return false;
                                    }
                                }
                            }
                            return true;
                        }

                        /**
                         * The base implementation of `_.isNative` without bad shim checks.
                         *
                         * @private
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a native function,
                         *  else `false`.
                         */
                        function baseIsNative(value) {
                            if (!isObject(value) || isMasked(value)) {
                                return false;
                            }
                            var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
                            return pattern.test(toSource(value));
                        }

                        /**
                         * The base implementation of `_.isRegExp` without Node.js optimizations.
                         *
                         * @private
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
                         */
                        function baseIsRegExp(value) {
                            return isObjectLike(value) && baseGetTag(value) == regexpTag;
                        }

                        /**
                         * The base implementation of `_.isSet` without Node.js optimizations.
                         *
                         * @private
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a set, else `false`.
                         */
                        function baseIsSet(value) {
                            return isObjectLike(value) && getTag(value) == setTag;
                        }

                        /**
                         * The base implementation of `_.isTypedArray` without Node.js optimizations.
                         *
                         * @private
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
                         */
                        function baseIsTypedArray(value) {
                            return isObjectLike(value) &&
                                isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
                        }

                        /**
                         * The base implementation of `_.iteratee`.
                         *
                         * @private
                         * @param {*} [value=_.identity] The value to convert to an iteratee.
                         * @returns {Function} Returns the iteratee.
                         */
                        function baseIteratee(value) {
                            // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
                            // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
                            if (typeof value == 'function') {
                                return value;
                            }
                            if (value == null) {
                                return identity;
                            }
                            if (typeof value == 'object') {
                                return isArray(value)
                                    ? baseMatchesProperty(value[0], value[1])
                                    : baseMatches(value);
                            }
                            return property(value);
                        }

                        /**
                         * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
                         *
                         * @private
                         * @param {Object} object The object to query.
                         * @returns {Array} Returns the array of property names.
                         */
                        function baseKeys(object) {
                            if (!isPrototype(object)) {
                                return nativeKeys(object);
                            }
                            var result = [];
                            for (var key in Object(object)) {
                                if (hasOwnProperty.call(object, key) && key != 'constructor') {
                                    result.push(key);
                                }
                            }
                            return result;
                        }

                        /**
                         * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
                         *
                         * @private
                         * @param {Object} object The object to query.
                         * @returns {Array} Returns the array of property names.
                         */
                        function baseKeysIn(object) {
                            if (!isObject(object)) {
                                return nativeKeysIn(object);
                            }
                            var isProto = isPrototype(object),
                                result = [];

                            for (var key in object) {
                                if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
                                    result.push(key);
                                }
                            }
                            return result;
                        }

                        /**
                         * The base implementation of `_.lt` which doesn't coerce arguments.
                         *
                         * @private
                         * @param {*} value The value to compare.
                         * @param {*} other The other value to compare.
                         * @returns {boolean} Returns `true` if `value` is less than `other`,
                         *  else `false`.
                         */
                        function baseLt(value, other) {
                            return value < other;
                        }

                        /**
                         * The base implementation of `_.map` without support for iteratee shorthands.
                         *
                         * @private
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} iteratee The function invoked per iteration.
                         * @returns {Array} Returns the new mapped array.
                         */
                        function baseMap(collection, iteratee) {
                            var index = -1,
                                result = isArrayLike(collection) ? Array(collection.length) : [];

                            baseEach(collection, function(value, key, collection) {
                                result[++index] = iteratee(value, key, collection);
                            });
                            return result;
                        }

                        /**
                         * The base implementation of `_.matches` which doesn't clone `source`.
                         *
                         * @private
                         * @param {Object} source The object of property values to match.
                         * @returns {Function} Returns the new spec function.
                         */
                        function baseMatches(source) {
                            var matchData = getMatchData(source);
                            if (matchData.length == 1 && matchData[0][2]) {
                                return matchesStrictComparable(matchData[0][0], matchData[0][1]);
                            }
                            return function(object) {
                                return object === source || baseIsMatch(object, source, matchData);
                            };
                        }

                        /**
                         * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
                         *
                         * @private
                         * @param {string} path The path of the property to get.
                         * @param {*} srcValue The value to match.
                         * @returns {Function} Returns the new spec function.
                         */
                        function baseMatchesProperty(path, srcValue) {
                            if (isKey(path) && isStrictComparable(srcValue)) {
                                return matchesStrictComparable(toKey(path), srcValue);
                            }
                            return function(object) {
                                var objValue = get(object, path);
                                return (objValue === undefined && objValue === srcValue)
                                    ? hasIn(object, path)
                                    : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
                            };
                        }

                        /**
                         * The base implementation of `_.merge` without support for multiple sources.
                         *
                         * @private
                         * @param {Object} object The destination object.
                         * @param {Object} source The source object.
                         * @param {number} srcIndex The index of `source`.
                         * @param {Function} [customizer] The function to customize merged values.
                         * @param {Object} [stack] Tracks traversed source values and their merged
                         *  counterparts.
                         */
                        function baseMerge(object, source, srcIndex, customizer, stack) {
                            if (object === source) {
                                return;
                            }
                            baseFor(source, function(srcValue, key) {
                                if (isObject(srcValue)) {
                                    stack || (stack = new Stack);
                                    baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
                                }
                                else {
                                    var newValue = customizer
                                        ? customizer(object[key], srcValue, (key + ''), object, source, stack)
                                        : undefined;

                                    if (newValue === undefined) {
                                        newValue = srcValue;
                                    }
                                    assignMergeValue(object, key, newValue);
                                }
                            }, keysIn);
                        }

                        /**
                         * A specialized version of `baseMerge` for arrays and objects which performs
                         * deep merges and tracks traversed objects enabling objects with circular
                         * references to be merged.
                         *
                         * @private
                         * @param {Object} object The destination object.
                         * @param {Object} source The source object.
                         * @param {string} key The key of the value to merge.
                         * @param {number} srcIndex The index of `source`.
                         * @param {Function} mergeFunc The function to merge values.
                         * @param {Function} [customizer] The function to customize assigned values.
                         * @param {Object} [stack] Tracks traversed source values and their merged
                         *  counterparts.
                         */
                        function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
                            var objValue = object[key],
                                srcValue = source[key],
                                stacked = stack.get(srcValue);

                            if (stacked) {
                                assignMergeValue(object, key, stacked);
                                return;
                            }
                            var newValue = customizer
                                ? customizer(objValue, srcValue, (key + ''), object, source, stack)
                                : undefined;

                            var isCommon = newValue === undefined;

                            if (isCommon) {
                                var isArr = isArray(srcValue),
                                    isBuff = !isArr && isBuffer(srcValue),
                                    isTyped = !isArr && !isBuff && isTypedArray(srcValue);

                                newValue = srcValue;
                                if (isArr || isBuff || isTyped) {
                                    if (isArray(objValue)) {
                                        newValue = objValue;
                                    }
                                    else if (isArrayLikeObject(objValue)) {
                                        newValue = copyArray(objValue);
                                    }
                                    else if (isBuff) {
                                        isCommon = false;
                                        newValue = cloneBuffer(srcValue, true);
                                    }
                                    else if (isTyped) {
                                        isCommon = false;
                                        newValue = cloneTypedArray(srcValue, true);
                                    }
                                    else {
                                        newValue = [];
                                    }
                                }
                                else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                                    newValue = objValue;
                                    if (isArguments(objValue)) {
                                        newValue = toPlainObject(objValue);
                                    }
                                    else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
                                        newValue = initCloneObject(srcValue);
                                    }
                                }
                                else {
                                    isCommon = false;
                                }
                            }
                            if (isCommon) {
                                // Recursively merge objects and arrays (susceptible to call stack limits).
                                stack.set(srcValue, newValue);
                                mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
                                stack['delete'](srcValue);
                            }
                            assignMergeValue(object, key, newValue);
                        }

                        /**
                         * The base implementation of `_.nth` which doesn't coerce arguments.
                         *
                         * @private
                         * @param {Array} array The array to query.
                         * @param {number} n The index of the element to return.
                         * @returns {*} Returns the nth element of `array`.
                         */
                        function baseNth(array, n) {
                            var length = array.length;
                            if (!length) {
                                return;
                            }
                            n += n < 0 ? length : 0;
                            return isIndex(n, length) ? array[n] : undefined;
                        }

                        /**
                         * The base implementation of `_.orderBy` without param guards.
                         *
                         * @private
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
                         * @param {string[]} orders The sort orders of `iteratees`.
                         * @returns {Array} Returns the new sorted array.
                         */
                        function baseOrderBy(collection, iteratees, orders) {
                            var index = -1;
                            iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

                            var result = baseMap(collection, function(value, key, collection) {
                                var criteria = arrayMap(iteratees, function(iteratee) {
                                    return iteratee(value);
                                });
                                return { 'criteria': criteria, 'index': ++index, 'value': value };
                            });

                            return baseSortBy(result, function(object, other) {
                                return compareMultiple(object, other, orders);
                            });
                        }

                        /**
                         * The base implementation of `_.pick` without support for individual
                         * property identifiers.
                         *
                         * @private
                         * @param {Object} object The source object.
                         * @param {string[]} paths The property paths to pick.
                         * @returns {Object} Returns the new object.
                         */
                        function basePick(object, paths) {
                            return basePickBy(object, paths, function(value, path) {
                                return hasIn(object, path);
                            });
                        }

                        /**
                         * The base implementation of  `_.pickBy` without support for iteratee shorthands.
                         *
                         * @private
                         * @param {Object} object The source object.
                         * @param {string[]} paths The property paths to pick.
                         * @param {Function} predicate The function invoked per property.
                         * @returns {Object} Returns the new object.
                         */
                        function basePickBy(object, paths, predicate) {
                            var index = -1,
                                length = paths.length,
                                result = {};

                            while (++index < length) {
                                var path = paths[index],
                                    value = baseGet(object, path);

                                if (predicate(value, path)) {
                                    baseSet(result, castPath(path, object), value);
                                }
                            }
                            return result;
                        }

                        /**
                         * A specialized version of `baseProperty` which supports deep paths.
                         *
                         * @private
                         * @param {Array|string} path The path of the property to get.
                         * @returns {Function} Returns the new accessor function.
                         */
                        function basePropertyDeep(path) {
                            return function(object) {
                                return baseGet(object, path);
                            };
                        }

                        /**
                         * The base implementation of `_.pullAllBy` without support for iteratee
                         * shorthands.
                         *
                         * @private
                         * @param {Array} array The array to modify.
                         * @param {Array} values The values to remove.
                         * @param {Function} [iteratee] The iteratee invoked per element.
                         * @param {Function} [comparator] The comparator invoked per element.
                         * @returns {Array} Returns `array`.
                         */
                        function basePullAll(array, values, iteratee, comparator) {
                            var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
                                index = -1,
                                length = values.length,
                                seen = array;

                            if (array === values) {
                                values = copyArray(values);
                            }
                            if (iteratee) {
                                seen = arrayMap(array, baseUnary(iteratee));
                            }
                            while (++index < length) {
                                var fromIndex = 0,
                                    value = values[index],
                                    computed = iteratee ? iteratee(value) : value;

                                while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
                                    if (seen !== array) {
                                        splice.call(seen, fromIndex, 1);
                                    }
                                    splice.call(array, fromIndex, 1);
                                }
                            }
                            return array;
                        }

                        /**
                         * The base implementation of `_.pullAt` without support for individual
                         * indexes or capturing the removed elements.
                         *
                         * @private
                         * @param {Array} array The array to modify.
                         * @param {number[]} indexes The indexes of elements to remove.
                         * @returns {Array} Returns `array`.
                         */
                        function basePullAt(array, indexes) {
                            var length = array ? indexes.length : 0,
                                lastIndex = length - 1;

                            while (length--) {
                                var index = indexes[length];
                                if (length == lastIndex || index !== previous) {
                                    var previous = index;
                                    if (isIndex(index)) {
                                        splice.call(array, index, 1);
                                    } else {
                                        baseUnset(array, index);
                                    }
                                }
                            }
                            return array;
                        }

                        /**
                         * The base implementation of `_.random` without support for returning
                         * floating-point numbers.
                         *
                         * @private
                         * @param {number} lower The lower bound.
                         * @param {number} upper The upper bound.
                         * @returns {number} Returns the random number.
                         */
                        function baseRandom(lower, upper) {
                            return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
                        }

                        /**
                         * The base implementation of `_.range` and `_.rangeRight` which doesn't
                         * coerce arguments.
                         *
                         * @private
                         * @param {number} start The start of the range.
                         * @param {number} end The end of the range.
                         * @param {number} step The value to increment or decrement by.
                         * @param {boolean} [fromRight] Specify iterating from right to left.
                         * @returns {Array} Returns the range of numbers.
                         */
                        function baseRange(start, end, step, fromRight) {
                            var index = -1,
                                length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
                                result = Array(length);

                            while (length--) {
                                result[fromRight ? length : ++index] = start;
                                start += step;
                            }
                            return result;
                        }

                        /**
                         * The base implementation of `_.repeat` which doesn't coerce arguments.
                         *
                         * @private
                         * @param {string} string The string to repeat.
                         * @param {number} n The number of times to repeat the string.
                         * @returns {string} Returns the repeated string.
                         */
                        function baseRepeat(string, n) {
                            var result = '';
                            if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
                                return result;
                            }
                            // Leverage the exponentiation by squaring algorithm for a faster repeat.
                            // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
                            do {
                                if (n % 2) {
                                    result += string;
                                }
                                n = nativeFloor(n / 2);
                                if (n) {
                                    string += string;
                                }
                            } while (n);

                            return result;
                        }

                        /**
                         * The base implementation of `_.rest` which doesn't validate or coerce arguments.
                         *
                         * @private
                         * @param {Function} func The function to apply a rest parameter to.
                         * @param {number} [start=func.length-1] The start position of the rest parameter.
                         * @returns {Function} Returns the new function.
                         */
                        function baseRest(func, start) {
                            return setToString(overRest(func, start, identity), func + '');
                        }

                        /**
                         * The base implementation of `_.sample`.
                         *
                         * @private
                         * @param {Array|Object} collection The collection to sample.
                         * @returns {*} Returns the random element.
                         */
                        function baseSample(collection) {
                            return arraySample(values(collection));
                        }

                        /**
                         * The base implementation of `_.sampleSize` without param guards.
                         *
                         * @private
                         * @param {Array|Object} collection The collection to sample.
                         * @param {number} n The number of elements to sample.
                         * @returns {Array} Returns the random elements.
                         */
                        function baseSampleSize(collection, n) {
                            var array = values(collection);
                            return shuffleSelf(array, baseClamp(n, 0, array.length));
                        }

                        /**
                         * The base implementation of `_.set`.
                         *
                         * @private
                         * @param {Object} object The object to modify.
                         * @param {Array|string} path The path of the property to set.
                         * @param {*} value The value to set.
                         * @param {Function} [customizer] The function to customize path creation.
                         * @returns {Object} Returns `object`.
                         */
                        function baseSet(object, path, value, customizer) {
                            if (!isObject(object)) {
                                return object;
                            }
                            path = castPath(path, object);

                            var index = -1,
                                length = path.length,
                                lastIndex = length - 1,
                                nested = object;

                            while (nested != null && ++index < length) {
                                var key = toKey(path[index]),
                                    newValue = value;

                                if (index != lastIndex) {
                                    var objValue = nested[key];
                                    newValue = customizer ? customizer(objValue, key, nested) : undefined;
                                    if (newValue === undefined) {
                                        newValue = isObject(objValue)
                                            ? objValue
                                            : (isIndex(path[index + 1]) ? [] : {});
                                    }
                                }
                                assignValue(nested, key, newValue);
                                nested = nested[key];
                            }
                            return object;
                        }

                        /**
                         * The base implementation of `setData` without support for hot loop shorting.
                         *
                         * @private
                         * @param {Function} func The function to associate metadata with.
                         * @param {*} data The metadata.
                         * @returns {Function} Returns `func`.
                         */
                        var baseSetData = !metaMap ? identity : function(func, data) {
                            metaMap.set(func, data);
                            return func;
                        };

                        /**
                         * The base implementation of `setToString` without support for hot loop shorting.
                         *
                         * @private
                         * @param {Function} func The function to modify.
                         * @param {Function} string The `toString` result.
                         * @returns {Function} Returns `func`.
                         */
                        var baseSetToString = !defineProperty ? identity : function(func, string) {
                            return defineProperty(func, 'toString', {
                                'configurable': true,
                                'enumerable': false,
                                'value': constant(string),
                                'writable': true
                            });
                        };

                        /**
                         * The base implementation of `_.shuffle`.
                         *
                         * @private
                         * @param {Array|Object} collection The collection to shuffle.
                         * @returns {Array} Returns the new shuffled array.
                         */
                        function baseShuffle(collection) {
                            return shuffleSelf(values(collection));
                        }

                        /**
                         * The base implementation of `_.slice` without an iteratee call guard.
                         *
                         * @private
                         * @param {Array} array The array to slice.
                         * @param {number} [start=0] The start position.
                         * @param {number} [end=array.length] The end position.
                         * @returns {Array} Returns the slice of `array`.
                         */
                        function baseSlice(array, start, end) {
                            var index = -1,
                                length = array.length;

                            if (start < 0) {
                                start = -start > length ? 0 : (length + start);
                            }
                            end = end > length ? length : end;
                            if (end < 0) {
                                end += length;
                            }
                            length = start > end ? 0 : ((end - start) >>> 0);
                            start >>>= 0;

                            var result = Array(length);
                            while (++index < length) {
                                result[index] = array[index + start];
                            }
                            return result;
                        }

                        /**
                         * The base implementation of `_.some` without support for iteratee shorthands.
                         *
                         * @private
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} predicate The function invoked per iteration.
                         * @returns {boolean} Returns `true` if any element passes the predicate check,
                         *  else `false`.
                         */
                        function baseSome(collection, predicate) {
                            var result;

                            baseEach(collection, function(value, index, collection) {
                                result = predicate(value, index, collection);
                                return !result;
                            });
                            return !!result;
                        }

                        /**
                         * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
                         * performs a binary search of `array` to determine the index at which `value`
                         * should be inserted into `array` in order to maintain its sort order.
                         *
                         * @private
                         * @param {Array} array The sorted array to inspect.
                         * @param {*} value The value to evaluate.
                         * @param {boolean} [retHighest] Specify returning the highest qualified index.
                         * @returns {number} Returns the index at which `value` should be inserted
                         *  into `array`.
                         */
                        function baseSortedIndex(array, value, retHighest) {
                            var low = 0,
                                high = array == null ? low : array.length;

                            if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
                                while (low < high) {
                                    var mid = (low + high) >>> 1,
                                        computed = array[mid];

                                    if (computed !== null && !isSymbol(computed) &&
                                        (retHighest ? (computed <= value) : (computed < value))) {
                                        low = mid + 1;
                                    } else {
                                        high = mid;
                                    }
                                }
                                return high;
                            }
                            return baseSortedIndexBy(array, value, identity, retHighest);
                        }

                        /**
                         * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
                         * which invokes `iteratee` for `value` and each element of `array` to compute
                         * their sort ranking. The iteratee is invoked with one argument; (value).
                         *
                         * @private
                         * @param {Array} array The sorted array to inspect.
                         * @param {*} value The value to evaluate.
                         * @param {Function} iteratee The iteratee invoked per element.
                         * @param {boolean} [retHighest] Specify returning the highest qualified index.
                         * @returns {number} Returns the index at which `value` should be inserted
                         *  into `array`.
                         */
                        function baseSortedIndexBy(array, value, iteratee, retHighest) {
                            value = iteratee(value);

                            var low = 0,
                                high = array == null ? 0 : array.length,
                                valIsNaN = value !== value,
                                valIsNull = value === null,
                                valIsSymbol = isSymbol(value),
                                valIsUndefined = value === undefined;

                            while (low < high) {
                                var mid = nativeFloor((low + high) / 2),
                                    computed = iteratee(array[mid]),
                                    othIsDefined = computed !== undefined,
                                    othIsNull = computed === null,
                                    othIsReflexive = computed === computed,
                                    othIsSymbol = isSymbol(computed);

                                if (valIsNaN) {
                                    var setLow = retHighest || othIsReflexive;
                                } else if (valIsUndefined) {
                                    setLow = othIsReflexive && (retHighest || othIsDefined);
                                } else if (valIsNull) {
                                    setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
                                } else if (valIsSymbol) {
                                    setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
                                } else if (othIsNull || othIsSymbol) {
                                    setLow = false;
                                } else {
                                    setLow = retHighest ? (computed <= value) : (computed < value);
                                }
                                if (setLow) {
                                    low = mid + 1;
                                } else {
                                    high = mid;
                                }
                            }
                            return nativeMin(high, MAX_ARRAY_INDEX);
                        }

                        /**
                         * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
                         * support for iteratee shorthands.
                         *
                         * @private
                         * @param {Array} array The array to inspect.
                         * @param {Function} [iteratee] The iteratee invoked per element.
                         * @returns {Array} Returns the new duplicate free array.
                         */
                        function baseSortedUniq(array, iteratee) {
                            var index = -1,
                                length = array.length,
                                resIndex = 0,
                                result = [];

                            while (++index < length) {
                                var value = array[index],
                                    computed = iteratee ? iteratee(value) : value;

                                if (!index || !eq(computed, seen)) {
                                    var seen = computed;
                                    result[resIndex++] = value === 0 ? 0 : value;
                                }
                            }
                            return result;
                        }

                        /**
                         * The base implementation of `_.toNumber` which doesn't ensure correct
                         * conversions of binary, hexadecimal, or octal string values.
                         *
                         * @private
                         * @param {*} value The value to process.
                         * @returns {number} Returns the number.
                         */
                        function baseToNumber(value) {
                            if (typeof value == 'number') {
                                return value;
                            }
                            if (isSymbol(value)) {
                                return NAN;
                            }
                            return +value;
                        }

                        /**
                         * The base implementation of `_.toString` which doesn't convert nullish
                         * values to empty strings.
                         *
                         * @private
                         * @param {*} value The value to process.
                         * @returns {string} Returns the string.
                         */
                        function baseToString(value) {
                            // Exit early for strings to avoid a performance hit in some environments.
                            if (typeof value == 'string') {
                                return value;
                            }
                            if (isArray(value)) {
                                // Recursively convert values (susceptible to call stack limits).
                                return arrayMap(value, baseToString) + '';
                            }
                            if (isSymbol(value)) {
                                return symbolToString ? symbolToString.call(value) : '';
                            }
                            var result = (value + '');
                            return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
                        }

                        /**
                         * The base implementation of `_.uniqBy` without support for iteratee shorthands.
                         *
                         * @private
                         * @param {Array} array The array to inspect.
                         * @param {Function} [iteratee] The iteratee invoked per element.
                         * @param {Function} [comparator] The comparator invoked per element.
                         * @returns {Array} Returns the new duplicate free array.
                         */
                        function baseUniq(array, iteratee, comparator) {
                            var index = -1,
                                includes = arrayIncludes,
                                length = array.length,
                                isCommon = true,
                                result = [],
                                seen = result;

                            if (comparator) {
                                isCommon = false;
                                includes = arrayIncludesWith;
                            }
                            else if (length >= LARGE_ARRAY_SIZE) {
                                var set = iteratee ? null : createSet(array);
                                if (set) {
                                    return setToArray(set);
                                }
                                isCommon = false;
                                includes = cacheHas;
                                seen = new SetCache;
                            }
                            else {
                                seen = iteratee ? [] : result;
                            }
                            outer:
                                while (++index < length) {
                                    var value = array[index],
                                        computed = iteratee ? iteratee(value) : value;

                                    value = (comparator || value !== 0) ? value : 0;
                                    if (isCommon && computed === computed) {
                                        var seenIndex = seen.length;
                                        while (seenIndex--) {
                                            if (seen[seenIndex] === computed) {
                                                continue outer;
                                            }
                                        }
                                        if (iteratee) {
                                            seen.push(computed);
                                        }
                                        result.push(value);
                                    }
                                    else if (!includes(seen, computed, comparator)) {
                                        if (seen !== result) {
                                            seen.push(computed);
                                        }
                                        result.push(value);
                                    }
                                }
                            return result;
                        }

                        /**
                         * The base implementation of `_.unset`.
                         *
                         * @private
                         * @param {Object} object The object to modify.
                         * @param {Array|string} path The property path to unset.
                         * @returns {boolean} Returns `true` if the property is deleted, else `false`.
                         */
                        function baseUnset(object, path) {
                            path = castPath(path, object);
                            object = parent(object, path);
                            return object == null || delete object[toKey(last(path))];
                        }

                        /**
                         * The base implementation of `_.update`.
                         *
                         * @private
                         * @param {Object} object The object to modify.
                         * @param {Array|string} path The path of the property to update.
                         * @param {Function} updater The function to produce the updated value.
                         * @param {Function} [customizer] The function to customize path creation.
                         * @returns {Object} Returns `object`.
                         */
                        function baseUpdate(object, path, updater, customizer) {
                            return baseSet(object, path, updater(baseGet(object, path)), customizer);
                        }

                        /**
                         * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
                         * without support for iteratee shorthands.
                         *
                         * @private
                         * @param {Array} array The array to query.
                         * @param {Function} predicate The function invoked per iteration.
                         * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
                         * @param {boolean} [fromRight] Specify iterating from right to left.
                         * @returns {Array} Returns the slice of `array`.
                         */
                        function baseWhile(array, predicate, isDrop, fromRight) {
                            var length = array.length,
                                index = fromRight ? length : -1;

                            while ((fromRight ? index-- : ++index < length) &&
                            predicate(array[index], index, array)) {}

                            return isDrop
                                ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
                                : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
                        }

                        /**
                         * The base implementation of `wrapperValue` which returns the result of
                         * performing a sequence of actions on the unwrapped `value`, where each
                         * successive action is supplied the return value of the previous.
                         *
                         * @private
                         * @param {*} value The unwrapped value.
                         * @param {Array} actions Actions to perform to resolve the unwrapped value.
                         * @returns {*} Returns the resolved value.
                         */
                        function baseWrapperValue(value, actions) {
                            var result = value;
                            if (result instanceof LazyWrapper) {
                                result = result.value();
                            }
                            return arrayReduce(actions, function(result, action) {
                                return action.func.apply(action.thisArg, arrayPush([result], action.args));
                            }, result);
                        }

                        /**
                         * The base implementation of methods like `_.xor`, without support for
                         * iteratee shorthands, that accepts an array of arrays to inspect.
                         *
                         * @private
                         * @param {Array} arrays The arrays to inspect.
                         * @param {Function} [iteratee] The iteratee invoked per element.
                         * @param {Function} [comparator] The comparator invoked per element.
                         * @returns {Array} Returns the new array of values.
                         */
                        function baseXor(arrays, iteratee, comparator) {
                            var length = arrays.length;
                            if (length < 2) {
                                return length ? baseUniq(arrays[0]) : [];
                            }
                            var index = -1,
                                result = Array(length);

                            while (++index < length) {
                                var array = arrays[index],
                                    othIndex = -1;

                                while (++othIndex < length) {
                                    if (othIndex != index) {
                                        result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
                                    }
                                }
                            }
                            return baseUniq(baseFlatten(result, 1), iteratee, comparator);
                        }

                        /**
                         * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
                         *
                         * @private
                         * @param {Array} props The property identifiers.
                         * @param {Array} values The property values.
                         * @param {Function} assignFunc The function to assign values.
                         * @returns {Object} Returns the new object.
                         */
                        function baseZipObject(props, values, assignFunc) {
                            var index = -1,
                                length = props.length,
                                valsLength = values.length,
                                result = {};

                            while (++index < length) {
                                var value = index < valsLength ? values[index] : undefined;
                                assignFunc(result, props[index], value);
                            }
                            return result;
                        }

                        /**
                         * Casts `value` to an empty array if it's not an array like object.
                         *
                         * @private
                         * @param {*} value The value to inspect.
                         * @returns {Array|Object} Returns the cast array-like object.
                         */
                        function castArrayLikeObject(value) {
                            return isArrayLikeObject(value) ? value : [];
                        }

                        /**
                         * Casts `value` to `identity` if it's not a function.
                         *
                         * @private
                         * @param {*} value The value to inspect.
                         * @returns {Function} Returns cast function.
                         */
                        function castFunction(value) {
                            return typeof value == 'function' ? value : identity;
                        }

                        /**
                         * Casts `value` to a path array if it's not one.
                         *
                         * @private
                         * @param {*} value The value to inspect.
                         * @param {Object} [object] The object to query keys on.
                         * @returns {Array} Returns the cast property path array.
                         */
                        function castPath(value, object) {
                            if (isArray(value)) {
                                return value;
                            }
                            return isKey(value, object) ? [value] : stringToPath(toString(value));
                        }

                        /**
                         * A `baseRest` alias which can be replaced with `identity` by module
                         * replacement plugins.
                         *
                         * @private
                         * @type {Function}
                         * @param {Function} func The function to apply a rest parameter to.
                         * @returns {Function} Returns the new function.
                         */
                        var castRest = baseRest;

                        /**
                         * Casts `array` to a slice if it's needed.
                         *
                         * @private
                         * @param {Array} array The array to inspect.
                         * @param {number} start The start position.
                         * @param {number} [end=array.length] The end position.
                         * @returns {Array} Returns the cast slice.
                         */
                        function castSlice(array, start, end) {
                            var length = array.length;
                            end = end === undefined ? length : end;
                            return (!start && end >= length) ? array : baseSlice(array, start, end);
                        }

                        /**
                         * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
                         *
                         * @private
                         * @param {number|Object} id The timer id or timeout object of the timer to clear.
                         */
                        var clearTimeout = ctxClearTimeout || function(id) {
                                return root.clearTimeout(id);
                            };

                        /**
                         * Creates a clone of  `buffer`.
                         *
                         * @private
                         * @param {Buffer} buffer The buffer to clone.
                         * @param {boolean} [isDeep] Specify a deep clone.
                         * @returns {Buffer} Returns the cloned buffer.
                         */
                        function cloneBuffer(buffer, isDeep) {
                            if (isDeep) {
                                return buffer.slice();
                            }
                            var length = buffer.length,
                                result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

                            buffer.copy(result);
                            return result;
                        }

                        /**
                         * Creates a clone of `arrayBuffer`.
                         *
                         * @private
                         * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
                         * @returns {ArrayBuffer} Returns the cloned array buffer.
                         */
                        function cloneArrayBuffer(arrayBuffer) {
                            var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
                            new Uint8Array(result).set(new Uint8Array(arrayBuffer));
                            return result;
                        }

                        /**
                         * Creates a clone of `dataView`.
                         *
                         * @private
                         * @param {Object} dataView The data view to clone.
                         * @param {boolean} [isDeep] Specify a deep clone.
                         * @returns {Object} Returns the cloned data view.
                         */
                        function cloneDataView(dataView, isDeep) {
                            var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
                            return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
                        }

                        /**
                         * Creates a clone of `map`.
                         *
                         * @private
                         * @param {Object} map The map to clone.
                         * @param {Function} cloneFunc The function to clone values.
                         * @param {boolean} [isDeep] Specify a deep clone.
                         * @returns {Object} Returns the cloned map.
                         */
                        function cloneMap(map, isDeep, cloneFunc) {
                            var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);
                            return arrayReduce(array, addMapEntry, new map.constructor);
                        }

                        /**
                         * Creates a clone of `regexp`.
                         *
                         * @private
                         * @param {Object} regexp The regexp to clone.
                         * @returns {Object} Returns the cloned regexp.
                         */
                        function cloneRegExp(regexp) {
                            var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
                            result.lastIndex = regexp.lastIndex;
                            return result;
                        }

                        /**
                         * Creates a clone of `set`.
                         *
                         * @private
                         * @param {Object} set The set to clone.
                         * @param {Function} cloneFunc The function to clone values.
                         * @param {boolean} [isDeep] Specify a deep clone.
                         * @returns {Object} Returns the cloned set.
                         */
                        function cloneSet(set, isDeep, cloneFunc) {
                            var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);
                            return arrayReduce(array, addSetEntry, new set.constructor);
                        }

                        /**
                         * Creates a clone of the `symbol` object.
                         *
                         * @private
                         * @param {Object} symbol The symbol object to clone.
                         * @returns {Object} Returns the cloned symbol object.
                         */
                        function cloneSymbol(symbol) {
                            return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
                        }

                        /**
                         * Creates a clone of `typedArray`.
                         *
                         * @private
                         * @param {Object} typedArray The typed array to clone.
                         * @param {boolean} [isDeep] Specify a deep clone.
                         * @returns {Object} Returns the cloned typed array.
                         */
                        function cloneTypedArray(typedArray, isDeep) {
                            var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
                            return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
                        }

                        /**
                         * Compares values to sort them in ascending order.
                         *
                         * @private
                         * @param {*} value The value to compare.
                         * @param {*} other The other value to compare.
                         * @returns {number} Returns the sort order indicator for `value`.
                         */
                        function compareAscending(value, other) {
                            if (value !== other) {
                                var valIsDefined = value !== undefined,
                                    valIsNull = value === null,
                                    valIsReflexive = value === value,
                                    valIsSymbol = isSymbol(value);

                                var othIsDefined = other !== undefined,
                                    othIsNull = other === null,
                                    othIsReflexive = other === other,
                                    othIsSymbol = isSymbol(other);

                                if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
                                    (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
                                    (valIsNull && othIsDefined && othIsReflexive) ||
                                    (!valIsDefined && othIsReflexive) ||
                                    !valIsReflexive) {
                                    return 1;
                                }
                                if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
                                    (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
                                    (othIsNull && valIsDefined && valIsReflexive) ||
                                    (!othIsDefined && valIsReflexive) ||
                                    !othIsReflexive) {
                                    return -1;
                                }
                            }
                            return 0;
                        }

                        /**
                         * Used by `_.orderBy` to compare multiple properties of a value to another
                         * and stable sort them.
                         *
                         * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
                         * specify an order of "desc" for descending or "asc" for ascending sort order
                         * of corresponding values.
                         *
                         * @private
                         * @param {Object} object The object to compare.
                         * @param {Object} other The other object to compare.
                         * @param {boolean[]|string[]} orders The order to sort by for each property.
                         * @returns {number} Returns the sort order indicator for `object`.
                         */
                        function compareMultiple(object, other, orders) {
                            var index = -1,
                                objCriteria = object.criteria,
                                othCriteria = other.criteria,
                                length = objCriteria.length,
                                ordersLength = orders.length;

                            while (++index < length) {
                                var result = compareAscending(objCriteria[index], othCriteria[index]);
                                if (result) {
                                    if (index >= ordersLength) {
                                        return result;
                                    }
                                    var order = orders[index];
                                    return result * (order == 'desc' ? -1 : 1);
                                }
                            }
                            // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
                            // that causes it, under certain circumstances, to provide the same value for
                            // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
                            // for more details.
                            //
                            // This also ensures a stable sort in V8 and other engines.
                            // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
                            return object.index - other.index;
                        }

                        /**
                         * Creates an array that is the composition of partially applied arguments,
                         * placeholders, and provided arguments into a single array of arguments.
                         *
                         * @private
                         * @param {Array} args The provided arguments.
                         * @param {Array} partials The arguments to prepend to those provided.
                         * @param {Array} holders The `partials` placeholder indexes.
                         * @params {boolean} [isCurried] Specify composing for a curried function.
                         * @returns {Array} Returns the new array of composed arguments.
                         */
                        function composeArgs(args, partials, holders, isCurried) {
                            var argsIndex = -1,
                                argsLength = args.length,
                                holdersLength = holders.length,
                                leftIndex = -1,
                                leftLength = partials.length,
                                rangeLength = nativeMax(argsLength - holdersLength, 0),
                                result = Array(leftLength + rangeLength),
                                isUncurried = !isCurried;

                            while (++leftIndex < leftLength) {
                                result[leftIndex] = partials[leftIndex];
                            }
                            while (++argsIndex < holdersLength) {
                                if (isUncurried || argsIndex < argsLength) {
                                    result[holders[argsIndex]] = args[argsIndex];
                                }
                            }
                            while (rangeLength--) {
                                result[leftIndex++] = args[argsIndex++];
                            }
                            return result;
                        }

                        /**
                         * This function is like `composeArgs` except that the arguments composition
                         * is tailored for `_.partialRight`.
                         *
                         * @private
                         * @param {Array} args The provided arguments.
                         * @param {Array} partials The arguments to append to those provided.
                         * @param {Array} holders The `partials` placeholder indexes.
                         * @params {boolean} [isCurried] Specify composing for a curried function.
                         * @returns {Array} Returns the new array of composed arguments.
                         */
                        function composeArgsRight(args, partials, holders, isCurried) {
                            var argsIndex = -1,
                                argsLength = args.length,
                                holdersIndex = -1,
                                holdersLength = holders.length,
                                rightIndex = -1,
                                rightLength = partials.length,
                                rangeLength = nativeMax(argsLength - holdersLength, 0),
                                result = Array(rangeLength + rightLength),
                                isUncurried = !isCurried;

                            while (++argsIndex < rangeLength) {
                                result[argsIndex] = args[argsIndex];
                            }
                            var offset = argsIndex;
                            while (++rightIndex < rightLength) {
                                result[offset + rightIndex] = partials[rightIndex];
                            }
                            while (++holdersIndex < holdersLength) {
                                if (isUncurried || argsIndex < argsLength) {
                                    result[offset + holders[holdersIndex]] = args[argsIndex++];
                                }
                            }
                            return result;
                        }

                        /**
                         * Copies the values of `source` to `array`.
                         *
                         * @private
                         * @param {Array} source The array to copy values from.
                         * @param {Array} [array=[]] The array to copy values to.
                         * @returns {Array} Returns `array`.
                         */
                        function copyArray(source, array) {
                            var index = -1,
                                length = source.length;

                            array || (array = Array(length));
                            while (++index < length) {
                                array[index] = source[index];
                            }
                            return array;
                        }

                        /**
                         * Copies properties of `source` to `object`.
                         *
                         * @private
                         * @param {Object} source The object to copy properties from.
                         * @param {Array} props The property identifiers to copy.
                         * @param {Object} [object={}] The object to copy properties to.
                         * @param {Function} [customizer] The function to customize copied values.
                         * @returns {Object} Returns `object`.
                         */
                        function copyObject(source, props, object, customizer) {
                            var isNew = !object;
                            object || (object = {});

                            var index = -1,
                                length = props.length;

                            while (++index < length) {
                                var key = props[index];

                                var newValue = customizer
                                    ? customizer(object[key], source[key], key, object, source)
                                    : undefined;

                                if (newValue === undefined) {
                                    newValue = source[key];
                                }
                                if (isNew) {
                                    baseAssignValue(object, key, newValue);
                                } else {
                                    assignValue(object, key, newValue);
                                }
                            }
                            return object;
                        }

                        /**
                         * Copies own symbols of `source` to `object`.
                         *
                         * @private
                         * @param {Object} source The object to copy symbols from.
                         * @param {Object} [object={}] The object to copy symbols to.
                         * @returns {Object} Returns `object`.
                         */
                        function copySymbols(source, object) {
                            return copyObject(source, getSymbols(source), object);
                        }

                        /**
                         * Copies own and inherited symbols of `source` to `object`.
                         *
                         * @private
                         * @param {Object} source The object to copy symbols from.
                         * @param {Object} [object={}] The object to copy symbols to.
                         * @returns {Object} Returns `object`.
                         */
                        function copySymbolsIn(source, object) {
                            return copyObject(source, getSymbolsIn(source), object);
                        }

                        /**
                         * Creates a function like `_.groupBy`.
                         *
                         * @private
                         * @param {Function} setter The function to set accumulator values.
                         * @param {Function} [initializer] The accumulator object initializer.
                         * @returns {Function} Returns the new aggregator function.
                         */
                        function createAggregator(setter, initializer) {
                            return function(collection, iteratee) {
                                var func = isArray(collection) ? arrayAggregator : baseAggregator,
                                    accumulator = initializer ? initializer() : {};

                                return func(collection, setter, getIteratee(iteratee, 2), accumulator);
                            };
                        }

                        /**
                         * Creates a function like `_.assign`.
                         *
                         * @private
                         * @param {Function} assigner The function to assign values.
                         * @returns {Function} Returns the new assigner function.
                         */
                        function createAssigner(assigner) {
                            return baseRest(function(object, sources) {
                                var index = -1,
                                    length = sources.length,
                                    customizer = length > 1 ? sources[length - 1] : undefined,
                                    guard = length > 2 ? sources[2] : undefined;

                                customizer = (assigner.length > 3 && typeof customizer == 'function')
                                    ? (length--, customizer)
                                    : undefined;

                                if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                                    customizer = length < 3 ? undefined : customizer;
                                    length = 1;
                                }
                                object = Object(object);
                                while (++index < length) {
                                    var source = sources[index];
                                    if (source) {
                                        assigner(object, source, index, customizer);
                                    }
                                }
                                return object;
                            });
                        }

                        /**
                         * Creates a `baseEach` or `baseEachRight` function.
                         *
                         * @private
                         * @param {Function} eachFunc The function to iterate over a collection.
                         * @param {boolean} [fromRight] Specify iterating from right to left.
                         * @returns {Function} Returns the new base function.
                         */
                        function createBaseEach(eachFunc, fromRight) {
                            return function(collection, iteratee) {
                                if (collection == null) {
                                    return collection;
                                }
                                if (!isArrayLike(collection)) {
                                    return eachFunc(collection, iteratee);
                                }
                                var length = collection.length,
                                    index = fromRight ? length : -1,
                                    iterable = Object(collection);

                                while ((fromRight ? index-- : ++index < length)) {
                                    if (iteratee(iterable[index], index, iterable) === false) {
                                        break;
                                    }
                                }
                                return collection;
                            };
                        }

                        /**
                         * Creates a base function for methods like `_.forIn` and `_.forOwn`.
                         *
                         * @private
                         * @param {boolean} [fromRight] Specify iterating from right to left.
                         * @returns {Function} Returns the new base function.
                         */
                        function createBaseFor(fromRight) {
                            return function(object, iteratee, keysFunc) {
                                var index = -1,
                                    iterable = Object(object),
                                    props = keysFunc(object),
                                    length = props.length;

                                while (length--) {
                                    var key = props[fromRight ? length : ++index];
                                    if (iteratee(iterable[key], key, iterable) === false) {
                                        break;
                                    }
                                }
                                return object;
                            };
                        }

                        /**
                         * Creates a function that wraps `func` to invoke it with the optional `this`
                         * binding of `thisArg`.
                         *
                         * @private
                         * @param {Function} func The function to wrap.
                         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                         * @param {*} [thisArg] The `this` binding of `func`.
                         * @returns {Function} Returns the new wrapped function.
                         */
                        function createBind(func, bitmask, thisArg) {
                            var isBind = bitmask & WRAP_BIND_FLAG,
                                Ctor = createCtor(func);

                            function wrapper() {
                                var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
                                return fn.apply(isBind ? thisArg : this, arguments);
                            }
                            return wrapper;
                        }

                        /**
                         * Creates a function like `_.lowerFirst`.
                         *
                         * @private
                         * @param {string} methodName The name of the `String` case method to use.
                         * @returns {Function} Returns the new case function.
                         */
                        function createCaseFirst(methodName) {
                            return function(string) {
                                string = toString(string);

                                var strSymbols = hasUnicode(string)
                                    ? stringToArray(string)
                                    : undefined;

                                var chr = strSymbols
                                    ? strSymbols[0]
                                    : string.charAt(0);

                                var trailing = strSymbols
                                    ? castSlice(strSymbols, 1).join('')
                                    : string.slice(1);

                                return chr[methodName]() + trailing;
                            };
                        }

                        /**
                         * Creates a function like `_.camelCase`.
                         *
                         * @private
                         * @param {Function} callback The function to combine each word.
                         * @returns {Function} Returns the new compounder function.
                         */
                        function createCompounder(callback) {
                            return function(string) {
                                return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
                            };
                        }

                        /**
                         * Creates a function that produces an instance of `Ctor` regardless of
                         * whether it was invoked as part of a `new` expression or by `call` or `apply`.
                         *
                         * @private
                         * @param {Function} Ctor The constructor to wrap.
                         * @returns {Function} Returns the new wrapped function.
                         */
                        function createCtor(Ctor) {
                            return function() {
                                // Use a `switch` statement to work with class constructors. See
                                // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
                                // for more details.
                                var args = arguments;
                                switch (args.length) {
                                    case 0: return new Ctor;
                                    case 1: return new Ctor(args[0]);
                                    case 2: return new Ctor(args[0], args[1]);
                                    case 3: return new Ctor(args[0], args[1], args[2]);
                                    case 4: return new Ctor(args[0], args[1], args[2], args[3]);
                                    case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
                                    case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
                                    case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
                                }
                                var thisBinding = baseCreate(Ctor.prototype),
                                    result = Ctor.apply(thisBinding, args);

                                // Mimic the constructor's `return` behavior.
                                // See https://es5.github.io/#x13.2.2 for more details.
                                return isObject(result) ? result : thisBinding;
                            };
                        }

                        /**
                         * Creates a function that wraps `func` to enable currying.
                         *
                         * @private
                         * @param {Function} func The function to wrap.
                         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                         * @param {number} arity The arity of `func`.
                         * @returns {Function} Returns the new wrapped function.
                         */
                        function createCurry(func, bitmask, arity) {
                            var Ctor = createCtor(func);

                            function wrapper() {
                                var length = arguments.length,
                                    args = Array(length),
                                    index = length,
                                    placeholder = getHolder(wrapper);

                                while (index--) {
                                    args[index] = arguments[index];
                                }
                                var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
                                    ? []
                                    : replaceHolders(args, placeholder);

                                length -= holders.length;
                                if (length < arity) {
                                    return createRecurry(
                                        func, bitmask, createHybrid, wrapper.placeholder, undefined,
                                        args, holders, undefined, undefined, arity - length);
                                }
                                var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
                                return apply(fn, this, args);
                            }
                            return wrapper;
                        }

                        /**
                         * Creates a `_.find` or `_.findLast` function.
                         *
                         * @private
                         * @param {Function} findIndexFunc The function to find the collection index.
                         * @returns {Function} Returns the new find function.
                         */
                        function createFind(findIndexFunc) {
                            return function(collection, predicate, fromIndex) {
                                var iterable = Object(collection);
                                if (!isArrayLike(collection)) {
                                    var iteratee = getIteratee(predicate, 3);
                                    collection = keys(collection);
                                    predicate = function(key) { return iteratee(iterable[key], key, iterable); };
                                }
                                var index = findIndexFunc(collection, predicate, fromIndex);
                                return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
                            };
                        }

                        /**
                         * Creates a `_.flow` or `_.flowRight` function.
                         *
                         * @private
                         * @param {boolean} [fromRight] Specify iterating from right to left.
                         * @returns {Function} Returns the new flow function.
                         */
                        function createFlow(fromRight) {
                            return flatRest(function(funcs) {
                                var length = funcs.length,
                                    index = length,
                                    prereq = LodashWrapper.prototype.thru;

                                if (fromRight) {
                                    funcs.reverse();
                                }
                                while (index--) {
                                    var func = funcs[index];
                                    if (typeof func != 'function') {
                                        throw new TypeError(FUNC_ERROR_TEXT);
                                    }
                                    if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
                                        var wrapper = new LodashWrapper([], true);
                                    }
                                }
                                index = wrapper ? index : length;
                                while (++index < length) {
                                    func = funcs[index];

                                    var funcName = getFuncName(func),
                                        data = funcName == 'wrapper' ? getData(func) : undefined;

                                    if (data && isLaziable(data[0]) &&
                                        data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                                        !data[4].length && data[9] == 1
                                    ) {
                                        wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
                                    } else {
                                        wrapper = (func.length == 1 && isLaziable(func))
                                            ? wrapper[funcName]()
                                            : wrapper.thru(func);
                                    }
                                }
                                return function() {
                                    var args = arguments,
                                        value = args[0];

                                    if (wrapper && args.length == 1 && isArray(value)) {
                                        return wrapper.plant(value).value();
                                    }
                                    var index = 0,
                                        result = length ? funcs[index].apply(this, args) : value;

                                    while (++index < length) {
                                        result = funcs[index].call(this, result);
                                    }
                                    return result;
                                };
                            });
                        }

                        /**
                         * Creates a function that wraps `func` to invoke it with optional `this`
                         * binding of `thisArg`, partial application, and currying.
                         *
                         * @private
                         * @param {Function|string} func The function or method name to wrap.
                         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                         * @param {*} [thisArg] The `this` binding of `func`.
                         * @param {Array} [partials] The arguments to prepend to those provided to
                         *  the new function.
                         * @param {Array} [holders] The `partials` placeholder indexes.
                         * @param {Array} [partialsRight] The arguments to append to those provided
                         *  to the new function.
                         * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
                         * @param {Array} [argPos] The argument positions of the new function.
                         * @param {number} [ary] The arity cap of `func`.
                         * @param {number} [arity] The arity of `func`.
                         * @returns {Function} Returns the new wrapped function.
                         */
                        function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
                            var isAry = bitmask & WRAP_ARY_FLAG,
                                isBind = bitmask & WRAP_BIND_FLAG,
                                isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
                                isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
                                isFlip = bitmask & WRAP_FLIP_FLAG,
                                Ctor = isBindKey ? undefined : createCtor(func);

                            function wrapper() {
                                var length = arguments.length,
                                    args = Array(length),
                                    index = length;

                                while (index--) {
                                    args[index] = arguments[index];
                                }
                                if (isCurried) {
                                    var placeholder = getHolder(wrapper),
                                        holdersCount = countHolders(args, placeholder);
                                }
                                if (partials) {
                                    args = composeArgs(args, partials, holders, isCurried);
                                }
                                if (partialsRight) {
                                    args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
                                }
                                length -= holdersCount;
                                if (isCurried && length < arity) {
                                    var newHolders = replaceHolders(args, placeholder);
                                    return createRecurry(
                                        func, bitmask, createHybrid, wrapper.placeholder, thisArg,
                                        args, newHolders, argPos, ary, arity - length
                                    );
                                }
                                var thisBinding = isBind ? thisArg : this,
                                    fn = isBindKey ? thisBinding[func] : func;

                                length = args.length;
                                if (argPos) {
                                    args = reorder(args, argPos);
                                } else if (isFlip && length > 1) {
                                    args.reverse();
                                }
                                if (isAry && ary < length) {
                                    args.length = ary;
                                }
                                if (this && this !== root && this instanceof wrapper) {
                                    fn = Ctor || createCtor(fn);
                                }
                                return fn.apply(thisBinding, args);
                            }
                            return wrapper;
                        }

                        /**
                         * Creates a function like `_.invertBy`.
                         *
                         * @private
                         * @param {Function} setter The function to set accumulator values.
                         * @param {Function} toIteratee The function to resolve iteratees.
                         * @returns {Function} Returns the new inverter function.
                         */
                        function createInverter(setter, toIteratee) {
                            return function(object, iteratee) {
                                return baseInverter(object, setter, toIteratee(iteratee), {});
                            };
                        }

                        /**
                         * Creates a function that performs a mathematical operation on two values.
                         *
                         * @private
                         * @param {Function} operator The function to perform the operation.
                         * @param {number} [defaultValue] The value used for `undefined` arguments.
                         * @returns {Function} Returns the new mathematical operation function.
                         */
                        function createMathOperation(operator, defaultValue) {
                            return function(value, other) {
                                var result;
                                if (value === undefined && other === undefined) {
                                    return defaultValue;
                                }
                                if (value !== undefined) {
                                    result = value;
                                }
                                if (other !== undefined) {
                                    if (result === undefined) {
                                        return other;
                                    }
                                    if (typeof value == 'string' || typeof other == 'string') {
                                        value = baseToString(value);
                                        other = baseToString(other);
                                    } else {
                                        value = baseToNumber(value);
                                        other = baseToNumber(other);
                                    }
                                    result = operator(value, other);
                                }
                                return result;
                            };
                        }

                        /**
                         * Creates a function like `_.over`.
                         *
                         * @private
                         * @param {Function} arrayFunc The function to iterate over iteratees.
                         * @returns {Function} Returns the new over function.
                         */
                        function createOver(arrayFunc) {
                            return flatRest(function(iteratees) {
                                iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
                                return baseRest(function(args) {
                                    var thisArg = this;
                                    return arrayFunc(iteratees, function(iteratee) {
                                        return apply(iteratee, thisArg, args);
                                    });
                                });
                            });
                        }

                        /**
                         * Creates the padding for `string` based on `length`. The `chars` string
                         * is truncated if the number of characters exceeds `length`.
                         *
                         * @private
                         * @param {number} length The padding length.
                         * @param {string} [chars=' '] The string used as padding.
                         * @returns {string} Returns the padding for `string`.
                         */
                        function createPadding(length, chars) {
                            chars = chars === undefined ? ' ' : baseToString(chars);

                            var charsLength = chars.length;
                            if (charsLength < 2) {
                                return charsLength ? baseRepeat(chars, length) : chars;
                            }
                            var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
                            return hasUnicode(chars)
                                ? castSlice(stringToArray(result), 0, length).join('')
                                : result.slice(0, length);
                        }

                        /**
                         * Creates a function that wraps `func` to invoke it with the `this` binding
                         * of `thisArg` and `partials` prepended to the arguments it receives.
                         *
                         * @private
                         * @param {Function} func The function to wrap.
                         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                         * @param {*} thisArg The `this` binding of `func`.
                         * @param {Array} partials The arguments to prepend to those provided to
                         *  the new function.
                         * @returns {Function} Returns the new wrapped function.
                         */
                        function createPartial(func, bitmask, thisArg, partials) {
                            var isBind = bitmask & WRAP_BIND_FLAG,
                                Ctor = createCtor(func);

                            function wrapper() {
                                var argsIndex = -1,
                                    argsLength = arguments.length,
                                    leftIndex = -1,
                                    leftLength = partials.length,
                                    args = Array(leftLength + argsLength),
                                    fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

                                while (++leftIndex < leftLength) {
                                    args[leftIndex] = partials[leftIndex];
                                }
                                while (argsLength--) {
                                    args[leftIndex++] = arguments[++argsIndex];
                                }
                                return apply(fn, isBind ? thisArg : this, args);
                            }
                            return wrapper;
                        }

                        /**
                         * Creates a `_.range` or `_.rangeRight` function.
                         *
                         * @private
                         * @param {boolean} [fromRight] Specify iterating from right to left.
                         * @returns {Function} Returns the new range function.
                         */
                        function createRange(fromRight) {
                            return function(start, end, step) {
                                if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
                                    end = step = undefined;
                                }
                                // Ensure the sign of `-0` is preserved.
                                start = toFinite(start);
                                if (end === undefined) {
                                    end = start;
                                    start = 0;
                                } else {
                                    end = toFinite(end);
                                }
                                step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
                                return baseRange(start, end, step, fromRight);
                            };
                        }

                        /**
                         * Creates a function that performs a relational operation on two values.
                         *
                         * @private
                         * @param {Function} operator The function to perform the operation.
                         * @returns {Function} Returns the new relational operation function.
                         */
                        function createRelationalOperation(operator) {
                            return function(value, other) {
                                if (!(typeof value == 'string' && typeof other == 'string')) {
                                    value = toNumber(value);
                                    other = toNumber(other);
                                }
                                return operator(value, other);
                            };
                        }

                        /**
                         * Creates a function that wraps `func` to continue currying.
                         *
                         * @private
                         * @param {Function} func The function to wrap.
                         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                         * @param {Function} wrapFunc The function to create the `func` wrapper.
                         * @param {*} placeholder The placeholder value.
                         * @param {*} [thisArg] The `this` binding of `func`.
                         * @param {Array} [partials] The arguments to prepend to those provided to
                         *  the new function.
                         * @param {Array} [holders] The `partials` placeholder indexes.
                         * @param {Array} [argPos] The argument positions of the new function.
                         * @param {number} [ary] The arity cap of `func`.
                         * @param {number} [arity] The arity of `func`.
                         * @returns {Function} Returns the new wrapped function.
                         */
                        function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
                            var isCurry = bitmask & WRAP_CURRY_FLAG,
                                newHolders = isCurry ? holders : undefined,
                                newHoldersRight = isCurry ? undefined : holders,
                                newPartials = isCurry ? partials : undefined,
                                newPartialsRight = isCurry ? undefined : partials;

                            bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
                            bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

                            if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
                                bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
                            }
                            var newData = [
                                func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
                                newHoldersRight, argPos, ary, arity
                            ];

                            var result = wrapFunc.apply(undefined, newData);
                            if (isLaziable(func)) {
                                setData(result, newData);
                            }
                            result.placeholder = placeholder;
                            return setWrapToString(result, func, bitmask);
                        }

                        /**
                         * Creates a function like `_.round`.
                         *
                         * @private
                         * @param {string} methodName The name of the `Math` method to use when rounding.
                         * @returns {Function} Returns the new round function.
                         */
                        function createRound(methodName) {
                            var func = Math[methodName];
                            return function(number, precision) {
                                number = toNumber(number);
                                precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
                                if (precision) {
                                    // Shift with exponential notation to avoid floating-point issues.
                                    // See [MDN](https://mdn.io/round#Examples) for more details.
                                    var pair = (toString(number) + 'e').split('e'),
                                        value = func(pair[0] + 'e' + (+pair[1] + precision));

                                    pair = (toString(value) + 'e').split('e');
                                    return +(pair[0] + 'e' + (+pair[1] - precision));
                                }
                                return func(number);
                            };
                        }

                        /**
                         * Creates a set object of `values`.
                         *
                         * @private
                         * @param {Array} values The values to add to the set.
                         * @returns {Object} Returns the new set.
                         */
                        var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
                            return new Set(values);
                        };

                        /**
                         * Creates a `_.toPairs` or `_.toPairsIn` function.
                         *
                         * @private
                         * @param {Function} keysFunc The function to get the keys of a given object.
                         * @returns {Function} Returns the new pairs function.
                         */
                        function createToPairs(keysFunc) {
                            return function(object) {
                                var tag = getTag(object);
                                if (tag == mapTag) {
                                    return mapToArray(object);
                                }
                                if (tag == setTag) {
                                    return setToPairs(object);
                                }
                                return baseToPairs(object, keysFunc(object));
                            };
                        }

                        /**
                         * Creates a function that either curries or invokes `func` with optional
                         * `this` binding and partially applied arguments.
                         *
                         * @private
                         * @param {Function|string} func The function or method name to wrap.
                         * @param {number} bitmask The bitmask flags.
                         *    1 - `_.bind`
                         *    2 - `_.bindKey`
                         *    4 - `_.curry` or `_.curryRight` of a bound function
                         *    8 - `_.curry`
                         *   16 - `_.curryRight`
                         *   32 - `_.partial`
                         *   64 - `_.partialRight`
                         *  128 - `_.rearg`
                         *  256 - `_.ary`
                         *  512 - `_.flip`
                         * @param {*} [thisArg] The `this` binding of `func`.
                         * @param {Array} [partials] The arguments to be partially applied.
                         * @param {Array} [holders] The `partials` placeholder indexes.
                         * @param {Array} [argPos] The argument positions of the new function.
                         * @param {number} [ary] The arity cap of `func`.
                         * @param {number} [arity] The arity of `func`.
                         * @returns {Function} Returns the new wrapped function.
                         */
                        function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
                            var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
                            if (!isBindKey && typeof func != 'function') {
                                throw new TypeError(FUNC_ERROR_TEXT);
                            }
                            var length = partials ? partials.length : 0;
                            if (!length) {
                                bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
                                partials = holders = undefined;
                            }
                            ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
                            arity = arity === undefined ? arity : toInteger(arity);
                            length -= holders ? holders.length : 0;

                            if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
                                var partialsRight = partials,
                                    holdersRight = holders;

                                partials = holders = undefined;
                            }
                            var data = isBindKey ? undefined : getData(func);

                            var newData = [
                                func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
                                argPos, ary, arity
                            ];

                            if (data) {
                                mergeData(newData, data);
                            }
                            func = newData[0];
                            bitmask = newData[1];
                            thisArg = newData[2];
                            partials = newData[3];
                            holders = newData[4];
                            arity = newData[9] = newData[9] === undefined
                                ? (isBindKey ? 0 : func.length)
                                : nativeMax(newData[9] - length, 0);

                            if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
                                bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
                            }
                            if (!bitmask || bitmask == WRAP_BIND_FLAG) {
                                var result = createBind(func, bitmask, thisArg);
                            } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
                                result = createCurry(func, bitmask, arity);
                            } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
                                result = createPartial(func, bitmask, thisArg, partials);
                            } else {
                                result = createHybrid.apply(undefined, newData);
                            }
                            var setter = data ? baseSetData : setData;
                            return setWrapToString(setter(result, newData), func, bitmask);
                        }

                        /**
                         * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
                         * of source objects to the destination object for all destination properties
                         * that resolve to `undefined`.
                         *
                         * @private
                         * @param {*} objValue The destination value.
                         * @param {*} srcValue The source value.
                         * @param {string} key The key of the property to assign.
                         * @param {Object} object The parent object of `objValue`.
                         * @returns {*} Returns the value to assign.
                         */
                        function customDefaultsAssignIn(objValue, srcValue, key, object) {
                            if (objValue === undefined ||
                                (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
                                return srcValue;
                            }
                            return objValue;
                        }

                        /**
                         * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
                         * objects into destination objects that are passed thru.
                         *
                         * @private
                         * @param {*} objValue The destination value.
                         * @param {*} srcValue The source value.
                         * @param {string} key The key of the property to merge.
                         * @param {Object} object The parent object of `objValue`.
                         * @param {Object} source The parent object of `srcValue`.
                         * @param {Object} [stack] Tracks traversed source values and their merged
                         *  counterparts.
                         * @returns {*} Returns the value to assign.
                         */
                        function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
                            if (isObject(objValue) && isObject(srcValue)) {
                                // Recursively merge objects and arrays (susceptible to call stack limits).
                                stack.set(srcValue, objValue);
                                baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
                                stack['delete'](srcValue);
                            }
                            return objValue;
                        }

                        /**
                         * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
                         * objects.
                         *
                         * @private
                         * @param {*} value The value to inspect.
                         * @param {string} key The key of the property to inspect.
                         * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
                         */
                        function customOmitClone(value) {
                            return isPlainObject(value) ? undefined : value;
                        }

                        /**
                         * A specialized version of `baseIsEqualDeep` for arrays with support for
                         * partial deep comparisons.
                         *
                         * @private
                         * @param {Array} array The array to compare.
                         * @param {Array} other The other array to compare.
                         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                         * @param {Function} customizer The function to customize comparisons.
                         * @param {Function} equalFunc The function to determine equivalents of values.
                         * @param {Object} stack Tracks traversed `array` and `other` objects.
                         * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
                         */
                        function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
                            var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                                arrLength = array.length,
                                othLength = other.length;

                            if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
                                return false;
                            }
                            // Assume cyclic values are equal.
                            var stacked = stack.get(array);
                            if (stacked && stack.get(other)) {
                                return stacked == other;
                            }
                            var index = -1,
                                result = true,
                                seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

                            stack.set(array, other);
                            stack.set(other, array);

                            // Ignore non-index properties.
                            while (++index < arrLength) {
                                var arrValue = array[index],
                                    othValue = other[index];

                                if (customizer) {
                                    var compared = isPartial
                                        ? customizer(othValue, arrValue, index, other, array, stack)
                                        : customizer(arrValue, othValue, index, array, other, stack);
                                }
                                if (compared !== undefined) {
                                    if (compared) {
                                        continue;
                                    }
                                    result = false;
                                    break;
                                }
                                // Recursively compare arrays (susceptible to call stack limits).
                                if (seen) {
                                    if (!arraySome(other, function(othValue, othIndex) {
                                            if (!cacheHas(seen, othIndex) &&
                                                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                                                return seen.push(othIndex);
                                            }
                                        })) {
                                        result = false;
                                        break;
                                    }
                                } else if (!(
                                        arrValue === othValue ||
                                        equalFunc(arrValue, othValue, bitmask, customizer, stack)
                                    )) {
                                    result = false;
                                    break;
                                }
                            }
                            stack['delete'](array);
                            stack['delete'](other);
                            return result;
                        }

                        /**
                         * A specialized version of `baseIsEqualDeep` for comparing objects of
                         * the same `toStringTag`.
                         *
                         * **Note:** This function only supports comparing values with tags of
                         * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
                         *
                         * @private
                         * @param {Object} object The object to compare.
                         * @param {Object} other The other object to compare.
                         * @param {string} tag The `toStringTag` of the objects to compare.
                         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                         * @param {Function} customizer The function to customize comparisons.
                         * @param {Function} equalFunc The function to determine equivalents of values.
                         * @param {Object} stack Tracks traversed `object` and `other` objects.
                         * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
                         */
                        function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
                            switch (tag) {
                                case dataViewTag:
                                    if ((object.byteLength != other.byteLength) ||
                                        (object.byteOffset != other.byteOffset)) {
                                        return false;
                                    }
                                    object = object.buffer;
                                    other = other.buffer;

                                case arrayBufferTag:
                                    if ((object.byteLength != other.byteLength) ||
                                        !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
                                        return false;
                                    }
                                    return true;

                                case boolTag:
                                case dateTag:
                                case numberTag:
                                    // Coerce booleans to `1` or `0` and dates to milliseconds.
                                    // Invalid dates are coerced to `NaN`.
                                    return eq(+object, +other);

                                case errorTag:
                                    return object.name == other.name && object.message == other.message;

                                case regexpTag:
                                case stringTag:
                                    // Coerce regexes to strings and treat strings, primitives and objects,
                                    // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
                                    // for more details.
                                    return object == (other + '');

                                case mapTag:
                                    var convert = mapToArray;

                                case setTag:
                                    var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                                    convert || (convert = setToArray);

                                    if (object.size != other.size && !isPartial) {
                                        return false;
                                    }
                                    // Assume cyclic values are equal.
                                    var stacked = stack.get(object);
                                    if (stacked) {
                                        return stacked == other;
                                    }
                                    bitmask |= COMPARE_UNORDERED_FLAG;

                                    // Recursively compare objects (susceptible to call stack limits).
                                    stack.set(object, other);
                                    var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
                                    stack['delete'](object);
                                    return result;

                                case symbolTag:
                                    if (symbolValueOf) {
                                        return symbolValueOf.call(object) == symbolValueOf.call(other);
                                    }
                            }
                            return false;
                        }

                        /**
                         * A specialized version of `baseIsEqualDeep` for objects with support for
                         * partial deep comparisons.
                         *
                         * @private
                         * @param {Object} object The object to compare.
                         * @param {Object} other The other object to compare.
                         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                         * @param {Function} customizer The function to customize comparisons.
                         * @param {Function} equalFunc The function to determine equivalents of values.
                         * @param {Object} stack Tracks traversed `object` and `other` objects.
                         * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
                         */
                        function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
                            var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                                objProps = getAllKeys(object),
                                objLength = objProps.length,
                                othProps = getAllKeys(other),
                                othLength = othProps.length;

                            if (objLength != othLength && !isPartial) {
                                return false;
                            }
                            var index = objLength;
                            while (index--) {
                                var key = objProps[index];
                                if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
                                    return false;
                                }
                            }
                            // Assume cyclic values are equal.
                            var stacked = stack.get(object);
                            if (stacked && stack.get(other)) {
                                return stacked == other;
                            }
                            var result = true;
                            stack.set(object, other);
                            stack.set(other, object);

                            var skipCtor = isPartial;
                            while (++index < objLength) {
                                key = objProps[index];
                                var objValue = object[key],
                                    othValue = other[key];

                                if (customizer) {
                                    var compared = isPartial
                                        ? customizer(othValue, objValue, key, other, object, stack)
                                        : customizer(objValue, othValue, key, object, other, stack);
                                }
                                // Recursively compare objects (susceptible to call stack limits).
                                if (!(compared === undefined
                                            ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
                                            : compared
                                    )) {
                                    result = false;
                                    break;
                                }
                                skipCtor || (skipCtor = key == 'constructor');
                            }
                            if (result && !skipCtor) {
                                var objCtor = object.constructor,
                                    othCtor = other.constructor;

                                // Non `Object` object instances with different constructors are not equal.
                                if (objCtor != othCtor &&
                                    ('constructor' in object && 'constructor' in other) &&
                                    !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
                                    typeof othCtor == 'function' && othCtor instanceof othCtor)) {
                                    result = false;
                                }
                            }
                            stack['delete'](object);
                            stack['delete'](other);
                            return result;
                        }

                        /**
                         * A specialized version of `baseRest` which flattens the rest array.
                         *
                         * @private
                         * @param {Function} func The function to apply a rest parameter to.
                         * @returns {Function} Returns the new function.
                         */
                        function flatRest(func) {
                            return setToString(overRest(func, undefined, flatten), func + '');
                        }

                        /**
                         * Creates an array of own enumerable property names and symbols of `object`.
                         *
                         * @private
                         * @param {Object} object The object to query.
                         * @returns {Array} Returns the array of property names and symbols.
                         */
                        function getAllKeys(object) {
                            return baseGetAllKeys(object, keys, getSymbols);
                        }

                        /**
                         * Creates an array of own and inherited enumerable property names and
                         * symbols of `object`.
                         *
                         * @private
                         * @param {Object} object The object to query.
                         * @returns {Array} Returns the array of property names and symbols.
                         */
                        function getAllKeysIn(object) {
                            return baseGetAllKeys(object, keysIn, getSymbolsIn);
                        }

                        /**
                         * Gets metadata for `func`.
                         *
                         * @private
                         * @param {Function} func The function to query.
                         * @returns {*} Returns the metadata for `func`.
                         */
                        var getData = !metaMap ? noop : function(func) {
                            return metaMap.get(func);
                        };

                        /**
                         * Gets the name of `func`.
                         *
                         * @private
                         * @param {Function} func The function to query.
                         * @returns {string} Returns the function name.
                         */
                        function getFuncName(func) {
                            var result = (func.name + ''),
                                array = realNames[result],
                                length = hasOwnProperty.call(realNames, result) ? array.length : 0;

                            while (length--) {
                                var data = array[length],
                                    otherFunc = data.func;
                                if (otherFunc == null || otherFunc == func) {
                                    return data.name;
                                }
                            }
                            return result;
                        }

                        /**
                         * Gets the argument placeholder value for `func`.
                         *
                         * @private
                         * @param {Function} func The function to inspect.
                         * @returns {*} Returns the placeholder value.
                         */
                        function getHolder(func) {
                            var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
                            return object.placeholder;
                        }

                        /**
                         * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
                         * this function returns the custom method, otherwise it returns `baseIteratee`.
                         * If arguments are provided, the chosen function is invoked with them and
                         * its result is returned.
                         *
                         * @private
                         * @param {*} [value] The value to convert to an iteratee.
                         * @param {number} [arity] The arity of the created iteratee.
                         * @returns {Function} Returns the chosen function or its result.
                         */
                        function getIteratee() {
                            var result = lodash.iteratee || iteratee;
                            result = result === iteratee ? baseIteratee : result;
                            return arguments.length ? result(arguments[0], arguments[1]) : result;
                        }

                        /**
                         * Gets the data for `map`.
                         *
                         * @private
                         * @param {Object} map The map to query.
                         * @param {string} key The reference key.
                         * @returns {*} Returns the map data.
                         */
                        function getMapData(map, key) {
                            var data = map.__data__;
                            return isKeyable(key)
                                ? data[typeof key == 'string' ? 'string' : 'hash']
                                : data.map;
                        }

                        /**
                         * Gets the property names, values, and compare flags of `object`.
                         *
                         * @private
                         * @param {Object} object The object to query.
                         * @returns {Array} Returns the match data of `object`.
                         */
                        function getMatchData(object) {
                            var result = keys(object),
                                length = result.length;

                            while (length--) {
                                var key = result[length],
                                    value = object[key];

                                result[length] = [key, value, isStrictComparable(value)];
                            }
                            return result;
                        }

                        /**
                         * Gets the native function at `key` of `object`.
                         *
                         * @private
                         * @param {Object} object The object to query.
                         * @param {string} key The key of the method to get.
                         * @returns {*} Returns the function if it's native, else `undefined`.
                         */
                        function getNative(object, key) {
                            var value = getValue(object, key);
                            return baseIsNative(value) ? value : undefined;
                        }

                        /**
                         * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
                         *
                         * @private
                         * @param {*} value The value to query.
                         * @returns {string} Returns the raw `toStringTag`.
                         */
                        function getRawTag(value) {
                            var isOwn = hasOwnProperty.call(value, symToStringTag),
                                tag = value[symToStringTag];

                            try {
                                value[symToStringTag] = undefined;
                                var unmasked = true;
                            } catch (e) {}

                            var result = nativeObjectToString.call(value);
                            if (unmasked) {
                                if (isOwn) {
                                    value[symToStringTag] = tag;
                                } else {
                                    delete value[symToStringTag];
                                }
                            }
                            return result;
                        }

                        /**
                         * Creates an array of the own enumerable symbols of `object`.
                         *
                         * @private
                         * @param {Object} object The object to query.
                         * @returns {Array} Returns the array of symbols.
                         */
                        var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
                            if (object == null) {
                                return [];
                            }
                            object = Object(object);
                            return arrayFilter(nativeGetSymbols(object), function(symbol) {
                                return propertyIsEnumerable.call(object, symbol);
                            });
                        };

                        /**
                         * Creates an array of the own and inherited enumerable symbols of `object`.
                         *
                         * @private
                         * @param {Object} object The object to query.
                         * @returns {Array} Returns the array of symbols.
                         */
                        var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
                            var result = [];
                            while (object) {
                                arrayPush(result, getSymbols(object));
                                object = getPrototype(object);
                            }
                            return result;
                        };

                        /**
                         * Gets the `toStringTag` of `value`.
                         *
                         * @private
                         * @param {*} value The value to query.
                         * @returns {string} Returns the `toStringTag`.
                         */
                        var getTag = baseGetTag;

                        // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
                        if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
                            (Map && getTag(new Map) != mapTag) ||
                            (Promise && getTag(Promise.resolve()) != promiseTag) ||
                            (Set && getTag(new Set) != setTag) ||
                            (WeakMap && getTag(new WeakMap) != weakMapTag)) {
                            getTag = function(value) {
                                var result = baseGetTag(value),
                                    Ctor = result == objectTag ? value.constructor : undefined,
                                    ctorString = Ctor ? toSource(Ctor) : '';

                                if (ctorString) {
                                    switch (ctorString) {
                                        case dataViewCtorString: return dataViewTag;
                                        case mapCtorString: return mapTag;
                                        case promiseCtorString: return promiseTag;
                                        case setCtorString: return setTag;
                                        case weakMapCtorString: return weakMapTag;
                                    }
                                }
                                return result;
                            };
                        }

                        /**
                         * Gets the view, applying any `transforms` to the `start` and `end` positions.
                         *
                         * @private
                         * @param {number} start The start of the view.
                         * @param {number} end The end of the view.
                         * @param {Array} transforms The transformations to apply to the view.
                         * @returns {Object} Returns an object containing the `start` and `end`
                         *  positions of the view.
                         */
                        function getView(start, end, transforms) {
                            var index = -1,
                                length = transforms.length;

                            while (++index < length) {
                                var data = transforms[index],
                                    size = data.size;

                                switch (data.type) {
                                    case 'drop':      start += size; break;
                                    case 'dropRight': end -= size; break;
                                    case 'take':      end = nativeMin(end, start + size); break;
                                    case 'takeRight': start = nativeMax(start, end - size); break;
                                }
                            }
                            return { 'start': start, 'end': end };
                        }

                        /**
                         * Extracts wrapper details from the `source` body comment.
                         *
                         * @private
                         * @param {string} source The source to inspect.
                         * @returns {Array} Returns the wrapper details.
                         */
                        function getWrapDetails(source) {
                            var match = source.match(reWrapDetails);
                            return match ? match[1].split(reSplitDetails) : [];
                        }

                        /**
                         * Checks if `path` exists on `object`.
                         *
                         * @private
                         * @param {Object} object The object to query.
                         * @param {Array|string} path The path to check.
                         * @param {Function} hasFunc The function to check properties.
                         * @returns {boolean} Returns `true` if `path` exists, else `false`.
                         */
                        function hasPath(object, path, hasFunc) {
                            path = castPath(path, object);

                            var index = -1,
                                length = path.length,
                                result = false;

                            while (++index < length) {
                                var key = toKey(path[index]);
                                if (!(result = object != null && hasFunc(object, key))) {
                                    break;
                                }
                                object = object[key];
                            }
                            if (result || ++index != length) {
                                return result;
                            }
                            length = object == null ? 0 : object.length;
                            return !!length && isLength(length) && isIndex(key, length) &&
                                (isArray(object) || isArguments(object));
                        }

                        /**
                         * Initializes an array clone.
                         *
                         * @private
                         * @param {Array} array The array to clone.
                         * @returns {Array} Returns the initialized clone.
                         */
                        function initCloneArray(array) {
                            var length = array.length,
                                result = array.constructor(length);

                            // Add properties assigned by `RegExp#exec`.
                            if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
                                result.index = array.index;
                                result.input = array.input;
                            }
                            return result;
                        }

                        /**
                         * Initializes an object clone.
                         *
                         * @private
                         * @param {Object} object The object to clone.
                         * @returns {Object} Returns the initialized clone.
                         */
                        function initCloneObject(object) {
                            return (typeof object.constructor == 'function' && !isPrototype(object))
                                ? baseCreate(getPrototype(object))
                                : {};
                        }

                        /**
                         * Initializes an object clone based on its `toStringTag`.
                         *
                         * **Note:** This function only supports cloning values with tags of
                         * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
                         *
                         * @private
                         * @param {Object} object The object to clone.
                         * @param {string} tag The `toStringTag` of the object to clone.
                         * @param {Function} cloneFunc The function to clone values.
                         * @param {boolean} [isDeep] Specify a deep clone.
                         * @returns {Object} Returns the initialized clone.
                         */
                        function initCloneByTag(object, tag, cloneFunc, isDeep) {
                            var Ctor = object.constructor;
                            switch (tag) {
                                case arrayBufferTag:
                                    return cloneArrayBuffer(object);

                                case boolTag:
                                case dateTag:
                                    return new Ctor(+object);

                                case dataViewTag:
                                    return cloneDataView(object, isDeep);

                                case float32Tag: case float64Tag:
                                case int8Tag: case int16Tag: case int32Tag:
                                case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
                                return cloneTypedArray(object, isDeep);

                                case mapTag:
                                    return cloneMap(object, isDeep, cloneFunc);

                                case numberTag:
                                case stringTag:
                                    return new Ctor(object);

                                case regexpTag:
                                    return cloneRegExp(object);

                                case setTag:
                                    return cloneSet(object, isDeep, cloneFunc);

                                case symbolTag:
                                    return cloneSymbol(object);
                            }
                        }

                        /**
                         * Inserts wrapper `details` in a comment at the top of the `source` body.
                         *
                         * @private
                         * @param {string} source The source to modify.
                         * @returns {Array} details The details to insert.
                         * @returns {string} Returns the modified source.
                         */
                        function insertWrapDetails(source, details) {
                            var length = details.length;
                            if (!length) {
                                return source;
                            }
                            var lastIndex = length - 1;
                            details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
                            details = details.join(length > 2 ? ', ' : ' ');
                            return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
                        }

                        /**
                         * Checks if `value` is a flattenable `arguments` object or array.
                         *
                         * @private
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
                         */
                        function isFlattenable(value) {
                            return isArray(value) || isArguments(value) ||
                                !!(spreadableSymbol && value && value[spreadableSymbol]);
                        }

                        /**
                         * Checks if `value` is a valid array-like index.
                         *
                         * @private
                         * @param {*} value The value to check.
                         * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
                         * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
                         */
                        function isIndex(value, length) {
                            length = length == null ? MAX_SAFE_INTEGER : length;
                            return !!length &&
                                (typeof value == 'number' || reIsUint.test(value)) &&
                                (value > -1 && value % 1 == 0 && value < length);
                        }

                        /**
                         * Checks if the given arguments are from an iteratee call.
                         *
                         * @private
                         * @param {*} value The potential iteratee value argument.
                         * @param {*} index The potential iteratee index or key argument.
                         * @param {*} object The potential iteratee object argument.
                         * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
                         *  else `false`.
                         */
                        function isIterateeCall(value, index, object) {
                            if (!isObject(object)) {
                                return false;
                            }
                            var type = typeof index;
                            if (type == 'number'
                                    ? (isArrayLike(object) && isIndex(index, object.length))
                                    : (type == 'string' && index in object)
                            ) {
                                return eq(object[index], value);
                            }
                            return false;
                        }

                        /**
                         * Checks if `value` is a property name and not a property path.
                         *
                         * @private
                         * @param {*} value The value to check.
                         * @param {Object} [object] The object to query keys on.
                         * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
                         */
                        function isKey(value, object) {
                            if (isArray(value)) {
                                return false;
                            }
                            var type = typeof value;
                            if (type == 'number' || type == 'symbol' || type == 'boolean' ||
                                value == null || isSymbol(value)) {
                                return true;
                            }
                            return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
                                (object != null && value in Object(object));
                        }

                        /**
                         * Checks if `value` is suitable for use as unique object key.
                         *
                         * @private
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
                         */
                        function isKeyable(value) {
                            var type = typeof value;
                            return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
                                ? (value !== '__proto__')
                                : (value === null);
                        }

                        /**
                         * Checks if `func` has a lazy counterpart.
                         *
                         * @private
                         * @param {Function} func The function to check.
                         * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
                         *  else `false`.
                         */
                        function isLaziable(func) {
                            var funcName = getFuncName(func),
                                other = lodash[funcName];

                            if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
                                return false;
                            }
                            if (func === other) {
                                return true;
                            }
                            var data = getData(other);
                            return !!data && func === data[0];
                        }

                        /**
                         * Checks if `func` has its source masked.
                         *
                         * @private
                         * @param {Function} func The function to check.
                         * @returns {boolean} Returns `true` if `func` is masked, else `false`.
                         */
                        function isMasked(func) {
                            return !!maskSrcKey && (maskSrcKey in func);
                        }

                        /**
                         * Checks if `func` is capable of being masked.
                         *
                         * @private
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
                         */
                        var isMaskable = coreJsData ? isFunction : stubFalse;

                        /**
                         * Checks if `value` is likely a prototype object.
                         *
                         * @private
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
                         */
                        function isPrototype(value) {
                            var Ctor = value && value.constructor,
                                proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

                            return value === proto;
                        }

                        /**
                         * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
                         *
                         * @private
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` if suitable for strict
                         *  equality comparisons, else `false`.
                         */
                        function isStrictComparable(value) {
                            return value === value && !isObject(value);
                        }

                        /**
                         * A specialized version of `matchesProperty` for source values suitable
                         * for strict equality comparisons, i.e. `===`.
                         *
                         * @private
                         * @param {string} key The key of the property to get.
                         * @param {*} srcValue The value to match.
                         * @returns {Function} Returns the new spec function.
                         */
                        function matchesStrictComparable(key, srcValue) {
                            return function(object) {
                                if (object == null) {
                                    return false;
                                }
                                return object[key] === srcValue &&
                                    (srcValue !== undefined || (key in Object(object)));
                            };
                        }

                        /**
                         * A specialized version of `_.memoize` which clears the memoized function's
                         * cache when it exceeds `MAX_MEMOIZE_SIZE`.
                         *
                         * @private
                         * @param {Function} func The function to have its output memoized.
                         * @returns {Function} Returns the new memoized function.
                         */
                        function memoizeCapped(func) {
                            var result = memoize(func, function(key) {
                                if (cache.size === MAX_MEMOIZE_SIZE) {
                                    cache.clear();
                                }
                                return key;
                            });

                            var cache = result.cache;
                            return result;
                        }

                        /**
                         * Merges the function metadata of `source` into `data`.
                         *
                         * Merging metadata reduces the number of wrappers used to invoke a function.
                         * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
                         * may be applied regardless of execution order. Methods like `_.ary` and
                         * `_.rearg` modify function arguments, making the order in which they are
                         * executed important, preventing the merging of metadata. However, we make
                         * an exception for a safe combined case where curried functions have `_.ary`
                         * and or `_.rearg` applied.
                         *
                         * @private
                         * @param {Array} data The destination metadata.
                         * @param {Array} source The source metadata.
                         * @returns {Array} Returns `data`.
                         */
                        function mergeData(data, source) {
                            var bitmask = data[1],
                                srcBitmask = source[1],
                                newBitmask = bitmask | srcBitmask,
                                isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

                            var isCombo =
                                ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
                                ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
                                ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

                            // Exit early if metadata can't be merged.
                            if (!(isCommon || isCombo)) {
                                return data;
                            }
                            // Use source `thisArg` if available.
                            if (srcBitmask & WRAP_BIND_FLAG) {
                                data[2] = source[2];
                                // Set when currying a bound function.
                                newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
                            }
                            // Compose partial arguments.
                            var value = source[3];
                            if (value) {
                                var partials = data[3];
                                data[3] = partials ? composeArgs(partials, value, source[4]) : value;
                                data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
                            }
                            // Compose partial right arguments.
                            value = source[5];
                            if (value) {
                                partials = data[5];
                                data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
                                data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
                            }
                            // Use source `argPos` if available.
                            value = source[7];
                            if (value) {
                                data[7] = value;
                            }
                            // Use source `ary` if it's smaller.
                            if (srcBitmask & WRAP_ARY_FLAG) {
                                data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
                            }
                            // Use source `arity` if one is not provided.
                            if (data[9] == null) {
                                data[9] = source[9];
                            }
                            // Use source `func` and merge bitmasks.
                            data[0] = source[0];
                            data[1] = newBitmask;

                            return data;
                        }

                        /**
                         * This function is like
                         * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
                         * except that it includes inherited enumerable properties.
                         *
                         * @private
                         * @param {Object} object The object to query.
                         * @returns {Array} Returns the array of property names.
                         */
                        function nativeKeysIn(object) {
                            var result = [];
                            if (object != null) {
                                for (var key in Object(object)) {
                                    result.push(key);
                                }
                            }
                            return result;
                        }

                        /**
                         * Converts `value` to a string using `Object.prototype.toString`.
                         *
                         * @private
                         * @param {*} value The value to convert.
                         * @returns {string} Returns the converted string.
                         */
                        function objectToString(value) {
                            return nativeObjectToString.call(value);
                        }

                        /**
                         * A specialized version of `baseRest` which transforms the rest array.
                         *
                         * @private
                         * @param {Function} func The function to apply a rest parameter to.
                         * @param {number} [start=func.length-1] The start position of the rest parameter.
                         * @param {Function} transform The rest array transform.
                         * @returns {Function} Returns the new function.
                         */
                        function overRest(func, start, transform) {
                            start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
                            return function() {
                                var args = arguments,
                                    index = -1,
                                    length = nativeMax(args.length - start, 0),
                                    array = Array(length);

                                while (++index < length) {
                                    array[index] = args[start + index];
                                }
                                index = -1;
                                var otherArgs = Array(start + 1);
                                while (++index < start) {
                                    otherArgs[index] = args[index];
                                }
                                otherArgs[start] = transform(array);
                                return apply(func, this, otherArgs);
                            };
                        }

                        /**
                         * Gets the parent value at `path` of `object`.
                         *
                         * @private
                         * @param {Object} object The object to query.
                         * @param {Array} path The path to get the parent value of.
                         * @returns {*} Returns the parent value.
                         */
                        function parent(object, path) {
                            return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
                        }

                        /**
                         * Reorder `array` according to the specified indexes where the element at
                         * the first index is assigned as the first element, the element at
                         * the second index is assigned as the second element, and so on.
                         *
                         * @private
                         * @param {Array} array The array to reorder.
                         * @param {Array} indexes The arranged array indexes.
                         * @returns {Array} Returns `array`.
                         */
                        function reorder(array, indexes) {
                            var arrLength = array.length,
                                length = nativeMin(indexes.length, arrLength),
                                oldArray = copyArray(array);

                            while (length--) {
                                var index = indexes[length];
                                array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
                            }
                            return array;
                        }

                        /**
                         * Sets metadata for `func`.
                         *
                         * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
                         * period of time, it will trip its breaker and transition to an identity
                         * function to avoid garbage collection pauses in V8. See
                         * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
                         * for more details.
                         *
                         * @private
                         * @param {Function} func The function to associate metadata with.
                         * @param {*} data The metadata.
                         * @returns {Function} Returns `func`.
                         */
                        var setData = shortOut(baseSetData);

                        /**
                         * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
                         *
                         * @private
                         * @param {Function} func The function to delay.
                         * @param {number} wait The number of milliseconds to delay invocation.
                         * @returns {number|Object} Returns the timer id or timeout object.
                         */
                        var setTimeout = ctxSetTimeout || function(func, wait) {
                                return root.setTimeout(func, wait);
                            };

                        /**
                         * Sets the `toString` method of `func` to return `string`.
                         *
                         * @private
                         * @param {Function} func The function to modify.
                         * @param {Function} string The `toString` result.
                         * @returns {Function} Returns `func`.
                         */
                        var setToString = shortOut(baseSetToString);

                        /**
                         * Sets the `toString` method of `wrapper` to mimic the source of `reference`
                         * with wrapper details in a comment at the top of the source body.
                         *
                         * @private
                         * @param {Function} wrapper The function to modify.
                         * @param {Function} reference The reference function.
                         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                         * @returns {Function} Returns `wrapper`.
                         */
                        function setWrapToString(wrapper, reference, bitmask) {
                            var source = (reference + '');
                            return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
                        }

                        /**
                         * Creates a function that'll short out and invoke `identity` instead
                         * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
                         * milliseconds.
                         *
                         * @private
                         * @param {Function} func The function to restrict.
                         * @returns {Function} Returns the new shortable function.
                         */
                        function shortOut(func) {
                            var count = 0,
                                lastCalled = 0;

                            return function() {
                                var stamp = nativeNow(),
                                    remaining = HOT_SPAN - (stamp - lastCalled);

                                lastCalled = stamp;
                                if (remaining > 0) {
                                    if (++count >= HOT_COUNT) {
                                        return arguments[0];
                                    }
                                } else {
                                    count = 0;
                                }
                                return func.apply(undefined, arguments);
                            };
                        }

                        /**
                         * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
                         *
                         * @private
                         * @param {Array} array The array to shuffle.
                         * @param {number} [size=array.length] The size of `array`.
                         * @returns {Array} Returns `array`.
                         */
                        function shuffleSelf(array, size) {
                            var index = -1,
                                length = array.length,
                                lastIndex = length - 1;

                            size = size === undefined ? length : size;
                            while (++index < size) {
                                var rand = baseRandom(index, lastIndex),
                                    value = array[rand];

                                array[rand] = array[index];
                                array[index] = value;
                            }
                            array.length = size;
                            return array;
                        }

                        /**
                         * Converts `string` to a property path array.
                         *
                         * @private
                         * @param {string} string The string to convert.
                         * @returns {Array} Returns the property path array.
                         */
                        var stringToPath = memoizeCapped(function(string) {
                            var result = [];
                            if (reLeadingDot.test(string)) {
                                result.push('');
                            }
                            string.replace(rePropName, function(match, number, quote, string) {
                                result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
                            });
                            return result;
                        });

                        /**
                         * Converts `value` to a string key if it's not a string or symbol.
                         *
                         * @private
                         * @param {*} value The value to inspect.
                         * @returns {string|symbol} Returns the key.
                         */
                        function toKey(value) {
                            if (typeof value == 'string' || isSymbol(value)) {
                                return value;
                            }
                            var result = (value + '');
                            return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
                        }

                        /**
                         * Converts `func` to its source code.
                         *
                         * @private
                         * @param {Function} func The function to convert.
                         * @returns {string} Returns the source code.
                         */
                        function toSource(func) {
                            if (func != null) {
                                try {
                                    return funcToString.call(func);
                                } catch (e) {}
                                try {
                                    return (func + '');
                                } catch (e) {}
                            }
                            return '';
                        }

                        /**
                         * Updates wrapper `details` based on `bitmask` flags.
                         *
                         * @private
                         * @returns {Array} details The details to modify.
                         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                         * @returns {Array} Returns `details`.
                         */
                        function updateWrapDetails(details, bitmask) {
                            arrayEach(wrapFlags, function(pair) {
                                var value = '_.' + pair[0];
                                if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
                                    details.push(value);
                                }
                            });
                            return details.sort();
                        }

                        /**
                         * Creates a clone of `wrapper`.
                         *
                         * @private
                         * @param {Object} wrapper The wrapper to clone.
                         * @returns {Object} Returns the cloned wrapper.
                         */
                        function wrapperClone(wrapper) {
                            if (wrapper instanceof LazyWrapper) {
                                return wrapper.clone();
                            }
                            var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
                            result.__actions__ = copyArray(wrapper.__actions__);
                            result.__index__  = wrapper.__index__;
                            result.__values__ = wrapper.__values__;
                            return result;
                        }

                        /*------------------------------------------------------------------------*/

                        /**
                         * Creates an array of elements split into groups the length of `size`.
                         * If `array` can't be split evenly, the final chunk will be the remaining
                         * elements.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Array
                         * @param {Array} array The array to process.
                         * @param {number} [size=1] The length of each chunk
                         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                         * @returns {Array} Returns the new array of chunks.
                         * @example
                         *
                         * _.chunk(['a', 'b', 'c', 'd'], 2);
                         * // => [['a', 'b'], ['c', 'd']]
                         *
                         * _.chunk(['a', 'b', 'c', 'd'], 3);
                         * // => [['a', 'b', 'c'], ['d']]
                         */
                        function chunk(array, size, guard) {
                            if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
                                size = 1;
                            } else {
                                size = nativeMax(toInteger(size), 0);
                            }
                            var length = array == null ? 0 : array.length;
                            if (!length || size < 1) {
                                return [];
                            }
                            var index = 0,
                                resIndex = 0,
                                result = Array(nativeCeil(length / size));

                            while (index < length) {
                                result[resIndex++] = baseSlice(array, index, (index += size));
                            }
                            return result;
                        }

                        /**
                         * Creates an array with all falsey values removed. The values `false`, `null`,
                         * `0`, `""`, `undefined`, and `NaN` are falsey.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Array
                         * @param {Array} array The array to compact.
                         * @returns {Array} Returns the new array of filtered values.
                         * @example
                         *
                         * _.compact([0, 1, false, 2, '', 3]);
                         * // => [1, 2, 3]
                         */
                        function compact(array) {
                            var index = -1,
                                length = array == null ? 0 : array.length,
                                resIndex = 0,
                                result = [];

                            while (++index < length) {
                                var value = array[index];
                                if (value) {
                                    result[resIndex++] = value;
                                }
                            }
                            return result;
                        }

                        /**
                         * Creates a new array concatenating `array` with any additional arrays
                         * and/or values.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {Array} array The array to concatenate.
                         * @param {...*} [values] The values to concatenate.
                         * @returns {Array} Returns the new concatenated array.
                         * @example
                         *
                         * var array = [1];
                         * var other = _.concat(array, 2, [3], [[4]]);
                         *
                         * console.log(other);
                         * // => [1, 2, 3, [4]]
                         *
                         * console.log(array);
                         * // => [1]
                         */
                        function concat() {
                            var length = arguments.length;
                            if (!length) {
                                return [];
                            }
                            var args = Array(length - 1),
                                array = arguments[0],
                                index = length;

                            while (index--) {
                                args[index - 1] = arguments[index];
                            }
                            return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
                        }

                        /**
                         * Creates an array of `array` values not included in the other given arrays
                         * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                         * for equality comparisons. The order and references of result values are
                         * determined by the first array.
                         *
                         * **Note:** Unlike `_.pullAll`, this method returns a new array.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Array
                         * @param {Array} array The array to inspect.
                         * @param {...Array} [values] The values to exclude.
                         * @returns {Array} Returns the new array of filtered values.
                         * @see _.without, _.xor
                         * @example
                         *
                         * _.difference([2, 1], [2, 3]);
                         * // => [1]
                         */
                        var difference = baseRest(function(array, values) {
                            return isArrayLikeObject(array)
                                ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
                                : [];
                        });

                        /**
                         * This method is like `_.difference` except that it accepts `iteratee` which
                         * is invoked for each element of `array` and `values` to generate the criterion
                         * by which they're compared. The order and references of result values are
                         * determined by the first array. The iteratee is invoked with one argument:
                         * (value).
                         *
                         * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {Array} array The array to inspect.
                         * @param {...Array} [values] The values to exclude.
                         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                         * @returns {Array} Returns the new array of filtered values.
                         * @example
                         *
                         * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
                         * // => [1.2]
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
                         * // => [{ 'x': 2 }]
                         */
                        var differenceBy = baseRest(function(array, values) {
                            var iteratee = last(values);
                            if (isArrayLikeObject(iteratee)) {
                                iteratee = undefined;
                            }
                            return isArrayLikeObject(array)
                                ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
                                : [];
                        });

                        /**
                         * This method is like `_.difference` except that it accepts `comparator`
                         * which is invoked to compare elements of `array` to `values`. The order and
                         * references of result values are determined by the first array. The comparator
                         * is invoked with two arguments: (arrVal, othVal).
                         *
                         * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {Array} array The array to inspect.
                         * @param {...Array} [values] The values to exclude.
                         * @param {Function} [comparator] The comparator invoked per element.
                         * @returns {Array} Returns the new array of filtered values.
                         * @example
                         *
                         * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                         *
                         * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
                         * // => [{ 'x': 2, 'y': 1 }]
                         */
                        var differenceWith = baseRest(function(array, values) {
                            var comparator = last(values);
                            if (isArrayLikeObject(comparator)) {
                                comparator = undefined;
                            }
                            return isArrayLikeObject(array)
                                ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
                                : [];
                        });

                        /**
                         * Creates a slice of `array` with `n` elements dropped from the beginning.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.5.0
                         * @category Array
                         * @param {Array} array The array to query.
                         * @param {number} [n=1] The number of elements to drop.
                         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                         * @returns {Array} Returns the slice of `array`.
                         * @example
                         *
                         * _.drop([1, 2, 3]);
                         * // => [2, 3]
                         *
                         * _.drop([1, 2, 3], 2);
                         * // => [3]
                         *
                         * _.drop([1, 2, 3], 5);
                         * // => []
                         *
                         * _.drop([1, 2, 3], 0);
                         * // => [1, 2, 3]
                         */
                        function drop(array, n, guard) {
                            var length = array == null ? 0 : array.length;
                            if (!length) {
                                return [];
                            }
                            n = (guard || n === undefined) ? 1 : toInteger(n);
                            return baseSlice(array, n < 0 ? 0 : n, length);
                        }

                        /**
                         * Creates a slice of `array` with `n` elements dropped from the end.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Array
                         * @param {Array} array The array to query.
                         * @param {number} [n=1] The number of elements to drop.
                         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                         * @returns {Array} Returns the slice of `array`.
                         * @example
                         *
                         * _.dropRight([1, 2, 3]);
                         * // => [1, 2]
                         *
                         * _.dropRight([1, 2, 3], 2);
                         * // => [1]
                         *
                         * _.dropRight([1, 2, 3], 5);
                         * // => []
                         *
                         * _.dropRight([1, 2, 3], 0);
                         * // => [1, 2, 3]
                         */
                        function dropRight(array, n, guard) {
                            var length = array == null ? 0 : array.length;
                            if (!length) {
                                return [];
                            }
                            n = (guard || n === undefined) ? 1 : toInteger(n);
                            n = length - n;
                            return baseSlice(array, 0, n < 0 ? 0 : n);
                        }

                        /**
                         * Creates a slice of `array` excluding elements dropped from the end.
                         * Elements are dropped until `predicate` returns falsey. The predicate is
                         * invoked with three arguments: (value, index, array).
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Array
                         * @param {Array} array The array to query.
                         * @param {Function} [predicate=_.identity] The function invoked per iteration.
                         * @returns {Array} Returns the slice of `array`.
                         * @example
                         *
                         * var users = [
                         *   { 'user': 'barney',  'active': true },
                         *   { 'user': 'fred',    'active': false },
                         *   { 'user': 'pebbles', 'active': false }
                         * ];
                         *
                         * _.dropRightWhile(users, function(o) { return !o.active; });
                         * // => objects for ['barney']
                         *
                         * // The `_.matches` iteratee shorthand.
                         * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
                         * // => objects for ['barney', 'fred']
                         *
                         * // The `_.matchesProperty` iteratee shorthand.
                         * _.dropRightWhile(users, ['active', false]);
                         * // => objects for ['barney']
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.dropRightWhile(users, 'active');
                         * // => objects for ['barney', 'fred', 'pebbles']
                         */
                        function dropRightWhile(array, predicate) {
                            return (array && array.length)
                                ? baseWhile(array, getIteratee(predicate, 3), true, true)
                                : [];
                        }

                        /**
                         * Creates a slice of `array` excluding elements dropped from the beginning.
                         * Elements are dropped until `predicate` returns falsey. The predicate is
                         * invoked with three arguments: (value, index, array).
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Array
                         * @param {Array} array The array to query.
                         * @param {Function} [predicate=_.identity] The function invoked per iteration.
                         * @returns {Array} Returns the slice of `array`.
                         * @example
                         *
                         * var users = [
                         *   { 'user': 'barney',  'active': false },
                         *   { 'user': 'fred',    'active': false },
                         *   { 'user': 'pebbles', 'active': true }
                         * ];
                         *
                         * _.dropWhile(users, function(o) { return !o.active; });
                         * // => objects for ['pebbles']
                         *
                         * // The `_.matches` iteratee shorthand.
                         * _.dropWhile(users, { 'user': 'barney', 'active': false });
                         * // => objects for ['fred', 'pebbles']
                         *
                         * // The `_.matchesProperty` iteratee shorthand.
                         * _.dropWhile(users, ['active', false]);
                         * // => objects for ['pebbles']
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.dropWhile(users, 'active');
                         * // => objects for ['barney', 'fred', 'pebbles']
                         */
                        function dropWhile(array, predicate) {
                            return (array && array.length)
                                ? baseWhile(array, getIteratee(predicate, 3), true)
                                : [];
                        }

                        /**
                         * Fills elements of `array` with `value` from `start` up to, but not
                         * including, `end`.
                         *
                         * **Note:** This method mutates `array`.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.2.0
                         * @category Array
                         * @param {Array} array The array to fill.
                         * @param {*} value The value to fill `array` with.
                         * @param {number} [start=0] The start position.
                         * @param {number} [end=array.length] The end position.
                         * @returns {Array} Returns `array`.
                         * @example
                         *
                         * var array = [1, 2, 3];
                         *
                         * _.fill(array, 'a');
                         * console.log(array);
                         * // => ['a', 'a', 'a']
                         *
                         * _.fill(Array(3), 2);
                         * // => [2, 2, 2]
                         *
                         * _.fill([4, 6, 8, 10], '*', 1, 3);
                         * // => [4, '*', '*', 10]
                         */
                        function fill(array, value, start, end) {
                            var length = array == null ? 0 : array.length;
                            if (!length) {
                                return [];
                            }
                            if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
                                start = 0;
                                end = length;
                            }
                            return baseFill(array, value, start, end);
                        }

                        /**
                         * This method is like `_.find` except that it returns the index of the first
                         * element `predicate` returns truthy for instead of the element itself.
                         *
                         * @static
                         * @memberOf _
                         * @since 1.1.0
                         * @category Array
                         * @param {Array} array The array to inspect.
                         * @param {Function} [predicate=_.identity] The function invoked per iteration.
                         * @param {number} [fromIndex=0] The index to search from.
                         * @returns {number} Returns the index of the found element, else `-1`.
                         * @example
                         *
                         * var users = [
                         *   { 'user': 'barney',  'active': false },
                         *   { 'user': 'fred',    'active': false },
                         *   { 'user': 'pebbles', 'active': true }
                         * ];
                         *
                         * _.findIndex(users, function(o) { return o.user == 'barney'; });
                         * // => 0
                         *
                         * // The `_.matches` iteratee shorthand.
                         * _.findIndex(users, { 'user': 'fred', 'active': false });
                         * // => 1
                         *
                         * // The `_.matchesProperty` iteratee shorthand.
                         * _.findIndex(users, ['active', false]);
                         * // => 0
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.findIndex(users, 'active');
                         * // => 2
                         */
                        function findIndex(array, predicate, fromIndex) {
                            var length = array == null ? 0 : array.length;
                            if (!length) {
                                return -1;
                            }
                            var index = fromIndex == null ? 0 : toInteger(fromIndex);
                            if (index < 0) {
                                index = nativeMax(length + index, 0);
                            }
                            return baseFindIndex(array, getIteratee(predicate, 3), index);
                        }

                        /**
                         * This method is like `_.findIndex` except that it iterates over elements
                         * of `collection` from right to left.
                         *
                         * @static
                         * @memberOf _
                         * @since 2.0.0
                         * @category Array
                         * @param {Array} array The array to inspect.
                         * @param {Function} [predicate=_.identity] The function invoked per iteration.
                         * @param {number} [fromIndex=array.length-1] The index to search from.
                         * @returns {number} Returns the index of the found element, else `-1`.
                         * @example
                         *
                         * var users = [
                         *   { 'user': 'barney',  'active': true },
                         *   { 'user': 'fred',    'active': false },
                         *   { 'user': 'pebbles', 'active': false }
                         * ];
                         *
                         * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
                         * // => 2
                         *
                         * // The `_.matches` iteratee shorthand.
                         * _.findLastIndex(users, { 'user': 'barney', 'active': true });
                         * // => 0
                         *
                         * // The `_.matchesProperty` iteratee shorthand.
                         * _.findLastIndex(users, ['active', false]);
                         * // => 2
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.findLastIndex(users, 'active');
                         * // => 0
                         */
                        function findLastIndex(array, predicate, fromIndex) {
                            var length = array == null ? 0 : array.length;
                            if (!length) {
                                return -1;
                            }
                            var index = length - 1;
                            if (fromIndex !== undefined) {
                                index = toInteger(fromIndex);
                                index = fromIndex < 0
                                    ? nativeMax(length + index, 0)
                                    : nativeMin(index, length - 1);
                            }
                            return baseFindIndex(array, getIteratee(predicate, 3), index, true);
                        }

                        /**
                         * Flattens `array` a single level deep.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Array
                         * @param {Array} array The array to flatten.
                         * @returns {Array} Returns the new flattened array.
                         * @example
                         *
                         * _.flatten([1, [2, [3, [4]], 5]]);
                         * // => [1, 2, [3, [4]], 5]
                         */
                        function flatten(array) {
                            var length = array == null ? 0 : array.length;
                            return length ? baseFlatten(array, 1) : [];
                        }

                        /**
                         * Recursively flattens `array`.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Array
                         * @param {Array} array The array to flatten.
                         * @returns {Array} Returns the new flattened array.
                         * @example
                         *
                         * _.flattenDeep([1, [2, [3, [4]], 5]]);
                         * // => [1, 2, 3, 4, 5]
                         */
                        function flattenDeep(array) {
                            var length = array == null ? 0 : array.length;
                            return length ? baseFlatten(array, INFINITY) : [];
                        }

                        /**
                         * Recursively flatten `array` up to `depth` times.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.4.0
                         * @category Array
                         * @param {Array} array The array to flatten.
                         * @param {number} [depth=1] The maximum recursion depth.
                         * @returns {Array} Returns the new flattened array.
                         * @example
                         *
                         * var array = [1, [2, [3, [4]], 5]];
                         *
                         * _.flattenDepth(array, 1);
                         * // => [1, 2, [3, [4]], 5]
                         *
                         * _.flattenDepth(array, 2);
                         * // => [1, 2, 3, [4], 5]
                         */
                        function flattenDepth(array, depth) {
                            var length = array == null ? 0 : array.length;
                            if (!length) {
                                return [];
                            }
                            depth = depth === undefined ? 1 : toInteger(depth);
                            return baseFlatten(array, depth);
                        }

                        /**
                         * The inverse of `_.toPairs`; this method returns an object composed
                         * from key-value `pairs`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {Array} pairs The key-value pairs.
                         * @returns {Object} Returns the new object.
                         * @example
                         *
                         * _.fromPairs([['a', 1], ['b', 2]]);
                         * // => { 'a': 1, 'b': 2 }
                         */
                        function fromPairs(pairs) {
                            var index = -1,
                                length = pairs == null ? 0 : pairs.length,
                                result = {};

                            while (++index < length) {
                                var pair = pairs[index];
                                result[pair[0]] = pair[1];
                            }
                            return result;
                        }

                        /**
                         * Gets the first element of `array`.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @alias first
                         * @category Array
                         * @param {Array} array The array to query.
                         * @returns {*} Returns the first element of `array`.
                         * @example
                         *
                         * _.head([1, 2, 3]);
                         * // => 1
                         *
                         * _.head([]);
                         * // => undefined
                         */
                        function head(array) {
                            return (array && array.length) ? array[0] : undefined;
                        }

                        /**
                         * Gets the index at which the first occurrence of `value` is found in `array`
                         * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                         * for equality comparisons. If `fromIndex` is negative, it's used as the
                         * offset from the end of `array`.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Array
                         * @param {Array} array The array to inspect.
                         * @param {*} value The value to search for.
                         * @param {number} [fromIndex=0] The index to search from.
                         * @returns {number} Returns the index of the matched value, else `-1`.
                         * @example
                         *
                         * _.indexOf([1, 2, 1, 2], 2);
                         * // => 1
                         *
                         * // Search from the `fromIndex`.
                         * _.indexOf([1, 2, 1, 2], 2, 2);
                         * // => 3
                         */
                        function indexOf(array, value, fromIndex) {
                            var length = array == null ? 0 : array.length;
                            if (!length) {
                                return -1;
                            }
                            var index = fromIndex == null ? 0 : toInteger(fromIndex);
                            if (index < 0) {
                                index = nativeMax(length + index, 0);
                            }
                            return baseIndexOf(array, value, index);
                        }

                        /**
                         * Gets all but the last element of `array`.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Array
                         * @param {Array} array The array to query.
                         * @returns {Array} Returns the slice of `array`.
                         * @example
                         *
                         * _.initial([1, 2, 3]);
                         * // => [1, 2]
                         */
                        function initial(array) {
                            var length = array == null ? 0 : array.length;
                            return length ? baseSlice(array, 0, -1) : [];
                        }

                        /**
                         * Creates an array of unique values that are included in all given arrays
                         * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                         * for equality comparisons. The order and references of result values are
                         * determined by the first array.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Array
                         * @param {...Array} [arrays] The arrays to inspect.
                         * @returns {Array} Returns the new array of intersecting values.
                         * @example
                         *
                         * _.intersection([2, 1], [2, 3]);
                         * // => [2]
                         */
                        var intersection = baseRest(function(arrays) {
                            var mapped = arrayMap(arrays, castArrayLikeObject);
                            return (mapped.length && mapped[0] === arrays[0])
                                ? baseIntersection(mapped)
                                : [];
                        });

                        /**
                         * This method is like `_.intersection` except that it accepts `iteratee`
                         * which is invoked for each element of each `arrays` to generate the criterion
                         * by which they're compared. The order and references of result values are
                         * determined by the first array. The iteratee is invoked with one argument:
                         * (value).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {...Array} [arrays] The arrays to inspect.
                         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                         * @returns {Array} Returns the new array of intersecting values.
                         * @example
                         *
                         * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
                         * // => [2.1]
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
                         * // => [{ 'x': 1 }]
                         */
                        var intersectionBy = baseRest(function(arrays) {
                            var iteratee = last(arrays),
                                mapped = arrayMap(arrays, castArrayLikeObject);

                            if (iteratee === last(mapped)) {
                                iteratee = undefined;
                            } else {
                                mapped.pop();
                            }
                            return (mapped.length && mapped[0] === arrays[0])
                                ? baseIntersection(mapped, getIteratee(iteratee, 2))
                                : [];
                        });

                        /**
                         * This method is like `_.intersection` except that it accepts `comparator`
                         * which is invoked to compare elements of `arrays`. The order and references
                         * of result values are determined by the first array. The comparator is
                         * invoked with two arguments: (arrVal, othVal).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {...Array} [arrays] The arrays to inspect.
                         * @param {Function} [comparator] The comparator invoked per element.
                         * @returns {Array} Returns the new array of intersecting values.
                         * @example
                         *
                         * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                         * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
                         *
                         * _.intersectionWith(objects, others, _.isEqual);
                         * // => [{ 'x': 1, 'y': 2 }]
                         */
                        var intersectionWith = baseRest(function(arrays) {
                            var comparator = last(arrays),
                                mapped = arrayMap(arrays, castArrayLikeObject);

                            comparator = typeof comparator == 'function' ? comparator : undefined;
                            if (comparator) {
                                mapped.pop();
                            }
                            return (mapped.length && mapped[0] === arrays[0])
                                ? baseIntersection(mapped, undefined, comparator)
                                : [];
                        });

                        /**
                         * Converts all elements in `array` into a string separated by `separator`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {Array} array The array to convert.
                         * @param {string} [separator=','] The element separator.
                         * @returns {string} Returns the joined string.
                         * @example
                         *
                         * _.join(['a', 'b', 'c'], '~');
                         * // => 'a~b~c'
                         */
                        function join(array, separator) {
                            return array == null ? '' : nativeJoin.call(array, separator);
                        }

                        /**
                         * Gets the last element of `array`.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Array
                         * @param {Array} array The array to query.
                         * @returns {*} Returns the last element of `array`.
                         * @example
                         *
                         * _.last([1, 2, 3]);
                         * // => 3
                         */
                        function last(array) {
                            var length = array == null ? 0 : array.length;
                            return length ? array[length - 1] : undefined;
                        }

                        /**
                         * This method is like `_.indexOf` except that it iterates over elements of
                         * `array` from right to left.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Array
                         * @param {Array} array The array to inspect.
                         * @param {*} value The value to search for.
                         * @param {number} [fromIndex=array.length-1] The index to search from.
                         * @returns {number} Returns the index of the matched value, else `-1`.
                         * @example
                         *
                         * _.lastIndexOf([1, 2, 1, 2], 2);
                         * // => 3
                         *
                         * // Search from the `fromIndex`.
                         * _.lastIndexOf([1, 2, 1, 2], 2, 2);
                         * // => 1
                         */
                        function lastIndexOf(array, value, fromIndex) {
                            var length = array == null ? 0 : array.length;
                            if (!length) {
                                return -1;
                            }
                            var index = length;
                            if (fromIndex !== undefined) {
                                index = toInteger(fromIndex);
                                index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
                            }
                            return value === value
                                ? strictLastIndexOf(array, value, index)
                                : baseFindIndex(array, baseIsNaN, index, true);
                        }

                        /**
                         * Gets the element at index `n` of `array`. If `n` is negative, the nth
                         * element from the end is returned.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.11.0
                         * @category Array
                         * @param {Array} array The array to query.
                         * @param {number} [n=0] The index of the element to return.
                         * @returns {*} Returns the nth element of `array`.
                         * @example
                         *
                         * var array = ['a', 'b', 'c', 'd'];
                         *
                         * _.nth(array, 1);
                         * // => 'b'
                         *
                         * _.nth(array, -2);
                         * // => 'c';
                         */
                        function nth(array, n) {
                            return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
                        }

                        /**
                         * Removes all given values from `array` using
                         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                         * for equality comparisons.
                         *
                         * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
                         * to remove elements from an array by predicate.
                         *
                         * @static
                         * @memberOf _
                         * @since 2.0.0
                         * @category Array
                         * @param {Array} array The array to modify.
                         * @param {...*} [values] The values to remove.
                         * @returns {Array} Returns `array`.
                         * @example
                         *
                         * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
                         *
                         * _.pull(array, 'a', 'c');
                         * console.log(array);
                         * // => ['b', 'b']
                         */
                        var pull = baseRest(pullAll);

                        /**
                         * This method is like `_.pull` except that it accepts an array of values to remove.
                         *
                         * **Note:** Unlike `_.difference`, this method mutates `array`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {Array} array The array to modify.
                         * @param {Array} values The values to remove.
                         * @returns {Array} Returns `array`.
                         * @example
                         *
                         * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
                         *
                         * _.pullAll(array, ['a', 'c']);
                         * console.log(array);
                         * // => ['b', 'b']
                         */
                        function pullAll(array, values) {
                            return (array && array.length && values && values.length)
                                ? basePullAll(array, values)
                                : array;
                        }

                        /**
                         * This method is like `_.pullAll` except that it accepts `iteratee` which is
                         * invoked for each element of `array` and `values` to generate the criterion
                         * by which they're compared. The iteratee is invoked with one argument: (value).
                         *
                         * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {Array} array The array to modify.
                         * @param {Array} values The values to remove.
                         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                         * @returns {Array} Returns `array`.
                         * @example
                         *
                         * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
                         *
                         * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
                         * console.log(array);
                         * // => [{ 'x': 2 }]
                         */
                        function pullAllBy(array, values, iteratee) {
                            return (array && array.length && values && values.length)
                                ? basePullAll(array, values, getIteratee(iteratee, 2))
                                : array;
                        }

                        /**
                         * This method is like `_.pullAll` except that it accepts `comparator` which
                         * is invoked to compare elements of `array` to `values`. The comparator is
                         * invoked with two arguments: (arrVal, othVal).
                         *
                         * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.6.0
                         * @category Array
                         * @param {Array} array The array to modify.
                         * @param {Array} values The values to remove.
                         * @param {Function} [comparator] The comparator invoked per element.
                         * @returns {Array} Returns `array`.
                         * @example
                         *
                         * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
                         *
                         * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
                         * console.log(array);
                         * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
                         */
                        function pullAllWith(array, values, comparator) {
                            return (array && array.length && values && values.length)
                                ? basePullAll(array, values, undefined, comparator)
                                : array;
                        }

                        /**
                         * Removes elements from `array` corresponding to `indexes` and returns an
                         * array of removed elements.
                         *
                         * **Note:** Unlike `_.at`, this method mutates `array`.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Array
                         * @param {Array} array The array to modify.
                         * @param {...(number|number[])} [indexes] The indexes of elements to remove.
                         * @returns {Array} Returns the new array of removed elements.
                         * @example
                         *
                         * var array = ['a', 'b', 'c', 'd'];
                         * var pulled = _.pullAt(array, [1, 3]);
                         *
                         * console.log(array);
                         * // => ['a', 'c']
                         *
                         * console.log(pulled);
                         * // => ['b', 'd']
                         */
                        var pullAt = flatRest(function(array, indexes) {
                            var length = array == null ? 0 : array.length,
                                result = baseAt(array, indexes);

                            basePullAt(array, arrayMap(indexes, function(index) {
                                return isIndex(index, length) ? +index : index;
                            }).sort(compareAscending));

                            return result;
                        });

                        /**
                         * Removes all elements from `array` that `predicate` returns truthy for
                         * and returns an array of the removed elements. The predicate is invoked
                         * with three arguments: (value, index, array).
                         *
                         * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
                         * to pull elements from an array by value.
                         *
                         * @static
                         * @memberOf _
                         * @since 2.0.0
                         * @category Array
                         * @param {Array} array The array to modify.
                         * @param {Function} [predicate=_.identity] The function invoked per iteration.
                         * @returns {Array} Returns the new array of removed elements.
                         * @example
                         *
                         * var array = [1, 2, 3, 4];
                         * var evens = _.remove(array, function(n) {
	     *   return n % 2 == 0;
	     * });
                         *
                         * console.log(array);
                         * // => [1, 3]
                         *
                         * console.log(evens);
                         * // => [2, 4]
                         */
                        function remove(array, predicate) {
                            var result = [];
                            if (!(array && array.length)) {
                                return result;
                            }
                            var index = -1,
                                indexes = [],
                                length = array.length;

                            predicate = getIteratee(predicate, 3);
                            while (++index < length) {
                                var value = array[index];
                                if (predicate(value, index, array)) {
                                    result.push(value);
                                    indexes.push(index);
                                }
                            }
                            basePullAt(array, indexes);
                            return result;
                        }

                        /**
                         * Reverses `array` so that the first element becomes the last, the second
                         * element becomes the second to last, and so on.
                         *
                         * **Note:** This method mutates `array` and is based on
                         * [`Array#reverse`](https://mdn.io/Array/reverse).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {Array} array The array to modify.
                         * @returns {Array} Returns `array`.
                         * @example
                         *
                         * var array = [1, 2, 3];
                         *
                         * _.reverse(array);
                         * // => [3, 2, 1]
                         *
                         * console.log(array);
                         * // => [3, 2, 1]
                         */
                        function reverse(array) {
                            return array == null ? array : nativeReverse.call(array);
                        }

                        /**
                         * Creates a slice of `array` from `start` up to, but not including, `end`.
                         *
                         * **Note:** This method is used instead of
                         * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
                         * returned.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Array
                         * @param {Array} array The array to slice.
                         * @param {number} [start=0] The start position.
                         * @param {number} [end=array.length] The end position.
                         * @returns {Array} Returns the slice of `array`.
                         */
                        function slice(array, start, end) {
                            var length = array == null ? 0 : array.length;
                            if (!length) {
                                return [];
                            }
                            if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
                                start = 0;
                                end = length;
                            }
                            else {
                                start = start == null ? 0 : toInteger(start);
                                end = end === undefined ? length : toInteger(end);
                            }
                            return baseSlice(array, start, end);
                        }

                        /**
                         * Uses a binary search to determine the lowest index at which `value`
                         * should be inserted into `array` in order to maintain its sort order.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Array
                         * @param {Array} array The sorted array to inspect.
                         * @param {*} value The value to evaluate.
                         * @returns {number} Returns the index at which `value` should be inserted
                         *  into `array`.
                         * @example
                         *
                         * _.sortedIndex([30, 50], 40);
                         * // => 1
                         */
                        function sortedIndex(array, value) {
                            return baseSortedIndex(array, value);
                        }

                        /**
                         * This method is like `_.sortedIndex` except that it accepts `iteratee`
                         * which is invoked for `value` and each element of `array` to compute their
                         * sort ranking. The iteratee is invoked with one argument: (value).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {Array} array The sorted array to inspect.
                         * @param {*} value The value to evaluate.
                         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                         * @returns {number} Returns the index at which `value` should be inserted
                         *  into `array`.
                         * @example
                         *
                         * var objects = [{ 'x': 4 }, { 'x': 5 }];
                         *
                         * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
                         * // => 0
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
                         * // => 0
                         */
                        function sortedIndexBy(array, value, iteratee) {
                            return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
                        }

                        /**
                         * This method is like `_.indexOf` except that it performs a binary
                         * search on a sorted `array`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {Array} array The array to inspect.
                         * @param {*} value The value to search for.
                         * @returns {number} Returns the index of the matched value, else `-1`.
                         * @example
                         *
                         * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
                         * // => 1
                         */
                        function sortedIndexOf(array, value) {
                            var length = array == null ? 0 : array.length;
                            if (length) {
                                var index = baseSortedIndex(array, value);
                                if (index < length && eq(array[index], value)) {
                                    return index;
                                }
                            }
                            return -1;
                        }

                        /**
                         * This method is like `_.sortedIndex` except that it returns the highest
                         * index at which `value` should be inserted into `array` in order to
                         * maintain its sort order.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Array
                         * @param {Array} array The sorted array to inspect.
                         * @param {*} value The value to evaluate.
                         * @returns {number} Returns the index at which `value` should be inserted
                         *  into `array`.
                         * @example
                         *
                         * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
                         * // => 4
                         */
                        function sortedLastIndex(array, value) {
                            return baseSortedIndex(array, value, true);
                        }

                        /**
                         * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
                         * which is invoked for `value` and each element of `array` to compute their
                         * sort ranking. The iteratee is invoked with one argument: (value).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {Array} array The sorted array to inspect.
                         * @param {*} value The value to evaluate.
                         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                         * @returns {number} Returns the index at which `value` should be inserted
                         *  into `array`.
                         * @example
                         *
                         * var objects = [{ 'x': 4 }, { 'x': 5 }];
                         *
                         * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
                         * // => 1
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
                         * // => 1
                         */
                        function sortedLastIndexBy(array, value, iteratee) {
                            return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
                        }

                        /**
                         * This method is like `_.lastIndexOf` except that it performs a binary
                         * search on a sorted `array`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {Array} array The array to inspect.
                         * @param {*} value The value to search for.
                         * @returns {number} Returns the index of the matched value, else `-1`.
                         * @example
                         *
                         * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
                         * // => 3
                         */
                        function sortedLastIndexOf(array, value) {
                            var length = array == null ? 0 : array.length;
                            if (length) {
                                var index = baseSortedIndex(array, value, true) - 1;
                                if (eq(array[index], value)) {
                                    return index;
                                }
                            }
                            return -1;
                        }

                        /**
                         * This method is like `_.uniq` except that it's designed and optimized
                         * for sorted arrays.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {Array} array The array to inspect.
                         * @returns {Array} Returns the new duplicate free array.
                         * @example
                         *
                         * _.sortedUniq([1, 1, 2]);
                         * // => [1, 2]
                         */
                        function sortedUniq(array) {
                            return (array && array.length)
                                ? baseSortedUniq(array)
                                : [];
                        }

                        /**
                         * This method is like `_.uniqBy` except that it's designed and optimized
                         * for sorted arrays.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {Array} array The array to inspect.
                         * @param {Function} [iteratee] The iteratee invoked per element.
                         * @returns {Array} Returns the new duplicate free array.
                         * @example
                         *
                         * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
                         * // => [1.1, 2.3]
                         */
                        function sortedUniqBy(array, iteratee) {
                            return (array && array.length)
                                ? baseSortedUniq(array, getIteratee(iteratee, 2))
                                : [];
                        }

                        /**
                         * Gets all but the first element of `array`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {Array} array The array to query.
                         * @returns {Array} Returns the slice of `array`.
                         * @example
                         *
                         * _.tail([1, 2, 3]);
                         * // => [2, 3]
                         */
                        function tail(array) {
                            var length = array == null ? 0 : array.length;
                            return length ? baseSlice(array, 1, length) : [];
                        }

                        /**
                         * Creates a slice of `array` with `n` elements taken from the beginning.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Array
                         * @param {Array} array The array to query.
                         * @param {number} [n=1] The number of elements to take.
                         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                         * @returns {Array} Returns the slice of `array`.
                         * @example
                         *
                         * _.take([1, 2, 3]);
                         * // => [1]
                         *
                         * _.take([1, 2, 3], 2);
                         * // => [1, 2]
                         *
                         * _.take([1, 2, 3], 5);
                         * // => [1, 2, 3]
                         *
                         * _.take([1, 2, 3], 0);
                         * // => []
                         */
                        function take(array, n, guard) {
                            if (!(array && array.length)) {
                                return [];
                            }
                            n = (guard || n === undefined) ? 1 : toInteger(n);
                            return baseSlice(array, 0, n < 0 ? 0 : n);
                        }

                        /**
                         * Creates a slice of `array` with `n` elements taken from the end.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Array
                         * @param {Array} array The array to query.
                         * @param {number} [n=1] The number of elements to take.
                         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                         * @returns {Array} Returns the slice of `array`.
                         * @example
                         *
                         * _.takeRight([1, 2, 3]);
                         * // => [3]
                         *
                         * _.takeRight([1, 2, 3], 2);
                         * // => [2, 3]
                         *
                         * _.takeRight([1, 2, 3], 5);
                         * // => [1, 2, 3]
                         *
                         * _.takeRight([1, 2, 3], 0);
                         * // => []
                         */
                        function takeRight(array, n, guard) {
                            var length = array == null ? 0 : array.length;
                            if (!length) {
                                return [];
                            }
                            n = (guard || n === undefined) ? 1 : toInteger(n);
                            n = length - n;
                            return baseSlice(array, n < 0 ? 0 : n, length);
                        }

                        /**
                         * Creates a slice of `array` with elements taken from the end. Elements are
                         * taken until `predicate` returns falsey. The predicate is invoked with
                         * three arguments: (value, index, array).
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Array
                         * @param {Array} array The array to query.
                         * @param {Function} [predicate=_.identity] The function invoked per iteration.
                         * @returns {Array} Returns the slice of `array`.
                         * @example
                         *
                         * var users = [
                         *   { 'user': 'barney',  'active': true },
                         *   { 'user': 'fred',    'active': false },
                         *   { 'user': 'pebbles', 'active': false }
                         * ];
                         *
                         * _.takeRightWhile(users, function(o) { return !o.active; });
                         * // => objects for ['fred', 'pebbles']
                         *
                         * // The `_.matches` iteratee shorthand.
                         * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
                         * // => objects for ['pebbles']
                         *
                         * // The `_.matchesProperty` iteratee shorthand.
                         * _.takeRightWhile(users, ['active', false]);
                         * // => objects for ['fred', 'pebbles']
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.takeRightWhile(users, 'active');
                         * // => []
                         */
                        function takeRightWhile(array, predicate) {
                            return (array && array.length)
                                ? baseWhile(array, getIteratee(predicate, 3), false, true)
                                : [];
                        }

                        /**
                         * Creates a slice of `array` with elements taken from the beginning. Elements
                         * are taken until `predicate` returns falsey. The predicate is invoked with
                         * three arguments: (value, index, array).
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Array
                         * @param {Array} array The array to query.
                         * @param {Function} [predicate=_.identity] The function invoked per iteration.
                         * @returns {Array} Returns the slice of `array`.
                         * @example
                         *
                         * var users = [
                         *   { 'user': 'barney',  'active': false },
                         *   { 'user': 'fred',    'active': false },
                         *   { 'user': 'pebbles', 'active': true }
                         * ];
                         *
                         * _.takeWhile(users, function(o) { return !o.active; });
                         * // => objects for ['barney', 'fred']
                         *
                         * // The `_.matches` iteratee shorthand.
                         * _.takeWhile(users, { 'user': 'barney', 'active': false });
                         * // => objects for ['barney']
                         *
                         * // The `_.matchesProperty` iteratee shorthand.
                         * _.takeWhile(users, ['active', false]);
                         * // => objects for ['barney', 'fred']
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.takeWhile(users, 'active');
                         * // => []
                         */
                        function takeWhile(array, predicate) {
                            return (array && array.length)
                                ? baseWhile(array, getIteratee(predicate, 3))
                                : [];
                        }

                        /**
                         * Creates an array of unique values, in order, from all given arrays using
                         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                         * for equality comparisons.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Array
                         * @param {...Array} [arrays] The arrays to inspect.
                         * @returns {Array} Returns the new array of combined values.
                         * @example
                         *
                         * _.union([2], [1, 2]);
                         * // => [2, 1]
                         */
                        var union = baseRest(function(arrays) {
                            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
                        });

                        /**
                         * This method is like `_.union` except that it accepts `iteratee` which is
                         * invoked for each element of each `arrays` to generate the criterion by
                         * which uniqueness is computed. Result values are chosen from the first
                         * array in which the value occurs. The iteratee is invoked with one argument:
                         * (value).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {...Array} [arrays] The arrays to inspect.
                         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                         * @returns {Array} Returns the new array of combined values.
                         * @example
                         *
                         * _.unionBy([2.1], [1.2, 2.3], Math.floor);
                         * // => [2.1, 1.2]
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
                         * // => [{ 'x': 1 }, { 'x': 2 }]
                         */
                        var unionBy = baseRest(function(arrays) {
                            var iteratee = last(arrays);
                            if (isArrayLikeObject(iteratee)) {
                                iteratee = undefined;
                            }
                            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
                        });

                        /**
                         * This method is like `_.union` except that it accepts `comparator` which
                         * is invoked to compare elements of `arrays`. Result values are chosen from
                         * the first array in which the value occurs. The comparator is invoked
                         * with two arguments: (arrVal, othVal).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {...Array} [arrays] The arrays to inspect.
                         * @param {Function} [comparator] The comparator invoked per element.
                         * @returns {Array} Returns the new array of combined values.
                         * @example
                         *
                         * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                         * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
                         *
                         * _.unionWith(objects, others, _.isEqual);
                         * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
                         */
                        var unionWith = baseRest(function(arrays) {
                            var comparator = last(arrays);
                            comparator = typeof comparator == 'function' ? comparator : undefined;
                            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
                        });

                        /**
                         * Creates a duplicate-free version of an array, using
                         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                         * for equality comparisons, in which only the first occurrence of each element
                         * is kept. The order of result values is determined by the order they occur
                         * in the array.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Array
                         * @param {Array} array The array to inspect.
                         * @returns {Array} Returns the new duplicate free array.
                         * @example
                         *
                         * _.uniq([2, 1, 2]);
                         * // => [2, 1]
                         */
                        function uniq(array) {
                            return (array && array.length) ? baseUniq(array) : [];
                        }

                        /**
                         * This method is like `_.uniq` except that it accepts `iteratee` which is
                         * invoked for each element in `array` to generate the criterion by which
                         * uniqueness is computed. The order of result values is determined by the
                         * order they occur in the array. The iteratee is invoked with one argument:
                         * (value).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {Array} array The array to inspect.
                         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                         * @returns {Array} Returns the new duplicate free array.
                         * @example
                         *
                         * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
                         * // => [2.1, 1.2]
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
                         * // => [{ 'x': 1 }, { 'x': 2 }]
                         */
                        function uniqBy(array, iteratee) {
                            return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
                        }

                        /**
                         * This method is like `_.uniq` except that it accepts `comparator` which
                         * is invoked to compare elements of `array`. The order of result values is
                         * determined by the order they occur in the array.The comparator is invoked
                         * with two arguments: (arrVal, othVal).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {Array} array The array to inspect.
                         * @param {Function} [comparator] The comparator invoked per element.
                         * @returns {Array} Returns the new duplicate free array.
                         * @example
                         *
                         * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
                         *
                         * _.uniqWith(objects, _.isEqual);
                         * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
                         */
                        function uniqWith(array, comparator) {
                            comparator = typeof comparator == 'function' ? comparator : undefined;
                            return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
                        }

                        /**
                         * This method is like `_.zip` except that it accepts an array of grouped
                         * elements and creates an array regrouping the elements to their pre-zip
                         * configuration.
                         *
                         * @static
                         * @memberOf _
                         * @since 1.2.0
                         * @category Array
                         * @param {Array} array The array of grouped elements to process.
                         * @returns {Array} Returns the new array of regrouped elements.
                         * @example
                         *
                         * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
                         * // => [['a', 1, true], ['b', 2, false]]
                         *
                         * _.unzip(zipped);
                         * // => [['a', 'b'], [1, 2], [true, false]]
                         */
                        function unzip(array) {
                            if (!(array && array.length)) {
                                return [];
                            }
                            var length = 0;
                            array = arrayFilter(array, function(group) {
                                if (isArrayLikeObject(group)) {
                                    length = nativeMax(group.length, length);
                                    return true;
                                }
                            });
                            return baseTimes(length, function(index) {
                                return arrayMap(array, baseProperty(index));
                            });
                        }

                        /**
                         * This method is like `_.unzip` except that it accepts `iteratee` to specify
                         * how regrouped values should be combined. The iteratee is invoked with the
                         * elements of each group: (...group).
                         *
                         * @static
                         * @memberOf _
                         * @since 3.8.0
                         * @category Array
                         * @param {Array} array The array of grouped elements to process.
                         * @param {Function} [iteratee=_.identity] The function to combine
                         *  regrouped values.
                         * @returns {Array} Returns the new array of regrouped elements.
                         * @example
                         *
                         * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
                         * // => [[1, 10, 100], [2, 20, 200]]
                         *
                         * _.unzipWith(zipped, _.add);
                         * // => [3, 30, 300]
                         */
                        function unzipWith(array, iteratee) {
                            if (!(array && array.length)) {
                                return [];
                            }
                            var result = unzip(array);
                            if (iteratee == null) {
                                return result;
                            }
                            return arrayMap(result, function(group) {
                                return apply(iteratee, undefined, group);
                            });
                        }

                        /**
                         * Creates an array excluding all given values using
                         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                         * for equality comparisons.
                         *
                         * **Note:** Unlike `_.pull`, this method returns a new array.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Array
                         * @param {Array} array The array to inspect.
                         * @param {...*} [values] The values to exclude.
                         * @returns {Array} Returns the new array of filtered values.
                         * @see _.difference, _.xor
                         * @example
                         *
                         * _.without([2, 1, 2, 3], 1, 2);
                         * // => [3]
                         */
                        var without = baseRest(function(array, values) {
                            return isArrayLikeObject(array)
                                ? baseDifference(array, values)
                                : [];
                        });

                        /**
                         * Creates an array of unique values that is the
                         * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
                         * of the given arrays. The order of result values is determined by the order
                         * they occur in the arrays.
                         *
                         * @static
                         * @memberOf _
                         * @since 2.4.0
                         * @category Array
                         * @param {...Array} [arrays] The arrays to inspect.
                         * @returns {Array} Returns the new array of filtered values.
                         * @see _.difference, _.without
                         * @example
                         *
                         * _.xor([2, 1], [2, 3]);
                         * // => [1, 3]
                         */
                        var xor = baseRest(function(arrays) {
                            return baseXor(arrayFilter(arrays, isArrayLikeObject));
                        });

                        /**
                         * This method is like `_.xor` except that it accepts `iteratee` which is
                         * invoked for each element of each `arrays` to generate the criterion by
                         * which by which they're compared. The order of result values is determined
                         * by the order they occur in the arrays. The iteratee is invoked with one
                         * argument: (value).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {...Array} [arrays] The arrays to inspect.
                         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                         * @returns {Array} Returns the new array of filtered values.
                         * @example
                         *
                         * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
                         * // => [1.2, 3.4]
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
                         * // => [{ 'x': 2 }]
                         */
                        var xorBy = baseRest(function(arrays) {
                            var iteratee = last(arrays);
                            if (isArrayLikeObject(iteratee)) {
                                iteratee = undefined;
                            }
                            return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
                        });

                        /**
                         * This method is like `_.xor` except that it accepts `comparator` which is
                         * invoked to compare elements of `arrays`. The order of result values is
                         * determined by the order they occur in the arrays. The comparator is invoked
                         * with two arguments: (arrVal, othVal).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {...Array} [arrays] The arrays to inspect.
                         * @param {Function} [comparator] The comparator invoked per element.
                         * @returns {Array} Returns the new array of filtered values.
                         * @example
                         *
                         * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                         * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
                         *
                         * _.xorWith(objects, others, _.isEqual);
                         * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
                         */
                        var xorWith = baseRest(function(arrays) {
                            var comparator = last(arrays);
                            comparator = typeof comparator == 'function' ? comparator : undefined;
                            return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
                        });

                        /**
                         * Creates an array of grouped elements, the first of which contains the
                         * first elements of the given arrays, the second of which contains the
                         * second elements of the given arrays, and so on.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Array
                         * @param {...Array} [arrays] The arrays to process.
                         * @returns {Array} Returns the new array of grouped elements.
                         * @example
                         *
                         * _.zip(['a', 'b'], [1, 2], [true, false]);
                         * // => [['a', 1, true], ['b', 2, false]]
                         */
                        var zip = baseRest(unzip);

                        /**
                         * This method is like `_.fromPairs` except that it accepts two arrays,
                         * one of property identifiers and one of corresponding values.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.4.0
                         * @category Array
                         * @param {Array} [props=[]] The property identifiers.
                         * @param {Array} [values=[]] The property values.
                         * @returns {Object} Returns the new object.
                         * @example
                         *
                         * _.zipObject(['a', 'b'], [1, 2]);
                         * // => { 'a': 1, 'b': 2 }
                         */
                        function zipObject(props, values) {
                            return baseZipObject(props || [], values || [], assignValue);
                        }

                        /**
                         * This method is like `_.zipObject` except that it supports property paths.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.1.0
                         * @category Array
                         * @param {Array} [props=[]] The property identifiers.
                         * @param {Array} [values=[]] The property values.
                         * @returns {Object} Returns the new object.
                         * @example
                         *
                         * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
                         * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
                         */
                        function zipObjectDeep(props, values) {
                            return baseZipObject(props || [], values || [], baseSet);
                        }

                        /**
                         * This method is like `_.zip` except that it accepts `iteratee` to specify
                         * how grouped values should be combined. The iteratee is invoked with the
                         * elements of each group: (...group).
                         *
                         * @static
                         * @memberOf _
                         * @since 3.8.0
                         * @category Array
                         * @param {...Array} [arrays] The arrays to process.
                         * @param {Function} [iteratee=_.identity] The function to combine
                         *  grouped values.
                         * @returns {Array} Returns the new array of grouped elements.
                         * @example
                         *
                         * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
	     *   return a + b + c;
	     * });
                         * // => [111, 222]
                         */
                        var zipWith = baseRest(function(arrays) {
                            var length = arrays.length,
                                iteratee = length > 1 ? arrays[length - 1] : undefined;

                            iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
                            return unzipWith(arrays, iteratee);
                        });

                        /*------------------------------------------------------------------------*/

                        /**
                         * Creates a `lodash` wrapper instance that wraps `value` with explicit method
                         * chain sequences enabled. The result of such sequences must be unwrapped
                         * with `_#value`.
                         *
                         * @static
                         * @memberOf _
                         * @since 1.3.0
                         * @category Seq
                         * @param {*} value The value to wrap.
                         * @returns {Object} Returns the new `lodash` wrapper instance.
                         * @example
                         *
                         * var users = [
                         *   { 'user': 'barney',  'age': 36 },
                         *   { 'user': 'fred',    'age': 40 },
                         *   { 'user': 'pebbles', 'age': 1 }
                         * ];
                         *
                         * var youngest = _
                         *   .chain(users)
                         *   .sortBy('age')
                         *   .map(function(o) {
	     *     return o.user + ' is ' + o.age;
	     *   })
                         *   .head()
                         *   .value();
                         * // => 'pebbles is 1'
                         */
                        function chain(value) {
                            var result = lodash(value);
                            result.__chain__ = true;
                            return result;
                        }

                        /**
                         * This method invokes `interceptor` and returns `value`. The interceptor
                         * is invoked with one argument; (value). The purpose of this method is to
                         * "tap into" a method chain sequence in order to modify intermediate results.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Seq
                         * @param {*} value The value to provide to `interceptor`.
                         * @param {Function} interceptor The function to invoke.
                         * @returns {*} Returns `value`.
                         * @example
                         *
                         * _([1, 2, 3])
                         *  .tap(function(array) {
	     *    // Mutate input array.
	     *    array.pop();
	     *  })
                         *  .reverse()
                         *  .value();
                         * // => [2, 1]
                         */
                        function tap(value, interceptor) {
                            interceptor(value);
                            return value;
                        }

                        /**
                         * This method is like `_.tap` except that it returns the result of `interceptor`.
                         * The purpose of this method is to "pass thru" values replacing intermediate
                         * results in a method chain sequence.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Seq
                         * @param {*} value The value to provide to `interceptor`.
                         * @param {Function} interceptor The function to invoke.
                         * @returns {*} Returns the result of `interceptor`.
                         * @example
                         *
                         * _('  abc  ')
                         *  .chain()
                         *  .trim()
                         *  .thru(function(value) {
	     *    return [value];
	     *  })
                         *  .value();
                         * // => ['abc']
                         */
                        function thru(value, interceptor) {
                            return interceptor(value);
                        }

                        /**
                         * This method is the wrapper version of `_.at`.
                         *
                         * @name at
                         * @memberOf _
                         * @since 1.0.0
                         * @category Seq
                         * @param {...(string|string[])} [paths] The property paths to pick.
                         * @returns {Object} Returns the new `lodash` wrapper instance.
                         * @example
                         *
                         * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
                         *
                         * _(object).at(['a[0].b.c', 'a[1]']).value();
                         * // => [3, 4]
                         */
                        var wrapperAt = flatRest(function(paths) {
                            var length = paths.length,
                                start = length ? paths[0] : 0,
                                value = this.__wrapped__,
                                interceptor = function(object) { return baseAt(object, paths); };

                            if (length > 1 || this.__actions__.length ||
                                !(value instanceof LazyWrapper) || !isIndex(start)) {
                                return this.thru(interceptor);
                            }
                            value = value.slice(start, +start + (length ? 1 : 0));
                            value.__actions__.push({
                                'func': thru,
                                'args': [interceptor],
                                'thisArg': undefined
                            });
                            return new LodashWrapper(value, this.__chain__).thru(function(array) {
                                if (length && !array.length) {
                                    array.push(undefined);
                                }
                                return array;
                            });
                        });

                        /**
                         * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
                         *
                         * @name chain
                         * @memberOf _
                         * @since 0.1.0
                         * @category Seq
                         * @returns {Object} Returns the new `lodash` wrapper instance.
                         * @example
                         *
                         * var users = [
                         *   { 'user': 'barney', 'age': 36 },
                         *   { 'user': 'fred',   'age': 40 }
                         * ];
                         *
                         * // A sequence without explicit chaining.
                         * _(users).head();
                         * // => { 'user': 'barney', 'age': 36 }
                         *
                         * // A sequence with explicit chaining.
                         * _(users)
                         *   .chain()
                         *   .head()
                         *   .pick('user')
                         *   .value();
                         * // => { 'user': 'barney' }
                         */
                        function wrapperChain() {
                            return chain(this);
                        }

                        /**
                         * Executes the chain sequence and returns the wrapped result.
                         *
                         * @name commit
                         * @memberOf _
                         * @since 3.2.0
                         * @category Seq
                         * @returns {Object} Returns the new `lodash` wrapper instance.
                         * @example
                         *
                         * var array = [1, 2];
                         * var wrapped = _(array).push(3);
                         *
                         * console.log(array);
                         * // => [1, 2]
                         *
                         * wrapped = wrapped.commit();
                         * console.log(array);
                         * // => [1, 2, 3]
                         *
                         * wrapped.last();
                         * // => 3
                         *
                         * console.log(array);
                         * // => [1, 2, 3]
                         */
                        function wrapperCommit() {
                            return new LodashWrapper(this.value(), this.__chain__);
                        }

                        /**
                         * Gets the next value on a wrapped object following the
                         * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
                         *
                         * @name next
                         * @memberOf _
                         * @since 4.0.0
                         * @category Seq
                         * @returns {Object} Returns the next iterator value.
                         * @example
                         *
                         * var wrapped = _([1, 2]);
                         *
                         * wrapped.next();
                         * // => { 'done': false, 'value': 1 }
                         *
                         * wrapped.next();
                         * // => { 'done': false, 'value': 2 }
                         *
                         * wrapped.next();
                         * // => { 'done': true, 'value': undefined }
                         */
                        function wrapperNext() {
                            if (this.__values__ === undefined) {
                                this.__values__ = toArray(this.value());
                            }
                            var done = this.__index__ >= this.__values__.length,
                                value = done ? undefined : this.__values__[this.__index__++];

                            return { 'done': done, 'value': value };
                        }

                        /**
                         * Enables the wrapper to be iterable.
                         *
                         * @name Symbol.iterator
                         * @memberOf _
                         * @since 4.0.0
                         * @category Seq
                         * @returns {Object} Returns the wrapper object.
                         * @example
                         *
                         * var wrapped = _([1, 2]);
                         *
                         * wrapped[Symbol.iterator]() === wrapped;
                         * // => true
                         *
                         * Array.from(wrapped);
                         * // => [1, 2]
                         */
                        function wrapperToIterator() {
                            return this;
                        }

                        /**
                         * Creates a clone of the chain sequence planting `value` as the wrapped value.
                         *
                         * @name plant
                         * @memberOf _
                         * @since 3.2.0
                         * @category Seq
                         * @param {*} value The value to plant.
                         * @returns {Object} Returns the new `lodash` wrapper instance.
                         * @example
                         *
                         * function square(n) {
	     *   return n * n;
	     * }
                         *
                         * var wrapped = _([1, 2]).map(square);
                         * var other = wrapped.plant([3, 4]);
                         *
                         * other.value();
                         * // => [9, 16]
                         *
                         * wrapped.value();
                         * // => [1, 4]
                         */
                        function wrapperPlant(value) {
                            var result,
                                parent = this;

                            while (parent instanceof baseLodash) {
                                var clone = wrapperClone(parent);
                                clone.__index__ = 0;
                                clone.__values__ = undefined;
                                if (result) {
                                    previous.__wrapped__ = clone;
                                } else {
                                    result = clone;
                                }
                                var previous = clone;
                                parent = parent.__wrapped__;
                            }
                            previous.__wrapped__ = value;
                            return result;
                        }

                        /**
                         * This method is the wrapper version of `_.reverse`.
                         *
                         * **Note:** This method mutates the wrapped array.
                         *
                         * @name reverse
                         * @memberOf _
                         * @since 0.1.0
                         * @category Seq
                         * @returns {Object} Returns the new `lodash` wrapper instance.
                         * @example
                         *
                         * var array = [1, 2, 3];
                         *
                         * _(array).reverse().value()
                         * // => [3, 2, 1]
                         *
                         * console.log(array);
                         * // => [3, 2, 1]
                         */
                        function wrapperReverse() {
                            var value = this.__wrapped__;
                            if (value instanceof LazyWrapper) {
                                var wrapped = value;
                                if (this.__actions__.length) {
                                    wrapped = new LazyWrapper(this);
                                }
                                wrapped = wrapped.reverse();
                                wrapped.__actions__.push({
                                    'func': thru,
                                    'args': [reverse],
                                    'thisArg': undefined
                                });
                                return new LodashWrapper(wrapped, this.__chain__);
                            }
                            return this.thru(reverse);
                        }

                        /**
                         * Executes the chain sequence to resolve the unwrapped value.
                         *
                         * @name value
                         * @memberOf _
                         * @since 0.1.0
                         * @alias toJSON, valueOf
                         * @category Seq
                         * @returns {*} Returns the resolved unwrapped value.
                         * @example
                         *
                         * _([1, 2, 3]).value();
                         * // => [1, 2, 3]
                         */
                        function wrapperValue() {
                            return baseWrapperValue(this.__wrapped__, this.__actions__);
                        }

                        /*------------------------------------------------------------------------*/

                        /**
                         * Creates an object composed of keys generated from the results of running
                         * each element of `collection` thru `iteratee`. The corresponding value of
                         * each key is the number of times the key was returned by `iteratee`. The
                         * iteratee is invoked with one argument: (value).
                         *
                         * @static
                         * @memberOf _
                         * @since 0.5.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
                         * @returns {Object} Returns the composed aggregate object.
                         * @example
                         *
                         * _.countBy([6.1, 4.2, 6.3], Math.floor);
                         * // => { '4': 1, '6': 2 }
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.countBy(['one', 'two', 'three'], 'length');
                         * // => { '3': 2, '5': 1 }
                         */
                        var countBy = createAggregator(function(result, value, key) {
                            if (hasOwnProperty.call(result, key)) {
                                ++result[key];
                            } else {
                                baseAssignValue(result, key, 1);
                            }
                        });

                        /**
                         * Checks if `predicate` returns truthy for **all** elements of `collection`.
                         * Iteration is stopped once `predicate` returns falsey. The predicate is
                         * invoked with three arguments: (value, index|key, collection).
                         *
                         * **Note:** This method returns `true` for
                         * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
                         * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
                         * elements of empty collections.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} [predicate=_.identity] The function invoked per iteration.
                         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                         * @returns {boolean} Returns `true` if all elements pass the predicate check,
                         *  else `false`.
                         * @example
                         *
                         * _.every([true, 1, null, 'yes'], Boolean);
                         * // => false
                         *
                         * var users = [
                         *   { 'user': 'barney', 'age': 36, 'active': false },
                         *   { 'user': 'fred',   'age': 40, 'active': false }
                         * ];
                         *
                         * // The `_.matches` iteratee shorthand.
                         * _.every(users, { 'user': 'barney', 'active': false });
                         * // => false
                         *
                         * // The `_.matchesProperty` iteratee shorthand.
                         * _.every(users, ['active', false]);
                         * // => true
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.every(users, 'active');
                         * // => false
                         */
                        function every(collection, predicate, guard) {
                            var func = isArray(collection) ? arrayEvery : baseEvery;
                            if (guard && isIterateeCall(collection, predicate, guard)) {
                                predicate = undefined;
                            }
                            return func(collection, getIteratee(predicate, 3));
                        }

                        /**
                         * Iterates over elements of `collection`, returning an array of all elements
                         * `predicate` returns truthy for. The predicate is invoked with three
                         * arguments: (value, index|key, collection).
                         *
                         * **Note:** Unlike `_.remove`, this method returns a new array.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} [predicate=_.identity] The function invoked per iteration.
                         * @returns {Array} Returns the new filtered array.
                         * @see _.reject
                         * @example
                         *
                         * var users = [
                         *   { 'user': 'barney', 'age': 36, 'active': true },
                         *   { 'user': 'fred',   'age': 40, 'active': false }
                         * ];
                         *
                         * _.filter(users, function(o) { return !o.active; });
                         * // => objects for ['fred']
                         *
                         * // The `_.matches` iteratee shorthand.
                         * _.filter(users, { 'age': 36, 'active': true });
                         * // => objects for ['barney']
                         *
                         * // The `_.matchesProperty` iteratee shorthand.
                         * _.filter(users, ['active', false]);
                         * // => objects for ['fred']
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.filter(users, 'active');
                         * // => objects for ['barney']
                         */
                        function filter(collection, predicate) {
                            var func = isArray(collection) ? arrayFilter : baseFilter;
                            return func(collection, getIteratee(predicate, 3));
                        }

                        /**
                         * Iterates over elements of `collection`, returning the first element
                         * `predicate` returns truthy for. The predicate is invoked with three
                         * arguments: (value, index|key, collection).
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to inspect.
                         * @param {Function} [predicate=_.identity] The function invoked per iteration.
                         * @param {number} [fromIndex=0] The index to search from.
                         * @returns {*} Returns the matched element, else `undefined`.
                         * @example
                         *
                         * var users = [
                         *   { 'user': 'barney',  'age': 36, 'active': true },
                         *   { 'user': 'fred',    'age': 40, 'active': false },
                         *   { 'user': 'pebbles', 'age': 1,  'active': true }
                         * ];
                         *
                         * _.find(users, function(o) { return o.age < 40; });
                         * // => object for 'barney'
                         *
                         * // The `_.matches` iteratee shorthand.
                         * _.find(users, { 'age': 1, 'active': true });
                         * // => object for 'pebbles'
                         *
                         * // The `_.matchesProperty` iteratee shorthand.
                         * _.find(users, ['active', false]);
                         * // => object for 'fred'
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.find(users, 'active');
                         * // => object for 'barney'
                         */
                        var find = createFind(findIndex);

                        /**
                         * This method is like `_.find` except that it iterates over elements of
                         * `collection` from right to left.
                         *
                         * @static
                         * @memberOf _
                         * @since 2.0.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to inspect.
                         * @param {Function} [predicate=_.identity] The function invoked per iteration.
                         * @param {number} [fromIndex=collection.length-1] The index to search from.
                         * @returns {*} Returns the matched element, else `undefined`.
                         * @example
                         *
                         * _.findLast([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 1;
	     * });
                         * // => 3
                         */
                        var findLast = createFind(findLastIndex);

                        /**
                         * Creates a flattened array of values by running each element in `collection`
                         * thru `iteratee` and flattening the mapped results. The iteratee is invoked
                         * with three arguments: (value, index|key, collection).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                         * @returns {Array} Returns the new flattened array.
                         * @example
                         *
                         * function duplicate(n) {
	     *   return [n, n];
	     * }
                         *
                         * _.flatMap([1, 2], duplicate);
                         * // => [1, 1, 2, 2]
                         */
                        function flatMap(collection, iteratee) {
                            return baseFlatten(map(collection, iteratee), 1);
                        }

                        /**
                         * This method is like `_.flatMap` except that it recursively flattens the
                         * mapped results.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.7.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                         * @returns {Array} Returns the new flattened array.
                         * @example
                         *
                         * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
                         *
                         * _.flatMapDeep([1, 2], duplicate);
                         * // => [1, 1, 2, 2]
                         */
                        function flatMapDeep(collection, iteratee) {
                            return baseFlatten(map(collection, iteratee), INFINITY);
                        }

                        /**
                         * This method is like `_.flatMap` except that it recursively flattens the
                         * mapped results up to `depth` times.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.7.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                         * @param {number} [depth=1] The maximum recursion depth.
                         * @returns {Array} Returns the new flattened array.
                         * @example
                         *
                         * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
                         *
                         * _.flatMapDepth([1, 2], duplicate, 2);
                         * // => [[1, 1], [2, 2]]
                         */
                        function flatMapDepth(collection, iteratee, depth) {
                            depth = depth === undefined ? 1 : toInteger(depth);
                            return baseFlatten(map(collection, iteratee), depth);
                        }

                        /**
                         * Iterates over elements of `collection` and invokes `iteratee` for each element.
                         * The iteratee is invoked with three arguments: (value, index|key, collection).
                         * Iteratee functions may exit iteration early by explicitly returning `false`.
                         *
                         * **Note:** As with other "Collections" methods, objects with a "length"
                         * property are iterated like arrays. To avoid this behavior use `_.forIn`
                         * or `_.forOwn` for object iteration.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @alias each
                         * @category Collection
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                         * @returns {Array|Object} Returns `collection`.
                         * @see _.forEachRight
                         * @example
                         *
                         * _.forEach([1, 2], function(value) {
	     *   console.log(value);
	     * });
                         * // => Logs `1` then `2`.
                         *
                         * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   console.log(key);
	     * });
                         * // => Logs 'a' then 'b' (iteration order is not guaranteed).
                         */
                        function forEach(collection, iteratee) {
                            var func = isArray(collection) ? arrayEach : baseEach;
                            return func(collection, getIteratee(iteratee, 3));
                        }

                        /**
                         * This method is like `_.forEach` except that it iterates over elements of
                         * `collection` from right to left.
                         *
                         * @static
                         * @memberOf _
                         * @since 2.0.0
                         * @alias eachRight
                         * @category Collection
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                         * @returns {Array|Object} Returns `collection`.
                         * @see _.forEach
                         * @example
                         *
                         * _.forEachRight([1, 2], function(value) {
	     *   console.log(value);
	     * });
                         * // => Logs `2` then `1`.
                         */
                        function forEachRight(collection, iteratee) {
                            var func = isArray(collection) ? arrayEachRight : baseEachRight;
                            return func(collection, getIteratee(iteratee, 3));
                        }

                        /**
                         * Creates an object composed of keys generated from the results of running
                         * each element of `collection` thru `iteratee`. The order of grouped values
                         * is determined by the order they occur in `collection`. The corresponding
                         * value of each key is an array of elements responsible for generating the
                         * key. The iteratee is invoked with one argument: (value).
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
                         * @returns {Object} Returns the composed aggregate object.
                         * @example
                         *
                         * _.groupBy([6.1, 4.2, 6.3], Math.floor);
                         * // => { '4': [4.2], '6': [6.1, 6.3] }
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.groupBy(['one', 'two', 'three'], 'length');
                         * // => { '3': ['one', 'two'], '5': ['three'] }
                         */
                        var groupBy = createAggregator(function(result, value, key) {
                            if (hasOwnProperty.call(result, key)) {
                                result[key].push(value);
                            } else {
                                baseAssignValue(result, key, [value]);
                            }
                        });

                        /**
                         * Checks if `value` is in `collection`. If `collection` is a string, it's
                         * checked for a substring of `value`, otherwise
                         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                         * is used for equality comparisons. If `fromIndex` is negative, it's used as
                         * the offset from the end of `collection`.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Collection
                         * @param {Array|Object|string} collection The collection to inspect.
                         * @param {*} value The value to search for.
                         * @param {number} [fromIndex=0] The index to search from.
                         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
                         * @returns {boolean} Returns `true` if `value` is found, else `false`.
                         * @example
                         *
                         * _.includes([1, 2, 3], 1);
                         * // => true
                         *
                         * _.includes([1, 2, 3], 1, 2);
                         * // => false
                         *
                         * _.includes({ 'a': 1, 'b': 2 }, 1);
                         * // => true
                         *
                         * _.includes('abcd', 'bc');
                         * // => true
                         */
                        function includes(collection, value, fromIndex, guard) {
                            collection = isArrayLike(collection) ? collection : values(collection);
                            fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

                            var length = collection.length;
                            if (fromIndex < 0) {
                                fromIndex = nativeMax(length + fromIndex, 0);
                            }
                            return isString(collection)
                                ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
                                : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
                        }

                        /**
                         * Invokes the method at `path` of each element in `collection`, returning
                         * an array of the results of each invoked method. Any additional arguments
                         * are provided to each invoked method. If `path` is a function, it's invoked
                         * for, and `this` bound to, each element in `collection`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Array|Function|string} path The path of the method to invoke or
                         *  the function invoked per iteration.
                         * @param {...*} [args] The arguments to invoke each method with.
                         * @returns {Array} Returns the array of results.
                         * @example
                         *
                         * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
                         * // => [[1, 5, 7], [1, 2, 3]]
                         *
                         * _.invokeMap([123, 456], String.prototype.split, '');
                         * // => [['1', '2', '3'], ['4', '5', '6']]
                         */
                        var invokeMap = baseRest(function(collection, path, args) {
                            var index = -1,
                                isFunc = typeof path == 'function',
                                result = isArrayLike(collection) ? Array(collection.length) : [];

                            baseEach(collection, function(value) {
                                result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
                            });
                            return result;
                        });

                        /**
                         * Creates an object composed of keys generated from the results of running
                         * each element of `collection` thru `iteratee`. The corresponding value of
                         * each key is the last element responsible for generating the key. The
                         * iteratee is invoked with one argument: (value).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
                         * @returns {Object} Returns the composed aggregate object.
                         * @example
                         *
                         * var array = [
                         *   { 'dir': 'left', 'code': 97 },
                         *   { 'dir': 'right', 'code': 100 }
                         * ];
                         *
                         * _.keyBy(array, function(o) {
	     *   return String.fromCharCode(o.code);
	     * });
                         * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
                         *
                         * _.keyBy(array, 'dir');
                         * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
                         */
                        var keyBy = createAggregator(function(result, value, key) {
                            baseAssignValue(result, key, value);
                        });

                        /**
                         * Creates an array of values by running each element in `collection` thru
                         * `iteratee`. The iteratee is invoked with three arguments:
                         * (value, index|key, collection).
                         *
                         * Many lodash methods are guarded to work as iteratees for methods like
                         * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
                         *
                         * The guarded methods are:
                         * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
                         * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
                         * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
                         * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                         * @returns {Array} Returns the new mapped array.
                         * @example
                         *
                         * function square(n) {
	     *   return n * n;
	     * }
                         *
                         * _.map([4, 8], square);
                         * // => [16, 64]
                         *
                         * _.map({ 'a': 4, 'b': 8 }, square);
                         * // => [16, 64] (iteration order is not guaranteed)
                         *
                         * var users = [
                         *   { 'user': 'barney' },
                         *   { 'user': 'fred' }
                         * ];
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.map(users, 'user');
                         * // => ['barney', 'fred']
                         */
                        function map(collection, iteratee) {
                            var func = isArray(collection) ? arrayMap : baseMap;
                            return func(collection, getIteratee(iteratee, 3));
                        }

                        /**
                         * This method is like `_.sortBy` except that it allows specifying the sort
                         * orders of the iteratees to sort by. If `orders` is unspecified, all values
                         * are sorted in ascending order. Otherwise, specify an order of "desc" for
                         * descending or "asc" for ascending sort order of corresponding values.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
                         *  The iteratees to sort by.
                         * @param {string[]} [orders] The sort orders of `iteratees`.
                         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
                         * @returns {Array} Returns the new sorted array.
                         * @example
                         *
                         * var users = [
                         *   { 'user': 'fred',   'age': 48 },
                         *   { 'user': 'barney', 'age': 34 },
                         *   { 'user': 'fred',   'age': 40 },
                         *   { 'user': 'barney', 'age': 36 }
                         * ];
                         *
                         * // Sort by `user` in ascending order and by `age` in descending order.
                         * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
                         * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
                         */
                        function orderBy(collection, iteratees, orders, guard) {
                            if (collection == null) {
                                return [];
                            }
                            if (!isArray(iteratees)) {
                                iteratees = iteratees == null ? [] : [iteratees];
                            }
                            orders = guard ? undefined : orders;
                            if (!isArray(orders)) {
                                orders = orders == null ? [] : [orders];
                            }
                            return baseOrderBy(collection, iteratees, orders);
                        }

                        /**
                         * Creates an array of elements split into two groups, the first of which
                         * contains elements `predicate` returns truthy for, the second of which
                         * contains elements `predicate` returns falsey for. The predicate is
                         * invoked with one argument: (value).
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} [predicate=_.identity] The function invoked per iteration.
                         * @returns {Array} Returns the array of grouped elements.
                         * @example
                         *
                         * var users = [
                         *   { 'user': 'barney',  'age': 36, 'active': false },
                         *   { 'user': 'fred',    'age': 40, 'active': true },
                         *   { 'user': 'pebbles', 'age': 1,  'active': false }
                         * ];
                         *
                         * _.partition(users, function(o) { return o.active; });
                         * // => objects for [['fred'], ['barney', 'pebbles']]
                         *
                         * // The `_.matches` iteratee shorthand.
                         * _.partition(users, { 'age': 1, 'active': false });
                         * // => objects for [['pebbles'], ['barney', 'fred']]
                         *
                         * // The `_.matchesProperty` iteratee shorthand.
                         * _.partition(users, ['active', false]);
                         * // => objects for [['barney', 'pebbles'], ['fred']]
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.partition(users, 'active');
                         * // => objects for [['fred'], ['barney', 'pebbles']]
                         */
                        var partition = createAggregator(function(result, value, key) {
                            result[key ? 0 : 1].push(value);
                        }, function() { return [[], []]; });

                        /**
                         * Reduces `collection` to a value which is the accumulated result of running
                         * each element in `collection` thru `iteratee`, where each successive
                         * invocation is supplied the return value of the previous. If `accumulator`
                         * is not given, the first element of `collection` is used as the initial
                         * value. The iteratee is invoked with four arguments:
                         * (accumulator, value, index|key, collection).
                         *
                         * Many lodash methods are guarded to work as iteratees for methods like
                         * `_.reduce`, `_.reduceRight`, and `_.transform`.
                         *
                         * The guarded methods are:
                         * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
                         * and `sortBy`
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                         * @param {*} [accumulator] The initial value.
                         * @returns {*} Returns the accumulated value.
                         * @see _.reduceRight
                         * @example
                         *
                         * _.reduce([1, 2], function(sum, n) {
	     *   return sum + n;
	     * }, 0);
                         * // => 3
                         *
                         * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     *   return result;
	     * }, {});
                         * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
                         */
                        function reduce(collection, iteratee, accumulator) {
                            var func = isArray(collection) ? arrayReduce : baseReduce,
                                initAccum = arguments.length < 3;

                            return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
                        }

                        /**
                         * This method is like `_.reduce` except that it iterates over elements of
                         * `collection` from right to left.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                         * @param {*} [accumulator] The initial value.
                         * @returns {*} Returns the accumulated value.
                         * @see _.reduce
                         * @example
                         *
                         * var array = [[0, 1], [2, 3], [4, 5]];
                         *
                         * _.reduceRight(array, function(flattened, other) {
	     *   return flattened.concat(other);
	     * }, []);
                         * // => [4, 5, 2, 3, 0, 1]
                         */
                        function reduceRight(collection, iteratee, accumulator) {
                            var func = isArray(collection) ? arrayReduceRight : baseReduce,
                                initAccum = arguments.length < 3;

                            return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
                        }

                        /**
                         * The opposite of `_.filter`; this method returns the elements of `collection`
                         * that `predicate` does **not** return truthy for.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} [predicate=_.identity] The function invoked per iteration.
                         * @returns {Array} Returns the new filtered array.
                         * @see _.filter
                         * @example
                         *
                         * var users = [
                         *   { 'user': 'barney', 'age': 36, 'active': false },
                         *   { 'user': 'fred',   'age': 40, 'active': true }
                         * ];
                         *
                         * _.reject(users, function(o) { return !o.active; });
                         * // => objects for ['fred']
                         *
                         * // The `_.matches` iteratee shorthand.
                         * _.reject(users, { 'age': 40, 'active': true });
                         * // => objects for ['barney']
                         *
                         * // The `_.matchesProperty` iteratee shorthand.
                         * _.reject(users, ['active', false]);
                         * // => objects for ['fred']
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.reject(users, 'active');
                         * // => objects for ['barney']
                         */
                        function reject(collection, predicate) {
                            var func = isArray(collection) ? arrayFilter : baseFilter;
                            return func(collection, negate(getIteratee(predicate, 3)));
                        }

                        /**
                         * Gets a random element from `collection`.
                         *
                         * @static
                         * @memberOf _
                         * @since 2.0.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to sample.
                         * @returns {*} Returns the random element.
                         * @example
                         *
                         * _.sample([1, 2, 3, 4]);
                         * // => 2
                         */
                        function sample(collection) {
                            var func = isArray(collection) ? arraySample : baseSample;
                            return func(collection);
                        }

                        /**
                         * Gets `n` random elements at unique keys from `collection` up to the
                         * size of `collection`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to sample.
                         * @param {number} [n=1] The number of elements to sample.
                         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                         * @returns {Array} Returns the random elements.
                         * @example
                         *
                         * _.sampleSize([1, 2, 3], 2);
                         * // => [3, 1]
                         *
                         * _.sampleSize([1, 2, 3], 4);
                         * // => [2, 3, 1]
                         */
                        function sampleSize(collection, n, guard) {
                            if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
                                n = 1;
                            } else {
                                n = toInteger(n);
                            }
                            var func = isArray(collection) ? arraySampleSize : baseSampleSize;
                            return func(collection, n);
                        }

                        /**
                         * Creates an array of shuffled values, using a version of the
                         * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to shuffle.
                         * @returns {Array} Returns the new shuffled array.
                         * @example
                         *
                         * _.shuffle([1, 2, 3, 4]);
                         * // => [4, 1, 3, 2]
                         */
                        function shuffle(collection) {
                            var func = isArray(collection) ? arrayShuffle : baseShuffle;
                            return func(collection);
                        }

                        /**
                         * Gets the size of `collection` by returning its length for array-like
                         * values or the number of own enumerable string keyed properties for objects.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Collection
                         * @param {Array|Object|string} collection The collection to inspect.
                         * @returns {number} Returns the collection size.
                         * @example
                         *
                         * _.size([1, 2, 3]);
                         * // => 3
                         *
                         * _.size({ 'a': 1, 'b': 2 });
                         * // => 2
                         *
                         * _.size('pebbles');
                         * // => 7
                         */
                        function size(collection) {
                            if (collection == null) {
                                return 0;
                            }
                            if (isArrayLike(collection)) {
                                return isString(collection) ? stringSize(collection) : collection.length;
                            }
                            var tag = getTag(collection);
                            if (tag == mapTag || tag == setTag) {
                                return collection.size;
                            }
                            return baseKeys(collection).length;
                        }

                        /**
                         * Checks if `predicate` returns truthy for **any** element of `collection`.
                         * Iteration is stopped once `predicate` returns truthy. The predicate is
                         * invoked with three arguments: (value, index|key, collection).
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} [predicate=_.identity] The function invoked per iteration.
                         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                         * @returns {boolean} Returns `true` if any element passes the predicate check,
                         *  else `false`.
                         * @example
                         *
                         * _.some([null, 0, 'yes', false], Boolean);
                         * // => true
                         *
                         * var users = [
                         *   { 'user': 'barney', 'active': true },
                         *   { 'user': 'fred',   'active': false }
                         * ];
                         *
                         * // The `_.matches` iteratee shorthand.
                         * _.some(users, { 'user': 'barney', 'active': false });
                         * // => false
                         *
                         * // The `_.matchesProperty` iteratee shorthand.
                         * _.some(users, ['active', false]);
                         * // => true
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.some(users, 'active');
                         * // => true
                         */
                        function some(collection, predicate, guard) {
                            var func = isArray(collection) ? arraySome : baseSome;
                            if (guard && isIterateeCall(collection, predicate, guard)) {
                                predicate = undefined;
                            }
                            return func(collection, getIteratee(predicate, 3));
                        }

                        /**
                         * Creates an array of elements, sorted in ascending order by the results of
                         * running each element in a collection thru each iteratee. This method
                         * performs a stable sort, that is, it preserves the original sort order of
                         * equal elements. The iteratees are invoked with one argument: (value).
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {...(Function|Function[])} [iteratees=[_.identity]]
                         *  The iteratees to sort by.
                         * @returns {Array} Returns the new sorted array.
                         * @example
                         *
                         * var users = [
                         *   { 'user': 'fred',   'age': 48 },
                         *   { 'user': 'barney', 'age': 36 },
                         *   { 'user': 'fred',   'age': 40 },
                         *   { 'user': 'barney', 'age': 34 }
                         * ];
                         *
                         * _.sortBy(users, [function(o) { return o.user; }]);
                         * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
                         *
                         * _.sortBy(users, ['user', 'age']);
                         * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
                         */
                        var sortBy = baseRest(function(collection, iteratees) {
                            if (collection == null) {
                                return [];
                            }
                            var length = iteratees.length;
                            if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
                                iteratees = [];
                            } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
                                iteratees = [iteratees[0]];
                            }
                            return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
                        });

                        /*------------------------------------------------------------------------*/

                        /**
                         * Gets the timestamp of the number of milliseconds that have elapsed since
                         * the Unix epoch (1 January 1970 00:00:00 UTC).
                         *
                         * @static
                         * @memberOf _
                         * @since 2.4.0
                         * @category Date
                         * @returns {number} Returns the timestamp.
                         * @example
                         *
                         * _.defer(function(stamp) {
	     *   console.log(_.now() - stamp);
	     * }, _.now());
                         * // => Logs the number of milliseconds it took for the deferred invocation.
                         */
                        var now = ctxNow || function() {
                                return root.Date.now();
                            };

                        /*------------------------------------------------------------------------*/

                        /**
                         * The opposite of `_.before`; this method creates a function that invokes
                         * `func` once it's called `n` or more times.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Function
                         * @param {number} n The number of calls before `func` is invoked.
                         * @param {Function} func The function to restrict.
                         * @returns {Function} Returns the new restricted function.
                         * @example
                         *
                         * var saves = ['profile', 'settings'];
                         *
                         * var done = _.after(saves.length, function() {
	     *   console.log('done saving!');
	     * });
                         *
                         * _.forEach(saves, function(type) {
	     *   asyncSave({ 'type': type, 'complete': done });
	     * });
                         * // => Logs 'done saving!' after the two async saves have completed.
                         */
                        function after(n, func) {
                            if (typeof func != 'function') {
                                throw new TypeError(FUNC_ERROR_TEXT);
                            }
                            n = toInteger(n);
                            return function() {
                                if (--n < 1) {
                                    return func.apply(this, arguments);
                                }
                            };
                        }

                        /**
                         * Creates a function that invokes `func`, with up to `n` arguments,
                         * ignoring any additional arguments.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Function
                         * @param {Function} func The function to cap arguments for.
                         * @param {number} [n=func.length] The arity cap.
                         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                         * @returns {Function} Returns the new capped function.
                         * @example
                         *
                         * _.map(['6', '8', '10'], _.ary(parseInt, 1));
                         * // => [6, 8, 10]
                         */
                        function ary(func, n, guard) {
                            n = guard ? undefined : n;
                            n = (func && n == null) ? func.length : n;
                            return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
                        }

                        /**
                         * Creates a function that invokes `func`, with the `this` binding and arguments
                         * of the created function, while it's called less than `n` times. Subsequent
                         * calls to the created function return the result of the last `func` invocation.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Function
                         * @param {number} n The number of calls at which `func` is no longer invoked.
                         * @param {Function} func The function to restrict.
                         * @returns {Function} Returns the new restricted function.
                         * @example
                         *
                         * jQuery(element).on('click', _.before(5, addContactToList));
                         * // => Allows adding up to 4 contacts to the list.
                         */
                        function before(n, func) {
                            var result;
                            if (typeof func != 'function') {
                                throw new TypeError(FUNC_ERROR_TEXT);
                            }
                            n = toInteger(n);
                            return function() {
                                if (--n > 0) {
                                    result = func.apply(this, arguments);
                                }
                                if (n <= 1) {
                                    func = undefined;
                                }
                                return result;
                            };
                        }

                        /**
                         * Creates a function that invokes `func` with the `this` binding of `thisArg`
                         * and `partials` prepended to the arguments it receives.
                         *
                         * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
                         * may be used as a placeholder for partially applied arguments.
                         *
                         * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
                         * property of bound functions.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Function
                         * @param {Function} func The function to bind.
                         * @param {*} thisArg The `this` binding of `func`.
                         * @param {...*} [partials] The arguments to be partially applied.
                         * @returns {Function} Returns the new bound function.
                         * @example
                         *
                         * function greet(greeting, punctuation) {
	     *   return greeting + ' ' + this.user + punctuation;
	     * }
                         *
                         * var object = { 'user': 'fred' };
                         *
                         * var bound = _.bind(greet, object, 'hi');
                         * bound('!');
                         * // => 'hi fred!'
                         *
                         * // Bound with placeholders.
                         * var bound = _.bind(greet, object, _, '!');
                         * bound('hi');
                         * // => 'hi fred!'
                         */
                        var bind = baseRest(function(func, thisArg, partials) {
                            var bitmask = WRAP_BIND_FLAG;
                            if (partials.length) {
                                var holders = replaceHolders(partials, getHolder(bind));
                                bitmask |= WRAP_PARTIAL_FLAG;
                            }
                            return createWrap(func, bitmask, thisArg, partials, holders);
                        });

                        /**
                         * Creates a function that invokes the method at `object[key]` with `partials`
                         * prepended to the arguments it receives.
                         *
                         * This method differs from `_.bind` by allowing bound functions to reference
                         * methods that may be redefined or don't yet exist. See
                         * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
                         * for more details.
                         *
                         * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
                         * builds, may be used as a placeholder for partially applied arguments.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.10.0
                         * @category Function
                         * @param {Object} object The object to invoke the method on.
                         * @param {string} key The key of the method.
                         * @param {...*} [partials] The arguments to be partially applied.
                         * @returns {Function} Returns the new bound function.
                         * @example
                         *
                         * var object = {
	     *   'user': 'fred',
	     *   'greet': function(greeting, punctuation) {
	     *     return greeting + ' ' + this.user + punctuation;
	     *   }
	     * };
                         *
                         * var bound = _.bindKey(object, 'greet', 'hi');
                         * bound('!');
                         * // => 'hi fred!'
                         *
                         * object.greet = function(greeting, punctuation) {
	     *   return greeting + 'ya ' + this.user + punctuation;
	     * };
                         *
                         * bound('!');
                         * // => 'hiya fred!'
                         *
                         * // Bound with placeholders.
                         * var bound = _.bindKey(object, 'greet', _, '!');
                         * bound('hi');
                         * // => 'hiya fred!'
                         */
                        var bindKey = baseRest(function(object, key, partials) {
                            var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
                            if (partials.length) {
                                var holders = replaceHolders(partials, getHolder(bindKey));
                                bitmask |= WRAP_PARTIAL_FLAG;
                            }
                            return createWrap(key, bitmask, object, partials, holders);
                        });

                        /**
                         * Creates a function that accepts arguments of `func` and either invokes
                         * `func` returning its result, if at least `arity` number of arguments have
                         * been provided, or returns a function that accepts the remaining `func`
                         * arguments, and so on. The arity of `func` may be specified if `func.length`
                         * is not sufficient.
                         *
                         * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
                         * may be used as a placeholder for provided arguments.
                         *
                         * **Note:** This method doesn't set the "length" property of curried functions.
                         *
                         * @static
                         * @memberOf _
                         * @since 2.0.0
                         * @category Function
                         * @param {Function} func The function to curry.
                         * @param {number} [arity=func.length] The arity of `func`.
                         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                         * @returns {Function} Returns the new curried function.
                         * @example
                         *
                         * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
                         *
                         * var curried = _.curry(abc);
                         *
                         * curried(1)(2)(3);
                         * // => [1, 2, 3]
                         *
                         * curried(1, 2)(3);
                         * // => [1, 2, 3]
                         *
                         * curried(1, 2, 3);
                         * // => [1, 2, 3]
                         *
                         * // Curried with placeholders.
                         * curried(1)(_, 3)(2);
                         * // => [1, 2, 3]
                         */
                        function curry(func, arity, guard) {
                            arity = guard ? undefined : arity;
                            var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
                            result.placeholder = curry.placeholder;
                            return result;
                        }

                        /**
                         * This method is like `_.curry` except that arguments are applied to `func`
                         * in the manner of `_.partialRight` instead of `_.partial`.
                         *
                         * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
                         * builds, may be used as a placeholder for provided arguments.
                         *
                         * **Note:** This method doesn't set the "length" property of curried functions.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Function
                         * @param {Function} func The function to curry.
                         * @param {number} [arity=func.length] The arity of `func`.
                         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                         * @returns {Function} Returns the new curried function.
                         * @example
                         *
                         * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
                         *
                         * var curried = _.curryRight(abc);
                         *
                         * curried(3)(2)(1);
                         * // => [1, 2, 3]
                         *
                         * curried(2, 3)(1);
                         * // => [1, 2, 3]
                         *
                         * curried(1, 2, 3);
                         * // => [1, 2, 3]
                         *
                         * // Curried with placeholders.
                         * curried(3)(1, _)(2);
                         * // => [1, 2, 3]
                         */
                        function curryRight(func, arity, guard) {
                            arity = guard ? undefined : arity;
                            var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
                            result.placeholder = curryRight.placeholder;
                            return result;
                        }

                        /**
                         * Creates a debounced function that delays invoking `func` until after `wait`
                         * milliseconds have elapsed since the last time the debounced function was
                         * invoked. The debounced function comes with a `cancel` method to cancel
                         * delayed `func` invocations and a `flush` method to immediately invoke them.
                         * Provide `options` to indicate whether `func` should be invoked on the
                         * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
                         * with the last arguments provided to the debounced function. Subsequent
                         * calls to the debounced function return the result of the last `func`
                         * invocation.
                         *
                         * **Note:** If `leading` and `trailing` options are `true`, `func` is
                         * invoked on the trailing edge of the timeout only if the debounced function
                         * is invoked more than once during the `wait` timeout.
                         *
                         * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
                         * until to the next tick, similar to `setTimeout` with a timeout of `0`.
                         *
                         * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
                         * for details over the differences between `_.debounce` and `_.throttle`.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Function
                         * @param {Function} func The function to debounce.
                         * @param {number} [wait=0] The number of milliseconds to delay.
                         * @param {Object} [options={}] The options object.
                         * @param {boolean} [options.leading=false]
                         *  Specify invoking on the leading edge of the timeout.
                         * @param {number} [options.maxWait]
                         *  The maximum time `func` is allowed to be delayed before it's invoked.
                         * @param {boolean} [options.trailing=true]
                         *  Specify invoking on the trailing edge of the timeout.
                         * @returns {Function} Returns the new debounced function.
                         * @example
                         *
                         * // Avoid costly calculations while the window size is in flux.
                         * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
                         *
                         * // Invoke `sendMail` when clicked, debouncing subsequent calls.
                         * jQuery(element).on('click', _.debounce(sendMail, 300, {
	     *   'leading': true,
	     *   'trailing': false
	     * }));
                         *
                         * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
                         * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
                         * var source = new EventSource('/stream');
                         * jQuery(source).on('message', debounced);
                         *
                         * // Cancel the trailing debounced invocation.
                         * jQuery(window).on('popstate', debounced.cancel);
                         */
                        function debounce(func, wait, options) {
                            var lastArgs,
                                lastThis,
                                maxWait,
                                result,
                                timerId,
                                lastCallTime,
                                lastInvokeTime = 0,
                                leading = false,
                                maxing = false,
                                trailing = true;

                            if (typeof func != 'function') {
                                throw new TypeError(FUNC_ERROR_TEXT);
                            }
                            wait = toNumber(wait) || 0;
                            if (isObject(options)) {
                                leading = !!options.leading;
                                maxing = 'maxWait' in options;
                                maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
                                trailing = 'trailing' in options ? !!options.trailing : trailing;
                            }

                            function invokeFunc(time) {
                                var args = lastArgs,
                                    thisArg = lastThis;

                                lastArgs = lastThis = undefined;
                                lastInvokeTime = time;
                                result = func.apply(thisArg, args);
                                return result;
                            }

                            function leadingEdge(time) {
                                // Reset any `maxWait` timer.
                                lastInvokeTime = time;
                                // Start the timer for the trailing edge.
                                timerId = setTimeout(timerExpired, wait);
                                // Invoke the leading edge.
                                return leading ? invokeFunc(time) : result;
                            }

                            function remainingWait(time) {
                                var timeSinceLastCall = time - lastCallTime,
                                    timeSinceLastInvoke = time - lastInvokeTime,
                                    result = wait - timeSinceLastCall;

                                return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
                            }

                            function shouldInvoke(time) {
                                var timeSinceLastCall = time - lastCallTime,
                                    timeSinceLastInvoke = time - lastInvokeTime;

                                // Either this is the first call, activity has stopped and we're at the
                                // trailing edge, the system time has gone backwards and we're treating
                                // it as the trailing edge, or we've hit the `maxWait` limit.
                                return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
                                (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
                            }

                            function timerExpired() {
                                var time = now();
                                if (shouldInvoke(time)) {
                                    return trailingEdge(time);
                                }
                                // Restart the timer.
                                timerId = setTimeout(timerExpired, remainingWait(time));
                            }

                            function trailingEdge(time) {
                                timerId = undefined;

                                // Only invoke if we have `lastArgs` which means `func` has been
                                // debounced at least once.
                                if (trailing && lastArgs) {
                                    return invokeFunc(time);
                                }
                                lastArgs = lastThis = undefined;
                                return result;
                            }

                            function cancel() {
                                if (timerId !== undefined) {
                                    clearTimeout(timerId);
                                }
                                lastInvokeTime = 0;
                                lastArgs = lastCallTime = lastThis = timerId = undefined;
                            }

                            function flush() {
                                return timerId === undefined ? result : trailingEdge(now());
                            }

                            function debounced() {
                                var time = now(),
                                    isInvoking = shouldInvoke(time);

                                lastArgs = arguments;
                                lastThis = this;
                                lastCallTime = time;

                                if (isInvoking) {
                                    if (timerId === undefined) {
                                        return leadingEdge(lastCallTime);
                                    }
                                    if (maxing) {
                                        // Handle invocations in a tight loop.
                                        timerId = setTimeout(timerExpired, wait);
                                        return invokeFunc(lastCallTime);
                                    }
                                }
                                if (timerId === undefined) {
                                    timerId = setTimeout(timerExpired, wait);
                                }
                                return result;
                            }
                            debounced.cancel = cancel;
                            debounced.flush = flush;
                            return debounced;
                        }

                        /**
                         * Defers invoking the `func` until the current call stack has cleared. Any
                         * additional arguments are provided to `func` when it's invoked.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Function
                         * @param {Function} func The function to defer.
                         * @param {...*} [args] The arguments to invoke `func` with.
                         * @returns {number} Returns the timer id.
                         * @example
                         *
                         * _.defer(function(text) {
	     *   console.log(text);
	     * }, 'deferred');
                         * // => Logs 'deferred' after one millisecond.
                         */
                        var defer = baseRest(function(func, args) {
                            return baseDelay(func, 1, args);
                        });

                        /**
                         * Invokes `func` after `wait` milliseconds. Any additional arguments are
                         * provided to `func` when it's invoked.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Function
                         * @param {Function} func The function to delay.
                         * @param {number} wait The number of milliseconds to delay invocation.
                         * @param {...*} [args] The arguments to invoke `func` with.
                         * @returns {number} Returns the timer id.
                         * @example
                         *
                         * _.delay(function(text) {
	     *   console.log(text);
	     * }, 1000, 'later');
                         * // => Logs 'later' after one second.
                         */
                        var delay = baseRest(function(func, wait, args) {
                            return baseDelay(func, toNumber(wait) || 0, args);
                        });

                        /**
                         * Creates a function that invokes `func` with arguments reversed.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Function
                         * @param {Function} func The function to flip arguments for.
                         * @returns {Function} Returns the new flipped function.
                         * @example
                         *
                         * var flipped = _.flip(function() {
	     *   return _.toArray(arguments);
	     * });
                         *
                         * flipped('a', 'b', 'c', 'd');
                         * // => ['d', 'c', 'b', 'a']
                         */
                        function flip(func) {
                            return createWrap(func, WRAP_FLIP_FLAG);
                        }

                        /**
                         * Creates a function that memoizes the result of `func`. If `resolver` is
                         * provided, it determines the cache key for storing the result based on the
                         * arguments provided to the memoized function. By default, the first argument
                         * provided to the memoized function is used as the map cache key. The `func`
                         * is invoked with the `this` binding of the memoized function.
                         *
                         * **Note:** The cache is exposed as the `cache` property on the memoized
                         * function. Its creation may be customized by replacing the `_.memoize.Cache`
                         * constructor with one whose instances implement the
                         * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
                         * method interface of `clear`, `delete`, `get`, `has`, and `set`.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Function
                         * @param {Function} func The function to have its output memoized.
                         * @param {Function} [resolver] The function to resolve the cache key.
                         * @returns {Function} Returns the new memoized function.
                         * @example
                         *
                         * var object = { 'a': 1, 'b': 2 };
                         * var other = { 'c': 3, 'd': 4 };
                         *
                         * var values = _.memoize(_.values);
                         * values(object);
                         * // => [1, 2]
                         *
                         * values(other);
                         * // => [3, 4]
                         *
                         * object.a = 2;
                         * values(object);
                         * // => [1, 2]
                         *
                         * // Modify the result cache.
                         * values.cache.set(object, ['a', 'b']);
                         * values(object);
                         * // => ['a', 'b']
                         *
                         * // Replace `_.memoize.Cache`.
                         * _.memoize.Cache = WeakMap;
                         */
                        function memoize(func, resolver) {
                            if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
                                throw new TypeError(FUNC_ERROR_TEXT);
                            }
                            var memoized = function() {
                                var args = arguments,
                                    key = resolver ? resolver.apply(this, args) : args[0],
                                    cache = memoized.cache;

                                if (cache.has(key)) {
                                    return cache.get(key);
                                }
                                var result = func.apply(this, args);
                                memoized.cache = cache.set(key, result) || cache;
                                return result;
                            };
                            memoized.cache = new (memoize.Cache || MapCache);
                            return memoized;
                        }

                        // Expose `MapCache`.
                        memoize.Cache = MapCache;

                        /**
                         * Creates a function that negates the result of the predicate `func`. The
                         * `func` predicate is invoked with the `this` binding and arguments of the
                         * created function.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Function
                         * @param {Function} predicate The predicate to negate.
                         * @returns {Function} Returns the new negated function.
                         * @example
                         *
                         * function isEven(n) {
	     *   return n % 2 == 0;
	     * }
                         *
                         * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
                         * // => [1, 3, 5]
                         */
                        function negate(predicate) {
                            if (typeof predicate != 'function') {
                                throw new TypeError(FUNC_ERROR_TEXT);
                            }
                            return function() {
                                var args = arguments;
                                switch (args.length) {
                                    case 0: return !predicate.call(this);
                                    case 1: return !predicate.call(this, args[0]);
                                    case 2: return !predicate.call(this, args[0], args[1]);
                                    case 3: return !predicate.call(this, args[0], args[1], args[2]);
                                }
                                return !predicate.apply(this, args);
                            };
                        }

                        /**
                         * Creates a function that is restricted to invoking `func` once. Repeat calls
                         * to the function return the value of the first invocation. The `func` is
                         * invoked with the `this` binding and arguments of the created function.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Function
                         * @param {Function} func The function to restrict.
                         * @returns {Function} Returns the new restricted function.
                         * @example
                         *
                         * var initialize = _.once(createApplication);
                         * initialize();
                         * initialize();
                         * // => `createApplication` is invoked once
                         */
                        function once(func) {
                            return before(2, func);
                        }

                        /**
                         * Creates a function that invokes `func` with its arguments transformed.
                         *
                         * @static
                         * @since 4.0.0
                         * @memberOf _
                         * @category Function
                         * @param {Function} func The function to wrap.
                         * @param {...(Function|Function[])} [transforms=[_.identity]]
                         *  The argument transforms.
                         * @returns {Function} Returns the new function.
                         * @example
                         *
                         * function doubled(n) {
	     *   return n * 2;
	     * }
                         *
                         * function square(n) {
	     *   return n * n;
	     * }
                         *
                         * var func = _.overArgs(function(x, y) {
	     *   return [x, y];
	     * }, [square, doubled]);
                         *
                         * func(9, 3);
                         * // => [81, 6]
                         *
                         * func(10, 5);
                         * // => [100, 10]
                         */
                        var overArgs = castRest(function(func, transforms) {
                            transforms = (transforms.length == 1 && isArray(transforms[0]))
                                ? arrayMap(transforms[0], baseUnary(getIteratee()))
                                : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

                            var funcsLength = transforms.length;
                            return baseRest(function(args) {
                                var index = -1,
                                    length = nativeMin(args.length, funcsLength);

                                while (++index < length) {
                                    args[index] = transforms[index].call(this, args[index]);
                                }
                                return apply(func, this, args);
                            });
                        });

                        /**
                         * Creates a function that invokes `func` with `partials` prepended to the
                         * arguments it receives. This method is like `_.bind` except it does **not**
                         * alter the `this` binding.
                         *
                         * The `_.partial.placeholder` value, which defaults to `_` in monolithic
                         * builds, may be used as a placeholder for partially applied arguments.
                         *
                         * **Note:** This method doesn't set the "length" property of partially
                         * applied functions.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.2.0
                         * @category Function
                         * @param {Function} func The function to partially apply arguments to.
                         * @param {...*} [partials] The arguments to be partially applied.
                         * @returns {Function} Returns the new partially applied function.
                         * @example
                         *
                         * function greet(greeting, name) {
	     *   return greeting + ' ' + name;
	     * }
                         *
                         * var sayHelloTo = _.partial(greet, 'hello');
                         * sayHelloTo('fred');
                         * // => 'hello fred'
                         *
                         * // Partially applied with placeholders.
                         * var greetFred = _.partial(greet, _, 'fred');
                         * greetFred('hi');
                         * // => 'hi fred'
                         */
                        var partial = baseRest(function(func, partials) {
                            var holders = replaceHolders(partials, getHolder(partial));
                            return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
                        });

                        /**
                         * This method is like `_.partial` except that partially applied arguments
                         * are appended to the arguments it receives.
                         *
                         * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
                         * builds, may be used as a placeholder for partially applied arguments.
                         *
                         * **Note:** This method doesn't set the "length" property of partially
                         * applied functions.
                         *
                         * @static
                         * @memberOf _
                         * @since 1.0.0
                         * @category Function
                         * @param {Function} func The function to partially apply arguments to.
                         * @param {...*} [partials] The arguments to be partially applied.
                         * @returns {Function} Returns the new partially applied function.
                         * @example
                         *
                         * function greet(greeting, name) {
	     *   return greeting + ' ' + name;
	     * }
                         *
                         * var greetFred = _.partialRight(greet, 'fred');
                         * greetFred('hi');
                         * // => 'hi fred'
                         *
                         * // Partially applied with placeholders.
                         * var sayHelloTo = _.partialRight(greet, 'hello', _);
                         * sayHelloTo('fred');
                         * // => 'hello fred'
                         */
                        var partialRight = baseRest(function(func, partials) {
                            var holders = replaceHolders(partials, getHolder(partialRight));
                            return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
                        });

                        /**
                         * Creates a function that invokes `func` with arguments arranged according
                         * to the specified `indexes` where the argument value at the first index is
                         * provided as the first argument, the argument value at the second index is
                         * provided as the second argument, and so on.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Function
                         * @param {Function} func The function to rearrange arguments for.
                         * @param {...(number|number[])} indexes The arranged argument indexes.
                         * @returns {Function} Returns the new function.
                         * @example
                         *
                         * var rearged = _.rearg(function(a, b, c) {
	     *   return [a, b, c];
	     * }, [2, 0, 1]);
                         *
                         * rearged('b', 'c', 'a')
                         * // => ['a', 'b', 'c']
                         */
                        var rearg = flatRest(function(func, indexes) {
                            return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
                        });

                        /**
                         * Creates a function that invokes `func` with the `this` binding of the
                         * created function and arguments from `start` and beyond provided as
                         * an array.
                         *
                         * **Note:** This method is based on the
                         * [rest parameter](https://mdn.io/rest_parameters).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Function
                         * @param {Function} func The function to apply a rest parameter to.
                         * @param {number} [start=func.length-1] The start position of the rest parameter.
                         * @returns {Function} Returns the new function.
                         * @example
                         *
                         * var say = _.rest(function(what, names) {
	     *   return what + ' ' + _.initial(names).join(', ') +
	     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	     * });
                         *
                         * say('hello', 'fred', 'barney', 'pebbles');
                         * // => 'hello fred, barney, & pebbles'
                         */
                        function rest(func, start) {
                            if (typeof func != 'function') {
                                throw new TypeError(FUNC_ERROR_TEXT);
                            }
                            start = start === undefined ? start : toInteger(start);
                            return baseRest(func, start);
                        }

                        /**
                         * Creates a function that invokes `func` with the `this` binding of the
                         * create function and an array of arguments much like
                         * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
                         *
                         * **Note:** This method is based on the
                         * [spread operator](https://mdn.io/spread_operator).
                         *
                         * @static
                         * @memberOf _
                         * @since 3.2.0
                         * @category Function
                         * @param {Function} func The function to spread arguments over.
                         * @param {number} [start=0] The start position of the spread.
                         * @returns {Function} Returns the new function.
                         * @example
                         *
                         * var say = _.spread(function(who, what) {
	     *   return who + ' says ' + what;
	     * });
                         *
                         * say(['fred', 'hello']);
                         * // => 'fred says hello'
                         *
                         * var numbers = Promise.all([
                         *   Promise.resolve(40),
                         *   Promise.resolve(36)
                         * ]);
                         *
                         * numbers.then(_.spread(function(x, y) {
	     *   return x + y;
	     * }));
                         * // => a Promise of 76
                         */
                        function spread(func, start) {
                            if (typeof func != 'function') {
                                throw new TypeError(FUNC_ERROR_TEXT);
                            }
                            start = start == null ? 0 : nativeMax(toInteger(start), 0);
                            return baseRest(function(args) {
                                var array = args[start],
                                    otherArgs = castSlice(args, 0, start);

                                if (array) {
                                    arrayPush(otherArgs, array);
                                }
                                return apply(func, this, otherArgs);
                            });
                        }

                        /**
                         * Creates a throttled function that only invokes `func` at most once per
                         * every `wait` milliseconds. The throttled function comes with a `cancel`
                         * method to cancel delayed `func` invocations and a `flush` method to
                         * immediately invoke them. Provide `options` to indicate whether `func`
                         * should be invoked on the leading and/or trailing edge of the `wait`
                         * timeout. The `func` is invoked with the last arguments provided to the
                         * throttled function. Subsequent calls to the throttled function return the
                         * result of the last `func` invocation.
                         *
                         * **Note:** If `leading` and `trailing` options are `true`, `func` is
                         * invoked on the trailing edge of the timeout only if the throttled function
                         * is invoked more than once during the `wait` timeout.
                         *
                         * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
                         * until to the next tick, similar to `setTimeout` with a timeout of `0`.
                         *
                         * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
                         * for details over the differences between `_.throttle` and `_.debounce`.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Function
                         * @param {Function} func The function to throttle.
                         * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
                         * @param {Object} [options={}] The options object.
                         * @param {boolean} [options.leading=true]
                         *  Specify invoking on the leading edge of the timeout.
                         * @param {boolean} [options.trailing=true]
                         *  Specify invoking on the trailing edge of the timeout.
                         * @returns {Function} Returns the new throttled function.
                         * @example
                         *
                         * // Avoid excessively updating the position while scrolling.
                         * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
                         *
                         * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
                         * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
                         * jQuery(element).on('click', throttled);
                         *
                         * // Cancel the trailing throttled invocation.
                         * jQuery(window).on('popstate', throttled.cancel);
                         */
                        function throttle(func, wait, options) {
                            var leading = true,
                                trailing = true;

                            if (typeof func != 'function') {
                                throw new TypeError(FUNC_ERROR_TEXT);
                            }
                            if (isObject(options)) {
                                leading = 'leading' in options ? !!options.leading : leading;
                                trailing = 'trailing' in options ? !!options.trailing : trailing;
                            }
                            return debounce(func, wait, {
                                'leading': leading,
                                'maxWait': wait,
                                'trailing': trailing
                            });
                        }

                        /**
                         * Creates a function that accepts up to one argument, ignoring any
                         * additional arguments.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Function
                         * @param {Function} func The function to cap arguments for.
                         * @returns {Function} Returns the new capped function.
                         * @example
                         *
                         * _.map(['6', '8', '10'], _.unary(parseInt));
                         * // => [6, 8, 10]
                         */
                        function unary(func) {
                            return ary(func, 1);
                        }

                        /**
                         * Creates a function that provides `value` to `wrapper` as its first
                         * argument. Any additional arguments provided to the function are appended
                         * to those provided to the `wrapper`. The wrapper is invoked with the `this`
                         * binding of the created function.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Function
                         * @param {*} value The value to wrap.
                         * @param {Function} [wrapper=identity] The wrapper function.
                         * @returns {Function} Returns the new function.
                         * @example
                         *
                         * var p = _.wrap(_.escape, function(func, text) {
	     *   return '<p>' + func(text) + '</p>';
	     * });
                         *
                         * p('fred, barney, & pebbles');
                         * // => '<p>fred, barney, &amp; pebbles</p>'
                         */
                        function wrap(value, wrapper) {
                            return partial(castFunction(wrapper), value);
                        }

                        /*------------------------------------------------------------------------*/

                        /**
                         * Casts `value` as an array if it's not one.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.4.0
                         * @category Lang
                         * @param {*} value The value to inspect.
                         * @returns {Array} Returns the cast array.
                         * @example
                         *
                         * _.castArray(1);
                         * // => [1]
                         *
                         * _.castArray({ 'a': 1 });
                         * // => [{ 'a': 1 }]
                         *
                         * _.castArray('abc');
                         * // => ['abc']
                         *
                         * _.castArray(null);
                         * // => [null]
                         *
                         * _.castArray(undefined);
                         * // => [undefined]
                         *
                         * _.castArray();
                         * // => []
                         *
                         * var array = [1, 2, 3];
                         * console.log(_.castArray(array) === array);
                         * // => true
                         */
                        function castArray() {
                            if (!arguments.length) {
                                return [];
                            }
                            var value = arguments[0];
                            return isArray(value) ? value : [value];
                        }

                        /**
                         * Creates a shallow clone of `value`.
                         *
                         * **Note:** This method is loosely based on the
                         * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
                         * and supports cloning arrays, array buffers, booleans, date objects, maps,
                         * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
                         * arrays. The own enumerable properties of `arguments` objects are cloned
                         * as plain objects. An empty object is returned for uncloneable values such
                         * as error objects, functions, DOM nodes, and WeakMaps.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Lang
                         * @param {*} value The value to clone.
                         * @returns {*} Returns the cloned value.
                         * @see _.cloneDeep
                         * @example
                         *
                         * var objects = [{ 'a': 1 }, { 'b': 2 }];
                         *
                         * var shallow = _.clone(objects);
                         * console.log(shallow[0] === objects[0]);
                         * // => true
                         */
                        function clone(value) {
                            return baseClone(value, CLONE_SYMBOLS_FLAG);
                        }

                        /**
                         * This method is like `_.clone` except that it accepts `customizer` which
                         * is invoked to produce the cloned value. If `customizer` returns `undefined`,
                         * cloning is handled by the method instead. The `customizer` is invoked with
                         * up to four arguments; (value [, index|key, object, stack]).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Lang
                         * @param {*} value The value to clone.
                         * @param {Function} [customizer] The function to customize cloning.
                         * @returns {*} Returns the cloned value.
                         * @see _.cloneDeepWith
                         * @example
                         *
                         * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(false);
	     *   }
	     * }
                         *
                         * var el = _.cloneWith(document.body, customizer);
                         *
                         * console.log(el === document.body);
                         * // => false
                         * console.log(el.nodeName);
                         * // => 'BODY'
                         * console.log(el.childNodes.length);
                         * // => 0
                         */
                        function cloneWith(value, customizer) {
                            customizer = typeof customizer == 'function' ? customizer : undefined;
                            return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
                        }

                        /**
                         * This method is like `_.clone` except that it recursively clones `value`.
                         *
                         * @static
                         * @memberOf _
                         * @since 1.0.0
                         * @category Lang
                         * @param {*} value The value to recursively clone.
                         * @returns {*} Returns the deep cloned value.
                         * @see _.clone
                         * @example
                         *
                         * var objects = [{ 'a': 1 }, { 'b': 2 }];
                         *
                         * var deep = _.cloneDeep(objects);
                         * console.log(deep[0] === objects[0]);
                         * // => false
                         */
                        function cloneDeep(value) {
                            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
                        }

                        /**
                         * This method is like `_.cloneWith` except that it recursively clones `value`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Lang
                         * @param {*} value The value to recursively clone.
                         * @param {Function} [customizer] The function to customize cloning.
                         * @returns {*} Returns the deep cloned value.
                         * @see _.cloneWith
                         * @example
                         *
                         * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(true);
	     *   }
	     * }
                         *
                         * var el = _.cloneDeepWith(document.body, customizer);
                         *
                         * console.log(el === document.body);
                         * // => false
                         * console.log(el.nodeName);
                         * // => 'BODY'
                         * console.log(el.childNodes.length);
                         * // => 20
                         */
                        function cloneDeepWith(value, customizer) {
                            customizer = typeof customizer == 'function' ? customizer : undefined;
                            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
                        }

                        /**
                         * Checks if `object` conforms to `source` by invoking the predicate
                         * properties of `source` with the corresponding property values of `object`.
                         *
                         * **Note:** This method is equivalent to `_.conforms` when `source` is
                         * partially applied.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.14.0
                         * @category Lang
                         * @param {Object} object The object to inspect.
                         * @param {Object} source The object of property predicates to conform to.
                         * @returns {boolean} Returns `true` if `object` conforms, else `false`.
                         * @example
                         *
                         * var object = { 'a': 1, 'b': 2 };
                         *
                         * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
                         * // => true
                         *
                         * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
                         * // => false
                         */
                        function conformsTo(object, source) {
                            return source == null || baseConformsTo(object, source, keys(source));
                        }

                        /**
                         * Performs a
                         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                         * comparison between two values to determine if they are equivalent.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Lang
                         * @param {*} value The value to compare.
                         * @param {*} other The other value to compare.
                         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                         * @example
                         *
                         * var object = { 'a': 1 };
                         * var other = { 'a': 1 };
                         *
                         * _.eq(object, object);
                         * // => true
                         *
                         * _.eq(object, other);
                         * // => false
                         *
                         * _.eq('a', 'a');
                         * // => true
                         *
                         * _.eq('a', Object('a'));
                         * // => false
                         *
                         * _.eq(NaN, NaN);
                         * // => true
                         */
                        function eq(value, other) {
                            return value === other || (value !== value && other !== other);
                        }

                        /**
                         * Checks if `value` is greater than `other`.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.9.0
                         * @category Lang
                         * @param {*} value The value to compare.
                         * @param {*} other The other value to compare.
                         * @returns {boolean} Returns `true` if `value` is greater than `other`,
                         *  else `false`.
                         * @see _.lt
                         * @example
                         *
                         * _.gt(3, 1);
                         * // => true
                         *
                         * _.gt(3, 3);
                         * // => false
                         *
                         * _.gt(1, 3);
                         * // => false
                         */
                        var gt = createRelationalOperation(baseGt);

                        /**
                         * Checks if `value` is greater than or equal to `other`.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.9.0
                         * @category Lang
                         * @param {*} value The value to compare.
                         * @param {*} other The other value to compare.
                         * @returns {boolean} Returns `true` if `value` is greater than or equal to
                         *  `other`, else `false`.
                         * @see _.lte
                         * @example
                         *
                         * _.gte(3, 1);
                         * // => true
                         *
                         * _.gte(3, 3);
                         * // => true
                         *
                         * _.gte(1, 3);
                         * // => false
                         */
                        var gte = createRelationalOperation(function(value, other) {
                            return value >= other;
                        });

                        /**
                         * Checks if `value` is likely an `arguments` object.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is an `arguments` object,
                         *  else `false`.
                         * @example
                         *
                         * _.isArguments(function() { return arguments; }());
                         * // => true
                         *
                         * _.isArguments([1, 2, 3]);
                         * // => false
                         */
                        var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
                            return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
                                !propertyIsEnumerable.call(value, 'callee');
                        };

                        /**
                         * Checks if `value` is classified as an `Array` object.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is an array, else `false`.
                         * @example
                         *
                         * _.isArray([1, 2, 3]);
                         * // => true
                         *
                         * _.isArray(document.body.children);
                         * // => false
                         *
                         * _.isArray('abc');
                         * // => false
                         *
                         * _.isArray(_.noop);
                         * // => false
                         */
                        var isArray = Array.isArray;

                        /**
                         * Checks if `value` is classified as an `ArrayBuffer` object.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.3.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
                         * @example
                         *
                         * _.isArrayBuffer(new ArrayBuffer(2));
                         * // => true
                         *
                         * _.isArrayBuffer(new Array(2));
                         * // => false
                         */
                        var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

                        /**
                         * Checks if `value` is array-like. A value is considered array-like if it's
                         * not a function and has a `value.length` that's an integer greater than or
                         * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
                         * @example
                         *
                         * _.isArrayLike([1, 2, 3]);
                         * // => true
                         *
                         * _.isArrayLike(document.body.children);
                         * // => true
                         *
                         * _.isArrayLike('abc');
                         * // => true
                         *
                         * _.isArrayLike(_.noop);
                         * // => false
                         */
                        function isArrayLike(value) {
                            return value != null && isLength(value.length) && !isFunction(value);
                        }

                        /**
                         * This method is like `_.isArrayLike` except that it also checks if `value`
                         * is an object.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is an array-like object,
                         *  else `false`.
                         * @example
                         *
                         * _.isArrayLikeObject([1, 2, 3]);
                         * // => true
                         *
                         * _.isArrayLikeObject(document.body.children);
                         * // => true
                         *
                         * _.isArrayLikeObject('abc');
                         * // => false
                         *
                         * _.isArrayLikeObject(_.noop);
                         * // => false
                         */
                        function isArrayLikeObject(value) {
                            return isObjectLike(value) && isArrayLike(value);
                        }

                        /**
                         * Checks if `value` is classified as a boolean primitive or object.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
                         * @example
                         *
                         * _.isBoolean(false);
                         * // => true
                         *
                         * _.isBoolean(null);
                         * // => false
                         */
                        function isBoolean(value) {
                            return value === true || value === false ||
                                (isObjectLike(value) && baseGetTag(value) == boolTag);
                        }

                        /**
                         * Checks if `value` is a buffer.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.3.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
                         * @example
                         *
                         * _.isBuffer(new Buffer(2));
                         * // => true
                         *
                         * _.isBuffer(new Uint8Array(2));
                         * // => false
                         */
                        var isBuffer = nativeIsBuffer || stubFalse;

                        /**
                         * Checks if `value` is classified as a `Date` object.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
                         * @example
                         *
                         * _.isDate(new Date);
                         * // => true
                         *
                         * _.isDate('Mon April 23 2012');
                         * // => false
                         */
                        var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

                        /**
                         * Checks if `value` is likely a DOM element.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
                         * @example
                         *
                         * _.isElement(document.body);
                         * // => true
                         *
                         * _.isElement('<body>');
                         * // => false
                         */
                        function isElement(value) {
                            return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
                        }

                        /**
                         * Checks if `value` is an empty object, collection, map, or set.
                         *
                         * Objects are considered empty if they have no own enumerable string keyed
                         * properties.
                         *
                         * Array-like values such as `arguments` objects, arrays, buffers, strings, or
                         * jQuery-like collections are considered empty if they have a `length` of `0`.
                         * Similarly, maps and sets are considered empty if they have a `size` of `0`.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is empty, else `false`.
                         * @example
                         *
                         * _.isEmpty(null);
                         * // => true
                         *
                         * _.isEmpty(true);
                         * // => true
                         *
                         * _.isEmpty(1);
                         * // => true
                         *
                         * _.isEmpty([1, 2, 3]);
                         * // => false
                         *
                         * _.isEmpty({ 'a': 1 });
                         * // => false
                         */
                        function isEmpty(value) {
                            if (value == null) {
                                return true;
                            }
                            if (isArrayLike(value) &&
                                (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
                                isBuffer(value) || isTypedArray(value) || isArguments(value))) {
                                return !value.length;
                            }
                            var tag = getTag(value);
                            if (tag == mapTag || tag == setTag) {
                                return !value.size;
                            }
                            if (isPrototype(value)) {
                                return !baseKeys(value).length;
                            }
                            for (var key in value) {
                                if (hasOwnProperty.call(value, key)) {
                                    return false;
                                }
                            }
                            return true;
                        }

                        /**
                         * Performs a deep comparison between two values to determine if they are
                         * equivalent.
                         *
                         * **Note:** This method supports comparing arrays, array buffers, booleans,
                         * date objects, error objects, maps, numbers, `Object` objects, regexes,
                         * sets, strings, symbols, and typed arrays. `Object` objects are compared
                         * by their own, not inherited, enumerable properties. Functions and DOM
                         * nodes are compared by strict equality, i.e. `===`.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Lang
                         * @param {*} value The value to compare.
                         * @param {*} other The other value to compare.
                         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                         * @example
                         *
                         * var object = { 'a': 1 };
                         * var other = { 'a': 1 };
                         *
                         * _.isEqual(object, other);
                         * // => true
                         *
                         * object === other;
                         * // => false
                         */
                        function isEqual(value, other) {
                            return baseIsEqual(value, other);
                        }

                        /**
                         * This method is like `_.isEqual` except that it accepts `customizer` which
                         * is invoked to compare values. If `customizer` returns `undefined`, comparisons
                         * are handled by the method instead. The `customizer` is invoked with up to
                         * six arguments: (objValue, othValue [, index|key, object, other, stack]).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Lang
                         * @param {*} value The value to compare.
                         * @param {*} other The other value to compare.
                         * @param {Function} [customizer] The function to customize comparisons.
                         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                         * @example
                         *
                         * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
                         *
                         * function customizer(objValue, othValue) {
	     *   if (isGreeting(objValue) && isGreeting(othValue)) {
	     *     return true;
	     *   }
	     * }
                         *
                         * var array = ['hello', 'goodbye'];
                         * var other = ['hi', 'goodbye'];
                         *
                         * _.isEqualWith(array, other, customizer);
                         * // => true
                         */
                        function isEqualWith(value, other, customizer) {
                            customizer = typeof customizer == 'function' ? customizer : undefined;
                            var result = customizer ? customizer(value, other) : undefined;
                            return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
                        }

                        /**
                         * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
                         * `SyntaxError`, `TypeError`, or `URIError` object.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
                         * @example
                         *
                         * _.isError(new Error);
                         * // => true
                         *
                         * _.isError(Error);
                         * // => false
                         */
                        function isError(value) {
                            if (!isObjectLike(value)) {
                                return false;
                            }
                            var tag = baseGetTag(value);
                            return tag == errorTag || tag == domExcTag ||
                                (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
                        }

                        /**
                         * Checks if `value` is a finite primitive number.
                         *
                         * **Note:** This method is based on
                         * [`Number.isFinite`](https://mdn.io/Number/isFinite).
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
                         * @example
                         *
                         * _.isFinite(3);
                         * // => true
                         *
                         * _.isFinite(Number.MIN_VALUE);
                         * // => true
                         *
                         * _.isFinite(Infinity);
                         * // => false
                         *
                         * _.isFinite('3');
                         * // => false
                         */
                        function isFinite(value) {
                            return typeof value == 'number' && nativeIsFinite(value);
                        }

                        /**
                         * Checks if `value` is classified as a `Function` object.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a function, else `false`.
                         * @example
                         *
                         * _.isFunction(_);
                         * // => true
                         *
                         * _.isFunction(/abc/);
                         * // => false
                         */
                        function isFunction(value) {
                            if (!isObject(value)) {
                                return false;
                            }
                            // The use of `Object#toString` avoids issues with the `typeof` operator
                            // in Safari 9 which returns 'object' for typed arrays and other constructors.
                            var tag = baseGetTag(value);
                            return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
                        }

                        /**
                         * Checks if `value` is an integer.
                         *
                         * **Note:** This method is based on
                         * [`Number.isInteger`](https://mdn.io/Number/isInteger).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
                         * @example
                         *
                         * _.isInteger(3);
                         * // => true
                         *
                         * _.isInteger(Number.MIN_VALUE);
                         * // => false
                         *
                         * _.isInteger(Infinity);
                         * // => false
                         *
                         * _.isInteger('3');
                         * // => false
                         */
                        function isInteger(value) {
                            return typeof value == 'number' && value == toInteger(value);
                        }

                        /**
                         * Checks if `value` is a valid array-like length.
                         *
                         * **Note:** This method is loosely based on
                         * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
                         * @example
                         *
                         * _.isLength(3);
                         * // => true
                         *
                         * _.isLength(Number.MIN_VALUE);
                         * // => false
                         *
                         * _.isLength(Infinity);
                         * // => false
                         *
                         * _.isLength('3');
                         * // => false
                         */
                        function isLength(value) {
                            return typeof value == 'number' &&
                                value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
                        }

                        /**
                         * Checks if `value` is the
                         * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
                         * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is an object, else `false`.
                         * @example
                         *
                         * _.isObject({});
                         * // => true
                         *
                         * _.isObject([1, 2, 3]);
                         * // => true
                         *
                         * _.isObject(_.noop);
                         * // => true
                         *
                         * _.isObject(null);
                         * // => false
                         */
                        function isObject(value) {
                            var type = typeof value;
                            return value != null && (type == 'object' || type == 'function');
                        }

                        /**
                         * Checks if `value` is object-like. A value is object-like if it's not `null`
                         * and has a `typeof` result of "object".
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
                         * @example
                         *
                         * _.isObjectLike({});
                         * // => true
                         *
                         * _.isObjectLike([1, 2, 3]);
                         * // => true
                         *
                         * _.isObjectLike(_.noop);
                         * // => false
                         *
                         * _.isObjectLike(null);
                         * // => false
                         */
                        function isObjectLike(value) {
                            return value != null && typeof value == 'object';
                        }

                        /**
                         * Checks if `value` is classified as a `Map` object.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.3.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a map, else `false`.
                         * @example
                         *
                         * _.isMap(new Map);
                         * // => true
                         *
                         * _.isMap(new WeakMap);
                         * // => false
                         */
                        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

                        /**
                         * Performs a partial deep comparison between `object` and `source` to
                         * determine if `object` contains equivalent property values.
                         *
                         * **Note:** This method is equivalent to `_.matches` when `source` is
                         * partially applied.
                         *
                         * Partial comparisons will match empty array and empty object `source`
                         * values against any array or object value, respectively. See `_.isEqual`
                         * for a list of supported value comparisons.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Lang
                         * @param {Object} object The object to inspect.
                         * @param {Object} source The object of property values to match.
                         * @returns {boolean} Returns `true` if `object` is a match, else `false`.
                         * @example
                         *
                         * var object = { 'a': 1, 'b': 2 };
                         *
                         * _.isMatch(object, { 'b': 2 });
                         * // => true
                         *
                         * _.isMatch(object, { 'b': 1 });
                         * // => false
                         */
                        function isMatch(object, source) {
                            return object === source || baseIsMatch(object, source, getMatchData(source));
                        }

                        /**
                         * This method is like `_.isMatch` except that it accepts `customizer` which
                         * is invoked to compare values. If `customizer` returns `undefined`, comparisons
                         * are handled by the method instead. The `customizer` is invoked with five
                         * arguments: (objValue, srcValue, index|key, object, source).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Lang
                         * @param {Object} object The object to inspect.
                         * @param {Object} source The object of property values to match.
                         * @param {Function} [customizer] The function to customize comparisons.
                         * @returns {boolean} Returns `true` if `object` is a match, else `false`.
                         * @example
                         *
                         * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
                         *
                         * function customizer(objValue, srcValue) {
	     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
	     *     return true;
	     *   }
	     * }
                         *
                         * var object = { 'greeting': 'hello' };
                         * var source = { 'greeting': 'hi' };
                         *
                         * _.isMatchWith(object, source, customizer);
                         * // => true
                         */
                        function isMatchWith(object, source, customizer) {
                            customizer = typeof customizer == 'function' ? customizer : undefined;
                            return baseIsMatch(object, source, getMatchData(source), customizer);
                        }

                        /**
                         * Checks if `value` is `NaN`.
                         *
                         * **Note:** This method is based on
                         * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
                         * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
                         * `undefined` and other non-number values.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
                         * @example
                         *
                         * _.isNaN(NaN);
                         * // => true
                         *
                         * _.isNaN(new Number(NaN));
                         * // => true
                         *
                         * isNaN(undefined);
                         * // => true
                         *
                         * _.isNaN(undefined);
                         * // => false
                         */
                        function isNaN(value) {
                            // An `NaN` primitive is the only value that is not equal to itself.
                            // Perform the `toStringTag` check first to avoid errors with some
                            // ActiveX objects in IE.
                            return isNumber(value) && value != +value;
                        }

                        /**
                         * Checks if `value` is a pristine native function.
                         *
                         * **Note:** This method can't reliably detect native functions in the presence
                         * of the core-js package because core-js circumvents this kind of detection.
                         * Despite multiple requests, the core-js maintainer has made it clear: any
                         * attempt to fix the detection will be obstructed. As a result, we're left
                         * with little choice but to throw an error. Unfortunately, this also affects
                         * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
                         * which rely on core-js.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a native function,
                         *  else `false`.
                         * @example
                         *
                         * _.isNative(Array.prototype.push);
                         * // => true
                         *
                         * _.isNative(_);
                         * // => false
                         */
                        function isNative(value) {
                            if (isMaskable(value)) {
                                throw new Error(CORE_ERROR_TEXT);
                            }
                            return baseIsNative(value);
                        }

                        /**
                         * Checks if `value` is `null`.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
                         * @example
                         *
                         * _.isNull(null);
                         * // => true
                         *
                         * _.isNull(void 0);
                         * // => false
                         */
                        function isNull(value) {
                            return value === null;
                        }

                        /**
                         * Checks if `value` is `null` or `undefined`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
                         * @example
                         *
                         * _.isNil(null);
                         * // => true
                         *
                         * _.isNil(void 0);
                         * // => true
                         *
                         * _.isNil(NaN);
                         * // => false
                         */
                        function isNil(value) {
                            return value == null;
                        }

                        /**
                         * Checks if `value` is classified as a `Number` primitive or object.
                         *
                         * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
                         * classified as numbers, use the `_.isFinite` method.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a number, else `false`.
                         * @example
                         *
                         * _.isNumber(3);
                         * // => true
                         *
                         * _.isNumber(Number.MIN_VALUE);
                         * // => true
                         *
                         * _.isNumber(Infinity);
                         * // => true
                         *
                         * _.isNumber('3');
                         * // => false
                         */
                        function isNumber(value) {
                            return typeof value == 'number' ||
                                (isObjectLike(value) && baseGetTag(value) == numberTag);
                        }

                        /**
                         * Checks if `value` is a plain object, that is, an object created by the
                         * `Object` constructor or one with a `[[Prototype]]` of `null`.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.8.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
                         * @example
                         *
                         * function Foo() {
	     *   this.a = 1;
	     * }
                         *
                         * _.isPlainObject(new Foo);
                         * // => false
                         *
                         * _.isPlainObject([1, 2, 3]);
                         * // => false
                         *
                         * _.isPlainObject({ 'x': 0, 'y': 0 });
                         * // => true
                         *
                         * _.isPlainObject(Object.create(null));
                         * // => true
                         */
                        function isPlainObject(value) {
                            if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
                                return false;
                            }
                            var proto = getPrototype(value);
                            if (proto === null) {
                                return true;
                            }
                            var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
                            return typeof Ctor == 'function' && Ctor instanceof Ctor &&
                                funcToString.call(Ctor) == objectCtorString;
                        }

                        /**
                         * Checks if `value` is classified as a `RegExp` object.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
                         * @example
                         *
                         * _.isRegExp(/abc/);
                         * // => true
                         *
                         * _.isRegExp('/abc/');
                         * // => false
                         */
                        var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

                        /**
                         * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
                         * double precision number which isn't the result of a rounded unsafe integer.
                         *
                         * **Note:** This method is based on
                         * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
                         * @example
                         *
                         * _.isSafeInteger(3);
                         * // => true
                         *
                         * _.isSafeInteger(Number.MIN_VALUE);
                         * // => false
                         *
                         * _.isSafeInteger(Infinity);
                         * // => false
                         *
                         * _.isSafeInteger('3');
                         * // => false
                         */
                        function isSafeInteger(value) {
                            return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
                        }

                        /**
                         * Checks if `value` is classified as a `Set` object.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.3.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a set, else `false`.
                         * @example
                         *
                         * _.isSet(new Set);
                         * // => true
                         *
                         * _.isSet(new WeakSet);
                         * // => false
                         */
                        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

                        /**
                         * Checks if `value` is classified as a `String` primitive or object.
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a string, else `false`.
                         * @example
                         *
                         * _.isString('abc');
                         * // => true
                         *
                         * _.isString(1);
                         * // => false
                         */
                        function isString(value) {
                            return typeof value == 'string' ||
                                (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
                        }

                        /**
                         * Checks if `value` is classified as a `Symbol` primitive or object.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
                         * @example
                         *
                         * _.isSymbol(Symbol.iterator);
                         * // => true
                         *
                         * _.isSymbol('abc');
                         * // => false
                         */
                        function isSymbol(value) {
                            return typeof value == 'symbol' ||
                                (isObjectLike(value) && baseGetTag(value) == symbolTag);
                        }

                        /**
                         * Checks if `value` is classified as a typed array.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
                         * @example
                         *
                         * _.isTypedArray(new Uint8Array);
                         * // => true
                         *
                         * _.isTypedArray([]);
                         * // => false
                         */
                        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

                        /**
                         * Checks if `value` is `undefined`.
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
                         * @example
                         *
                         * _.isUndefined(void 0);
                         * // => true
                         *
                         * _.isUndefined(null);
                         * // => false
                         */
                        function isUndefined(value) {
                            return value === undefined;
                        }

                        /**
                         * Checks if `value` is classified as a `WeakMap` object.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.3.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
                         * @example
                         *
                         * _.isWeakMap(new WeakMap);
                         * // => true
                         *
                         * _.isWeakMap(new Map);
                         * // => false
                         */
                        function isWeakMap(value) {
                            return isObjectLike(value) && getTag(value) == weakMapTag;
                        }

                        /**
                         * Checks if `value` is classified as a `WeakSet` object.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.3.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
                         * @example
                         *
                         * _.isWeakSet(new WeakSet);
                         * // => true
                         *
                         * _.isWeakSet(new Set);
                         * // => false
                         */
                        function isWeakSet(value) {
                            return isObjectLike(value) && baseGetTag(value) == weakSetTag;
                        }

                        /**
                         * Checks if `value` is less than `other`.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.9.0
                         * @category Lang
                         * @param {*} value The value to compare.
                         * @param {*} other The other value to compare.
                         * @returns {boolean} Returns `true` if `value` is less than `other`,
                         *  else `false`.
                         * @see _.gt
                         * @example
                         *
                         * _.lt(1, 3);
                         * // => true
                         *
                         * _.lt(3, 3);
                         * // => false
                         *
                         * _.lt(3, 1);
                         * // => false
                         */
                        var lt = createRelationalOperation(baseLt);

                        /**
                         * Checks if `value` is less than or equal to `other`.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.9.0
                         * @category Lang
                         * @param {*} value The value to compare.
                         * @param {*} other The other value to compare.
                         * @returns {boolean} Returns `true` if `value` is less than or equal to
                         *  `other`, else `false`.
                         * @see _.gte
                         * @example
                         *
                         * _.lte(1, 3);
                         * // => true
                         *
                         * _.lte(3, 3);
                         * // => true
                         *
                         * _.lte(3, 1);
                         * // => false
                         */
                        var lte = createRelationalOperation(function(value, other) {
                            return value <= other;
                        });

                        /**
                         * Converts `value` to an array.
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category Lang
                         * @param {*} value The value to convert.
                         * @returns {Array} Returns the converted array.
                         * @example
                         *
                         * _.toArray({ 'a': 1, 'b': 2 });
                         * // => [1, 2]
                         *
                         * _.toArray('abc');
                         * // => ['a', 'b', 'c']
                         *
                         * _.toArray(1);
                         * // => []
                         *
                         * _.toArray(null);
                         * // => []
                         */
                        function toArray(value) {
                            if (!value) {
                                return [];
                            }
                            if (isArrayLike(value)) {
                                return isString(value) ? stringToArray(value) : copyArray(value);
                            }
                            if (symIterator && value[symIterator]) {
                                return iteratorToArray(value[symIterator]());
                            }
                            var tag = getTag(value),
                                func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

                            return func(value);
                        }

                        /**
                         * Converts `value` to a finite number.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.12.0
                         * @category Lang
                         * @param {*} value The value to convert.
                         * @returns {number} Returns the converted number.
                         * @example
                         *
                         * _.toFinite(3.2);
                         * // => 3.2
                         *
                         * _.toFinite(Number.MIN_VALUE);
                         * // => 5e-324
                         *
                         * _.toFinite(Infinity);
                         * // => 1.7976931348623157e+308
                         *
                         * _.toFinite('3.2');
                         * // => 3.2
                         */
                        function toFinite(value) {
                            if (!value) {
                                return value === 0 ? value : 0;
                            }
                            value = toNumber(value);
                            if (value === INFINITY || value === -INFINITY) {
                                var sign = (value < 0 ? -1 : 1);
                                return sign * MAX_INTEGER;
                            }
                            return value === value ? value : 0;
                        }

                        /**
                         * Converts `value` to an integer.
                         *
                         * **Note:** This method is loosely based on
                         * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Lang
                         * @param {*} value The value to convert.
                         * @returns {number} Returns the converted integer.
                         * @example
                         *
                         * _.toInteger(3.2);
                         * // => 3
                         *
                         * _.toInteger(Number.MIN_VALUE);
                         * // => 0
                         *
                         * _.toInteger(Infinity);
                         * // => 1.7976931348623157e+308
                         *
                         * _.toInteger('3.2');
                         * // => 3
                         */
                        function toInteger(value) {
                            var result = toFinite(value),
                                remainder = result % 1;

                            return result === result ? (remainder ? result - remainder : result) : 0;
                        }

                        /**
                         * Converts `value` to an integer suitable for use as the length of an
                         * array-like object.
                         *
                         * **Note:** This method is based on
                         * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Lang
                         * @param {*} value The value to convert.
                         * @returns {number} Returns the converted integer.
                         * @example
                         *
                         * _.toLength(3.2);
                         * // => 3
                         *
                         * _.toLength(Number.MIN_VALUE);
                         * // => 0
                         *
                         * _.toLength(Infinity);
                         * // => 4294967295
                         *
                         * _.toLength('3.2');
                         * // => 3
                         */
                        function toLength(value) {
                            return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
                        }

                        /**
                         * Converts `value` to a number.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Lang
                         * @param {*} value The value to process.
                         * @returns {number} Returns the number.
                         * @example
                         *
                         * _.toNumber(3.2);
                         * // => 3.2
                         *
                         * _.toNumber(Number.MIN_VALUE);
                         * // => 5e-324
                         *
                         * _.toNumber(Infinity);
                         * // => Infinity
                         *
                         * _.toNumber('3.2');
                         * // => 3.2
                         */
                        function toNumber(value) {
                            if (typeof value == 'number') {
                                return value;
                            }
                            if (isSymbol(value)) {
                                return NAN;
                            }
                            if (isObject(value)) {
                                var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
                                value = isObject(other) ? (other + '') : other;
                            }
                            if (typeof value != 'string') {
                                return value === 0 ? value : +value;
                            }
                            value = value.replace(reTrim, '');
                            var isBinary = reIsBinary.test(value);
                            return (isBinary || reIsOctal.test(value))
                                ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
                                : (reIsBadHex.test(value) ? NAN : +value);
                        }

                        /**
                         * Converts `value` to a plain object flattening inherited enumerable string
                         * keyed properties of `value` to own properties of the plain object.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Lang
                         * @param {*} value The value to convert.
                         * @returns {Object} Returns the converted plain object.
                         * @example
                         *
                         * function Foo() {
	     *   this.b = 2;
	     * }
                         *
                         * Foo.prototype.c = 3;
                         *
                         * _.assign({ 'a': 1 }, new Foo);
                         * // => { 'a': 1, 'b': 2 }
                         *
                         * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
                         * // => { 'a': 1, 'b': 2, 'c': 3 }
                         */
                        function toPlainObject(value) {
                            return copyObject(value, keysIn(value));
                        }

                        /**
                         * Converts `value` to a safe integer. A safe integer can be compared and
                         * represented correctly.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Lang
                         * @param {*} value The value to convert.
                         * @returns {number} Returns the converted integer.
                         * @example
                         *
                         * _.toSafeInteger(3.2);
                         * // => 3
                         *
                         * _.toSafeInteger(Number.MIN_VALUE);
                         * // => 0
                         *
                         * _.toSafeInteger(Infinity);
                         * // => 9007199254740991
                         *
                         * _.toSafeInteger('3.2');
                         * // => 3
                         */
                        function toSafeInteger(value) {
                            return value
                                ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
                                : (value === 0 ? value : 0);
                        }

                        /**
                         * Converts `value` to a string. An empty string is returned for `null`
                         * and `undefined` values. The sign of `-0` is preserved.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Lang
                         * @param {*} value The value to convert.
                         * @returns {string} Returns the converted string.
                         * @example
                         *
                         * _.toString(null);
                         * // => ''
                         *
                         * _.toString(-0);
                         * // => '-0'
                         *
                         * _.toString([1, 2, 3]);
                         * // => '1,2,3'
                         */
                        function toString(value) {
                            return value == null ? '' : baseToString(value);
                        }

                        /*------------------------------------------------------------------------*/

                        /**
                         * Assigns own enumerable string keyed properties of source objects to the
                         * destination object. Source objects are applied from left to right.
                         * Subsequent sources overwrite property assignments of previous sources.
                         *
                         * **Note:** This method mutates `object` and is loosely based on
                         * [`Object.assign`](https://mdn.io/Object/assign).
                         *
                         * @static
                         * @memberOf _
                         * @since 0.10.0
                         * @category Object
                         * @param {Object} object The destination object.
                         * @param {...Object} [sources] The source objects.
                         * @returns {Object} Returns `object`.
                         * @see _.assignIn
                         * @example
                         *
                         * function Foo() {
	     *   this.a = 1;
	     * }
                         *
                         * function Bar() {
	     *   this.c = 3;
	     * }
                         *
                         * Foo.prototype.b = 2;
                         * Bar.prototype.d = 4;
                         *
                         * _.assign({ 'a': 0 }, new Foo, new Bar);
                         * // => { 'a': 1, 'c': 3 }
                         */
                        var assign = createAssigner(function(object, source) {
                            if (isPrototype(source) || isArrayLike(source)) {
                                copyObject(source, keys(source), object);
                                return;
                            }
                            for (var key in source) {
                                if (hasOwnProperty.call(source, key)) {
                                    assignValue(object, key, source[key]);
                                }
                            }
                        });

                        /**
                         * This method is like `_.assign` except that it iterates over own and
                         * inherited source properties.
                         *
                         * **Note:** This method mutates `object`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @alias extend
                         * @category Object
                         * @param {Object} object The destination object.
                         * @param {...Object} [sources] The source objects.
                         * @returns {Object} Returns `object`.
                         * @see _.assign
                         * @example
                         *
                         * function Foo() {
	     *   this.a = 1;
	     * }
                         *
                         * function Bar() {
	     *   this.c = 3;
	     * }
                         *
                         * Foo.prototype.b = 2;
                         * Bar.prototype.d = 4;
                         *
                         * _.assignIn({ 'a': 0 }, new Foo, new Bar);
                         * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
                         */
                        var assignIn = createAssigner(function(object, source) {
                            copyObject(source, keysIn(source), object);
                        });

                        /**
                         * This method is like `_.assignIn` except that it accepts `customizer`
                         * which is invoked to produce the assigned values. If `customizer` returns
                         * `undefined`, assignment is handled by the method instead. The `customizer`
                         * is invoked with five arguments: (objValue, srcValue, key, object, source).
                         *
                         * **Note:** This method mutates `object`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @alias extendWith
                         * @category Object
                         * @param {Object} object The destination object.
                         * @param {...Object} sources The source objects.
                         * @param {Function} [customizer] The function to customize assigned values.
                         * @returns {Object} Returns `object`.
                         * @see _.assignWith
                         * @example
                         *
                         * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
                         *
                         * var defaults = _.partialRight(_.assignInWith, customizer);
                         *
                         * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
                         * // => { 'a': 1, 'b': 2 }
                         */
                        var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
                            copyObject(source, keysIn(source), object, customizer);
                        });

                        /**
                         * This method is like `_.assign` except that it accepts `customizer`
                         * which is invoked to produce the assigned values. If `customizer` returns
                         * `undefined`, assignment is handled by the method instead. The `customizer`
                         * is invoked with five arguments: (objValue, srcValue, key, object, source).
                         *
                         * **Note:** This method mutates `object`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Object
                         * @param {Object} object The destination object.
                         * @param {...Object} sources The source objects.
                         * @param {Function} [customizer] The function to customize assigned values.
                         * @returns {Object} Returns `object`.
                         * @see _.assignInWith
                         * @example
                         *
                         * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
                         *
                         * var defaults = _.partialRight(_.assignWith, customizer);
                         *
                         * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
                         * // => { 'a': 1, 'b': 2 }
                         */
                        var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
                            copyObject(source, keys(source), object, customizer);
                        });

                        /**
                         * Creates an array of values corresponding to `paths` of `object`.
                         *
                         * @static
                         * @memberOf _
                         * @since 1.0.0
                         * @category Object
                         * @param {Object} object The object to iterate over.
                         * @param {...(string|string[])} [paths] The property paths to pick.
                         * @returns {Array} Returns the picked values.
                         * @example
                         *
                         * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
                         *
                         * _.at(object, ['a[0].b.c', 'a[1]']);
                         * // => [3, 4]
                         */
                        var at = flatRest(baseAt);

                        /**
                         * Creates an object that inherits from the `prototype` object. If a
                         * `properties` object is given, its own enumerable string keyed properties
                         * are assigned to the created object.
                         *
                         * @static
                         * @memberOf _
                         * @since 2.3.0
                         * @category Object
                         * @param {Object} prototype The object to inherit from.
                         * @param {Object} [properties] The properties to assign to the object.
                         * @returns {Object} Returns the new object.
                         * @example
                         *
                         * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
                         *
                         * function Circle() {
	     *   Shape.call(this);
	     * }
                         *
                         * Circle.prototype = _.create(Shape.prototype, {
	     *   'constructor': Circle
	     * });
                         *
                         * var circle = new Circle;
                         * circle instanceof Circle;
                         * // => true
                         *
                         * circle instanceof Shape;
                         * // => true
                         */
                        function create(prototype, properties) {
                            var result = baseCreate(prototype);
                            return properties == null ? result : baseAssign(result, properties);
                        }

                        /**
                         * Assigns own and inherited enumerable string keyed properties of source
                         * objects to the destination object for all destination properties that
                         * resolve to `undefined`. Source objects are applied from left to right.
                         * Once a property is set, additional values of the same property are ignored.
                         *
                         * **Note:** This method mutates `object`.
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category Object
                         * @param {Object} object The destination object.
                         * @param {...Object} [sources] The source objects.
                         * @returns {Object} Returns `object`.
                         * @see _.defaultsDeep
                         * @example
                         *
                         * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
                         * // => { 'a': 1, 'b': 2 }
                         */
                        var defaults = baseRest(function(args) {
                            args.push(undefined, customDefaultsAssignIn);
                            return apply(assignInWith, undefined, args);
                        });

                        /**
                         * This method is like `_.defaults` except that it recursively assigns
                         * default properties.
                         *
                         * **Note:** This method mutates `object`.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.10.0
                         * @category Object
                         * @param {Object} object The destination object.
                         * @param {...Object} [sources] The source objects.
                         * @returns {Object} Returns `object`.
                         * @see _.defaults
                         * @example
                         *
                         * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
                         * // => { 'a': { 'b': 2, 'c': 3 } }
                         */
                        var defaultsDeep = baseRest(function(args) {
                            args.push(undefined, customDefaultsMerge);
                            return apply(mergeWith, undefined, args);
                        });

                        /**
                         * This method is like `_.find` except that it returns the key of the first
                         * element `predicate` returns truthy for instead of the element itself.
                         *
                         * @static
                         * @memberOf _
                         * @since 1.1.0
                         * @category Object
                         * @param {Object} object The object to inspect.
                         * @param {Function} [predicate=_.identity] The function invoked per iteration.
                         * @returns {string|undefined} Returns the key of the matched element,
                         *  else `undefined`.
                         * @example
                         *
                         * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
                         *
                         * _.findKey(users, function(o) { return o.age < 40; });
                         * // => 'barney' (iteration order is not guaranteed)
                         *
                         * // The `_.matches` iteratee shorthand.
                         * _.findKey(users, { 'age': 1, 'active': true });
                         * // => 'pebbles'
                         *
                         * // The `_.matchesProperty` iteratee shorthand.
                         * _.findKey(users, ['active', false]);
                         * // => 'fred'
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.findKey(users, 'active');
                         * // => 'barney'
                         */
                        function findKey(object, predicate) {
                            return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
                        }

                        /**
                         * This method is like `_.findKey` except that it iterates over elements of
                         * a collection in the opposite order.
                         *
                         * @static
                         * @memberOf _
                         * @since 2.0.0
                         * @category Object
                         * @param {Object} object The object to inspect.
                         * @param {Function} [predicate=_.identity] The function invoked per iteration.
                         * @returns {string|undefined} Returns the key of the matched element,
                         *  else `undefined`.
                         * @example
                         *
                         * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
                         *
                         * _.findLastKey(users, function(o) { return o.age < 40; });
                         * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
                         *
                         * // The `_.matches` iteratee shorthand.
                         * _.findLastKey(users, { 'age': 36, 'active': true });
                         * // => 'barney'
                         *
                         * // The `_.matchesProperty` iteratee shorthand.
                         * _.findLastKey(users, ['active', false]);
                         * // => 'fred'
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.findLastKey(users, 'active');
                         * // => 'pebbles'
                         */
                        function findLastKey(object, predicate) {
                            return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
                        }

                        /**
                         * Iterates over own and inherited enumerable string keyed properties of an
                         * object and invokes `iteratee` for each property. The iteratee is invoked
                         * with three arguments: (value, key, object). Iteratee functions may exit
                         * iteration early by explicitly returning `false`.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.3.0
                         * @category Object
                         * @param {Object} object The object to iterate over.
                         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                         * @returns {Object} Returns `object`.
                         * @see _.forInRight
                         * @example
                         *
                         * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
                         *
                         * Foo.prototype.c = 3;
                         *
                         * _.forIn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
                         * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
                         */
                        function forIn(object, iteratee) {
                            return object == null
                                ? object
                                : baseFor(object, getIteratee(iteratee, 3), keysIn);
                        }

                        /**
                         * This method is like `_.forIn` except that it iterates over properties of
                         * `object` in the opposite order.
                         *
                         * @static
                         * @memberOf _
                         * @since 2.0.0
                         * @category Object
                         * @param {Object} object The object to iterate over.
                         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                         * @returns {Object} Returns `object`.
                         * @see _.forIn
                         * @example
                         *
                         * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
                         *
                         * Foo.prototype.c = 3;
                         *
                         * _.forInRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
                         * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
                         */
                        function forInRight(object, iteratee) {
                            return object == null
                                ? object
                                : baseForRight(object, getIteratee(iteratee, 3), keysIn);
                        }

                        /**
                         * Iterates over own enumerable string keyed properties of an object and
                         * invokes `iteratee` for each property. The iteratee is invoked with three
                         * arguments: (value, key, object). Iteratee functions may exit iteration
                         * early by explicitly returning `false`.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.3.0
                         * @category Object
                         * @param {Object} object The object to iterate over.
                         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                         * @returns {Object} Returns `object`.
                         * @see _.forOwnRight
                         * @example
                         *
                         * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
                         *
                         * Foo.prototype.c = 3;
                         *
                         * _.forOwn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
                         * // => Logs 'a' then 'b' (iteration order is not guaranteed).
                         */
                        function forOwn(object, iteratee) {
                            return object && baseForOwn(object, getIteratee(iteratee, 3));
                        }

                        /**
                         * This method is like `_.forOwn` except that it iterates over properties of
                         * `object` in the opposite order.
                         *
                         * @static
                         * @memberOf _
                         * @since 2.0.0
                         * @category Object
                         * @param {Object} object The object to iterate over.
                         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                         * @returns {Object} Returns `object`.
                         * @see _.forOwn
                         * @example
                         *
                         * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
                         *
                         * Foo.prototype.c = 3;
                         *
                         * _.forOwnRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
                         * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
                         */
                        function forOwnRight(object, iteratee) {
                            return object && baseForOwnRight(object, getIteratee(iteratee, 3));
                        }

                        /**
                         * Creates an array of function property names from own enumerable properties
                         * of `object`.
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category Object
                         * @param {Object} object The object to inspect.
                         * @returns {Array} Returns the function names.
                         * @see _.functionsIn
                         * @example
                         *
                         * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
                         *
                         * Foo.prototype.c = _.constant('c');
                         *
                         * _.functions(new Foo);
                         * // => ['a', 'b']
                         */
                        function functions(object) {
                            return object == null ? [] : baseFunctions(object, keys(object));
                        }

                        /**
                         * Creates an array of function property names from own and inherited
                         * enumerable properties of `object`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Object
                         * @param {Object} object The object to inspect.
                         * @returns {Array} Returns the function names.
                         * @see _.functions
                         * @example
                         *
                         * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
                         *
                         * Foo.prototype.c = _.constant('c');
                         *
                         * _.functionsIn(new Foo);
                         * // => ['a', 'b', 'c']
                         */
                        function functionsIn(object) {
                            return object == null ? [] : baseFunctions(object, keysIn(object));
                        }

                        /**
                         * Gets the value at `path` of `object`. If the resolved value is
                         * `undefined`, the `defaultValue` is returned in its place.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.7.0
                         * @category Object
                         * @param {Object} object The object to query.
                         * @param {Array|string} path The path of the property to get.
                         * @param {*} [defaultValue] The value returned for `undefined` resolved values.
                         * @returns {*} Returns the resolved value.
                         * @example
                         *
                         * var object = { 'a': [{ 'b': { 'c': 3 } }] };
                         *
                         * _.get(object, 'a[0].b.c');
                         * // => 3
                         *
                         * _.get(object, ['a', '0', 'b', 'c']);
                         * // => 3
                         *
                         * _.get(object, 'a.b.c', 'default');
                         * // => 'default'
                         */
                        function get(object, path, defaultValue) {
                            var result = object == null ? undefined : baseGet(object, path);
                            return result === undefined ? defaultValue : result;
                        }

                        /**
                         * Checks if `path` is a direct property of `object`.
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category Object
                         * @param {Object} object The object to query.
                         * @param {Array|string} path The path to check.
                         * @returns {boolean} Returns `true` if `path` exists, else `false`.
                         * @example
                         *
                         * var object = { 'a': { 'b': 2 } };
                         * var other = _.create({ 'a': _.create({ 'b': 2 }) });
                         *
                         * _.has(object, 'a');
                         * // => true
                         *
                         * _.has(object, 'a.b');
                         * // => true
                         *
                         * _.has(object, ['a', 'b']);
                         * // => true
                         *
                         * _.has(other, 'a');
                         * // => false
                         */
                        function has(object, path) {
                            return object != null && hasPath(object, path, baseHas);
                        }

                        /**
                         * Checks if `path` is a direct or inherited property of `object`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Object
                         * @param {Object} object The object to query.
                         * @param {Array|string} path The path to check.
                         * @returns {boolean} Returns `true` if `path` exists, else `false`.
                         * @example
                         *
                         * var object = _.create({ 'a': _.create({ 'b': 2 }) });
                         *
                         * _.hasIn(object, 'a');
                         * // => true
                         *
                         * _.hasIn(object, 'a.b');
                         * // => true
                         *
                         * _.hasIn(object, ['a', 'b']);
                         * // => true
                         *
                         * _.hasIn(object, 'b');
                         * // => false
                         */
                        function hasIn(object, path) {
                            return object != null && hasPath(object, path, baseHasIn);
                        }

                        /**
                         * Creates an object composed of the inverted keys and values of `object`.
                         * If `object` contains duplicate values, subsequent values overwrite
                         * property assignments of previous values.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.7.0
                         * @category Object
                         * @param {Object} object The object to invert.
                         * @returns {Object} Returns the new inverted object.
                         * @example
                         *
                         * var object = { 'a': 1, 'b': 2, 'c': 1 };
                         *
                         * _.invert(object);
                         * // => { '1': 'c', '2': 'b' }
                         */
                        var invert = createInverter(function(result, value, key) {
                            result[value] = key;
                        }, constant(identity));

                        /**
                         * This method is like `_.invert` except that the inverted object is generated
                         * from the results of running each element of `object` thru `iteratee`. The
                         * corresponding inverted value of each inverted key is an array of keys
                         * responsible for generating the inverted value. The iteratee is invoked
                         * with one argument: (value).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.1.0
                         * @category Object
                         * @param {Object} object The object to invert.
                         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                         * @returns {Object} Returns the new inverted object.
                         * @example
                         *
                         * var object = { 'a': 1, 'b': 2, 'c': 1 };
                         *
                         * _.invertBy(object);
                         * // => { '1': ['a', 'c'], '2': ['b'] }
                         *
                         * _.invertBy(object, function(value) {
	     *   return 'group' + value;
	     * });
                         * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
                         */
                        var invertBy = createInverter(function(result, value, key) {
                            if (hasOwnProperty.call(result, value)) {
                                result[value].push(key);
                            } else {
                                result[value] = [key];
                            }
                        }, getIteratee);

                        /**
                         * Invokes the method at `path` of `object`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Object
                         * @param {Object} object The object to query.
                         * @param {Array|string} path The path of the method to invoke.
                         * @param {...*} [args] The arguments to invoke the method with.
                         * @returns {*} Returns the result of the invoked method.
                         * @example
                         *
                         * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
                         *
                         * _.invoke(object, 'a[0].b.c.slice', 1, 3);
                         * // => [2, 3]
                         */
                        var invoke = baseRest(baseInvoke);

                        /**
                         * Creates an array of the own enumerable property names of `object`.
                         *
                         * **Note:** Non-object values are coerced to objects. See the
                         * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
                         * for more details.
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category Object
                         * @param {Object} object The object to query.
                         * @returns {Array} Returns the array of property names.
                         * @example
                         *
                         * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
                         *
                         * Foo.prototype.c = 3;
                         *
                         * _.keys(new Foo);
                         * // => ['a', 'b'] (iteration order is not guaranteed)
                         *
                         * _.keys('hi');
                         * // => ['0', '1']
                         */
                        function keys(object) {
                            return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
                        }

                        /**
                         * Creates an array of the own and inherited enumerable property names of `object`.
                         *
                         * **Note:** Non-object values are coerced to objects.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Object
                         * @param {Object} object The object to query.
                         * @returns {Array} Returns the array of property names.
                         * @example
                         *
                         * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
                         *
                         * Foo.prototype.c = 3;
                         *
                         * _.keysIn(new Foo);
                         * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
                         */
                        function keysIn(object) {
                            return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
                        }

                        /**
                         * The opposite of `_.mapValues`; this method creates an object with the
                         * same values as `object` and keys generated by running each own enumerable
                         * string keyed property of `object` thru `iteratee`. The iteratee is invoked
                         * with three arguments: (value, key, object).
                         *
                         * @static
                         * @memberOf _
                         * @since 3.8.0
                         * @category Object
                         * @param {Object} object The object to iterate over.
                         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                         * @returns {Object} Returns the new mapped object.
                         * @see _.mapValues
                         * @example
                         *
                         * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   return key + value;
	     * });
                         * // => { 'a1': 1, 'b2': 2 }
                         */
                        function mapKeys(object, iteratee) {
                            var result = {};
                            iteratee = getIteratee(iteratee, 3);

                            baseForOwn(object, function(value, key, object) {
                                baseAssignValue(result, iteratee(value, key, object), value);
                            });
                            return result;
                        }

                        /**
                         * Creates an object with the same keys as `object` and values generated
                         * by running each own enumerable string keyed property of `object` thru
                         * `iteratee`. The iteratee is invoked with three arguments:
                         * (value, key, object).
                         *
                         * @static
                         * @memberOf _
                         * @since 2.4.0
                         * @category Object
                         * @param {Object} object The object to iterate over.
                         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                         * @returns {Object} Returns the new mapped object.
                         * @see _.mapKeys
                         * @example
                         *
                         * var users = {
	     *   'fred':    { 'user': 'fred',    'age': 40 },
	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	     * };
                         *
                         * _.mapValues(users, function(o) { return o.age; });
                         * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.mapValues(users, 'age');
                         * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
                         */
                        function mapValues(object, iteratee) {
                            var result = {};
                            iteratee = getIteratee(iteratee, 3);

                            baseForOwn(object, function(value, key, object) {
                                baseAssignValue(result, key, iteratee(value, key, object));
                            });
                            return result;
                        }

                        /**
                         * This method is like `_.assign` except that it recursively merges own and
                         * inherited enumerable string keyed properties of source objects into the
                         * destination object. Source properties that resolve to `undefined` are
                         * skipped if a destination value exists. Array and plain object properties
                         * are merged recursively. Other objects and value types are overridden by
                         * assignment. Source objects are applied from left to right. Subsequent
                         * sources overwrite property assignments of previous sources.
                         *
                         * **Note:** This method mutates `object`.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.5.0
                         * @category Object
                         * @param {Object} object The destination object.
                         * @param {...Object} [sources] The source objects.
                         * @returns {Object} Returns `object`.
                         * @example
                         *
                         * var object = {
	     *   'a': [{ 'b': 2 }, { 'd': 4 }]
	     * };
                         *
                         * var other = {
	     *   'a': [{ 'c': 3 }, { 'e': 5 }]
	     * };
                         *
                         * _.merge(object, other);
                         * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
                         */
                        var merge = createAssigner(function(object, source, srcIndex) {
                            baseMerge(object, source, srcIndex);
                        });

                        /**
                         * This method is like `_.merge` except that it accepts `customizer` which
                         * is invoked to produce the merged values of the destination and source
                         * properties. If `customizer` returns `undefined`, merging is handled by the
                         * method instead. The `customizer` is invoked with six arguments:
                         * (objValue, srcValue, key, object, source, stack).
                         *
                         * **Note:** This method mutates `object`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Object
                         * @param {Object} object The destination object.
                         * @param {...Object} sources The source objects.
                         * @param {Function} customizer The function to customize assigned values.
                         * @returns {Object} Returns `object`.
                         * @example
                         *
                         * function customizer(objValue, srcValue) {
	     *   if (_.isArray(objValue)) {
	     *     return objValue.concat(srcValue);
	     *   }
	     * }
                         *
                         * var object = { 'a': [1], 'b': [2] };
                         * var other = { 'a': [3], 'b': [4] };
                         *
                         * _.mergeWith(object, other, customizer);
                         * // => { 'a': [1, 3], 'b': [2, 4] }
                         */
                        var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
                            baseMerge(object, source, srcIndex, customizer);
                        });

                        /**
                         * The opposite of `_.pick`; this method creates an object composed of the
                         * own and inherited enumerable property paths of `object` that are not omitted.
                         *
                         * **Note:** This method is considerably slower than `_.pick`.
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category Object
                         * @param {Object} object The source object.
                         * @param {...(string|string[])} [paths] The property paths to omit.
                         * @returns {Object} Returns the new object.
                         * @example
                         *
                         * var object = { 'a': 1, 'b': '2', 'c': 3 };
                         *
                         * _.omit(object, ['a', 'c']);
                         * // => { 'b': '2' }
                         */
                        var omit = flatRest(function(object, paths) {
                            var result = {};
                            if (object == null) {
                                return result;
                            }
                            var isDeep = false;
                            paths = arrayMap(paths, function(path) {
                                path = castPath(path, object);
                                isDeep || (isDeep = path.length > 1);
                                return path;
                            });
                            copyObject(object, getAllKeysIn(object), result);
                            if (isDeep) {
                                result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
                            }
                            var length = paths.length;
                            while (length--) {
                                baseUnset(result, paths[length]);
                            }
                            return result;
                        });

                        /**
                         * The opposite of `_.pickBy`; this method creates an object composed of
                         * the own and inherited enumerable string keyed properties of `object` that
                         * `predicate` doesn't return truthy for. The predicate is invoked with two
                         * arguments: (value, key).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Object
                         * @param {Object} object The source object.
                         * @param {Function} [predicate=_.identity] The function invoked per property.
                         * @returns {Object} Returns the new object.
                         * @example
                         *
                         * var object = { 'a': 1, 'b': '2', 'c': 3 };
                         *
                         * _.omitBy(object, _.isNumber);
                         * // => { 'b': '2' }
                         */
                        function omitBy(object, predicate) {
                            return pickBy(object, negate(getIteratee(predicate)));
                        }

                        /**
                         * Creates an object composed of the picked `object` properties.
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category Object
                         * @param {Object} object The source object.
                         * @param {...(string|string[])} [paths] The property paths to pick.
                         * @returns {Object} Returns the new object.
                         * @example
                         *
                         * var object = { 'a': 1, 'b': '2', 'c': 3 };
                         *
                         * _.pick(object, ['a', 'c']);
                         * // => { 'a': 1, 'c': 3 }
                         */
                        var pick = flatRest(function(object, paths) {
                            return object == null ? {} : basePick(object, paths);
                        });

                        /**
                         * Creates an object composed of the `object` properties `predicate` returns
                         * truthy for. The predicate is invoked with two arguments: (value, key).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Object
                         * @param {Object} object The source object.
                         * @param {Function} [predicate=_.identity] The function invoked per property.
                         * @returns {Object} Returns the new object.
                         * @example
                         *
                         * var object = { 'a': 1, 'b': '2', 'c': 3 };
                         *
                         * _.pickBy(object, _.isNumber);
                         * // => { 'a': 1, 'c': 3 }
                         */
                        function pickBy(object, predicate) {
                            if (object == null) {
                                return {};
                            }
                            var props = arrayMap(getAllKeysIn(object), function(prop) {
                                return [prop];
                            });
                            predicate = getIteratee(predicate);
                            return basePickBy(object, props, function(value, path) {
                                return predicate(value, path[0]);
                            });
                        }

                        /**
                         * This method is like `_.get` except that if the resolved value is a
                         * function it's invoked with the `this` binding of its parent object and
                         * its result is returned.
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category Object
                         * @param {Object} object The object to query.
                         * @param {Array|string} path The path of the property to resolve.
                         * @param {*} [defaultValue] The value returned for `undefined` resolved values.
                         * @returns {*} Returns the resolved value.
                         * @example
                         *
                         * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
                         *
                         * _.result(object, 'a[0].b.c1');
                         * // => 3
                         *
                         * _.result(object, 'a[0].b.c2');
                         * // => 4
                         *
                         * _.result(object, 'a[0].b.c3', 'default');
                         * // => 'default'
                         *
                         * _.result(object, 'a[0].b.c3', _.constant('default'));
                         * // => 'default'
                         */
                        function result(object, path, defaultValue) {
                            path = castPath(path, object);

                            var index = -1,
                                length = path.length;

                            // Ensure the loop is entered when path is empty.
                            if (!length) {
                                length = 1;
                                object = undefined;
                            }
                            while (++index < length) {
                                var value = object == null ? undefined : object[toKey(path[index])];
                                if (value === undefined) {
                                    index = length;
                                    value = defaultValue;
                                }
                                object = isFunction(value) ? value.call(object) : value;
                            }
                            return object;
                        }

                        /**
                         * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
                         * it's created. Arrays are created for missing index properties while objects
                         * are created for all other missing properties. Use `_.setWith` to customize
                         * `path` creation.
                         *
                         * **Note:** This method mutates `object`.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.7.0
                         * @category Object
                         * @param {Object} object The object to modify.
                         * @param {Array|string} path The path of the property to set.
                         * @param {*} value The value to set.
                         * @returns {Object} Returns `object`.
                         * @example
                         *
                         * var object = { 'a': [{ 'b': { 'c': 3 } }] };
                         *
                         * _.set(object, 'a[0].b.c', 4);
                         * console.log(object.a[0].b.c);
                         * // => 4
                         *
                         * _.set(object, ['x', '0', 'y', 'z'], 5);
                         * console.log(object.x[0].y.z);
                         * // => 5
                         */
                        function set(object, path, value) {
                            return object == null ? object : baseSet(object, path, value);
                        }

                        /**
                         * This method is like `_.set` except that it accepts `customizer` which is
                         * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
                         * path creation is handled by the method instead. The `customizer` is invoked
                         * with three arguments: (nsValue, key, nsObject).
                         *
                         * **Note:** This method mutates `object`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Object
                         * @param {Object} object The object to modify.
                         * @param {Array|string} path The path of the property to set.
                         * @param {*} value The value to set.
                         * @param {Function} [customizer] The function to customize assigned values.
                         * @returns {Object} Returns `object`.
                         * @example
                         *
                         * var object = {};
                         *
                         * _.setWith(object, '[0][1]', 'a', Object);
                         * // => { '0': { '1': 'a' } }
                         */
                        function setWith(object, path, value, customizer) {
                            customizer = typeof customizer == 'function' ? customizer : undefined;
                            return object == null ? object : baseSet(object, path, value, customizer);
                        }

                        /**
                         * Creates an array of own enumerable string keyed-value pairs for `object`
                         * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
                         * entries are returned.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @alias entries
                         * @category Object
                         * @param {Object} object The object to query.
                         * @returns {Array} Returns the key-value pairs.
                         * @example
                         *
                         * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
                         *
                         * Foo.prototype.c = 3;
                         *
                         * _.toPairs(new Foo);
                         * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
                         */
                        var toPairs = createToPairs(keys);

                        /**
                         * Creates an array of own and inherited enumerable string keyed-value pairs
                         * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
                         * or set, its entries are returned.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @alias entriesIn
                         * @category Object
                         * @param {Object} object The object to query.
                         * @returns {Array} Returns the key-value pairs.
                         * @example
                         *
                         * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
                         *
                         * Foo.prototype.c = 3;
                         *
                         * _.toPairsIn(new Foo);
                         * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
                         */
                        var toPairsIn = createToPairs(keysIn);

                        /**
                         * An alternative to `_.reduce`; this method transforms `object` to a new
                         * `accumulator` object which is the result of running each of its own
                         * enumerable string keyed properties thru `iteratee`, with each invocation
                         * potentially mutating the `accumulator` object. If `accumulator` is not
                         * provided, a new object with the same `[[Prototype]]` will be used. The
                         * iteratee is invoked with four arguments: (accumulator, value, key, object).
                         * Iteratee functions may exit iteration early by explicitly returning `false`.
                         *
                         * @static
                         * @memberOf _
                         * @since 1.3.0
                         * @category Object
                         * @param {Object} object The object to iterate over.
                         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                         * @param {*} [accumulator] The custom accumulator value.
                         * @returns {*} Returns the accumulated value.
                         * @example
                         *
                         * _.transform([2, 3, 4], function(result, n) {
	     *   result.push(n *= n);
	     *   return n % 2 == 0;
	     * }, []);
                         * // => [4, 9]
                         *
                         * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     * }, {});
                         * // => { '1': ['a', 'c'], '2': ['b'] }
                         */
                        function transform(object, iteratee, accumulator) {
                            var isArr = isArray(object),
                                isArrLike = isArr || isBuffer(object) || isTypedArray(object);

                            iteratee = getIteratee(iteratee, 4);
                            if (accumulator == null) {
                                var Ctor = object && object.constructor;
                                if (isArrLike) {
                                    accumulator = isArr ? new Ctor : [];
                                }
                                else if (isObject(object)) {
                                    accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
                                }
                                else {
                                    accumulator = {};
                                }
                            }
                            (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
                                return iteratee(accumulator, value, index, object);
                            });
                            return accumulator;
                        }

                        /**
                         * Removes the property at `path` of `object`.
                         *
                         * **Note:** This method mutates `object`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Object
                         * @param {Object} object The object to modify.
                         * @param {Array|string} path The path of the property to unset.
                         * @returns {boolean} Returns `true` if the property is deleted, else `false`.
                         * @example
                         *
                         * var object = { 'a': [{ 'b': { 'c': 7 } }] };
                         * _.unset(object, 'a[0].b.c');
                         * // => true
                         *
                         * console.log(object);
                         * // => { 'a': [{ 'b': {} }] };
                         *
                         * _.unset(object, ['a', '0', 'b', 'c']);
                         * // => true
                         *
                         * console.log(object);
                         * // => { 'a': [{ 'b': {} }] };
                         */
                        function unset(object, path) {
                            return object == null ? true : baseUnset(object, path);
                        }

                        /**
                         * This method is like `_.set` except that accepts `updater` to produce the
                         * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
                         * is invoked with one argument: (value).
                         *
                         * **Note:** This method mutates `object`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.6.0
                         * @category Object
                         * @param {Object} object The object to modify.
                         * @param {Array|string} path The path of the property to set.
                         * @param {Function} updater The function to produce the updated value.
                         * @returns {Object} Returns `object`.
                         * @example
                         *
                         * var object = { 'a': [{ 'b': { 'c': 3 } }] };
                         *
                         * _.update(object, 'a[0].b.c', function(n) { return n * n; });
                         * console.log(object.a[0].b.c);
                         * // => 9
                         *
                         * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
                         * console.log(object.x[0].y.z);
                         * // => 0
                         */
                        function update(object, path, updater) {
                            return object == null ? object : baseUpdate(object, path, castFunction(updater));
                        }

                        /**
                         * This method is like `_.update` except that it accepts `customizer` which is
                         * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
                         * path creation is handled by the method instead. The `customizer` is invoked
                         * with three arguments: (nsValue, key, nsObject).
                         *
                         * **Note:** This method mutates `object`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.6.0
                         * @category Object
                         * @param {Object} object The object to modify.
                         * @param {Array|string} path The path of the property to set.
                         * @param {Function} updater The function to produce the updated value.
                         * @param {Function} [customizer] The function to customize assigned values.
                         * @returns {Object} Returns `object`.
                         * @example
                         *
                         * var object = {};
                         *
                         * _.updateWith(object, '[0][1]', _.constant('a'), Object);
                         * // => { '0': { '1': 'a' } }
                         */
                        function updateWith(object, path, updater, customizer) {
                            customizer = typeof customizer == 'function' ? customizer : undefined;
                            return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
                        }

                        /**
                         * Creates an array of the own enumerable string keyed property values of `object`.
                         *
                         * **Note:** Non-object values are coerced to objects.
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category Object
                         * @param {Object} object The object to query.
                         * @returns {Array} Returns the array of property values.
                         * @example
                         *
                         * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
                         *
                         * Foo.prototype.c = 3;
                         *
                         * _.values(new Foo);
                         * // => [1, 2] (iteration order is not guaranteed)
                         *
                         * _.values('hi');
                         * // => ['h', 'i']
                         */
                        function values(object) {
                            return object == null ? [] : baseValues(object, keys(object));
                        }

                        /**
                         * Creates an array of the own and inherited enumerable string keyed property
                         * values of `object`.
                         *
                         * **Note:** Non-object values are coerced to objects.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Object
                         * @param {Object} object The object to query.
                         * @returns {Array} Returns the array of property values.
                         * @example
                         *
                         * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
                         *
                         * Foo.prototype.c = 3;
                         *
                         * _.valuesIn(new Foo);
                         * // => [1, 2, 3] (iteration order is not guaranteed)
                         */
                        function valuesIn(object) {
                            return object == null ? [] : baseValues(object, keysIn(object));
                        }

                        /*------------------------------------------------------------------------*/

                        /**
                         * Clamps `number` within the inclusive `lower` and `upper` bounds.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Number
                         * @param {number} number The number to clamp.
                         * @param {number} [lower] The lower bound.
                         * @param {number} upper The upper bound.
                         * @returns {number} Returns the clamped number.
                         * @example
                         *
                         * _.clamp(-10, -5, 5);
                         * // => -5
                         *
                         * _.clamp(10, -5, 5);
                         * // => 5
                         */
                        function clamp(number, lower, upper) {
                            if (upper === undefined) {
                                upper = lower;
                                lower = undefined;
                            }
                            if (upper !== undefined) {
                                upper = toNumber(upper);
                                upper = upper === upper ? upper : 0;
                            }
                            if (lower !== undefined) {
                                lower = toNumber(lower);
                                lower = lower === lower ? lower : 0;
                            }
                            return baseClamp(toNumber(number), lower, upper);
                        }

                        /**
                         * Checks if `n` is between `start` and up to, but not including, `end`. If
                         * `end` is not specified, it's set to `start` with `start` then set to `0`.
                         * If `start` is greater than `end` the params are swapped to support
                         * negative ranges.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.3.0
                         * @category Number
                         * @param {number} number The number to check.
                         * @param {number} [start=0] The start of the range.
                         * @param {number} end The end of the range.
                         * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
                         * @see _.range, _.rangeRight
                         * @example
                         *
                         * _.inRange(3, 2, 4);
                         * // => true
                         *
                         * _.inRange(4, 8);
                         * // => true
                         *
                         * _.inRange(4, 2);
                         * // => false
                         *
                         * _.inRange(2, 2);
                         * // => false
                         *
                         * _.inRange(1.2, 2);
                         * // => true
                         *
                         * _.inRange(5.2, 4);
                         * // => false
                         *
                         * _.inRange(-3, -2, -6);
                         * // => true
                         */
                        function inRange(number, start, end) {
                            start = toFinite(start);
                            if (end === undefined) {
                                end = start;
                                start = 0;
                            } else {
                                end = toFinite(end);
                            }
                            number = toNumber(number);
                            return baseInRange(number, start, end);
                        }

                        /**
                         * Produces a random number between the inclusive `lower` and `upper` bounds.
                         * If only one argument is provided a number between `0` and the given number
                         * is returned. If `floating` is `true`, or either `lower` or `upper` are
                         * floats, a floating-point number is returned instead of an integer.
                         *
                         * **Note:** JavaScript follows the IEEE-754 standard for resolving
                         * floating-point values which can produce unexpected results.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.7.0
                         * @category Number
                         * @param {number} [lower=0] The lower bound.
                         * @param {number} [upper=1] The upper bound.
                         * @param {boolean} [floating] Specify returning a floating-point number.
                         * @returns {number} Returns the random number.
                         * @example
                         *
                         * _.random(0, 5);
                         * // => an integer between 0 and 5
                         *
                         * _.random(5);
                         * // => also an integer between 0 and 5
                         *
                         * _.random(5, true);
                         * // => a floating-point number between 0 and 5
                         *
                         * _.random(1.2, 5.2);
                         * // => a floating-point number between 1.2 and 5.2
                         */
                        function random(lower, upper, floating) {
                            if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
                                upper = floating = undefined;
                            }
                            if (floating === undefined) {
                                if (typeof upper == 'boolean') {
                                    floating = upper;
                                    upper = undefined;
                                }
                                else if (typeof lower == 'boolean') {
                                    floating = lower;
                                    lower = undefined;
                                }
                            }
                            if (lower === undefined && upper === undefined) {
                                lower = 0;
                                upper = 1;
                            }
                            else {
                                lower = toFinite(lower);
                                if (upper === undefined) {
                                    upper = lower;
                                    lower = 0;
                                } else {
                                    upper = toFinite(upper);
                                }
                            }
                            if (lower > upper) {
                                var temp = lower;
                                lower = upper;
                                upper = temp;
                            }
                            if (floating || lower % 1 || upper % 1) {
                                var rand = nativeRandom();
                                return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
                            }
                            return baseRandom(lower, upper);
                        }

                        /*------------------------------------------------------------------------*/

                        /**
                         * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category String
                         * @param {string} [string=''] The string to convert.
                         * @returns {string} Returns the camel cased string.
                         * @example
                         *
                         * _.camelCase('Foo Bar');
                         * // => 'fooBar'
                         *
                         * _.camelCase('--foo-bar--');
                         * // => 'fooBar'
                         *
                         * _.camelCase('__FOO_BAR__');
                         * // => 'fooBar'
                         */
                        var camelCase = createCompounder(function(result, word, index) {
                            word = word.toLowerCase();
                            return result + (index ? capitalize(word) : word);
                        });

                        /**
                         * Converts the first character of `string` to upper case and the remaining
                         * to lower case.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category String
                         * @param {string} [string=''] The string to capitalize.
                         * @returns {string} Returns the capitalized string.
                         * @example
                         *
                         * _.capitalize('FRED');
                         * // => 'Fred'
                         */
                        function capitalize(string) {
                            return upperFirst(toString(string).toLowerCase());
                        }

                        /**
                         * Deburrs `string` by converting
                         * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
                         * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
                         * letters to basic Latin letters and removing
                         * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category String
                         * @param {string} [string=''] The string to deburr.
                         * @returns {string} Returns the deburred string.
                         * @example
                         *
                         * _.deburr('dèŒ…jè„¿ vu');
                         * // => 'deja vu'
                         */
                        function deburr(string) {
                            string = toString(string);
                            return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
                        }

                        /**
                         * Checks if `string` ends with the given target string.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category String
                         * @param {string} [string=''] The string to inspect.
                         * @param {string} [target] The string to search for.
                         * @param {number} [position=string.length] The position to search up to.
                         * @returns {boolean} Returns `true` if `string` ends with `target`,
                         *  else `false`.
                         * @example
                         *
                         * _.endsWith('abc', 'c');
                         * // => true
                         *
                         * _.endsWith('abc', 'b');
                         * // => false
                         *
                         * _.endsWith('abc', 'b', 2);
                         * // => true
                         */
                        function endsWith(string, target, position) {
                            string = toString(string);
                            target = baseToString(target);

                            var length = string.length;
                            position = position === undefined
                                ? length
                                : baseClamp(toInteger(position), 0, length);

                            var end = position;
                            position -= target.length;
                            return position >= 0 && string.slice(position, end) == target;
                        }

                        /**
                         * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
                         * corresponding HTML entities.
                         *
                         * **Note:** No other characters are escaped. To escape additional
                         * characters use a third-party library like [_he_](https://mths.be/he).
                         *
                         * Though the ">" character is escaped for symmetry, characters like
                         * ">" and "/" don't need escaping in HTML and have no special meaning
                         * unless they're part of a tag or unquoted attribute value. See
                         * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
                         * (under "semi-related fun fact") for more details.
                         *
                         * When working with HTML you should always
                         * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
                         * XSS vectors.
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category String
                         * @param {string} [string=''] The string to escape.
                         * @returns {string} Returns the escaped string.
                         * @example
                         *
                         * _.escape('fred, barney, & pebbles');
                         * // => 'fred, barney, &amp; pebbles'
                         */
                        function escape(string) {
                            string = toString(string);
                            return (string && reHasUnescapedHtml.test(string))
                                ? string.replace(reUnescapedHtml, escapeHtmlChar)
                                : string;
                        }

                        /**
                         * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
                         * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category String
                         * @param {string} [string=''] The string to escape.
                         * @returns {string} Returns the escaped string.
                         * @example
                         *
                         * _.escapeRegExp('[lodash](https://lodash.com/)');
                         * // => '\[lodash\]\(https://lodash\.com/\)'
                         */
                        function escapeRegExp(string) {
                            string = toString(string);
                            return (string && reHasRegExpChar.test(string))
                                ? string.replace(reRegExpChar, '\\$&')
                                : string;
                        }

                        /**
                         * Converts `string` to
                         * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category String
                         * @param {string} [string=''] The string to convert.
                         * @returns {string} Returns the kebab cased string.
                         * @example
                         *
                         * _.kebabCase('Foo Bar');
                         * // => 'foo-bar'
                         *
                         * _.kebabCase('fooBar');
                         * // => 'foo-bar'
                         *
                         * _.kebabCase('__FOO_BAR__');
                         * // => 'foo-bar'
                         */
                        var kebabCase = createCompounder(function(result, word, index) {
                            return result + (index ? '-' : '') + word.toLowerCase();
                        });

                        /**
                         * Converts `string`, as space separated words, to lower case.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category String
                         * @param {string} [string=''] The string to convert.
                         * @returns {string} Returns the lower cased string.
                         * @example
                         *
                         * _.lowerCase('--Foo-Bar--');
                         * // => 'foo bar'
                         *
                         * _.lowerCase('fooBar');
                         * // => 'foo bar'
                         *
                         * _.lowerCase('__FOO_BAR__');
                         * // => 'foo bar'
                         */
                        var lowerCase = createCompounder(function(result, word, index) {
                            return result + (index ? ' ' : '') + word.toLowerCase();
                        });

                        /**
                         * Converts the first character of `string` to lower case.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category String
                         * @param {string} [string=''] The string to convert.
                         * @returns {string} Returns the converted string.
                         * @example
                         *
                         * _.lowerFirst('Fred');
                         * // => 'fred'
                         *
                         * _.lowerFirst('FRED');
                         * // => 'fRED'
                         */
                        var lowerFirst = createCaseFirst('toLowerCase');

                        /**
                         * Pads `string` on the left and right sides if it's shorter than `length`.
                         * Padding characters are truncated if they can't be evenly divided by `length`.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category String
                         * @param {string} [string=''] The string to pad.
                         * @param {number} [length=0] The padding length.
                         * @param {string} [chars=' '] The string used as padding.
                         * @returns {string} Returns the padded string.
                         * @example
                         *
                         * _.pad('abc', 8);
                         * // => '  abc   '
                         *
                         * _.pad('abc', 8, '_-');
                         * // => '_-abc_-_'
                         *
                         * _.pad('abc', 3);
                         * // => 'abc'
                         */
                        function pad(string, length, chars) {
                            string = toString(string);
                            length = toInteger(length);

                            var strLength = length ? stringSize(string) : 0;
                            if (!length || strLength >= length) {
                                return string;
                            }
                            var mid = (length - strLength) / 2;
                            return (
                                createPadding(nativeFloor(mid), chars) +
                                string +
                                createPadding(nativeCeil(mid), chars)
                            );
                        }

                        /**
                         * Pads `string` on the right side if it's shorter than `length`. Padding
                         * characters are truncated if they exceed `length`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category String
                         * @param {string} [string=''] The string to pad.
                         * @param {number} [length=0] The padding length.
                         * @param {string} [chars=' '] The string used as padding.
                         * @returns {string} Returns the padded string.
                         * @example
                         *
                         * _.padEnd('abc', 6);
                         * // => 'abc   '
                         *
                         * _.padEnd('abc', 6, '_-');
                         * // => 'abc_-_'
                         *
                         * _.padEnd('abc', 3);
                         * // => 'abc'
                         */
                        function padEnd(string, length, chars) {
                            string = toString(string);
                            length = toInteger(length);

                            var strLength = length ? stringSize(string) : 0;
                            return (length && strLength < length)
                                ? (string + createPadding(length - strLength, chars))
                                : string;
                        }

                        /**
                         * Pads `string` on the left side if it's shorter than `length`. Padding
                         * characters are truncated if they exceed `length`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category String
                         * @param {string} [string=''] The string to pad.
                         * @param {number} [length=0] The padding length.
                         * @param {string} [chars=' '] The string used as padding.
                         * @returns {string} Returns the padded string.
                         * @example
                         *
                         * _.padStart('abc', 6);
                         * // => '   abc'
                         *
                         * _.padStart('abc', 6, '_-');
                         * // => '_-_abc'
                         *
                         * _.padStart('abc', 3);
                         * // => 'abc'
                         */
                        function padStart(string, length, chars) {
                            string = toString(string);
                            length = toInteger(length);

                            var strLength = length ? stringSize(string) : 0;
                            return (length && strLength < length)
                                ? (createPadding(length - strLength, chars) + string)
                                : string;
                        }

                        /**
                         * Converts `string` to an integer of the specified radix. If `radix` is
                         * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
                         * hexadecimal, in which case a `radix` of `16` is used.
                         *
                         * **Note:** This method aligns with the
                         * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
                         *
                         * @static
                         * @memberOf _
                         * @since 1.1.0
                         * @category String
                         * @param {string} string The string to convert.
                         * @param {number} [radix=10] The radix to interpret `value` by.
                         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                         * @returns {number} Returns the converted integer.
                         * @example
                         *
                         * _.parseInt('08');
                         * // => 8
                         *
                         * _.map(['6', '08', '10'], _.parseInt);
                         * // => [6, 8, 10]
                         */
                        function parseInt(string, radix, guard) {
                            if (guard || radix == null) {
                                radix = 0;
                            } else if (radix) {
                                radix = +radix;
                            }
                            return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
                        }

                        /**
                         * Repeats the given string `n` times.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category String
                         * @param {string} [string=''] The string to repeat.
                         * @param {number} [n=1] The number of times to repeat the string.
                         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                         * @returns {string} Returns the repeated string.
                         * @example
                         *
                         * _.repeat('*', 3);
                         * // => '***'
                         *
                         * _.repeat('abc', 2);
                         * // => 'abcabc'
                         *
                         * _.repeat('abc', 0);
                         * // => ''
                         */
                        function repeat(string, n, guard) {
                            if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
                                n = 1;
                            } else {
                                n = toInteger(n);
                            }
                            return baseRepeat(toString(string), n);
                        }

                        /**
                         * Replaces matches for `pattern` in `string` with `replacement`.
                         *
                         * **Note:** This method is based on
                         * [`String#replace`](https://mdn.io/String/replace).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category String
                         * @param {string} [string=''] The string to modify.
                         * @param {RegExp|string} pattern The pattern to replace.
                         * @param {Function|string} replacement The match replacement.
                         * @returns {string} Returns the modified string.
                         * @example
                         *
                         * _.replace('Hi Fred', 'Fred', 'Barney');
                         * // => 'Hi Barney'
                         */
                        function replace() {
                            var args = arguments,
                                string = toString(args[0]);

                            return args.length < 3 ? string : string.replace(args[1], args[2]);
                        }

                        /**
                         * Converts `string` to
                         * [snake case](https://en.wikipedia.org/wiki/Snake_case).
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category String
                         * @param {string} [string=''] The string to convert.
                         * @returns {string} Returns the snake cased string.
                         * @example
                         *
                         * _.snakeCase('Foo Bar');
                         * // => 'foo_bar'
                         *
                         * _.snakeCase('fooBar');
                         * // => 'foo_bar'
                         *
                         * _.snakeCase('--FOO-BAR--');
                         * // => 'foo_bar'
                         */
                        var snakeCase = createCompounder(function(result, word, index) {
                            return result + (index ? '_' : '') + word.toLowerCase();
                        });

                        /**
                         * Splits `string` by `separator`.
                         *
                         * **Note:** This method is based on
                         * [`String#split`](https://mdn.io/String/split).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category String
                         * @param {string} [string=''] The string to split.
                         * @param {RegExp|string} separator The separator pattern to split by.
                         * @param {number} [limit] The length to truncate results to.
                         * @returns {Array} Returns the string segments.
                         * @example
                         *
                         * _.split('a-b-c', '-', 2);
                         * // => ['a', 'b']
                         */
                        function split(string, separator, limit) {
                            if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
                                separator = limit = undefined;
                            }
                            limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
                            if (!limit) {
                                return [];
                            }
                            string = toString(string);
                            if (string && (
                                    typeof separator == 'string' ||
                                    (separator != null && !isRegExp(separator))
                                )) {
                                separator = baseToString(separator);
                                if (!separator && hasUnicode(string)) {
                                    return castSlice(stringToArray(string), 0, limit);
                                }
                            }
                            return string.split(separator, limit);
                        }

                        /**
                         * Converts `string` to
                         * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
                         *
                         * @static
                         * @memberOf _
                         * @since 3.1.0
                         * @category String
                         * @param {string} [string=''] The string to convert.
                         * @returns {string} Returns the start cased string.
                         * @example
                         *
                         * _.startCase('--foo-bar--');
                         * // => 'Foo Bar'
                         *
                         * _.startCase('fooBar');
                         * // => 'Foo Bar'
                         *
                         * _.startCase('__FOO_BAR__');
                         * // => 'FOO BAR'
                         */
                        var startCase = createCompounder(function(result, word, index) {
                            return result + (index ? ' ' : '') + upperFirst(word);
                        });

                        /**
                         * Checks if `string` starts with the given target string.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category String
                         * @param {string} [string=''] The string to inspect.
                         * @param {string} [target] The string to search for.
                         * @param {number} [position=0] The position to search from.
                         * @returns {boolean} Returns `true` if `string` starts with `target`,
                         *  else `false`.
                         * @example
                         *
                         * _.startsWith('abc', 'a');
                         * // => true
                         *
                         * _.startsWith('abc', 'b');
                         * // => false
                         *
                         * _.startsWith('abc', 'b', 1);
                         * // => true
                         */
                        function startsWith(string, target, position) {
                            string = toString(string);
                            position = position == null
                                ? 0
                                : baseClamp(toInteger(position), 0, string.length);

                            target = baseToString(target);
                            return string.slice(position, position + target.length) == target;
                        }

                        /**
                         * Creates a compiled template function that can interpolate data properties
                         * in "interpolate" delimiters, HTML-escape interpolated data properties in
                         * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
                         * properties may be accessed as free variables in the template. If a setting
                         * object is given, it takes precedence over `_.templateSettings` values.
                         *
                         * **Note:** In the development build `_.template` utilizes
                         * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
                         * for easier debugging.
                         *
                         * For more information on precompiling templates see
                         * [lodash's custom builds documentation](https://lodash.com/custom-builds).
                         *
                         * For more information on Chrome extension sandboxes see
                         * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category String
                         * @param {string} [string=''] The template string.
                         * @param {Object} [options={}] The options object.
                         * @param {RegExp} [options.escape=_.templateSettings.escape]
                         *  The HTML "escape" delimiter.
                         * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
                         *  The "evaluate" delimiter.
                         * @param {Object} [options.imports=_.templateSettings.imports]
                         *  An object to import into the template as free variables.
                         * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
                         *  The "interpolate" delimiter.
                         * @param {string} [options.sourceURL='lodash.templateSources[n]']
                         *  The sourceURL of the compiled template.
                         * @param {string} [options.variable='obj']
                         *  The data object variable name.
                         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                         * @returns {Function} Returns the compiled template function.
                         * @example
                         *
                         * // Use the "interpolate" delimiter to create a compiled template.
                         * var compiled = _.template('hello <%= user %>!');
                         * compiled({ 'user': 'fred' });
                         * // => 'hello fred!'
                         *
                         * // Use the HTML "escape" delimiter to escape data property values.
                         * var compiled = _.template('<b><%- value %></b>');
                         * compiled({ 'value': '<script>' });
                         * // => '<b>&lt;script&gt;</b>'
                         *
                         * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
                         * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
                         * compiled({ 'users': ['fred', 'barney'] });
                         * // => '<li>fred</li><li>barney</li>'
                         *
                         * // Use the internal `print` function in "evaluate" delimiters.
                         * var compiled = _.template('<% print("hello " + user); %>!');
                         * compiled({ 'user': 'barney' });
                         * // => 'hello barney!'
                         *
                         * // Use the ES template literal delimiter as an "interpolate" delimiter.
                         * // Disable support by replacing the "interpolate" delimiter.
                         * var compiled = _.template('hello ${ user }!');
                         * compiled({ 'user': 'pebbles' });
                         * // => 'hello pebbles!'
                         *
                         * // Use backslashes to treat delimiters as plain text.
                         * var compiled = _.template('<%= "\\<%- value %\\>" %>');
                         * compiled({ 'value': 'ignored' });
                         * // => '<%- value %>'
                         *
                         * // Use the `imports` option to import `jQuery` as `jq`.
                         * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
                         * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
                         * compiled({ 'users': ['fred', 'barney'] });
                         * // => '<li>fred</li><li>barney</li>'
                         *
                         * // Use the `sourceURL` option to specify a custom sourceURL for the template.
                         * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
                         * compiled(data);
                         * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
                         *
                         * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
                         * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
                         * compiled.source;
                         * // => function(data) {
	     * //   var __t, __p = '';
	     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
	     * //   return __p;
	     * // }
                         *
                         * // Use custom template delimiters.
                         * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
                         * var compiled = _.template('hello {{ user }}!');
                         * compiled({ 'user': 'mustache' });
                         * // => 'hello mustache!'
                         *
                         * // Use the `source` property to inline compiled templates for meaningful
                         * // line numbers in error messages and stack traces.
                         * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
                         *   var JST = {\
	     *     "main": ' + _.template(mainText).source + '\
	     *   };\
                         * ');
                         */
                        function template(string, options, guard) {
                            // Based on John Resig's `tmpl` implementation
                            // (http://ejohn.org/blog/javascript-micro-templating/)
                            // and Laura Doktorova's doT.js (https://github.com/olado/doT).
                            var settings = lodash.templateSettings;

                            if (guard && isIterateeCall(string, options, guard)) {
                                options = undefined;
                            }
                            string = toString(string);
                            options = assignInWith({}, options, settings, customDefaultsAssignIn);

                            var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
                                importsKeys = keys(imports),
                                importsValues = baseValues(imports, importsKeys);

                            var isEscaping,
                                isEvaluating,
                                index = 0,
                                interpolate = options.interpolate || reNoMatch,
                                source = "__p += '";

                            // Compile the regexp to match each delimiter.
                            var reDelimiters = RegExp(
                                (options.escape || reNoMatch).source + '|' +
                                interpolate.source + '|' +
                                (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
                                (options.evaluate || reNoMatch).source + '|$'
                                , 'g');

                            // Use a sourceURL for easier debugging.
                            var sourceURL = '//# sourceURL=' +
                                ('sourceURL' in options
                                        ? options.sourceURL
                                        : ('lodash.templateSources[' + (++templateCounter) + ']')
                                ) + '\n';

                            string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
                                interpolateValue || (interpolateValue = esTemplateValue);

                                // Escape characters that can't be included in string literals.
                                source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

                                // Replace delimiters with snippets.
                                if (escapeValue) {
                                    isEscaping = true;
                                    source += "' +\n__e(" + escapeValue + ") +\n'";
                                }
                                if (evaluateValue) {
                                    isEvaluating = true;
                                    source += "';\n" + evaluateValue + ";\n__p += '";
                                }
                                if (interpolateValue) {
                                    source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
                                }
                                index = offset + match.length;

                                // The JS engine embedded in Adobe products needs `match` returned in
                                // order to produce the correct `offset` value.
                                return match;
                            });

                            source += "';\n";

                            // If `variable` is not specified wrap a with-statement around the generated
                            // code to add the data object to the top of the scope chain.
                            var variable = options.variable;
                            if (!variable) {
                                source = 'with (obj) {\n' + source + '\n}\n';
                            }
                            // Cleanup code by stripping empty strings.
                            source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
                                .replace(reEmptyStringMiddle, '$1')
                                .replace(reEmptyStringTrailing, '$1;');

                            // Frame code as the function body.
                            source = 'function(' + (variable || 'obj') + ') {\n' +
                                (variable
                                        ? ''
                                        : 'obj || (obj = {});\n'
                                ) +
                                "var __t, __p = ''" +
                                (isEscaping
                                        ? ', __e = _.escape'
                                        : ''
                                ) +
                                (isEvaluating
                                        ? ', __j = Array.prototype.join;\n' +
                                    "function print() { __p += __j.call(arguments, '') }\n"
                                        : ';\n'
                                ) +
                                source +
                                'return __p\n}';

                            var result = attempt(function() {
                                return Function(importsKeys, sourceURL + 'return ' + source)
                                    .apply(undefined, importsValues);
                            });

                            // Provide the compiled function's source by its `toString` method or
                            // the `source` property as a convenience for inlining compiled templates.
                            result.source = source;
                            if (isError(result)) {
                                throw result;
                            }
                            return result;
                        }

                        /**
                         * Converts `string`, as a whole, to lower case just like
                         * [String#toLowerCase](https://mdn.io/toLowerCase).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category String
                         * @param {string} [string=''] The string to convert.
                         * @returns {string} Returns the lower cased string.
                         * @example
                         *
                         * _.toLower('--Foo-Bar--');
                         * // => '--foo-bar--'
                         *
                         * _.toLower('fooBar');
                         * // => 'foobar'
                         *
                         * _.toLower('__FOO_BAR__');
                         * // => '__foo_bar__'
                         */
                        function toLower(value) {
                            return toString(value).toLowerCase();
                        }

                        /**
                         * Converts `string`, as a whole, to upper case just like
                         * [String#toUpperCase](https://mdn.io/toUpperCase).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category String
                         * @param {string} [string=''] The string to convert.
                         * @returns {string} Returns the upper cased string.
                         * @example
                         *
                         * _.toUpper('--foo-bar--');
                         * // => '--FOO-BAR--'
                         *
                         * _.toUpper('fooBar');
                         * // => 'FOOBAR'
                         *
                         * _.toUpper('__foo_bar__');
                         * // => '__FOO_BAR__'
                         */
                        function toUpper(value) {
                            return toString(value).toUpperCase();
                        }

                        /**
                         * Removes leading and trailing whitespace or specified characters from `string`.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category String
                         * @param {string} [string=''] The string to trim.
                         * @param {string} [chars=whitespace] The characters to trim.
                         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                         * @returns {string} Returns the trimmed string.
                         * @example
                         *
                         * _.trim('  abc  ');
                         * // => 'abc'
                         *
                         * _.trim('-_-abc-_-', '_-');
                         * // => 'abc'
                         *
                         * _.map(['  foo  ', '  bar  '], _.trim);
                         * // => ['foo', 'bar']
                         */
                        function trim(string, chars, guard) {
                            string = toString(string);
                            if (string && (guard || chars === undefined)) {
                                return string.replace(reTrim, '');
                            }
                            if (!string || !(chars = baseToString(chars))) {
                                return string;
                            }
                            var strSymbols = stringToArray(string),
                                chrSymbols = stringToArray(chars),
                                start = charsStartIndex(strSymbols, chrSymbols),
                                end = charsEndIndex(strSymbols, chrSymbols) + 1;

                            return castSlice(strSymbols, start, end).join('');
                        }

                        /**
                         * Removes trailing whitespace or specified characters from `string`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category String
                         * @param {string} [string=''] The string to trim.
                         * @param {string} [chars=whitespace] The characters to trim.
                         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                         * @returns {string} Returns the trimmed string.
                         * @example
                         *
                         * _.trimEnd('  abc  ');
                         * // => '  abc'
                         *
                         * _.trimEnd('-_-abc-_-', '_-');
                         * // => '-_-abc'
                         */
                        function trimEnd(string, chars, guard) {
                            string = toString(string);
                            if (string && (guard || chars === undefined)) {
                                return string.replace(reTrimEnd, '');
                            }
                            if (!string || !(chars = baseToString(chars))) {
                                return string;
                            }
                            var strSymbols = stringToArray(string),
                                end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

                            return castSlice(strSymbols, 0, end).join('');
                        }

                        /**
                         * Removes leading whitespace or specified characters from `string`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category String
                         * @param {string} [string=''] The string to trim.
                         * @param {string} [chars=whitespace] The characters to trim.
                         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                         * @returns {string} Returns the trimmed string.
                         * @example
                         *
                         * _.trimStart('  abc  ');
                         * // => 'abc  '
                         *
                         * _.trimStart('-_-abc-_-', '_-');
                         * // => 'abc-_-'
                         */
                        function trimStart(string, chars, guard) {
                            string = toString(string);
                            if (string && (guard || chars === undefined)) {
                                return string.replace(reTrimStart, '');
                            }
                            if (!string || !(chars = baseToString(chars))) {
                                return string;
                            }
                            var strSymbols = stringToArray(string),
                                start = charsStartIndex(strSymbols, stringToArray(chars));

                            return castSlice(strSymbols, start).join('');
                        }

                        /**
                         * Truncates `string` if it's longer than the given maximum string length.
                         * The last characters of the truncated string are replaced with the omission
                         * string which defaults to "...".
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category String
                         * @param {string} [string=''] The string to truncate.
                         * @param {Object} [options={}] The options object.
                         * @param {number} [options.length=30] The maximum string length.
                         * @param {string} [options.omission='...'] The string to indicate text is omitted.
                         * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
                         * @returns {string} Returns the truncated string.
                         * @example
                         *
                         * _.truncate('hi-diddly-ho there, neighborino');
                         * // => 'hi-diddly-ho there, neighbo...'
                         *
                         * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': ' '
	     * });
                         * // => 'hi-diddly-ho there,...'
                         *
                         * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': /,? +/
	     * });
                         * // => 'hi-diddly-ho there...'
                         *
                         * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'omission': ' [...]'
	     * });
                         * // => 'hi-diddly-ho there, neig [...]'
                         */
                        function truncate(string, options) {
                            var length = DEFAULT_TRUNC_LENGTH,
                                omission = DEFAULT_TRUNC_OMISSION;

                            if (isObject(options)) {
                                var separator = 'separator' in options ? options.separator : separator;
                                length = 'length' in options ? toInteger(options.length) : length;
                                omission = 'omission' in options ? baseToString(options.omission) : omission;
                            }
                            string = toString(string);

                            var strLength = string.length;
                            if (hasUnicode(string)) {
                                var strSymbols = stringToArray(string);
                                strLength = strSymbols.length;
                            }
                            if (length >= strLength) {
                                return string;
                            }
                            var end = length - stringSize(omission);
                            if (end < 1) {
                                return omission;
                            }
                            var result = strSymbols
                                ? castSlice(strSymbols, 0, end).join('')
                                : string.slice(0, end);

                            if (separator === undefined) {
                                return result + omission;
                            }
                            if (strSymbols) {
                                end += (result.length - end);
                            }
                            if (isRegExp(separator)) {
                                if (string.slice(end).search(separator)) {
                                    var match,
                                        substring = result;

                                    if (!separator.global) {
                                        separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
                                    }
                                    separator.lastIndex = 0;
                                    while ((match = separator.exec(substring))) {
                                        var newEnd = match.index;
                                    }
                                    result = result.slice(0, newEnd === undefined ? end : newEnd);
                                }
                            } else if (string.indexOf(baseToString(separator), end) != end) {
                                var index = result.lastIndexOf(separator);
                                if (index > -1) {
                                    result = result.slice(0, index);
                                }
                            }
                            return result + omission;
                        }

                        /**
                         * The inverse of `_.escape`; this method converts the HTML entities
                         * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
                         * their corresponding characters.
                         *
                         * **Note:** No other HTML entities are unescaped. To unescape additional
                         * HTML entities use a third-party library like [_he_](https://mths.be/he).
                         *
                         * @static
                         * @memberOf _
                         * @since 0.6.0
                         * @category String
                         * @param {string} [string=''] The string to unescape.
                         * @returns {string} Returns the unescaped string.
                         * @example
                         *
                         * _.unescape('fred, barney, &amp; pebbles');
                         * // => 'fred, barney, & pebbles'
                         */
                        function unescape(string) {
                            string = toString(string);
                            return (string && reHasEscapedHtml.test(string))
                                ? string.replace(reEscapedHtml, unescapeHtmlChar)
                                : string;
                        }

                        /**
                         * Converts `string`, as space separated words, to upper case.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category String
                         * @param {string} [string=''] The string to convert.
                         * @returns {string} Returns the upper cased string.
                         * @example
                         *
                         * _.upperCase('--foo-bar');
                         * // => 'FOO BAR'
                         *
                         * _.upperCase('fooBar');
                         * // => 'FOO BAR'
                         *
                         * _.upperCase('__foo_bar__');
                         * // => 'FOO BAR'
                         */
                        var upperCase = createCompounder(function(result, word, index) {
                            return result + (index ? ' ' : '') + word.toUpperCase();
                        });

                        /**
                         * Converts the first character of `string` to upper case.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category String
                         * @param {string} [string=''] The string to convert.
                         * @returns {string} Returns the converted string.
                         * @example
                         *
                         * _.upperFirst('fred');
                         * // => 'Fred'
                         *
                         * _.upperFirst('FRED');
                         * // => 'FRED'
                         */
                        var upperFirst = createCaseFirst('toUpperCase');

                        /**
                         * Splits `string` into an array of its words.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category String
                         * @param {string} [string=''] The string to inspect.
                         * @param {RegExp|string} [pattern] The pattern to match words.
                         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                         * @returns {Array} Returns the words of `string`.
                         * @example
                         *
                         * _.words('fred, barney, & pebbles');
                         * // => ['fred', 'barney', 'pebbles']
                         *
                         * _.words('fred, barney, & pebbles', /[^, ]+/g);
                         * // => ['fred', 'barney', '&', 'pebbles']
                         */
                        function words(string, pattern, guard) {
                            string = toString(string);
                            pattern = guard ? undefined : pattern;

                            if (pattern === undefined) {
                                return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
                            }
                            return string.match(pattern) || [];
                        }

                        /*------------------------------------------------------------------------*/

                        /**
                         * Attempts to invoke `func`, returning either the result or the caught error
                         * object. Any additional arguments are provided to `func` when it's invoked.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Util
                         * @param {Function} func The function to attempt.
                         * @param {...*} [args] The arguments to invoke `func` with.
                         * @returns {*} Returns the `func` result or error object.
                         * @example
                         *
                         * // Avoid throwing errors for invalid selectors.
                         * var elements = _.attempt(function(selector) {
	     *   return document.querySelectorAll(selector);
	     * }, '>_>');
                         *
                         * if (_.isError(elements)) {
	     *   elements = [];
	     * }
                         */
                        var attempt = baseRest(function(func, args) {
                            try {
                                return apply(func, undefined, args);
                            } catch (e) {
                                return isError(e) ? e : new Error(e);
                            }
                        });

                        /**
                         * Binds methods of an object to the object itself, overwriting the existing
                         * method.
                         *
                         * **Note:** This method doesn't set the "length" property of bound functions.
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category Util
                         * @param {Object} object The object to bind and assign the bound methods to.
                         * @param {...(string|string[])} methodNames The object method names to bind.
                         * @returns {Object} Returns `object`.
                         * @example
                         *
                         * var view = {
	     *   'label': 'docs',
	     *   'click': function() {
	     *     console.log('clicked ' + this.label);
	     *   }
	     * };
                         *
                         * _.bindAll(view, ['click']);
                         * jQuery(element).on('click', view.click);
                         * // => Logs 'clicked docs' when clicked.
                         */
                        var bindAll = flatRest(function(object, methodNames) {
                            arrayEach(methodNames, function(key) {
                                key = toKey(key);
                                baseAssignValue(object, key, bind(object[key], object));
                            });
                            return object;
                        });

                        /**
                         * Creates a function that iterates over `pairs` and invokes the corresponding
                         * function of the first predicate to return truthy. The predicate-function
                         * pairs are invoked with the `this` binding and arguments of the created
                         * function.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Util
                         * @param {Array} pairs The predicate-function pairs.
                         * @returns {Function} Returns the new composite function.
                         * @example
                         *
                         * var func = _.cond([
                         *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
                         *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
                         *   [_.stubTrue,                      _.constant('no match')]
                         * ]);
                         *
                         * func({ 'a': 1, 'b': 2 });
                         * // => 'matches A'
                         *
                         * func({ 'a': 0, 'b': 1 });
                         * // => 'matches B'
                         *
                         * func({ 'a': '1', 'b': '2' });
                         * // => 'no match'
                         */
                        function cond(pairs) {
                            var length = pairs == null ? 0 : pairs.length,
                                toIteratee = getIteratee();

                            pairs = !length ? [] : arrayMap(pairs, function(pair) {
                                if (typeof pair[1] != 'function') {
                                    throw new TypeError(FUNC_ERROR_TEXT);
                                }
                                return [toIteratee(pair[0]), pair[1]];
                            });

                            return baseRest(function(args) {
                                var index = -1;
                                while (++index < length) {
                                    var pair = pairs[index];
                                    if (apply(pair[0], this, args)) {
                                        return apply(pair[1], this, args);
                                    }
                                }
                            });
                        }

                        /**
                         * Creates a function that invokes the predicate properties of `source` with
                         * the corresponding property values of a given object, returning `true` if
                         * all predicates return truthy, else `false`.
                         *
                         * **Note:** The created function is equivalent to `_.conformsTo` with
                         * `source` partially applied.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Util
                         * @param {Object} source The object of property predicates to conform to.
                         * @returns {Function} Returns the new spec function.
                         * @example
                         *
                         * var objects = [
                         *   { 'a': 2, 'b': 1 },
                         *   { 'a': 1, 'b': 2 }
                         * ];
                         *
                         * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
                         * // => [{ 'a': 1, 'b': 2 }]
                         */
                        function conforms(source) {
                            return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
                        }

                        /**
                         * Creates a function that returns `value`.
                         *
                         * @static
                         * @memberOf _
                         * @since 2.4.0
                         * @category Util
                         * @param {*} value The value to return from the new function.
                         * @returns {Function} Returns the new constant function.
                         * @example
                         *
                         * var objects = _.times(2, _.constant({ 'a': 1 }));
                         *
                         * console.log(objects);
                         * // => [{ 'a': 1 }, { 'a': 1 }]
                         *
                         * console.log(objects[0] === objects[1]);
                         * // => true
                         */
                        function constant(value) {
                            return function() {
                                return value;
                            };
                        }

                        /**
                         * Checks `value` to determine whether a default value should be returned in
                         * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
                         * or `undefined`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.14.0
                         * @category Util
                         * @param {*} value The value to check.
                         * @param {*} defaultValue The default value.
                         * @returns {*} Returns the resolved value.
                         * @example
                         *
                         * _.defaultTo(1, 10);
                         * // => 1
                         *
                         * _.defaultTo(undefined, 10);
                         * // => 10
                         */
                        function defaultTo(value, defaultValue) {
                            return (value == null || value !== value) ? defaultValue : value;
                        }

                        /**
                         * Creates a function that returns the result of invoking the given functions
                         * with the `this` binding of the created function, where each successive
                         * invocation is supplied the return value of the previous.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Util
                         * @param {...(Function|Function[])} [funcs] The functions to invoke.
                         * @returns {Function} Returns the new composite function.
                         * @see _.flowRight
                         * @example
                         *
                         * function square(n) {
	     *   return n * n;
	     * }
                         *
                         * var addSquare = _.flow([_.add, square]);
                         * addSquare(1, 2);
                         * // => 9
                         */
                        var flow = createFlow();

                        /**
                         * This method is like `_.flow` except that it creates a function that
                         * invokes the given functions from right to left.
                         *
                         * @static
                         * @since 3.0.0
                         * @memberOf _
                         * @category Util
                         * @param {...(Function|Function[])} [funcs] The functions to invoke.
                         * @returns {Function} Returns the new composite function.
                         * @see _.flow
                         * @example
                         *
                         * function square(n) {
	     *   return n * n;
	     * }
                         *
                         * var addSquare = _.flowRight([square, _.add]);
                         * addSquare(1, 2);
                         * // => 9
                         */
                        var flowRight = createFlow(true);

                        /**
                         * This method returns the first argument it receives.
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category Util
                         * @param {*} value Any value.
                         * @returns {*} Returns `value`.
                         * @example
                         *
                         * var object = { 'a': 1 };
                         *
                         * console.log(_.identity(object) === object);
                         * // => true
                         */
                        function identity(value) {
                            return value;
                        }

                        /**
                         * Creates a function that invokes `func` with the arguments of the created
                         * function. If `func` is a property name, the created function returns the
                         * property value for a given element. If `func` is an array or object, the
                         * created function returns `true` for elements that contain the equivalent
                         * source properties, otherwise it returns `false`.
                         *
                         * @static
                         * @since 4.0.0
                         * @memberOf _
                         * @category Util
                         * @param {*} [func=_.identity] The value to convert to a callback.
                         * @returns {Function} Returns the callback.
                         * @example
                         *
                         * var users = [
                         *   { 'user': 'barney', 'age': 36, 'active': true },
                         *   { 'user': 'fred',   'age': 40, 'active': false }
                         * ];
                         *
                         * // The `_.matches` iteratee shorthand.
                         * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
                         * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
                         *
                         * // The `_.matchesProperty` iteratee shorthand.
                         * _.filter(users, _.iteratee(['user', 'fred']));
                         * // => [{ 'user': 'fred', 'age': 40 }]
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.map(users, _.iteratee('user'));
                         * // => ['barney', 'fred']
                         *
                         * // Create custom iteratee shorthands.
                         * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
	     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
	     *     return func.test(string);
	     *   };
	     * });
                         *
                         * _.filter(['abc', 'def'], /ef/);
                         * // => ['def']
                         */
                        function iteratee(func) {
                            return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
                        }

                        /**
                         * Creates a function that performs a partial deep comparison between a given
                         * object and `source`, returning `true` if the given object has equivalent
                         * property values, else `false`.
                         *
                         * **Note:** The created function is equivalent to `_.isMatch` with `source`
                         * partially applied.
                         *
                         * Partial comparisons will match empty array and empty object `source`
                         * values against any array or object value, respectively. See `_.isEqual`
                         * for a list of supported value comparisons.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Util
                         * @param {Object} source The object of property values to match.
                         * @returns {Function} Returns the new spec function.
                         * @example
                         *
                         * var objects = [
                         *   { 'a': 1, 'b': 2, 'c': 3 },
                         *   { 'a': 4, 'b': 5, 'c': 6 }
                         * ];
                         *
                         * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
                         * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
                         */
                        function matches(source) {
                            return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
                        }

                        /**
                         * Creates a function that performs a partial deep comparison between the
                         * value at `path` of a given object to `srcValue`, returning `true` if the
                         * object value is equivalent, else `false`.
                         *
                         * **Note:** Partial comparisons will match empty array and empty object
                         * `srcValue` values against any array or object value, respectively. See
                         * `_.isEqual` for a list of supported value comparisons.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.2.0
                         * @category Util
                         * @param {Array|string} path The path of the property to get.
                         * @param {*} srcValue The value to match.
                         * @returns {Function} Returns the new spec function.
                         * @example
                         *
                         * var objects = [
                         *   { 'a': 1, 'b': 2, 'c': 3 },
                         *   { 'a': 4, 'b': 5, 'c': 6 }
                         * ];
                         *
                         * _.find(objects, _.matchesProperty('a', 4));
                         * // => { 'a': 4, 'b': 5, 'c': 6 }
                         */
                        function matchesProperty(path, srcValue) {
                            return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
                        }

                        /**
                         * Creates a function that invokes the method at `path` of a given object.
                         * Any additional arguments are provided to the invoked method.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.7.0
                         * @category Util
                         * @param {Array|string} path The path of the method to invoke.
                         * @param {...*} [args] The arguments to invoke the method with.
                         * @returns {Function} Returns the new invoker function.
                         * @example
                         *
                         * var objects = [
                         *   { 'a': { 'b': _.constant(2) } },
                         *   { 'a': { 'b': _.constant(1) } }
                         * ];
                         *
                         * _.map(objects, _.method('a.b'));
                         * // => [2, 1]
                         *
                         * _.map(objects, _.method(['a', 'b']));
                         * // => [2, 1]
                         */
                        var method = baseRest(function(path, args) {
                            return function(object) {
                                return baseInvoke(object, path, args);
                            };
                        });

                        /**
                         * The opposite of `_.method`; this method creates a function that invokes
                         * the method at a given path of `object`. Any additional arguments are
                         * provided to the invoked method.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.7.0
                         * @category Util
                         * @param {Object} object The object to query.
                         * @param {...*} [args] The arguments to invoke the method with.
                         * @returns {Function} Returns the new invoker function.
                         * @example
                         *
                         * var array = _.times(3, _.constant),
                         *     object = { 'a': array, 'b': array, 'c': array };
                         *
                         * _.map(['a[2]', 'c[0]'], _.methodOf(object));
                         * // => [2, 0]
                         *
                         * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
                         * // => [2, 0]
                         */
                        var methodOf = baseRest(function(object, args) {
                            return function(path) {
                                return baseInvoke(object, path, args);
                            };
                        });

                        /**
                         * Adds all own enumerable string keyed function properties of a source
                         * object to the destination object. If `object` is a function, then methods
                         * are added to its prototype as well.
                         *
                         * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
                         * avoid conflicts caused by modifying the original.
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category Util
                         * @param {Function|Object} [object=lodash] The destination object.
                         * @param {Object} source The object of functions to add.
                         * @param {Object} [options={}] The options object.
                         * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
                         * @returns {Function|Object} Returns `object`.
                         * @example
                         *
                         * function vowels(string) {
	     *   return _.filter(string, function(v) {
	     *     return /[aeiou]/i.test(v);
	     *   });
	     * }
                         *
                         * _.mixin({ 'vowels': vowels });
                         * _.vowels('fred');
                         * // => ['e']
                         *
                         * _('fred').vowels().value();
                         * // => ['e']
                         *
                         * _.mixin({ 'vowels': vowels }, { 'chain': false });
                         * _('fred').vowels();
                         * // => ['e']
                         */
                        function mixin(object, source, options) {
                            var props = keys(source),
                                methodNames = baseFunctions(source, props);

                            if (options == null &&
                                !(isObject(source) && (methodNames.length || !props.length))) {
                                options = source;
                                source = object;
                                object = this;
                                methodNames = baseFunctions(source, keys(source));
                            }
                            var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
                                isFunc = isFunction(object);

                            arrayEach(methodNames, function(methodName) {
                                var func = source[methodName];
                                object[methodName] = func;
                                if (isFunc) {
                                    object.prototype[methodName] = function() {
                                        var chainAll = this.__chain__;
                                        if (chain || chainAll) {
                                            var result = object(this.__wrapped__),
                                                actions = result.__actions__ = copyArray(this.__actions__);

                                            actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
                                            result.__chain__ = chainAll;
                                            return result;
                                        }
                                        return func.apply(object, arrayPush([this.value()], arguments));
                                    };
                                }
                            });

                            return object;
                        }

                        /**
                         * Reverts the `_` variable to its previous value and returns a reference to
                         * the `lodash` function.
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category Util
                         * @returns {Function} Returns the `lodash` function.
                         * @example
                         *
                         * var lodash = _.noConflict();
                         */
                        function noConflict() {
                            if (root._ === this) {
                                root._ = oldDash;
                            }
                            return this;
                        }

                        /**
                         * This method returns `undefined`.
                         *
                         * @static
                         * @memberOf _
                         * @since 2.3.0
                         * @category Util
                         * @example
                         *
                         * _.times(2, _.noop);
                         * // => [undefined, undefined]
                         */
                        function noop() {
                            // No operation performed.
                        }

                        /**
                         * Creates a function that gets the argument at index `n`. If `n` is negative,
                         * the nth argument from the end is returned.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Util
                         * @param {number} [n=0] The index of the argument to return.
                         * @returns {Function} Returns the new pass-thru function.
                         * @example
                         *
                         * var func = _.nthArg(1);
                         * func('a', 'b', 'c', 'd');
                         * // => 'b'
                         *
                         * var func = _.nthArg(-2);
                         * func('a', 'b', 'c', 'd');
                         * // => 'c'
                         */
                        function nthArg(n) {
                            n = toInteger(n);
                            return baseRest(function(args) {
                                return baseNth(args, n);
                            });
                        }

                        /**
                         * Creates a function that invokes `iteratees` with the arguments it receives
                         * and returns their results.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Util
                         * @param {...(Function|Function[])} [iteratees=[_.identity]]
                         *  The iteratees to invoke.
                         * @returns {Function} Returns the new function.
                         * @example
                         *
                         * var func = _.over([Math.max, Math.min]);
                         *
                         * func(1, 2, 3, 4);
                         * // => [4, 1]
                         */
                        var over = createOver(arrayMap);

                        /**
                         * Creates a function that checks if **all** of the `predicates` return
                         * truthy when invoked with the arguments it receives.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Util
                         * @param {...(Function|Function[])} [predicates=[_.identity]]
                         *  The predicates to check.
                         * @returns {Function} Returns the new function.
                         * @example
                         *
                         * var func = _.overEvery([Boolean, isFinite]);
                         *
                         * func('1');
                         * // => true
                         *
                         * func(null);
                         * // => false
                         *
                         * func(NaN);
                         * // => false
                         */
                        var overEvery = createOver(arrayEvery);

                        /**
                         * Creates a function that checks if **any** of the `predicates` return
                         * truthy when invoked with the arguments it receives.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Util
                         * @param {...(Function|Function[])} [predicates=[_.identity]]
                         *  The predicates to check.
                         * @returns {Function} Returns the new function.
                         * @example
                         *
                         * var func = _.overSome([Boolean, isFinite]);
                         *
                         * func('1');
                         * // => true
                         *
                         * func(null);
                         * // => true
                         *
                         * func(NaN);
                         * // => false
                         */
                        var overSome = createOver(arraySome);

                        /**
                         * Creates a function that returns the value at `path` of a given object.
                         *
                         * @static
                         * @memberOf _
                         * @since 2.4.0
                         * @category Util
                         * @param {Array|string} path The path of the property to get.
                         * @returns {Function} Returns the new accessor function.
                         * @example
                         *
                         * var objects = [
                         *   { 'a': { 'b': 2 } },
                         *   { 'a': { 'b': 1 } }
                         * ];
                         *
                         * _.map(objects, _.property('a.b'));
                         * // => [2, 1]
                         *
                         * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
                         * // => [1, 2]
                         */
                        function property(path) {
                            return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
                        }

                        /**
                         * The opposite of `_.property`; this method creates a function that returns
                         * the value at a given path of `object`.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Util
                         * @param {Object} object The object to query.
                         * @returns {Function} Returns the new accessor function.
                         * @example
                         *
                         * var array = [0, 1, 2],
                         *     object = { 'a': array, 'b': array, 'c': array };
                         *
                         * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
                         * // => [2, 0]
                         *
                         * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
                         * // => [2, 0]
                         */
                        function propertyOf(object) {
                            return function(path) {
                                return object == null ? undefined : baseGet(object, path);
                            };
                        }

                        /**
                         * Creates an array of numbers (positive and/or negative) progressing from
                         * `start` up to, but not including, `end`. A step of `-1` is used if a negative
                         * `start` is specified without an `end` or `step`. If `end` is not specified,
                         * it's set to `start` with `start` then set to `0`.
                         *
                         * **Note:** JavaScript follows the IEEE-754 standard for resolving
                         * floating-point values which can produce unexpected results.
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category Util
                         * @param {number} [start=0] The start of the range.
                         * @param {number} end The end of the range.
                         * @param {number} [step=1] The value to increment or decrement by.
                         * @returns {Array} Returns the range of numbers.
                         * @see _.inRange, _.rangeRight
                         * @example
                         *
                         * _.range(4);
                         * // => [0, 1, 2, 3]
                         *
                         * _.range(-4);
                         * // => [0, -1, -2, -3]
                         *
                         * _.range(1, 5);
                         * // => [1, 2, 3, 4]
                         *
                         * _.range(0, 20, 5);
                         * // => [0, 5, 10, 15]
                         *
                         * _.range(0, -4, -1);
                         * // => [0, -1, -2, -3]
                         *
                         * _.range(1, 4, 0);
                         * // => [1, 1, 1]
                         *
                         * _.range(0);
                         * // => []
                         */
                        var range = createRange();

                        /**
                         * This method is like `_.range` except that it populates values in
                         * descending order.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Util
                         * @param {number} [start=0] The start of the range.
                         * @param {number} end The end of the range.
                         * @param {number} [step=1] The value to increment or decrement by.
                         * @returns {Array} Returns the range of numbers.
                         * @see _.inRange, _.range
                         * @example
                         *
                         * _.rangeRight(4);
                         * // => [3, 2, 1, 0]
                         *
                         * _.rangeRight(-4);
                         * // => [-3, -2, -1, 0]
                         *
                         * _.rangeRight(1, 5);
                         * // => [4, 3, 2, 1]
                         *
                         * _.rangeRight(0, 20, 5);
                         * // => [15, 10, 5, 0]
                         *
                         * _.rangeRight(0, -4, -1);
                         * // => [-3, -2, -1, 0]
                         *
                         * _.rangeRight(1, 4, 0);
                         * // => [1, 1, 1]
                         *
                         * _.rangeRight(0);
                         * // => []
                         */
                        var rangeRight = createRange(true);

                        /**
                         * This method returns a new empty array.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.13.0
                         * @category Util
                         * @returns {Array} Returns the new empty array.
                         * @example
                         *
                         * var arrays = _.times(2, _.stubArray);
                         *
                         * console.log(arrays);
                         * // => [[], []]
                         *
                         * console.log(arrays[0] === arrays[1]);
                         * // => false
                         */
                        function stubArray() {
                            return [];
                        }

                        /**
                         * This method returns `false`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.13.0
                         * @category Util
                         * @returns {boolean} Returns `false`.
                         * @example
                         *
                         * _.times(2, _.stubFalse);
                         * // => [false, false]
                         */
                        function stubFalse() {
                            return false;
                        }

                        /**
                         * This method returns a new empty object.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.13.0
                         * @category Util
                         * @returns {Object} Returns the new empty object.
                         * @example
                         *
                         * var objects = _.times(2, _.stubObject);
                         *
                         * console.log(objects);
                         * // => [{}, {}]
                         *
                         * console.log(objects[0] === objects[1]);
                         * // => false
                         */
                        function stubObject() {
                            return {};
                        }

                        /**
                         * This method returns an empty string.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.13.0
                         * @category Util
                         * @returns {string} Returns the empty string.
                         * @example
                         *
                         * _.times(2, _.stubString);
                         * // => ['', '']
                         */
                        function stubString() {
                            return '';
                        }

                        /**
                         * This method returns `true`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.13.0
                         * @category Util
                         * @returns {boolean} Returns `true`.
                         * @example
                         *
                         * _.times(2, _.stubTrue);
                         * // => [true, true]
                         */
                        function stubTrue() {
                            return true;
                        }

                        /**
                         * Invokes the iteratee `n` times, returning an array of the results of
                         * each invocation. The iteratee is invoked with one argument; (index).
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category Util
                         * @param {number} n The number of times to invoke `iteratee`.
                         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                         * @returns {Array} Returns the array of results.
                         * @example
                         *
                         * _.times(3, String);
                         * // => ['0', '1', '2']
                         *
                         *  _.times(4, _.constant(0));
                         * // => [0, 0, 0, 0]
                         */
                        function times(n, iteratee) {
                            n = toInteger(n);
                            if (n < 1 || n > MAX_SAFE_INTEGER) {
                                return [];
                            }
                            var index = MAX_ARRAY_LENGTH,
                                length = nativeMin(n, MAX_ARRAY_LENGTH);

                            iteratee = getIteratee(iteratee);
                            n -= MAX_ARRAY_LENGTH;

                            var result = baseTimes(length, iteratee);
                            while (++index < n) {
                                iteratee(index);
                            }
                            return result;
                        }

                        /**
                         * Converts `value` to a property path array.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Util
                         * @param {*} value The value to convert.
                         * @returns {Array} Returns the new property path array.
                         * @example
                         *
                         * _.toPath('a.b.c');
                         * // => ['a', 'b', 'c']
                         *
                         * _.toPath('a[0].b.c');
                         * // => ['a', '0', 'b', 'c']
                         */
                        function toPath(value) {
                            if (isArray(value)) {
                                return arrayMap(value, toKey);
                            }
                            return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
                        }

                        /**
                         * Generates a unique ID. If `prefix` is given, the ID is appended to it.
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category Util
                         * @param {string} [prefix=''] The value to prefix the ID with.
                         * @returns {string} Returns the unique ID.
                         * @example
                         *
                         * _.uniqueId('contact_');
                         * // => 'contact_104'
                         *
                         * _.uniqueId();
                         * // => '105'
                         */
                        function uniqueId(prefix) {
                            var id = ++idCounter;
                            return toString(prefix) + id;
                        }

                        /*------------------------------------------------------------------------*/

                        /**
                         * Adds two numbers.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.4.0
                         * @category Math
                         * @param {number} augend The first number in an addition.
                         * @param {number} addend The second number in an addition.
                         * @returns {number} Returns the total.
                         * @example
                         *
                         * _.add(6, 4);
                         * // => 10
                         */
                        var add = createMathOperation(function(augend, addend) {
                            return augend + addend;
                        }, 0);

                        /**
                         * Computes `number` rounded up to `precision`.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.10.0
                         * @category Math
                         * @param {number} number The number to round up.
                         * @param {number} [precision=0] The precision to round up to.
                         * @returns {number} Returns the rounded up number.
                         * @example
                         *
                         * _.ceil(4.006);
                         * // => 5
                         *
                         * _.ceil(6.004, 2);
                         * // => 6.01
                         *
                         * _.ceil(6040, -2);
                         * // => 6100
                         */
                        var ceil = createRound('ceil');

                        /**
                         * Divide two numbers.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.7.0
                         * @category Math
                         * @param {number} dividend The first number in a division.
                         * @param {number} divisor The second number in a division.
                         * @returns {number} Returns the quotient.
                         * @example
                         *
                         * _.divide(6, 4);
                         * // => 1.5
                         */
                        var divide = createMathOperation(function(dividend, divisor) {
                            return dividend / divisor;
                        }, 1);

                        /**
                         * Computes `number` rounded down to `precision`.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.10.0
                         * @category Math
                         * @param {number} number The number to round down.
                         * @param {number} [precision=0] The precision to round down to.
                         * @returns {number} Returns the rounded down number.
                         * @example
                         *
                         * _.floor(4.006);
                         * // => 4
                         *
                         * _.floor(0.046, 2);
                         * // => 0.04
                         *
                         * _.floor(4060, -2);
                         * // => 4000
                         */
                        var floor = createRound('floor');

                        /**
                         * Computes the maximum value of `array`. If `array` is empty or falsey,
                         * `undefined` is returned.
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category Math
                         * @param {Array} array The array to iterate over.
                         * @returns {*} Returns the maximum value.
                         * @example
                         *
                         * _.max([4, 2, 8, 6]);
                         * // => 8
                         *
                         * _.max([]);
                         * // => undefined
                         */
                        function max(array) {
                            return (array && array.length)
                                ? baseExtremum(array, identity, baseGt)
                                : undefined;
                        }

                        /**
                         * This method is like `_.max` except that it accepts `iteratee` which is
                         * invoked for each element in `array` to generate the criterion by which
                         * the value is ranked. The iteratee is invoked with one argument: (value).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Math
                         * @param {Array} array The array to iterate over.
                         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                         * @returns {*} Returns the maximum value.
                         * @example
                         *
                         * var objects = [{ 'n': 1 }, { 'n': 2 }];
                         *
                         * _.maxBy(objects, function(o) { return o.n; });
                         * // => { 'n': 2 }
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.maxBy(objects, 'n');
                         * // => { 'n': 2 }
                         */
                        function maxBy(array, iteratee) {
                            return (array && array.length)
                                ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
                                : undefined;
                        }

                        /**
                         * Computes the mean of the values in `array`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Math
                         * @param {Array} array The array to iterate over.
                         * @returns {number} Returns the mean.
                         * @example
                         *
                         * _.mean([4, 2, 8, 6]);
                         * // => 5
                         */
                        function mean(array) {
                            return baseMean(array, identity);
                        }

                        /**
                         * This method is like `_.mean` except that it accepts `iteratee` which is
                         * invoked for each element in `array` to generate the value to be averaged.
                         * The iteratee is invoked with one argument: (value).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.7.0
                         * @category Math
                         * @param {Array} array The array to iterate over.
                         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                         * @returns {number} Returns the mean.
                         * @example
                         *
                         * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
                         *
                         * _.meanBy(objects, function(o) { return o.n; });
                         * // => 5
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.meanBy(objects, 'n');
                         * // => 5
                         */
                        function meanBy(array, iteratee) {
                            return baseMean(array, getIteratee(iteratee, 2));
                        }

                        /**
                         * Computes the minimum value of `array`. If `array` is empty or falsey,
                         * `undefined` is returned.
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category Math
                         * @param {Array} array The array to iterate over.
                         * @returns {*} Returns the minimum value.
                         * @example
                         *
                         * _.min([4, 2, 8, 6]);
                         * // => 2
                         *
                         * _.min([]);
                         * // => undefined
                         */
                        function min(array) {
                            return (array && array.length)
                                ? baseExtremum(array, identity, baseLt)
                                : undefined;
                        }

                        /**
                         * This method is like `_.min` except that it accepts `iteratee` which is
                         * invoked for each element in `array` to generate the criterion by which
                         * the value is ranked. The iteratee is invoked with one argument: (value).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Math
                         * @param {Array} array The array to iterate over.
                         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                         * @returns {*} Returns the minimum value.
                         * @example
                         *
                         * var objects = [{ 'n': 1 }, { 'n': 2 }];
                         *
                         * _.minBy(objects, function(o) { return o.n; });
                         * // => { 'n': 1 }
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.minBy(objects, 'n');
                         * // => { 'n': 1 }
                         */
                        function minBy(array, iteratee) {
                            return (array && array.length)
                                ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
                                : undefined;
                        }

                        /**
                         * Multiply two numbers.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.7.0
                         * @category Math
                         * @param {number} multiplier The first number in a multiplication.
                         * @param {number} multiplicand The second number in a multiplication.
                         * @returns {number} Returns the product.
                         * @example
                         *
                         * _.multiply(6, 4);
                         * // => 24
                         */
                        var multiply = createMathOperation(function(multiplier, multiplicand) {
                            return multiplier * multiplicand;
                        }, 1);

                        /**
                         * Computes `number` rounded to `precision`.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.10.0
                         * @category Math
                         * @param {number} number The number to round.
                         * @param {number} [precision=0] The precision to round to.
                         * @returns {number} Returns the rounded number.
                         * @example
                         *
                         * _.round(4.006);
                         * // => 4
                         *
                         * _.round(4.006, 2);
                         * // => 4.01
                         *
                         * _.round(4060, -2);
                         * // => 4100
                         */
                        var round = createRound('round');

                        /**
                         * Subtract two numbers.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Math
                         * @param {number} minuend The first number in a subtraction.
                         * @param {number} subtrahend The second number in a subtraction.
                         * @returns {number} Returns the difference.
                         * @example
                         *
                         * _.subtract(6, 4);
                         * // => 2
                         */
                        var subtract = createMathOperation(function(minuend, subtrahend) {
                            return minuend - subtrahend;
                        }, 0);

                        /**
                         * Computes the sum of the values in `array`.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.4.0
                         * @category Math
                         * @param {Array} array The array to iterate over.
                         * @returns {number} Returns the sum.
                         * @example
                         *
                         * _.sum([4, 2, 8, 6]);
                         * // => 20
                         */
                        function sum(array) {
                            return (array && array.length)
                                ? baseSum(array, identity)
                                : 0;
                        }

                        /**
                         * This method is like `_.sum` except that it accepts `iteratee` which is
                         * invoked for each element in `array` to generate the value to be summed.
                         * The iteratee is invoked with one argument: (value).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Math
                         * @param {Array} array The array to iterate over.
                         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                         * @returns {number} Returns the sum.
                         * @example
                         *
                         * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
                         *
                         * _.sumBy(objects, function(o) { return o.n; });
                         * // => 20
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.sumBy(objects, 'n');
                         * // => 20
                         */
                        function sumBy(array, iteratee) {
                            return (array && array.length)
                                ? baseSum(array, getIteratee(iteratee, 2))
                                : 0;
                        }

                        /*------------------------------------------------------------------------*/

                        // Add methods that return wrapped values in chain sequences.
                        lodash.after = after;
                        lodash.ary = ary;
                        lodash.assign = assign;
                        lodash.assignIn = assignIn;
                        lodash.assignInWith = assignInWith;
                        lodash.assignWith = assignWith;
                        lodash.at = at;
                        lodash.before = before;
                        lodash.bind = bind;
                        lodash.bindAll = bindAll;
                        lodash.bindKey = bindKey;
                        lodash.castArray = castArray;
                        lodash.chain = chain;
                        lodash.chunk = chunk;
                        lodash.compact = compact;
                        lodash.concat = concat;
                        lodash.cond = cond;
                        lodash.conforms = conforms;
                        lodash.constant = constant;
                        lodash.countBy = countBy;
                        lodash.create = create;
                        lodash.curry = curry;
                        lodash.curryRight = curryRight;
                        lodash.debounce = debounce;
                        lodash.defaults = defaults;
                        lodash.defaultsDeep = defaultsDeep;
                        lodash.defer = defer;
                        lodash.delay = delay;
                        lodash.difference = difference;
                        lodash.differenceBy = differenceBy;
                        lodash.differenceWith = differenceWith;
                        lodash.drop = drop;
                        lodash.dropRight = dropRight;
                        lodash.dropRightWhile = dropRightWhile;
                        lodash.dropWhile = dropWhile;
                        lodash.fill = fill;
                        lodash.filter = filter;
                        lodash.flatMap = flatMap;
                        lodash.flatMapDeep = flatMapDeep;
                        lodash.flatMapDepth = flatMapDepth;
                        lodash.flatten = flatten;
                        lodash.flattenDeep = flattenDeep;
                        lodash.flattenDepth = flattenDepth;
                        lodash.flip = flip;
                        lodash.flow = flow;
                        lodash.flowRight = flowRight;
                        lodash.fromPairs = fromPairs;
                        lodash.functions = functions;
                        lodash.functionsIn = functionsIn;
                        lodash.groupBy = groupBy;
                        lodash.initial = initial;
                        lodash.intersection = intersection;
                        lodash.intersectionBy = intersectionBy;
                        lodash.intersectionWith = intersectionWith;
                        lodash.invert = invert;
                        lodash.invertBy = invertBy;
                        lodash.invokeMap = invokeMap;
                        lodash.iteratee = iteratee;
                        lodash.keyBy = keyBy;
                        lodash.keys = keys;
                        lodash.keysIn = keysIn;
                        lodash.map = map;
                        lodash.mapKeys = mapKeys;
                        lodash.mapValues = mapValues;
                        lodash.matches = matches;
                        lodash.matchesProperty = matchesProperty;
                        lodash.memoize = memoize;
                        lodash.merge = merge;
                        lodash.mergeWith = mergeWith;
                        lodash.method = method;
                        lodash.methodOf = methodOf;
                        lodash.mixin = mixin;
                        lodash.negate = negate;
                        lodash.nthArg = nthArg;
                        lodash.omit = omit;
                        lodash.omitBy = omitBy;
                        lodash.once = once;
                        lodash.orderBy = orderBy;
                        lodash.over = over;
                        lodash.overArgs = overArgs;
                        lodash.overEvery = overEvery;
                        lodash.overSome = overSome;
                        lodash.partial = partial;
                        lodash.partialRight = partialRight;
                        lodash.partition = partition;
                        lodash.pick = pick;
                        lodash.pickBy = pickBy;
                        lodash.property = property;
                        lodash.propertyOf = propertyOf;
                        lodash.pull = pull;
                        lodash.pullAll = pullAll;
                        lodash.pullAllBy = pullAllBy;
                        lodash.pullAllWith = pullAllWith;
                        lodash.pullAt = pullAt;
                        lodash.range = range;
                        lodash.rangeRight = rangeRight;
                        lodash.rearg = rearg;
                        lodash.reject = reject;
                        lodash.remove = remove;
                        lodash.rest = rest;
                        lodash.reverse = reverse;
                        lodash.sampleSize = sampleSize;
                        lodash.set = set;
                        lodash.setWith = setWith;
                        lodash.shuffle = shuffle;
                        lodash.slice = slice;
                        lodash.sortBy = sortBy;
                        lodash.sortedUniq = sortedUniq;
                        lodash.sortedUniqBy = sortedUniqBy;
                        lodash.split = split;
                        lodash.spread = spread;
                        lodash.tail = tail;
                        lodash.take = take;
                        lodash.takeRight = takeRight;
                        lodash.takeRightWhile = takeRightWhile;
                        lodash.takeWhile = takeWhile;
                        lodash.tap = tap;
                        lodash.throttle = throttle;
                        lodash.thru = thru;
                        lodash.toArray = toArray;
                        lodash.toPairs = toPairs;
                        lodash.toPairsIn = toPairsIn;
                        lodash.toPath = toPath;
                        lodash.toPlainObject = toPlainObject;
                        lodash.transform = transform;
                        lodash.unary = unary;
                        lodash.union = union;
                        lodash.unionBy = unionBy;
                        lodash.unionWith = unionWith;
                        lodash.uniq = uniq;
                        lodash.uniqBy = uniqBy;
                        lodash.uniqWith = uniqWith;
                        lodash.unset = unset;
                        lodash.unzip = unzip;
                        lodash.unzipWith = unzipWith;
                        lodash.update = update;
                        lodash.updateWith = updateWith;
                        lodash.values = values;
                        lodash.valuesIn = valuesIn;
                        lodash.without = without;
                        lodash.words = words;
                        lodash.wrap = wrap;
                        lodash.xor = xor;
                        lodash.xorBy = xorBy;
                        lodash.xorWith = xorWith;
                        lodash.zip = zip;
                        lodash.zipObject = zipObject;
                        lodash.zipObjectDeep = zipObjectDeep;
                        lodash.zipWith = zipWith;

                        // Add aliases.
                        lodash.entries = toPairs;
                        lodash.entriesIn = toPairsIn;
                        lodash.extend = assignIn;
                        lodash.extendWith = assignInWith;

                        // Add methods to `lodash.prototype`.
                        mixin(lodash, lodash);

                        /*------------------------------------------------------------------------*/

                        // Add methods that return unwrapped values in chain sequences.
                        lodash.add = add;
                        lodash.attempt = attempt;
                        lodash.camelCase = camelCase;
                        lodash.capitalize = capitalize;
                        lodash.ceil = ceil;
                        lodash.clamp = clamp;
                        lodash.clone = clone;
                        lodash.cloneDeep = cloneDeep;
                        lodash.cloneDeepWith = cloneDeepWith;
                        lodash.cloneWith = cloneWith;
                        lodash.conformsTo = conformsTo;
                        lodash.deburr = deburr;
                        lodash.defaultTo = defaultTo;
                        lodash.divide = divide;
                        lodash.endsWith = endsWith;
                        lodash.eq = eq;
                        lodash.escape = escape;
                        lodash.escapeRegExp = escapeRegExp;
                        lodash.every = every;
                        lodash.find = find;
                        lodash.findIndex = findIndex;
                        lodash.findKey = findKey;
                        lodash.findLast = findLast;
                        lodash.findLastIndex = findLastIndex;
                        lodash.findLastKey = findLastKey;
                        lodash.floor = floor;
                        lodash.forEach = forEach;
                        lodash.forEachRight = forEachRight;
                        lodash.forIn = forIn;
                        lodash.forInRight = forInRight;
                        lodash.forOwn = forOwn;
                        lodash.forOwnRight = forOwnRight;
                        lodash.get = get;
                        lodash.gt = gt;
                        lodash.gte = gte;
                        lodash.has = has;
                        lodash.hasIn = hasIn;
                        lodash.head = head;
                        lodash.identity = identity;
                        lodash.includes = includes;
                        lodash.indexOf = indexOf;
                        lodash.inRange = inRange;
                        lodash.invoke = invoke;
                        lodash.isArguments = isArguments;
                        lodash.isArray = isArray;
                        lodash.isArrayBuffer = isArrayBuffer;
                        lodash.isArrayLike = isArrayLike;
                        lodash.isArrayLikeObject = isArrayLikeObject;
                        lodash.isBoolean = isBoolean;
                        lodash.isBuffer = isBuffer;
                        lodash.isDate = isDate;
                        lodash.isElement = isElement;
                        lodash.isEmpty = isEmpty;
                        lodash.isEqual = isEqual;
                        lodash.isEqualWith = isEqualWith;
                        lodash.isError = isError;
                        lodash.isFinite = isFinite;
                        lodash.isFunction = isFunction;
                        lodash.isInteger = isInteger;
                        lodash.isLength = isLength;
                        lodash.isMap = isMap;
                        lodash.isMatch = isMatch;
                        lodash.isMatchWith = isMatchWith;
                        lodash.isNaN = isNaN;
                        lodash.isNative = isNative;
                        lodash.isNil = isNil;
                        lodash.isNull = isNull;
                        lodash.isNumber = isNumber;
                        lodash.isObject = isObject;
                        lodash.isObjectLike = isObjectLike;
                        lodash.isPlainObject = isPlainObject;
                        lodash.isRegExp = isRegExp;
                        lodash.isSafeInteger = isSafeInteger;
                        lodash.isSet = isSet;
                        lodash.isString = isString;
                        lodash.isSymbol = isSymbol;
                        lodash.isTypedArray = isTypedArray;
                        lodash.isUndefined = isUndefined;
                        lodash.isWeakMap = isWeakMap;
                        lodash.isWeakSet = isWeakSet;
                        lodash.join = join;
                        lodash.kebabCase = kebabCase;
                        lodash.last = last;
                        lodash.lastIndexOf = lastIndexOf;
                        lodash.lowerCase = lowerCase;
                        lodash.lowerFirst = lowerFirst;
                        lodash.lt = lt;
                        lodash.lte = lte;
                        lodash.max = max;
                        lodash.maxBy = maxBy;
                        lodash.mean = mean;
                        lodash.meanBy = meanBy;
                        lodash.min = min;
                        lodash.minBy = minBy;
                        lodash.stubArray = stubArray;
                        lodash.stubFalse = stubFalse;
                        lodash.stubObject = stubObject;
                        lodash.stubString = stubString;
                        lodash.stubTrue = stubTrue;
                        lodash.multiply = multiply;
                        lodash.nth = nth;
                        lodash.noConflict = noConflict;
                        lodash.noop = noop;
                        lodash.now = now;
                        lodash.pad = pad;
                        lodash.padEnd = padEnd;
                        lodash.padStart = padStart;
                        lodash.parseInt = parseInt;
                        lodash.random = random;
                        lodash.reduce = reduce;
                        lodash.reduceRight = reduceRight;
                        lodash.repeat = repeat;
                        lodash.replace = replace;
                        lodash.result = result;
                        lodash.round = round;
                        lodash.runInContext = runInContext;
                        lodash.sample = sample;
                        lodash.size = size;
                        lodash.snakeCase = snakeCase;
                        lodash.some = some;
                        lodash.sortedIndex = sortedIndex;
                        lodash.sortedIndexBy = sortedIndexBy;
                        lodash.sortedIndexOf = sortedIndexOf;
                        lodash.sortedLastIndex = sortedLastIndex;
                        lodash.sortedLastIndexBy = sortedLastIndexBy;
                        lodash.sortedLastIndexOf = sortedLastIndexOf;
                        lodash.startCase = startCase;
                        lodash.startsWith = startsWith;
                        lodash.subtract = subtract;
                        lodash.sum = sum;
                        lodash.sumBy = sumBy;
                        lodash.template = template;
                        lodash.times = times;
                        lodash.toFinite = toFinite;
                        lodash.toInteger = toInteger;
                        lodash.toLength = toLength;
                        lodash.toLower = toLower;
                        lodash.toNumber = toNumber;
                        lodash.toSafeInteger = toSafeInteger;
                        lodash.toString = toString;
                        lodash.toUpper = toUpper;
                        lodash.trim = trim;
                        lodash.trimEnd = trimEnd;
                        lodash.trimStart = trimStart;
                        lodash.truncate = truncate;
                        lodash.unescape = unescape;
                        lodash.uniqueId = uniqueId;
                        lodash.upperCase = upperCase;
                        lodash.upperFirst = upperFirst;

                        // Add aliases.
                        lodash.each = forEach;
                        lodash.eachRight = forEachRight;
                        lodash.first = head;

                        mixin(lodash, (function() {
                            var source = {};
                            baseForOwn(lodash, function(func, methodName) {
                                if (!hasOwnProperty.call(lodash.prototype, methodName)) {
                                    source[methodName] = func;
                                }
                            });
                            return source;
                        }()), { 'chain': false });

                        /*------------------------------------------------------------------------*/

                        /**
                         * The semantic version number.
                         *
                         * @static
                         * @memberOf _
                         * @type {string}
                         */
                        lodash.VERSION = VERSION;

                        // Assign default placeholders.
                        arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
                            lodash[methodName].placeholder = lodash;
                        });

                        // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
                        arrayEach(['drop', 'take'], function(methodName, index) {
                            LazyWrapper.prototype[methodName] = function(n) {
                                n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

                                var result = (this.__filtered__ && !index)
                                    ? new LazyWrapper(this)
                                    : this.clone();

                                if (result.__filtered__) {
                                    result.__takeCount__ = nativeMin(n, result.__takeCount__);
                                } else {
                                    result.__views__.push({
                                        'size': nativeMin(n, MAX_ARRAY_LENGTH),
                                        'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
                                    });
                                }
                                return result;
                            };

                            LazyWrapper.prototype[methodName + 'Right'] = function(n) {
                                return this.reverse()[methodName](n).reverse();
                            };
                        });

                        // Add `LazyWrapper` methods that accept an `iteratee` value.
                        arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
                            var type = index + 1,
                                isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

                            LazyWrapper.prototype[methodName] = function(iteratee) {
                                var result = this.clone();
                                result.__iteratees__.push({
                                    'iteratee': getIteratee(iteratee, 3),
                                    'type': type
                                });
                                result.__filtered__ = result.__filtered__ || isFilter;
                                return result;
                            };
                        });

                        // Add `LazyWrapper` methods for `_.head` and `_.last`.
                        arrayEach(['head', 'last'], function(methodName, index) {
                            var takeName = 'take' + (index ? 'Right' : '');

                            LazyWrapper.prototype[methodName] = function() {
                                return this[takeName](1).value()[0];
                            };
                        });

                        // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
                        arrayEach(['initial', 'tail'], function(methodName, index) {
                            var dropName = 'drop' + (index ? '' : 'Right');

                            LazyWrapper.prototype[methodName] = function() {
                                return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
                            };
                        });

                        LazyWrapper.prototype.compact = function() {
                            return this.filter(identity);
                        };

                        LazyWrapper.prototype.find = function(predicate) {
                            return this.filter(predicate).head();
                        };

                        LazyWrapper.prototype.findLast = function(predicate) {
                            return this.reverse().find(predicate);
                        };

                        LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
                            if (typeof path == 'function') {
                                return new LazyWrapper(this);
                            }
                            return this.map(function(value) {
                                return baseInvoke(value, path, args);
                            });
                        });

                        LazyWrapper.prototype.reject = function(predicate) {
                            return this.filter(negate(getIteratee(predicate)));
                        };

                        LazyWrapper.prototype.slice = function(start, end) {
                            start = toInteger(start);

                            var result = this;
                            if (result.__filtered__ && (start > 0 || end < 0)) {
                                return new LazyWrapper(result);
                            }
                            if (start < 0) {
                                result = result.takeRight(-start);
                            } else if (start) {
                                result = result.drop(start);
                            }
                            if (end !== undefined) {
                                end = toInteger(end);
                                result = end < 0 ? result.dropRight(-end) : result.take(end - start);
                            }
                            return result;
                        };

                        LazyWrapper.prototype.takeRightWhile = function(predicate) {
                            return this.reverse().takeWhile(predicate).reverse();
                        };

                        LazyWrapper.prototype.toArray = function() {
                            return this.take(MAX_ARRAY_LENGTH);
                        };

                        // Add `LazyWrapper` methods to `lodash.prototype`.
                        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
                            var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
                                isTaker = /^(?:head|last)$/.test(methodName),
                                lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
                                retUnwrapped = isTaker || /^find/.test(methodName);

                            if (!lodashFunc) {
                                return;
                            }
                            lodash.prototype[methodName] = function() {
                                var value = this.__wrapped__,
                                    args = isTaker ? [1] : arguments,
                                    isLazy = value instanceof LazyWrapper,
                                    iteratee = args[0],
                                    useLazy = isLazy || isArray(value);

                                var interceptor = function(value) {
                                    var result = lodashFunc.apply(lodash, arrayPush([value], args));
                                    return (isTaker && chainAll) ? result[0] : result;
                                };

                                if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
                                    // Avoid lazy use if the iteratee has a "length" value other than `1`.
                                    isLazy = useLazy = false;
                                }
                                var chainAll = this.__chain__,
                                    isHybrid = !!this.__actions__.length,
                                    isUnwrapped = retUnwrapped && !chainAll,
                                    onlyLazy = isLazy && !isHybrid;

                                if (!retUnwrapped && useLazy) {
                                    value = onlyLazy ? value : new LazyWrapper(this);
                                    var result = func.apply(value, args);
                                    result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
                                    return new LodashWrapper(result, chainAll);
                                }
                                if (isUnwrapped && onlyLazy) {
                                    return func.apply(this, args);
                                }
                                result = this.thru(interceptor);
                                return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
                            };
                        });

                        // Add `Array` methods to `lodash.prototype`.
                        arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
                            var func = arrayProto[methodName],
                                chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
                                retUnwrapped = /^(?:pop|shift)$/.test(methodName);

                            lodash.prototype[methodName] = function() {
                                var args = arguments;
                                if (retUnwrapped && !this.__chain__) {
                                    var value = this.value();
                                    return func.apply(isArray(value) ? value : [], args);
                                }
                                return this[chainName](function(value) {
                                    return func.apply(isArray(value) ? value : [], args);
                                });
                            };
                        });

                        // Map minified method names to their real names.
                        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
                            var lodashFunc = lodash[methodName];
                            if (lodashFunc) {
                                var key = (lodashFunc.name + ''),
                                    names = realNames[key] || (realNames[key] = []);

                                names.push({ 'name': methodName, 'func': lodashFunc });
                            }
                        });

                        realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
                            'name': 'wrapper',
                            'func': undefined
                        }];

                        // Add methods to `LazyWrapper`.
                        LazyWrapper.prototype.clone = lazyClone;
                        LazyWrapper.prototype.reverse = lazyReverse;
                        LazyWrapper.prototype.value = lazyValue;

                        // Add chain sequence methods to the `lodash` wrapper.
                        lodash.prototype.at = wrapperAt;
                        lodash.prototype.chain = wrapperChain;
                        lodash.prototype.commit = wrapperCommit;
                        lodash.prototype.next = wrapperNext;
                        lodash.prototype.plant = wrapperPlant;
                        lodash.prototype.reverse = wrapperReverse;
                        lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

                        // Add lazy aliases.
                        lodash.prototype.first = lodash.prototype.head;

                        if (symIterator) {
                            lodash.prototype[symIterator] = wrapperToIterator;
                        }
                        return lodash;
                    });

                    /*--------------------------------------------------------------------------*/

                    // Export lodash.
                    var _ = runInContext();

                    // Some AMD build optimizers, like r.js, check for condition patterns like:
                    if (true) {
                        // Expose Lodash on the global object to prevent errors when Lodash is
                        // loaded by a script tag in the presence of an AMD loader.
                        // See http://requirejs.org/docs/errors.html#mismatch for more details.
                        // Use `_.noConflict` to remove Lodash from the global object.
                        root._ = _;

                        // Define as an anonymous module so, through path mapping, it can be
                        // referenced as the "underscore" module.
                        !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
                            return _;
                        }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
                    }
                    // Check for `exports` after `define` in case a build optimizer adds it.
                    else if (freeModule) {
                        // Export for Node.js.
                        (freeModule.exports = _)._ = _;
                        // Export for CommonJS support.
                        freeExports._ = _;
                    }
                    else {
                        // Export to the global object.
                        root._ = _;
                    }
                }.call(this));

                /* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(8)(module)))

            /***/ }),
        /* 8 */
        /***/ (function(module, exports) {

            module.exports = function(module) {
                if(!module.webpackPolyfill) {
                    module.deprecate = function() {};
                    module.paths = [];
                    // module.parent = undefined by default
                    module.children = [];
                    module.webpackPolyfill = 1;
                }
                return module;
            }


            /***/ }),
        /* 9 */
        /***/ (function(module, exports, __webpack_require__) {

            /* jslint node: true */
            'use strict';

            var _ = __webpack_require__(7);

            _.noConflict();

            function typeName(bold, italics) {
                var type = 'normal';
                if (bold && italics) {
                    type = 'bolditalics';
                } else if (bold) {
                    type = 'bold';
                } else if (italics) {
                    type = 'italics';
                }
                return type;
            }

            function FontProvider(fontDescriptors, pdfKitDoc) {
                this.fonts = {};
                this.pdfKitDoc = pdfKitDoc;
                this.fontCache = {};

                for (var font in fontDescriptors) {
                    if (fontDescriptors.hasOwnProperty(font)) {
                        var fontDef = fontDescriptors[font];

                        this.fonts[font] = {
                            normal: fontDef.normal,
                            bold: fontDef.bold,
                            italics: fontDef.italics,
                            bolditalics: fontDef.bolditalics
                        };
                    }
                }
            }

            FontProvider.prototype.provideFont = function (familyName, bold, italics) {
                var type = typeName(bold, italics);
                if (!this.fonts[familyName] || !this.fonts[familyName][type]) {
                    throw new Error('Font \'' + familyName + '\' in style \'' + type + '\' is not defined in the font section of the document definition.');
                }

                this.fontCache[familyName] = this.fontCache[familyName] || {};

                if (!this.fontCache[familyName][type]) {
                    var def = this.fonts[familyName][type];
                    if (!Array.isArray(def)) {
                        def = [def];
                    }
                    this.fontCache[familyName][type] = this.pdfKitDoc.font.apply(this.pdfKitDoc, def)._font;
                }

                return this.fontCache[familyName][type];
            };

            module.exports = FontProvider;


            /***/ }),
        /* 10 */
        /***/ (function(module, exports, __webpack_require__) {

            /* jslint node: true */
            'use strict';

            var _ = __webpack_require__(7);
            var TraversalTracker = __webpack_require__(11);
            var DocPreprocessor = __webpack_require__(12);
            var DocMeasure = __webpack_require__(14);
            var DocumentContext = __webpack_require__(25);
            var PageElementWriter = __webpack_require__(26);
            var ColumnCalculator = __webpack_require__(23);
            var TableProcessor = __webpack_require__(29);
            var Line = __webpack_require__(28);
            var pack = __webpack_require__(13).pack;
            var offsetVector = __webpack_require__(13).offsetVector;
            var fontStringify = __webpack_require__(13).fontStringify;
            var isFunction = __webpack_require__(13).isFunction;
            var TextTools = __webpack_require__(15);
            var StyleContextStack = __webpack_require__(22);

            function addAll(target, otherArray) {
                _.each(otherArray, function (item) {
                    target.push(item);
                });
            }

            /**
             * Creates an instance of LayoutBuilder - layout engine which turns document-definition-object
             * into a set of pages, lines, inlines and vectors ready to be rendered into a PDF
             *
             * @param {Object} pageSize - an object defining page width and height
             * @param {Object} pageMargins - an object defining top, left, right and bottom margins
             */
            function LayoutBuilder(pageSize, pageMargins, imageMeasure) {
                this.pageSize = pageSize;
                this.pageMargins = pageMargins;
                this.tracker = new TraversalTracker();
                this.imageMeasure = imageMeasure;
                this.tableLayouts = {};
            }

            LayoutBuilder.prototype.registerTableLayouts = function (tableLayouts) {
                this.tableLayouts = pack(this.tableLayouts, tableLayouts);
            };

            /**
             * Executes layout engine on document-definition-object and creates an array of pages
             * containing positioned Blocks, Lines and inlines
             *
             * @param {Object} docStructure document-definition-object
             * @param {Object} fontProvider font provider
             * @param {Object} styleDictionary dictionary with style definitions
             * @param {Object} defaultStyle default style definition
             * @return {Array} an array of pages
             */
            LayoutBuilder.prototype.layoutDocument = function (docStructure, fontProvider, styleDictionary, defaultStyle, background, header, footer, images, watermark, pageBreakBeforeFct) {

                function addPageBreaksIfNecessary(linearNodeList, pages) {

                    if (!isFunction(pageBreakBeforeFct)) {
                        return false;
                    }

                    linearNodeList = _.reject(linearNodeList, function (node) {
                        return _.isEmpty(node.positions);
                    });

                    _.each(linearNodeList, function (node) {
                        var nodeInfo = _.pick(node, [
                            'id', 'text', 'ul', 'ol', 'table', 'image', 'qr', 'canvas', 'columns',
                            'headlineLevel', 'style', 'pageBreak', 'pageOrientation',
                            'width', 'height'
                        ]);
                        nodeInfo.startPosition = _.first(node.positions);
                        nodeInfo.pageNumbers = _.chain(node.positions).map('pageNumber').uniq().value();
                        nodeInfo.pages = pages.length;
                        nodeInfo.stack = _.isArray(node.stack);

                        node.nodeInfo = nodeInfo;
                    });

                    return _.some(linearNodeList, function (node, index, followingNodeList) {
                        if (node.pageBreak !== 'before' && !node.pageBreakCalculated) {
                            node.pageBreakCalculated = true;
                            var pageNumber = _.first(node.nodeInfo.pageNumbers);

                            var followingNodesOnPage = _.chain(followingNodeList).drop(index + 1).filter(function (node0) {
                                return _.includes(node0.nodeInfo.pageNumbers, pageNumber);
                            }).value();

                            var nodesOnNextPage = _.chain(followingNodeList).drop(index + 1).filter(function (node0) {
                                return _.includes(node0.nodeInfo.pageNumbers, pageNumber + 1);
                            }).value();

                            var previousNodesOnPage = _.chain(followingNodeList).take(index).filter(function (node0) {
                                return _.includes(node0.nodeInfo.pageNumbers, pageNumber);
                            }).value();

                            if (pageBreakBeforeFct(node.nodeInfo,
                                    _.map(followingNodesOnPage, 'nodeInfo'),
                                    _.map(nodesOnNextPage, 'nodeInfo'),
                                    _.map(previousNodesOnPage, 'nodeInfo'))) {
                                node.pageBreak = 'before';
                                return true;
                            }
                        }
                    });
                }

                this.docPreprocessor = new DocPreprocessor();
                this.docMeasure = new DocMeasure(fontProvider, styleDictionary, defaultStyle, this.imageMeasure, this.tableLayouts, images);


                function resetXYs(result) {
                    _.each(result.linearNodeList, function (node) {
                        node.resetXY();
                    });
                }

                var result = this.tryLayoutDocument(docStructure, fontProvider, styleDictionary, defaultStyle, background, header, footer, images, watermark);
                while (addPageBreaksIfNecessary(result.linearNodeList, result.pages)) {
                    resetXYs(result);
                    result = this.tryLayoutDocument(docStructure, fontProvider, styleDictionary, defaultStyle, background, header, footer, images, watermark);
                }

                return result.pages;
            };

            LayoutBuilder.prototype.tryLayoutDocument = function (docStructure, fontProvider, styleDictionary, defaultStyle, background, header, footer, images, watermark, pageBreakBeforeFct) {

                this.linearNodeList = [];
                docStructure = this.docPreprocessor.preprocessDocument(docStructure);
                docStructure = this.docMeasure.measureDocument(docStructure);

                this.writer = new PageElementWriter(
                    new DocumentContext(this.pageSize, this.pageMargins), this.tracker);

                var _this = this;
                this.writer.context().tracker.startTracking('pageAdded', function () {
                    _this.addBackground(background);
                });

                this.addBackground(background);
                this.processNode(docStructure);
                this.addHeadersAndFooters(header, footer);
                /* jshint eqnull:true */
                if (watermark != null) {
                    this.addWatermark(watermark, fontProvider, defaultStyle);
                }

                return {pages: this.writer.context().pages, linearNodeList: this.linearNodeList};
            };


            LayoutBuilder.prototype.addBackground = function (background) {
                var backgroundGetter = isFunction(background) ? background : function () {
                    return background;
                };

                var pageBackground = backgroundGetter(this.writer.context().page + 1);

                if (pageBackground) {
                    var pageSize = this.writer.context().getCurrentPage().pageSize;
                    this.writer.beginUnbreakableBlock(pageSize.width, pageSize.height);
                    pageBackground = this.docPreprocessor.preprocessDocument(pageBackground);
                    this.processNode(this.docMeasure.measureDocument(pageBackground));
                    this.writer.commitUnbreakableBlock(0, 0);
                }
            };

            LayoutBuilder.prototype.addStaticRepeatable = function (headerOrFooter, sizeFunction) {
                this.addDynamicRepeatable(function () {
                    return JSON.parse(JSON.stringify(headerOrFooter)); // copy to new object
                }, sizeFunction);
            };

            LayoutBuilder.prototype.addDynamicRepeatable = function (nodeGetter, sizeFunction) {
                var pages = this.writer.context().pages;

                for (var pageIndex = 0, l = pages.length; pageIndex < l; pageIndex++) {
                    this.writer.context().page = pageIndex;

                    var node = nodeGetter(pageIndex + 1, l, this.writer.context().pages[pageIndex].pageSize);

                    if (node) {
                        var sizes = sizeFunction(this.writer.context().getCurrentPage().pageSize, this.pageMargins);
                        this.writer.beginUnbreakableBlock(sizes.width, sizes.height);
                        node = this.docPreprocessor.preprocessDocument(node);
                        this.processNode(this.docMeasure.measureDocument(node));
                        this.writer.commitUnbreakableBlock(sizes.x, sizes.y);
                    }
                }
            };

            LayoutBuilder.prototype.addHeadersAndFooters = function (header, footer) {
                var headerSizeFct = function (pageSize, pageMargins) {
                    return {
                        x: 0,
                        y: 0,
                        width: pageSize.width,
                        height: pageMargins.top
                    };
                };

                var footerSizeFct = function (pageSize, pageMargins) {
                    return {
                        x: 0,
                        y: pageSize.height - pageMargins.bottom,
                        width: pageSize.width,
                        height: pageMargins.bottom
                    };
                };

                if (isFunction(header)) {
                    this.addDynamicRepeatable(header, headerSizeFct);
                } else if (header) {
                    this.addStaticRepeatable(header, headerSizeFct);
                }

                if (isFunction(footer)) {
                    this.addDynamicRepeatable(footer, footerSizeFct);
                } else if (footer) {
                    this.addStaticRepeatable(footer, footerSizeFct);
                }
            };

            LayoutBuilder.prototype.addWatermark = function (watermark, fontProvider, defaultStyle) {
                if (typeof watermark === 'string') {
                    watermark = {'text': watermark};
                }

                if (!watermark.text) { // empty watermark text
                    return;
                }

                watermark.font = watermark.font || defaultStyle.font || 'Roboto';
                watermark.color = watermark.color || 'black';
                watermark.opacity = watermark.opacity || 0.6;
                watermark.bold = watermark.bold || false;
                watermark.italics = watermark.italics || false;

                var watermarkObject = {
                    text: watermark.text,
                    font: fontProvider.provideFont(watermark.font, watermark.bold, watermark.italics),
                    size: getSize(this.pageSize, watermark, fontProvider),
                    color: watermark.color,
                    opacity: watermark.opacity
                };

                var pages = this.writer.context().pages;
                for (var i = 0, l = pages.length; i < l; i++) {
                    pages[i].watermark = watermarkObject;
                }

                function getSize(pageSize, watermark, fontProvider) {
                    var width = pageSize.width;
                    var height = pageSize.height;
                    var targetWidth = Math.sqrt(width * width + height * height) * 0.8; /* page diagonal * sample factor */
                    var textTools = new TextTools(fontProvider);
                    var styleContextStack = new StyleContextStack(null, {font: watermark.font, bold: watermark.bold, italics: watermark.italics});
                    var size;

                    /**
                     * Binary search the best font size.
                     * Initial bounds [0, 1000]
                     * Break when range < 1
                     */
                    var a = 0;
                    var b = 1000;
                    var c = (a + b) / 2;
                    while (Math.abs(a - b) > 1) {
                        styleContextStack.push({
                            fontSize: c
                        });
                        size = textTools.sizeOfString(watermark.text, styleContextStack);
                        if (size.width > targetWidth) {
                            b = c;
                            c = (a + b) / 2;
                        } else if (size.width < targetWidth) {
                            a = c;
                            c = (a + b) / 2;
                        }
                        styleContextStack.pop();
                    }
                    /*
                     End binary search
                     */
                    return {size: size, fontSize: c};
                }
            };

            function decorateNode(node) {
                var x = node.x, y = node.y;
                node.positions = [];

                _.each(node.canvas, function (vector) {
                    var x = vector.x, y = vector.y, x1 = vector.x1, y1 = vector.y1, x2 = vector.x2, y2 = vector.y2;
                    vector.resetXY = function () {
                        vector.x = x;
                        vector.y = y;
                        vector.x1 = x1;
                        vector.y1 = y1;
                        vector.x2 = x2;
                        vector.y2 = y2;
                    };
                });

                node.resetXY = function () {
                    node.x = x;
                    node.y = y;
                    _.each(node.canvas, function (vector) {
                        vector.resetXY();
                    });
                };
            }

            LayoutBuilder.prototype.processNode = function (node) {
                var self = this;

                this.linearNodeList.push(node);
                decorateNode(node);

                applyMargins(function () {
                    var unbreakable = node.unbreakable;
                    if (unbreakable) {
                        self.writer.beginUnbreakableBlock();
                    }

                    var absPosition = node.absolutePosition;
                    if (absPosition) {
                        self.writer.context().beginDetachedBlock();
                        self.writer.context().moveTo(absPosition.x || 0, absPosition.y || 0);
                    }

                    var relPosition = node.relativePosition;
                    if (relPosition) {
                        self.writer.context().beginDetachedBlock();
                        self.writer.context().moveTo((relPosition.x || 0) + self.writer.context().x, (relPosition.y || 0) + self.writer.context().y);
                    }

                    if (node.stack) {
                        self.processVerticalContainer(node);
                    } else if (node.columns) {
                        self.processColumns(node);
                    } else if (node.ul) {
                        self.processList(false, node);
                    } else if (node.ol) {
                        self.processList(true, node);
                    } else if (node.table) {
                        self.processTable(node);
                    } else if (node.text !== undefined) {
                        self.processLeaf(node);
                    } else if (node.toc) {
                        self.processToc(node);
                    } else if (node.image) {
                        self.processImage(node);
                    } else if (node.canvas) {
                        self.processCanvas(node);
                    } else if (node.qr) {
                        self.processQr(node);
                    } else if (!node._span) {
                        throw 'Unrecognized document structure: ' + JSON.stringify(node, fontStringify);
                    }

                    if (absPosition || relPosition) {
                        self.writer.context().endDetachedBlock();
                    }

                    if (unbreakable) {
                        self.writer.commitUnbreakableBlock();
                    }
                });

                function applyMargins(callback) {
                    var margin = node._margin;

                    if (node.pageBreak === 'before') {
                        self.writer.moveToNextPage(node.pageOrientation);
                    }

                    if (margin) {
                        self.writer.context().moveDown(margin[1]);
                        self.writer.context().addMargin(margin[0], margin[2]);
                    }

                    callback();

                    if (margin) {
                        self.writer.context().addMargin(-margin[0], -margin[2]);
                        self.writer.context().moveDown(margin[3]);
                    }

                    if (node.pageBreak === 'after') {
                        self.writer.moveToNextPage(node.pageOrientation);
                    }
                }
            };

            // vertical container
            LayoutBuilder.prototype.processVerticalContainer = function (node) {
                var self = this;
                node.stack.forEach(function (item) {
                    self.processNode(item);
                    addAll(node.positions, item.positions);

                    //TODO: paragraph gap
                });
            };

            // columns
            LayoutBuilder.prototype.processColumns = function (columnNode) {
                var columns = columnNode.columns;
                var availableWidth = this.writer.context().availableWidth;
                var gaps = gapArray(columnNode._gap);

                if (gaps) {
                    availableWidth -= (gaps.length - 1) * columnNode._gap;
                }

                ColumnCalculator.buildColumnWidths(columns, availableWidth);
                var result = this.processRow(columns, columns, gaps);
                addAll(columnNode.positions, result.positions);


                function gapArray(gap) {
                    if (!gap) {
                        return null;
                    }

                    var gaps = [];
                    gaps.push(0);

                    for (var i = columns.length - 1; i > 0; i--) {
                        gaps.push(gap);
                    }

                    return gaps;
                }
            };

            LayoutBuilder.prototype.processRow = function (columns, widths, gaps, tableBody, tableRow) {
                var self = this;
                var pageBreaks = [], positions = [];

                this.tracker.auto('pageChanged', storePageBreakData, function () {
                    widths = widths || columns;

                    self.writer.context().beginColumnGroup();

                    for (var i = 0, l = columns.length; i < l; i++) {
                        var column = columns[i];
                        var width = widths[i]._calcWidth;
                        var leftOffset = colLeftOffset(i);

                        if (column.colSpan && column.colSpan > 1) {
                            for (var j = 1; j < column.colSpan; j++) {
                                width += widths[++i]._calcWidth + gaps[i];
                            }
                        }

                        self.writer.context().beginColumn(width, leftOffset, getEndingCell(column, i));
                        if (!column._span) {
                            self.processNode(column);
                            addAll(positions, column.positions);
                        } else if (column._columnEndingContext) {
                            // row-span ending
                            self.writer.context().markEnding(column);
                        }
                    }

                    self.writer.context().completeColumnGroup();
                });

                return {pageBreaks: pageBreaks, positions: positions};

                function storePageBreakData(data) {
                    var pageDesc;

                    for (var i = 0, l = pageBreaks.length; i < l; i++) {
                        var desc = pageBreaks[i];
                        if (desc.prevPage === data.prevPage) {
                            pageDesc = desc;
                            break;
                        }
                    }

                    if (!pageDesc) {
                        pageDesc = data;
                        pageBreaks.push(pageDesc);
                    }
                    pageDesc.prevY = Math.max(pageDesc.prevY, data.prevY);
                    pageDesc.y = Math.min(pageDesc.y, data.y);
                }

                function colLeftOffset(i) {
                    if (gaps && gaps.length > i) {
                        return gaps[i];
                    }
                    return 0;
                }

                function getEndingCell(column, columnIndex) {
                    if (column.rowSpan && column.rowSpan > 1) {
                        var endingRow = tableRow + column.rowSpan - 1;
                        if (endingRow >= tableBody.length) {
                            throw 'Row span for column ' + columnIndex + ' (with indexes starting from 0) exceeded row count';
                        }
                        return tableBody[endingRow][columnIndex];
                    }

                    return null;
                }
            };

            // lists
            LayoutBuilder.prototype.processList = function (orderedList, node) {
                var self = this,
                    items = orderedList ? node.ol : node.ul,
                    gapSize = node._gapSize;

                this.writer.context().addMargin(gapSize.width);

                var nextMarker;
                this.tracker.auto('lineAdded', addMarkerToFirstLeaf, function () {
                    items.forEach(function (item) {
                        nextMarker = item.listMarker;
                        self.processNode(item);
                        addAll(node.positions, item.positions);
                    });
                });

                this.writer.context().addMargin(-gapSize.width);

                function addMarkerToFirstLeaf(line) {
                    // I'm not very happy with the way list processing is implemented
                    // (both code and algorithm should be rethinked)
                    if (nextMarker) {
                        var marker = nextMarker;
                        nextMarker = null;

                        if (marker.canvas) {
                            var vector = marker.canvas[0];

                            offsetVector(vector, -marker._minWidth, 0);
                            self.writer.addVector(vector);
                        } else if (marker._inlines) {
                            var markerLine = new Line(self.pageSize.width);
                            markerLine.addInline(marker._inlines[0]);
                            markerLine.x = -marker._minWidth;
                            markerLine.y = line.getAscenderHeight() - markerLine.getAscenderHeight();
                            self.writer.addLine(markerLine, true);
                        }
                    }
                }
            };

            // tables
            LayoutBuilder.prototype.processTable = function (tableNode) {
                var processor = new TableProcessor(tableNode);

                processor.beginTable(this.writer);

                for (var i = 0, l = tableNode.table.body.length; i < l; i++) {
                    processor.beginRow(i, this.writer);

                    var result = this.processRow(tableNode.table.body[i], tableNode.table.widths, tableNode._offsets.offsets, tableNode.table.body, i);
                    addAll(tableNode.positions, result.positions);

                    processor.endRow(i, this.writer, result.pageBreaks);
                }

                processor.endTable(this.writer);
            };

            // leafs (texts)
            LayoutBuilder.prototype.processLeaf = function (node) {
                var line = this.buildNextLine(node);
                var currentHeight = (line) ? line.getHeight() : 0;
                var maxHeight = node.maxHeight || -1;

                if (node._tocItemRef) {
                    line._tocItemNode = node._tocItemRef;
                }

                while (line && (maxHeight === -1 || currentHeight < maxHeight)) {
                    var positions = this.writer.addLine(line);
                    node.positions.push(positions);
                    line = this.buildNextLine(node);
                    if (line) {
                        currentHeight += line.getHeight();
                    }
                }
            };

            LayoutBuilder.prototype.processToc = function (node) {
                if (node.toc.title) {
                    this.processNode(node.toc.title);
                }
                this.processNode(node.toc._table);
            };

            LayoutBuilder.prototype.buildNextLine = function (textNode) {

                function cloneInline(inline) {
                    var newInline = inline.constructor();
                    for (var key in inline) {
                        newInline[key] = inline[key];
                    }
                    return newInline;
                }

                if (!textNode._inlines || textNode._inlines.length === 0) {
                    return null;
                }

                var line = new Line(this.writer.context().availableWidth);
                var textTools = new TextTools(null);

                while (textNode._inlines && textNode._inlines.length > 0 && line.hasEnoughSpaceForInline(textNode._inlines[0])) {
                    var inline = textNode._inlines.shift();

                    if (!inline.noWrap && inline.text.length > 1 && inline.width > line.maxWidth) {
                        var widthPerChar = inline.width / inline.text.length;
                        var maxChars = Math.floor(line.maxWidth / widthPerChar);
                        if (maxChars < 1) {
                            maxChars = 1;
                        }
                        if (maxChars < inline.text.length) {
                            var newInline = cloneInline(inline);

                            newInline.text = inline.text.substr(maxChars);
                            inline.text = inline.text.substr(0, maxChars);

                            newInline.width = textTools.widthOfString(newInline.text, newInline.font, newInline.fontSize, newInline.characterSpacing);
                            inline.width = textTools.widthOfString(inline.text, inline.font, inline.fontSize, inline.characterSpacing);

                            textNode._inlines.unshift(newInline);
                        }
                    }

                    line.addInline(inline);
                }

                line.lastLineInParagraph = textNode._inlines.length === 0;

                return line;
            };

            // images
            LayoutBuilder.prototype.processImage = function (node) {
                var position = this.writer.addImage(node);
                node.positions.push(position);
            };

            LayoutBuilder.prototype.processCanvas = function (node) {
                var height = node._minHeight;

                if (this.writer.context().availableHeight < height) {
                    // TODO: support for canvas larger than a page
                    // TODO: support for other overflow methods

                    this.writer.moveToNextPage();
                }

                node.canvas.forEach(function (vector) {
                    var position = this.writer.addVector(vector);
                    node.positions.push(position);
                }, this);

                this.writer.context().moveDown(height);
            };

            LayoutBuilder.prototype.processQr = function (node) {
                var position = this.writer.addQr(node);
                node.positions.push(position);
            };

            module.exports = LayoutBuilder;


            /***/ }),
        /* 11 */
        /***/ (function(module, exports) {

            /* jslint node: true */
            'use strict';

            /**
             * Creates an instance of TraversalTracker
             *
             * @constructor
             */
            function TraversalTracker() {
                this.events = {};
            }

            TraversalTracker.prototype.startTracking = function (event, cb) {
                var callbacks = (this.events[event] || (this.events[event] = []));

                if (callbacks.indexOf(cb) < 0) {
                    callbacks.push(cb);
                }
            };

            TraversalTracker.prototype.stopTracking = function (event, cb) {
                var callbacks = this.events[event];

                if (callbacks) {
                    var index = callbacks.indexOf(cb);
                    if (index >= 0) {
                        callbacks.splice(index, 1);
                    }
                }
            };

            TraversalTracker.prototype.emit = function (event) {
                var args = Array.prototype.slice.call(arguments, 1);

                var callbacks = this.events[event];

                if (callbacks) {
                    callbacks.forEach(function (cb) {
                        cb.apply(this, args);
                    });
                }
            };

            TraversalTracker.prototype.auto = function (event, cb, innerBlock) {
                this.startTracking(event, cb);
                innerBlock();
                this.stopTracking(event, cb);
            };

            module.exports = TraversalTracker;


            /***/ }),
        /* 12 */
        /***/ (function(module, exports, __webpack_require__) {

            /* jslint node: true */
            'use strict';

            var fontStringify = __webpack_require__(13).fontStringify;

            function DocPreprocessor() {

            }

            DocPreprocessor.prototype.preprocessDocument = function (docStructure) {
                this.tocs = [];
                return this.preprocessNode(docStructure);
            };

            DocPreprocessor.prototype.preprocessNode = function (node) {
                // expand shortcuts and casting values
                if (Array.isArray(node)) {
                    node = {stack: node};
                } else if (typeof node === 'string' || node instanceof String) {
                    node = {text: node};
                } else if (typeof node === 'number' || typeof node === 'boolean') {
                    node = {text: node.toString()};
                } else if (node === null) {
                    node = {text: ''};
                } else if (Object.keys(node).length === 0) { // empty object
                    node = {text: ''};
                }

                if (node.columns) {
                    return this.preprocessColumns(node);
                } else if (node.stack) {
                    return this.preprocessVerticalContainer(node);
                } else if (node.ul) {
                    return this.preprocessList(node);
                } else if (node.ol) {
                    return this.preprocessList(node);
                } else if (node.table) {
                    return this.preprocessTable(node);
                } else if (node.text !== undefined) {
                    return this.preprocessText(node);
                } else if (node.toc) {
                    return this.preprocessToc(node);
                } else if (node.image) {
                    return this.preprocessImage(node);
                } else if (node.canvas) {
                    return this.preprocessCanvas(node);
                } else if (node.qr) {
                    return this.preprocessQr(node);
                } else {
                    throw 'Unrecognized document structure: ' + JSON.stringify(node, fontStringify);
                }
            };

            DocPreprocessor.prototype.preprocessColumns = function (node) {
                var columns = node.columns;

                for (var i = 0, l = columns.length; i < l; i++) {
                    columns[i] = this.preprocessNode(columns[i]);
                }

                return node;
            };

            DocPreprocessor.prototype.preprocessVerticalContainer = function (node) {
                var items = node.stack;

                for (var i = 0, l = items.length; i < l; i++) {
                    items[i] = this.preprocessNode(items[i]);
                }

                return node;
            };

            DocPreprocessor.prototype.preprocessList = function (node) {
                var items = node.ul || node.ol;

                for (var i = 0, l = items.length; i < l; i++) {
                    items[i] = this.preprocessNode(items[i]);
                }

                return node;
            };

            DocPreprocessor.prototype.preprocessTable = function (node) {
                var col, row, cols, rows;

                for (col = 0, cols = node.table.body[0].length; col < cols; col++) {
                    for (row = 0, rows = node.table.body.length; row < rows; row++) {
                        var rowData = node.table.body[row];
                        var data = rowData[col];
                        if (data !== undefined) {
                            if (data === null) { // transform to object
                                data = '';
                            }
                            if (!data._span) {
                                rowData[col] = this.preprocessNode(data);
                            }
                        }
                    }
                }

                return node;
            };

            DocPreprocessor.prototype.preprocessText = function (node) {
                if (node.tocItem) {
                    if (!Array.isArray(node.tocItem)) {
                        node.tocItem = [node.tocItem];
                    }

                    for (var i = 0, l = node.tocItem.length; i < l; i++) {
                        if (!(typeof node.tocItem[i] === 'string' || node.tocItem[i] instanceof String)) {
                            node.tocItem[i] = '_default_';
                        }

                        var tocItemId = node.tocItem[i];

                        if (!this.tocs[tocItemId]) {
                            this.tocs[tocItemId] = {toc: {_items: [], _pseudo: true}};
                        }

                        this.tocs[tocItemId].toc._items.push(node);
                    }
                }

                return node;
            };

            DocPreprocessor.prototype.preprocessToc = function (node) {
                if (!node.toc.id) {
                    node.toc.id = '_default_';
                }

                node.toc.title = node.toc.title ? this.preprocessNode(node.toc.title) : null;
                node.toc._items = [];

                if (this.tocs[node.toc.id]) {
                    if (!this.tocs[node.toc.id].toc._pseudo) {
                        throw "TOC '" + node.toc.id + "' already exists";
                    }

                    node.toc._items = this.tocs[node.toc.id].toc._items;
                }

                this.tocs[node.toc.id] = node;

                return node;
            };

            DocPreprocessor.prototype.preprocessImage = function (node) {
                return node;
            };

            DocPreprocessor.prototype.preprocessCanvas = function (node) {
                return node;
            };

            DocPreprocessor.prototype.preprocessQr = function (node) {
                return node;
            };

            module.exports = DocPreprocessor;

            /***/ }),
        /* 13 */
        /***/ (function(module, exports) {

            /* jslint node: true */
            'use strict';

            function pack() {
                var result = {};

                for (var i = 0, l = arguments.length; i < l; i++) {
                    var obj = arguments[i];

                    if (obj) {
                        for (var key in obj) {
                            if (obj.hasOwnProperty(key)) {
                                result[key] = obj[key];
                            }
                        }
                    }
                }

                return result;
            }

            function offsetVector(vector, x, y) {
                switch (vector.type) {
                    case 'ellipse':
                    case 'rect':
                        vector.x += x;
                        vector.y += y;
                        break;
                    case 'line':
                        vector.x1 += x;
                        vector.x2 += x;
                        vector.y1 += y;
                        vector.y2 += y;
                        break;
                    case 'polyline':
                        for (var i = 0, l = vector.points.length; i < l; i++) {
                            vector.points[i].x += x;
                            vector.points[i].y += y;
                        }
                        break;
                }
            }

            function fontStringify(key, val) {
                if (key === 'font') {
                    return 'font';
                }
                return val;
            }

            function isFunction(functionToCheck) {
                var getType = {};
                return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
            }


            module.exports = {
                pack: pack,
                fontStringify: fontStringify,
                offsetVector: offsetVector,
                isFunction: isFunction
            };


            /***/ }),
        /* 14 */
        /***/ (function(module, exports, __webpack_require__) {

            /* jslint node: true */
            'use strict';

            var TextTools = __webpack_require__(15);
            var StyleContextStack = __webpack_require__(22);
            var ColumnCalculator = __webpack_require__(23);
            var fontStringify = __webpack_require__(13).fontStringify;
            var pack = __webpack_require__(13).pack;
            var qrEncoder = __webpack_require__(24);

            /**
             * @private
             */
            function DocMeasure(fontProvider, styleDictionary, defaultStyle, imageMeasure, tableLayouts, images) {
                this.textTools = new TextTools(fontProvider);
                this.styleStack = new StyleContextStack(styleDictionary, defaultStyle);
                this.imageMeasure = imageMeasure;
                this.tableLayouts = tableLayouts;
                this.images = images;
                this.autoImageIndex = 1;
            }

            /**
             * Measures all nodes and sets min/max-width properties required for the second
             * layout-pass.
             * @param  {Object} docStructure document-definition-object
             * @return {Object}              document-measurement-object
             */
            DocMeasure.prototype.measureDocument = function (docStructure) {
                return this.measureNode(docStructure);
            };

            DocMeasure.prototype.measureNode = function (node) {

                var self = this;

                return this.styleStack.auto(node, function () {
                    // TODO: refactor + rethink whether this is the proper way to handle margins
                    node._margin = getNodeMargin(node);

                    if (node.columns) {
                        return extendMargins(self.measureColumns(node));
                    } else if (node.stack) {
                        return extendMargins(self.measureVerticalContainer(node));
                    } else if (node.ul) {
                        return extendMargins(self.measureUnorderedList(node));
                    } else if (node.ol) {
                        return extendMargins(self.measureOrderedList(node));
                    } else if (node.table) {
                        return extendMargins(self.measureTable(node));
                    } else if (node.text !== undefined) {
                        return extendMargins(self.measureLeaf(node));
                    } else if (node.toc) {
                        return extendMargins(self.measureToc(node));
                    } else if (node.image) {
                        return extendMargins(self.measureImage(node));
                    } else if (node.canvas) {
                        return extendMargins(self.measureCanvas(node));
                    } else if (node.qr) {
                        return extendMargins(self.measureQr(node));
                    } else {
                        throw 'Unrecognized document structure: ' + JSON.stringify(node, fontStringify);
                    }
                });

                function extendMargins(node) {
                    var margin = node._margin;

                    if (margin) {
                        node._minWidth += margin[0] + margin[2];
                        node._maxWidth += margin[0] + margin[2];
                    }

                    return node;
                }

                function getNodeMargin() {

                    function processSingleMargins(node, currentMargin) {
                        if (node.marginLeft || node.marginTop || node.marginRight || node.marginBottom) {
                            return [
                                node.marginLeft || currentMargin[0] || 0,
                                node.marginTop || currentMargin[1] || 0,
                                node.marginRight || currentMargin[2] || 0,
                                node.marginBottom || currentMargin[3] || 0
                            ];
                        }
                        return currentMargin;
                    }

                    function flattenStyleArray(styleArray) {
                        var flattenedStyles = {};
                        for (var i = styleArray.length - 1; i >= 0; i--) {
                            var styleName = styleArray[i];
                            var style = self.styleStack.styleDictionary[styleName];
                            for (var key in style) {
                                if (style.hasOwnProperty(key)) {
                                    flattenedStyles[key] = style[key];
                                }
                            }
                        }
                        return flattenedStyles;
                    }

                    function convertMargin(margin) {
                        if (typeof margin === 'number' || margin instanceof Number) {
                            margin = [margin, margin, margin, margin];
                        } else if (Array.isArray(margin)) {
                            if (margin.length === 2) {
                                margin = [margin[0], margin[1], margin[0], margin[1]];
                            }
                        }
                        return margin;
                    }

                    var margin = [undefined, undefined, undefined, undefined];

                    if (node.style) {
                        var styleArray = (Array.isArray(node.style)) ? node.style : [node.style];
                        var flattenedStyleArray = flattenStyleArray(styleArray);

                        if (flattenedStyleArray) {
                            margin = processSingleMargins(flattenedStyleArray, margin);
                        }

                        if (flattenedStyleArray.margin) {
                            margin = convertMargin(flattenedStyleArray.margin);
                        }
                    }

                    margin = processSingleMargins(node, margin);

                    if (node.margin) {
                        margin = convertMargin(node.margin);
                    }

                    if (margin[0] === undefined && margin[1] === undefined && margin[2] === undefined && margin[3] === undefined) {
                        return null;
                    } else {
                        return margin;
                    }
                }
            };

            DocMeasure.prototype.convertIfBase64Image = function (node) {
                if (/^data:image\/(jpeg|jpg|png);base64,/.test(node.image)) {
                    var label = '$$pdfmake$$' + this.autoImageIndex++;
                    this.images[label] = node.image;
                    node.image = label;
                }
            };

            DocMeasure.prototype.measureImage = function (node) {
                if (this.images) {
                    this.convertIfBase64Image(node);
                }

                var imageSize = this.imageMeasure.measureImage(node.image);

                if (node.fit) {
                    var factor = (imageSize.width / imageSize.height > node.fit[0] / node.fit[1]) ? node.fit[0] / imageSize.width : node.fit[1] / imageSize.height;
                    node._width = node._minWidth = node._maxWidth = imageSize.width * factor;
                    node._height = imageSize.height * factor;
                } else {
                    node._width = node._minWidth = node._maxWidth = node.width || imageSize.width;
                    node._height = node.height || (imageSize.height * node._width / imageSize.width);

                    if (typeof node.maxWidth === "number" && node.maxWidth < node._width) {
                        node._width = node._minWidth = node._maxWidth = node.maxWidth;
                        node._height = node._width * imageSize.height / imageSize.width;
                    }

                    if (typeof node.maxHeight === "number" && node.maxHeight < node._height) {
                        node._height = node.maxHeight;
                        node._width = node._minWidth = node._maxWidth = node._height * imageSize.width / imageSize.height;
                    }

                    if (typeof node.minWidth === "number" && node.minWidth > node._width) {
                        node._width = node._minWidth = node._maxWidth = node.minWidth;
                        node._height = node._width * imageSize.height / imageSize.width;
                    }

                    if (typeof node.minHeight === "number" && node.minHeight > node._height) {
                        node._height = node.minHeight;
                        node._width = node._minWidth = node._maxWidth = node._height * imageSize.width / imageSize.height;
                    }
                }

                node._alignment = this.styleStack.getProperty('alignment');
                return node;
            };

            DocMeasure.prototype.measureLeaf = function (node) {

                // Make sure style properties of the node itself are considered when building inlines.
                // We could also just pass [node] to buildInlines, but that fails for bullet points.
                var styleStack = this.styleStack.clone();
                styleStack.push(node);

                var data = this.textTools.buildInlines(node.text, styleStack);

                node._inlines = data.items;
                node._minWidth = data.minWidth;
                node._maxWidth = data.maxWidth;

                return node;
            };

            DocMeasure.prototype.measureToc = function (node) {
                if (node.toc.title) {
                    node.toc.title = this.measureNode(node.toc.title);
                }

                var body = [];
                for (var i = 0, l = node.toc._items.length; i < l; i++) {
                    var item = node.toc._items[i];
                    body.push([
                        {text: item.text, alignment: 'left'},
                        {text: '00000', alignment: 'right', _tocItemRef: item}
                    ]);
                }


                node.toc._table = {
                    table: {
                        dontBreakRows: true,
                        widths: ['*', 'auto'],
                        body: body
                    },
                    layout: 'noBorders'
                };

                node.toc._table = this.measureNode(node.toc._table);

                return node;
            };

            DocMeasure.prototype.measureVerticalContainer = function (node) {
                var items = node.stack;

                node._minWidth = 0;
                node._maxWidth = 0;

                for (var i = 0, l = items.length; i < l; i++) {
                    items[i] = this.measureNode(items[i]);

                    node._minWidth = Math.max(node._minWidth, items[i]._minWidth);
                    node._maxWidth = Math.max(node._maxWidth, items[i]._maxWidth);
                }

                return node;
            };

            DocMeasure.prototype.gapSizeForList = function () {
                return this.textTools.sizeOfString('9. ', this.styleStack);
            };

            DocMeasure.prototype.buildUnorderedMarker = function (styleStack, gapSize, type) {
                function buildDisc(gapSize, color) {
                    // TODO: ascender-based calculations
                    var radius = gapSize.fontSize / 6;
                    return {
                        canvas: [{
                            x: radius,
                            y: (gapSize.height / gapSize.lineHeight) + gapSize.descender - gapSize.fontSize / 3,
                            r1: radius,
                            r2: radius,
                            type: 'ellipse',
                            color: color
                        }]
                    };
                }

                function buildSquare(gapSize, color) {
                    // TODO: ascender-based calculations
                    var size = gapSize.fontSize / 3;
                    return {
                        canvas: [{
                            x: 0,
                            y: (gapSize.height / gapSize.lineHeight) + gapSize.descender - (gapSize.fontSize / 3) - (size / 2),
                            h: size,
                            w: size,
                            type: 'rect',
                            color: color
                        }]
                    };
                }

                function buildCircle(gapSize, color) {
                    // TODO: ascender-based calculations
                    var radius = gapSize.fontSize / 6;
                    return {
                        canvas: [{
                            x: radius,
                            y: (gapSize.height / gapSize.lineHeight) + gapSize.descender - gapSize.fontSize / 3,
                            r1: radius,
                            r2: radius,
                            type: 'ellipse',
                            lineColor: color
                        }]
                    };
                }

                var marker;
                var color = styleStack.getProperty('markerColor') || styleStack.getProperty('color') || 'black';

                switch (type) {
                    case 'circle':
                        marker = buildCircle(gapSize, color);
                        break;

                    case 'square':
                        marker = buildSquare(gapSize, color);
                        break;

                    case 'none':
                        marker = {};
                        break;

                    case 'disc':
                    default:
                        marker = buildDisc(gapSize, color);
                        break;
                }

                marker._minWidth = marker._maxWidth = gapSize.width;
                marker._minHeight = marker._maxHeight = gapSize.height;

                return marker;
            };

            DocMeasure.prototype.buildOrderedMarker = function (counter, styleStack, type, separator) {
                function prepareAlpha(counter) {
                    function toAlpha(num) {
                        return (num >= 26 ? toAlpha((num / 26 >> 0) - 1) : '') + 'abcdefghijklmnopqrstuvwxyz'[num % 26 >> 0];
                    }

                    if (counter < 1) {
                        return counter.toString();
                    }

                    return toAlpha(counter - 1);
                }

                function prepareRoman(counter) {
                    if (counter < 1 || counter > 4999) {
                        return counter.toString();
                    }
                    var num = counter;
                    var lookup = {M: 1000, CM: 900, D: 500, CD: 400, C: 100, XC: 90, L: 50, XL: 40, X: 10, IX: 9, V: 5, IV: 4, I: 1}, roman = '', i;
                    for (i in lookup) {
                        while (num >= lookup[i]) {
                            roman += i;
                            num -= lookup[i];
                        }
                    }
                    return roman;
                }

                function prepareDecimal(counter) {
                    return counter.toString();
                }

                var counterText;
                switch (type) {
                    case 'none':
                        counterText = null;
                        break;

                    case 'upper-alpha':
                        counterText = prepareAlpha(counter).toUpperCase();
                        break;

                    case 'lower-alpha':
                        counterText = prepareAlpha(counter);
                        break;

                    case 'upper-roman':
                        counterText = prepareRoman(counter);
                        break;

                    case 'lower-roman':
                        counterText = prepareRoman(counter).toLowerCase();
                        break;

                    case 'decimal':
                    default:
                        counterText = prepareDecimal(counter);
                        break;
                }

                if (counterText === null) {
                    return {};
                }

                if (separator) {
                    if (Array.isArray(separator)) {
                        if (separator[0]) {
                            counterText = separator[0] + counterText;
                        }

                        if (separator[1]) {
                            counterText += separator[1];
                        }
                        counterText += ' ';
                    } else {
                        counterText += separator + ' ';
                    }
                }

                var textArray = {text: counterText};
                var markerColor = styleStack.getProperty('markerColor');
                if (markerColor) {
                    textArray.color = markerColor;
                }

                return {_inlines: this.textTools.buildInlines(textArray, styleStack).items};
            };

            DocMeasure.prototype.measureUnorderedList = function (node) {
                var style = this.styleStack.clone();
                var items = node.ul;
                node.type = node.type || 'disc';
                node._gapSize = this.gapSizeForList();
                node._minWidth = 0;
                node._maxWidth = 0;

                for (var i = 0, l = items.length; i < l; i++) {
                    var item = items[i] = this.measureNode(items[i]);

                    if (!item.ol && !item.ul) {
                        item.listMarker = this.buildUnorderedMarker(style, node._gapSize, node.type);
                    }

                    node._minWidth = Math.max(node._minWidth, items[i]._minWidth + node._gapSize.width);
                    node._maxWidth = Math.max(node._maxWidth, items[i]._maxWidth + node._gapSize.width);
                }

                return node;
            };

            DocMeasure.prototype.measureOrderedList = function (node) {
                var style = this.styleStack.clone();
                var items = node.ol;
                node.type = node.type || 'decimal';
                node.separator = node.separator || '.';
                node.reversed = node.reversed || false;
                if (!node.start) {
                    node.start = node.reversed ? items.length : 1;
                }
                node._gapSize = this.gapSizeForList();
                node._minWidth = 0;
                node._maxWidth = 0;

                var counter = node.start;
                for (var i = 0, l = items.length; i < l; i++) {
                    var item = items[i] = this.measureNode(items[i]);

                    if (!item.ol && !item.ul) {
                        item.listMarker = this.buildOrderedMarker(item.counter || counter, style, node.type, node.separator);
                        if (item.listMarker._inlines) {
                            node._gapSize.width = Math.max(node._gapSize.width, item.listMarker._inlines[0].width);
                        }
                    }  // TODO: else - nested lists numbering

                    node._minWidth = Math.max(node._minWidth, items[i]._minWidth);
                    node._maxWidth = Math.max(node._maxWidth, items[i]._maxWidth);

                    if (node.reversed) {
                        counter--;
                    } else {
                        counter++;
                    }
                }

                node._minWidth += node._gapSize.width;
                node._maxWidth += node._gapSize.width;

                for (var i = 0, l = items.length; i < l; i++) {
                    var item = items[i];
                    if (!item.ol && !item.ul) {
                        item.listMarker._minWidth = item.listMarker._maxWidth = node._gapSize.width;
                    }
                }

                return node;
            };

            DocMeasure.prototype.measureColumns = function (node) {
                var columns = node.columns;
                node._gap = this.styleStack.getProperty('columnGap') || 0;

                for (var i = 0, l = columns.length; i < l; i++) {
                    columns[i] = this.measureNode(columns[i]);
                }

                var measures = ColumnCalculator.measureMinMax(columns);

                var numGaps = (columns.length > 0) ? (columns.length - 1) : 0;
                node._minWidth = measures.min + node._gap * numGaps;
                node._maxWidth = measures.max + node._gap * numGaps;

                return node;
            };

            DocMeasure.prototype.measureTable = function (node) {
                extendTableWidths(node);
                node._layout = getLayout(this.tableLayouts);
                node._offsets = getOffsets(node._layout);

                var colSpans = [];
                var col, row, cols, rows;

                for (col = 0, cols = node.table.body[0].length; col < cols; col++) {
                    var c = node.table.widths[col];
                    c._minWidth = 0;
                    c._maxWidth = 0;

                    for (row = 0, rows = node.table.body.length; row < rows; row++) {
                        var rowData = node.table.body[row];
                        var data = rowData[col];
                        if (data === undefined) {
                            console.error('Malformed table row ', rowData, 'in node ', node);
                            throw 'Malformed table row, a cell is undefined.';
                        }
                        if (data === null) { // transform to object
                            data = '';
                        }

                        if (!data._span) {
                            data = rowData[col] = this.styleStack.auto(data, measureCb(this, data));

                            if (data.colSpan && data.colSpan > 1) {
                                markSpans(rowData, col, data.colSpan);
                                colSpans.push({col: col, span: data.colSpan, minWidth: data._minWidth, maxWidth: data._maxWidth});
                            } else {
                                c._minWidth = Math.max(c._minWidth, data._minWidth);
                                c._maxWidth = Math.max(c._maxWidth, data._maxWidth);
                            }
                        }

                        if (data.rowSpan && data.rowSpan > 1) {
                            markVSpans(node.table, row, col, data.rowSpan);
                        }
                    }
                }

                extendWidthsForColSpans();

                var measures = ColumnCalculator.measureMinMax(node.table.widths);

                node._minWidth = measures.min + node._offsets.total;
                node._maxWidth = measures.max + node._offsets.total;

                return node;

                function measureCb(_this, data) {
                    return function () {
                        if (data !== null && typeof data === 'object') {
                            data.fillColor = _this.styleStack.getProperty('fillColor');
                        }
                        return _this.measureNode(data);
                    };
                }

                function getLayout(tableLayouts) {
                    var layout = node.layout;

                    if (typeof node.layout === 'string' || node instanceof String) {
                        layout = tableLayouts[layout];
                    }

                    /*jshint unused: false */
                    var defaultLayout = {
                        hLineWidth: function (i, node) {
                            return 1;
                        },
                        vLineWidth: function (i, node) {
                            return 1;
                        },
                        hLineColor: function (i, node) {
                            return 'black';
                        },
                        vLineColor: function (i, node) {
                            return 'black';
                        },
                        paddingLeft: function (i, node) {
                            return 4;
                        },
                        paddingRight: function (i, node) {
                            return 4;
                        },
                        paddingTop: function (i, node) {
                            return 2;
                        },
                        paddingBottom: function (i, node) {
                            return 2;
                        },
                        fillColor: function (i, node) {
                            return null;
                        },
                        defaultBorder: true
                    };

                    return pack(defaultLayout, layout);
                }

                function getOffsets(layout) {
                    var offsets = [];
                    var totalOffset = 0;
                    var prevRightPadding = 0;

                    for (var i = 0, l = node.table.widths.length; i < l; i++) {
                        var lOffset = prevRightPadding + layout.vLineWidth(i, node) + layout.paddingLeft(i, node);
                        offsets.push(lOffset);
                        totalOffset += lOffset;
                        prevRightPadding = layout.paddingRight(i, node);
                    }

                    totalOffset += prevRightPadding + layout.vLineWidth(node.table.widths.length, node);

                    return {
                        total: totalOffset,
                        offsets: offsets
                    };
                }

                function extendWidthsForColSpans() {
                    var q, j;

                    for (var i = 0, l = colSpans.length; i < l; i++) {
                        var span = colSpans[i];

                        var currentMinMax = getMinMax(span.col, span.span, node._offsets);
                        var minDifference = span.minWidth - currentMinMax.minWidth;
                        var maxDifference = span.maxWidth - currentMinMax.maxWidth;

                        if (minDifference > 0) {
                            q = minDifference / span.span;

                            for (j = 0; j < span.span; j++) {
                                node.table.widths[span.col + j]._minWidth += q;
                            }
                        }

                        if (maxDifference > 0) {
                            q = maxDifference / span.span;

                            for (j = 0; j < span.span; j++) {
                                node.table.widths[span.col + j]._maxWidth += q;
                            }
                        }
                    }
                }

                function getMinMax(col, span, offsets) {
                    var result = {minWidth: 0, maxWidth: 0};

                    for (var i = 0; i < span; i++) {
                        result.minWidth += node.table.widths[col + i]._minWidth + (i ? offsets.offsets[col + i] : 0);
                        result.maxWidth += node.table.widths[col + i]._maxWidth + (i ? offsets.offsets[col + i] : 0);
                    }

                    return result;
                }

                function markSpans(rowData, col, span) {
                    for (var i = 1; i < span; i++) {
                        rowData[col + i] = {
                            _span: true,
                            _minWidth: 0,
                            _maxWidth: 0,
                            rowSpan: rowData[col].rowSpan
                        };
                    }
                }

                function markVSpans(table, row, col, span) {
                    for (var i = 1; i < span; i++) {
                        table.body[row + i][col] = {
                            _span: true,
                            _minWidth: 0,
                            _maxWidth: 0,
                            fillColor: table.body[row][col].fillColor
                        };
                    }
                }

                function extendTableWidths(node) {
                    if (!node.table.widths) {
                        node.table.widths = 'auto';
                    }

                    if (typeof node.table.widths === 'string' || node.table.widths instanceof String) {
                        node.table.widths = [node.table.widths];

                        while (node.table.widths.length < node.table.body[0].length) {
                            node.table.widths.push(node.table.widths[node.table.widths.length - 1]);
                        }
                    }

                    for (var i = 0, l = node.table.widths.length; i < l; i++) {
                        var w = node.table.widths[i];
                        if (typeof w === 'number' || w instanceof Number || typeof w === 'string' || w instanceof String) {
                            node.table.widths[i] = {width: w};
                        }
                    }
                }
            };

            DocMeasure.prototype.measureCanvas = function (node) {
                var w = 0, h = 0;

                for (var i = 0, l = node.canvas.length; i < l; i++) {
                    var vector = node.canvas[i];

                    switch (vector.type) {
                        case 'ellipse':
                            w = Math.max(w, vector.x + vector.r1);
                            h = Math.max(h, vector.y + vector.r2);
                            break;
                        case 'rect':
                            w = Math.max(w, vector.x + vector.w);
                            h = Math.max(h, vector.y + vector.h);
                            break;
                        case 'line':
                            w = Math.max(w, vector.x1, vector.x2);
                            h = Math.max(h, vector.y1, vector.y2);
                            break;
                        case 'polyline':
                            for (var i2 = 0, l2 = vector.points.length; i2 < l2; i2++) {
                                w = Math.max(w, vector.points[i2].x);
                                h = Math.max(h, vector.points[i2].y);
                            }
                            break;
                    }
                }

                node._minWidth = node._maxWidth = w;
                node._minHeight = node._maxHeight = h;

                return node;
            };

            DocMeasure.prototype.measureQr = function (node) {
                node = qrEncoder.measure(node);
                node._alignment = this.styleStack.getProperty('alignment');
                return node;
            };

            module.exports = DocMeasure;


            /***/ }),
        /* 15 */
        /***/ (function(module, exports, __webpack_require__) {

            /* jslint node: true */
            'use strict';

            var LineBreaker = __webpack_require__(16);

            var LEADING = /^(\s)+/g;
            var TRAILING = /(\s)+$/g;

            /**
             * Creates an instance of TextTools - text measurement utility
             *
             * @constructor
             * @param {FontProvider} fontProvider
             */
            function TextTools(fontProvider) {
                this.fontProvider = fontProvider;
            }

            /**
             * Converts an array of strings (or inline-definition-objects) into a collection
             * of inlines and calculated minWidth/maxWidth.
             * and their min/max widths
             * @param  {Object} textArray - an array of inline-definition-objects (or strings)
             * @param  {Object} styleContextStack current style stack
             * @return {Object}                   collection of inlines, minWidth, maxWidth
             */
            TextTools.prototype.buildInlines = function (textArray, styleContextStack) {
                var measured = measure(this.fontProvider, textArray, styleContextStack);

                var minWidth = 0,
                    maxWidth = 0,
                    currentLineWidth;

                measured.forEach(function (inline) {
                    minWidth = Math.max(minWidth, inline.width - inline.leadingCut - inline.trailingCut);

                    if (!currentLineWidth) {
                        currentLineWidth = {width: 0, leadingCut: inline.leadingCut, trailingCut: 0};
                    }

                    currentLineWidth.width += inline.width;
                    currentLineWidth.trailingCut = inline.trailingCut;

                    maxWidth = Math.max(maxWidth, getTrimmedWidth(currentLineWidth));

                    if (inline.lineEnd) {
                        currentLineWidth = null;
                    }
                });

                if (getStyleProperty({}, styleContextStack, 'noWrap', false)) {
                    minWidth = maxWidth;
                }

                return {
                    items: measured,
                    minWidth: minWidth,
                    maxWidth: maxWidth
                };

                function getTrimmedWidth(item) {
                    return Math.max(0, item.width - item.leadingCut - item.trailingCut);
                }
            };

            /**
             * Returns size of the specified string (without breaking it) using the current style
             * @param  {String} text              text to be measured
             * @param  {Object} styleContextStack current style stack
             * @return {Object}                   size of the specified string
             */
            TextTools.prototype.sizeOfString = function (text, styleContextStack) {
                text = text ? text.toString().replace('\t', '    ') : '';

                //TODO: refactor - extract from measure
                var fontName = getStyleProperty({}, styleContextStack, 'font', 'Roboto');
                var fontSize = getStyleProperty({}, styleContextStack, 'fontSize', 12);
                var bold = getStyleProperty({}, styleContextStack, 'bold', false);
                var italics = getStyleProperty({}, styleContextStack, 'italics', false);
                var lineHeight = getStyleProperty({}, styleContextStack, 'lineHeight', 1);
                var characterSpacing = getStyleProperty({}, styleContextStack, 'characterSpacing', 0);

                var font = this.fontProvider.provideFont(fontName, bold, italics);

                return {
                    width: widthOfString(text, font, fontSize, characterSpacing),
                    height: font.lineHeight(fontSize) * lineHeight,
                    fontSize: fontSize,
                    lineHeight: lineHeight,
                    ascender: font.ascender / 1000 * fontSize,
                    descender: font.descender / 1000 * fontSize
                };
            };

            TextTools.prototype.widthOfString = function (text, font, fontSize, characterSpacing) {
                return widthOfString(text, font, fontSize, characterSpacing);
            };

            function splitWords(text, noWrap) {
                var results = [];
                text = text.replace('\t', '    ');

                if (noWrap) {
                    results.push({text: text});
                    return results;
                }

                var breaker = new LineBreaker(text);
                var last = 0;
                var bk;

                while (bk = breaker.nextBreak()) {
                    var word = text.slice(last, bk.position);

                    if (bk.required || word.match(/\r?\n$|\r$/)) { // new line
                        word = word.replace(/\r?\n$|\r$/, '');
                        results.push({text: word, lineEnd: true});
                    } else {
                        results.push({text: word});
                    }

                    last = bk.position;
                }

                return results;
            }

            function copyStyle(source, destination) {
                destination = destination || {};
                source = source || {}; //TODO: default style

                for (var key in source) {
                    if (key != 'text' && source.hasOwnProperty(key)) {
                        destination[key] = source[key];
                    }
                }

                return destination;
            }

            function normalizeTextArray(array, styleContextStack) {
                var results = [];

                if (!Array.isArray(array)) {
                    array = [array];
                }

                for (var i = 0, l = array.length; i < l; i++) {
                    var item = array[i];
                    var style = null;
                    var words;

                    var noWrap = getStyleProperty(item || {}, styleContextStack, 'noWrap', false);
                    if (item !== null && (typeof item === 'object' || item instanceof Object)) {
                        words = splitWords(normalizeString(item.text), noWrap);
                        style = copyStyle(item);
                    } else {
                        words = splitWords(normalizeString(item), noWrap);
                    }

                    for (var i2 = 0, l2 = words.length; i2 < l2; i2++) {
                        var result = {
                            text: words[i2].text
                        };

                        if (words[i2].lineEnd) {
                            result.lineEnd = true;
                        }

                        copyStyle(style, result);

                        results.push(result);
                    }
                }

                return results;
            }

            function normalizeString(value) {
                if (value === undefined || value === null) {
                    return '';
                } else if (typeof value === 'number') {
                    return value.toString();
                } else if (typeof value === 'string' || value instanceof String) {
                    return value;
                } else {
                    return value.toString();
                }
            }

            function getStyleProperty(item, styleContextStack, property, defaultValue) {
                var value;

                if (item[property] !== undefined && item[property] !== null) {
                    // item defines this property
                    return item[property];
                }

                if (!styleContextStack) {
                    return defaultValue;
                }

                styleContextStack.auto(item, function () {
                    value = styleContextStack.getProperty(property);
                });

                if (value !== null && value !== undefined) {
                    return value;
                } else {
                    return defaultValue;
                }
            }

            function measure(fontProvider, textArray, styleContextStack) {
                var normalized = normalizeTextArray(textArray, styleContextStack);

                if (normalized.length) {
                    var leadingIndent = getStyleProperty(normalized[0], styleContextStack, 'leadingIndent', 0);

                    if (leadingIndent) {
                        normalized[0].leadingCut = -leadingIndent;
                        normalized[0].leadingIndent = leadingIndent;
                    }
                }

                normalized.forEach(function (item) {
                    var fontName = getStyleProperty(item, styleContextStack, 'font', 'Roboto');
                    var fontSize = getStyleProperty(item, styleContextStack, 'fontSize', 12);
                    var bold = getStyleProperty(item, styleContextStack, 'bold', false);
                    var italics = getStyleProperty(item, styleContextStack, 'italics', false);
                    var color = getStyleProperty(item, styleContextStack, 'color', 'black');
                    var decoration = getStyleProperty(item, styleContextStack, 'decoration', null);
                    var decorationColor = getStyleProperty(item, styleContextStack, 'decorationColor', null);
                    var decorationStyle = getStyleProperty(item, styleContextStack, 'decorationStyle', null);
                    var background = getStyleProperty(item, styleContextStack, 'background', null);
                    var lineHeight = getStyleProperty(item, styleContextStack, 'lineHeight', 1);
                    var characterSpacing = getStyleProperty(item, styleContextStack, 'characterSpacing', 0);
                    var link = getStyleProperty(item, styleContextStack, 'link', null);
                    var linkToPage = getStyleProperty(item, styleContextStack, 'linkToPage', null);
                    var noWrap = getStyleProperty(item, styleContextStack, 'noWrap', null);
                    var preserveLeadingSpaces = getStyleProperty(item, styleContextStack, 'preserveLeadingSpaces', false);

                    var font = fontProvider.provideFont(fontName, bold, italics);

                    item.width = widthOfString(item.text, font, fontSize, characterSpacing);
                    item.height = font.lineHeight(fontSize) * lineHeight;

                    var leadingSpaces = item.text.match(LEADING);

                    if (!item.leadingCut) {
                        item.leadingCut = 0;
                    }

                    if (leadingSpaces && !preserveLeadingSpaces) {
                        item.leadingCut += widthOfString(leadingSpaces[0], font, fontSize, characterSpacing);
                    }

                    var trailingSpaces = item.text.match(TRAILING);
                    if (trailingSpaces) {
                        item.trailingCut = widthOfString(trailingSpaces[0], font, fontSize, characterSpacing);
                    } else {
                        item.trailingCut = 0;
                    }

                    item.alignment = getStyleProperty(item, styleContextStack, 'alignment', 'left');
                    item.font = font;
                    item.fontSize = fontSize;
                    item.characterSpacing = characterSpacing;
                    item.color = color;
                    item.decoration = decoration;
                    item.decorationColor = decorationColor;
                    item.decorationStyle = decorationStyle;
                    item.background = background;
                    item.link = link;
                    item.linkToPage = linkToPage;
                    item.noWrap = noWrap;
                });

                return normalized;
            }

            function widthOfString(text, font, fontSize, characterSpacing) {
                return font.widthOfString(text, fontSize) + ((characterSpacing || 0) * (text.length - 1));
            }

            /****TESTS**** (add a leading '/' to uncomment)
             TextTools.prototype.splitWords = splitWords;
             TextTools.prototype.normalizeTextArray = normalizeTextArray;
             TextTools.prototype.measure = measure;
             // */


            module.exports = TextTools;


            /***/ }),
        /* 16 */
        /***/ (function(module, exports, __webpack_require__) {

            // Generated by CoffeeScript 1.7.1
            (function() {
                var AI, AL, BA, BK, CB, CI_BRK, CJ, CP_BRK, CR, DI_BRK, ID, IN_BRK, LF, LineBreaker, NL, NS, PR_BRK, SA, SG, SP, UnicodeTrie, WJ, XX, base64, characterClasses, classTrie, data, fs, pairTable, _ref, _ref1;

                UnicodeTrie = __webpack_require__(17);



                base64 = __webpack_require__(19);

                _ref = __webpack_require__(20), BK = _ref.BK, CR = _ref.CR, LF = _ref.LF, NL = _ref.NL, CB = _ref.CB, BA = _ref.BA, SP = _ref.SP, WJ = _ref.WJ, SP = _ref.SP, BK = _ref.BK, LF = _ref.LF, NL = _ref.NL, AI = _ref.AI, AL = _ref.AL, SA = _ref.SA, SG = _ref.SG, XX = _ref.XX, CJ = _ref.CJ, ID = _ref.ID, NS = _ref.NS, characterClasses = _ref.characterClasses;

                _ref1 = __webpack_require__(21), DI_BRK = _ref1.DI_BRK, IN_BRK = _ref1.IN_BRK, CI_BRK = _ref1.CI_BRK, CP_BRK = _ref1.CP_BRK, PR_BRK = _ref1.PR_BRK, pairTable = _ref1.pairTable;

                data = base64.toByteArray("AA4IAAAAAAAAAhqg5VV7NJtZvz7fTC8zU5deplUlMrQoWqmqahD5So0aipYWrUhVFSVBQ10iSTtUtW6nKDVF6k7d75eQfEUbFcQ9KiFS90tQEolcP23nrLPmO+esr/+f39rr/a293t/e7/P8nmfvlz0O6RvrBJADtbBNaD88IOKTOmOrCqhu9zE770vc1pBV/xL5dxj2V7Zj4FGSomFKStCWNlV7hG1VabZfZ1LaHbFrRwzzLjzPoi1UHDnlV/lWbhgIIJvLBp/pu7AHEdRnIY+ROdXxg4fNpMdTxVnnm08OjozejAVsBqwqz8kddGRlRxsd8c55dNZoPuex6a7Dt6L0NNb03sqgTlR2/OT7eTt0Y0WnpUXxLsp5SMANc4DsmX4zJUBQvznwexm9tsMH+C9uRYMPOd96ZHB29NZjCIM2nfO7tsmQveX3l2r7ft0N4/SRJ7kO6Y8ZCaeuUQ4gMTZ67cp7TgxvlNDsPgOBdZi2YTam5Q7m3+00l+XG7PrDe6YoPmHgK+yLih7fAR16ZFCeD9WvOVt+gfNW/KT5/M6rb/9KERt+N1lad5RneVjzxXHsLofuU+TvrEsr3+26sVz5WJh6L/svoPK3qepFH9bysDljWtD1F7KrxzW1i9r+e/NLxV/acts7zuo304J9+t3Pd6Y6u8f3EAqxNRgv5DZjaI3unyvkvHPya/v3mWVYOC38qBq11+yHZ2bAyP1HbkV92vdno7r2lxz9UwCdCJVfd14NLcpO2CadHS/XPJ9doXgz5vLv/1OBVS3gX0D9n6LiNIDfpilO9RsLgZ2W/wIy8W/Rh93jfoz4qmRV2xElv6p2lRXQdO6/Cv8f5nGn3u0wLXjhnvClabL1o+7yvIpvLfT/xsKG30y/sTvq30ia9Czxp9dr9v/e7Yn/O0QJXxxBOJmceP/DBFa1q1v6oudn/e6qc/37dUoNvnYL4plQ9OoneYOh/r8fOFm7yl7FETHY9dXd5K2n/qEc53dOEe1TTJcvCfp1dpTC334l0vyaFL6mttNEbFjzO+ZV2mLk0qc3BrxJ4d9gweMmjRorxb7vic0rSq6D4wzAyFWas1TqPE0sLI8XLAryC8tPChaN3ALEZSWmtB34SyZcxXYn/E4Tg0LeMIPhgPKD9zyHGMxxhxnDDih7eI86xECTM8zodUCdgffUmRh4rQ8zyA6ow/Aei+01a8OMfziQQ+GAEkhwN/cqUFYAVzA9ex4n6jgtsiMvXf5BtXxEU4hSphvx3v8+9au8eEekEEpkrkne/zB1M+HAPuXIz3paxKlfe8aDMfGWAX6Md6PuuAdKHFVH++Ed5LEji94Z5zeiJIxbmWeN7rr1/ZcaBl5/nimdHsHgIH/ssyLUXZ4fDQ46HnBb+hQqG8yNiKRrXL/b1IPYDUsu3dFKtRMcjqlRvONd4xBvOufx2cUHuk8pmG1D7PyOQmUmluisVFS9OWS8fPIe8LiCtjwJKnEC9hrS9uKmISI3Wa5+vdXUG9dtyfr7g/oJv2wbzeZU838G6mEvntUb3SVV/fBZ6H/sL+lElzeRrHy2Xbe7UWX1q5sgOQ81rv+2baej4fP4m5Mf/GkoxfDtT3++KP7do9Jn26aa6xAhCf5L9RZVfkWKCcjI1eYbm2plvTEqkDxKC402bGzXCYaGnuALHabBT1dFLuOSB7RorOPEhZah1NjZIgR/UFGfK3p1ElYnevOMBDLURdpIjrI+qZk4sffGbRFiXuEmdFjiAODlQCJvIaB1rW61Ljg3y4eS4LAcSgDxxZQs0DYa15wA032Z+lGUfpoyOrFo3mg1sRQtN/fHHCx3TrM8eTrldMbYisDLXbUDoXMLejSq0fUNuO1muX0gEa8vgyegkqiqqbC3W0S4cC9Kmt8MuS/hFO7Xei3f8rSvIjeveMM7kxjUixOrl6gJshe4JU7PhOHpfrRYvu7yoAZKa3Buyk2J+K5W+nNTz1nhJDhRUfDJLiUXxjxXCJeeaOe/r7HlBP/uURc/5efaZEPxr55Qj39rfTLkugUGyMrwo7HAglfEjDriehF1jXtwJkPoiYkYQ5aoXSA7qbCBGKq5hwtu2VkpI9xVDop/1xrC52eiIvCoPWx4lLl40jm9upvycVPfpaH9/o2D4xKXpeNjE2HPQRS+3RFaYTc4Txw7Dvq5X6JBRwzs9mvoB49BK6b+XgsZVJYiInTlSXZ+62FT18mkFVcPKCJsoF5ahb19WheZLUYsSwdrrVM3aQ2XE6SzU2xHDS6iWkodk5AF6F8WUNmmushi8aVpMPwiIfEiQWo3CApONDRjrhDiVnkaFsaP5rjIJkmsN6V26li5LNM3JxGSyKgomknTyyrhcnwv9Qcqaq5utAh44W30SWo8Q0XHKR0glPF4fWst1FUCnk2woFq3iy9fAbzcjJ8fvSjgKVOfn14RDqyQuIgaGJZuswTywdCFSa89SakMf6fe+9KaQMYQlKxiJBczuPSho4wmBjdA+ag6QUOr2GdpcbSl51Ay6khhBt5UXdrnxc7ZGMxCvz96A4oLocxh2+px+1zkyLacCGrxnPzTRSgrLKpStFpH5ppKWm7PgMKZtwgytKLOjbGCOQLTm+KOowqa1sdut9raj1CZFkZD0jbaKNLpJUarSH5Qknx1YiOxdA5L6d5sfI/unmkSF65Ic/AvtXt98Pnrdwl5vgppQ3dYzWFwknZsy6xh2llmLxpegF8ayLwniknlXRHiF4hzzrgB8jQ4wdIqcaHCEAxyJwCeGkXPBZYSrrGa4vMwZvNN9aK0F4JBOK9mQ8g8EjEbIQVwvfS2D8GuCYsdqwqSWbQrfWdTRUJMqmpnWPax4Z7E137I6brHbvjpPlfNZpF1d7PP7HB/MPHcHVKTMhLO4f3CZcaccZEOiS2DpKiQB5KXDJ+Ospcz4qTRCRxgrKEQIgUkKLTKKwskdx2DWo3bg3PEoB5h2nA24olwfKSR+QR6TAvEDi/0czhUT59RZmO1MGeKGeEfuOSPWfL+XKmhqpZmOVR9mJVNDPKOS49Lq+Um10YsBybzDMtemlPCOJEtE8zaXhsaqEs9bngSJGhlOTTMlCXly9Qv5cRN3PVLK7zoMptutf7ihutrQ/Xj7VqeCdUwleTTKklOI8Wep9h7fCY0kVtDtIWKnubWAvbNZtsRRqOYl802vebPEkZRSZc6wXOfPtpPtN5HI63EUFfsy7U/TLr8NkIzaY3vx4A28x765XZMzRZTpMk81YIMuwJ5+/zoCuZj1wGnaHObxa5rpKZj4WhT670maRw04w0e3cZW74Z0aZe2n05hjZaxm6urenz8Ef5O6Yu1J2aqYAlqsCXs5ZB5o1JJ5l3xkTVr8rJQ09NLsBqRRDT2IIjOPmcJa6xQ1R5yGP9jAsj23xYDTezdyqG8YWZ7vJBIWK56K+iDgcHimiQOTIasNSua1fOBxsKMMEKd15jxTl+3CyvGCR+UyRwuSI2XuwRIPoNNclPihfJhaq2mKkNijwYLY6feqohktukmI3KDvOpN7ItCqHHhNuKlxMfBAEO5LjW2RKh6lE5Hd1dtAOopac/Z4FdsNsjMhXz/ug8JGmbVJTA+VOBJXdrYyJcIn5+OEeoK8kWEWF+wdG8ZtZHKSquWDtDVyhFPkRVqguKFkLkKCz46hcU1SUY9oJ2Sk+dmq0kglqk4kqKT1CV9JDELPjK1WsWGkEXF87g9P98e5ff0mIupm/w6vc3kCeq04X5bgJQlcMFRjlFWmSk+kssXCAVikfeAlMuzpUvCSdXiG+dc6KrIiLxxhbEVuKf7vW7KmDQI95bZe3H9mN3/77F6fZ2Yx/F9yClllj8gXpLWLpd5+v90iOaFa9sd7Pvx0lNa1o1+bkiZ69wCiC2x9UIb6/boBCuNMB/HYR0RC6+FD9Oe5qrgQl6JbXtkaYn0wkdNhROLqyhv6cKvyMj1Fvs2o3OOKoMYTubGENLfY5F6H9d8wX1cnINsvz+wZFQu3zhWVlwJvwBEp69Dqu/ZnkBf3nIfbx4TK7zOVJH5sGJX+IMwkn1vVBn38GbpTg9bJnMcTOb5F6Ci5gOn9Fcy6Qzcu+FL6mYJJ+f2ZZJGda1VqruZ0JRXItp8X0aTjIcJgzdaXlha7q7kV4ebrMsunfsRyRa9qYuryBHA0hc1KVsKdE+oI0ljLmSAyMze8lWmc5/lQ18slyTVC/vADTc+SNM5++gztTBLz4m0aVUKcfgOEExuKVomJ7XQDZuziMDjG6JP9tgR7JXZTeo9RGetW/Xm9/TgPJpTgHACPOGvmy2mDm9fl09WeMm9sQUAXP3Su2uApeCwJVT5iWCXDgmcuTsFgU9Nm6/PusJzSbDQIMfl6INY/OAEvZRN54BSSXUClM51im6Wn9VhVamKJmzOaFJErgJcs0etFZ40LIF3EPkjFTjGmAhsd174NnOwJW8TdJ1Dja+E6Wa6FVS22Haj1DDA474EesoMP5nbspAPJLWJ8rYcP1DwCslhnn+gTFm+sS9wY+U6SogAa9tiwpoxuaFeqm2OK+uozR6SfiLCOPz36LiDlzXr6UWd7BpY6mlrNANkTOeme5EgnnAkQRTGo9T6iYxbUKfGJcI9B+ub2PcyUOgpwXbOf3bHFWtygD7FYbRhb+vkzi87dB0JeXl/vBpBUz93VtqZi7AL7C1VowTF+tGmyurw7DBcktc+UMY0E10Jw4URojf8NdaNpN6E1q4+Oz+4YePtMLy8FPRP");

                classTrie = new UnicodeTrie(data);

                LineBreaker = (function() {
                    var Break, mapClass, mapFirst;

                    function LineBreaker(string) {
                        this.string = string;
                        this.pos = 0;
                        this.lastPos = 0;
                        this.curClass = null;
                        this.nextClass = null;
                    }

                    LineBreaker.prototype.nextCodePoint = function() {
                        var code, next;
                        code = this.string.charCodeAt(this.pos++);
                        next = this.string.charCodeAt(this.pos);
                        if ((0xd800 <= code && code <= 0xdbff) && (0xdc00 <= next && next <= 0xdfff)) {
                            this.pos++;
                            return ((code - 0xd800) * 0x400) + (next - 0xdc00) + 0x10000;
                        }
                        return code;
                    };

                    mapClass = function(c) {
                        switch (c) {
                            case AI:
                                return AL;
                            case SA:
                            case SG:
                            case XX:
                                return AL;
                            case CJ:
                                return NS;
                            default:
                                return c;
                        }
                    };

                    mapFirst = function(c) {
                        switch (c) {
                            case LF:
                            case NL:
                                return BK;
                            case CB:
                                return BA;
                            case SP:
                                return WJ;
                            default:
                                return c;
                        }
                    };

                    LineBreaker.prototype.nextCharClass = function(first) {
                        if (first == null) {
                            first = false;
                        }
                        return mapClass(classTrie.get(this.nextCodePoint()));
                    };

                    Break = (function() {
                        function Break(position, required) {
                            this.position = position;
                            this.required = required != null ? required : false;
                        }

                        return Break;

                    })();

                    LineBreaker.prototype.nextBreak = function() {
                        var cur, lastClass, shouldBreak;
                        if (this.curClass == null) {
                            this.curClass = mapFirst(this.nextCharClass());
                        }
                        while (this.pos < this.string.length) {
                            this.lastPos = this.pos;
                            lastClass = this.nextClass;
                            this.nextClass = this.nextCharClass();
                            if (this.curClass === BK || (this.curClass === CR && this.nextClass !== LF)) {
                                this.curClass = mapFirst(mapClass(this.nextClass));
                                return new Break(this.lastPos, true);
                            }
                            cur = (function() {
                                switch (this.nextClass) {
                                    case SP:
                                        return this.curClass;
                                    case BK:
                                    case LF:
                                    case NL:
                                        return BK;
                                    case CR:
                                        return CR;
                                    case CB:
                                        return BA;
                                }
                            }).call(this);
                            if (cur != null) {
                                this.curClass = cur;
                                if (this.nextClass === CB) {
                                    return new Break(this.lastPos);
                                }
                                continue;
                            }
                            shouldBreak = false;
                            switch (pairTable[this.curClass][this.nextClass]) {
                                case DI_BRK:
                                    shouldBreak = true;
                                    break;
                                case IN_BRK:
                                    shouldBreak = lastClass === SP;
                                    break;
                                case CI_BRK:
                                    shouldBreak = lastClass === SP;
                                    if (!shouldBreak) {
                                        continue;
                                    }
                                    break;
                                case CP_BRK:
                                    if (lastClass !== SP) {
                                        continue;
                                    }
                            }
                            this.curClass = this.nextClass;
                            if (shouldBreak) {
                                return new Break(this.lastPos);
                            }
                        }
                        if (this.pos >= this.string.length) {
                            if (this.lastPos < this.string.length) {
                                this.lastPos = this.string.length;
                                return new Break(this.string.length);
                            } else {
                                return null;
                            }
                        }
                    };

                    return LineBreaker;

                })();

                module.exports = LineBreaker;

            }).call(this);


            /***/ }),
        /* 17 */
        /***/ (function(module, exports, __webpack_require__) {

            // Generated by CoffeeScript 1.7.1
            var UnicodeTrie, inflate;

            inflate = __webpack_require__(18);

            UnicodeTrie = (function() {
                var DATA_BLOCK_LENGTH, DATA_GRANULARITY, DATA_MASK, INDEX_1_OFFSET, INDEX_2_BLOCK_LENGTH, INDEX_2_BMP_LENGTH, INDEX_2_MASK, INDEX_SHIFT, LSCP_INDEX_2_LENGTH, LSCP_INDEX_2_OFFSET, OMITTED_BMP_INDEX_1_LENGTH, SHIFT_1, SHIFT_1_2, SHIFT_2, UTF8_2B_INDEX_2_LENGTH, UTF8_2B_INDEX_2_OFFSET;

                SHIFT_1 = 6 + 5;

                SHIFT_2 = 5;

                SHIFT_1_2 = SHIFT_1 - SHIFT_2;

                OMITTED_BMP_INDEX_1_LENGTH = 0x10000 >> SHIFT_1;

                INDEX_2_BLOCK_LENGTH = 1 << SHIFT_1_2;

                INDEX_2_MASK = INDEX_2_BLOCK_LENGTH - 1;

                INDEX_SHIFT = 2;

                DATA_BLOCK_LENGTH = 1 << SHIFT_2;

                DATA_MASK = DATA_BLOCK_LENGTH - 1;

                LSCP_INDEX_2_OFFSET = 0x10000 >> SHIFT_2;

                LSCP_INDEX_2_LENGTH = 0x400 >> SHIFT_2;

                INDEX_2_BMP_LENGTH = LSCP_INDEX_2_OFFSET + LSCP_INDEX_2_LENGTH;

                UTF8_2B_INDEX_2_OFFSET = INDEX_2_BMP_LENGTH;

                UTF8_2B_INDEX_2_LENGTH = 0x800 >> 6;

                INDEX_1_OFFSET = UTF8_2B_INDEX_2_OFFSET + UTF8_2B_INDEX_2_LENGTH;

                DATA_GRANULARITY = 1 << INDEX_SHIFT;

                function UnicodeTrie(data) {
                    var isBuffer, uncompressedLength, view;
                    isBuffer = typeof data.readUInt32BE === 'function' && typeof data.slice === 'function';
                    if (isBuffer || data instanceof Uint8Array) {
                        if (isBuffer) {
                            this.highStart = data.readUInt32BE(0);
                            this.errorValue = data.readUInt32BE(4);
                            uncompressedLength = data.readUInt32BE(8);
                            data = data.slice(12);
                        } else {
                            view = new DataView(data.buffer);
                            this.highStart = view.getUint32(0);
                            this.errorValue = view.getUint32(4);
                            uncompressedLength = view.getUint32(8);
                            data = data.subarray(12);
                        }
                        data = inflate(data, new Uint8Array(uncompressedLength));
                        data = inflate(data, new Uint8Array(uncompressedLength));
                        this.data = new Uint32Array(data.buffer);
                    } else {
                        this.data = data.data, this.highStart = data.highStart, this.errorValue = data.errorValue;
                    }
                }

                UnicodeTrie.prototype.get = function(codePoint) {
                    var index;
                    if (codePoint < 0 || codePoint > 0x10ffff) {
                        return this.errorValue;
                    }
                    if (codePoint < 0xd800 || (codePoint > 0xdbff && codePoint <= 0xffff)) {
                        index = (this.data[codePoint >> SHIFT_2] << INDEX_SHIFT) + (codePoint & DATA_MASK);
                        return this.data[index];
                    }
                    if (codePoint <= 0xffff) {
                        index = (this.data[LSCP_INDEX_2_OFFSET + ((codePoint - 0xd800) >> SHIFT_2)] << INDEX_SHIFT) + (codePoint & DATA_MASK);
                        return this.data[index];
                    }
                    if (codePoint < this.highStart) {
                        index = this.data[(INDEX_1_OFFSET - OMITTED_BMP_INDEX_1_LENGTH) + (codePoint >> SHIFT_1)];
                        index = this.data[index + ((codePoint >> SHIFT_2) & INDEX_2_MASK)];
                        index = (index << INDEX_SHIFT) + (codePoint & DATA_MASK);
                        return this.data[index];
                    }
                    return this.data[this.data.length - DATA_GRANULARITY];
                };

                return UnicodeTrie;

            })();

            module.exports = UnicodeTrie;


            /***/ }),
        /* 18 */
        /***/ (function(module, exports) {

            var TINF_OK = 0;
            var TINF_DATA_ERROR = -3;

            function Tree() {
                this.table = new Uint16Array(16);   /* table of code length counts */
                this.trans = new Uint16Array(288);  /* code -> symbol translation table */
            }

            function Data(source, dest) {
                this.source = source;
                this.sourceIndex = 0;
                this.tag = 0;
                this.bitcount = 0;

                this.dest = dest;
                this.destLen = 0;

                this.ltree = new Tree();  /* dynamic length/symbol tree */
                this.dtree = new Tree();  /* dynamic distance tree */
            }

            /* --------------------------------------------------- *
             * -- uninitialized global data (static structures) -- *
             * --------------------------------------------------- */

            var sltree = new Tree();
            var sdtree = new Tree();

            /* extra bits and base tables for length codes */
            var length_bits = new Uint8Array(30);
            var length_base = new Uint16Array(30);

            /* extra bits and base tables for distance codes */
            var dist_bits = new Uint8Array(30);
            var dist_base = new Uint16Array(30);

            /* special ordering of code length codes */
            var clcidx = new Uint8Array([
                16, 17, 18, 0, 8, 7, 9, 6,
                10, 5, 11, 4, 12, 3, 13, 2,
                14, 1, 15
            ]);

            /* used by tinf_decode_trees, avoids allocations every call */
            var code_tree = new Tree();
            var lengths = new Uint8Array(288 + 32);

            /* ----------------------- *
             * -- utility functions -- *
             * ----------------------- */

            /* build extra bits and base tables */
            function tinf_build_bits_base(bits, base, delta, first) {
                var i, sum;

                /* build bits table */
                for (i = 0; i < delta; ++i) bits[i] = 0;
                for (i = 0; i < 30 - delta; ++i) bits[i + delta] = i / delta | 0;

                /* build base table */
                for (sum = first, i = 0; i < 30; ++i) {
                    base[i] = sum;
                    sum += 1 << bits[i];
                }
            }

            /* build the fixed huffman trees */
            function tinf_build_fixed_trees(lt, dt) {
                var i;

                /* build fixed length tree */
                for (i = 0; i < 7; ++i) lt.table[i] = 0;

                lt.table[7] = 24;
                lt.table[8] = 152;
                lt.table[9] = 112;

                for (i = 0; i < 24; ++i) lt.trans[i] = 256 + i;
                for (i = 0; i < 144; ++i) lt.trans[24 + i] = i;
                for (i = 0; i < 8; ++i) lt.trans[24 + 144 + i] = 280 + i;
                for (i = 0; i < 112; ++i) lt.trans[24 + 144 + 8 + i] = 144 + i;

                /* build fixed distance tree */
                for (i = 0; i < 5; ++i) dt.table[i] = 0;

                dt.table[5] = 32;

                for (i = 0; i < 32; ++i) dt.trans[i] = i;
            }

            /* given an array of code lengths, build a tree */
            var offs = new Uint16Array(16);

            function tinf_build_tree(t, lengths, off, num) {
                var i, sum;

                /* clear code length count table */
                for (i = 0; i < 16; ++i) t.table[i] = 0;

                /* scan symbol lengths, and sum code length counts */
                for (i = 0; i < num; ++i) t.table[lengths[off + i]]++;

                t.table[0] = 0;

                /* compute offset table for distribution sort */
                for (sum = 0, i = 0; i < 16; ++i) {
                    offs[i] = sum;
                    sum += t.table[i];
                }

                /* create code->symbol translation table (symbols sorted by code) */
                for (i = 0; i < num; ++i) {
                    if (lengths[off + i]) t.trans[offs[lengths[off + i]]++] = i;
                }
            }

            /* ---------------------- *
             * -- decode functions -- *
             * ---------------------- */

            /* get one bit from source stream */
            function tinf_getbit(d) {
                /* check if tag is empty */
                if (!d.bitcount--) {
                    /* load next tag */
                    d.tag = d.source[d.sourceIndex++];
                    d.bitcount = 7;
                }

                /* shift bit out of tag */
                var bit = d.tag & 1;
                d.tag >>>= 1;

                return bit;
            }

            /* read a num bit value from a stream and add base */
            function tinf_read_bits(d, num, base) {
                if (!num)
                    return base;

                while (d.bitcount < 24) {
                    d.tag |= d.source[d.sourceIndex++] << d.bitcount;
                    d.bitcount += 8;
                }

                var val = d.tag & (0xffff >>> (16 - num));
                d.tag >>>= num;
                d.bitcount -= num;
                return val + base;
            }

            /* given a data stream and a tree, decode a symbol */
            function tinf_decode_symbol(d, t) {
                while (d.bitcount < 24) {
                    d.tag |= d.source[d.sourceIndex++] << d.bitcount;
                    d.bitcount += 8;
                }

                var sum = 0, cur = 0, len = 0;
                var tag = d.tag;

                /* get more bits while code value is above sum */
                do {
                    cur = 2 * cur + (tag & 1);
                    tag >>>= 1;
                    ++len;

                    sum += t.table[len];
                    cur -= t.table[len];
                } while (cur >= 0);

                d.tag = tag;
                d.bitcount -= len;

                return t.trans[sum + cur];
            }

            /* given a data stream, decode dynamic trees from it */
            function tinf_decode_trees(d, lt, dt) {
                var hlit, hdist, hclen;
                var i, num, length;

                /* get 5 bits HLIT (257-286) */
                hlit = tinf_read_bits(d, 5, 257);

                /* get 5 bits HDIST (1-32) */
                hdist = tinf_read_bits(d, 5, 1);

                /* get 4 bits HCLEN (4-19) */
                hclen = tinf_read_bits(d, 4, 4);

                for (i = 0; i < 19; ++i) lengths[i] = 0;

                /* read code lengths for code length alphabet */
                for (i = 0; i < hclen; ++i) {
                    /* get 3 bits code length (0-7) */
                    var clen = tinf_read_bits(d, 3, 0);
                    lengths[clcidx[i]] = clen;
                }

                /* build code length tree */
                tinf_build_tree(code_tree, lengths, 0, 19);

                /* decode code lengths for the dynamic trees */
                for (num = 0; num < hlit + hdist;) {
                    var sym = tinf_decode_symbol(d, code_tree);

                    switch (sym) {
                        case 16:
                            /* copy previous code length 3-6 times (read 2 bits) */
                            var prev = lengths[num - 1];
                            for (length = tinf_read_bits(d, 2, 3); length; --length) {
                                lengths[num++] = prev;
                            }
                            break;
                        case 17:
                            /* repeat code length 0 for 3-10 times (read 3 bits) */
                            for (length = tinf_read_bits(d, 3, 3); length; --length) {
                                lengths[num++] = 0;
                            }
                            break;
                        case 18:
                            /* repeat code length 0 for 11-138 times (read 7 bits) */
                            for (length = tinf_read_bits(d, 7, 11); length; --length) {
                                lengths[num++] = 0;
                            }
                            break;
                        default:
                            /* values 0-15 represent the actual code lengths */
                            lengths[num++] = sym;
                            break;
                    }
                }

                /* build dynamic trees */
                tinf_build_tree(lt, lengths, 0, hlit);
                tinf_build_tree(dt, lengths, hlit, hdist);
            }

            /* ----------------------------- *
             * -- block inflate functions -- *
             * ----------------------------- */

            /* given a stream and two trees, inflate a block of data */
            function tinf_inflate_block_data(d, lt, dt) {
                while (1) {
                    var sym = tinf_decode_symbol(d, lt);

                    /* check for end of block */
                    if (sym === 256) {
                        return TINF_OK;
                    }

                    if (sym < 256) {
                        d.dest[d.destLen++] = sym;
                    } else {
                        var length, dist, offs;
                        var i;

                        sym -= 257;

                        /* possibly get more bits from length code */
                        length = tinf_read_bits(d, length_bits[sym], length_base[sym]);

                        dist = tinf_decode_symbol(d, dt);

                        /* possibly get more bits from distance code */
                        offs = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);

                        /* copy match */
                        for (i = offs; i < offs + length; ++i) {
                            d.dest[d.destLen++] = d.dest[i];
                        }
                    }
                }
            }

            /* inflate an uncompressed block of data */
            function tinf_inflate_uncompressed_block(d) {
                var length, invlength;
                var i;

                /* unread from bitbuffer */
                while (d.bitcount > 8) {
                    d.sourceIndex--;
                    d.bitcount -= 8;
                }

                /* get length */
                length = d.source[d.sourceIndex + 1];
                length = 256 * length + d.source[d.sourceIndex];

                /* get one's complement of length */
                invlength = d.source[d.sourceIndex + 3];
                invlength = 256 * invlength + d.source[d.sourceIndex + 2];

                /* check length */
                if (length !== (~invlength & 0x0000ffff))
                    return TINF_DATA_ERROR;

                d.sourceIndex += 4;

                /* copy block */
                for (i = length; i; --i)
                    d.dest[d.destLen++] = d.source[d.sourceIndex++];

                /* make sure we start next block on a byte boundary */
                d.bitcount = 0;

                return TINF_OK;
            }

            /* inflate stream from source to dest */
            function tinf_uncompress(source, dest) {
                var d = new Data(source, dest);
                var bfinal, btype, res;

                do {
                    /* read final block flag */
                    bfinal = tinf_getbit(d);

                    /* read block type (2 bits) */
                    btype = tinf_read_bits(d, 2, 0);

                    /* decompress block */
                    switch (btype) {
                        case 0:
                            /* decompress uncompressed block */
                            res = tinf_inflate_uncompressed_block(d);
                            break;
                        case 1:
                            /* decompress block with fixed huffman trees */
                            res = tinf_inflate_block_data(d, sltree, sdtree);
                            break;
                        case 2:
                            /* decompress block with dynamic huffman trees */
                            tinf_decode_trees(d, d.ltree, d.dtree);
                            res = tinf_inflate_block_data(d, d.ltree, d.dtree);
                            break;
                        default:
                            res = TINF_DATA_ERROR;
                    }

                    if (res !== TINF_OK)
                        throw new Error('Data error');

                } while (!bfinal);

                if (d.destLen < d.dest.length) {
                    if (typeof d.dest.slice === 'function')
                        return d.dest.slice(0, d.destLen);
                    else
                        return d.dest.subarray(0, d.destLen);
                }

                return d.dest;
            }

            /* -------------------- *
             * -- initialization -- *
             * -------------------- */

            /* build fixed huffman trees */
            tinf_build_fixed_trees(sltree, sdtree);

            /* build extra bits and base tables */
            tinf_build_bits_base(length_bits, length_base, 4, 3);
            tinf_build_bits_base(dist_bits, dist_base, 2, 1);

            /* fix a special case */
            length_bits[28] = 0;
            length_base[28] = 258;

            module.exports = tinf_uncompress;


            /***/ }),
        /* 19 */
        /***/ (function(module, exports, __webpack_require__) {

            var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

            ;(function (exports) {
                'use strict';

                var Arr = (typeof Uint8Array !== 'undefined')
                    ? Uint8Array
                    : Array

                var PLUS   = '+'.charCodeAt(0)
                var SLASH  = '/'.charCodeAt(0)
                var NUMBER = '0'.charCodeAt(0)
                var LOWER  = 'a'.charCodeAt(0)
                var UPPER  = 'A'.charCodeAt(0)
                var PLUS_URL_SAFE = '-'.charCodeAt(0)
                var SLASH_URL_SAFE = '_'.charCodeAt(0)

                function decode (elt) {
                    var code = elt.charCodeAt(0)
                    if (code === PLUS ||
                        code === PLUS_URL_SAFE)
                        return 62 // '+'
                    if (code === SLASH ||
                        code === SLASH_URL_SAFE)
                        return 63 // '/'
                    if (code < NUMBER)
                        return -1 //no match
                    if (code < NUMBER + 10)
                        return code - NUMBER + 26 + 26
                    if (code < UPPER + 26)
                        return code - UPPER
                    if (code < LOWER + 26)
                        return code - LOWER + 26
                }

                function b64ToByteArray (b64) {
                    var i, j, l, tmp, placeHolders, arr

                    if (b64.length % 4 > 0) {
                        throw new Error('Invalid string. Length must be a multiple of 4')
                    }

                    // the number of equal signs (place holders)
                    // if there are two placeholders, than the two characters before it
                    // represent one byte
                    // if there is only one, then the three characters before it represent 2 bytes
                    // this is just a cheap hack to not do indexOf twice
                    var len = b64.length
                    placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

                    // base64 is 4/3 + up to two characters of the original data
                    arr = new Arr(b64.length * 3 / 4 - placeHolders)

                    // if there are placeholders, only get up to the last complete 4 chars
                    l = placeHolders > 0 ? b64.length - 4 : b64.length

                    var L = 0

                    function push (v) {
                        arr[L++] = v
                    }

                    for (i = 0, j = 0; i < l; i += 4, j += 3) {
                        tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
                        push((tmp & 0xFF0000) >> 16)
                        push((tmp & 0xFF00) >> 8)
                        push(tmp & 0xFF)
                    }

                    if (placeHolders === 2) {
                        tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
                        push(tmp & 0xFF)
                    } else if (placeHolders === 1) {
                        tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
                        push((tmp >> 8) & 0xFF)
                        push(tmp & 0xFF)
                    }

                    return arr
                }

                function uint8ToBase64 (uint8) {
                    var i,
                        extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
                        output = "",
                        temp, length

                    function encode (num) {
                        return lookup.charAt(num)
                    }

                    function tripletToBase64 (num) {
                        return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
                    }

                    // go through the array every three bytes, we'll deal with trailing stuff later
                    for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
                        temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
                        output += tripletToBase64(temp)
                    }

                    // pad the end with zeros, but make sure to not forget the extra bytes
                    switch (extraBytes) {
                        case 1:
                            temp = uint8[uint8.length - 1]
                            output += encode(temp >> 2)
                            output += encode((temp << 4) & 0x3F)
                            output += '=='
                            break
                        case 2:
                            temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
                            output += encode(temp >> 10)
                            output += encode((temp >> 4) & 0x3F)
                            output += encode((temp << 2) & 0x3F)
                            output += '='
                            break
                    }

                    return output
                }

                exports.toByteArray = b64ToByteArray
                exports.fromByteArray = uint8ToBase64
            }( false ? (this.base64js = {}) : exports))


            /***/ }),
        /* 20 */
        /***/ (function(module, exports) {

            // Generated by CoffeeScript 1.7.1
            (function() {
                var AI, AL, B2, BA, BB, BK, CB, CJ, CL, CM, CP, CR, EX, GL, H2, H3, HL, HY, ID, IN, IS, JL, JT, JV, LF, NL, NS, NU, OP, PO, PR, QU, RI, SA, SG, SP, SY, WJ, XX, ZW;

                exports.OP = OP = 0;

                exports.CL = CL = 1;

                exports.CP = CP = 2;

                exports.QU = QU = 3;

                exports.GL = GL = 4;

                exports.NS = NS = 5;

                exports.EX = EX = 6;

                exports.SY = SY = 7;

                exports.IS = IS = 8;

                exports.PR = PR = 9;

                exports.PO = PO = 10;

                exports.NU = NU = 11;

                exports.AL = AL = 12;

                exports.HL = HL = 13;

                exports.ID = ID = 14;

                exports.IN = IN = 15;

                exports.HY = HY = 16;

                exports.BA = BA = 17;

                exports.BB = BB = 18;

                exports.B2 = B2 = 19;

                exports.ZW = ZW = 20;

                exports.CM = CM = 21;

                exports.WJ = WJ = 22;

                exports.H2 = H2 = 23;

                exports.H3 = H3 = 24;

                exports.JL = JL = 25;

                exports.JV = JV = 26;

                exports.JT = JT = 27;

                exports.RI = RI = 28;

                exports.AI = AI = 29;

                exports.BK = BK = 30;

                exports.CB = CB = 31;

                exports.CJ = CJ = 32;

                exports.CR = CR = 33;

                exports.LF = LF = 34;

                exports.NL = NL = 35;

                exports.SA = SA = 36;

                exports.SG = SG = 37;

                exports.SP = SP = 38;

                exports.XX = XX = 39;

            }).call(this);


            /***/ }),
        /* 21 */
        /***/ (function(module, exports) {

            // Generated by CoffeeScript 1.7.1
            (function() {
                var CI_BRK, CP_BRK, DI_BRK, IN_BRK, PR_BRK;

                exports.DI_BRK = DI_BRK = 0;

                exports.IN_BRK = IN_BRK = 1;

                exports.CI_BRK = CI_BRK = 2;

                exports.CP_BRK = CP_BRK = 3;

                exports.PR_BRK = PR_BRK = 4;

                exports.pairTable = [[PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, CP_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, DI_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, DI_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, PR_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK]];

            }).call(this);


            /***/ }),
        /* 22 */
        /***/ (function(module, exports) {

            /* jslint node: true */
            'use strict';

            /**
             * Creates an instance of StyleContextStack used for style inheritance and style overrides
             *
             * @constructor
             * @this {StyleContextStack}
             * @param {Object} named styles dictionary
             * @param {Object} optional default style definition
             */
            function StyleContextStack(styleDictionary, defaultStyle) {
                this.defaultStyle = defaultStyle || {};
                this.styleDictionary = styleDictionary;
                this.styleOverrides = [];
            }

            /**
             * Creates cloned version of current stack
             * @return {StyleContextStack} current stack snapshot
             */
            StyleContextStack.prototype.clone = function () {
                var stack = new StyleContextStack(this.styleDictionary, this.defaultStyle);

                this.styleOverrides.forEach(function (item) {
                    stack.styleOverrides.push(item);
                });

                return stack;
            };

            /**
             * Pushes style-name or style-overrides-object onto the stack for future evaluation
             *
             * @param {String|Object} styleNameOrOverride style-name (referring to styleDictionary) or
             *                                            a new dictionary defining overriding properties
             */
            StyleContextStack.prototype.push = function (styleNameOrOverride) {
                this.styleOverrides.push(styleNameOrOverride);
            };

            /**
             * Removes last style-name or style-overrides-object from the stack
             *
             * @param {Number} howMany - optional number of elements to be popped (if not specified,
             *                           one element will be removed from the stack)
             */
            StyleContextStack.prototype.pop = function (howMany) {
                howMany = howMany || 1;

                while (howMany-- > 0) {
                    this.styleOverrides.pop();
                }
            };

            /**
             * Creates a set of named styles or/and a style-overrides-object based on the item,
             * pushes those elements onto the stack for future evaluation and returns the number
             * of elements pushed, so they can be easily poped then.
             *
             * @param {Object} item - an object with optional style property and/or style overrides
             * @return the number of items pushed onto the stack
             */
            StyleContextStack.prototype.autopush = function (item) {
                if (typeof item === 'string' || item instanceof String) {
                    return 0;
                }

                var styleNames = [];

                if (item.style) {
                    if (Array.isArray(item.style)) {
                        styleNames = item.style;
                    } else {
                        styleNames = [item.style];
                    }
                }

                for (var i = 0, l = styleNames.length; i < l; i++) {
                    this.push(styleNames[i]);
                }

                var styleOverrideObject = {};
                var pushSOO = false;

                [
                    'font',
                    'fontSize',
                    'bold',
                    'italics',
                    'alignment',
                    'color',
                    'columnGap',
                    'fillColor',
                    'decoration',
                    'decorationStyle',
                    'decorationColor',
                    'background',
                    'lineHeight',
                    'characterSpacing',
                    'noWrap',
                    'markerColor',
                    'leadingIndent'
                    //'tableCellPadding'
                    // 'cellBorder',
                    // 'headerCellBorder',
                    // 'oddRowCellBorder',
                    // 'evenRowCellBorder',
                    // 'tableBorder'
                ].forEach(function (key) {
                    if (item[key] !== undefined && item[key] !== null) {
                        styleOverrideObject[key] = item[key];
                        pushSOO = true;
                    }
                });

                if (pushSOO) {
                    this.push(styleOverrideObject);
                }

                return styleNames.length + (pushSOO ? 1 : 0);
            };

            /**
             * Automatically pushes elements onto the stack, using autopush based on item,
             * executes callback and then pops elements back. Returns value returned by callback
             *
             * @param  {Object}   item - an object with optional style property and/or style overrides
             * @param  {Function} function to be called between autopush and pop
             * @return {Object} value returned by callback
             */
            StyleContextStack.prototype.auto = function (item, callback) {
                var pushedItems = this.autopush(item);
                var result = callback();

                if (pushedItems > 0) {
                    this.pop(pushedItems);
                }

                return result;
            };

            /**
             * Evaluates stack and returns value of a named property
             *
             * @param {String} property - property name
             * @return property value or null if not found
             */
            StyleContextStack.prototype.getProperty = function (property) {
                if (this.styleOverrides) {
                    for (var i = this.styleOverrides.length - 1; i >= 0; i--) {
                        var item = this.styleOverrides[i];

                        if (typeof item === 'string' || item instanceof String) {
                            // named-style-override

                            var style = this.styleDictionary[item];
                            if (style && style[property] !== null && style[property] !== undefined) {
                                return style[property];
                            }
                        } else {
                            // style-overrides-object
                            if (item[property] !== undefined && item[property] !== null) {
                                return item[property];
                            }
                        }
                    }
                }

                return this.defaultStyle && this.defaultStyle[property];
            };

            module.exports = StyleContextStack;


            /***/ }),
        /* 23 */
        /***/ (function(module, exports) {

            /* jslint node: true */
            'use strict';

            function buildColumnWidths(columns, availableWidth) {
                var autoColumns = [],
                    autoMin = 0, autoMax = 0,
                    starColumns = [],
                    starMaxMin = 0,
                    starMaxMax = 0,
                    fixedColumns = [],
                    initial_availableWidth = availableWidth;

                columns.forEach(function (column) {
                    if (isAutoColumn(column)) {
                        autoColumns.push(column);
                        autoMin += column._minWidth;
                        autoMax += column._maxWidth;
                    } else if (isStarColumn(column)) {
                        starColumns.push(column);
                        starMaxMin = Math.max(starMaxMin, column._minWidth);
                        starMaxMax = Math.max(starMaxMax, column._maxWidth);
                    } else {
                        fixedColumns.push(column);
                    }
                });

                fixedColumns.forEach(function (col) {
                    // width specified as %
                    if (typeof col.width === 'string' && /\d+%/.test(col.width)) {
                        col.width = parseFloat(col.width) * initial_availableWidth / 100;
                    }
                    if (col.width < (col._minWidth) && col.elasticWidth) {
                        col._calcWidth = col._minWidth;
                    } else {
                        col._calcWidth = col.width;
                    }

                    availableWidth -= col._calcWidth;
                });

                // http://www.freesoft.org/CIE/RFC/1942/18.htm
                // http://www.w3.org/TR/CSS2/tables.html#width-layout
                // http://dev.w3.org/csswg/css3-tables-algorithms/Overview.src.htm
                var minW = autoMin + starMaxMin * starColumns.length;
                var maxW = autoMax + starMaxMax * starColumns.length;
                if (minW >= availableWidth) {
                    // case 1 - there's no way to fit all columns within available width
                    // that's actually pretty bad situation with PDF as we have no horizontal scroll
                    // no easy workaround (unless we decide, in the future, to split single words)
                    // currently we simply use minWidths for all columns
                    autoColumns.forEach(function (col) {
                        col._calcWidth = col._minWidth;
                    });

                    starColumns.forEach(function (col) {
                        col._calcWidth = starMaxMin; // starMaxMin already contains padding
                    });
                } else {
                    if (maxW < availableWidth) {
                        // case 2 - we can fit rest of the table within available space
                        autoColumns.forEach(function (col) {
                            col._calcWidth = col._maxWidth;
                            availableWidth -= col._calcWidth;
                        });
                    } else {
                        // maxW is too large, but minW fits within available width
                        var W = availableWidth - minW;
                        var D = maxW - minW;

                        autoColumns.forEach(function (col) {
                            var d = col._maxWidth - col._minWidth;
                            col._calcWidth = col._minWidth + d * W / D;
                            availableWidth -= col._calcWidth;
                        });
                    }

                    if (starColumns.length > 0) {
                        var starSize = availableWidth / starColumns.length;

                        starColumns.forEach(function (col) {
                            col._calcWidth = starSize;
                        });
                    }
                }
            }

            function isAutoColumn(column) {
                return column.width === 'auto';
            }

            function isStarColumn(column) {
                return column.width === null || column.width === undefined || column.width === '*' || column.width === 'star';
            }

            //TODO: refactor and reuse in measureTable
            function measureMinMax(columns) {
                var result = {min: 0, max: 0};

                var maxStar = {min: 0, max: 0};
                var starCount = 0;

                for (var i = 0, l = columns.length; i < l; i++) {
                    var c = columns[i];

                    if (isStarColumn(c)) {
                        maxStar.min = Math.max(maxStar.min, c._minWidth);
                        maxStar.max = Math.max(maxStar.max, c._maxWidth);
                        starCount++;
                    } else if (isAutoColumn(c)) {
                        result.min += c._minWidth;
                        result.max += c._maxWidth;
                    } else {
                        result.min += ((c.width !== undefined && c.width) || c._minWidth);
                        result.max += ((c.width !== undefined && c.width) || c._maxWidth);
                    }
                }

                if (starCount) {
                    result.min += starCount * maxStar.min;
                    result.max += starCount * maxStar.max;
                }

                return result;
            }

            /**
             * Calculates column widths
             * @private
             */
            module.exports = {
                buildColumnWidths: buildColumnWidths,
                measureMinMax: measureMinMax,
                isAutoColumn: isAutoColumn,
                isStarColumn: isStarColumn
            };


            /***/ }),
        /* 24 */
        /***/ (function(module, exports) {

            /* jslint node: true */
            'use strict';
            /*jshint -W004 */
            /* qr.js -- QR code generator in Javascript (revision 2011-01-19)
             * Written by Kang Seonghoon <public+qrjs@mearie.org>.
             *
             * This source code is in the public domain; if your jurisdiction does not
             * recognize the public domain the terms of Creative Commons CC0 license
             * apply. In the other words, you can always do what you want.
             */


            // per-version information (cf. JIS X 0510:2004 pp. 30--36, 71)
            //
            // [0]: the degree of generator polynomial by ECC levels
            // [1]: # of code blocks by ECC levels
            // [2]: left-top positions of alignment patterns
            //
            // the number in this table (in particular, [0]) does not exactly match with
            // the numbers in the specficiation. see augumenteccs below for the reason.
            var VERSIONS = [
                null,
                [[10, 7, 17, 13], [1, 1, 1, 1], []],
                [[16, 10, 28, 22], [1, 1, 1, 1], [4, 16]],
                [[26, 15, 22, 18], [1, 1, 2, 2], [4, 20]],
                [[18, 20, 16, 26], [2, 1, 4, 2], [4, 24]],
                [[24, 26, 22, 18], [2, 1, 4, 4], [4, 28]],
                [[16, 18, 28, 24], [4, 2, 4, 4], [4, 32]],
                [[18, 20, 26, 18], [4, 2, 5, 6], [4, 20, 36]],
                [[22, 24, 26, 22], [4, 2, 6, 6], [4, 22, 40]],
                [[22, 30, 24, 20], [5, 2, 8, 8], [4, 24, 44]],
                [[26, 18, 28, 24], [5, 4, 8, 8], [4, 26, 48]],
                [[30, 20, 24, 28], [5, 4, 11, 8], [4, 28, 52]],
                [[22, 24, 28, 26], [8, 4, 11, 10], [4, 30, 56]],
                [[22, 26, 22, 24], [9, 4, 16, 12], [4, 32, 60]],
                [[24, 30, 24, 20], [9, 4, 16, 16], [4, 24, 44, 64]],
                [[24, 22, 24, 30], [10, 6, 18, 12], [4, 24, 46, 68]],
                [[28, 24, 30, 24], [10, 6, 16, 17], [4, 24, 48, 72]],
                [[28, 28, 28, 28], [11, 6, 19, 16], [4, 28, 52, 76]],
                [[26, 30, 28, 28], [13, 6, 21, 18], [4, 28, 54, 80]],
                [[26, 28, 26, 26], [14, 7, 25, 21], [4, 28, 56, 84]],
                [[26, 28, 28, 30], [16, 8, 25, 20], [4, 32, 60, 88]],
                [[26, 28, 30, 28], [17, 8, 25, 23], [4, 26, 48, 70, 92]],
                [[28, 28, 24, 30], [17, 9, 34, 23], [4, 24, 48, 72, 96]],
                [[28, 30, 30, 30], [18, 9, 30, 25], [4, 28, 52, 76, 100]],
                [[28, 30, 30, 30], [20, 10, 32, 27], [4, 26, 52, 78, 104]],
                [[28, 26, 30, 30], [21, 12, 35, 29], [4, 30, 56, 82, 108]],
                [[28, 28, 30, 28], [23, 12, 37, 34], [4, 28, 56, 84, 112]],
                [[28, 30, 30, 30], [25, 12, 40, 34], [4, 32, 60, 88, 116]],
                [[28, 30, 30, 30], [26, 13, 42, 35], [4, 24, 48, 72, 96, 120]],
                [[28, 30, 30, 30], [28, 14, 45, 38], [4, 28, 52, 76, 100, 124]],
                [[28, 30, 30, 30], [29, 15, 48, 40], [4, 24, 50, 76, 102, 128]],
                [[28, 30, 30, 30], [31, 16, 51, 43], [4, 28, 54, 80, 106, 132]],
                [[28, 30, 30, 30], [33, 17, 54, 45], [4, 32, 58, 84, 110, 136]],
                [[28, 30, 30, 30], [35, 18, 57, 48], [4, 28, 56, 84, 112, 140]],
                [[28, 30, 30, 30], [37, 19, 60, 51], [4, 32, 60, 88, 116, 144]],
                [[28, 30, 30, 30], [38, 19, 63, 53], [4, 28, 52, 76, 100, 124, 148]],
                [[28, 30, 30, 30], [40, 20, 66, 56], [4, 22, 48, 74, 100, 126, 152]],
                [[28, 30, 30, 30], [43, 21, 70, 59], [4, 26, 52, 78, 104, 130, 156]],
                [[28, 30, 30, 30], [45, 22, 74, 62], [4, 30, 56, 82, 108, 134, 160]],
                [[28, 30, 30, 30], [47, 24, 77, 65], [4, 24, 52, 80, 108, 136, 164]],
                [[28, 30, 30, 30], [49, 25, 81, 68], [4, 28, 56, 84, 112, 140, 168]]];

            // mode constants (cf. Table 2 in JIS X 0510:2004 p. 16)
            var MODE_TERMINATOR = 0;
            var MODE_NUMERIC = 1, MODE_ALPHANUMERIC = 2, MODE_OCTET = 4, MODE_KANJI = 8;

            // validation regexps
            var NUMERIC_REGEXP = /^\d*$/;
            var ALPHANUMERIC_REGEXP = /^[A-Za-z0-9 $%*+\-./:]*$/;
            var ALPHANUMERIC_OUT_REGEXP = /^[A-Z0-9 $%*+\-./:]*$/;

            // ECC levels (cf. Table 22 in JIS X 0510:2004 p. 45)
            var ECCLEVEL_L = 1, ECCLEVEL_M = 0, ECCLEVEL_Q = 3, ECCLEVEL_H = 2;

            // GF(2^8)-to-integer mapping with a reducing polynomial x^8+x^4+x^3+x^2+1
            // invariant: GF256_MAP[GF256_INVMAP[i]] == i for all i in [1,256)
            var GF256_MAP = [], GF256_INVMAP = [-1];
            for (var i = 0, v = 1; i < 255; ++i) {
                GF256_MAP.push(v);
                GF256_INVMAP[v] = i;
                v = (v * 2) ^ (v >= 128 ? 0x11d : 0);
            }

            // generator polynomials up to degree 30
            // (should match with polynomials in JIS X 0510:2004 Appendix A)
            //
            // generator polynomial of degree K is product of (x-\alpha^0), (x-\alpha^1),
            // ..., (x-\alpha^(K-1)). by convention, we omit the K-th coefficient (always 1)
            // from the result; also other coefficients are written in terms of the exponent
            // to \alpha to avoid the redundant calculation. (see also calculateecc below.)
            var GF256_GENPOLY = [[]];
            for (var i = 0; i < 30; ++i) {
                var prevpoly = GF256_GENPOLY[i], poly = [];
                for (var j = 0; j <= i; ++j) {
                    var a = (j < i ? GF256_MAP[prevpoly[j]] : 0);
                    var b = GF256_MAP[(i + (prevpoly[j - 1] || 0)) % 255];
                    poly.push(GF256_INVMAP[a ^ b]);
                }
                GF256_GENPOLY.push(poly);
            }

            // alphanumeric character mapping (cf. Table 5 in JIS X 0510:2004 p. 19)
            var ALPHANUMERIC_MAP = {};
            for (var i = 0; i < 45; ++i) {
                ALPHANUMERIC_MAP['0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:'.charAt(i)] = i;
            }

            // mask functions in terms of row # and column #
            // (cf. Table 20 in JIS X 0510:2004 p. 42)
            /*jshint unused: false */
            var MASKFUNCS = [
                function (i, j) {
                    return (i + j) % 2 === 0;
                },
                function (i, j) {
                    return i % 2 === 0;
                },
                function (i, j) {
                    return j % 3 === 0;
                },
                function (i, j) {
                    return (i + j) % 3 === 0;
                },
                function (i, j) {
                    return (((i / 2) | 0) + ((j / 3) | 0)) % 2 === 0;
                },
                function (i, j) {
                    return (i * j) % 2 + (i * j) % 3 === 0;
                },
                function (i, j) {
                    return ((i * j) % 2 + (i * j) % 3) % 2 === 0;
                },
                function (i, j) {
                    return ((i + j) % 2 + (i * j) % 3) % 2 === 0;
                }];

            // returns true when the version information has to be embeded.
            var needsverinfo = function (ver) {
                return ver > 6;
            };

            // returns the size of entire QR code for given version.
            var getsizebyver = function (ver) {
                return 4 * ver + 17;
            };

            // returns the number of bits available for code words in this version.
            var nfullbits = function (ver) {
                /*
                 * |<--------------- n --------------->|
                 * |        |<----- n-17 ---->|        |
                 * +-------+                ///+-------+ ----
                 * |       |                ///|       |    ^
                 * |  9x9  |       @@@@@    ///|  9x8  |    |
                 * |       | # # # @5x5@ # # # |       |    |
                 * +-------+       @@@@@       +-------+    |
                 *       #                               ---|
                 *                                        ^ |
                 *       #                                |
                 *     @@@@@       @@@@@       @@@@@      | n
                 *     @5x5@       @5x5@       @5x5@   n-17
                 *     @@@@@       @@@@@       @@@@@      | |
                 *       #                                | |
                 * //////                                 v |
                 * //////#                               ---|
                 * +-------+       @@@@@       @@@@@        |
                 * |       |       @5x5@       @5x5@        |
                 * |  8x9  |       @@@@@       @@@@@        |
                 * |       |                                v
                 * +-------+                             ----
                 *
                 * when the entire code has n^2 modules and there are m^2-3 alignment
                 * patterns, we have:
                 * - 225 (= 9x9 + 9x8 + 8x9) modules for finder patterns and
                 *   format information;
                 * - 2n-34 (= 2(n-17)) modules for timing patterns;
                 * - 36 (= 3x6 + 6x3) modules for version information, if any;
                 * - 25m^2-75 (= (m^2-3)(5x5)) modules for alignment patterns
                 *   if any, but 10m-20 (= 2(m-2)x5) of them overlaps with
                 *   timing patterns.
                 */
                var v = VERSIONS[ver];
                var nbits = 16 * ver * ver + 128 * ver + 64; // finder, timing and format info.
                if (needsverinfo(ver))
                    nbits -= 36; // version information
                if (v[2].length) { // alignment patterns
                    nbits -= 25 * v[2].length * v[2].length - 10 * v[2].length - 55;
                }
                return nbits;
            };

            // returns the number of bits available for data portions (i.e. excludes ECC
            // bits but includes mode and length bits) in this version and ECC level.
            var ndatabits = function (ver, ecclevel) {
                var nbits = nfullbits(ver) & ~7; // no sub-octet code words
                var v = VERSIONS[ver];
                nbits -= 8 * v[0][ecclevel] * v[1][ecclevel]; // ecc bits
                return nbits;
            };

            // returns the number of bits required for the length of data.
            // (cf. Table 3 in JIS X 0510:2004 p. 16)
            var ndatalenbits = function (ver, mode) {
                switch (mode) {
                    case MODE_NUMERIC:
                        return (ver < 10 ? 10 : ver < 27 ? 12 : 14);
                    case MODE_ALPHANUMERIC:
                        return (ver < 10 ? 9 : ver < 27 ? 11 : 13);
                    case MODE_OCTET:
                        return (ver < 10 ? 8 : 16);
                    case MODE_KANJI:
                        return (ver < 10 ? 8 : ver < 27 ? 10 : 12);
                }
            };

            // returns the maximum length of data possible in given configuration.
            var getmaxdatalen = function (ver, mode, ecclevel) {
                var nbits = ndatabits(ver, ecclevel) - 4 - ndatalenbits(ver, mode); // 4 for mode bits
                switch (mode) {
                    case MODE_NUMERIC:
                        return ((nbits / 10) | 0) * 3 + (nbits % 10 < 4 ? 0 : nbits % 10 < 7 ? 1 : 2);
                    case MODE_ALPHANUMERIC:
                        return ((nbits / 11) | 0) * 2 + (nbits % 11 < 6 ? 0 : 1);
                    case MODE_OCTET:
                        return (nbits / 8) | 0;
                    case MODE_KANJI:
                        return (nbits / 13) | 0;
                }
            };

            // checks if the given data can be encoded in given mode, and returns
            // the converted data for the further processing if possible. otherwise
            // returns null.
            //
            // this function does not check the length of data; it is a duty of
            // encode function below (as it depends on the version and ECC level too).
            var validatedata = function (mode, data) {
                switch (mode) {
                    case MODE_NUMERIC:
                        if (!data.match(NUMERIC_REGEXP))
                            return null;
                        return data;

                    case MODE_ALPHANUMERIC:
                        if (!data.match(ALPHANUMERIC_REGEXP))
                            return null;
                        return data.toUpperCase();

                    case MODE_OCTET:
                        if (typeof data === 'string') { // encode as utf-8 string
                            var newdata = [];
                            for (var i = 0; i < data.length; ++i) {
                                var ch = data.charCodeAt(i);
                                if (ch < 0x80) {
                                    newdata.push(ch);
                                } else if (ch < 0x800) {
                                    newdata.push(0xc0 | (ch >> 6),
                                        0x80 | (ch & 0x3f));
                                } else if (ch < 0x10000) {
                                    newdata.push(0xe0 | (ch >> 12),
                                        0x80 | ((ch >> 6) & 0x3f),
                                        0x80 | (ch & 0x3f));
                                } else {
                                    newdata.push(0xf0 | (ch >> 18),
                                        0x80 | ((ch >> 12) & 0x3f),
                                        0x80 | ((ch >> 6) & 0x3f),
                                        0x80 | (ch & 0x3f));
                                }
                            }
                            return newdata;
                        } else {
                            return data;
                        }
                }
            };

            // returns the code words (sans ECC bits) for given data and configurations.
            // requires data to be preprocessed by validatedata. no length check is
            // performed, and everything has to be checked before calling this function.
            var encode = function (ver, mode, data, maxbuflen) {
                var buf = [];
                var bits = 0, remaining = 8;
                var datalen = data.length;

                // this function is intentionally no-op when n=0.
                var pack = function (x, n) {
                    if (n >= remaining) {
                        buf.push(bits | (x >> (n -= remaining)));
                        while (n >= 8)
                            buf.push((x >> (n -= 8)) & 255);
                        bits = 0;
                        remaining = 8;
                    }
                    if (n > 0)
                        bits |= (x & ((1 << n) - 1)) << (remaining -= n);
                };

                var nlenbits = ndatalenbits(ver, mode);
                pack(mode, 4);
                pack(datalen, nlenbits);

                switch (mode) {
                    case MODE_NUMERIC:
                        for (var i = 2; i < datalen; i += 3) {
                            pack(parseInt(data.substring(i - 2, i + 1), 10), 10);
                        }
                        pack(parseInt(data.substring(i - 2), 10), [0, 4, 7][datalen % 3]);
                        break;

                    case MODE_ALPHANUMERIC:
                        for (var i = 1; i < datalen; i += 2) {
                            pack(ALPHANUMERIC_MAP[data.charAt(i - 1)] * 45 +
                                ALPHANUMERIC_MAP[data.charAt(i)], 11);
                        }
                        if (datalen % 2 == 1) {
                            pack(ALPHANUMERIC_MAP[data.charAt(i - 1)], 6);
                        }
                        break;

                    case MODE_OCTET:
                        for (var i = 0; i < datalen; ++i) {
                            pack(data[i], 8);
                        }
                        break;
                }

                // final bits. it is possible that adding terminator causes the buffer
                // to overflow, but then the buffer truncated to the maximum size will
                // be valid as the truncated terminator mode bits and padding is
                // identical in appearance (cf. JIS X 0510:2004 sec 8.4.8).
                pack(MODE_TERMINATOR, 4);
                if (remaining < 8)
                    buf.push(bits);

                // the padding to fill up the remaining space. we should not add any
                // words when the overflow already occurred.
                while (buf.length + 1 < maxbuflen)
                    buf.push(0xec, 0x11);
                if (buf.length < maxbuflen)
                    buf.push(0xec);
                return buf;
            };

            // calculates ECC code words for given code words and generator polynomial.
            //
            // this is quite similar to CRC calculation as both Reed-Solomon and CRC use
            // the certain kind of cyclic codes, which is effectively the division of
            // zero-augumented polynomial by the generator polynomial. the only difference
            // is that Reed-Solomon uses GF(2^8), instead of CRC's GF(2), and Reed-Solomon
            // uses the different generator polynomial than CRC's.
            var calculateecc = function (poly, genpoly) {
                var modulus = poly.slice(0);
                var polylen = poly.length, genpolylen = genpoly.length;
                for (var i = 0; i < genpolylen; ++i)
                    modulus.push(0);
                for (var i = 0; i < polylen; ) {
                    var quotient = GF256_INVMAP[modulus[i++]];
                    if (quotient >= 0) {
                        for (var j = 0; j < genpolylen; ++j) {
                            modulus[i + j] ^= GF256_MAP[(quotient + genpoly[j]) % 255];
                        }
                    }
                }
                return modulus.slice(polylen);
            };

            // auguments ECC code words to given code words. the resulting words are
            // ready to be encoded in the matrix.
            //
            // the much of actual augumenting procedure follows JIS X 0510:2004 sec 8.7.
            // the code is simplified using the fact that the size of each code & ECC
            // blocks is almost same; for example, when we have 4 blocks and 46 data words
            // the number of code words in those blocks are 11, 11, 12, 12 respectively.
            var augumenteccs = function (poly, nblocks, genpoly) {
                var subsizes = [];
                var subsize = (poly.length / nblocks) | 0, subsize0 = 0;
                var pivot = nblocks - poly.length % nblocks;
                for (var i = 0; i < pivot; ++i) {
                    subsizes.push(subsize0);
                    subsize0 += subsize;
                }
                for (var i = pivot; i < nblocks; ++i) {
                    subsizes.push(subsize0);
                    subsize0 += subsize + 1;
                }
                subsizes.push(subsize0);

                var eccs = [];
                for (var i = 0; i < nblocks; ++i) {
                    eccs.push(calculateecc(poly.slice(subsizes[i], subsizes[i + 1]), genpoly));
                }

                var result = [];
                var nitemsperblock = (poly.length / nblocks) | 0;
                for (var i = 0; i < nitemsperblock; ++i) {
                    for (var j = 0; j < nblocks; ++j) {
                        result.push(poly[subsizes[j] + i]);
                    }
                }
                for (var j = pivot; j < nblocks; ++j) {
                    result.push(poly[subsizes[j + 1] - 1]);
                }
                for (var i = 0; i < genpoly.length; ++i) {
                    for (var j = 0; j < nblocks; ++j) {
                        result.push(eccs[j][i]);
                    }
                }
                return result;
            };

            // auguments BCH(p+q,q) code to the polynomial over GF(2), given the proper
            // genpoly. the both input and output are in binary numbers, and unlike
            // calculateecc genpoly should include the 1 bit for the highest degree.
            //
            // actual polynomials used for this procedure are as follows:
            // - p=10, q=5, genpoly=x^10+x^8+x^5+x^4+x^2+x+1 (JIS X 0510:2004 Appendix C)
            // - p=18, q=6, genpoly=x^12+x^11+x^10+x^9+x^8+x^5+x^2+1 (ibid. Appendix D)
            var augumentbch = function (poly, p, genpoly, q) {
                var modulus = poly << q;
                for (var i = p - 1; i >= 0; --i) {
                    if ((modulus >> (q + i)) & 1)
                        modulus ^= genpoly << i;
                }
                return (poly << q) | modulus;
            };

            // creates the base matrix for given version. it returns two matrices, one of
            // them is the actual one and the another represents the "reserved" portion
            // (e.g. finder and timing patterns) of the matrix.
            //
            // some entries in the matrix may be undefined, rather than 0 or 1. this is
            // intentional (no initialization needed!), and putdata below will fill
            // the remaining ones.
            var makebasematrix = function (ver) {
                var v = VERSIONS[ver], n = getsizebyver(ver);
                var matrix = [], reserved = [];
                for (var i = 0; i < n; ++i) {
                    matrix.push([]);
                    reserved.push([]);
                }

                var blit = function (y, x, h, w, bits) {
                    for (var i = 0; i < h; ++i) {
                        for (var j = 0; j < w; ++j) {
                            matrix[y + i][x + j] = (bits[i] >> j) & 1;
                            reserved[y + i][x + j] = 1;
                        }
                    }
                };

                // finder patterns and a part of timing patterns
                // will also mark the format information area (not yet written) as reserved.
                blit(0, 0, 9, 9, [0x7f, 0x41, 0x5d, 0x5d, 0x5d, 0x41, 0x17f, 0x00, 0x40]);
                blit(n - 8, 0, 8, 9, [0x100, 0x7f, 0x41, 0x5d, 0x5d, 0x5d, 0x41, 0x7f]);
                blit(0, n - 8, 9, 8, [0xfe, 0x82, 0xba, 0xba, 0xba, 0x82, 0xfe, 0x00, 0x00]);

                // the rest of timing patterns
                for (var i = 9; i < n - 8; ++i) {
                    matrix[6][i] = matrix[i][6] = ~i & 1;
                    reserved[6][i] = reserved[i][6] = 1;
                }

                // alignment patterns
                var aligns = v[2], m = aligns.length;
                for (var i = 0; i < m; ++i) {
                    var minj = (i === 0 || i === m - 1 ? 1 : 0), maxj = (i === 0 ? m - 1 : m);
                    for (var j = minj; j < maxj; ++j) {
                        blit(aligns[i], aligns[j], 5, 5, [0x1f, 0x11, 0x15, 0x11, 0x1f]);
                    }
                }

                // version information
                if (needsverinfo(ver)) {
                    var code = augumentbch(ver, 6, 0x1f25, 12);
                    var k = 0;
                    for (var i = 0; i < 6; ++i) {
                        for (var j = 0; j < 3; ++j) {
                            matrix[i][(n - 11) + j] = matrix[(n - 11) + j][i] = (code >> k++) & 1;
                            reserved[i][(n - 11) + j] = reserved[(n - 11) + j][i] = 1;
                        }
                    }
                }

                return {matrix: matrix, reserved: reserved};
            };

            // fills the data portion (i.e. unmarked in reserved) of the matrix with given
            // code words. the size of code words should be no more than available bits,
            // and remaining bits are padded to 0 (cf. JIS X 0510:2004 sec 8.7.3).
            var putdata = function (matrix, reserved, buf) {
                var n = matrix.length;
                var k = 0, dir = -1;
                for (var i = n - 1; i >= 0; i -= 2) {
                    if (i == 6)
                        --i; // skip the entire timing pattern column
                    var jj = (dir < 0 ? n - 1 : 0);
                    for (var j = 0; j < n; ++j) {
                        for (var ii = i; ii > i - 2; --ii) {
                            if (!reserved[jj][ii]) {
                                // may overflow, but (undefined >> x)
                                // is 0 so it will auto-pad to zero.
                                matrix[jj][ii] = (buf[k >> 3] >> (~k & 7)) & 1;
                                ++k;
                            }
                        }
                        jj += dir;
                    }
                    dir = -dir;
                }
                return matrix;
            };

            // XOR-masks the data portion of the matrix. repeating the call with the same
            // arguments will revert the prior call (convenient in the matrix evaluation).
            var maskdata = function (matrix, reserved, mask) {
                var maskf = MASKFUNCS[mask];
                var n = matrix.length;
                for (var i = 0; i < n; ++i) {
                    for (var j = 0; j < n; ++j) {
                        if (!reserved[i][j])
                            matrix[i][j] ^= maskf(i, j);
                    }
                }
                return matrix;
            };

            // puts the format information.
            var putformatinfo = function (matrix, reserved, ecclevel, mask) {
                var n = matrix.length;
                var code = augumentbch((ecclevel << 3) | mask, 5, 0x537, 10) ^ 0x5412;
                for (var i = 0; i < 15; ++i) {
                    var r = [0, 1, 2, 3, 4, 5, 7, 8, n - 7, n - 6, n - 5, n - 4, n - 3, n - 2, n - 1][i];
                    var c = [n - 1, n - 2, n - 3, n - 4, n - 5, n - 6, n - 7, n - 8, 7, 5, 4, 3, 2, 1, 0][i];
                    matrix[r][8] = matrix[8][c] = (code >> i) & 1;
                    // we don't have to mark those bits reserved; always done
                    // in makebasematrix above.
                }
                return matrix;
            };

            // evaluates the resulting matrix and returns the score (lower is better).
            // (cf. JIS X 0510:2004 sec 8.8.2)
            //
            // the evaluation procedure tries to avoid the problematic patterns naturally
            // occuring from the original matrix. for example, it penaltizes the patterns
            // which just look like the finder pattern which will confuse the decoder.
            // we choose the mask which results in the lowest score among 8 possible ones.
            //
            // note: zxing seems to use the same procedure and in many cases its choice
            // agrees to ours, but sometimes it does not. practically it doesn't matter.
            var evaluatematrix = function (matrix) {
                // N1+(k-5) points for each consecutive row of k same-colored modules,
                // where k >= 5. no overlapping row counts.
                var PENALTY_CONSECUTIVE = 3;
                // N2 points for each 2x2 block of same-colored modules.
                // overlapping block does count.
                var PENALTY_TWOBYTWO = 3;
                // N3 points for each pattern with >4W:1B:1W:3B:1W:1B or
                // 1B:1W:3B:1W:1B:>4W, or their multiples (e.g. highly unlikely,
                // but 13W:3B:3W:9B:3W:3B counts).
                var PENALTY_FINDERLIKE = 40;
                // N4*k points for every (5*k)% deviation from 50% black density.
                // i.e. k=1 for 55~60% and 40~45%, k=2 for 60~65% and 35~40%, etc.
                var PENALTY_DENSITY = 10;

                var evaluategroup = function (groups) { // assumes [W,B,W,B,W,...,B,W]
                    var score = 0;
                    for (var i = 0; i < groups.length; ++i) {
                        if (groups[i] >= 5)
                            score += PENALTY_CONSECUTIVE + (groups[i] - 5);
                    }
                    for (var i = 5; i < groups.length; i += 2) {
                        var p = groups[i];
                        if (groups[i - 1] == p && groups[i - 2] == 3 * p && groups[i - 3] == p &&
                            groups[i - 4] == p && (groups[i - 5] >= 4 * p || groups[i + 1] >= 4 * p)) {
                            // this part differs from zxing...
                            score += PENALTY_FINDERLIKE;
                        }
                    }
                    return score;
                };

                var n = matrix.length;
                var score = 0, nblacks = 0;
                for (var i = 0; i < n; ++i) {
                    var row = matrix[i];
                    var groups;

                    // evaluate the current row
                    groups = [0]; // the first empty group of white
                    for (var j = 0; j < n; ) {
                        var k;
                        for (k = 0; j < n && row[j]; ++k)
                            ++j;
                        groups.push(k);
                        for (k = 0; j < n && !row[j]; ++k)
                            ++j;
                        groups.push(k);
                    }
                    score += evaluategroup(groups);

                    // evaluate the current column
                    groups = [0];
                    for (var j = 0; j < n; ) {
                        var k;
                        for (k = 0; j < n && matrix[j][i]; ++k)
                            ++j;
                        groups.push(k);
                        for (k = 0; j < n && !matrix[j][i]; ++k)
                            ++j;
                        groups.push(k);
                    }
                    score += evaluategroup(groups);

                    // check the 2x2 box and calculate the density
                    var nextrow = matrix[i + 1] || [];
                    nblacks += row[0];
                    for (var j = 1; j < n; ++j) {
                        var p = row[j];
                        nblacks += p;
                        // at least comparison with next row should be strict...
                        if (row[j - 1] == p && nextrow[j] === p && nextrow[j - 1] === p) {
                            score += PENALTY_TWOBYTWO;
                        }
                    }
                }

                score += PENALTY_DENSITY * ((Math.abs(nblacks / n / n - 0.5) / 0.05) | 0);
                return score;
            };

            // returns the fully encoded QR code matrix which contains given data.
            // it also chooses the best mask automatically when mask is -1.
            var generate = function (data, ver, mode, ecclevel, mask) {
                var v = VERSIONS[ver];
                var buf = encode(ver, mode, data, ndatabits(ver, ecclevel) >> 3);
                buf = augumenteccs(buf, v[1][ecclevel], GF256_GENPOLY[v[0][ecclevel]]);

                var result = makebasematrix(ver);
                var matrix = result.matrix, reserved = result.reserved;
                putdata(matrix, reserved, buf);

                if (mask < 0) {
                    // find the best mask
                    maskdata(matrix, reserved, 0);
                    putformatinfo(matrix, reserved, ecclevel, 0);
                    var bestmask = 0, bestscore = evaluatematrix(matrix);
                    maskdata(matrix, reserved, 0);
                    for (mask = 1; mask < 8; ++mask) {
                        maskdata(matrix, reserved, mask);
                        putformatinfo(matrix, reserved, ecclevel, mask);
                        var score = evaluatematrix(matrix);
                        if (bestscore > score) {
                            bestscore = score;
                            bestmask = mask;
                        }
                        maskdata(matrix, reserved, mask);
                    }
                    mask = bestmask;
                }

                maskdata(matrix, reserved, mask);
                putformatinfo(matrix, reserved, ecclevel, mask);
                return matrix;
            };

            // the public interface is trivial; the options available are as follows:
            //
            // - version: an integer in [1,40]. when omitted (or -1) the smallest possible
            //   version is chosen.
            // - mode: one of 'numeric', 'alphanumeric', 'octet'. when omitted the smallest
            //   possible mode is chosen.
            // - eccLevel: one of 'L', 'M', 'Q', 'H'. defaults to 'L'.
            // - mask: an integer in [0,7]. when omitted (or -1) the best mask is chosen.
            //

            function generateFrame(data, options) {
                var MODES = {'numeric': MODE_NUMERIC, 'alphanumeric': MODE_ALPHANUMERIC,
                    'octet': MODE_OCTET};
                var ECCLEVELS = {'L': ECCLEVEL_L, 'M': ECCLEVEL_M, 'Q': ECCLEVEL_Q,
                    'H': ECCLEVEL_H};

                options = options || {};
                var ver = options.version || -1;
                var ecclevel = ECCLEVELS[(options.eccLevel || 'L').toUpperCase()];
                var mode = options.mode ? MODES[options.mode.toLowerCase()] : -1;
                var mask = 'mask' in options ? options.mask : -1;

                if (mode < 0) {
                    if (typeof data === 'string') {
                        if (data.match(NUMERIC_REGEXP)) {
                            mode = MODE_NUMERIC;
                        } else if (data.match(ALPHANUMERIC_OUT_REGEXP)) {
                            // while encode supports case-insensitive encoding, we restrict the data to be uppercased when auto-selecting the mode.
                            mode = MODE_ALPHANUMERIC;
                        } else {
                            mode = MODE_OCTET;
                        }
                    } else {
                        mode = MODE_OCTET;
                    }
                } else if (!(mode == MODE_NUMERIC || mode == MODE_ALPHANUMERIC ||
                    mode == MODE_OCTET)) {
                    throw 'invalid or unsupported mode';
                }

                data = validatedata(mode, data);
                if (data === null)
                    throw 'invalid data format';

                if (ecclevel < 0 || ecclevel > 3)
                    throw 'invalid ECC level';

                if (ver < 0) {
                    for (ver = 1; ver <= 40; ++ver) {
                        if (data.length <= getmaxdatalen(ver, mode, ecclevel))
                            break;
                    }
                    if (ver > 40)
                        throw 'too large data for the Qr format';
                } else if (ver < 1 || ver > 40) {
                    throw 'invalid Qr version! should be between 1 and 40';
                }

                if (mask != -1 && (mask < 0 || mask > 8))
                    throw 'invalid mask';
                //console.log('version:', ver, 'mode:', mode, 'ECC:', ecclevel, 'mask:', mask )
                return generate(data, ver, mode, ecclevel, mask);
            }


            // options
            // - modulesize: a number. this is a size of each modules in pixels, and
            //   defaults to 5px.
            // - margin: a number. this is a size of margin in *modules*, and defaults to
            //   4 (white modules). the specficiation mandates the margin no less than 4
            //   modules, so it is better not to alter this value unless you know what
            //   you're doing.
            function buildCanvas(data, options) {

                var canvas = [];
                var background = options.background || '#fff';
                var foreground = options.foreground || '#000';
                //var margin = options.margin || 4;
                var matrix = generateFrame(data, options);
                var n = matrix.length;
                var modSize = Math.floor(options.fit ? options.fit / n : 5);
                var size = n * modSize;

                canvas.push({
                    type: 'rect',
                    x: 0, y: 0, w: size, h: size, lineWidth: 0, color: background
                });

                for (var i = 0; i < n; ++i) {
                    for (var j = 0; j < n; ++j) {
                        if (matrix[i][j]) {
                            canvas.push({
                                type: 'rect',
                                x: modSize * j,
                                y: modSize * i,
                                w: modSize,
                                h: modSize,
                                lineWidth: 0,
                                color: foreground
                            });
                        }
                    }
                }

                return {
                    canvas: canvas,
                    size: size
                };

            }

            function measure(node) {
                var cd = buildCanvas(node.qr, node);
                node._canvas = cd.canvas;
                node._width = node._height = node._minWidth = node._maxWidth = node._minHeight = node._maxHeight = cd.size;
                return node;
            }

            module.exports = {
                measure: measure
            };

            /***/ }),
        /* 25 */
        /***/ (function(module, exports, __webpack_require__) {

            /* jslint node: true */
            'use strict';

            var TraversalTracker = __webpack_require__(11);

            /**
             * Creates an instance of DocumentContext - a store for current x, y positions and available width/height.
             * It facilitates column divisions and vertical sync
             */
            function DocumentContext(pageSize, pageMargins) {
                this.pages = [];

                this.pageMargins = pageMargins;

                this.x = pageMargins.left;
                this.availableWidth = pageSize.width - pageMargins.left - pageMargins.right;
                this.availableHeight = 0;
                this.page = -1;

                this.snapshots = [];

                this.endingCell = null;

                this.tracker = new TraversalTracker();

                this.addPage(pageSize);
            }

            DocumentContext.prototype.beginColumnGroup = function () {
                this.snapshots.push({
                    x: this.x,
                    y: this.y,
                    availableHeight: this.availableHeight,
                    availableWidth: this.availableWidth,
                    page: this.page,
                    bottomMost: {
                        x: this.x,
                        y: this.y,
                        availableHeight: this.availableHeight,
                        availableWidth: this.availableWidth,
                        page: this.page
                    },
                    endingCell: this.endingCell,
                    lastColumnWidth: this.lastColumnWidth
                });

                this.lastColumnWidth = 0;
            };

            DocumentContext.prototype.beginColumn = function (width, offset, endingCell) {
                var saved = this.snapshots[this.snapshots.length - 1];

                this.calculateBottomMost(saved);

                this.endingCell = endingCell;
                this.page = saved.page;
                this.x = this.x + this.lastColumnWidth + (offset || 0);
                this.y = saved.y;
                this.availableWidth = width;	//saved.availableWidth - offset;
                this.availableHeight = saved.availableHeight;

                this.lastColumnWidth = width;
            };

            DocumentContext.prototype.calculateBottomMost = function (destContext) {
                if (this.endingCell) {
                    this.saveContextInEndingCell(this.endingCell);
                    this.endingCell = null;
                } else {
                    destContext.bottomMost = bottomMostContext(this, destContext.bottomMost);
                }
            };

            DocumentContext.prototype.markEnding = function (endingCell) {
                this.page = endingCell._columnEndingContext.page;
                this.x = endingCell._columnEndingContext.x;
                this.y = endingCell._columnEndingContext.y;
                this.availableWidth = endingCell._columnEndingContext.availableWidth;
                this.availableHeight = endingCell._columnEndingContext.availableHeight;
                this.lastColumnWidth = endingCell._columnEndingContext.lastColumnWidth;
            };

            DocumentContext.prototype.saveContextInEndingCell = function (endingCell) {
                endingCell._columnEndingContext = {
                    page: this.page,
                    x: this.x,
                    y: this.y,
                    availableHeight: this.availableHeight,
                    availableWidth: this.availableWidth,
                    lastColumnWidth: this.lastColumnWidth
                };
            };

            DocumentContext.prototype.completeColumnGroup = function () {
                var saved = this.snapshots.pop();

                this.calculateBottomMost(saved);

                this.endingCell = null;
                this.x = saved.x;
                this.y = saved.bottomMost.y;
                this.page = saved.bottomMost.page;
                this.availableWidth = saved.availableWidth;
                this.availableHeight = saved.bottomMost.availableHeight;
                this.lastColumnWidth = saved.lastColumnWidth;
            };

            DocumentContext.prototype.addMargin = function (left, right) {
                this.x += left;
                this.availableWidth -= left + (right || 0);
            };

            DocumentContext.prototype.moveDown = function (offset) {
                this.y += offset;
                this.availableHeight -= offset;

                return this.availableHeight > 0;
            };

            DocumentContext.prototype.initializePage = function () {
                this.y = this.pageMargins.top;
                this.availableHeight = this.getCurrentPage().pageSize.height - this.pageMargins.top - this.pageMargins.bottom;
                this.pageSnapshot().availableWidth = this.getCurrentPage().pageSize.width - this.pageMargins.left - this.pageMargins.right;
            };

            DocumentContext.prototype.pageSnapshot = function () {
                if (this.snapshots[0]) {
                    return this.snapshots[0];
                } else {
                    return this;
                }
            };

            DocumentContext.prototype.moveTo = function (x, y) {
                if (x !== undefined && x !== null) {
                    this.x = x;
                    this.availableWidth = this.getCurrentPage().pageSize.width - this.x - this.pageMargins.right;
                }
                if (y !== undefined && y !== null) {
                    this.y = y;
                    this.availableHeight = this.getCurrentPage().pageSize.height - this.y - this.pageMargins.bottom;
                }
            };

            DocumentContext.prototype.beginDetachedBlock = function () {
                this.snapshots.push({
                    x: this.x,
                    y: this.y,
                    availableHeight: this.availableHeight,
                    availableWidth: this.availableWidth,
                    page: this.page,
                    endingCell: this.endingCell,
                    lastColumnWidth: this.lastColumnWidth
                });
            };

            DocumentContext.prototype.endDetachedBlock = function () {
                var saved = this.snapshots.pop();

                this.x = saved.x;
                this.y = saved.y;
                this.availableWidth = saved.availableWidth;
                this.availableHeight = saved.availableHeight;
                this.page = saved.page;
                this.endingCell = saved.endingCell;
                this.lastColumnWidth = saved.lastColumnWidth;
            };

            function pageOrientation(pageOrientationString, currentPageOrientation) {
                if (pageOrientationString === undefined) {
                    return currentPageOrientation;
                } else if ((typeof pageOrientationString === 'string' || pageOrientationString instanceof String) && (pageOrientationString.toLowerCase() === 'landscape')) {
                    return 'landscape';
                } else {
                    return 'portrait';
                }
            }

            var getPageSize = function (currentPage, newPageOrientation) {

                newPageOrientation = pageOrientation(newPageOrientation, currentPage.pageSize.orientation);

                if (newPageOrientation !== currentPage.pageSize.orientation) {
                    return {
                        orientation: newPageOrientation,
                        width: currentPage.pageSize.height,
                        height: currentPage.pageSize.width
                    };
                } else {
                    return {
                        orientation: currentPage.pageSize.orientation,
                        width: currentPage.pageSize.width,
                        height: currentPage.pageSize.height
                    };
                }

            };


            DocumentContext.prototype.moveToNextPage = function (pageOrientation) {
                var nextPageIndex = this.page + 1;

                var prevPage = this.page;
                var prevY = this.y;

                var createNewPage = nextPageIndex >= this.pages.length;
                if (createNewPage) {
                    var currentAvailableWidth = this.availableWidth;
                    var currentPageOrientation = this.getCurrentPage().pageSize.orientation;

                    var pageSize = getPageSize(this.getCurrentPage(), pageOrientation);
                    this.addPage(pageSize);

                    if (currentPageOrientation === pageSize.orientation) {
                        this.availableWidth = currentAvailableWidth;
                    }
                } else {
                    this.page = nextPageIndex;
                    this.initializePage();
                }

                return {
                    newPageCreated: createNewPage,
                    prevPage: prevPage,
                    prevY: prevY,
                    y: this.y
                };
            };


            DocumentContext.prototype.addPage = function (pageSize) {
                var page = {items: [], pageSize: pageSize};
                this.pages.push(page);
                this.page = this.pages.length - 1;
                this.initializePage();

                this.tracker.emit('pageAdded');

                return page;
            };

            DocumentContext.prototype.getCurrentPage = function () {
                if (this.page < 0 || this.page >= this.pages.length) {
                    return null;
                }

                return this.pages[this.page];
            };

            DocumentContext.prototype.getCurrentPosition = function () {
                var pageSize = this.getCurrentPage().pageSize;
                var innerHeight = pageSize.height - this.pageMargins.top - this.pageMargins.bottom;
                var innerWidth = pageSize.width - this.pageMargins.left - this.pageMargins.right;

                return {
                    pageNumber: this.page + 1,
                    pageOrientation: pageSize.orientation,
                    pageInnerHeight: innerHeight,
                    pageInnerWidth: innerWidth,
                    left: this.x,
                    top: this.y,
                    verticalRatio: ((this.y - this.pageMargins.top) / innerHeight),
                    horizontalRatio: ((this.x - this.pageMargins.left) / innerWidth)
                };
            };

            function bottomMostContext(c1, c2) {
                var r;

                if (c1.page > c2.page) {
                    r = c1;
                } else if (c2.page > c1.page) {
                    r = c2;
                } else {
                    r = (c1.y > c2.y) ? c1 : c2;
                }

                return {
                    page: r.page,
                    x: r.x,
                    y: r.y,
                    availableHeight: r.availableHeight,
                    availableWidth: r.availableWidth
                };
            }

            /****TESTS**** (add a leading '/' to uncomment)
             DocumentContext.bottomMostContext = bottomMostContext;
             // */

            module.exports = DocumentContext;


            /***/ }),
        /* 26 */
        /***/ (function(module, exports, __webpack_require__) {

            /* jslint node: true */
            'use strict';

            var ElementWriter = __webpack_require__(27);

            /**
             * Creates an instance of PageElementWriter - an extended ElementWriter
             * which can handle:
             * - page-breaks (it adds new pages when there's not enough space left),
             * - repeatable fragments (like table-headers, which are repeated everytime
             *                         a page-break occurs)
             * - transactions (used for unbreakable-blocks when we want to make sure
             *                 whole block will be rendered on the same page)
             */
            function PageElementWriter(context, tracker) {
                this.transactionLevel = 0;
                this.repeatables = [];
                this.tracker = tracker;
                this.writer = new ElementWriter(context, tracker);
            }

            function fitOnPage(self, addFct) {
                var position = addFct(self);
                if (!position) {
                    self.moveToNextPage();
                    position = addFct(self);
                }
                return position;
            }

            PageElementWriter.prototype.addLine = function (line, dontUpdateContextPosition, index) {
                return fitOnPage(this, function (self) {
                    return self.writer.addLine(line, dontUpdateContextPosition, index);
                });
            };

            PageElementWriter.prototype.addImage = function (image, index) {
                return fitOnPage(this, function (self) {
                    return self.writer.addImage(image, index);
                });
            };

            PageElementWriter.prototype.addQr = function (qr, index) {
                return fitOnPage(this, function (self) {
                    return self.writer.addQr(qr, index);
                });
            };

            PageElementWriter.prototype.addVector = function (vector, ignoreContextX, ignoreContextY, index) {
                return this.writer.addVector(vector, ignoreContextX, ignoreContextY, index);
            };

            PageElementWriter.prototype.addFragment = function (fragment, useBlockXOffset, useBlockYOffset, dontUpdateContextPosition) {
                if (!this.writer.addFragment(fragment, useBlockXOffset, useBlockYOffset, dontUpdateContextPosition)) {
                    this.moveToNextPage();
                    this.writer.addFragment(fragment, useBlockXOffset, useBlockYOffset, dontUpdateContextPosition);
                }
            };

            PageElementWriter.prototype.moveToNextPage = function (pageOrientation) {

                var nextPage = this.writer.context.moveToNextPage(pageOrientation);

                if (nextPage.newPageCreated) {
                    this.repeatables.forEach(function (rep) {
                        this.writer.addFragment(rep, true);
                    }, this);
                } else {
                    this.repeatables.forEach(function (rep) {
                        this.writer.context.moveDown(rep.height);
                    }, this);
                }

                this.writer.tracker.emit('pageChanged', {
                    prevPage: nextPage.prevPage,
                    prevY: nextPage.prevY,
                    y: nextPage.y
                });
            };

            PageElementWriter.prototype.beginUnbreakableBlock = function (width, height) {
                if (this.transactionLevel++ === 0) {
                    this.originalX = this.writer.context.x;
                    this.writer.pushContext(width, height);
                }
            };

            PageElementWriter.prototype.commitUnbreakableBlock = function (forcedX, forcedY) {
                if (--this.transactionLevel === 0) {
                    var unbreakableContext = this.writer.context;
                    this.writer.popContext();

                    var nbPages = unbreakableContext.pages.length;
                    if (nbPages > 0) {
                        // no support for multi-page unbreakableBlocks
                        var fragment = unbreakableContext.pages[0];
                        fragment.xOffset = forcedX;
                        fragment.yOffset = forcedY;

                        //TODO: vectors can influence height in some situations
                        if (nbPages > 1) {
                            // on out-of-context blocs (headers, footers, background) height should be the whole DocumentContext height
                            if (forcedX !== undefined || forcedY !== undefined) {
                                fragment.height = unbreakableContext.getCurrentPage().pageSize.height - unbreakableContext.pageMargins.top - unbreakableContext.pageMargins.bottom;
                            } else {
                                fragment.height = this.writer.context.getCurrentPage().pageSize.height - this.writer.context.pageMargins.top - this.writer.context.pageMargins.bottom;
                                for (var i = 0, l = this.repeatables.length; i < l; i++) {
                                    fragment.height -= this.repeatables[i].height;
                                }
                            }
                        } else {
                            fragment.height = unbreakableContext.y;
                        }

                        if (forcedX !== undefined || forcedY !== undefined) {
                            this.writer.addFragment(fragment, true, true, true);
                        } else {
                            this.addFragment(fragment);
                        }
                    }
                }
            };

            PageElementWriter.prototype.currentBlockToRepeatable = function () {
                var unbreakableContext = this.writer.context;
                var rep = {items: []};

                unbreakableContext.pages[0].items.forEach(function (item) {
                    rep.items.push(item);
                });

                rep.xOffset = this.originalX;

                //TODO: vectors can influence height in some situations
                rep.height = unbreakableContext.y;

                return rep;
            };

            PageElementWriter.prototype.pushToRepeatables = function (rep) {
                this.repeatables.push(rep);
            };

            PageElementWriter.prototype.popFromRepeatables = function () {
                this.repeatables.pop();
            };

            PageElementWriter.prototype.context = function () {
                return this.writer.context;
            };

            module.exports = PageElementWriter;


            /***/ }),
        /* 27 */
        /***/ (function(module, exports, __webpack_require__) {

            /* jslint node: true */
            'use strict';

            var Line = __webpack_require__(28);
            var pack = __webpack_require__(13).pack;
            var offsetVector = __webpack_require__(13).offsetVector;
            var DocumentContext = __webpack_require__(25);

            /**
             * Creates an instance of ElementWriter - a line/vector writer, which adds
             * elements to current page and sets their positions based on the context
             */
            function ElementWriter(context, tracker) {
                this.context = context;
                this.contextStack = [];
                this.tracker = tracker;
            }

            function addPageItem(page, item, index) {
                if (index === null || index === undefined || index < 0 || index > page.items.length) {
                    page.items.push(item);
                } else {
                    page.items.splice(index, 0, item);
                }
            }

            ElementWriter.prototype.addLine = function (line, dontUpdateContextPosition, index) {
                var height = line.getHeight();
                var context = this.context;
                var page = context.getCurrentPage(),
                    position = this.getCurrentPositionOnPage();

                if (context.availableHeight < height || !page) {
                    return false;
                }

                line.x = context.x + (line.x || 0);
                line.y = context.y + (line.y || 0);

                this.alignLine(line);

                addPageItem(page, {
                    type: 'line',
                    item: line
                }, index);
                this.tracker.emit('lineAdded', line);

                if (!dontUpdateContextPosition) {
                    context.moveDown(height);
                }

                return position;
            };

            ElementWriter.prototype.alignLine = function (line) {
                var width = this.context.availableWidth;
                var lineWidth = line.getWidth();

                var alignment = line.inlines && line.inlines.length > 0 && line.inlines[0].alignment;

                var offset = 0;
                switch (alignment) {
                    case 'right':
                        offset = width - lineWidth;
                        break;
                    case 'center':
                        offset = (width - lineWidth) / 2;
                        break;
                }

                if (offset) {
                    line.x = (line.x || 0) + offset;
                }

                if (alignment === 'justify' &&
                    !line.newLineForced &&
                    !line.lastLineInParagraph &&
                    line.inlines.length > 1) {
                    var additionalSpacing = (width - lineWidth) / (line.inlines.length - 1);

                    for (var i = 1, l = line.inlines.length; i < l; i++) {
                        offset = i * additionalSpacing;

                        line.inlines[i].x += offset;
                        line.inlines[i].justifyShift = additionalSpacing;
                    }
                }
            };

            ElementWriter.prototype.addImage = function (image, index) {
                var context = this.context;
                var page = context.getCurrentPage(),
                    position = this.getCurrentPositionOnPage();

                if (!page || (context.availableHeight < image._height && page.items.length > 0)) {
                    return false;
                }

                if (image._x === undefined) {
                    image._x = image.x || 0;
                }

                image.x = context.x + image._x;
                image.y = context.y;

                this.alignImage(image);

                addPageItem(page, {
                    type: 'image',
                    item: image
                }, index);

                context.moveDown(image._height);

                return position;
            };

            ElementWriter.prototype.addQr = function (qr, index) {
                var context = this.context;
                var page = context.getCurrentPage(),
                    position = this.getCurrentPositionOnPage();

                if (context.availableHeight < qr._height || !page) {
                    return false;
                }

                if (qr._x === undefined) {
                    qr._x = qr.x || 0;
                }

                qr.x = context.x + qr._x;
                qr.y = context.y;

                this.alignImage(qr);

                for (var i = 0, l = qr._canvas.length; i < l; i++) {
                    var vector = qr._canvas[i];
                    vector.x += qr.x;
                    vector.y += qr.y;
                    this.addVector(vector, true, true, index);
                }

                context.moveDown(qr._height);

                return position;
            };

            ElementWriter.prototype.alignImage = function (image) {
                var width = this.context.availableWidth;
                var imageWidth = image._minWidth;
                var offset = 0;
                switch (image._alignment) {
                    case 'right':
                        offset = width - imageWidth;
                        break;
                    case 'center':
                        offset = (width - imageWidth) / 2;
                        break;
                }

                if (offset) {
                    image.x = (image.x || 0) + offset;
                }
            };

            ElementWriter.prototype.addVector = function (vector, ignoreContextX, ignoreContextY, index) {
                var context = this.context;
                var page = context.getCurrentPage(),
                    position = this.getCurrentPositionOnPage();

                if (page) {
                    offsetVector(vector, ignoreContextX ? 0 : context.x, ignoreContextY ? 0 : context.y);
                    addPageItem(page, {
                        type: 'vector',
                        item: vector
                    }, index);
                    return position;
                }
            };

            function cloneLine(line) {
                var result = new Line(line.maxWidth);

                for (var key in line) {
                    if (line.hasOwnProperty(key)) {
                        result[key] = line[key];
                    }
                }

                return result;
            }

            ElementWriter.prototype.addFragment = function (block, useBlockXOffset, useBlockYOffset, dontUpdateContextPosition) {
                var ctx = this.context;
                var page = ctx.getCurrentPage();

                if (!useBlockXOffset && block.height > ctx.availableHeight) {
                    return false;
                }

                block.items.forEach(function (item) {
                    switch (item.type) {
                        case 'line':
                            var l = cloneLine(item.item);

                            l.x = (l.x || 0) + (useBlockXOffset ? (block.xOffset || 0) : ctx.x);
                            l.y = (l.y || 0) + (useBlockYOffset ? (block.yOffset || 0) : ctx.y);

                            page.items.push({
                                type: 'line',
                                item: l
                            });
                            break;

                        case 'vector':
                            var v = pack(item.item);

                            offsetVector(v, useBlockXOffset ? (block.xOffset || 0) : ctx.x, useBlockYOffset ? (block.yOffset || 0) : ctx.y);
                            page.items.push({
                                type: 'vector',
                                item: v
                            });
                            break;

                        case 'image':
                            var img = pack(item.item);

                            img.x = (img.x || 0) + (useBlockXOffset ? (block.xOffset || 0) : ctx.x);
                            img.y = (img.y || 0) + (useBlockYOffset ? (block.yOffset || 0) : ctx.y);

                            page.items.push({
                                type: 'image',
                                item: img
                            });
                            break;
                    }
                });

                if (!dontUpdateContextPosition) {
                    ctx.moveDown(block.height);
                }

                return true;
            };

            /**
             * Pushes the provided context onto the stack or creates a new one
             *
             * pushContext(context) - pushes the provided context and makes it current
             * pushContext(width, height) - creates and pushes a new context with the specified width and height
             * pushContext() - creates a new context for unbreakable blocks (with current availableWidth and full-page-height)
             */
            ElementWriter.prototype.pushContext = function (contextOrWidth, height) {
                if (contextOrWidth === undefined) {
                    height = this.context.getCurrentPage().height - this.context.pageMargins.top - this.context.pageMargins.bottom;
                    contextOrWidth = this.context.availableWidth;
                }

                if (typeof contextOrWidth === 'number' || contextOrWidth instanceof Number) {
                    contextOrWidth = new DocumentContext({width: contextOrWidth, height: height}, {left: 0, right: 0, top: 0, bottom: 0});
                }

                this.contextStack.push(this.context);
                this.context = contextOrWidth;
            };

            ElementWriter.prototype.popContext = function () {
                this.context = this.contextStack.pop();
            };

            ElementWriter.prototype.getCurrentPositionOnPage = function () {
                return (this.contextStack[0] || this.context).getCurrentPosition();
            };


            module.exports = ElementWriter;


            /***/ }),
        /* 28 */
        /***/ (function(module, exports) {

            /* jslint node: true */
            'use strict';

            /**
             * Creates an instance of Line
             *
             * @constructor
             * @this {Line}
             * @param {Number} Maximum width this line can have
             */
            function Line(maxWidth) {
                this.maxWidth = maxWidth;
                this.leadingCut = 0;
                this.trailingCut = 0;
                this.inlineWidths = 0;
                this.inlines = [];
            }

            Line.prototype.getAscenderHeight = function () {
                var y = 0;

                this.inlines.forEach(function (inline) {
                    y = Math.max(y, inline.font.ascender / 1000 * inline.fontSize);
                });
                return y;
            };

            Line.prototype.hasEnoughSpaceForInline = function (inline) {
                if (this.inlines.length === 0) {
                    return true;
                }
                if (this.newLineForced) {
                    return false;
                }

                return this.inlineWidths + inline.width - this.leadingCut - (inline.trailingCut || 0) <= this.maxWidth;
            };

            Line.prototype.addInline = function (inline) {
                if (this.inlines.length === 0) {
                    this.leadingCut = inline.leadingCut || 0;
                }
                this.trailingCut = inline.trailingCut || 0;

                inline.x = this.inlineWidths - this.leadingCut;

                this.inlines.push(inline);
                this.inlineWidths += inline.width;

                if (inline.lineEnd) {
                    this.newLineForced = true;
                }
            };

            Line.prototype.getWidth = function () {
                return this.inlineWidths - this.leadingCut - this.trailingCut;
            };

            /**
             * Returns line height
             * @return {Number}
             */
            Line.prototype.getHeight = function () {
                var max = 0;

                this.inlines.forEach(function (item) {
                    max = Math.max(max, item.height || 0);
                });

                return max;
            };

            module.exports = Line;


            /***/ }),
        /* 29 */
        /***/ (function(module, exports, __webpack_require__) {

            /* jslint node: true */
            'use strict';

            var ColumnCalculator = __webpack_require__(23);

            function TableProcessor(tableNode) {
                this.tableNode = tableNode;
            }

            TableProcessor.prototype.beginTable = function (writer) {
                var tableNode;
                var availableWidth;
                var self = this;

                tableNode = this.tableNode;
                this.offsets = tableNode._offsets;
                this.layout = tableNode._layout;

                availableWidth = writer.context().availableWidth - this.offsets.total;
                ColumnCalculator.buildColumnWidths(tableNode.table.widths, availableWidth);

                this.tableWidth = tableNode._offsets.total + getTableInnerContentWidth();
                this.rowSpanData = prepareRowSpanData();
                this.cleanUpRepeatables = false;

                this.headerRows = tableNode.table.headerRows || 0;
                this.rowsWithoutPageBreak = this.headerRows + (tableNode.table.keepWithHeaderRows || 0);
                this.dontBreakRows = tableNode.table.dontBreakRows || false;

                if (this.rowsWithoutPageBreak) {
                    writer.beginUnbreakableBlock();
                }

                // update the border properties of all cells before drawing any lines
                prepareCellBorders(this.tableNode.table.body);

                this.drawHorizontalLine(0, writer);

                function getTableInnerContentWidth() {
                    var width = 0;

                    tableNode.table.widths.forEach(function (w) {
                        width += w._calcWidth;
                    });

                    return width;
                }

                function prepareRowSpanData() {
                    var rsd = [];
                    var x = 0;
                    var lastWidth = 0;

                    rsd.push({left: 0, rowSpan: 0});

                    for (var i = 0, l = self.tableNode.table.body[0].length; i < l; i++) {
                        var paddings = self.layout.paddingLeft(i, self.tableNode) + self.layout.paddingRight(i, self.tableNode);
                        var lBorder = self.layout.vLineWidth(i, self.tableNode);
                        lastWidth = paddings + lBorder + self.tableNode.table.widths[i]._calcWidth;
                        rsd[rsd.length - 1].width = lastWidth;
                        x += lastWidth;
                        rsd.push({left: x, rowSpan: 0, width: 0});
                    }

                    return rsd;
                }

                // Iterate through all cells. If the current cell is the start of a
                // rowSpan/colSpan, update the border property of the cells on its
                // bottom/right accordingly. This is needed since each iteration of the
                // line-drawing loops draws lines for a single cell, not for an entire
                // rowSpan/colSpan.
                function prepareCellBorders(body) {
                    for (var rowIndex = 0; rowIndex < body.length; rowIndex++) {
                        var row = body[rowIndex];

                        for (var colIndex = 0; colIndex < row.length; colIndex++) {
                            var cell = row[colIndex];

                            if (cell.border) {
                                var rowSpan = cell.rowSpan || 1;
                                var colSpan = cell.colSpan || 1;

                                for (var rowOffset = 0; rowOffset < rowSpan; rowOffset++) {
                                    // set left border
                                    if (cell.border[0] !== undefined && rowOffset > 0) {
                                        setBorder(rowIndex + rowOffset, colIndex, 0, cell.border[0]);
                                    }

                                    // set right border
                                    if (cell.border[2] !== undefined) {
                                        setBorder(rowIndex + rowOffset, colIndex + colSpan - 1, 2, cell.border[2]);
                                    }
                                }

                                for (var colOffset = 0; colOffset < colSpan; colOffset++) {
                                    // set top border
                                    if (cell.border[1] !== undefined && colOffset > 0) {
                                        setBorder(rowIndex, colIndex + colOffset, 1, cell.border[1]);
                                    }

                                    // set bottom border
                                    if (cell.border[3] !== undefined) {
                                        setBorder(rowIndex + rowSpan - 1, colIndex + colOffset, 3, cell.border[3]);
                                    }
                                }
                            }
                        }
                    }

                    // helper function to set the border for a given cell
                    function setBorder(rowIndex, colIndex, borderIndex, borderValue) {
                        var cell = body[rowIndex][colIndex];
                        cell.border = cell.border || {};
                        cell.border[borderIndex] = borderValue;
                    }
                }
            };

            TableProcessor.prototype.onRowBreak = function (rowIndex, writer) {
                var self = this;
                return function () {
                    var offset = self.rowPaddingTop + (!self.headerRows ? self.topLineWidth : 0);
                    writer.context().availableHeight -= self.reservedAtBottom;
                    writer.context().moveDown(offset);
                };
            };

            TableProcessor.prototype.beginRow = function (rowIndex, writer) {
                this.topLineWidth = this.layout.hLineWidth(rowIndex, this.tableNode);
                this.rowPaddingTop = this.layout.paddingTop(rowIndex, this.tableNode);
                this.bottomLineWidth = this.layout.hLineWidth(rowIndex + 1, this.tableNode);
                this.rowPaddingBottom = this.layout.paddingBottom(rowIndex, this.tableNode);

                this.rowCallback = this.onRowBreak(rowIndex, writer);
                writer.tracker.startTracking('pageChanged', this.rowCallback);
                if (this.dontBreakRows) {
                    writer.beginUnbreakableBlock();
                }
                this.rowTopY = writer.context().y;
                this.reservedAtBottom = this.bottomLineWidth + this.rowPaddingBottom;

                writer.context().availableHeight -= this.reservedAtBottom;

                writer.context().moveDown(this.rowPaddingTop);
            };

            TableProcessor.prototype.drawHorizontalLine = function (lineIndex, writer, overrideY) {
                var lineWidth = this.layout.hLineWidth(lineIndex, this.tableNode);
                if (lineWidth) {
                    var offset = lineWidth / 2;
                    var currentLine = null;
                    var body = this.tableNode.table.body;

                    for (var i = 0, l = this.rowSpanData.length; i < l; i++) {
                        var data = this.rowSpanData[i];
                        var shouldDrawLine = !data.rowSpan;

                        // draw only if the current cell requires a top border or the cell in the
                        // row above requires a bottom border
                        if (shouldDrawLine && i < l - 1) {
                            var topBorder = false, bottomBorder = false;

                            // the current cell
                            if (lineIndex < body.length) {
                                var cell = body[lineIndex][i];
                                topBorder = cell.border ? cell.border[1] : this.layout.defaultBorder;
                            }

                            // the cell in the row above
                            if (lineIndex > 0) {
                                var cellAbove = body[lineIndex - 1][i];
                                bottomBorder = cellAbove.border ? cellAbove.border[3] : this.layout.defaultBorder;
                            }

                            shouldDrawLine = topBorder || bottomBorder;
                        }

                        if (!currentLine && shouldDrawLine) {
                            currentLine = {left: data.left, width: 0};
                        }

                        if (shouldDrawLine) {
                            currentLine.width += (data.width || 0);
                        }

                        var y = (overrideY || 0) + offset;

                        if (!shouldDrawLine || i === l - 1) {
                            if (currentLine && currentLine.width) {
                                writer.addVector({
                                    type: 'line',
                                    x1: currentLine.left,
                                    x2: currentLine.left + currentLine.width,
                                    y1: y,
                                    y2: y,
                                    lineWidth: lineWidth,
                                    lineColor: typeof this.layout.hLineColor === 'function' ? this.layout.hLineColor(lineIndex, this.tableNode) : this.layout.hLineColor
                                }, false, overrideY);
                                currentLine = null;
                            }
                        }
                    }

                    writer.context().moveDown(lineWidth);
                }
            };

            TableProcessor.prototype.drawVerticalLine = function (x, y0, y1, vLineIndex, writer) {
                var width = this.layout.vLineWidth(vLineIndex, this.tableNode);
                if (width === 0) {
                    return;
                }
                writer.addVector({
                    type: 'line',
                    x1: x + width / 2,
                    x2: x + width / 2,
                    y1: y0,
                    y2: y1,
                    lineWidth: width,
                    lineColor: typeof this.layout.vLineColor === 'function' ? this.layout.vLineColor(vLineIndex, this.tableNode) : this.layout.vLineColor
                }, false, true);
            };

            TableProcessor.prototype.endTable = function (writer) {
                if (this.cleanUpRepeatables) {
                    writer.popFromRepeatables();
                    this.headerRepeatableHeight = null;
                }
            };

            TableProcessor.prototype.endRow = function (rowIndex, writer, pageBreaks) {
                var l, i;
                var self = this;
                writer.tracker.stopTracking('pageChanged', this.rowCallback);
                writer.context().moveDown(this.layout.paddingBottom(rowIndex, this.tableNode));
                writer.context().availableHeight += this.reservedAtBottom;

                var endingPage = writer.context().page;
                var endingY = writer.context().y;

                var xs = getLineXs();

                var ys = [];

                var hasBreaks = pageBreaks && pageBreaks.length > 0;
                var body = this.tableNode.table.body;

                ys.push({
                    y0: this.rowTopY,
                    page: hasBreaks ? pageBreaks[0].prevPage : endingPage
                });

                if (hasBreaks) {
                    for (i = 0, l = pageBreaks.length; i < l; i++) {
                        var pageBreak = pageBreaks[i];
                        ys[ys.length - 1].y1 = pageBreak.prevY;

                        ys.push({y0: pageBreak.y, page: pageBreak.prevPage + 1});

                        if (this.headerRepeatableHeight) {
                            ys[ys.length - 1].y0 += this.headerRepeatableHeight;
                        }
                    }
                }

                ys[ys.length - 1].y1 = endingY;

                var skipOrphanePadding = (ys[0].y1 - ys[0].y0 === this.rowPaddingTop);
                for (var yi = (skipOrphanePadding ? 1 : 0), yl = ys.length; yi < yl; yi++) {
                    var willBreak = yi < ys.length - 1;
                    var rowBreakWithoutHeader = (yi > 0 && !this.headerRows);
                    var hzLineOffset = rowBreakWithoutHeader ? 0 : this.topLineWidth;
                    var y1 = ys[yi].y0;
                    var y2 = ys[yi].y1;

                    if (willBreak) {
                        y2 = y2 + this.rowPaddingBottom;
                    }

                    if (writer.context().page != ys[yi].page) {
                        writer.context().page = ys[yi].page;

                        //TODO: buggy, availableHeight should be updated on every pageChanged event
                        // TableProcessor should be pageChanged listener, instead of processRow
                        this.reservedAtBottom = 0;
                    }

                    for (i = 0, l = xs.length; i < l; i++) {
                        var leftBorder = false, rightBorder = false;
                        var colIndex = xs[i].index;

                        // the current cell
                        if (colIndex < body[rowIndex].length) {
                            var cell = body[rowIndex][colIndex];
                            leftBorder = cell.border ? cell.border[0] : this.layout.defaultBorder;
                        }

                        // the cell from before column
                        if (colIndex > 0) {
                            var cell = body[rowIndex][colIndex - 1];
                            rightBorder = cell.border ? cell.border[2] : this.layout.defaultBorder;
                        }

                        if (leftBorder || rightBorder) {
                            this.drawVerticalLine(xs[i].x, y1 - hzLineOffset, y2 + this.bottomLineWidth, xs[i].index, writer);
                        }

                        if (i < l - 1) {
                            var fillColor = body[rowIndex][colIndex].fillColor;
                            if (!fillColor) {
                                fillColor = typeof this.layout.fillColor === 'function' ? this.layout.fillColor(rowIndex, this.tableNode) : this.layout.fillColor;
                            }
                            if (fillColor) {
                                var wBorder = (leftBorder || rightBorder) ? this.layout.vLineWidth(colIndex, this.tableNode) : 0;
                                var xf = xs[i].x + wBorder;
                                var yf = this.dontBreakRows ? y1 : y1 - hzLineOffset;
                                writer.addVector({
                                    type: 'rect',
                                    x: xf,
                                    y: yf,
                                    w: xs[i + 1].x - xf,
                                    h: y2 + this.bottomLineWidth - yf,
                                    lineWidth: 0,
                                    color: fillColor
                                }, false, true, 0);
                            }
                        }
                    }

                    if (willBreak && this.layout.hLineWhenBroken !== false) {
                        this.drawHorizontalLine(rowIndex + 1, writer, y2);
                    }
                    if (rowBreakWithoutHeader && this.layout.hLineWhenBroken !== false) {
                        this.drawHorizontalLine(rowIndex, writer, y1);
                    }
                }

                writer.context().page = endingPage;
                writer.context().y = endingY;

                var row = this.tableNode.table.body[rowIndex];
                for (i = 0, l = row.length; i < l; i++) {
                    if (row[i].rowSpan) {
                        this.rowSpanData[i].rowSpan = row[i].rowSpan;

                        // fix colSpans
                        if (row[i].colSpan && row[i].colSpan > 1) {
                            for (var j = 1; j < row[i].rowSpan; j++) {
                                this.tableNode.table.body[rowIndex + j][i]._colSpan = row[i].colSpan;
                            }
                        }
                    }

                    if (this.rowSpanData[i].rowSpan > 0) {
                        this.rowSpanData[i].rowSpan--;
                    }
                }

                this.drawHorizontalLine(rowIndex + 1, writer);

                if (this.headerRows && rowIndex === this.headerRows - 1) {
                    this.headerRepeatable = writer.currentBlockToRepeatable();
                }

                if (this.dontBreakRows) {
                    writer.tracker.auto('pageChanged',
                        function () {
                            if (!self.headerRows && self.layout.hLineWhenBroken !== false) {
                                self.drawHorizontalLine(rowIndex, writer);
                            }
                        },
                        function () {
                            writer.commitUnbreakableBlock();
                        }
                    );
                }

                if (this.headerRepeatable && (rowIndex === (this.rowsWithoutPageBreak - 1) || rowIndex === this.tableNode.table.body.length - 1)) {
                    this.headerRepeatableHeight = this.headerRepeatable.height;
                    writer.commitUnbreakableBlock();
                    writer.pushToRepeatables(this.headerRepeatable);
                    this.cleanUpRepeatables = true;
                    this.headerRepeatable = null;
                }

                function getLineXs() {
                    var result = [];
                    var cols = 0;

                    for (var i = 0, l = self.tableNode.table.body[rowIndex].length; i < l; i++) {
                        if (!cols) {
                            result.push({x: self.rowSpanData[i].left, index: i});

                            var item = self.tableNode.table.body[rowIndex][i];
                            cols = (item._colSpan || item.colSpan || 0);
                        }
                        if (cols > 0) {
                            cols--;
                        }
                    }

                    result.push({x: self.rowSpanData[self.rowSpanData.length - 1].left, index: self.rowSpanData.length - 1});

                    return result;
                }
            };

            module.exports = TableProcessor;


            /***/ }),
        /* 30 */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(Buffer) {// Generated by CoffeeScript 1.12.6

                /*
                 PDFDocument - represents an entire PDF document
                 By Devon Govett
                 */

                (function() {
                    var PDFDocument, PDFObject, PDFPage, PDFReference, fs, stream,
                        extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
                        hasProp = {}.hasOwnProperty;

                    stream = __webpack_require__(31);

                    fs = __webpack_require__(56);

                    PDFObject = __webpack_require__(57);

                    PDFReference = __webpack_require__(58);

                    PDFPage = __webpack_require__(76);

                    PDFDocument = (function(superClass) {
                        var mixin;

                        extend(PDFDocument, superClass);

                        function PDFDocument(options1) {
                            var key, ref1, ref2, val;
                            this.options = options1 != null ? options1 : {};
                            PDFDocument.__super__.constructor.apply(this, arguments);
                            this.version = 1.3;
                            this.compress = (ref1 = this.options.compress) != null ? ref1 : true;
                            this._pageBuffer = [];
                            this._pageBufferStart = 0;
                            this._offsets = [];
                            this._waiting = 0;
                            this._ended = false;
                            this._offset = 0;
                            this._root = this.ref({
                                Type: 'Catalog',
                                Pages: this.ref({
                                    Type: 'Pages',
                                    Count: 0,
                                    Kids: []
                                })
                            });
                            this.page = null;
                            this.initColor();
                            this.initVector();
                            this.initFonts();
                            this.initText();
                            this.initImages();
                            this.info = {
                                Producer: 'PDFKit',
                                Creator: 'PDFKit',
                                CreationDate: new Date()
                            };
                            if (this.options.info) {
                                ref2 = this.options.info;
                                for (key in ref2) {
                                    val = ref2[key];
                                    this.info[key] = val;
                                }
                            }
                            this._write("%PDF-" + this.version);
                            this._write("%\xFF\xFF\xFF\xFF");
                            if (this.options.autoFirstPage !== false) {
                                this.addPage();
                            }
                        }

                        mixin = function(methods) {
                            var method, name, results;
                            results = [];
                            for (name in methods) {
                                method = methods[name];
                                results.push(PDFDocument.prototype[name] = method);
                            }
                            return results;
                        };

                        mixin(__webpack_require__(77));

                        mixin(__webpack_require__(79));

                        mixin(__webpack_require__(81));

                        mixin(__webpack_require__(288));

                        mixin(__webpack_require__(290));

                        mixin(__webpack_require__(296));

                        PDFDocument.prototype.addPage = function(options) {
                            var pages;
                            if (options == null) {
                                options = this.options;
                            }
                            if (!this.options.bufferPages) {
                                this.flushPages();
                            }
                            this.page = new PDFPage(this, options);
                            this._pageBuffer.push(this.page);
                            pages = this._root.data.Pages.data;
                            pages.Kids.push(this.page.dictionary);
                            pages.Count++;
                            this.x = this.page.margins.left;
                            this.y = this.page.margins.top;
                            this._ctm = [1, 0, 0, 1, 0, 0];
                            this.transform(1, 0, 0, -1, 0, this.page.height);
                            this.emit('pageAdded');
                            return this;
                        };

                        PDFDocument.prototype.bufferedPageRange = function() {
                            return {
                                start: this._pageBufferStart,
                                count: this._pageBuffer.length
                            };
                        };

                        PDFDocument.prototype.switchToPage = function(n) {
                            var page;
                            if (!(page = this._pageBuffer[n - this._pageBufferStart])) {
                                throw new Error("switchToPage(" + n + ") out of bounds, current buffer covers pages " + this._pageBufferStart + " to " + (this._pageBufferStart + this._pageBuffer.length - 1));
                            }
                            return this.page = page;
                        };

                        PDFDocument.prototype.flushPages = function() {
                            var i, len, page, pages;
                            pages = this._pageBuffer;
                            this._pageBuffer = [];
                            this._pageBufferStart += pages.length;
                            for (i = 0, len = pages.length; i < len; i++) {
                                page = pages[i];
                                page.end();
                            }
                        };

                        PDFDocument.prototype.ref = function(data) {
                            var ref;
                            ref = new PDFReference(this, this._offsets.length + 1, data);
                            this._offsets.push(null);
                            this._waiting++;
                            return ref;
                        };

                        PDFDocument.prototype._read = function() {};

                        PDFDocument.prototype._write = function(data) {
                            if (!Buffer.isBuffer(data)) {
                                data = new Buffer(data + '\n', 'binary');
                            }
                            this.push(data);
                            return this._offset += data.length;
                        };

                        PDFDocument.prototype.addContent = function(data) {
                            this.page.write(data);
                            return this;
                        };

                        PDFDocument.prototype._refEnd = function(ref) {
                            this._offsets[ref.id - 1] = ref.offset;
                            if (--this._waiting === 0 && this._ended) {
                                this._finalize();
                                return this._ended = false;
                            }
                        };

                        PDFDocument.prototype.write = function(filename, fn) {
                            var err;
                            err = new Error('PDFDocument#write is deprecated, and will be removed in a future version of PDFKit. Please pipe the document into a Node stream.');
                            console.warn(err.stack);
                            this.pipe(fs.createWriteStream(filename));
                            this.end();
                            return this.once('end', fn);
                        };

                        PDFDocument.prototype.output = function(fn) {
                            throw new Error('PDFDocument#output is deprecated, and has been removed from PDFKit. Please pipe the document into a Node stream.');
                        };

                        PDFDocument.prototype.end = function() {
                            var font, key, name, ref1, ref2, val;
                            this.flushPages();
                            this._info = this.ref();
                            ref1 = this.info;
                            for (key in ref1) {
                                val = ref1[key];
                                if (typeof val === 'string') {
                                    val = new String(val);
                                }
                                this._info.data[key] = val;
                            }
                            this._info.end();
                            ref2 = this._fontFamilies;
                            for (name in ref2) {
                                font = ref2[name];
                                font.finalize();
                            }
                            this._root.end();
                            this._root.data.Pages.end();
                            if (this._waiting === 0) {
                                return this._finalize();
                            } else {
                                return this._ended = true;
                            }
                        };

                        PDFDocument.prototype._finalize = function(fn) {
                            var i, len, offset, ref1, xRefOffset;
                            xRefOffset = this._offset;
                            this._write("xref");
                            this._write("0 " + (this._offsets.length + 1));
                            this._write("0000000000 65535 f ");
                            ref1 = this._offsets;
                            for (i = 0, len = ref1.length; i < len; i++) {
                                offset = ref1[i];
                                offset = ('0000000000' + offset).slice(-10);
                                this._write(offset + ' 00000 n ');
                            }
                            this._write('trailer');
                            this._write(PDFObject.convert({
                                Size: this._offsets.length + 1,
                                Root: this._root,
                                Info: this._info
                            }));
                            this._write('startxref');
                            this._write("" + xRefOffset);
                            this._write('%%EOF');
                            return this.push(null);
                        };

                        PDFDocument.prototype.toString = function() {
                            return "[object PDFDocument]";
                        };

                        return PDFDocument;

                    })(stream.Readable);

                    module.exports = PDFDocument;

                }).call(this);

                /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))

            /***/ }),
        /* 31 */
        /***/ (function(module, exports, __webpack_require__) {

            // Copyright Joyent, Inc. and other Node contributors.
            //
            // Permission is hereby granted, free of charge, to any person obtaining a
            // copy of this software and associated documentation files (the
            // "Software"), to deal in the Software without restriction, including
            // without limitation the rights to use, copy, modify, merge, publish,
            // distribute, sublicense, and/or sell copies of the Software, and to permit
            // persons to whom the Software is furnished to do so, subject to the
            // following conditions:
            //
            // The above copyright notice and this permission notice shall be included
            // in all copies or substantial portions of the Software.
            //
            // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
            // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
            // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
            // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
            // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
            // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
            // USE OR OTHER DEALINGS IN THE SOFTWARE.

            module.exports = Stream;

            var EE = __webpack_require__(32).EventEmitter;
            var inherits = __webpack_require__(33);

            inherits(Stream, EE);
            Stream.Readable = __webpack_require__(34);
            Stream.Writable = __webpack_require__(52);
            Stream.Duplex = __webpack_require__(53);
            Stream.Transform = __webpack_require__(54);
            Stream.PassThrough = __webpack_require__(55);

            // Backwards-compat with node 0.4.x
            Stream.Stream = Stream;



            // old-style streams.  Note that the pipe method (the only relevant
            // part of this class) is overridden in the Readable class.

            function Stream() {
                EE.call(this);
            }

            Stream.prototype.pipe = function(dest, options) {
                var source = this;

                function ondata(chunk) {
                    if (dest.writable) {
                        if (false === dest.write(chunk) && source.pause) {
                            source.pause();
                        }
                    }
                }

                source.on('data', ondata);

                function ondrain() {
                    if (source.readable && source.resume) {
                        source.resume();
                    }
                }

                dest.on('drain', ondrain);

                // If the 'end' option is not supplied, dest.end() will be called when
                // source gets the 'end' or 'close' events.  Only dest.end() once.
                if (!dest._isStdio && (!options || options.end !== false)) {
                    source.on('end', onend);
                    source.on('close', onclose);
                }

                var didOnEnd = false;
                function onend() {
                    if (didOnEnd) return;
                    didOnEnd = true;

                    dest.end();
                }


                function onclose() {
                    if (didOnEnd) return;
                    didOnEnd = true;

                    if (typeof dest.destroy === 'function') dest.destroy();
                }

                // don't leave dangling pipes when there are errors.
                function onerror(er) {
                    cleanup();
                    if (EE.listenerCount(this, 'error') === 0) {
                        throw er; // Unhandled stream error in pipe.
                    }
                }

                source.on('error', onerror);
                dest.on('error', onerror);

                // remove all the event listeners that were added.
                function cleanup() {
                    source.removeListener('data', ondata);
                    dest.removeListener('drain', ondrain);

                    source.removeListener('end', onend);
                    source.removeListener('close', onclose);

                    source.removeListener('error', onerror);
                    dest.removeListener('error', onerror);

                    source.removeListener('end', cleanup);
                    source.removeListener('close', cleanup);

                    dest.removeListener('close', cleanup);
                }

                source.on('end', cleanup);
                source.on('close', cleanup);

                dest.on('close', cleanup);

                dest.emit('pipe', source);

                // Allow for unix-like usage: A.pipe(B).pipe(C)
                return dest;
            };


            /***/ }),
        /* 32 */
        /***/ (function(module, exports) {

            // Copyright Joyent, Inc. and other Node contributors.
            //
            // Permission is hereby granted, free of charge, to any person obtaining a
            // copy of this software and associated documentation files (the
            // "Software"), to deal in the Software without restriction, including
            // without limitation the rights to use, copy, modify, merge, publish,
            // distribute, sublicense, and/or sell copies of the Software, and to permit
            // persons to whom the Software is furnished to do so, subject to the
            // following conditions:
            //
            // The above copyright notice and this permission notice shall be included
            // in all copies or substantial portions of the Software.
            //
            // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
            // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
            // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
            // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
            // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
            // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
            // USE OR OTHER DEALINGS IN THE SOFTWARE.

            function EventEmitter() {
                this._events = this._events || {};
                this._maxListeners = this._maxListeners || undefined;
            }
            module.exports = EventEmitter;

            // Backwards-compat with node 0.10.x
            EventEmitter.EventEmitter = EventEmitter;

            EventEmitter.prototype._events = undefined;
            EventEmitter.prototype._maxListeners = undefined;

            // By default EventEmitters will print a warning if more than 10 listeners are
            // added to it. This is a useful default which helps finding memory leaks.
            EventEmitter.defaultMaxListeners = 10;

            // Obviously not all Emitters should be limited to 10. This function allows
            // that to be increased. Set to zero for unlimited.
            EventEmitter.prototype.setMaxListeners = function(n) {
                if (!isNumber(n) || n < 0 || isNaN(n))
                    throw TypeError('n must be a positive number');
                this._maxListeners = n;
                return this;
            };

            EventEmitter.prototype.emit = function(type) {
                var er, handler, len, args, i, listeners;

                if (!this._events)
                    this._events = {};

                // If there is no 'error' event listener then throw.
                if (type === 'error') {
                    if (!this._events.error ||
                        (isObject(this._events.error) && !this._events.error.length)) {
                        er = arguments[1];
                        if (er instanceof Error) {
                            throw er; // Unhandled 'error' event
                        } else {
                            // At least give some kind of context to the user
                            var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
                            err.context = er;
                            throw err;
                        }
                    }
                }

                handler = this._events[type];

                if (isUndefined(handler))
                    return false;

                if (isFunction(handler)) {
                    switch (arguments.length) {
                        // fast cases
                        case 1:
                            handler.call(this);
                            break;
                        case 2:
                            handler.call(this, arguments[1]);
                            break;
                        case 3:
                            handler.call(this, arguments[1], arguments[2]);
                            break;
                        // slower
                        default:
                            args = Array.prototype.slice.call(arguments, 1);
                            handler.apply(this, args);
                    }
                } else if (isObject(handler)) {
                    args = Array.prototype.slice.call(arguments, 1);
                    listeners = handler.slice();
                    len = listeners.length;
                    for (i = 0; i < len; i++)
                        listeners[i].apply(this, args);
                }

                return true;
            };

            EventEmitter.prototype.addListener = function(type, listener) {
                var m;

                if (!isFunction(listener))
                    throw TypeError('listener must be a function');

                if (!this._events)
                    this._events = {};

                // To avoid recursion in the case that type === "newListener"! Before
                // adding it to the listeners, first emit "newListener".
                if (this._events.newListener)
                    this.emit('newListener', type,
                        isFunction(listener.listener) ?
                            listener.listener : listener);

                if (!this._events[type])
                // Optimize the case of one listener. Don't need the extra array object.
                    this._events[type] = listener;
                else if (isObject(this._events[type]))
                // If we've already got an array, just append.
                    this._events[type].push(listener);
                else
                // Adding the second element, need to change to array.
                    this._events[type] = [this._events[type], listener];

                // Check for listener leak
                if (isObject(this._events[type]) && !this._events[type].warned) {
                    if (!isUndefined(this._maxListeners)) {
                        m = this._maxListeners;
                    } else {
                        m = EventEmitter.defaultMaxListeners;
                    }

                    if (m && m > 0 && this._events[type].length > m) {
                        this._events[type].warned = true;
                        console.error('(node) warning: possible EventEmitter memory ' +
                            'leak detected. %d listeners added. ' +
                            'Use emitter.setMaxListeners() to increase limit.',
                            this._events[type].length);
                        if (typeof console.trace === 'function') {
                            // not supported in IE 10
                            console.trace();
                        }
                    }
                }

                return this;
            };

            EventEmitter.prototype.on = EventEmitter.prototype.addListener;

            EventEmitter.prototype.once = function(type, listener) {
                if (!isFunction(listener))
                    throw TypeError('listener must be a function');

                var fired = false;

                function g() {
                    this.removeListener(type, g);

                    if (!fired) {
                        fired = true;
                        listener.apply(this, arguments);
                    }
                }

                g.listener = listener;
                this.on(type, g);

                return this;
            };

            // emits a 'removeListener' event iff the listener was removed
            EventEmitter.prototype.removeListener = function(type, listener) {
                var list, position, length, i;

                if (!isFunction(listener))
                    throw TypeError('listener must be a function');

                if (!this._events || !this._events[type])
                    return this;

                list = this._events[type];
                length = list.length;
                position = -1;

                if (list === listener ||
                    (isFunction(list.listener) && list.listener === listener)) {
                    delete this._events[type];
                    if (this._events.removeListener)
                        this.emit('removeListener', type, listener);

                } else if (isObject(list)) {
                    for (i = length; i-- > 0;) {
                        if (list[i] === listener ||
                            (list[i].listener && list[i].listener === listener)) {
                            position = i;
                            break;
                        }
                    }

                    if (position < 0)
                        return this;

                    if (list.length === 1) {
                        list.length = 0;
                        delete this._events[type];
                    } else {
                        list.splice(position, 1);
                    }

                    if (this._events.removeListener)
                        this.emit('removeListener', type, listener);
                }

                return this;
            };

            EventEmitter.prototype.removeAllListeners = function(type) {
                var key, listeners;

                if (!this._events)
                    return this;

                // not listening for removeListener, no need to emit
                if (!this._events.removeListener) {
                    if (arguments.length === 0)
                        this._events = {};
                    else if (this._events[type])
                        delete this._events[type];
                    return this;
                }

                // emit removeListener for all listeners on all events
                if (arguments.length === 0) {
                    for (key in this._events) {
                        if (key === 'removeListener') continue;
                        this.removeAllListeners(key);
                    }
                    this.removeAllListeners('removeListener');
                    this._events = {};
                    return this;
                }

                listeners = this._events[type];

                if (isFunction(listeners)) {
                    this.removeListener(type, listeners);
                } else if (listeners) {
                    // LIFO order
                    while (listeners.length)
                        this.removeListener(type, listeners[listeners.length - 1]);
                }
                delete this._events[type];

                return this;
            };

            EventEmitter.prototype.listeners = function(type) {
                var ret;
                if (!this._events || !this._events[type])
                    ret = [];
                else if (isFunction(this._events[type]))
                    ret = [this._events[type]];
                else
                    ret = this._events[type].slice();
                return ret;
            };

            EventEmitter.prototype.listenerCount = function(type) {
                if (this._events) {
                    var evlistener = this._events[type];

                    if (isFunction(evlistener))
                        return 1;
                    else if (evlistener)
                        return evlistener.length;
                }
                return 0;
            };

            EventEmitter.listenerCount = function(emitter, type) {
                return emitter.listenerCount(type);
            };

            function isFunction(arg) {
                return typeof arg === 'function';
            }

            function isNumber(arg) {
                return typeof arg === 'number';
            }

            function isObject(arg) {
                return typeof arg === 'object' && arg !== null;
            }

            function isUndefined(arg) {
                return arg === void 0;
            }


            /***/ }),
        /* 33 */
        /***/ (function(module, exports) {

            if (typeof Object.create === 'function') {
                // implementation from standard node.js 'util' module
                module.exports = function inherits(ctor, superCtor) {
                    ctor.super_ = superCtor
                    ctor.prototype = Object.create(superCtor.prototype, {
                        constructor: {
                            value: ctor,
                            enumerable: false,
                            writable: true,
                            configurable: true
                        }
                    });
                };
            } else {
                // old school shim for old browsers
                module.exports = function inherits(ctor, superCtor) {
                    ctor.super_ = superCtor
                    var TempCtor = function () {}
                    TempCtor.prototype = superCtor.prototype
                    ctor.prototype = new TempCtor()
                    ctor.prototype.constructor = ctor
                }
            }


            /***/ }),
        /* 34 */
        /***/ (function(module, exports, __webpack_require__) {

            exports = module.exports = __webpack_require__(35);
            exports.Stream = exports;
            exports.Readable = exports;
            exports.Writable = __webpack_require__(45);
            exports.Duplex = __webpack_require__(44);
            exports.Transform = __webpack_require__(50);
            exports.PassThrough = __webpack_require__(51);


            /***/ }),
        /* 35 */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
                //
                // Permission is hereby granted, free of charge, to any person obtaining a
                // copy of this software and associated documentation files (the
                // "Software"), to deal in the Software without restriction, including
                // without limitation the rights to use, copy, modify, merge, publish,
                // distribute, sublicense, and/or sell copies of the Software, and to permit
                // persons to whom the Software is furnished to do so, subject to the
                // following conditions:
                //
                // The above copyright notice and this permission notice shall be included
                // in all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                // USE OR OTHER DEALINGS IN THE SOFTWARE.

                'use strict';

                /*<replacement>*/

                var processNextTick = __webpack_require__(37);
                /*</replacement>*/

                module.exports = Readable;

                /*<replacement>*/
                var isArray = __webpack_require__(5);
                /*</replacement>*/

                /*<replacement>*/
                var Duplex;
                /*</replacement>*/

                Readable.ReadableState = ReadableState;

                /*<replacement>*/
                var EE = __webpack_require__(32).EventEmitter;

                var EElistenerCount = function (emitter, type) {
                    return emitter.listeners(type).length;
                };
                /*</replacement>*/

                /*<replacement>*/
                var Stream = __webpack_require__(38);
                /*</replacement>*/

                // TODO(bmeurer): Change this back to const once hole checks are
                // properly optimized away early in Ignition+TurboFan.
                /*<replacement>*/
                var Buffer = __webpack_require__(39).Buffer;
                var OurUint8Array = global.Uint8Array || function () {};
                function _uint8ArrayToBuffer(chunk) {
                    return Buffer.from(chunk);
                }
                function _isUint8Array(obj) {
                    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
                }
                /*</replacement>*/

                /*<replacement>*/
                var util = __webpack_require__(40);
                util.inherits = __webpack_require__(33);
                /*</replacement>*/

                /*<replacement>*/
                var debugUtil = __webpack_require__(41);
                var debug = void 0;
                if (debugUtil && debugUtil.debuglog) {
                    debug = debugUtil.debuglog('stream');
                } else {
                    debug = function () {};
                }
                /*</replacement>*/

                var BufferList = __webpack_require__(42);
                var destroyImpl = __webpack_require__(43);
                var StringDecoder;

                util.inherits(Readable, Stream);

                var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

                function prependListener(emitter, event, fn) {
                    // Sadly this is not cacheable as some libraries bundle their own
                    // event emitter implementation with them.
                    if (typeof emitter.prependListener === 'function') {
                        return emitter.prependListener(event, fn);
                    } else {
                        // This is a hack to make sure that our error handler is attached before any
                        // userland ones.  NEVER DO THIS. This is here only because this code needs
                        // to continue to work with older versions of Node.js that do not include
                        // the prependListener() method. The goal is to eventually remove this hack.
                        if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
                    }
                }

                function ReadableState(options, stream) {
                    Duplex = Duplex || __webpack_require__(44);

                    options = options || {};

                    // object stream flag. Used to make read(n) ignore n and to
                    // make all the buffer merging and length checks go away
                    this.objectMode = !!options.objectMode;

                    if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

                    // the point at which it stops calling _read() to fill the buffer
                    // Note: 0 is a valid value, means "don't call _read preemptively ever"
                    var hwm = options.highWaterMark;
                    var defaultHwm = this.objectMode ? 16 : 16 * 1024;
                    this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

                    // cast to ints.
                    this.highWaterMark = Math.floor(this.highWaterMark);

                    // A linked list is used to store data chunks instead of an array because the
                    // linked list can remove elements from the beginning faster than
                    // array.shift()
                    this.buffer = new BufferList();
                    this.length = 0;
                    this.pipes = null;
                    this.pipesCount = 0;
                    this.flowing = null;
                    this.ended = false;
                    this.endEmitted = false;
                    this.reading = false;

                    // a flag to be able to tell if the event 'readable'/'data' is emitted
                    // immediately, or on a later tick.  We set this to true at first, because
                    // any actions that shouldn't happen until "later" should generally also
                    // not happen before the first read call.
                    this.sync = true;

                    // whenever we return null, then we set a flag to say
                    // that we're awaiting a 'readable' event emission.
                    this.needReadable = false;
                    this.emittedReadable = false;
                    this.readableListening = false;
                    this.resumeScheduled = false;

                    // has it been destroyed
                    this.destroyed = false;

                    // Crypto is kind of old and crusty.  Historically, its default string
                    // encoding is 'binary' so we have to make this configurable.
                    // Everything else in the universe uses 'utf8', though.
                    this.defaultEncoding = options.defaultEncoding || 'utf8';

                    // the number of writers that are awaiting a drain event in .pipe()s
                    this.awaitDrain = 0;

                    // if true, a maybeReadMore has been scheduled
                    this.readingMore = false;

                    this.decoder = null;
                    this.encoding = null;
                    if (options.encoding) {
                        if (!StringDecoder) StringDecoder = __webpack_require__(49).StringDecoder;
                        this.decoder = new StringDecoder(options.encoding);
                        this.encoding = options.encoding;
                    }
                }

                function Readable(options) {
                    Duplex = Duplex || __webpack_require__(44);

                    if (!(this instanceof Readable)) return new Readable(options);

                    this._readableState = new ReadableState(options, this);

                    // legacy
                    this.readable = true;

                    if (options) {
                        if (typeof options.read === 'function') this._read = options.read;

                        if (typeof options.destroy === 'function') this._destroy = options.destroy;
                    }

                    Stream.call(this);
                }

                Object.defineProperty(Readable.prototype, 'destroyed', {
                    get: function () {
                        if (this._readableState === undefined) {
                            return false;
                        }
                        return this._readableState.destroyed;
                    },
                    set: function (value) {
                        // we ignore the value if the stream
                        // has not been initialized yet
                        if (!this._readableState) {
                            return;
                        }

                        // backward compatibility, the user is explicitly
                        // managing destroyed
                        this._readableState.destroyed = value;
                    }
                });

                Readable.prototype.destroy = destroyImpl.destroy;
                Readable.prototype._undestroy = destroyImpl.undestroy;
                Readable.prototype._destroy = function (err, cb) {
                    this.push(null);
                    cb(err);
                };

                // Manually shove something into the read() buffer.
                // This returns true if the highWaterMark has not been hit yet,
                // similar to how Writable.write() returns true if you should
                // write() some more.
                Readable.prototype.push = function (chunk, encoding) {
                    var state = this._readableState;
                    var skipChunkCheck;

                    if (!state.objectMode) {
                        if (typeof chunk === 'string') {
                            encoding = encoding || state.defaultEncoding;
                            if (encoding !== state.encoding) {
                                chunk = Buffer.from(chunk, encoding);
                                encoding = '';
                            }
                            skipChunkCheck = true;
                        }
                    } else {
                        skipChunkCheck = true;
                    }

                    return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
                };

                // Unshift should *always* be something directly out of read()
                Readable.prototype.unshift = function (chunk) {
                    return readableAddChunk(this, chunk, null, true, false);
                };

                function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
                    var state = stream._readableState;
                    if (chunk === null) {
                        state.reading = false;
                        onEofChunk(stream, state);
                    } else {
                        var er;
                        if (!skipChunkCheck) er = chunkInvalid(state, chunk);
                        if (er) {
                            stream.emit('error', er);
                        } else if (state.objectMode || chunk && chunk.length > 0) {
                            if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
                                chunk = _uint8ArrayToBuffer(chunk);
                            }

                            if (addToFront) {
                                if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
                            } else if (state.ended) {
                                stream.emit('error', new Error('stream.push() after EOF'));
                            } else {
                                state.reading = false;
                                if (state.decoder && !encoding) {
                                    chunk = state.decoder.write(chunk);
                                    if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
                                } else {
                                    addChunk(stream, state, chunk, false);
                                }
                            }
                        } else if (!addToFront) {
                            state.reading = false;
                        }
                    }

                    return needMoreData(state);
                }

                function addChunk(stream, state, chunk, addToFront) {
                    if (state.flowing && state.length === 0 && !state.sync) {
                        stream.emit('data', chunk);
                        stream.read(0);
                    } else {
                        // update the buffer info.
                        state.length += state.objectMode ? 1 : chunk.length;
                        if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

                        if (state.needReadable) emitReadable(stream);
                    }
                    maybeReadMore(stream, state);
                }

                function chunkInvalid(state, chunk) {
                    var er;
                    if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
                        er = new TypeError('Invalid non-string/buffer chunk');
                    }
                    return er;
                }

                // if it's past the high water mark, we can push in some more.
                // Also, if we have no data yet, we can stand some
                // more bytes.  This is to work around cases where hwm=0,
                // such as the repl.  Also, if the push() triggered a
                // readable event, and the user called read(largeNumber) such that
                // needReadable was set, then we ought to push more, so that another
                // 'readable' event will be triggered.
                function needMoreData(state) {
                    return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
                }

                Readable.prototype.isPaused = function () {
                    return this._readableState.flowing === false;
                };

                // backwards compatibility.
                Readable.prototype.setEncoding = function (enc) {
                    if (!StringDecoder) StringDecoder = __webpack_require__(49).StringDecoder;
                    this._readableState.decoder = new StringDecoder(enc);
                    this._readableState.encoding = enc;
                    return this;
                };

                // Don't raise the hwm > 8MB
                var MAX_HWM = 0x800000;
                function computeNewHighWaterMark(n) {
                    if (n >= MAX_HWM) {
                        n = MAX_HWM;
                    } else {
                        // Get the next highest power of 2 to prevent increasing hwm excessively in
                        // tiny amounts
                        n--;
                        n |= n >>> 1;
                        n |= n >>> 2;
                        n |= n >>> 4;
                        n |= n >>> 8;
                        n |= n >>> 16;
                        n++;
                    }
                    return n;
                }

                // This function is designed to be inlinable, so please take care when making
                // changes to the function body.
                function howMuchToRead(n, state) {
                    if (n <= 0 || state.length === 0 && state.ended) return 0;
                    if (state.objectMode) return 1;
                    if (n !== n) {
                        // Only flow one buffer at a time
                        if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
                    }
                    // If we're asking for more than the current hwm, then raise the hwm.
                    if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
                    if (n <= state.length) return n;
                    // Don't have enough
                    if (!state.ended) {
                        state.needReadable = true;
                        return 0;
                    }
                    return state.length;
                }

                // you can override either this method, or the async _read(n) below.
                Readable.prototype.read = function (n) {
                    debug('read', n);
                    n = parseInt(n, 10);
                    var state = this._readableState;
                    var nOrig = n;

                    if (n !== 0) state.emittedReadable = false;

                    // if we're doing read(0) to trigger a readable event, but we
                    // already have a bunch of data in the buffer, then just trigger
                    // the 'readable' event and move on.
                    if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
                        debug('read: emitReadable', state.length, state.ended);
                        if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
                        return null;
                    }

                    n = howMuchToRead(n, state);

                    // if we've ended, and we're now clear, then finish it up.
                    if (n === 0 && state.ended) {
                        if (state.length === 0) endReadable(this);
                        return null;
                    }

                    // All the actual chunk generation logic needs to be
                    // *below* the call to _read.  The reason is that in certain
                    // synthetic stream cases, such as passthrough streams, _read
                    // may be a completely synchronous operation which may change
                    // the state of the read buffer, providing enough data when
                    // before there was *not* enough.
                    //
                    // So, the steps are:
                    // 1. Figure out what the state of things will be after we do
                    // a read from the buffer.
                    //
                    // 2. If that resulting state will trigger a _read, then call _read.
                    // Note that this may be asynchronous, or synchronous.  Yes, it is
                    // deeply ugly to write APIs this way, but that still doesn't mean
                    // that the Readable class should behave improperly, as streams are
                    // designed to be sync/async agnostic.
                    // Take note if the _read call is sync or async (ie, if the read call
                    // has returned yet), so that we know whether or not it's safe to emit
                    // 'readable' etc.
                    //
                    // 3. Actually pull the requested chunks out of the buffer and return.

                    // if we need a readable event, then we need to do some reading.
                    var doRead = state.needReadable;
                    debug('need readable', doRead);

                    // if we currently have less than the highWaterMark, then also read some
                    if (state.length === 0 || state.length - n < state.highWaterMark) {
                        doRead = true;
                        debug('length less than watermark', doRead);
                    }

                    // however, if we've ended, then there's no point, and if we're already
                    // reading, then it's unnecessary.
                    if (state.ended || state.reading) {
                        doRead = false;
                        debug('reading or ended', doRead);
                    } else if (doRead) {
                        debug('do read');
                        state.reading = true;
                        state.sync = true;
                        // if the length is currently zero, then we *need* a readable event.
                        if (state.length === 0) state.needReadable = true;
                        // call internal read method
                        this._read(state.highWaterMark);
                        state.sync = false;
                        // If _read pushed data synchronously, then `reading` will be false,
                        // and we need to re-evaluate how much data we can return to the user.
                        if (!state.reading) n = howMuchToRead(nOrig, state);
                    }

                    var ret;
                    if (n > 0) ret = fromList(n, state);else ret = null;

                    if (ret === null) {
                        state.needReadable = true;
                        n = 0;
                    } else {
                        state.length -= n;
                    }

                    if (state.length === 0) {
                        // If we have nothing in the buffer, then we want to know
                        // as soon as we *do* get something into the buffer.
                        if (!state.ended) state.needReadable = true;

                        // If we tried to read() past the EOF, then emit end on the next tick.
                        if (nOrig !== n && state.ended) endReadable(this);
                    }

                    if (ret !== null) this.emit('data', ret);

                    return ret;
                };

                function onEofChunk(stream, state) {
                    if (state.ended) return;
                    if (state.decoder) {
                        var chunk = state.decoder.end();
                        if (chunk && chunk.length) {
                            state.buffer.push(chunk);
                            state.length += state.objectMode ? 1 : chunk.length;
                        }
                    }
                    state.ended = true;

                    // emit 'readable' now to make sure it gets picked up.
                    emitReadable(stream);
                }

                // Don't emit readable right away in sync mode, because this can trigger
                // another read() call => stack overflow.  This way, it might trigger
                // a nextTick recursion warning, but that's not so bad.
                function emitReadable(stream) {
                    var state = stream._readableState;
                    state.needReadable = false;
                    if (!state.emittedReadable) {
                        debug('emitReadable', state.flowing);
                        state.emittedReadable = true;
                        if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
                    }
                }

                function emitReadable_(stream) {
                    debug('emit readable');
                    stream.emit('readable');
                    flow(stream);
                }

                // at this point, the user has presumably seen the 'readable' event,
                // and called read() to consume some data.  that may have triggered
                // in turn another _read(n) call, in which case reading = true if
                // it's in progress.
                // However, if we're not ended, or reading, and the length < hwm,
                // then go ahead and try to read some more preemptively.
                function maybeReadMore(stream, state) {
                    if (!state.readingMore) {
                        state.readingMore = true;
                        processNextTick(maybeReadMore_, stream, state);
                    }
                }

                function maybeReadMore_(stream, state) {
                    var len = state.length;
                    while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
                        debug('maybeReadMore read 0');
                        stream.read(0);
                        if (len === state.length)
                        // didn't get any data, stop spinning.
                            break;else len = state.length;
                    }
                    state.readingMore = false;
                }

                // abstract method.  to be overridden in specific implementation classes.
                // call cb(er, data) where data is <= n in length.
                // for virtual (non-string, non-buffer) streams, "length" is somewhat
                // arbitrary, and perhaps not very meaningful.
                Readable.prototype._read = function (n) {
                    this.emit('error', new Error('_read() is not implemented'));
                };

                Readable.prototype.pipe = function (dest, pipeOpts) {
                    var src = this;
                    var state = this._readableState;

                    switch (state.pipesCount) {
                        case 0:
                            state.pipes = dest;
                            break;
                        case 1:
                            state.pipes = [state.pipes, dest];
                            break;
                        default:
                            state.pipes.push(dest);
                            break;
                    }
                    state.pipesCount += 1;
                    debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

                    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

                    var endFn = doEnd ? onend : unpipe;
                    if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

                    dest.on('unpipe', onunpipe);
                    function onunpipe(readable, unpipeInfo) {
                        debug('onunpipe');
                        if (readable === src) {
                            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                                unpipeInfo.hasUnpiped = true;
                                cleanup();
                            }
                        }
                    }

                    function onend() {
                        debug('onend');
                        dest.end();
                    }

                    // when the dest drains, it reduces the awaitDrain counter
                    // on the source.  This would be more elegant with a .once()
                    // handler in flow(), but adding and removing repeatedly is
                    // too slow.
                    var ondrain = pipeOnDrain(src);
                    dest.on('drain', ondrain);

                    var cleanedUp = false;
                    function cleanup() {
                        debug('cleanup');
                        // cleanup event handlers once the pipe is broken
                        dest.removeListener('close', onclose);
                        dest.removeListener('finish', onfinish);
                        dest.removeListener('drain', ondrain);
                        dest.removeListener('error', onerror);
                        dest.removeListener('unpipe', onunpipe);
                        src.removeListener('end', onend);
                        src.removeListener('end', unpipe);
                        src.removeListener('data', ondata);

                        cleanedUp = true;

                        // if the reader is waiting for a drain event from this
                        // specific writer, then it would cause it to never start
                        // flowing again.
                        // So, if this is awaiting a drain, then we just call it now.
                        // If we don't know, then assume that we are waiting for one.
                        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
                    }

                    // If the user pushes more data while we're writing to dest then we'll end up
                    // in ondata again. However, we only want to increase awaitDrain once because
                    // dest will only emit one 'drain' event for the multiple writes.
                    // => Introduce a guard on increasing awaitDrain.
                    var increasedAwaitDrain = false;
                    src.on('data', ondata);
                    function ondata(chunk) {
                        debug('ondata');
                        increasedAwaitDrain = false;
                        var ret = dest.write(chunk);
                        if (false === ret && !increasedAwaitDrain) {
                            // If the user unpiped during `dest.write()`, it is possible
                            // to get stuck in a permanently paused state if that write
                            // also returned false.
                            // => Check whether `dest` is still a piping destination.
                            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                                debug('false write response, pause', src._readableState.awaitDrain);
                                src._readableState.awaitDrain++;
                                increasedAwaitDrain = true;
                            }
                            src.pause();
                        }
                    }

                    // if the dest has an error, then stop piping into it.
                    // however, don't suppress the throwing behavior for this.
                    function onerror(er) {
                        debug('onerror', er);
                        unpipe();
                        dest.removeListener('error', onerror);
                        if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
                    }

                    // Make sure our error handler is attached before userland ones.
                    prependListener(dest, 'error', onerror);

                    // Both close and finish should trigger unpipe, but only once.
                    function onclose() {
                        dest.removeListener('finish', onfinish);
                        unpipe();
                    }
                    dest.once('close', onclose);
                    function onfinish() {
                        debug('onfinish');
                        dest.removeListener('close', onclose);
                        unpipe();
                    }
                    dest.once('finish', onfinish);

                    function unpipe() {
                        debug('unpipe');
                        src.unpipe(dest);
                    }

                    // tell the dest that it's being piped to
                    dest.emit('pipe', src);

                    // start the flow if it hasn't been started already.
                    if (!state.flowing) {
                        debug('pipe resume');
                        src.resume();
                    }

                    return dest;
                };

                function pipeOnDrain(src) {
                    return function () {
                        var state = src._readableState;
                        debug('pipeOnDrain', state.awaitDrain);
                        if (state.awaitDrain) state.awaitDrain--;
                        if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
                            state.flowing = true;
                            flow(src);
                        }
                    };
                }

                Readable.prototype.unpipe = function (dest) {
                    var state = this._readableState;
                    var unpipeInfo = { hasUnpiped: false };

                    // if we're not piping anywhere, then do nothing.
                    if (state.pipesCount === 0) return this;

                    // just one destination.  most common case.
                    if (state.pipesCount === 1) {
                        // passed in one, but it's not the right one.
                        if (dest && dest !== state.pipes) return this;

                        if (!dest) dest = state.pipes;

                        // got a match.
                        state.pipes = null;
                        state.pipesCount = 0;
                        state.flowing = false;
                        if (dest) dest.emit('unpipe', this, unpipeInfo);
                        return this;
                    }

                    // slow case. multiple pipe destinations.

                    if (!dest) {
                        // remove all.
                        var dests = state.pipes;
                        var len = state.pipesCount;
                        state.pipes = null;
                        state.pipesCount = 0;
                        state.flowing = false;

                        for (var i = 0; i < len; i++) {
                            dests[i].emit('unpipe', this, unpipeInfo);
                        }return this;
                    }

                    // try to find the right one.
                    var index = indexOf(state.pipes, dest);
                    if (index === -1) return this;

                    state.pipes.splice(index, 1);
                    state.pipesCount -= 1;
                    if (state.pipesCount === 1) state.pipes = state.pipes[0];

                    dest.emit('unpipe', this, unpipeInfo);

                    return this;
                };

                // set up data events if they are asked for
                // Ensure readable listeners eventually get something
                Readable.prototype.on = function (ev, fn) {
                    var res = Stream.prototype.on.call(this, ev, fn);

                    if (ev === 'data') {
                        // Start flowing on next tick if stream isn't explicitly paused
                        if (this._readableState.flowing !== false) this.resume();
                    } else if (ev === 'readable') {
                        var state = this._readableState;
                        if (!state.endEmitted && !state.readableListening) {
                            state.readableListening = state.needReadable = true;
                            state.emittedReadable = false;
                            if (!state.reading) {
                                processNextTick(nReadingNextTick, this);
                            } else if (state.length) {
                                emitReadable(this);
                            }
                        }
                    }

                    return res;
                };
                Readable.prototype.addListener = Readable.prototype.on;

                function nReadingNextTick(self) {
                    debug('readable nexttick read 0');
                    self.read(0);
                }

                // pause() and resume() are remnants of the legacy readable stream API
                // If the user uses them, then switch into old mode.
                Readable.prototype.resume = function () {
                    var state = this._readableState;
                    if (!state.flowing) {
                        debug('resume');
                        state.flowing = true;
                        resume(this, state);
                    }
                    return this;
                };

                function resume(stream, state) {
                    if (!state.resumeScheduled) {
                        state.resumeScheduled = true;
                        processNextTick(resume_, stream, state);
                    }
                }

                function resume_(stream, state) {
                    if (!state.reading) {
                        debug('resume read 0');
                        stream.read(0);
                    }

                    state.resumeScheduled = false;
                    state.awaitDrain = 0;
                    stream.emit('resume');
                    flow(stream);
                    if (state.flowing && !state.reading) stream.read(0);
                }

                Readable.prototype.pause = function () {
                    debug('call pause flowing=%j', this._readableState.flowing);
                    if (false !== this._readableState.flowing) {
                        debug('pause');
                        this._readableState.flowing = false;
                        this.emit('pause');
                    }
                    return this;
                };

                function flow(stream) {
                    var state = stream._readableState;
                    debug('flow', state.flowing);
                    while (state.flowing && stream.read() !== null) {}
                }

                // wrap an old-style stream as the async data source.
                // This is *not* part of the readable stream interface.
                // It is an ugly unfortunate mess of history.
                Readable.prototype.wrap = function (stream) {
                    var state = this._readableState;
                    var paused = false;

                    var self = this;
                    stream.on('end', function () {
                        debug('wrapped end');
                        if (state.decoder && !state.ended) {
                            var chunk = state.decoder.end();
                            if (chunk && chunk.length) self.push(chunk);
                        }

                        self.push(null);
                    });

                    stream.on('data', function (chunk) {
                        debug('wrapped data');
                        if (state.decoder) chunk = state.decoder.write(chunk);

                        // don't skip over falsy values in objectMode
                        if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

                        var ret = self.push(chunk);
                        if (!ret) {
                            paused = true;
                            stream.pause();
                        }
                    });

                    // proxy all the other methods.
                    // important when wrapping filters and duplexes.
                    for (var i in stream) {
                        if (this[i] === undefined && typeof stream[i] === 'function') {
                            this[i] = function (method) {
                                return function () {
                                    return stream[method].apply(stream, arguments);
                                };
                            }(i);
                        }
                    }

                    // proxy certain important events.
                    for (var n = 0; n < kProxyEvents.length; n++) {
                        stream.on(kProxyEvents[n], self.emit.bind(self, kProxyEvents[n]));
                    }

                    // when we try to consume some more bytes, simply unpause the
                    // underlying stream.
                    self._read = function (n) {
                        debug('wrapped _read', n);
                        if (paused) {
                            paused = false;
                            stream.resume();
                        }
                    };

                    return self;
                };

                // exposed for testing purposes only.
                Readable._fromList = fromList;

                // Pluck off n bytes from an array of buffers.
                // Length is the combined lengths of all the buffers in the list.
                // This function is designed to be inlinable, so please take care when making
                // changes to the function body.
                function fromList(n, state) {
                    // nothing buffered
                    if (state.length === 0) return null;

                    var ret;
                    if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
                        // read it all, truncate the list
                        if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
                        state.buffer.clear();
                    } else {
                        // read part of list
                        ret = fromListPartial(n, state.buffer, state.decoder);
                    }

                    return ret;
                }

                // Extracts only enough buffered data to satisfy the amount requested.
                // This function is designed to be inlinable, so please take care when making
                // changes to the function body.
                function fromListPartial(n, list, hasStrings) {
                    var ret;
                    if (n < list.head.data.length) {
                        // slice is the same for buffers and strings
                        ret = list.head.data.slice(0, n);
                        list.head.data = list.head.data.slice(n);
                    } else if (n === list.head.data.length) {
                        // first chunk is a perfect match
                        ret = list.shift();
                    } else {
                        // result spans more than one buffer
                        ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
                    }
                    return ret;
                }

                // Copies a specified amount of characters from the list of buffered data
                // chunks.
                // This function is designed to be inlinable, so please take care when making
                // changes to the function body.
                function copyFromBufferString(n, list) {
                    var p = list.head;
                    var c = 1;
                    var ret = p.data;
                    n -= ret.length;
                    while (p = p.next) {
                        var str = p.data;
                        var nb = n > str.length ? str.length : n;
                        if (nb === str.length) ret += str;else ret += str.slice(0, n);
                        n -= nb;
                        if (n === 0) {
                            if (nb === str.length) {
                                ++c;
                                if (p.next) list.head = p.next;else list.head = list.tail = null;
                            } else {
                                list.head = p;
                                p.data = str.slice(nb);
                            }
                            break;
                        }
                        ++c;
                    }
                    list.length -= c;
                    return ret;
                }

                // Copies a specified amount of bytes from the list of buffered data chunks.
                // This function is designed to be inlinable, so please take care when making
                // changes to the function body.
                function copyFromBuffer(n, list) {
                    var ret = Buffer.allocUnsafe(n);
                    var p = list.head;
                    var c = 1;
                    p.data.copy(ret);
                    n -= p.data.length;
                    while (p = p.next) {
                        var buf = p.data;
                        var nb = n > buf.length ? buf.length : n;
                        buf.copy(ret, ret.length - n, 0, nb);
                        n -= nb;
                        if (n === 0) {
                            if (nb === buf.length) {
                                ++c;
                                if (p.next) list.head = p.next;else list.head = list.tail = null;
                            } else {
                                list.head = p;
                                p.data = buf.slice(nb);
                            }
                            break;
                        }
                        ++c;
                    }
                    list.length -= c;
                    return ret;
                }

                function endReadable(stream) {
                    var state = stream._readableState;

                    // If we get here before consuming all the bytes, then that is a
                    // bug in node.  Should never happen.
                    if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

                    if (!state.endEmitted) {
                        state.ended = true;
                        processNextTick(endReadableNT, state, stream);
                    }
                }

                function endReadableNT(state, stream) {
                    // Check that we didn't get one last unshift.
                    if (!state.endEmitted && state.length === 0) {
                        state.endEmitted = true;
                        stream.readable = false;
                        stream.emit('end');
                    }
                }

                function forEach(xs, f) {
                    for (var i = 0, l = xs.length; i < l; i++) {
                        f(xs[i], i);
                    }
                }

                function indexOf(xs, x) {
                    for (var i = 0, l = xs.length; i < l; i++) {
                        if (xs[i] === x) return i;
                    }
                    return -1;
                }
                /* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(36)))

            /***/ }),
        /* 36 */
        /***/ (function(module, exports) {

            // shim for using process in browser
            var process = module.exports = {};

            // cached from whatever global is present so that test runners that stub it
            // don't break things.  But we need to wrap it in a try catch in case it is
            // wrapped in strict mode code which doesn't define any globals.  It's inside a
            // function because try/catches deoptimize in certain engines.

            var cachedSetTimeout;
            var cachedClearTimeout;

            function defaultSetTimout() {
                throw new Error('setTimeout has not been defined');
            }
            function defaultClearTimeout () {
                throw new Error('clearTimeout has not been defined');
            }
            (function () {
                try {
                    if (typeof setTimeout === 'function') {
                        cachedSetTimeout = setTimeout;
                    } else {
                        cachedSetTimeout = defaultSetTimout;
                    }
                } catch (e) {
                    cachedSetTimeout = defaultSetTimout;
                }
                try {
                    if (typeof clearTimeout === 'function') {
                        cachedClearTimeout = clearTimeout;
                    } else {
                        cachedClearTimeout = defaultClearTimeout;
                    }
                } catch (e) {
                    cachedClearTimeout = defaultClearTimeout;
                }
            } ())
            function runTimeout(fun) {
                if (cachedSetTimeout === setTimeout) {
                    //normal enviroments in sane situations
                    return setTimeout(fun, 0);
                }
                // if setTimeout wasn't available but was latter defined
                if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                    cachedSetTimeout = setTimeout;
                    return setTimeout(fun, 0);
                }
                try {
                    // when when somebody has screwed with setTimeout but no I.E. maddness
                    return cachedSetTimeout(fun, 0);
                } catch(e){
                    try {
                        // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                        return cachedSetTimeout.call(null, fun, 0);
                    } catch(e){
                        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                        return cachedSetTimeout.call(this, fun, 0);
                    }
                }


            }
            function runClearTimeout(marker) {
                if (cachedClearTimeout === clearTimeout) {
                    //normal enviroments in sane situations
                    return clearTimeout(marker);
                }
                // if clearTimeout wasn't available but was latter defined
                if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                    cachedClearTimeout = clearTimeout;
                    return clearTimeout(marker);
                }
                try {
                    // when when somebody has screwed with setTimeout but no I.E. maddness
                    return cachedClearTimeout(marker);
                } catch (e){
                    try {
                        // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                        return cachedClearTimeout.call(null, marker);
                    } catch (e){
                        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                        // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                        return cachedClearTimeout.call(this, marker);
                    }
                }



            }
            var queue = [];
            var draining = false;
            var currentQueue;
            var queueIndex = -1;

            function cleanUpNextTick() {
                if (!draining || !currentQueue) {
                    return;
                }
                draining = false;
                if (currentQueue.length) {
                    queue = currentQueue.concat(queue);
                } else {
                    queueIndex = -1;
                }
                if (queue.length) {
                    drainQueue();
                }
            }

            function drainQueue() {
                if (draining) {
                    return;
                }
                var timeout = runTimeout(cleanUpNextTick);
                draining = true;

                var len = queue.length;
                while(len) {
                    currentQueue = queue;
                    queue = [];
                    while (++queueIndex < len) {
                        if (currentQueue) {
                            currentQueue[queueIndex].run();
                        }
                    }
                    queueIndex = -1;
                    len = queue.length;
                }
                currentQueue = null;
                draining = false;
                runClearTimeout(timeout);
            }

            process.nextTick = function (fun) {
                var args = new Array(arguments.length - 1);
                if (arguments.length > 1) {
                    for (var i = 1; i < arguments.length; i++) {
                        args[i - 1] = arguments[i];
                    }
                }
                queue.push(new Item(fun, args));
                if (queue.length === 1 && !draining) {
                    runTimeout(drainQueue);
                }
            };

            // v8 likes predictible objects
            function Item(fun, array) {
                this.fun = fun;
                this.array = array;
            }
            Item.prototype.run = function () {
                this.fun.apply(null, this.array);
            };
            process.title = 'browser';
            process.browser = true;
            process.env = {};
            process.argv = [];
            process.version = ''; // empty string to avoid regexp issues
            process.versions = {};

            function noop() {}

            process.on = noop;
            process.addListener = noop;
            process.once = noop;
            process.off = noop;
            process.removeListener = noop;
            process.removeAllListeners = noop;
            process.emit = noop;
            process.prependListener = noop;
            process.prependOnceListener = noop;

            process.listeners = function (name) { return [] }

            process.binding = function (name) {
                throw new Error('process.binding is not supported');
            };

            process.cwd = function () { return '/' };
            process.chdir = function (dir) {
                throw new Error('process.chdir is not supported');
            };
            process.umask = function() { return 0; };


            /***/ }),
        /* 37 */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(process) {'use strict';

                if (!process.version ||
                    process.version.indexOf('v0.') === 0 ||
                    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
                    module.exports = nextTick;
                } else {
                    module.exports = process.nextTick;
                }

                function nextTick(fn, arg1, arg2, arg3) {
                    if (typeof fn !== 'function') {
                        throw new TypeError('"callback" argument must be a function');
                    }
                    var len = arguments.length;
                    var args, i;
                    switch (len) {
                        case 0:
                        case 1:
                            return process.nextTick(fn);
                        case 2:
                            return process.nextTick(function afterTickOne() {
                                fn.call(null, arg1);
                            });
                        case 3:
                            return process.nextTick(function afterTickTwo() {
                                fn.call(null, arg1, arg2);
                            });
                        case 4:
                            return process.nextTick(function afterTickThree() {
                                fn.call(null, arg1, arg2, arg3);
                            });
                        default:
                            args = new Array(len - 1);
                            i = 0;
                            while (i < args.length) {
                                args[i++] = arguments[i];
                            }
                            return process.nextTick(function afterTick() {
                                fn.apply(null, args);
                            });
                    }
                }

                /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(36)))

            /***/ }),
        /* 38 */
        /***/ (function(module, exports, __webpack_require__) {

            module.exports = __webpack_require__(32).EventEmitter;


            /***/ }),
        /* 39 */
        /***/ (function(module, exports, __webpack_require__) {

            /* eslint-disable node/no-deprecated-api */
            var buffer = __webpack_require__(2)
            var Buffer = buffer.Buffer

            // alternative to using Object.keys for old browsers
            function copyProps (src, dst) {
                for (var key in src) {
                    dst[key] = src[key]
                }
            }
            if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
                module.exports = buffer
            } else {
                // Copy properties from require('buffer')
                copyProps(buffer, exports)
                exports.Buffer = SafeBuffer
            }

            function SafeBuffer (arg, encodingOrOffset, length) {
                return Buffer(arg, encodingOrOffset, length)
            }

            // Copy static methods from Buffer
            copyProps(Buffer, SafeBuffer)

            SafeBuffer.from = function (arg, encodingOrOffset, length) {
                if (typeof arg === 'number') {
                    throw new TypeError('Argument must not be a number')
                }
                return Buffer(arg, encodingOrOffset, length)
            }

            SafeBuffer.alloc = function (size, fill, encoding) {
                if (typeof size !== 'number') {
                    throw new TypeError('Argument must be a number')
                }
                var buf = Buffer(size)
                if (fill !== undefined) {
                    if (typeof encoding === 'string') {
                        buf.fill(fill, encoding)
                    } else {
                        buf.fill(fill)
                    }
                } else {
                    buf.fill(0)
                }
                return buf
            }

            SafeBuffer.allocUnsafe = function (size) {
                if (typeof size !== 'number') {
                    throw new TypeError('Argument must be a number')
                }
                return Buffer(size)
            }

            SafeBuffer.allocUnsafeSlow = function (size) {
                if (typeof size !== 'number') {
                    throw new TypeError('Argument must be a number')
                }
                return buffer.SlowBuffer(size)
            }


            /***/ }),
        /* 40 */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
                //
                // Permission is hereby granted, free of charge, to any person obtaining a
                // copy of this software and associated documentation files (the
                // "Software"), to deal in the Software without restriction, including
                // without limitation the rights to use, copy, modify, merge, publish,
                // distribute, sublicense, and/or sell copies of the Software, and to permit
                // persons to whom the Software is furnished to do so, subject to the
                // following conditions:
                //
                // The above copyright notice and this permission notice shall be included
                // in all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                // USE OR OTHER DEALINGS IN THE SOFTWARE.

                // NOTE: These type checking functions intentionally don't use `instanceof`
                // because it is fragile and can be easily faked with `Object.create()`.

                function isArray(arg) {
                    if (Array.isArray) {
                        return Array.isArray(arg);
                    }
                    return objectToString(arg) === '[object Array]';
                }
                exports.isArray = isArray;

                function isBoolean(arg) {
                    return typeof arg === 'boolean';
                }
                exports.isBoolean = isBoolean;

                function isNull(arg) {
                    return arg === null;
                }
                exports.isNull = isNull;

                function isNullOrUndefined(arg) {
                    return arg == null;
                }
                exports.isNullOrUndefined = isNullOrUndefined;

                function isNumber(arg) {
                    return typeof arg === 'number';
                }
                exports.isNumber = isNumber;

                function isString(arg) {
                    return typeof arg === 'string';
                }
                exports.isString = isString;

                function isSymbol(arg) {
                    return typeof arg === 'symbol';
                }
                exports.isSymbol = isSymbol;

                function isUndefined(arg) {
                    return arg === void 0;
                }
                exports.isUndefined = isUndefined;

                function isRegExp(re) {
                    return objectToString(re) === '[object RegExp]';
                }
                exports.isRegExp = isRegExp;

                function isObject(arg) {
                    return typeof arg === 'object' && arg !== null;
                }
                exports.isObject = isObject;

                function isDate(d) {
                    return objectToString(d) === '[object Date]';
                }
                exports.isDate = isDate;

                function isError(e) {
                    return (objectToString(e) === '[object Error]' || e instanceof Error);
                }
                exports.isError = isError;

                function isFunction(arg) {
                    return typeof arg === 'function';
                }
                exports.isFunction = isFunction;

                function isPrimitive(arg) {
                    return arg === null ||
                        typeof arg === 'boolean' ||
                        typeof arg === 'number' ||
                        typeof arg === 'string' ||
                        typeof arg === 'symbol' ||  // ES6 symbol
                        typeof arg === 'undefined';
                }
                exports.isPrimitive = isPrimitive;

                exports.isBuffer = Buffer.isBuffer;

                function objectToString(o) {
                    return Object.prototype.toString.call(o);
                }

                /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))

            /***/ }),
        /* 41 */
        /***/ (function(module, exports) {

            /* (ignored) */

            /***/ }),
        /* 42 */
        /***/ (function(module, exports, __webpack_require__) {

            'use strict';

            /*<replacement>*/

            function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

            var Buffer = __webpack_require__(39).Buffer;
            /*</replacement>*/

            function copyBuffer(src, target, offset) {
                src.copy(target, offset);
            }

            module.exports = function () {
                function BufferList() {
                    _classCallCheck(this, BufferList);

                    this.head = null;
                    this.tail = null;
                    this.length = 0;
                }

                BufferList.prototype.push = function push(v) {
                    var entry = { data: v, next: null };
                    if (this.length > 0) this.tail.next = entry;else this.head = entry;
                    this.tail = entry;
                    ++this.length;
                };

                BufferList.prototype.unshift = function unshift(v) {
                    var entry = { data: v, next: this.head };
                    if (this.length === 0) this.tail = entry;
                    this.head = entry;
                    ++this.length;
                };

                BufferList.prototype.shift = function shift() {
                    if (this.length === 0) return;
                    var ret = this.head.data;
                    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
                    --this.length;
                    return ret;
                };

                BufferList.prototype.clear = function clear() {
                    this.head = this.tail = null;
                    this.length = 0;
                };

                BufferList.prototype.join = function join(s) {
                    if (this.length === 0) return '';
                    var p = this.head;
                    var ret = '' + p.data;
                    while (p = p.next) {
                        ret += s + p.data;
                    }return ret;
                };

                BufferList.prototype.concat = function concat(n) {
                    if (this.length === 0) return Buffer.alloc(0);
                    if (this.length === 1) return this.head.data;
                    var ret = Buffer.allocUnsafe(n >>> 0);
                    var p = this.head;
                    var i = 0;
                    while (p) {
                        copyBuffer(p.data, ret, i);
                        i += p.data.length;
                        p = p.next;
                    }
                    return ret;
                };

                return BufferList;
            }();

            /***/ }),
        /* 43 */
        /***/ (function(module, exports, __webpack_require__) {

            'use strict';

            /*<replacement>*/

            var processNextTick = __webpack_require__(37);
            /*</replacement>*/

            // undocumented cb() API, needed for core, not for public API
            function destroy(err, cb) {
                var _this = this;

                var readableDestroyed = this._readableState && this._readableState.destroyed;
                var writableDestroyed = this._writableState && this._writableState.destroyed;

                if (readableDestroyed || writableDestroyed) {
                    if (cb) {
                        cb(err);
                    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
                        processNextTick(emitErrorNT, this, err);
                    }
                    return;
                }

                // we set destroyed to true before firing error callbacks in order
                // to make it re-entrance safe in case destroy() is called within callbacks

                if (this._readableState) {
                    this._readableState.destroyed = true;
                }

                // if this is a duplex stream mark the writable part as destroyed as well
                if (this._writableState) {
                    this._writableState.destroyed = true;
                }

                this._destroy(err || null, function (err) {
                    if (!cb && err) {
                        processNextTick(emitErrorNT, _this, err);
                        if (_this._writableState) {
                            _this._writableState.errorEmitted = true;
                        }
                    } else if (cb) {
                        cb(err);
                    }
                });
            }

            function undestroy() {
                if (this._readableState) {
                    this._readableState.destroyed = false;
                    this._readableState.reading = false;
                    this._readableState.ended = false;
                    this._readableState.endEmitted = false;
                }

                if (this._writableState) {
                    this._writableState.destroyed = false;
                    this._writableState.ended = false;
                    this._writableState.ending = false;
                    this._writableState.finished = false;
                    this._writableState.errorEmitted = false;
                }
            }

            function emitErrorNT(self, err) {
                self.emit('error', err);
            }

            module.exports = {
                destroy: destroy,
                undestroy: undestroy
            };

            /***/ }),
        /* 44 */
        /***/ (function(module, exports, __webpack_require__) {

            // Copyright Joyent, Inc. and other Node contributors.
            //
            // Permission is hereby granted, free of charge, to any person obtaining a
            // copy of this software and associated documentation files (the
            // "Software"), to deal in the Software without restriction, including
            // without limitation the rights to use, copy, modify, merge, publish,
            // distribute, sublicense, and/or sell copies of the Software, and to permit
            // persons to whom the Software is furnished to do so, subject to the
            // following conditions:
            //
            // The above copyright notice and this permission notice shall be included
            // in all copies or substantial portions of the Software.
            //
            // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
            // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
            // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
            // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
            // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
            // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
            // USE OR OTHER DEALINGS IN THE SOFTWARE.

            // a duplex stream is just a stream that is both readable and writable.
            // Since JS doesn't have multiple prototypal inheritance, this class
            // prototypally inherits from Readable, and then parasitically from
            // Writable.

            'use strict';

            /*<replacement>*/

            var processNextTick = __webpack_require__(37);
            /*</replacement>*/

            /*<replacement>*/
            var objectKeys = Object.keys || function (obj) {
                    var keys = [];
                    for (var key in obj) {
                        keys.push(key);
                    }return keys;
                };
            /*</replacement>*/

            module.exports = Duplex;

            /*<replacement>*/
            var util = __webpack_require__(40);
            util.inherits = __webpack_require__(33);
            /*</replacement>*/

            var Readable = __webpack_require__(35);
            var Writable = __webpack_require__(45);

            util.inherits(Duplex, Readable);

            var keys = objectKeys(Writable.prototype);
            for (var v = 0; v < keys.length; v++) {
                var method = keys[v];
                if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
            }

            function Duplex(options) {
                if (!(this instanceof Duplex)) return new Duplex(options);

                Readable.call(this, options);
                Writable.call(this, options);

                if (options && options.readable === false) this.readable = false;

                if (options && options.writable === false) this.writable = false;

                this.allowHalfOpen = true;
                if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

                this.once('end', onend);
            }

            // the no-half-open enforcer
            function onend() {
                // if we allow half-open state, or if the writable side ended,
                // then we're ok.
                if (this.allowHalfOpen || this._writableState.ended) return;

                // no more data can be written.
                // But allow more writes to happen in this tick.
                processNextTick(onEndNT, this);
            }

            function onEndNT(self) {
                self.end();
            }

            Object.defineProperty(Duplex.prototype, 'destroyed', {
                get: function () {
                    if (this._readableState === undefined || this._writableState === undefined) {
                        return false;
                    }
                    return this._readableState.destroyed && this._writableState.destroyed;
                },
                set: function (value) {
                    // we ignore the value if the stream
                    // has not been initialized yet
                    if (this._readableState === undefined || this._writableState === undefined) {
                        return;
                    }

                    // backward compatibility, the user is explicitly
                    // managing destroyed
                    this._readableState.destroyed = value;
                    this._writableState.destroyed = value;
                }
            });

            Duplex.prototype._destroy = function (err, cb) {
                this.push(null);
                this.end();

                processNextTick(cb, err);
            };

            function forEach(xs, f) {
                for (var i = 0, l = xs.length; i < l; i++) {
                    f(xs[i], i);
                }
            }

            /***/ }),
        /* 45 */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(process, setImmediate, global) {// Copyright Joyent, Inc. and other Node contributors.
                //
                // Permission is hereby granted, free of charge, to any person obtaining a
                // copy of this software and associated documentation files (the
                // "Software"), to deal in the Software without restriction, including
                // without limitation the rights to use, copy, modify, merge, publish,
                // distribute, sublicense, and/or sell copies of the Software, and to permit
                // persons to whom the Software is furnished to do so, subject to the
                // following conditions:
                //
                // The above copyright notice and this permission notice shall be included
                // in all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                // USE OR OTHER DEALINGS IN THE SOFTWARE.

                // A bit simpler than readable streams.
                // Implement an async ._write(chunk, encoding, cb), and it'll handle all
                // the drain event emission and buffering.

                'use strict';

                /*<replacement>*/

                var processNextTick = __webpack_require__(37);
                /*</replacement>*/

                module.exports = Writable;

                /* <replacement> */
                function WriteReq(chunk, encoding, cb) {
                    this.chunk = chunk;
                    this.encoding = encoding;
                    this.callback = cb;
                    this.next = null;
                }

                // It seems a linked list but it is not
                // there will be only 2 of these for each stream
                function CorkedRequest(state) {
                    var _this = this;

                    this.next = null;
                    this.entry = null;
                    this.finish = function () {
                        onCorkedFinish(_this, state);
                    };
                }
                /* </replacement> */

                /*<replacement>*/
                var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
                /*</replacement>*/

                /*<replacement>*/
                var Duplex;
                /*</replacement>*/

                Writable.WritableState = WritableState;

                /*<replacement>*/
                var util = __webpack_require__(40);
                util.inherits = __webpack_require__(33);
                /*</replacement>*/

                /*<replacement>*/
                var internalUtil = {
                    deprecate: __webpack_require__(48)
                };
                /*</replacement>*/

                /*<replacement>*/
                var Stream = __webpack_require__(38);
                /*</replacement>*/

                /*<replacement>*/
                var Buffer = __webpack_require__(39).Buffer;
                var OurUint8Array = global.Uint8Array || function () {};
                function _uint8ArrayToBuffer(chunk) {
                    return Buffer.from(chunk);
                }
                function _isUint8Array(obj) {
                    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
                }
                /*</replacement>*/

                var destroyImpl = __webpack_require__(43);

                util.inherits(Writable, Stream);

                function nop() {}

                function WritableState(options, stream) {
                    Duplex = Duplex || __webpack_require__(44);

                    options = options || {};

                    // object stream flag to indicate whether or not this stream
                    // contains buffers or objects.
                    this.objectMode = !!options.objectMode;

                    if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

                    // the point at which write() starts returning false
                    // Note: 0 is a valid value, means that we always return false if
                    // the entire buffer is not flushed immediately on write()
                    var hwm = options.highWaterMark;
                    var defaultHwm = this.objectMode ? 16 : 16 * 1024;
                    this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

                    // cast to ints.
                    this.highWaterMark = Math.floor(this.highWaterMark);

                    // if _final has been called
                    this.finalCalled = false;

                    // drain event flag.
                    this.needDrain = false;
                    // at the start of calling end()
                    this.ending = false;
                    // when end() has been called, and returned
                    this.ended = false;
                    // when 'finish' is emitted
                    this.finished = false;

                    // has it been destroyed
                    this.destroyed = false;

                    // should we decode strings into buffers before passing to _write?
                    // this is here so that some node-core streams can optimize string
                    // handling at a lower level.
                    var noDecode = options.decodeStrings === false;
                    this.decodeStrings = !noDecode;

                    // Crypto is kind of old and crusty.  Historically, its default string
                    // encoding is 'binary' so we have to make this configurable.
                    // Everything else in the universe uses 'utf8', though.
                    this.defaultEncoding = options.defaultEncoding || 'utf8';

                    // not an actual buffer we keep track of, but a measurement
                    // of how much we're waiting to get pushed to some underlying
                    // socket or file.
                    this.length = 0;

                    // a flag to see when we're in the middle of a write.
                    this.writing = false;

                    // when true all writes will be buffered until .uncork() call
                    this.corked = 0;

                    // a flag to be able to tell if the onwrite cb is called immediately,
                    // or on a later tick.  We set this to true at first, because any
                    // actions that shouldn't happen until "later" should generally also
                    // not happen before the first write call.
                    this.sync = true;

                    // a flag to know if we're processing previously buffered items, which
                    // may call the _write() callback in the same tick, so that we don't
                    // end up in an overlapped onwrite situation.
                    this.bufferProcessing = false;

                    // the callback that's passed to _write(chunk,cb)
                    this.onwrite = function (er) {
                        onwrite(stream, er);
                    };

                    // the callback that the user supplies to write(chunk,encoding,cb)
                    this.writecb = null;

                    // the amount that is being written when _write is called.
                    this.writelen = 0;

                    this.bufferedRequest = null;
                    this.lastBufferedRequest = null;

                    // number of pending user-supplied write callbacks
                    // this must be 0 before 'finish' can be emitted
                    this.pendingcb = 0;

                    // emit prefinish if the only thing we're waiting for is _write cbs
                    // This is relevant for synchronous Transform streams
                    this.prefinished = false;

                    // True if the error was already emitted and should not be thrown again
                    this.errorEmitted = false;

                    // count buffered requests
                    this.bufferedRequestCount = 0;

                    // allocate the first CorkedRequest, there is always
                    // one allocated and free to use, and we maintain at most two
                    this.corkedRequestsFree = new CorkedRequest(this);
                }

                WritableState.prototype.getBuffer = function getBuffer() {
                    var current = this.bufferedRequest;
                    var out = [];
                    while (current) {
                        out.push(current);
                        current = current.next;
                    }
                    return out;
                };

                (function () {
                    try {
                        Object.defineProperty(WritableState.prototype, 'buffer', {
                            get: internalUtil.deprecate(function () {
                                return this.getBuffer();
                            }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
                        });
                    } catch (_) {}
                })();

                // Test _writableState for inheritance to account for Duplex streams,
                // whose prototype chain only points to Readable.
                var realHasInstance;
                if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
                    realHasInstance = Function.prototype[Symbol.hasInstance];
                    Object.defineProperty(Writable, Symbol.hasInstance, {
                        value: function (object) {
                            if (realHasInstance.call(this, object)) return true;

                            return object && object._writableState instanceof WritableState;
                        }
                    });
                } else {
                    realHasInstance = function (object) {
                        return object instanceof this;
                    };
                }

                function Writable(options) {
                    Duplex = Duplex || __webpack_require__(44);

                    // Writable ctor is applied to Duplexes, too.
                    // `realHasInstance` is necessary because using plain `instanceof`
                    // would return false, as no `_writableState` property is attached.

                    // Trying to use the custom `instanceof` for Writable here will also break the
                    // Node.js LazyTransform implementation, which has a non-trivial getter for
                    // `_writableState` that would lead to infinite recursion.
                    if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
                        return new Writable(options);
                    }

                    this._writableState = new WritableState(options, this);

                    // legacy.
                    this.writable = true;

                    if (options) {
                        if (typeof options.write === 'function') this._write = options.write;

                        if (typeof options.writev === 'function') this._writev = options.writev;

                        if (typeof options.destroy === 'function') this._destroy = options.destroy;

                        if (typeof options.final === 'function') this._final = options.final;
                    }

                    Stream.call(this);
                }

                // Otherwise people can pipe Writable streams, which is just wrong.
                Writable.prototype.pipe = function () {
                    this.emit('error', new Error('Cannot pipe, not readable'));
                };

                function writeAfterEnd(stream, cb) {
                    var er = new Error('write after end');
                    // TODO: defer error events consistently everywhere, not just the cb
                    stream.emit('error', er);
                    processNextTick(cb, er);
                }

                // Checks that a user-supplied chunk is valid, especially for the particular
                // mode the stream is in. Currently this means that `null` is never accepted
                // and undefined/non-string values are only allowed in object mode.
                function validChunk(stream, state, chunk, cb) {
                    var valid = true;
                    var er = false;

                    if (chunk === null) {
                        er = new TypeError('May not write null values to stream');
                    } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
                        er = new TypeError('Invalid non-string/buffer chunk');
                    }
                    if (er) {
                        stream.emit('error', er);
                        processNextTick(cb, er);
                        valid = false;
                    }
                    return valid;
                }

                Writable.prototype.write = function (chunk, encoding, cb) {
                    var state = this._writableState;
                    var ret = false;
                    var isBuf = _isUint8Array(chunk) && !state.objectMode;

                    if (isBuf && !Buffer.isBuffer(chunk)) {
                        chunk = _uint8ArrayToBuffer(chunk);
                    }

                    if (typeof encoding === 'function') {
                        cb = encoding;
                        encoding = null;
                    }

                    if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

                    if (typeof cb !== 'function') cb = nop;

                    if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
                        state.pendingcb++;
                        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
                    }

                    return ret;
                };

                Writable.prototype.cork = function () {
                    var state = this._writableState;

                    state.corked++;
                };

                Writable.prototype.uncork = function () {
                    var state = this._writableState;

                    if (state.corked) {
                        state.corked--;

                        if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
                    }
                };

                Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
                    // node::ParseEncoding() requires lower case.
                    if (typeof encoding === 'string') encoding = encoding.toLowerCase();
                    if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
                    this._writableState.defaultEncoding = encoding;
                    return this;
                };

                function decodeChunk(state, chunk, encoding) {
                    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
                        chunk = Buffer.from(chunk, encoding);
                    }
                    return chunk;
                }

                // if we're already writing something, then just put this
                // in the queue, and wait our turn.  Otherwise, call _write
                // If we return false, then we need a drain event, so set that flag.
                function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
                    if (!isBuf) {
                        var newChunk = decodeChunk(state, chunk, encoding);
                        if (chunk !== newChunk) {
                            isBuf = true;
                            encoding = 'buffer';
                            chunk = newChunk;
                        }
                    }
                    var len = state.objectMode ? 1 : chunk.length;

                    state.length += len;

                    var ret = state.length < state.highWaterMark;
                    // we must ensure that previous needDrain will not be reset to false.
                    if (!ret) state.needDrain = true;

                    if (state.writing || state.corked) {
                        var last = state.lastBufferedRequest;
                        state.lastBufferedRequest = {
                            chunk: chunk,
                            encoding: encoding,
                            isBuf: isBuf,
                            callback: cb,
                            next: null
                        };
                        if (last) {
                            last.next = state.lastBufferedRequest;
                        } else {
                            state.bufferedRequest = state.lastBufferedRequest;
                        }
                        state.bufferedRequestCount += 1;
                    } else {
                        doWrite(stream, state, false, len, chunk, encoding, cb);
                    }

                    return ret;
                }

                function doWrite(stream, state, writev, len, chunk, encoding, cb) {
                    state.writelen = len;
                    state.writecb = cb;
                    state.writing = true;
                    state.sync = true;
                    if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
                    state.sync = false;
                }

                function onwriteError(stream, state, sync, er, cb) {
                    --state.pendingcb;

                    if (sync) {
                        // defer the callback if we are being called synchronously
                        // to avoid piling up things on the stack
                        processNextTick(cb, er);
                        // this can emit finish, and it will always happen
                        // after error
                        processNextTick(finishMaybe, stream, state);
                        stream._writableState.errorEmitted = true;
                        stream.emit('error', er);
                    } else {
                        // the caller expect this to happen before if
                        // it is async
                        cb(er);
                        stream._writableState.errorEmitted = true;
                        stream.emit('error', er);
                        // this can emit finish, but finish must
                        // always follow error
                        finishMaybe(stream, state);
                    }
                }

                function onwriteStateUpdate(state) {
                    state.writing = false;
                    state.writecb = null;
                    state.length -= state.writelen;
                    state.writelen = 0;
                }

                function onwrite(stream, er) {
                    var state = stream._writableState;
                    var sync = state.sync;
                    var cb = state.writecb;

                    onwriteStateUpdate(state);

                    if (er) onwriteError(stream, state, sync, er, cb);else {
                        // Check if we're actually ready to finish, but don't emit yet
                        var finished = needFinish(state);

                        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
                            clearBuffer(stream, state);
                        }

                        if (sync) {
                            /*<replacement>*/
                            asyncWrite(afterWrite, stream, state, finished, cb);
                            /*</replacement>*/
                        } else {
                            afterWrite(stream, state, finished, cb);
                        }
                    }
                }

                function afterWrite(stream, state, finished, cb) {
                    if (!finished) onwriteDrain(stream, state);
                    state.pendingcb--;
                    cb();
                    finishMaybe(stream, state);
                }

                // Must force callback to be called on nextTick, so that we don't
                // emit 'drain' before the write() consumer gets the 'false' return
                // value, and has a chance to attach a 'drain' listener.
                function onwriteDrain(stream, state) {
                    if (state.length === 0 && state.needDrain) {
                        state.needDrain = false;
                        stream.emit('drain');
                    }
                }

                // if there's something in the buffer waiting, then process it
                function clearBuffer(stream, state) {
                    state.bufferProcessing = true;
                    var entry = state.bufferedRequest;

                    if (stream._writev && entry && entry.next) {
                        // Fast case, write everything using _writev()
                        var l = state.bufferedRequestCount;
                        var buffer = new Array(l);
                        var holder = state.corkedRequestsFree;
                        holder.entry = entry;

                        var count = 0;
                        var allBuffers = true;
                        while (entry) {
                            buffer[count] = entry;
                            if (!entry.isBuf) allBuffers = false;
                            entry = entry.next;
                            count += 1;
                        }
                        buffer.allBuffers = allBuffers;

                        doWrite(stream, state, true, state.length, buffer, '', holder.finish);

                        // doWrite is almost always async, defer these to save a bit of time
                        // as the hot path ends with doWrite
                        state.pendingcb++;
                        state.lastBufferedRequest = null;
                        if (holder.next) {
                            state.corkedRequestsFree = holder.next;
                            holder.next = null;
                        } else {
                            state.corkedRequestsFree = new CorkedRequest(state);
                        }
                    } else {
                        // Slow case, write chunks one-by-one
                        while (entry) {
                            var chunk = entry.chunk;
                            var encoding = entry.encoding;
                            var cb = entry.callback;
                            var len = state.objectMode ? 1 : chunk.length;

                            doWrite(stream, state, false, len, chunk, encoding, cb);
                            entry = entry.next;
                            // if we didn't call the onwrite immediately, then
                            // it means that we need to wait until it does.
                            // also, that means that the chunk and cb are currently
                            // being processed, so move the buffer counter past them.
                            if (state.writing) {
                                break;
                            }
                        }

                        if (entry === null) state.lastBufferedRequest = null;
                    }

                    state.bufferedRequestCount = 0;
                    state.bufferedRequest = entry;
                    state.bufferProcessing = false;
                }

                Writable.prototype._write = function (chunk, encoding, cb) {
                    cb(new Error('_write() is not implemented'));
                };

                Writable.prototype._writev = null;

                Writable.prototype.end = function (chunk, encoding, cb) {
                    var state = this._writableState;

                    if (typeof chunk === 'function') {
                        cb = chunk;
                        chunk = null;
                        encoding = null;
                    } else if (typeof encoding === 'function') {
                        cb = encoding;
                        encoding = null;
                    }

                    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

                    // .end() fully uncorks
                    if (state.corked) {
                        state.corked = 1;
                        this.uncork();
                    }

                    // ignore unnecessary end() calls.
                    if (!state.ending && !state.finished) endWritable(this, state, cb);
                };

                function needFinish(state) {
                    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
                }
                function callFinal(stream, state) {
                    stream._final(function (err) {
                        state.pendingcb--;
                        if (err) {
                            stream.emit('error', err);
                        }
                        state.prefinished = true;
                        stream.emit('prefinish');
                        finishMaybe(stream, state);
                    });
                }
                function prefinish(stream, state) {
                    if (!state.prefinished && !state.finalCalled) {
                        if (typeof stream._final === 'function') {
                            state.pendingcb++;
                            state.finalCalled = true;
                            processNextTick(callFinal, stream, state);
                        } else {
                            state.prefinished = true;
                            stream.emit('prefinish');
                        }
                    }
                }

                function finishMaybe(stream, state) {
                    var need = needFinish(state);
                    if (need) {
                        prefinish(stream, state);
                        if (state.pendingcb === 0) {
                            state.finished = true;
                            stream.emit('finish');
                        }
                    }
                    return need;
                }

                function endWritable(stream, state, cb) {
                    state.ending = true;
                    finishMaybe(stream, state);
                    if (cb) {
                        if (state.finished) processNextTick(cb);else stream.once('finish', cb);
                    }
                    state.ended = true;
                    stream.writable = false;
                }

                function onCorkedFinish(corkReq, state, err) {
                    var entry = corkReq.entry;
                    corkReq.entry = null;
                    while (entry) {
                        var cb = entry.callback;
                        state.pendingcb--;
                        cb(err);
                        entry = entry.next;
                    }
                    if (state.corkedRequestsFree) {
                        state.corkedRequestsFree.next = corkReq;
                    } else {
                        state.corkedRequestsFree = corkReq;
                    }
                }

                Object.defineProperty(Writable.prototype, 'destroyed', {
                    get: function () {
                        if (this._writableState === undefined) {
                            return false;
                        }
                        return this._writableState.destroyed;
                    },
                    set: function (value) {
                        // we ignore the value if the stream
                        // has not been initialized yet
                        if (!this._writableState) {
                            return;
                        }

                        // backward compatibility, the user is explicitly
                        // managing destroyed
                        this._writableState.destroyed = value;
                    }
                });

                Writable.prototype.destroy = destroyImpl.destroy;
                Writable.prototype._undestroy = destroyImpl.undestroy;
                Writable.prototype._destroy = function (err, cb) {
                    this.end();
                    cb(err);
                };
                /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(36), __webpack_require__(46).setImmediate, (function() { return this; }())))

            /***/ }),
        /* 46 */
        /***/ (function(module, exports, __webpack_require__) {

            var apply = Function.prototype.apply;

            // DOM APIs, for completeness

            exports.setTimeout = function() {
                return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
            };
            exports.setInterval = function() {
                return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
            };
            exports.clearTimeout =
                exports.clearInterval = function(timeout) {
                    if (timeout) {
                        timeout.close();
                    }
                };

            function Timeout(id, clearFn) {
                this._id = id;
                this._clearFn = clearFn;
            }
            Timeout.prototype.unref = Timeout.prototype.ref = function() {};
            Timeout.prototype.close = function() {
                this._clearFn.call(window, this._id);
            };

            // Does not start the time, just sets up the members needed.
            exports.enroll = function(item, msecs) {
                clearTimeout(item._idleTimeoutId);
                item._idleTimeout = msecs;
            };

            exports.unenroll = function(item) {
                clearTimeout(item._idleTimeoutId);
                item._idleTimeout = -1;
            };

            exports._unrefActive = exports.active = function(item) {
                clearTimeout(item._idleTimeoutId);

                var msecs = item._idleTimeout;
                if (msecs >= 0) {
                    item._idleTimeoutId = setTimeout(function onTimeout() {
                        if (item._onTimeout)
                            item._onTimeout();
                    }, msecs);
                }
            };

            // setimmediate attaches itself to the global object
            __webpack_require__(47);
            exports.setImmediate = setImmediate;
            exports.clearImmediate = clearImmediate;


            /***/ }),
        /* 47 */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
                "use strict";

                if (global.setImmediate) {
                    return;
                }

                var nextHandle = 1; // Spec says greater than zero
                var tasksByHandle = {};
                var currentlyRunningATask = false;
                var doc = global.document;
                var registerImmediate;

                function setImmediate(callback) {
                    // Callback can either be a function or a string
                    if (typeof callback !== "function") {
                        callback = new Function("" + callback);
                    }
                    // Copy function arguments
                    var args = new Array(arguments.length - 1);
                    for (var i = 0; i < args.length; i++) {
                        args[i] = arguments[i + 1];
                    }
                    // Store and register the task
                    var task = { callback: callback, args: args };
                    tasksByHandle[nextHandle] = task;
                    registerImmediate(nextHandle);
                    return nextHandle++;
                }

                function clearImmediate(handle) {
                    delete tasksByHandle[handle];
                }

                function run(task) {
                    var callback = task.callback;
                    var args = task.args;
                    switch (args.length) {
                        case 0:
                            callback();
                            break;
                        case 1:
                            callback(args[0]);
                            break;
                        case 2:
                            callback(args[0], args[1]);
                            break;
                        case 3:
                            callback(args[0], args[1], args[2]);
                            break;
                        default:
                            callback.apply(undefined, args);
                            break;
                    }
                }

                function runIfPresent(handle) {
                    // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
                    // So if we're currently running a task, we'll need to delay this invocation.
                    if (currentlyRunningATask) {
                        // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
                        // "too much recursion" error.
                        setTimeout(runIfPresent, 0, handle);
                    } else {
                        var task = tasksByHandle[handle];
                        if (task) {
                            currentlyRunningATask = true;
                            try {
                                run(task);
                            } finally {
                                clearImmediate(handle);
                                currentlyRunningATask = false;
                            }
                        }
                    }
                }

                function installNextTickImplementation() {
                    registerImmediate = function(handle) {
                        process.nextTick(function () { runIfPresent(handle); });
                    };
                }

                function canUsePostMessage() {
                    // The test against `importScripts` prevents this implementation from being installed inside a web worker,
                    // where `global.postMessage` means something completely different and can't be used for this purpose.
                    if (global.postMessage && !global.importScripts) {
                        var postMessageIsAsynchronous = true;
                        var oldOnMessage = global.onmessage;
                        global.onmessage = function() {
                            postMessageIsAsynchronous = false;
                        };
                        global.postMessage("", "*");
                        global.onmessage = oldOnMessage;
                        return postMessageIsAsynchronous;
                    }
                }

                function installPostMessageImplementation() {
                    // Installs an event handler on `global` for the `message` event: see
                    // * https://developer.mozilla.org/en/DOM/window.postMessage
                    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

                    var messagePrefix = "setImmediate$" + Math.random() + "$";
                    var onGlobalMessage = function(event) {
                        if (event.source === global &&
                            typeof event.data === "string" &&
                            event.data.indexOf(messagePrefix) === 0) {
                            runIfPresent(+event.data.slice(messagePrefix.length));
                        }
                    };

                    if (global.addEventListener) {
                        global.addEventListener("message", onGlobalMessage, false);
                    } else {
                        global.attachEvent("onmessage", onGlobalMessage);
                    }

                    registerImmediate = function(handle) {
                        global.postMessage(messagePrefix + handle, "*");
                    };
                }

                function installMessageChannelImplementation() {
                    var channel = new MessageChannel();
                    channel.port1.onmessage = function(event) {
                        var handle = event.data;
                        runIfPresent(handle);
                    };

                    registerImmediate = function(handle) {
                        channel.port2.postMessage(handle);
                    };
                }

                function installReadyStateChangeImplementation() {
                    var html = doc.documentElement;
                    registerImmediate = function(handle) {
                        // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
                        // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
                        var script = doc.createElement("script");
                        script.onreadystatechange = function () {
                            runIfPresent(handle);
                            script.onreadystatechange = null;
                            html.removeChild(script);
                            script = null;
                        };
                        html.appendChild(script);
                    };
                }

                function installSetTimeoutImplementation() {
                    registerImmediate = function(handle) {
                        setTimeout(runIfPresent, 0, handle);
                    };
                }

                // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
                var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
                attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

                // Don't get fooled by e.g. browserify environments.
                if ({}.toString.call(global.process) === "[object process]") {
                    // For Node.js before 0.9
                    installNextTickImplementation();

                } else if (canUsePostMessage()) {
                    // For non-IE10 modern browsers
                    installPostMessageImplementation();

                } else if (global.MessageChannel) {
                    // For web workers, where supported
                    installMessageChannelImplementation();

                } else if (doc && "onreadystatechange" in doc.createElement("script")) {
                    // For IE 6éˆ¥ï¿½8
                    installReadyStateChangeImplementation();

                } else {
                    // For older browsers
                    installSetTimeoutImplementation();
                }

                attachTo.setImmediate = setImmediate;
                attachTo.clearImmediate = clearImmediate;
            }(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

                /* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(36)))

            /***/ }),
        /* 48 */
        /***/ (function(module, exports) {

            /* WEBPACK VAR INJECTION */(function(global) {
                /**
                 * Module exports.
                 */

                module.exports = deprecate;

                /**
                 * Mark that a method should not be used.
                 * Returns a modified function which warns once by default.
                 *
                 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
                 *
                 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
                 * will throw an Error when invoked.
                 *
                 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
                 * will invoke `console.trace()` instead of `console.error()`.
                 *
                 * @param {Function} fn - the function to deprecate
                 * @param {String} msg - the string to print to the console when `fn` is invoked
                 * @returns {Function} a new "deprecated" version of `fn`
                 * @api public
                 */

                function deprecate (fn, msg) {
                    if (config('noDeprecation')) {
                        return fn;
                    }

                    var warned = false;
                    function deprecated() {
                        if (!warned) {
                            if (config('throwDeprecation')) {
                                throw new Error(msg);
                            } else if (config('traceDeprecation')) {
                                console.trace(msg);
                            } else {
                                console.warn(msg);
                            }
                            warned = true;
                        }
                        return fn.apply(this, arguments);
                    }

                    return deprecated;
                }

                /**
                 * Checks `localStorage` for boolean values for the given `name`.
                 *
                 * @param {String} name
                 * @returns {Boolean}
                 * @api private
                 */

                function config (name) {
                    // accessing global.localStorage can trigger a DOMException in sandboxed iframes
                    try {
                        if (!global.localStorage) return false;
                    } catch (_) {
                        return false;
                    }
                    var val = global.localStorage[name];
                    if (null == val) return false;
                    return String(val).toLowerCase() === 'true';
                }

                /* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

            /***/ }),
        /* 49 */
        /***/ (function(module, exports, __webpack_require__) {

            'use strict';

            var Buffer = __webpack_require__(39).Buffer;

            var isEncoding = Buffer.isEncoding || function (encoding) {
                    encoding = '' + encoding;
                    switch (encoding && encoding.toLowerCase()) {
                        case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
                        return true;
                        default:
                            return false;
                    }
                };

            function _normalizeEncoding(enc) {
                if (!enc) return 'utf8';
                var retried;
                while (true) {
                    switch (enc) {
                        case 'utf8':
                        case 'utf-8':
                            return 'utf8';
                        case 'ucs2':
                        case 'ucs-2':
                        case 'utf16le':
                        case 'utf-16le':
                            return 'utf16le';
                        case 'latin1':
                        case 'binary':
                            return 'latin1';
                        case 'base64':
                        case 'ascii':
                        case 'hex':
                            return enc;
                        default:
                            if (retried) return; // undefined
                            enc = ('' + enc).toLowerCase();
                            retried = true;
                    }
                }
            };

            // Do not cache `Buffer.isEncoding` when checking encoding names as some
            // modules monkey-patch it to support additional encodings
            function normalizeEncoding(enc) {
                var nenc = _normalizeEncoding(enc);
                if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
                return nenc || enc;
            }

            // StringDecoder provides an interface for efficiently splitting a series of
            // buffers into a series of JS strings without breaking apart multi-byte
            // characters.
            exports.StringDecoder = StringDecoder;
            function StringDecoder(encoding) {
                this.encoding = normalizeEncoding(encoding);
                var nb;
                switch (this.encoding) {
                    case 'utf16le':
                        this.text = utf16Text;
                        this.end = utf16End;
                        nb = 4;
                        break;
                    case 'utf8':
                        this.fillLast = utf8FillLast;
                        nb = 4;
                        break;
                    case 'base64':
                        this.text = base64Text;
                        this.end = base64End;
                        nb = 3;
                        break;
                    default:
                        this.write = simpleWrite;
                        this.end = simpleEnd;
                        return;
                }
                this.lastNeed = 0;
                this.lastTotal = 0;
                this.lastChar = Buffer.allocUnsafe(nb);
            }

            StringDecoder.prototype.write = function (buf) {
                if (buf.length === 0) return '';
                var r;
                var i;
                if (this.lastNeed) {
                    r = this.fillLast(buf);
                    if (r === undefined) return '';
                    i = this.lastNeed;
                    this.lastNeed = 0;
                } else {
                    i = 0;
                }
                if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
                return r || '';
            };

            StringDecoder.prototype.end = utf8End;

            // Returns only complete characters in a Buffer
            StringDecoder.prototype.text = utf8Text;

            // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
            StringDecoder.prototype.fillLast = function (buf) {
                if (this.lastNeed <= buf.length) {
                    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
                    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
                }
                buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
                this.lastNeed -= buf.length;
            };

            // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
            // continuation byte.
            function utf8CheckByte(byte) {
                if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
                return -1;
            }

            // Checks at most 3 bytes at the end of a Buffer in order to detect an
            // incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
            // needed to complete the UTF-8 character (if applicable) are returned.
            function utf8CheckIncomplete(self, buf, i) {
                var j = buf.length - 1;
                if (j < i) return 0;
                var nb = utf8CheckByte(buf[j]);
                if (nb >= 0) {
                    if (nb > 0) self.lastNeed = nb - 1;
                    return nb;
                }
                if (--j < i) return 0;
                nb = utf8CheckByte(buf[j]);
                if (nb >= 0) {
                    if (nb > 0) self.lastNeed = nb - 2;
                    return nb;
                }
                if (--j < i) return 0;
                nb = utf8CheckByte(buf[j]);
                if (nb >= 0) {
                    if (nb > 0) {
                        if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
                    }
                    return nb;
                }
                return 0;
            }

            // Validates as many continuation bytes for a multi-byte UTF-8 character as
            // needed or are available. If we see a non-continuation byte where we expect
            // one, we "replace" the validated continuation bytes we've seen so far with
            // UTF-8 replacement characters ('\ufffd'), to match v8's UTF-8 decoding
            // behavior. The continuation byte check is included three times in the case
            // where all of the continuation bytes for a character exist in the same buffer.
            // It is also done this way as a slight performance increase instead of using a
            // loop.
            function utf8CheckExtraBytes(self, buf, p) {
                if ((buf[0] & 0xC0) !== 0x80) {
                    self.lastNeed = 0;
                    return '\ufffd'.repeat(p);
                }
                if (self.lastNeed > 1 && buf.length > 1) {
                    if ((buf[1] & 0xC0) !== 0x80) {
                        self.lastNeed = 1;
                        return '\ufffd'.repeat(p + 1);
                    }
                    if (self.lastNeed > 2 && buf.length > 2) {
                        if ((buf[2] & 0xC0) !== 0x80) {
                            self.lastNeed = 2;
                            return '\ufffd'.repeat(p + 2);
                        }
                    }
                }
            }

            // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
            function utf8FillLast(buf) {
                var p = this.lastTotal - this.lastNeed;
                var r = utf8CheckExtraBytes(this, buf, p);
                if (r !== undefined) return r;
                if (this.lastNeed <= buf.length) {
                    buf.copy(this.lastChar, p, 0, this.lastNeed);
                    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
                }
                buf.copy(this.lastChar, p, 0, buf.length);
                this.lastNeed -= buf.length;
            }

            // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
            // partial character, the character's bytes are buffered until the required
            // number of bytes are available.
            function utf8Text(buf, i) {
                var total = utf8CheckIncomplete(this, buf, i);
                if (!this.lastNeed) return buf.toString('utf8', i);
                this.lastTotal = total;
                var end = buf.length - (total - this.lastNeed);
                buf.copy(this.lastChar, 0, end);
                return buf.toString('utf8', i, end);
            }

            // For UTF-8, a replacement character for each buffered byte of a (partial)
            // character needs to be added to the output.
            function utf8End(buf) {
                var r = buf && buf.length ? this.write(buf) : '';
                if (this.lastNeed) return r + '\ufffd'.repeat(this.lastTotal - this.lastNeed);
                return r;
            }

            // UTF-16LE typically needs two bytes per character, but even if we have an even
            // number of bytes available, we need to check if we end on a leading/high
            // surrogate. In that case, we need to wait for the next two bytes in order to
            // decode the last character properly.
            function utf16Text(buf, i) {
                if ((buf.length - i) % 2 === 0) {
                    var r = buf.toString('utf16le', i);
                    if (r) {
                        var c = r.charCodeAt(r.length - 1);
                        if (c >= 0xD800 && c <= 0xDBFF) {
                            this.lastNeed = 2;
                            this.lastTotal = 4;
                            this.lastChar[0] = buf[buf.length - 2];
                            this.lastChar[1] = buf[buf.length - 1];
                            return r.slice(0, -1);
                        }
                    }
                    return r;
                }
                this.lastNeed = 1;
                this.lastTotal = 2;
                this.lastChar[0] = buf[buf.length - 1];
                return buf.toString('utf16le', i, buf.length - 1);
            }

            // For UTF-16LE we do not explicitly append special replacement characters if we
            // end on a partial character, we simply let v8 handle that.
            function utf16End(buf) {
                var r = buf && buf.length ? this.write(buf) : '';
                if (this.lastNeed) {
                    var end = this.lastTotal - this.lastNeed;
                    return r + this.lastChar.toString('utf16le', 0, end);
                }
                return r;
            }

            function base64Text(buf, i) {
                var n = (buf.length - i) % 3;
                if (n === 0) return buf.toString('base64', i);
                this.lastNeed = 3 - n;
                this.lastTotal = 3;
                if (n === 1) {
                    this.lastChar[0] = buf[buf.length - 1];
                } else {
                    this.lastChar[0] = buf[buf.length - 2];
                    this.lastChar[1] = buf[buf.length - 1];
                }
                return buf.toString('base64', i, buf.length - n);
            }

            function base64End(buf) {
                var r = buf && buf.length ? this.write(buf) : '';
                if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
                return r;
            }

            // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
            function simpleWrite(buf) {
                return buf.toString(this.encoding);
            }

            function simpleEnd(buf) {
                return buf && buf.length ? this.write(buf) : '';
            }

            /***/ }),
        /* 50 */
        /***/ (function(module, exports, __webpack_require__) {

            // Copyright Joyent, Inc. and other Node contributors.
            //
            // Permission is hereby granted, free of charge, to any person obtaining a
            // copy of this software and associated documentation files (the
            // "Software"), to deal in the Software without restriction, including
            // without limitation the rights to use, copy, modify, merge, publish,
            // distribute, sublicense, and/or sell copies of the Software, and to permit
            // persons to whom the Software is furnished to do so, subject to the
            // following conditions:
            //
            // The above copyright notice and this permission notice shall be included
            // in all copies or substantial portions of the Software.
            //
            // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
            // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
            // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
            // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
            // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
            // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
            // USE OR OTHER DEALINGS IN THE SOFTWARE.

            // a transform stream is a readable/writable stream where you do
            // something with the data.  Sometimes it's called a "filter",
            // but that's not a great name for it, since that implies a thing where
            // some bits pass through, and others are simply ignored.  (That would
            // be a valid example of a transform, of course.)
            //
            // While the output is causally related to the input, it's not a
            // necessarily symmetric or synchronous transformation.  For example,
            // a zlib stream might take multiple plain-text writes(), and then
            // emit a single compressed chunk some time in the future.
            //
            // Here's how this works:
            //
            // The Transform stream has all the aspects of the readable and writable
            // stream classes.  When you write(chunk), that calls _write(chunk,cb)
            // internally, and returns false if there's a lot of pending writes
            // buffered up.  When you call read(), that calls _read(n) until
            // there's enough pending readable data buffered up.
            //
            // In a transform stream, the written data is placed in a buffer.  When
            // _read(n) is called, it transforms the queued up data, calling the
            // buffered _write cb's as it consumes chunks.  If consuming a single
            // written chunk would result in multiple output chunks, then the first
            // outputted bit calls the readcb, and subsequent chunks just go into
            // the read buffer, and will cause it to emit 'readable' if necessary.
            //
            // This way, back-pressure is actually determined by the reading side,
            // since _read has to be called to start processing a new chunk.  However,
            // a pathological inflate type of transform can cause excessive buffering
            // here.  For example, imagine a stream where every byte of input is
            // interpreted as an integer from 0-255, and then results in that many
            // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
            // 1kb of data being output.  In this case, you could write a very small
            // amount of input, and end up with a very large amount of output.  In
            // such a pathological inflating mechanism, there'd be no way to tell
            // the system to stop doing the transform.  A single 4MB write could
            // cause the system to run out of memory.
            //
            // However, even in such a pathological case, only a single written chunk
            // would be consumed, and then the rest would wait (un-transformed) until
            // the results of the previous transformed chunk were consumed.

            'use strict';

            module.exports = Transform;

            var Duplex = __webpack_require__(44);

            /*<replacement>*/
            var util = __webpack_require__(40);
            util.inherits = __webpack_require__(33);
            /*</replacement>*/

            util.inherits(Transform, Duplex);

            function TransformState(stream) {
                this.afterTransform = function (er, data) {
                    return afterTransform(stream, er, data);
                };

                this.needTransform = false;
                this.transforming = false;
                this.writecb = null;
                this.writechunk = null;
                this.writeencoding = null;
            }

            function afterTransform(stream, er, data) {
                var ts = stream._transformState;
                ts.transforming = false;

                var cb = ts.writecb;

                if (!cb) {
                    return stream.emit('error', new Error('write callback called multiple times'));
                }

                ts.writechunk = null;
                ts.writecb = null;

                if (data !== null && data !== undefined) stream.push(data);

                cb(er);

                var rs = stream._readableState;
                rs.reading = false;
                if (rs.needReadable || rs.length < rs.highWaterMark) {
                    stream._read(rs.highWaterMark);
                }
            }

            function Transform(options) {
                if (!(this instanceof Transform)) return new Transform(options);

                Duplex.call(this, options);

                this._transformState = new TransformState(this);

                var stream = this;

                // start out asking for a readable event once data is transformed.
                this._readableState.needReadable = true;

                // we have implemented the _read method, and done the other things
                // that Readable wants before the first _read call, so unset the
                // sync guard flag.
                this._readableState.sync = false;

                if (options) {
                    if (typeof options.transform === 'function') this._transform = options.transform;

                    if (typeof options.flush === 'function') this._flush = options.flush;
                }

                // When the writable side finishes, then flush out anything remaining.
                this.once('prefinish', function () {
                    if (typeof this._flush === 'function') this._flush(function (er, data) {
                        done(stream, er, data);
                    });else done(stream);
                });
            }

            Transform.prototype.push = function (chunk, encoding) {
                this._transformState.needTransform = false;
                return Duplex.prototype.push.call(this, chunk, encoding);
            };

            // This is the part where you do stuff!
            // override this function in implementation classes.
            // 'chunk' is an input chunk.
            //
            // Call `push(newChunk)` to pass along transformed output
            // to the readable side.  You may call 'push' zero or more times.
            //
            // Call `cb(err)` when you are done with this chunk.  If you pass
            // an error, then that'll put the hurt on the whole operation.  If you
            // never call cb(), then you'll never get another chunk.
            Transform.prototype._transform = function (chunk, encoding, cb) {
                throw new Error('_transform() is not implemented');
            };

            Transform.prototype._write = function (chunk, encoding, cb) {
                var ts = this._transformState;
                ts.writecb = cb;
                ts.writechunk = chunk;
                ts.writeencoding = encoding;
                if (!ts.transforming) {
                    var rs = this._readableState;
                    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
                }
            };

            // Doesn't matter what the args are here.
            // _transform does all the work.
            // That we got here means that the readable side wants more data.
            Transform.prototype._read = function (n) {
                var ts = this._transformState;

                if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
                    ts.transforming = true;
                    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
                } else {
                    // mark that we need a transform, so that any data that comes in
                    // will get processed, now that we've asked for it.
                    ts.needTransform = true;
                }
            };

            Transform.prototype._destroy = function (err, cb) {
                var _this = this;

                Duplex.prototype._destroy.call(this, err, function (err2) {
                    cb(err2);
                    _this.emit('close');
                });
            };

            function done(stream, er, data) {
                if (er) return stream.emit('error', er);

                if (data !== null && data !== undefined) stream.push(data);

                // if there's nothing in the write buffer, then that means
                // that nothing more will ever be provided
                var ws = stream._writableState;
                var ts = stream._transformState;

                if (ws.length) throw new Error('Calling transform done when ws.length != 0');

                if (ts.transforming) throw new Error('Calling transform done when still transforming');

                return stream.push(null);
            }

            /***/ }),
        /* 51 */
        /***/ (function(module, exports, __webpack_require__) {

            // Copyright Joyent, Inc. and other Node contributors.
            //
            // Permission is hereby granted, free of charge, to any person obtaining a
            // copy of this software and associated documentation files (the
            // "Software"), to deal in the Software without restriction, including
            // without limitation the rights to use, copy, modify, merge, publish,
            // distribute, sublicense, and/or sell copies of the Software, and to permit
            // persons to whom the Software is furnished to do so, subject to the
            // following conditions:
            //
            // The above copyright notice and this permission notice shall be included
            // in all copies or substantial portions of the Software.
            //
            // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
            // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
            // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
            // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
            // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
            // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
            // USE OR OTHER DEALINGS IN THE SOFTWARE.

            // a passthrough stream.
            // basically just the most minimal sort of Transform stream.
            // Every written chunk gets output as-is.

            'use strict';

            module.exports = PassThrough;

            var Transform = __webpack_require__(50);

            /*<replacement>*/
            var util = __webpack_require__(40);
            util.inherits = __webpack_require__(33);
            /*</replacement>*/

            util.inherits(PassThrough, Transform);

            function PassThrough(options) {
                if (!(this instanceof PassThrough)) return new PassThrough(options);

                Transform.call(this, options);
            }

            PassThrough.prototype._transform = function (chunk, encoding, cb) {
                cb(null, chunk);
            };

            /***/ }),
        /* 52 */
        /***/ (function(module, exports, __webpack_require__) {

            module.exports = __webpack_require__(45);


            /***/ }),
        /* 53 */
        /***/ (function(module, exports, __webpack_require__) {

            module.exports = __webpack_require__(44);


            /***/ }),
        /* 54 */
        /***/ (function(module, exports, __webpack_require__) {

            module.exports = __webpack_require__(34).Transform


            /***/ }),
        /* 55 */
        /***/ (function(module, exports, __webpack_require__) {

            module.exports = __webpack_require__(34).PassThrough


            /***/ }),
        /* 56 */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(Buffer, __dirname) {/* jslint node: true */
                'use strict';

                function VirtualFileSystem() {
                    this.fileSystem = {};
                    this.baseSystem = {};
                }

                VirtualFileSystem.prototype.readFileSync = function (filename) {
                    filename = fixFilename(filename);

                    var base64content = this.baseSystem[filename];
                    if (base64content) {
                        return new Buffer(base64content, 'base64');
                    }

                    var content = this.fileSystem[filename];
                    if (content) {
                        return content;
                    }

                    throw 'File \'' + filename + '\' not found in virtual file system';
                };

                VirtualFileSystem.prototype.writeFileSync = function (filename, content) {
                    this.fileSystem[fixFilename(filename)] = content;
                };

                VirtualFileSystem.prototype.bindFS = function (data) {
                    this.baseSystem = data || {};
                };


                function fixFilename(filename) {
                    if (filename.indexOf(__dirname) === 0) {
                        filename = filename.substring(__dirname.length);
                    }

                    if (filename.indexOf('/') === 0) {
                        filename = filename.substring(1);
                    }

                    return filename;
                }

                module.exports = new VirtualFileSystem();

                /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer, "/"))

            /***/ }),
        /* 57 */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(Buffer) {// Generated by CoffeeScript 1.12.6

                /*
                 PDFObject - converts JavaScript types into their corrisponding PDF types.
                 By Devon Govett
                 */

                (function() {
                    var PDFObject, PDFReference;

                    PDFObject = (function() {
                        var escapable, escapableRe, pad, swapBytes;

                        function PDFObject() {}

                        pad = function(str, length) {
                            return (Array(length + 1).join('0') + str).slice(-length);
                        };

                        escapableRe = /[\n\r\t\b\f\(\)\\]/g;

                        escapable = {
                            '\n': '\\n',
                            '\r': '\\r',
                            '\t': '\\t',
                            '\b': '\\b',
                            '\f': '\\f',
                            '\\': '\\\\',
                            '(': '\\(',
                            ')': '\\)'
                        };

                        swapBytes = function(buff) {
                            var a, i, j, l, ref;
                            l = buff.length;
                            if (l & 0x01) {
                                throw new Error("Buffer length must be even");
                            } else {
                                for (i = j = 0, ref = l - 1; j < ref; i = j += 2) {
                                    a = buff[i];
                                    buff[i] = buff[i + 1];
                                    buff[i + 1] = a;
                                }
                            }
                            return buff;
                        };

                        PDFObject.convert = function(object) {
                            var e, i, isUnicode, items, j, key, out, ref, string, val;
                            if (typeof object === 'string') {
                                return '/' + object;
                            } else if (object instanceof String) {
                                string = object;
                                isUnicode = false;
                                for (i = j = 0, ref = string.length; j < ref; i = j += 1) {
                                    if (string.charCodeAt(i) > 0x7f) {
                                        isUnicode = true;
                                        break;
                                    }
                                }
                                if (isUnicode) {
                                    string = swapBytes(new Buffer('\ufeff' + string, 'utf16le')).toString('binary');
                                }
                                string = string.replace(escapableRe, function(c) {
                                    return escapable[c];
                                });
                                return '(' + string + ')';
                            } else if (Buffer.isBuffer(object)) {
                                return '<' + object.toString('hex') + '>';
                            } else if (object instanceof PDFReference) {
                                return object.toString();
                            } else if (object instanceof Date) {
                                return '(D:' + pad(object.getUTCFullYear(), 4) + pad(object.getUTCMonth() + 1, 2) + pad(object.getUTCDate(), 2) + pad(object.getUTCHours(), 2) + pad(object.getUTCMinutes(), 2) + pad(object.getUTCSeconds(), 2) + 'Z)';
                            } else if (Array.isArray(object)) {
                                items = ((function() {
                                    var k, len, results;
                                    results = [];
                                    for (k = 0, len = object.length; k < len; k++) {
                                        e = object[k];
                                        results.push(PDFObject.convert(e));
                                    }
                                    return results;
                                })()).join(' ');
                                return '[' + items + ']';
                            } else if ({}.toString.call(object) === '[object Object]') {
                                out = ['<<'];
                                for (key in object) {
                                    val = object[key];
                                    out.push('/' + key + ' ' + PDFObject.convert(val));
                                }
                                out.push('>>');
                                return out.join('\n');
                            } else if (typeof object === 'number') {
                                return PDFObject.number(object);
                            } else {
                                return '' + object;
                            }
                        };

                        PDFObject.number = function(n) {
                            if (n > -1e21 && n < 1e21) {
                                return Math.round(n * 1e6) / 1e6;
                            }
                            throw new Error("unsupported number: " + n);
                        };

                        return PDFObject;

                    })();

                    module.exports = PDFObject;

                    PDFReference = __webpack_require__(58);

                }).call(this);

                /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))

            /***/ }),
        /* 58 */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(Buffer) {// Generated by CoffeeScript 1.12.6

                /*
                 PDFReference - represents a reference to another object in the PDF object heirarchy
                 By Devon Govett
                 */

                (function() {
                    var PDFObject, PDFReference, stream, zlib,
                        bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
                        extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
                        hasProp = {}.hasOwnProperty;

                    zlib = __webpack_require__(59);

                    stream = __webpack_require__(31);

                    PDFReference = (function(superClass) {
                        extend(PDFReference, superClass);

                        function PDFReference(document, id, data) {
                            this.document = document;
                            this.id = id;
                            this.data = data != null ? data : {};
                            this.finalize = bind(this.finalize, this);
                            PDFReference.__super__.constructor.call(this, {
                                decodeStrings: false
                            });
                            this.gen = 0;
                            this.deflate = null;
                            this.compress = this.document.compress && !this.data.Filter;
                            this.uncompressedLength = 0;
                            this.chunks = [];
                        }

                        PDFReference.prototype.initDeflate = function() {
                            this.data.Filter = 'FlateDecode';
                            this.deflate = zlib.createDeflate();
                            this.deflate.on('data', (function(_this) {
                                return function(chunk) {
                                    _this.chunks.push(chunk);
                                    return _this.data.Length += chunk.length;
                                };
                            })(this));
                            return this.deflate.on('end', this.finalize);
                        };

                        PDFReference.prototype._write = function(chunk, encoding, callback) {
                            var base;
                            if (!Buffer.isBuffer(chunk)) {
                                chunk = new Buffer(chunk + '\n', 'binary');
                            }
                            this.uncompressedLength += chunk.length;
                            if ((base = this.data).Length == null) {
                                base.Length = 0;
                            }
                            if (this.compress) {
                                if (!this.deflate) {
                                    this.initDeflate();
                                }
                                this.deflate.write(chunk);
                            } else {
                                this.chunks.push(chunk);
                                this.data.Length += chunk.length;
                            }
                            return callback();
                        };

                        PDFReference.prototype.end = function(chunk) {
                            PDFReference.__super__.end.apply(this, arguments);
                            if (this.deflate) {
                                return this.deflate.end();
                            } else {
                                return this.finalize();
                            }
                        };

                        PDFReference.prototype.finalize = function() {
                            var chunk, i, len, ref;
                            this.offset = this.document._offset;
                            this.document._write(this.id + " " + this.gen + " obj");
                            this.document._write(PDFObject.convert(this.data));
                            if (this.chunks.length) {
                                this.document._write('stream');
                                ref = this.chunks;
                                for (i = 0, len = ref.length; i < len; i++) {
                                    chunk = ref[i];
                                    this.document._write(chunk);
                                }
                                this.chunks.length = 0;
                                this.document._write('\nendstream');
                            }
                            this.document._write('endobj');
                            return this.document._refEnd(this);
                        };

                        PDFReference.prototype.toString = function() {
                            return this.id + " " + this.gen + " R";
                        };

                        return PDFReference;

                    })(stream.Writable);

                    module.exports = PDFReference;

                    PDFObject = __webpack_require__(57);

                }).call(this);

                /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))

            /***/ }),
        /* 59 */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(Buffer, process) {// Copyright Joyent, Inc. and other Node contributors.
                //
                // Permission is hereby granted, free of charge, to any person obtaining a
                // copy of this software and associated documentation files (the
                // "Software"), to deal in the Software without restriction, including
                // without limitation the rights to use, copy, modify, merge, publish,
                // distribute, sublicense, and/or sell copies of the Software, and to permit
                // persons to whom the Software is furnished to do so, subject to the
                // following conditions:
                //
                // The above copyright notice and this permission notice shall be included
                // in all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                // USE OR OTHER DEALINGS IN THE SOFTWARE.

                var Transform = __webpack_require__(54);

                var binding = __webpack_require__(60);
                var util = __webpack_require__(72);
                var assert = __webpack_require__(75).ok;

                // zlib doesn't provide these, so kludge them in following the same
                // const naming scheme zlib uses.
                binding.Z_MIN_WINDOWBITS = 8;
                binding.Z_MAX_WINDOWBITS = 15;
                binding.Z_DEFAULT_WINDOWBITS = 15;

                // fewer than 64 bytes per chunk is stupid.
                // technically it could work with as few as 8, but even 64 bytes
                // is absurdly low.  Usually a MB or more is best.
                binding.Z_MIN_CHUNK = 64;
                binding.Z_MAX_CHUNK = Infinity;
                binding.Z_DEFAULT_CHUNK = (16 * 1024);

                binding.Z_MIN_MEMLEVEL = 1;
                binding.Z_MAX_MEMLEVEL = 9;
                binding.Z_DEFAULT_MEMLEVEL = 8;

                binding.Z_MIN_LEVEL = -1;
                binding.Z_MAX_LEVEL = 9;
                binding.Z_DEFAULT_LEVEL = binding.Z_DEFAULT_COMPRESSION;

                // expose all the zlib constants
                Object.keys(binding).forEach(function(k) {
                    if (k.match(/^Z/)) exports[k] = binding[k];
                });

                // translation table for return codes.
                exports.codes = {
                    Z_OK: binding.Z_OK,
                    Z_STREAM_END: binding.Z_STREAM_END,
                    Z_NEED_DICT: binding.Z_NEED_DICT,
                    Z_ERRNO: binding.Z_ERRNO,
                    Z_STREAM_ERROR: binding.Z_STREAM_ERROR,
                    Z_DATA_ERROR: binding.Z_DATA_ERROR,
                    Z_MEM_ERROR: binding.Z_MEM_ERROR,
                    Z_BUF_ERROR: binding.Z_BUF_ERROR,
                    Z_VERSION_ERROR: binding.Z_VERSION_ERROR
                };

                Object.keys(exports.codes).forEach(function(k) {
                    exports.codes[exports.codes[k]] = k;
                });

                exports.Deflate = Deflate;
                exports.Inflate = Inflate;
                exports.Gzip = Gzip;
                exports.Gunzip = Gunzip;
                exports.DeflateRaw = DeflateRaw;
                exports.InflateRaw = InflateRaw;
                exports.Unzip = Unzip;

                exports.createDeflate = function(o) {
                    return new Deflate(o);
                };

                exports.createInflate = function(o) {
                    return new Inflate(o);
                };

                exports.createDeflateRaw = function(o) {
                    return new DeflateRaw(o);
                };

                exports.createInflateRaw = function(o) {
                    return new InflateRaw(o);
                };

                exports.createGzip = function(o) {
                    return new Gzip(o);
                };

                exports.createGunzip = function(o) {
                    return new Gunzip(o);
                };

                exports.createUnzip = function(o) {
                    return new Unzip(o);
                };


                // Convenience methods.
                // compress/decompress a string or buffer in one step.
                exports.deflate = function(buffer, opts, callback) {
                    if (typeof opts === 'function') {
                        callback = opts;
                        opts = {};
                    }
                    return zlibBuffer(new Deflate(opts), buffer, callback);
                };

                exports.deflateSync = function(buffer, opts) {
                    return zlibBufferSync(new Deflate(opts), buffer);
                };

                exports.gzip = function(buffer, opts, callback) {
                    if (typeof opts === 'function') {
                        callback = opts;
                        opts = {};
                    }
                    return zlibBuffer(new Gzip(opts), buffer, callback);
                };

                exports.gzipSync = function(buffer, opts) {
                    return zlibBufferSync(new Gzip(opts), buffer);
                };

                exports.deflateRaw = function(buffer, opts, callback) {
                    if (typeof opts === 'function') {
                        callback = opts;
                        opts = {};
                    }
                    return zlibBuffer(new DeflateRaw(opts), buffer, callback);
                };

                exports.deflateRawSync = function(buffer, opts) {
                    return zlibBufferSync(new DeflateRaw(opts), buffer);
                };

                exports.unzip = function(buffer, opts, callback) {
                    if (typeof opts === 'function') {
                        callback = opts;
                        opts = {};
                    }
                    return zlibBuffer(new Unzip(opts), buffer, callback);
                };

                exports.unzipSync = function(buffer, opts) {
                    return zlibBufferSync(new Unzip(opts), buffer);
                };

                exports.inflate = function(buffer, opts, callback) {
                    if (typeof opts === 'function') {
                        callback = opts;
                        opts = {};
                    }
                    return zlibBuffer(new Inflate(opts), buffer, callback);
                };

                exports.inflateSync = function(buffer, opts) {
                    return zlibBufferSync(new Inflate(opts), buffer);
                };

                exports.gunzip = function(buffer, opts, callback) {
                    if (typeof opts === 'function') {
                        callback = opts;
                        opts = {};
                    }
                    return zlibBuffer(new Gunzip(opts), buffer, callback);
                };

                exports.gunzipSync = function(buffer, opts) {
                    return zlibBufferSync(new Gunzip(opts), buffer);
                };

                exports.inflateRaw = function(buffer, opts, callback) {
                    if (typeof opts === 'function') {
                        callback = opts;
                        opts = {};
                    }
                    return zlibBuffer(new InflateRaw(opts), buffer, callback);
                };

                exports.inflateRawSync = function(buffer, opts) {
                    return zlibBufferSync(new InflateRaw(opts), buffer);
                };

                function zlibBuffer(engine, buffer, callback) {
                    var buffers = [];
                    var nread = 0;

                    engine.on('error', onError);
                    engine.on('end', onEnd);

                    engine.end(buffer);
                    flow();

                    function flow() {
                        var chunk;
                        while (null !== (chunk = engine.read())) {
                            buffers.push(chunk);
                            nread += chunk.length;
                        }
                        engine.once('readable', flow);
                    }

                    function onError(err) {
                        engine.removeListener('end', onEnd);
                        engine.removeListener('readable', flow);
                        callback(err);
                    }

                    function onEnd() {
                        var buf = Buffer.concat(buffers, nread);
                        buffers = [];
                        callback(null, buf);
                        engine.close();
                    }
                }

                function zlibBufferSync(engine, buffer) {
                    if (typeof buffer === 'string')
                        buffer = new Buffer(buffer);
                    if (!Buffer.isBuffer(buffer))
                        throw new TypeError('Not a string or buffer');

                    var flushFlag = binding.Z_FINISH;

                    return engine._processChunk(buffer, flushFlag);
                }

                // generic zlib
                // minimal 2-byte header
                function Deflate(opts) {
                    if (!(this instanceof Deflate)) return new Deflate(opts);
                    Zlib.call(this, opts, binding.DEFLATE);
                }

                function Inflate(opts) {
                    if (!(this instanceof Inflate)) return new Inflate(opts);
                    Zlib.call(this, opts, binding.INFLATE);
                }



                // gzip - bigger header, same deflate compression
                function Gzip(opts) {
                    if (!(this instanceof Gzip)) return new Gzip(opts);
                    Zlib.call(this, opts, binding.GZIP);
                }

                function Gunzip(opts) {
                    if (!(this instanceof Gunzip)) return new Gunzip(opts);
                    Zlib.call(this, opts, binding.GUNZIP);
                }



                // raw - no header
                function DeflateRaw(opts) {
                    if (!(this instanceof DeflateRaw)) return new DeflateRaw(opts);
                    Zlib.call(this, opts, binding.DEFLATERAW);
                }

                function InflateRaw(opts) {
                    if (!(this instanceof InflateRaw)) return new InflateRaw(opts);
                    Zlib.call(this, opts, binding.INFLATERAW);
                }


                // auto-detect header.
                function Unzip(opts) {
                    if (!(this instanceof Unzip)) return new Unzip(opts);
                    Zlib.call(this, opts, binding.UNZIP);
                }


                // the Zlib class they all inherit from
                // This thing manages the queue of requests, and returns
                // true or false if there is anything in the queue when
                // you call the .write() method.

                function Zlib(opts, mode) {
                    this._opts = opts = opts || {};
                    this._chunkSize = opts.chunkSize || exports.Z_DEFAULT_CHUNK;

                    Transform.call(this, opts);

                    if (opts.flush) {
                        if (opts.flush !== binding.Z_NO_FLUSH &&
                            opts.flush !== binding.Z_PARTIAL_FLUSH &&
                            opts.flush !== binding.Z_SYNC_FLUSH &&
                            opts.flush !== binding.Z_FULL_FLUSH &&
                            opts.flush !== binding.Z_FINISH &&
                            opts.flush !== binding.Z_BLOCK) {
                            throw new Error('Invalid flush flag: ' + opts.flush);
                        }
                    }
                    this._flushFlag = opts.flush || binding.Z_NO_FLUSH;

                    if (opts.chunkSize) {
                        if (opts.chunkSize < exports.Z_MIN_CHUNK ||
                            opts.chunkSize > exports.Z_MAX_CHUNK) {
                            throw new Error('Invalid chunk size: ' + opts.chunkSize);
                        }
                    }

                    if (opts.windowBits) {
                        if (opts.windowBits < exports.Z_MIN_WINDOWBITS ||
                            opts.windowBits > exports.Z_MAX_WINDOWBITS) {
                            throw new Error('Invalid windowBits: ' + opts.windowBits);
                        }
                    }

                    if (opts.level) {
                        if (opts.level < exports.Z_MIN_LEVEL ||
                            opts.level > exports.Z_MAX_LEVEL) {
                            throw new Error('Invalid compression level: ' + opts.level);
                        }
                    }

                    if (opts.memLevel) {
                        if (opts.memLevel < exports.Z_MIN_MEMLEVEL ||
                            opts.memLevel > exports.Z_MAX_MEMLEVEL) {
                            throw new Error('Invalid memLevel: ' + opts.memLevel);
                        }
                    }

                    if (opts.strategy) {
                        if (opts.strategy != exports.Z_FILTERED &&
                            opts.strategy != exports.Z_HUFFMAN_ONLY &&
                            opts.strategy != exports.Z_RLE &&
                            opts.strategy != exports.Z_FIXED &&
                            opts.strategy != exports.Z_DEFAULT_STRATEGY) {
                            throw new Error('Invalid strategy: ' + opts.strategy);
                        }
                    }

                    if (opts.dictionary) {
                        if (!Buffer.isBuffer(opts.dictionary)) {
                            throw new Error('Invalid dictionary: it should be a Buffer instance');
                        }
                    }

                    this._binding = new binding.Zlib(mode);

                    var self = this;
                    this._hadError = false;
                    this._binding.onerror = function(message, errno) {
                        // there is no way to cleanly recover.
                        // continuing only obscures problems.
                        self._binding = null;
                        self._hadError = true;

                        var error = new Error(message);
                        error.errno = errno;
                        error.code = exports.codes[errno];
                        self.emit('error', error);
                    };

                    var level = exports.Z_DEFAULT_COMPRESSION;
                    if (typeof opts.level === 'number') level = opts.level;

                    var strategy = exports.Z_DEFAULT_STRATEGY;
                    if (typeof opts.strategy === 'number') strategy = opts.strategy;

                    this._binding.init(opts.windowBits || exports.Z_DEFAULT_WINDOWBITS,
                        level,
                        opts.memLevel || exports.Z_DEFAULT_MEMLEVEL,
                        strategy,
                        opts.dictionary);

                    this._buffer = new Buffer(this._chunkSize);
                    this._offset = 0;
                    this._closed = false;
                    this._level = level;
                    this._strategy = strategy;

                    this.once('end', this.close);
                }

                util.inherits(Zlib, Transform);

                Zlib.prototype.params = function(level, strategy, callback) {
                    if (level < exports.Z_MIN_LEVEL ||
                        level > exports.Z_MAX_LEVEL) {
                        throw new RangeError('Invalid compression level: ' + level);
                    }
                    if (strategy != exports.Z_FILTERED &&
                        strategy != exports.Z_HUFFMAN_ONLY &&
                        strategy != exports.Z_RLE &&
                        strategy != exports.Z_FIXED &&
                        strategy != exports.Z_DEFAULT_STRATEGY) {
                        throw new TypeError('Invalid strategy: ' + strategy);
                    }

                    if (this._level !== level || this._strategy !== strategy) {
                        var self = this;
                        this.flush(binding.Z_SYNC_FLUSH, function() {
                            self._binding.params(level, strategy);
                            if (!self._hadError) {
                                self._level = level;
                                self._strategy = strategy;
                                if (callback) callback();
                            }
                        });
                    } else {
                        process.nextTick(callback);
                    }
                };

                Zlib.prototype.reset = function() {
                    return this._binding.reset();
                };

                // This is the _flush function called by the transform class,
                // internally, when the last chunk has been written.
                Zlib.prototype._flush = function(callback) {
                    this._transform(new Buffer(0), '', callback);
                };

                Zlib.prototype.flush = function(kind, callback) {
                    var ws = this._writableState;

                    if (typeof kind === 'function' || (kind === void 0 && !callback)) {
                        callback = kind;
                        kind = binding.Z_FULL_FLUSH;
                    }

                    if (ws.ended) {
                        if (callback)
                            process.nextTick(callback);
                    } else if (ws.ending) {
                        if (callback)
                            this.once('end', callback);
                    } else if (ws.needDrain) {
                        var self = this;
                        this.once('drain', function() {
                            self.flush(callback);
                        });
                    } else {
                        this._flushFlag = kind;
                        this.write(new Buffer(0), '', callback);
                    }
                };

                Zlib.prototype.close = function(callback) {
                    if (callback)
                        process.nextTick(callback);

                    if (this._closed)
                        return;

                    this._closed = true;

                    this._binding.close();

                    var self = this;
                    process.nextTick(function() {
                        self.emit('close');
                    });
                };

                Zlib.prototype._transform = function(chunk, encoding, cb) {
                    var flushFlag;
                    var ws = this._writableState;
                    var ending = ws.ending || ws.ended;
                    var last = ending && (!chunk || ws.length === chunk.length);

                    if (!chunk === null && !Buffer.isBuffer(chunk))
                        return cb(new Error('invalid input'));

                    // If it's the last chunk, or a final flush, we use the Z_FINISH flush flag.
                    // If it's explicitly flushing at some other time, then we use
                    // Z_FULL_FLUSH. Otherwise, use Z_NO_FLUSH for maximum compression
                    // goodness.
                    if (last)
                        flushFlag = binding.Z_FINISH;
                    else {
                        flushFlag = this._flushFlag;
                        // once we've flushed the last of the queue, stop flushing and
                        // go back to the normal behavior.
                        if (chunk.length >= ws.length) {
                            this._flushFlag = this._opts.flush || binding.Z_NO_FLUSH;
                        }
                    }

                    var self = this;
                    this._processChunk(chunk, flushFlag, cb);
                };

                Zlib.prototype._processChunk = function(chunk, flushFlag, cb) {
                    var availInBefore = chunk && chunk.length;
                    var availOutBefore = this._chunkSize - this._offset;
                    var inOff = 0;

                    var self = this;

                    var async = typeof cb === 'function';

                    if (!async) {
                        var buffers = [];
                        var nread = 0;

                        var error;
                        this.on('error', function(er) {
                            error = er;
                        });

                        do {
                            var res = this._binding.writeSync(flushFlag,
                                chunk, // in
                                inOff, // in_off
                                availInBefore, // in_len
                                this._buffer, // out
                                this._offset, //out_off
                                availOutBefore); // out_len
                        } while (!this._hadError && callback(res[0], res[1]));

                        if (this._hadError) {
                            throw error;
                        }

                        var buf = Buffer.concat(buffers, nread);
                        this.close();

                        return buf;
                    }

                    var req = this._binding.write(flushFlag,
                        chunk, // in
                        inOff, // in_off
                        availInBefore, // in_len
                        this._buffer, // out
                        this._offset, //out_off
                        availOutBefore); // out_len

                    req.buffer = chunk;
                    req.callback = callback;

                    function callback(availInAfter, availOutAfter) {
                        if (self._hadError)
                            return;

                        var have = availOutBefore - availOutAfter;
                        assert(have >= 0, 'have should not go down');

                        if (have > 0) {
                            var out = self._buffer.slice(self._offset, self._offset + have);
                            self._offset += have;
                            // serve some output to the consumer.
                            if (async) {
                                self.push(out);
                            } else {
                                buffers.push(out);
                                nread += out.length;
                            }
                        }

                        // exhausted the output buffer, or used all the input create a new one.
                        if (availOutAfter === 0 || self._offset >= self._chunkSize) {
                            availOutBefore = self._chunkSize;
                            self._offset = 0;
                            self._buffer = new Buffer(self._chunkSize);
                        }

                        if (availOutAfter === 0) {
                            // Not actually done.  Need to reprocess.
                            // Also, update the availInBefore to the availInAfter value,
                            // so that if we have to hit it a third (fourth, etc.) time,
                            // it'll have the correct byte counts.
                            inOff += (availInBefore - availInAfter);
                            availInBefore = availInAfter;

                            if (!async)
                                return true;

                            var newReq = self._binding.write(flushFlag,
                                chunk,
                                inOff,
                                availInBefore,
                                self._buffer,
                                self._offset,
                                self._chunkSize);
                            newReq.callback = callback; // this same function
                            newReq.buffer = chunk;
                            return;
                        }

                        if (!async)
                            return false;

                        // finished with the chunk.
                        cb();
                    }
                };

                util.inherits(Deflate, Zlib);
                util.inherits(Inflate, Zlib);
                util.inherits(Gzip, Zlib);
                util.inherits(Gunzip, Zlib);
                util.inherits(DeflateRaw, Zlib);
                util.inherits(InflateRaw, Zlib);
                util.inherits(Unzip, Zlib);

                /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer, __webpack_require__(36)))

            /***/ }),
        /* 60 */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(process, Buffer) {var msg = __webpack_require__(61);
                var zstream = __webpack_require__(62);
                var zlib_deflate = __webpack_require__(63);
                var zlib_inflate = __webpack_require__(68);
                var constants = __webpack_require__(71);

                for (var key in constants) {
                    exports[key] = constants[key];
                }

                // zlib modes
                exports.NONE = 0;
                exports.DEFLATE = 1;
                exports.INFLATE = 2;
                exports.GZIP = 3;
                exports.GUNZIP = 4;
                exports.DEFLATERAW = 5;
                exports.INFLATERAW = 6;
                exports.UNZIP = 7;

                /**
                 * Emulate Node's zlib C++ layer for use by the JS layer in index.js
                 */
                function Zlib(mode) {
                    if (mode < exports.DEFLATE || mode > exports.UNZIP)
                        throw new TypeError("Bad argument");

                    this.mode = mode;
                    this.init_done = false;
                    this.write_in_progress = false;
                    this.pending_close = false;
                    this.windowBits = 0;
                    this.level = 0;
                    this.memLevel = 0;
                    this.strategy = 0;
                    this.dictionary = null;
                }

                Zlib.prototype.init = function(windowBits, level, memLevel, strategy, dictionary) {
                    this.windowBits = windowBits;
                    this.level = level;
                    this.memLevel = memLevel;
                    this.strategy = strategy;
                    // dictionary not supported.

                    if (this.mode === exports.GZIP || this.mode === exports.GUNZIP)
                        this.windowBits += 16;

                    if (this.mode === exports.UNZIP)
                        this.windowBits += 32;

                    if (this.mode === exports.DEFLATERAW || this.mode === exports.INFLATERAW)
                        this.windowBits = -this.windowBits;

                    this.strm = new zstream();

                    switch (this.mode) {
                        case exports.DEFLATE:
                        case exports.GZIP:
                        case exports.DEFLATERAW:
                            var status = zlib_deflate.deflateInit2(
                                this.strm,
                                this.level,
                                exports.Z_DEFLATED,
                                this.windowBits,
                                this.memLevel,
                                this.strategy
                            );
                            break;
                        case exports.INFLATE:
                        case exports.GUNZIP:
                        case exports.INFLATERAW:
                        case exports.UNZIP:
                            var status  = zlib_inflate.inflateInit2(
                                this.strm,
                                this.windowBits
                            );
                            break;
                        default:
                            throw new Error("Unknown mode " + this.mode);
                    }

                    if (status !== exports.Z_OK) {
                        this._error(status);
                        return;
                    }

                    this.write_in_progress = false;
                    this.init_done = true;
                };

                Zlib.prototype.params = function() {
                    throw new Error("deflateParams Not supported");
                };

                Zlib.prototype._writeCheck = function() {
                    if (!this.init_done)
                        throw new Error("write before init");

                    if (this.mode === exports.NONE)
                        throw new Error("already finalized");

                    if (this.write_in_progress)
                        throw new Error("write already in progress");

                    if (this.pending_close)
                        throw new Error("close is pending");
                };

                Zlib.prototype.write = function(flush, input, in_off, in_len, out, out_off, out_len) {
                    this._writeCheck();
                    this.write_in_progress = true;

                    var self = this;
                    process.nextTick(function() {
                        self.write_in_progress = false;
                        var res = self._write(flush, input, in_off, in_len, out, out_off, out_len);
                        self.callback(res[0], res[1]);

                        if (self.pending_close)
                            self.close();
                    });

                    return this;
                };

                // set method for Node buffers, used by pako
                function bufferSet(data, offset) {
                    for (var i = 0; i < data.length; i++) {
                        this[offset + i] = data[i];
                    }
                }

                Zlib.prototype.writeSync = function(flush, input, in_off, in_len, out, out_off, out_len) {
                    this._writeCheck();
                    return this._write(flush, input, in_off, in_len, out, out_off, out_len);
                };

                Zlib.prototype._write = function(flush, input, in_off, in_len, out, out_off, out_len) {
                    this.write_in_progress = true;

                    if (flush !== exports.Z_NO_FLUSH &&
                        flush !== exports.Z_PARTIAL_FLUSH &&
                        flush !== exports.Z_SYNC_FLUSH &&
                        flush !== exports.Z_FULL_FLUSH &&
                        flush !== exports.Z_FINISH &&
                        flush !== exports.Z_BLOCK) {
                        throw new Error("Invalid flush value");
                    }

                    if (input == null) {
                        input = new Buffer(0);
                        in_len = 0;
                        in_off = 0;
                    }

                    if (out._set)
                        out.set = out._set;
                    else
                        out.set = bufferSet;

                    var strm = this.strm;
                    strm.avail_in = in_len;
                    strm.input = input;
                    strm.next_in = in_off;
                    strm.avail_out = out_len;
                    strm.output = out;
                    strm.next_out = out_off;

                    switch (this.mode) {
                        case exports.DEFLATE:
                        case exports.GZIP:
                        case exports.DEFLATERAW:
                            var status = zlib_deflate.deflate(strm, flush);
                            break;
                        case exports.UNZIP:
                        case exports.INFLATE:
                        case exports.GUNZIP:
                        case exports.INFLATERAW:
                            var status = zlib_inflate.inflate(strm, flush);
                            break;
                        default:
                            throw new Error("Unknown mode " + this.mode);
                    }

                    if (status !== exports.Z_STREAM_END && status !== exports.Z_OK) {
                        this._error(status);
                    }

                    this.write_in_progress = false;
                    return [strm.avail_in, strm.avail_out];
                };

                Zlib.prototype.close = function() {
                    if (this.write_in_progress) {
                        this.pending_close = true;
                        return;
                    }

                    this.pending_close = false;

                    if (this.mode === exports.DEFLATE || this.mode === exports.GZIP || this.mode === exports.DEFLATERAW) {
                        zlib_deflate.deflateEnd(this.strm);
                    } else {
                        zlib_inflate.inflateEnd(this.strm);
                    }

                    this.mode = exports.NONE;
                };

                Zlib.prototype.reset = function() {
                    switch (this.mode) {
                        case exports.DEFLATE:
                        case exports.DEFLATERAW:
                            var status = zlib_deflate.deflateReset(this.strm);
                            break;
                        case exports.INFLATE:
                        case exports.INFLATERAW:
                            var status = zlib_inflate.inflateReset(this.strm);
                            break;
                    }

                    if (status !== exports.Z_OK) {
                        this._error(status);
                    }
                };

                Zlib.prototype._error = function(status) {
                    this.onerror(msg[status] + ': ' + this.strm.msg, status);

                    this.write_in_progress = false;
                    if (this.pending_close)
                        this.close();
                };

                exports.Zlib = Zlib;

                /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(36), __webpack_require__(2).Buffer))

            /***/ }),
        /* 61 */
        /***/ (function(module, exports) {

            'use strict';

            module.exports = {
                2:      'need dictionary',     /* Z_NEED_DICT       2  */
                1:      'stream end',          /* Z_STREAM_END      1  */
                0:      '',                    /* Z_OK              0  */
                '-1':   'file error',          /* Z_ERRNO         (-1) */
                '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
                '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
                '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
                '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
                '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
            };


            /***/ }),
        /* 62 */
        /***/ (function(module, exports) {

            'use strict';


            function ZStream() {
                /* next input byte */
                this.input = null; // JS specific, because we have no pointers
                this.next_in = 0;
                /* number of bytes available at input */
                this.avail_in = 0;
                /* total number of input bytes read so far */
                this.total_in = 0;
                /* next output byte should be put there */
                this.output = null; // JS specific, because we have no pointers
                this.next_out = 0;
                /* remaining free space at output */
                this.avail_out = 0;
                /* total number of bytes output so far */
                this.total_out = 0;
                /* last error message, NULL if no error */
                this.msg = ''/*Z_NULL*/;
                /* not visible by applications */
                this.state = null;
                /* best guess about the data type: binary or text */
                this.data_type = 2/*Z_UNKNOWN*/;
                /* adler32 value of the uncompressed data */
                this.adler = 0;
            }

            module.exports = ZStream;


            /***/ }),
        /* 63 */
        /***/ (function(module, exports, __webpack_require__) {

            'use strict';

            var utils   = __webpack_require__(64);
            var trees   = __webpack_require__(65);
            var adler32 = __webpack_require__(66);
            var crc32   = __webpack_require__(67);
            var msg     = __webpack_require__(61);

            /* Public constants ==========================================================*/
            /* ===========================================================================*/


            /* Allowed flush values; see deflate() and inflate() below for details */
            var Z_NO_FLUSH      = 0;
            var Z_PARTIAL_FLUSH = 1;
            //var Z_SYNC_FLUSH    = 2;
            var Z_FULL_FLUSH    = 3;
            var Z_FINISH        = 4;
            var Z_BLOCK         = 5;
            //var Z_TREES         = 6;


            /* Return codes for the compression/decompression functions. Negative values
             * are errors, positive values are used for special but normal events.
             */
            var Z_OK            = 0;
            var Z_STREAM_END    = 1;
            //var Z_NEED_DICT     = 2;
            //var Z_ERRNO         = -1;
            var Z_STREAM_ERROR  = -2;
            var Z_DATA_ERROR    = -3;
            //var Z_MEM_ERROR     = -4;
            var Z_BUF_ERROR     = -5;
            //var Z_VERSION_ERROR = -6;


            /* compression levels */
            //var Z_NO_COMPRESSION      = 0;
            //var Z_BEST_SPEED          = 1;
            //var Z_BEST_COMPRESSION    = 9;
            var Z_DEFAULT_COMPRESSION = -1;


            var Z_FILTERED            = 1;
            var Z_HUFFMAN_ONLY        = 2;
            var Z_RLE                 = 3;
            var Z_FIXED               = 4;
            var Z_DEFAULT_STRATEGY    = 0;

            /* Possible values of the data_type field (though see inflate()) */
            //var Z_BINARY              = 0;
            //var Z_TEXT                = 1;
            //var Z_ASCII               = 1; // = Z_TEXT
            var Z_UNKNOWN             = 2;


            /* The deflate compression method */
            var Z_DEFLATED  = 8;

            /*============================================================================*/


            var MAX_MEM_LEVEL = 9;
            /* Maximum value for memLevel in deflateInit2 */
            var MAX_WBITS = 15;
            /* 32K LZ77 window */
            var DEF_MEM_LEVEL = 8;


            var LENGTH_CODES  = 29;
            /* number of length codes, not counting the special END_BLOCK code */
            var LITERALS      = 256;
            /* number of literal bytes 0..255 */
            var L_CODES       = LITERALS + 1 + LENGTH_CODES;
            /* number of Literal or Length codes, including the END_BLOCK code */
            var D_CODES       = 30;
            /* number of distance codes */
            var BL_CODES      = 19;
            /* number of codes used to transfer the bit lengths */
            var HEAP_SIZE     = 2 * L_CODES + 1;
            /* maximum heap size */
            var MAX_BITS  = 15;
            /* All codes must not exceed MAX_BITS bits */

            var MIN_MATCH = 3;
            var MAX_MATCH = 258;
            var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

            var PRESET_DICT = 0x20;

            var INIT_STATE = 42;
            var EXTRA_STATE = 69;
            var NAME_STATE = 73;
            var COMMENT_STATE = 91;
            var HCRC_STATE = 103;
            var BUSY_STATE = 113;
            var FINISH_STATE = 666;

            var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
            var BS_BLOCK_DONE     = 2; /* block flush performed */
            var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
            var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

            var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

            function err(strm, errorCode) {
                strm.msg = msg[errorCode];
                return errorCode;
            }

            function rank(f) {
                return ((f) << 1) - ((f) > 4 ? 9 : 0);
            }

            function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }


            /* =========================================================================
             * Flush as much pending output as possible. All deflate() output goes
             * through this function so some applications may wish to modify it
             * to avoid allocating a large strm->output buffer and copying into it.
             * (See also read_buf()).
             */
            function flush_pending(strm) {
                var s = strm.state;

                //_tr_flush_bits(s);
                var len = s.pending;
                if (len > strm.avail_out) {
                    len = strm.avail_out;
                }
                if (len === 0) { return; }

                utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
                strm.next_out += len;
                s.pending_out += len;
                strm.total_out += len;
                strm.avail_out -= len;
                s.pending -= len;
                if (s.pending === 0) {
                    s.pending_out = 0;
                }
            }


            function flush_block_only(s, last) {
                trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
                s.block_start = s.strstart;
                flush_pending(s.strm);
            }


            function put_byte(s, b) {
                s.pending_buf[s.pending++] = b;
            }


            /* =========================================================================
             * Put a short in the pending buffer. The 16-bit value is put in MSB order.
             * IN assertion: the stream state is correct and there is enough room in
             * pending_buf.
             */
            function putShortMSB(s, b) {
                //  put_byte(s, (Byte)(b >> 8));
                //  put_byte(s, (Byte)(b & 0xff));
                s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
                s.pending_buf[s.pending++] = b & 0xff;
            }


            /* ===========================================================================
             * Read a new buffer from the current input stream, update the adler32
             * and total number of bytes read.  All deflate() input goes through
             * this function so some applications may wish to modify it to avoid
             * allocating a large strm->input buffer and copying from it.
             * (See also flush_pending()).
             */
            function read_buf(strm, buf, start, size) {
                var len = strm.avail_in;

                if (len > size) { len = size; }
                if (len === 0) { return 0; }

                strm.avail_in -= len;

                // zmemcpy(buf, strm->next_in, len);
                utils.arraySet(buf, strm.input, strm.next_in, len, start);
                if (strm.state.wrap === 1) {
                    strm.adler = adler32(strm.adler, buf, len, start);
                }

                else if (strm.state.wrap === 2) {
                    strm.adler = crc32(strm.adler, buf, len, start);
                }

                strm.next_in += len;
                strm.total_in += len;

                return len;
            }


            /* ===========================================================================
             * Set match_start to the longest match starting at the given string and
             * return its length. Matches shorter or equal to prev_length are discarded,
             * in which case the result is equal to prev_length and match_start is
             * garbage.
             * IN assertions: cur_match is the head of the hash chain for the current
             *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
             * OUT assertion: the match length is not greater than s->lookahead.
             */
            function longest_match(s, cur_match) {
                var chain_length = s.max_chain_length;      /* max hash chain length */
                var scan = s.strstart; /* current string */
                var match;                       /* matched string */
                var len;                           /* length of current match */
                var best_len = s.prev_length;              /* best match length so far */
                var nice_match = s.nice_match;             /* stop if match long enough */
                var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
                s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

                var _win = s.window; // shortcut

                var wmask = s.w_mask;
                var prev  = s.prev;

                /* Stop when cur_match becomes <= limit. To simplify the code,
                 * we prevent matches with the string of window index 0.
                 */

                var strend = s.strstart + MAX_MATCH;
                var scan_end1  = _win[scan + best_len - 1];
                var scan_end   = _win[scan + best_len];

                /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
                 * It is easy to get rid of this optimization if necessary.
                 */
                // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

                /* Do not waste too much time if we already have a good match: */
                if (s.prev_length >= s.good_match) {
                    chain_length >>= 2;
                }
                /* Do not look for matches beyond the end of the input. This is necessary
                 * to make deflate deterministic.
                 */
                if (nice_match > s.lookahead) { nice_match = s.lookahead; }

                // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

                do {
                    // Assert(cur_match < s->strstart, "no future");
                    match = cur_match;

                    /* Skip to next match if the match length cannot increase
                     * or if the match length is less than 2.  Note that the checks below
                     * for insufficient lookahead only occur occasionally for performance
                     * reasons.  Therefore uninitialized memory will be accessed, and
                     * conditional jumps will be made that depend on those values.
                     * However the length of the match is limited to the lookahead, so
                     * the output of deflate is not affected by the uninitialized values.
                     */

                    if (_win[match + best_len]     !== scan_end  ||
                        _win[match + best_len - 1] !== scan_end1 ||
                        _win[match]                !== _win[scan] ||
                        _win[++match]              !== _win[scan + 1]) {
                        continue;
                    }

                    /* The check at best_len-1 can be removed because it will be made
                     * again later. (This heuristic is not always a win.)
                     * It is not necessary to compare scan[2] and match[2] since they
                     * are always equal when the other bytes match, given that
                     * the hash keys are equal and that HASH_BITS >= 8.
                     */
                    scan += 2;
                    match++;
                    // Assert(*scan == *match, "match[2]?");

                    /* We check for insufficient lookahead only every 8th comparison;
                     * the 256th check will be made at strstart+258.
                     */
                    do {
                        /*jshint noempty:false*/
                    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
                    _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
                    _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
                    _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
                    scan < strend);

                    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

                    len = MAX_MATCH - (strend - scan);
                    scan = strend - MAX_MATCH;

                    if (len > best_len) {
                        s.match_start = cur_match;
                        best_len = len;
                        if (len >= nice_match) {
                            break;
                        }
                        scan_end1  = _win[scan + best_len - 1];
                        scan_end   = _win[scan + best_len];
                    }
                } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

                if (best_len <= s.lookahead) {
                    return best_len;
                }
                return s.lookahead;
            }


            /* ===========================================================================
             * Fill the window when the lookahead becomes insufficient.
             * Updates strstart and lookahead.
             *
             * IN assertion: lookahead < MIN_LOOKAHEAD
             * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
             *    At least one byte has been read, or avail_in == 0; reads are
             *    performed for at least two bytes (required for the zip translate_eol
             *    option -- not supported here).
             */
            function fill_window(s) {
                var _w_size = s.w_size;
                var p, n, m, more, str;

                //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

                do {
                    more = s.window_size - s.lookahead - s.strstart;

                    // JS ints have 32 bit, block below not needed
                    /* Deal with !@#$% 64K limit: */
                    //if (sizeof(int) <= 2) {
                    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
                    //        more = wsize;
                    //
                    //  } else if (more == (unsigned)(-1)) {
                    //        /* Very unlikely, but possible on 16 bit machine if
                    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
                    //         */
                    //        more--;
                    //    }
                    //}


                    /* If the window is almost full and there is insufficient lookahead,
                     * move the upper half to the lower one to make room in the upper half.
                     */
                    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

                        utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
                        s.match_start -= _w_size;
                        s.strstart -= _w_size;
                        /* we now have strstart >= MAX_DIST */
                        s.block_start -= _w_size;

                        /* Slide the hash table (could be avoided with 32 bit values
                         at the expense of memory usage). We slide even when level == 0
                         to keep the hash table consistent if we switch back to level > 0
                         later. (Using level 0 permanently is not an optimal usage of
                         zlib, so we don't care about this pathological case.)
                         */

                        n = s.hash_size;
                        p = n;
                        do {
                            m = s.head[--p];
                            s.head[p] = (m >= _w_size ? m - _w_size : 0);
                        } while (--n);

                        n = _w_size;
                        p = n;
                        do {
                            m = s.prev[--p];
                            s.prev[p] = (m >= _w_size ? m - _w_size : 0);
                            /* If n is not on any hash chain, prev[n] is garbage but
                             * its value will never be used.
                             */
                        } while (--n);

                        more += _w_size;
                    }
                    if (s.strm.avail_in === 0) {
                        break;
                    }

                    /* If there was no sliding:
                     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
                     *    more == window_size - lookahead - strstart
                     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
                     * => more >= window_size - 2*WSIZE + 2
                     * In the BIG_MEM or MMAP case (not yet supported),
                     *   window_size == input_size + MIN_LOOKAHEAD  &&
                     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
                     * Otherwise, window_size == 2*WSIZE so more >= 2.
                     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
                     */
                    //Assert(more >= 2, "more < 2");
                    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
                    s.lookahead += n;

                    /* Initialize the hash value now that we have some input: */
                    if (s.lookahead + s.insert >= MIN_MATCH) {
                        str = s.strstart - s.insert;
                        s.ins_h = s.window[str];

                        /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
                        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
                        //#if MIN_MATCH != 3
                        //        Call update_hash() MIN_MATCH-3 more times
                        //#endif
                        while (s.insert) {
                            /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
                            s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

                            s.prev[str & s.w_mask] = s.head[s.ins_h];
                            s.head[s.ins_h] = str;
                            str++;
                            s.insert--;
                            if (s.lookahead + s.insert < MIN_MATCH) {
                                break;
                            }
                        }
                    }
                    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
                     * but this is not important since only literal bytes will be emitted.
                     */

                } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

                /* If the WIN_INIT bytes after the end of the current data have never been
                 * written, then zero those bytes in order to avoid memory check reports of
                 * the use of uninitialized (or uninitialised as Julian writes) bytes by
                 * the longest match routines.  Update the high water mark for the next
                 * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
                 * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
                 */
                //  if (s.high_water < s.window_size) {
                //    var curr = s.strstart + s.lookahead;
                //    var init = 0;
                //
                //    if (s.high_water < curr) {
                //      /* Previous high water mark below current data -- zero WIN_INIT
                //       * bytes or up to end of window, whichever is less.
                //       */
                //      init = s.window_size - curr;
                //      if (init > WIN_INIT)
                //        init = WIN_INIT;
                //      zmemzero(s->window + curr, (unsigned)init);
                //      s->high_water = curr + init;
                //    }
                //    else if (s->high_water < (ulg)curr + WIN_INIT) {
                //      /* High water mark at or above current data, but below current data
                //       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
                //       * to end of window, whichever is less.
                //       */
                //      init = (ulg)curr + WIN_INIT - s->high_water;
                //      if (init > s->window_size - s->high_water)
                //        init = s->window_size - s->high_water;
                //      zmemzero(s->window + s->high_water, (unsigned)init);
                //      s->high_water += init;
                //    }
                //  }
                //
                //  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
                //    "not enough room for search");
            }

            /* ===========================================================================
             * Copy without compression as much as possible from the input stream, return
             * the current block state.
             * This function does not insert new strings in the dictionary since
             * uncompressible data is probably not useful. This function is used
             * only for the level=0 compression option.
             * NOTE: this function should be optimized to avoid extra copying from
             * window to pending_buf.
             */
            function deflate_stored(s, flush) {
                /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
                 * to pending_buf_size, and each stored block has a 5 byte header:
                 */
                var max_block_size = 0xffff;

                if (max_block_size > s.pending_buf_size - 5) {
                    max_block_size = s.pending_buf_size - 5;
                }

                /* Copy as much as possible from input to output: */
                for (;;) {
                    /* Fill the window as much as possible: */
                    if (s.lookahead <= 1) {

                        //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
                        //  s->block_start >= (long)s->w_size, "slide too late");
                        //      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
                        //        s.block_start >= s.w_size)) {
                        //        throw  new Error("slide too late");
                        //      }

                        fill_window(s);
                        if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
                            return BS_NEED_MORE;
                        }

                        if (s.lookahead === 0) {
                            break;
                        }
                        /* flush the current block */
                    }
                    //Assert(s->block_start >= 0L, "block gone");
                    //    if (s.block_start < 0) throw new Error("block gone");

                    s.strstart += s.lookahead;
                    s.lookahead = 0;

                    /* Emit a stored block if pending_buf will be full: */
                    var max_start = s.block_start + max_block_size;

                    if (s.strstart === 0 || s.strstart >= max_start) {
                        /* strstart == 0 is possible when wraparound on 16-bit machine */
                        s.lookahead = s.strstart - max_start;
                        s.strstart = max_start;
                        /*** FLUSH_BLOCK(s, 0); ***/
                        flush_block_only(s, false);
                        if (s.strm.avail_out === 0) {
                            return BS_NEED_MORE;
                        }
                        /***/


                    }
                    /* Flush if we may have to slide, otherwise block_start may become
                     * negative and the data will be gone:
                     */
                    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
                        /*** FLUSH_BLOCK(s, 0); ***/
                        flush_block_only(s, false);
                        if (s.strm.avail_out === 0) {
                            return BS_NEED_MORE;
                        }
                        /***/
                    }
                }

                s.insert = 0;

                if (flush === Z_FINISH) {
                    /*** FLUSH_BLOCK(s, 1); ***/
                    flush_block_only(s, true);
                    if (s.strm.avail_out === 0) {
                        return BS_FINISH_STARTED;
                    }
                    /***/
                    return BS_FINISH_DONE;
                }

                if (s.strstart > s.block_start) {
                    /*** FLUSH_BLOCK(s, 0); ***/
                    flush_block_only(s, false);
                    if (s.strm.avail_out === 0) {
                        return BS_NEED_MORE;
                    }
                    /***/
                }

                return BS_NEED_MORE;
            }

            /* ===========================================================================
             * Compress as much as possible from the input stream, return the current
             * block state.
             * This function does not perform lazy evaluation of matches and inserts
             * new strings in the dictionary only for unmatched strings or for short
             * matches. It is used only for the fast compression options.
             */
            function deflate_fast(s, flush) {
                var hash_head;        /* head of the hash chain */
                var bflush;           /* set if current block must be flushed */

                for (;;) {
                    /* Make sure that we always have enough lookahead, except
                     * at the end of the input file. We need MAX_MATCH bytes
                     * for the next match, plus MIN_MATCH bytes to insert the
                     * string following the next match.
                     */
                    if (s.lookahead < MIN_LOOKAHEAD) {
                        fill_window(s);
                        if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
                            return BS_NEED_MORE;
                        }
                        if (s.lookahead === 0) {
                            break; /* flush the current block */
                        }
                    }

                    /* Insert the string window[strstart .. strstart+2] in the
                     * dictionary, and set hash_head to the head of the hash chain:
                     */
                    hash_head = 0/*NIL*/;
                    if (s.lookahead >= MIN_MATCH) {
                        /*** INSERT_STRING(s, s.strstart, hash_head); ***/
                        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
                        hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
                        s.head[s.ins_h] = s.strstart;
                        /***/
                    }

                    /* Find the longest match, discarding those <= prev_length.
                     * At this point we have always match_length < MIN_MATCH
                     */
                    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
                        /* To simplify the code, we prevent matches with the string
                         * of window index 0 (in particular we have to avoid a match
                         * of the string with itself at the start of the input file).
                         */
                        s.match_length = longest_match(s, hash_head);
                        /* longest_match() sets match_start */
                    }
                    if (s.match_length >= MIN_MATCH) {
                        // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

                        /*** _tr_tally_dist(s, s.strstart - s.match_start,
                         s.match_length - MIN_MATCH, bflush); ***/
                        bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

                        s.lookahead -= s.match_length;

                        /* Insert new strings in the hash table only if the match length
                         * is not too large. This saves time but degrades compression.
                         */
                        if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
                            s.match_length--; /* string at strstart already in table */
                            do {
                                s.strstart++;
                                /*** INSERT_STRING(s, s.strstart, hash_head); ***/
                                s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
                                hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
                                s.head[s.ins_h] = s.strstart;
                                /***/
                                /* strstart never exceeds WSIZE-MAX_MATCH, so there are
                                 * always MIN_MATCH bytes ahead.
                                 */
                            } while (--s.match_length !== 0);
                            s.strstart++;
                        } else
                        {
                            s.strstart += s.match_length;
                            s.match_length = 0;
                            s.ins_h = s.window[s.strstart];
                            /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
                            s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

                            //#if MIN_MATCH != 3
                            //                Call UPDATE_HASH() MIN_MATCH-3 more times
                            //#endif
                            /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
                             * matter since it will be recomputed at next deflate call.
                             */
                        }
                    } else {
                        /* No match, output a literal byte */
                        //Tracevv((stderr,"%c", s.window[s.strstart]));
                        /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
                        bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

                        s.lookahead--;
                        s.strstart++;
                    }
                    if (bflush) {
                        /*** FLUSH_BLOCK(s, 0); ***/
                        flush_block_only(s, false);
                        if (s.strm.avail_out === 0) {
                            return BS_NEED_MORE;
                        }
                        /***/
                    }
                }
                s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
                if (flush === Z_FINISH) {
                    /*** FLUSH_BLOCK(s, 1); ***/
                    flush_block_only(s, true);
                    if (s.strm.avail_out === 0) {
                        return BS_FINISH_STARTED;
                    }
                    /***/
                    return BS_FINISH_DONE;
                }
                if (s.last_lit) {
                    /*** FLUSH_BLOCK(s, 0); ***/
                    flush_block_only(s, false);
                    if (s.strm.avail_out === 0) {
                        return BS_NEED_MORE;
                    }
                    /***/
                }
                return BS_BLOCK_DONE;
            }

            /* ===========================================================================
             * Same as above, but achieves better compression. We use a lazy
             * evaluation for matches: a match is finally adopted only if there is
             * no better match at the next window position.
             */
            function deflate_slow(s, flush) {
                var hash_head;          /* head of hash chain */
                var bflush;              /* set if current block must be flushed */

                var max_insert;

                /* Process the input block. */
                for (;;) {
                    /* Make sure that we always have enough lookahead, except
                     * at the end of the input file. We need MAX_MATCH bytes
                     * for the next match, plus MIN_MATCH bytes to insert the
                     * string following the next match.
                     */
                    if (s.lookahead < MIN_LOOKAHEAD) {
                        fill_window(s);
                        if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
                            return BS_NEED_MORE;
                        }
                        if (s.lookahead === 0) { break; } /* flush the current block */
                    }

                    /* Insert the string window[strstart .. strstart+2] in the
                     * dictionary, and set hash_head to the head of the hash chain:
                     */
                    hash_head = 0/*NIL*/;
                    if (s.lookahead >= MIN_MATCH) {
                        /*** INSERT_STRING(s, s.strstart, hash_head); ***/
                        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
                        hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
                        s.head[s.ins_h] = s.strstart;
                        /***/
                    }

                    /* Find the longest match, discarding those <= prev_length.
                     */
                    s.prev_length = s.match_length;
                    s.prev_match = s.match_start;
                    s.match_length = MIN_MATCH - 1;

                    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
                        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
                        /* To simplify the code, we prevent matches with the string
                         * of window index 0 (in particular we have to avoid a match
                         * of the string with itself at the start of the input file).
                         */
                        s.match_length = longest_match(s, hash_head);
                        /* longest_match() sets match_start */

                        if (s.match_length <= 5 &&
                            (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

                            /* If prev_match is also MIN_MATCH, match_start is garbage
                             * but we will ignore the current match anyway.
                             */
                            s.match_length = MIN_MATCH - 1;
                        }
                    }
                    /* If there was a match at the previous step and the current
                     * match is not better, output the previous match:
                     */
                    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
                        max_insert = s.strstart + s.lookahead - MIN_MATCH;
                        /* Do not insert strings in hash table beyond this. */

                        //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

                        /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                         s.prev_length - MIN_MATCH, bflush);***/
                        bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
                        /* Insert in hash table all strings up to the end of the match.
                         * strstart-1 and strstart are already inserted. If there is not
                         * enough lookahead, the last two strings are not inserted in
                         * the hash table.
                         */
                        s.lookahead -= s.prev_length - 1;
                        s.prev_length -= 2;
                        do {
                            if (++s.strstart <= max_insert) {
                                /*** INSERT_STRING(s, s.strstart, hash_head); ***/
                                s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
                                hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
                                s.head[s.ins_h] = s.strstart;
                                /***/
                            }
                        } while (--s.prev_length !== 0);
                        s.match_available = 0;
                        s.match_length = MIN_MATCH - 1;
                        s.strstart++;

                        if (bflush) {
                            /*** FLUSH_BLOCK(s, 0); ***/
                            flush_block_only(s, false);
                            if (s.strm.avail_out === 0) {
                                return BS_NEED_MORE;
                            }
                            /***/
                        }

                    } else if (s.match_available) {
                        /* If there was no match at the previous position, output a
                         * single literal. If there was a match but the current match
                         * is longer, truncate the previous match to a single literal.
                         */
                        //Tracevv((stderr,"%c", s->window[s->strstart-1]));
                        /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
                        bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

                        if (bflush) {
                            /*** FLUSH_BLOCK_ONLY(s, 0) ***/
                            flush_block_only(s, false);
                            /***/
                        }
                        s.strstart++;
                        s.lookahead--;
                        if (s.strm.avail_out === 0) {
                            return BS_NEED_MORE;
                        }
                    } else {
                        /* There is no previous match to compare with, wait for
                         * the next step to decide.
                         */
                        s.match_available = 1;
                        s.strstart++;
                        s.lookahead--;
                    }
                }
                //Assert (flush != Z_NO_FLUSH, "no flush?");
                if (s.match_available) {
                    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
                    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
                    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

                    s.match_available = 0;
                }
                s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
                if (flush === Z_FINISH) {
                    /*** FLUSH_BLOCK(s, 1); ***/
                    flush_block_only(s, true);
                    if (s.strm.avail_out === 0) {
                        return BS_FINISH_STARTED;
                    }
                    /***/
                    return BS_FINISH_DONE;
                }
                if (s.last_lit) {
                    /*** FLUSH_BLOCK(s, 0); ***/
                    flush_block_only(s, false);
                    if (s.strm.avail_out === 0) {
                        return BS_NEED_MORE;
                    }
                    /***/
                }

                return BS_BLOCK_DONE;
            }


            /* ===========================================================================
             * For Z_RLE, simply look for runs of bytes, generate matches only of distance
             * one.  Do not maintain a hash table.  (It will be regenerated if this run of
             * deflate switches away from Z_RLE.)
             */
            function deflate_rle(s, flush) {
                var bflush;            /* set if current block must be flushed */
                var prev;              /* byte at distance one to match */
                var scan, strend;      /* scan goes up to strend for length of run */

                var _win = s.window;

                for (;;) {
                    /* Make sure that we always have enough lookahead, except
                     * at the end of the input file. We need MAX_MATCH bytes
                     * for the longest run, plus one for the unrolled loop.
                     */
                    if (s.lookahead <= MAX_MATCH) {
                        fill_window(s);
                        if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
                            return BS_NEED_MORE;
                        }
                        if (s.lookahead === 0) { break; } /* flush the current block */
                    }

                    /* See how many times the previous byte repeats */
                    s.match_length = 0;
                    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
                        scan = s.strstart - 1;
                        prev = _win[scan];
                        if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
                            strend = s.strstart + MAX_MATCH;
                            do {
                                /*jshint noempty:false*/
                            } while (prev === _win[++scan] && prev === _win[++scan] &&
                            prev === _win[++scan] && prev === _win[++scan] &&
                            prev === _win[++scan] && prev === _win[++scan] &&
                            prev === _win[++scan] && prev === _win[++scan] &&
                            scan < strend);
                            s.match_length = MAX_MATCH - (strend - scan);
                            if (s.match_length > s.lookahead) {
                                s.match_length = s.lookahead;
                            }
                        }
                        //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
                    }

                    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
                    if (s.match_length >= MIN_MATCH) {
                        //check_match(s, s.strstart, s.strstart - 1, s.match_length);

                        /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
                        bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

                        s.lookahead -= s.match_length;
                        s.strstart += s.match_length;
                        s.match_length = 0;
                    } else {
                        /* No match, output a literal byte */
                        //Tracevv((stderr,"%c", s->window[s->strstart]));
                        /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
                        bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

                        s.lookahead--;
                        s.strstart++;
                    }
                    if (bflush) {
                        /*** FLUSH_BLOCK(s, 0); ***/
                        flush_block_only(s, false);
                        if (s.strm.avail_out === 0) {
                            return BS_NEED_MORE;
                        }
                        /***/
                    }
                }
                s.insert = 0;
                if (flush === Z_FINISH) {
                    /*** FLUSH_BLOCK(s, 1); ***/
                    flush_block_only(s, true);
                    if (s.strm.avail_out === 0) {
                        return BS_FINISH_STARTED;
                    }
                    /***/
                    return BS_FINISH_DONE;
                }
                if (s.last_lit) {
                    /*** FLUSH_BLOCK(s, 0); ***/
                    flush_block_only(s, false);
                    if (s.strm.avail_out === 0) {
                        return BS_NEED_MORE;
                    }
                    /***/
                }
                return BS_BLOCK_DONE;
            }

            /* ===========================================================================
             * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
             * (It will be regenerated if this run of deflate switches away from Huffman.)
             */
            function deflate_huff(s, flush) {
                var bflush;             /* set if current block must be flushed */

                for (;;) {
                    /* Make sure that we have a literal to write. */
                    if (s.lookahead === 0) {
                        fill_window(s);
                        if (s.lookahead === 0) {
                            if (flush === Z_NO_FLUSH) {
                                return BS_NEED_MORE;
                            }
                            break;      /* flush the current block */
                        }
                    }

                    /* Output a literal byte */
                    s.match_length = 0;
                    //Tracevv((stderr,"%c", s->window[s->strstart]));
                    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
                    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
                    s.lookahead--;
                    s.strstart++;
                    if (bflush) {
                        /*** FLUSH_BLOCK(s, 0); ***/
                        flush_block_only(s, false);
                        if (s.strm.avail_out === 0) {
                            return BS_NEED_MORE;
                        }
                        /***/
                    }
                }
                s.insert = 0;
                if (flush === Z_FINISH) {
                    /*** FLUSH_BLOCK(s, 1); ***/
                    flush_block_only(s, true);
                    if (s.strm.avail_out === 0) {
                        return BS_FINISH_STARTED;
                    }
                    /***/
                    return BS_FINISH_DONE;
                }
                if (s.last_lit) {
                    /*** FLUSH_BLOCK(s, 0); ***/
                    flush_block_only(s, false);
                    if (s.strm.avail_out === 0) {
                        return BS_NEED_MORE;
                    }
                    /***/
                }
                return BS_BLOCK_DONE;
            }

            /* Values for max_lazy_match, good_match and max_chain_length, depending on
             * the desired pack level (0..9). The values given below have been tuned to
             * exclude worst case performance for pathological files. Better values may be
             * found for specific files.
             */
            function Config(good_length, max_lazy, nice_length, max_chain, func) {
                this.good_length = good_length;
                this.max_lazy = max_lazy;
                this.nice_length = nice_length;
                this.max_chain = max_chain;
                this.func = func;
            }

            var configuration_table;

            configuration_table = [
                /*      good lazy nice chain */
                new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
                new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
                new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
                new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

                new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
                new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
                new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
                new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
                new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
                new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
            ];


            /* ===========================================================================
             * Initialize the "longest match" routines for a new zlib stream
             */
            function lm_init(s) {
                s.window_size = 2 * s.w_size;

                /*** CLEAR_HASH(s); ***/
                zero(s.head); // Fill with NIL (= 0);

                /* Set the default configuration parameters:
                 */
                s.max_lazy_match = configuration_table[s.level].max_lazy;
                s.good_match = configuration_table[s.level].good_length;
                s.nice_match = configuration_table[s.level].nice_length;
                s.max_chain_length = configuration_table[s.level].max_chain;

                s.strstart = 0;
                s.block_start = 0;
                s.lookahead = 0;
                s.insert = 0;
                s.match_length = s.prev_length = MIN_MATCH - 1;
                s.match_available = 0;
                s.ins_h = 0;
            }


            function DeflateState() {
                this.strm = null;            /* pointer back to this zlib stream */
                this.status = 0;            /* as the name implies */
                this.pending_buf = null;      /* output still pending */
                this.pending_buf_size = 0;  /* size of pending_buf */
                this.pending_out = 0;       /* next pending byte to output to the stream */
                this.pending = 0;           /* nb of bytes in the pending buffer */
                this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
                this.gzhead = null;         /* gzip header information to write */
                this.gzindex = 0;           /* where in extra, name, or comment */
                this.method = Z_DEFLATED; /* can only be DEFLATED */
                this.last_flush = -1;   /* value of flush param for previous deflate call */

                this.w_size = 0;  /* LZ77 window size (32K by default) */
                this.w_bits = 0;  /* log2(w_size)  (8..16) */
                this.w_mask = 0;  /* w_size - 1 */

                this.window = null;
                /* Sliding window. Input bytes are read into the second half of the window,
                 * and move to the first half later to keep a dictionary of at least wSize
                 * bytes. With this organization, matches are limited to a distance of
                 * wSize-MAX_MATCH bytes, but this ensures that IO is always
                 * performed with a length multiple of the block size.
                 */

                this.window_size = 0;
                /* Actual size of window: 2*wSize, except when the user input buffer
                 * is directly used as sliding window.
                 */

                this.prev = null;
                /* Link to older string with same hash index. To limit the size of this
                 * array to 64K, this link is maintained only for the last 32K strings.
                 * An index in this array is thus a window index modulo 32K.
                 */

                this.head = null;   /* Heads of the hash chains or NIL. */

                this.ins_h = 0;       /* hash index of string to be inserted */
                this.hash_size = 0;   /* number of elements in hash table */
                this.hash_bits = 0;   /* log2(hash_size) */
                this.hash_mask = 0;   /* hash_size-1 */

                this.hash_shift = 0;
                /* Number of bits by which ins_h must be shifted at each input
                 * step. It must be such that after MIN_MATCH steps, the oldest
                 * byte no longer takes part in the hash key, that is:
                 *   hash_shift * MIN_MATCH >= hash_bits
                 */

                this.block_start = 0;
                /* Window position at the beginning of the current output block. Gets
                 * negative when the window is moved backwards.
                 */

                this.match_length = 0;      /* length of best match */
                this.prev_match = 0;        /* previous match */
                this.match_available = 0;   /* set if previous match exists */
                this.strstart = 0;          /* start of string to insert */
                this.match_start = 0;       /* start of matching string */
                this.lookahead = 0;         /* number of valid bytes ahead in window */

                this.prev_length = 0;
                /* Length of the best match at previous step. Matches not greater than this
                 * are discarded. This is used in the lazy match evaluation.
                 */

                this.max_chain_length = 0;
                /* To speed up deflation, hash chains are never searched beyond this
                 * length.  A higher limit improves compression ratio but degrades the
                 * speed.
                 */

                this.max_lazy_match = 0;
                /* Attempt to find a better match only when the current match is strictly
                 * smaller than this value. This mechanism is used only for compression
                 * levels >= 4.
                 */
                // That's alias to max_lazy_match, don't use directly
                //this.max_insert_length = 0;
                /* Insert new strings in the hash table only if the match length is not
                 * greater than this length. This saves time but degrades compression.
                 * max_insert_length is used only for compression levels <= 3.
                 */

                this.level = 0;     /* compression level (1..9) */
                this.strategy = 0;  /* favor or force Huffman coding*/

                this.good_match = 0;
                /* Use a faster search when the previous match is longer than this */

                this.nice_match = 0; /* Stop searching when current match exceeds this */

                /* used by trees.c: */

                /* Didn't use ct_data typedef below to suppress compiler warning */

                // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
                // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
                // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

                // Use flat array of DOUBLE size, with interleaved fata,
                // because JS does not support effective
                this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);
                this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);
                this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);
                zero(this.dyn_ltree);
                zero(this.dyn_dtree);
                zero(this.bl_tree);

                this.l_desc   = null;         /* desc. for literal tree */
                this.d_desc   = null;         /* desc. for distance tree */
                this.bl_desc  = null;         /* desc. for bit length tree */

                //ush bl_count[MAX_BITS+1];
                this.bl_count = new utils.Buf16(MAX_BITS + 1);
                /* number of codes at each bit length for an optimal tree */

                //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
                this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
                zero(this.heap);

                this.heap_len = 0;               /* number of elements in the heap */
                this.heap_max = 0;               /* element of largest frequency */
                /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
                 * The same heap array is used to build all trees.
                 */

                this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
                zero(this.depth);
                /* Depth of each subtree used as tie breaker for trees of equal frequency
                 */

                this.l_buf = 0;          /* buffer index for literals or lengths */

                this.lit_bufsize = 0;
                /* Size of match buffer for literals/lengths.  There are 4 reasons for
                 * limiting lit_bufsize to 64K:
                 *   - frequencies can be kept in 16 bit counters
                 *   - if compression is not successful for the first block, all input
                 *     data is still in the window so we can still emit a stored block even
                 *     when input comes from standard input.  (This can also be done for
                 *     all blocks if lit_bufsize is not greater than 32K.)
                 *   - if compression is not successful for a file smaller than 64K, we can
                 *     even emit a stored file instead of a stored block (saving 5 bytes).
                 *     This is applicable only for zip (not gzip or zlib).
                 *   - creating new Huffman trees less frequently may not provide fast
                 *     adaptation to changes in the input data statistics. (Take for
                 *     example a binary file with poorly compressible code followed by
                 *     a highly compressible string table.) Smaller buffer sizes give
                 *     fast adaptation but have of course the overhead of transmitting
                 *     trees more frequently.
                 *   - I can't count above 4
                 */

                this.last_lit = 0;      /* running index in l_buf */

                this.d_buf = 0;
                /* Buffer index for distances. To simplify the code, d_buf and l_buf have
                 * the same number of elements. To use different lengths, an extra flag
                 * array would be necessary.
                 */

                this.opt_len = 0;       /* bit length of current block with optimal trees */
                this.static_len = 0;    /* bit length of current block with static trees */
                this.matches = 0;       /* number of string matches in current block */
                this.insert = 0;        /* bytes at end of window left to insert */


                this.bi_buf = 0;
                /* Output buffer. bits are inserted starting at the bottom (least
                 * significant bits).
                 */
                this.bi_valid = 0;
                /* Number of valid bits in bi_buf.  All bits above the last valid bit
                 * are always zero.
                 */

                // Used for window memory init. We safely ignore it for JS. That makes
                // sense only for pointers and memory check tools.
                //this.high_water = 0;
                /* High water mark offset in window for initialized bytes -- bytes above
                 * this are set to zero in order to avoid memory check warnings when
                 * longest match routines access bytes past the input.  This is then
                 * updated to the new high water mark.
                 */
            }


            function deflateResetKeep(strm) {
                var s;

                if (!strm || !strm.state) {
                    return err(strm, Z_STREAM_ERROR);
                }

                strm.total_in = strm.total_out = 0;
                strm.data_type = Z_UNKNOWN;

                s = strm.state;
                s.pending = 0;
                s.pending_out = 0;

                if (s.wrap < 0) {
                    s.wrap = -s.wrap;
                    /* was made negative by deflate(..., Z_FINISH); */
                }
                s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
                strm.adler = (s.wrap === 2) ?
                    0  // crc32(0, Z_NULL, 0)
                    :
                    1; // adler32(0, Z_NULL, 0)
                s.last_flush = Z_NO_FLUSH;
                trees._tr_init(s);
                return Z_OK;
            }


            function deflateReset(strm) {
                var ret = deflateResetKeep(strm);
                if (ret === Z_OK) {
                    lm_init(strm.state);
                }
                return ret;
            }


            function deflateSetHeader(strm, head) {
                if (!strm || !strm.state) { return Z_STREAM_ERROR; }
                if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
                strm.state.gzhead = head;
                return Z_OK;
            }


            function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
                if (!strm) { // === Z_NULL
                    return Z_STREAM_ERROR;
                }
                var wrap = 1;

                if (level === Z_DEFAULT_COMPRESSION) {
                    level = 6;
                }

                if (windowBits < 0) { /* suppress zlib wrapper */
                    wrap = 0;
                    windowBits = -windowBits;
                }

                else if (windowBits > 15) {
                    wrap = 2;           /* write gzip wrapper instead */
                    windowBits -= 16;
                }


                if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
                    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
                    strategy < 0 || strategy > Z_FIXED) {
                    return err(strm, Z_STREAM_ERROR);
                }


                if (windowBits === 8) {
                    windowBits = 9;
                }
                /* until 256-byte window bug fixed */

                var s = new DeflateState();

                strm.state = s;
                s.strm = strm;

                s.wrap = wrap;
                s.gzhead = null;
                s.w_bits = windowBits;
                s.w_size = 1 << s.w_bits;
                s.w_mask = s.w_size - 1;

                s.hash_bits = memLevel + 7;
                s.hash_size = 1 << s.hash_bits;
                s.hash_mask = s.hash_size - 1;
                s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

                s.window = new utils.Buf8(s.w_size * 2);
                s.head = new utils.Buf16(s.hash_size);
                s.prev = new utils.Buf16(s.w_size);

                // Don't need mem init magic for JS.
                //s.high_water = 0;  /* nothing written to s->window yet */

                s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

                s.pending_buf_size = s.lit_bufsize * 4;

                //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
                //s->pending_buf = (uchf *) overlay;
                s.pending_buf = new utils.Buf8(s.pending_buf_size);

                // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
                //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
                s.d_buf = 1 * s.lit_bufsize;

                //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
                s.l_buf = (1 + 2) * s.lit_bufsize;

                s.level = level;
                s.strategy = strategy;
                s.method = method;

                return deflateReset(strm);
            }

            function deflateInit(strm, level) {
                return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
            }


            function deflate(strm, flush) {
                var old_flush, s;
                var beg, val; // for gzip header write only

                if (!strm || !strm.state ||
                    flush > Z_BLOCK || flush < 0) {
                    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
                }

                s = strm.state;

                if (!strm.output ||
                    (!strm.input && strm.avail_in !== 0) ||
                    (s.status === FINISH_STATE && flush !== Z_FINISH)) {
                    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
                }

                s.strm = strm; /* just in case */
                old_flush = s.last_flush;
                s.last_flush = flush;

                /* Write the header */
                if (s.status === INIT_STATE) {

                    if (s.wrap === 2) { // GZIP header
                        strm.adler = 0;  //crc32(0L, Z_NULL, 0);
                        put_byte(s, 31);
                        put_byte(s, 139);
                        put_byte(s, 8);
                        if (!s.gzhead) { // s->gzhead == Z_NULL
                            put_byte(s, 0);
                            put_byte(s, 0);
                            put_byte(s, 0);
                            put_byte(s, 0);
                            put_byte(s, 0);
                            put_byte(s, s.level === 9 ? 2 :
                                (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                                    4 : 0));
                            put_byte(s, OS_CODE);
                            s.status = BUSY_STATE;
                        }
                        else {
                            put_byte(s, (s.gzhead.text ? 1 : 0) +
                                (s.gzhead.hcrc ? 2 : 0) +
                                (!s.gzhead.extra ? 0 : 4) +
                                (!s.gzhead.name ? 0 : 8) +
                                (!s.gzhead.comment ? 0 : 16)
                            );
                            put_byte(s, s.gzhead.time & 0xff);
                            put_byte(s, (s.gzhead.time >> 8) & 0xff);
                            put_byte(s, (s.gzhead.time >> 16) & 0xff);
                            put_byte(s, (s.gzhead.time >> 24) & 0xff);
                            put_byte(s, s.level === 9 ? 2 :
                                (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                                    4 : 0));
                            put_byte(s, s.gzhead.os & 0xff);
                            if (s.gzhead.extra && s.gzhead.extra.length) {
                                put_byte(s, s.gzhead.extra.length & 0xff);
                                put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
                            }
                            if (s.gzhead.hcrc) {
                                strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
                            }
                            s.gzindex = 0;
                            s.status = EXTRA_STATE;
                        }
                    }
                    else // DEFLATE header
                    {
                        var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
                        var level_flags = -1;

                        if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
                            level_flags = 0;
                        } else if (s.level < 6) {
                            level_flags = 1;
                        } else if (s.level === 6) {
                            level_flags = 2;
                        } else {
                            level_flags = 3;
                        }
                        header |= (level_flags << 6);
                        if (s.strstart !== 0) { header |= PRESET_DICT; }
                        header += 31 - (header % 31);

                        s.status = BUSY_STATE;
                        putShortMSB(s, header);

                        /* Save the adler32 of the preset dictionary: */
                        if (s.strstart !== 0) {
                            putShortMSB(s, strm.adler >>> 16);
                            putShortMSB(s, strm.adler & 0xffff);
                        }
                        strm.adler = 1; // adler32(0L, Z_NULL, 0);
                    }
                }

                //#ifdef GZIP
                if (s.status === EXTRA_STATE) {
                    if (s.gzhead.extra/* != Z_NULL*/) {
                        beg = s.pending;  /* start of bytes to update crc */

                        while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
                            if (s.pending === s.pending_buf_size) {
                                if (s.gzhead.hcrc && s.pending > beg) {
                                    strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                                }
                                flush_pending(strm);
                                beg = s.pending;
                                if (s.pending === s.pending_buf_size) {
                                    break;
                                }
                            }
                            put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
                            s.gzindex++;
                        }
                        if (s.gzhead.hcrc && s.pending > beg) {
                            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                        }
                        if (s.gzindex === s.gzhead.extra.length) {
                            s.gzindex = 0;
                            s.status = NAME_STATE;
                        }
                    }
                    else {
                        s.status = NAME_STATE;
                    }
                }
                if (s.status === NAME_STATE) {
                    if (s.gzhead.name/* != Z_NULL*/) {
                        beg = s.pending;  /* start of bytes to update crc */
                        //int val;

                        do {
                            if (s.pending === s.pending_buf_size) {
                                if (s.gzhead.hcrc && s.pending > beg) {
                                    strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                                }
                                flush_pending(strm);
                                beg = s.pending;
                                if (s.pending === s.pending_buf_size) {
                                    val = 1;
                                    break;
                                }
                            }
                            // JS specific: little magic to add zero terminator to end of string
                            if (s.gzindex < s.gzhead.name.length) {
                                val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
                            } else {
                                val = 0;
                            }
                            put_byte(s, val);
                        } while (val !== 0);

                        if (s.gzhead.hcrc && s.pending > beg) {
                            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                        }
                        if (val === 0) {
                            s.gzindex = 0;
                            s.status = COMMENT_STATE;
                        }
                    }
                    else {
                        s.status = COMMENT_STATE;
                    }
                }
                if (s.status === COMMENT_STATE) {
                    if (s.gzhead.comment/* != Z_NULL*/) {
                        beg = s.pending;  /* start of bytes to update crc */
                        //int val;

                        do {
                            if (s.pending === s.pending_buf_size) {
                                if (s.gzhead.hcrc && s.pending > beg) {
                                    strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                                }
                                flush_pending(strm);
                                beg = s.pending;
                                if (s.pending === s.pending_buf_size) {
                                    val = 1;
                                    break;
                                }
                            }
                            // JS specific: little magic to add zero terminator to end of string
                            if (s.gzindex < s.gzhead.comment.length) {
                                val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
                            } else {
                                val = 0;
                            }
                            put_byte(s, val);
                        } while (val !== 0);

                        if (s.gzhead.hcrc && s.pending > beg) {
                            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                        }
                        if (val === 0) {
                            s.status = HCRC_STATE;
                        }
                    }
                    else {
                        s.status = HCRC_STATE;
                    }
                }
                if (s.status === HCRC_STATE) {
                    if (s.gzhead.hcrc) {
                        if (s.pending + 2 > s.pending_buf_size) {
                            flush_pending(strm);
                        }
                        if (s.pending + 2 <= s.pending_buf_size) {
                            put_byte(s, strm.adler & 0xff);
                            put_byte(s, (strm.adler >> 8) & 0xff);
                            strm.adler = 0; //crc32(0L, Z_NULL, 0);
                            s.status = BUSY_STATE;
                        }
                    }
                    else {
                        s.status = BUSY_STATE;
                    }
                }
                //#endif

                /* Flush as much pending output as possible */
                if (s.pending !== 0) {
                    flush_pending(strm);
                    if (strm.avail_out === 0) {
                        /* Since avail_out is 0, deflate will be called again with
                         * more output space, but possibly with both pending and
                         * avail_in equal to zero. There won't be anything to do,
                         * but this is not an error situation so make sure we
                         * return OK instead of BUF_ERROR at next call of deflate:
                         */
                        s.last_flush = -1;
                        return Z_OK;
                    }

                    /* Make sure there is something to do and avoid duplicate consecutive
                     * flushes. For repeated and useless calls with Z_FINISH, we keep
                     * returning Z_STREAM_END instead of Z_BUF_ERROR.
                     */
                } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
                    flush !== Z_FINISH) {
                    return err(strm, Z_BUF_ERROR);
                }

                /* User must not provide more input after the first FINISH: */
                if (s.status === FINISH_STATE && strm.avail_in !== 0) {
                    return err(strm, Z_BUF_ERROR);
                }

                /* Start a new block or continue the current one.
                 */
                if (strm.avail_in !== 0 || s.lookahead !== 0 ||
                    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
                    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
                        (s.strategy === Z_RLE ? deflate_rle(s, flush) :
                            configuration_table[s.level].func(s, flush));

                    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
                        s.status = FINISH_STATE;
                    }
                    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
                        if (strm.avail_out === 0) {
                            s.last_flush = -1;
                            /* avoid BUF_ERROR next call, see above */
                        }
                        return Z_OK;
                        /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
                         * of deflate should use the same flush parameter to make sure
                         * that the flush is complete. So we don't have to output an
                         * empty block here, this will be done at next call. This also
                         * ensures that for a very small output buffer, we emit at most
                         * one empty block.
                         */
                    }
                    if (bstate === BS_BLOCK_DONE) {
                        if (flush === Z_PARTIAL_FLUSH) {
                            trees._tr_align(s);
                        }
                        else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

                            trees._tr_stored_block(s, 0, 0, false);
                            /* For a full flush, this empty block will be recognized
                             * as a special marker by inflate_sync().
                             */
                            if (flush === Z_FULL_FLUSH) {
                                /*** CLEAR_HASH(s); ***/             /* forget history */
                                zero(s.head); // Fill with NIL (= 0);

                                if (s.lookahead === 0) {
                                    s.strstart = 0;
                                    s.block_start = 0;
                                    s.insert = 0;
                                }
                            }
                        }
                        flush_pending(strm);
                        if (strm.avail_out === 0) {
                            s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
                            return Z_OK;
                        }
                    }
                }
                //Assert(strm->avail_out > 0, "bug2");
                //if (strm.avail_out <= 0) { throw new Error("bug2");}

                if (flush !== Z_FINISH) { return Z_OK; }
                if (s.wrap <= 0) { return Z_STREAM_END; }

                /* Write the trailer */
                if (s.wrap === 2) {
                    put_byte(s, strm.adler & 0xff);
                    put_byte(s, (strm.adler >> 8) & 0xff);
                    put_byte(s, (strm.adler >> 16) & 0xff);
                    put_byte(s, (strm.adler >> 24) & 0xff);
                    put_byte(s, strm.total_in & 0xff);
                    put_byte(s, (strm.total_in >> 8) & 0xff);
                    put_byte(s, (strm.total_in >> 16) & 0xff);
                    put_byte(s, (strm.total_in >> 24) & 0xff);
                }
                else
                {
                    putShortMSB(s, strm.adler >>> 16);
                    putShortMSB(s, strm.adler & 0xffff);
                }

                flush_pending(strm);
                /* If avail_out is zero, the application will call deflate again
                 * to flush the rest.
                 */
                if (s.wrap > 0) { s.wrap = -s.wrap; }
                /* write the trailer only once! */
                return s.pending !== 0 ? Z_OK : Z_STREAM_END;
            }

            function deflateEnd(strm) {
                var status;

                if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
                    return Z_STREAM_ERROR;
                }

                status = strm.state.status;
                if (status !== INIT_STATE &&
                    status !== EXTRA_STATE &&
                    status !== NAME_STATE &&
                    status !== COMMENT_STATE &&
                    status !== HCRC_STATE &&
                    status !== BUSY_STATE &&
                    status !== FINISH_STATE
                ) {
                    return err(strm, Z_STREAM_ERROR);
                }

                strm.state = null;

                return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
            }


            /* =========================================================================
             * Initializes the compression dictionary from the given byte
             * sequence without producing any compressed output.
             */
            function deflateSetDictionary(strm, dictionary) {
                var dictLength = dictionary.length;

                var s;
                var str, n;
                var wrap;
                var avail;
                var next;
                var input;
                var tmpDict;

                if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
                    return Z_STREAM_ERROR;
                }

                s = strm.state;
                wrap = s.wrap;

                if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
                    return Z_STREAM_ERROR;
                }

                /* when using zlib wrappers, compute Adler-32 for provided dictionary */
                if (wrap === 1) {
                    /* adler32(strm->adler, dictionary, dictLength); */
                    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
                }

                s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

                /* if dictionary would fill window, just replace the history */
                if (dictLength >= s.w_size) {
                    if (wrap === 0) {            /* already empty otherwise */
                        /*** CLEAR_HASH(s); ***/
                        zero(s.head); // Fill with NIL (= 0);
                        s.strstart = 0;
                        s.block_start = 0;
                        s.insert = 0;
                    }
                    /* use the tail */
                    // dictionary = dictionary.slice(dictLength - s.w_size);
                    tmpDict = new utils.Buf8(s.w_size);
                    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
                    dictionary = tmpDict;
                    dictLength = s.w_size;
                }
                /* insert dictionary into window and hash */
                avail = strm.avail_in;
                next = strm.next_in;
                input = strm.input;
                strm.avail_in = dictLength;
                strm.next_in = 0;
                strm.input = dictionary;
                fill_window(s);
                while (s.lookahead >= MIN_MATCH) {
                    str = s.strstart;
                    n = s.lookahead - (MIN_MATCH - 1);
                    do {
                        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
                        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

                        s.prev[str & s.w_mask] = s.head[s.ins_h];

                        s.head[s.ins_h] = str;
                        str++;
                    } while (--n);
                    s.strstart = str;
                    s.lookahead = MIN_MATCH - 1;
                    fill_window(s);
                }
                s.strstart += s.lookahead;
                s.block_start = s.strstart;
                s.insert = s.lookahead;
                s.lookahead = 0;
                s.match_length = s.prev_length = MIN_MATCH - 1;
                s.match_available = 0;
                strm.next_in = next;
                strm.input = input;
                strm.avail_in = avail;
                s.wrap = wrap;
                return Z_OK;
            }


            exports.deflateInit = deflateInit;
            exports.deflateInit2 = deflateInit2;
            exports.deflateReset = deflateReset;
            exports.deflateResetKeep = deflateResetKeep;
            exports.deflateSetHeader = deflateSetHeader;
            exports.deflate = deflate;
            exports.deflateEnd = deflateEnd;
            exports.deflateSetDictionary = deflateSetDictionary;
            exports.deflateInfo = 'pako deflate (from Nodeca project)';

            /* Not implemented
             exports.deflateBound = deflateBound;
             exports.deflateCopy = deflateCopy;
             exports.deflateParams = deflateParams;
             exports.deflatePending = deflatePending;
             exports.deflatePrime = deflatePrime;
             exports.deflateTune = deflateTune;
             */


            /***/ }),
        /* 64 */
        /***/ (function(module, exports) {

            'use strict';


            var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
                (typeof Uint16Array !== 'undefined') &&
                (typeof Int32Array !== 'undefined');


            exports.assign = function (obj /*from1, from2, from3, ...*/) {
                var sources = Array.prototype.slice.call(arguments, 1);
                while (sources.length) {
                    var source = sources.shift();
                    if (!source) { continue; }

                    if (typeof source !== 'object') {
                        throw new TypeError(source + 'must be non-object');
                    }

                    for (var p in source) {
                        if (source.hasOwnProperty(p)) {
                            obj[p] = source[p];
                        }
                    }
                }

                return obj;
            };


            // reduce buffer size, avoiding mem copy
            exports.shrinkBuf = function (buf, size) {
                if (buf.length === size) { return buf; }
                if (buf.subarray) { return buf.subarray(0, size); }
                buf.length = size;
                return buf;
            };


            var fnTyped = {
                arraySet: function (dest, src, src_offs, len, dest_offs) {
                    if (src.subarray && dest.subarray) {
                        dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
                        return;
                    }
                    // Fallback to ordinary array
                    for (var i = 0; i < len; i++) {
                        dest[dest_offs + i] = src[src_offs + i];
                    }
                },
                // Join array of chunks to single array.
                flattenChunks: function (chunks) {
                    var i, l, len, pos, chunk, result;

                    // calculate data length
                    len = 0;
                    for (i = 0, l = chunks.length; i < l; i++) {
                        len += chunks[i].length;
                    }

                    // join chunks
                    result = new Uint8Array(len);
                    pos = 0;
                    for (i = 0, l = chunks.length; i < l; i++) {
                        chunk = chunks[i];
                        result.set(chunk, pos);
                        pos += chunk.length;
                    }

                    return result;
                }
            };

            var fnUntyped = {
                arraySet: function (dest, src, src_offs, len, dest_offs) {
                    for (var i = 0; i < len; i++) {
                        dest[dest_offs + i] = src[src_offs + i];
                    }
                },
                // Join array of chunks to single array.
                flattenChunks: function (chunks) {
                    return [].concat.apply([], chunks);
                }
            };


            // Enable/Disable typed arrays use, for testing
            //
            exports.setTyped = function (on) {
                if (on) {
                    exports.Buf8  = Uint8Array;
                    exports.Buf16 = Uint16Array;
                    exports.Buf32 = Int32Array;
                    exports.assign(exports, fnTyped);
                } else {
                    exports.Buf8  = Array;
                    exports.Buf16 = Array;
                    exports.Buf32 = Array;
                    exports.assign(exports, fnUntyped);
                }
            };

            exports.setTyped(TYPED_OK);


            /***/ }),
        /* 65 */
        /***/ (function(module, exports, __webpack_require__) {

            'use strict';


            var utils = __webpack_require__(64);

            /* Public constants ==========================================================*/
            /* ===========================================================================*/


            //var Z_FILTERED          = 1;
            //var Z_HUFFMAN_ONLY      = 2;
            //var Z_RLE               = 3;
            var Z_FIXED               = 4;
            //var Z_DEFAULT_STRATEGY  = 0;

            /* Possible values of the data_type field (though see inflate()) */
            var Z_BINARY              = 0;
            var Z_TEXT                = 1;
            //var Z_ASCII             = 1; // = Z_TEXT
            var Z_UNKNOWN             = 2;

            /*============================================================================*/


            function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }

            // From zutil.h

            var STORED_BLOCK = 0;
            var STATIC_TREES = 1;
            var DYN_TREES    = 2;
            /* The three kinds of block type */

            var MIN_MATCH    = 3;
            var MAX_MATCH    = 258;
            /* The minimum and maximum match lengths */

            // From deflate.h
            /* ===========================================================================
             * Internal compression state.
             */

            var LENGTH_CODES  = 29;
            /* number of length codes, not counting the special END_BLOCK code */

            var LITERALS      = 256;
            /* number of literal bytes 0..255 */

            var L_CODES       = LITERALS + 1 + LENGTH_CODES;
            /* number of Literal or Length codes, including the END_BLOCK code */

            var D_CODES       = 30;
            /* number of distance codes */

            var BL_CODES      = 19;
            /* number of codes used to transfer the bit lengths */

            var HEAP_SIZE     = 2 * L_CODES + 1;
            /* maximum heap size */

            var MAX_BITS      = 15;
            /* All codes must not exceed MAX_BITS bits */

            var Buf_size      = 16;
            /* size of bit buffer in bi_buf */


            /* ===========================================================================
             * Constants
             */

            var MAX_BL_BITS = 7;
            /* Bit length codes must not exceed MAX_BL_BITS bits */

            var END_BLOCK   = 256;
            /* end of block literal code */

            var REP_3_6     = 16;
            /* repeat previous bit length 3-6 times (2 bits of repeat count) */

            var REPZ_3_10   = 17;
            /* repeat a zero length 3-10 times  (3 bits of repeat count) */

            var REPZ_11_138 = 18;
            /* repeat a zero length 11-138 times  (7 bits of repeat count) */

            /* eslint-disable comma-spacing,array-bracket-spacing */
            var extra_lbits =   /* extra bits for each length code */
                [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];

            var extra_dbits =   /* extra bits for each distance code */
                [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];

            var extra_blbits =  /* extra bits for each bit length code */
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];

            var bl_order =
                [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
            /* eslint-enable comma-spacing,array-bracket-spacing */

            /* The lengths of the bit length codes are sent in order of decreasing
             * probability, to avoid transmitting the lengths for unused bit length codes.
             */

            /* ===========================================================================
             * Local data. These are initialized only once.
             */

            // We pre-fill arrays with 0 to avoid uninitialized gaps

            var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

            // !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1
            var static_ltree  = new Array((L_CODES + 2) * 2);
            zero(static_ltree);
            /* The static literal tree. Since the bit lengths are imposed, there is no
             * need for the L_CODES extra codes used during heap construction. However
             * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
             * below).
             */

            var static_dtree  = new Array(D_CODES * 2);
            zero(static_dtree);
            /* The static distance tree. (Actually a trivial tree since all codes use
             * 5 bits.)
             */

            var _dist_code    = new Array(DIST_CODE_LEN);
            zero(_dist_code);
            /* Distance codes. The first 256 values correspond to the distances
             * 3 .. 258, the last 256 values correspond to the top 8 bits of
             * the 15 bit distances.
             */

            var _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);
            zero(_length_code);
            /* length code for each normalized match length (0 == MIN_MATCH) */

            var base_length   = new Array(LENGTH_CODES);
            zero(base_length);
            /* First normalized length for each code (0 = MIN_MATCH) */

            var base_dist     = new Array(D_CODES);
            zero(base_dist);
            /* First normalized distance for each code (0 = distance of 1) */


            function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

                this.static_tree  = static_tree;  /* static tree or NULL */
                this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
                this.extra_base   = extra_base;   /* base index for extra_bits */
                this.elems        = elems;        /* max number of elements in the tree */
                this.max_length   = max_length;   /* max bit length for the codes */

                // show if `static_tree` has data or dummy - needed for monomorphic objects
                this.has_stree    = static_tree && static_tree.length;
            }


            var static_l_desc;
            var static_d_desc;
            var static_bl_desc;


            function TreeDesc(dyn_tree, stat_desc) {
                this.dyn_tree = dyn_tree;     /* the dynamic tree */
                this.max_code = 0;            /* largest code with non zero frequency */
                this.stat_desc = stat_desc;   /* the corresponding static tree */
            }



            function d_code(dist) {
                return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
            }


            /* ===========================================================================
             * Output a short LSB first on the stream.
             * IN assertion: there is enough room in pendingBuf.
             */
            function put_short(s, w) {
                //    put_byte(s, (uch)((w) & 0xff));
                //    put_byte(s, (uch)((ush)(w) >> 8));
                s.pending_buf[s.pending++] = (w) & 0xff;
                s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
            }


            /* ===========================================================================
             * Send a value on a given number of bits.
             * IN assertion: length <= 16 and value fits in length bits.
             */
            function send_bits(s, value, length) {
                if (s.bi_valid > (Buf_size - length)) {
                    s.bi_buf |= (value << s.bi_valid) & 0xffff;
                    put_short(s, s.bi_buf);
                    s.bi_buf = value >> (Buf_size - s.bi_valid);
                    s.bi_valid += length - Buf_size;
                } else {
                    s.bi_buf |= (value << s.bi_valid) & 0xffff;
                    s.bi_valid += length;
                }
            }


            function send_code(s, c, tree) {
                send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
            }


            /* ===========================================================================
             * Reverse the first len bits of a code, using straightforward code (a faster
             * method would use a table)
             * IN assertion: 1 <= len <= 15
             */
            function bi_reverse(code, len) {
                var res = 0;
                do {
                    res |= code & 1;
                    code >>>= 1;
                    res <<= 1;
                } while (--len > 0);
                return res >>> 1;
            }


            /* ===========================================================================
             * Flush the bit buffer, keeping at most 7 bits in it.
             */
            function bi_flush(s) {
                if (s.bi_valid === 16) {
                    put_short(s, s.bi_buf);
                    s.bi_buf = 0;
                    s.bi_valid = 0;

                } else if (s.bi_valid >= 8) {
                    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
                    s.bi_buf >>= 8;
                    s.bi_valid -= 8;
                }
            }


            /* ===========================================================================
             * Compute the optimal bit lengths for a tree and update the total bit length
             * for the current block.
             * IN assertion: the fields freq and dad are set, heap[heap_max] and
             *    above are the tree nodes sorted by increasing frequency.
             * OUT assertions: the field len is set to the optimal bit length, the
             *     array bl_count contains the frequencies for each bit length.
             *     The length opt_len is updated; static_len is also updated if stree is
             *     not null.
             */
            function gen_bitlen(s, desc)
            //    deflate_state *s;
            //    tree_desc *desc;    /* the tree descriptor */
            {
                var tree            = desc.dyn_tree;
                var max_code        = desc.max_code;
                var stree           = desc.stat_desc.static_tree;
                var has_stree       = desc.stat_desc.has_stree;
                var extra           = desc.stat_desc.extra_bits;
                var base            = desc.stat_desc.extra_base;
                var max_length      = desc.stat_desc.max_length;
                var h;              /* heap index */
                var n, m;           /* iterate over the tree elements */
                var bits;           /* bit length */
                var xbits;          /* extra bits */
                var f;              /* frequency */
                var overflow = 0;   /* number of elements with bit length too large */

                for (bits = 0; bits <= MAX_BITS; bits++) {
                    s.bl_count[bits] = 0;
                }

                /* In a first pass, compute the optimal bit lengths (which may
                 * overflow in the case of the bit length tree).
                 */
                tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

                for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
                    n = s.heap[h];
                    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
                    if (bits > max_length) {
                        bits = max_length;
                        overflow++;
                    }
                    tree[n * 2 + 1]/*.Len*/ = bits;
                    /* We overwrite tree[n].Dad which is no longer needed */

                    if (n > max_code) { continue; } /* not a leaf node */

                    s.bl_count[bits]++;
                    xbits = 0;
                    if (n >= base) {
                        xbits = extra[n - base];
                    }
                    f = tree[n * 2]/*.Freq*/;
                    s.opt_len += f * (bits + xbits);
                    if (has_stree) {
                        s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
                    }
                }
                if (overflow === 0) { return; }

                // Trace((stderr,"\nbit length overflow\n"));
                /* This happens for example on obj2 and pic of the Calgary corpus */

                /* Find the first bit length which could increase: */
                do {
                    bits = max_length - 1;
                    while (s.bl_count[bits] === 0) { bits--; }
                    s.bl_count[bits]--;      /* move one leaf down the tree */
                    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
                    s.bl_count[max_length]--;
                    /* The brother of the overflow item also moves one step up,
                     * but this does not affect bl_count[max_length]
                     */
                    overflow -= 2;
                } while (overflow > 0);

                /* Now recompute all bit lengths, scanning in increasing frequency.
                 * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
                 * lengths instead of fixing only the wrong ones. This idea is taken
                 * from 'ar' written by Haruhiko Okumura.)
                 */
                for (bits = max_length; bits !== 0; bits--) {
                    n = s.bl_count[bits];
                    while (n !== 0) {
                        m = s.heap[--h];
                        if (m > max_code) { continue; }
                        if (tree[m * 2 + 1]/*.Len*/ !== bits) {
                            // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
                            s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
                            tree[m * 2 + 1]/*.Len*/ = bits;
                        }
                        n--;
                    }
                }
            }


            /* ===========================================================================
             * Generate the codes for a given tree and bit counts (which need not be
             * optimal).
             * IN assertion: the array bl_count contains the bit length statistics for
             * the given tree and the field len is set for all tree elements.
             * OUT assertion: the field code is set for all tree elements of non
             *     zero code length.
             */
            function gen_codes(tree, max_code, bl_count)
            //    ct_data *tree;             /* the tree to decorate */
            //    int max_code;              /* largest code with non zero frequency */
            //    ushf *bl_count;            /* number of codes at each bit length */
            {
                var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
                var code = 0;              /* running code value */
                var bits;                  /* bit index */
                var n;                     /* code index */

                /* The distribution counts are first used to generate the code values
                 * without bit reversal.
                 */
                for (bits = 1; bits <= MAX_BITS; bits++) {
                    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
                }
                /* Check that the bit counts in bl_count are consistent. The last code
                 * must be all ones.
                 */
                //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
                //        "inconsistent bit counts");
                //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

                for (n = 0;  n <= max_code; n++) {
                    var len = tree[n * 2 + 1]/*.Len*/;
                    if (len === 0) { continue; }
                    /* Now reverse the bits */
                    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

                    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
                    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
                }
            }


            /* ===========================================================================
             * Initialize the various 'constant' tables.
             */
            function tr_static_init() {
                var n;        /* iterates over tree elements */
                var bits;     /* bit counter */
                var length;   /* length value */
                var code;     /* code value */
                var dist;     /* distance index */
                var bl_count = new Array(MAX_BITS + 1);
                /* number of codes at each bit length for an optimal tree */

                // do check in _tr_init()
                //if (static_init_done) return;

                /* For some embedded targets, global variables are not initialized: */
                /*#ifdef NO_INIT_GLOBAL_POINTERS
                 static_l_desc.static_tree = static_ltree;
                 static_l_desc.extra_bits = extra_lbits;
                 static_d_desc.static_tree = static_dtree;
                 static_d_desc.extra_bits = extra_dbits;
                 static_bl_desc.extra_bits = extra_blbits;
                 #endif*/

                /* Initialize the mapping length (0..255) -> length code (0..28) */
                length = 0;
                for (code = 0; code < LENGTH_CODES - 1; code++) {
                    base_length[code] = length;
                    for (n = 0; n < (1 << extra_lbits[code]); n++) {
                        _length_code[length++] = code;
                    }
                }
                //Assert (length == 256, "tr_static_init: length != 256");
                /* Note that the length 255 (match length 258) can be represented
                 * in two different ways: code 284 + 5 bits or code 285, so we
                 * overwrite length_code[255] to use the best encoding:
                 */
                _length_code[length - 1] = code;

                /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
                dist = 0;
                for (code = 0; code < 16; code++) {
                    base_dist[code] = dist;
                    for (n = 0; n < (1 << extra_dbits[code]); n++) {
                        _dist_code[dist++] = code;
                    }
                }
                //Assert (dist == 256, "tr_static_init: dist != 256");
                dist >>= 7; /* from now on, all distances are divided by 128 */
                for (; code < D_CODES; code++) {
                    base_dist[code] = dist << 7;
                    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
                        _dist_code[256 + dist++] = code;
                    }
                }
                //Assert (dist == 256, "tr_static_init: 256+dist != 512");

                /* Construct the codes of the static literal tree */
                for (bits = 0; bits <= MAX_BITS; bits++) {
                    bl_count[bits] = 0;
                }

                n = 0;
                while (n <= 143) {
                    static_ltree[n * 2 + 1]/*.Len*/ = 8;
                    n++;
                    bl_count[8]++;
                }
                while (n <= 255) {
                    static_ltree[n * 2 + 1]/*.Len*/ = 9;
                    n++;
                    bl_count[9]++;
                }
                while (n <= 279) {
                    static_ltree[n * 2 + 1]/*.Len*/ = 7;
                    n++;
                    bl_count[7]++;
                }
                while (n <= 287) {
                    static_ltree[n * 2 + 1]/*.Len*/ = 8;
                    n++;
                    bl_count[8]++;
                }
                /* Codes 286 and 287 do not exist, but we must include them in the
                 * tree construction to get a canonical Huffman tree (longest code
                 * all ones)
                 */
                gen_codes(static_ltree, L_CODES + 1, bl_count);

                /* The static distance tree is trivial: */
                for (n = 0; n < D_CODES; n++) {
                    static_dtree[n * 2 + 1]/*.Len*/ = 5;
                    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
                }

                // Now data ready and we can init static trees
                static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
                static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
                static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);

                //static_init_done = true;
            }


            /* ===========================================================================
             * Initialize a new block.
             */
            function init_block(s) {
                var n; /* iterates over tree elements */

                /* Initialize the trees. */
                for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
                for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
                for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

                s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
                s.opt_len = s.static_len = 0;
                s.last_lit = s.matches = 0;
            }


            /* ===========================================================================
             * Flush the bit buffer and align the output on a byte boundary
             */
            function bi_windup(s)
            {
                if (s.bi_valid > 8) {
                    put_short(s, s.bi_buf);
                } else if (s.bi_valid > 0) {
                    //put_byte(s, (Byte)s->bi_buf);
                    s.pending_buf[s.pending++] = s.bi_buf;
                }
                s.bi_buf = 0;
                s.bi_valid = 0;
            }

            /* ===========================================================================
             * Copy a stored block, storing first the length and its
             * one's complement if requested.
             */
            function copy_block(s, buf, len, header)
            //DeflateState *s;
            //charf    *buf;    /* the input data */
            //unsigned len;     /* its length */
            //int      header;  /* true if block header must be written */
            {
                bi_windup(s);        /* align on byte boundary */

                if (header) {
                    put_short(s, len);
                    put_short(s, ~len);
                }
                //  while (len--) {
                //    put_byte(s, *buf++);
                //  }
                utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
                s.pending += len;
            }

            /* ===========================================================================
             * Compares to subtrees, using the tree depth as tie breaker when
             * the subtrees have equal frequency. This minimizes the worst case length.
             */
            function smaller(tree, n, m, depth) {
                var _n2 = n * 2;
                var _m2 = m * 2;
                return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
                (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
            }

            /* ===========================================================================
             * Restore the heap property by moving down the tree starting at node k,
             * exchanging a node with the smallest of its two sons if necessary, stopping
             * when the heap property is re-established (each father smaller than its
             * two sons).
             */
            function pqdownheap(s, tree, k)
            //    deflate_state *s;
            //    ct_data *tree;  /* the tree to restore */
            //    int k;               /* node to move down */
            {
                var v = s.heap[k];
                var j = k << 1;  /* left son of k */
                while (j <= s.heap_len) {
                    /* Set j to the smallest of the two sons: */
                    if (j < s.heap_len &&
                        smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
                        j++;
                    }
                    /* Exit if v is smaller than both sons */
                    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

                    /* Exchange v with the smallest son */
                    s.heap[k] = s.heap[j];
                    k = j;

                    /* And continue down the tree, setting j to the left son of k */
                    j <<= 1;
                }
                s.heap[k] = v;
            }


            // inlined manually
            // var SMALLEST = 1;

            /* ===========================================================================
             * Send the block data compressed using the given Huffman trees
             */
            function compress_block(s, ltree, dtree)
            //    deflate_state *s;
            //    const ct_data *ltree; /* literal tree */
            //    const ct_data *dtree; /* distance tree */
            {
                var dist;           /* distance of matched string */
                var lc;             /* match length or unmatched char (if dist == 0) */
                var lx = 0;         /* running index in l_buf */
                var code;           /* the code to send */
                var extra;          /* number of extra bits to send */

                if (s.last_lit !== 0) {
                    do {
                        dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
                        lc = s.pending_buf[s.l_buf + lx];
                        lx++;

                        if (dist === 0) {
                            send_code(s, lc, ltree); /* send a literal byte */
                            //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
                        } else {
                            /* Here, lc is the match length - MIN_MATCH */
                            code = _length_code[lc];
                            send_code(s, code + LITERALS + 1, ltree); /* send the length code */
                            extra = extra_lbits[code];
                            if (extra !== 0) {
                                lc -= base_length[code];
                                send_bits(s, lc, extra);       /* send the extra length bits */
                            }
                            dist--; /* dist is now the match distance - 1 */
                            code = d_code(dist);
                            //Assert (code < D_CODES, "bad d_code");

                            send_code(s, code, dtree);       /* send the distance code */
                            extra = extra_dbits[code];
                            if (extra !== 0) {
                                dist -= base_dist[code];
                                send_bits(s, dist, extra);   /* send the extra distance bits */
                            }
                        } /* literal or match pair ? */

                        /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
                        //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
                        //       "pendingBuf overflow");

                    } while (lx < s.last_lit);
                }

                send_code(s, END_BLOCK, ltree);
            }


            /* ===========================================================================
             * Construct one Huffman tree and assigns the code bit strings and lengths.
             * Update the total bit length for the current block.
             * IN assertion: the field freq is set for all tree elements.
             * OUT assertions: the fields len and code are set to the optimal bit length
             *     and corresponding code. The length opt_len is updated; static_len is
             *     also updated if stree is not null. The field max_code is set.
             */
            function build_tree(s, desc)
            //    deflate_state *s;
            //    tree_desc *desc; /* the tree descriptor */
            {
                var tree     = desc.dyn_tree;
                var stree    = desc.stat_desc.static_tree;
                var has_stree = desc.stat_desc.has_stree;
                var elems    = desc.stat_desc.elems;
                var n, m;          /* iterate over heap elements */
                var max_code = -1; /* largest code with non zero frequency */
                var node;          /* new node being created */

                /* Construct the initial heap, with least frequent element in
                 * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
                 * heap[0] is not used.
                 */
                s.heap_len = 0;
                s.heap_max = HEAP_SIZE;

                for (n = 0; n < elems; n++) {
                    if (tree[n * 2]/*.Freq*/ !== 0) {
                        s.heap[++s.heap_len] = max_code = n;
                        s.depth[n] = 0;

                    } else {
                        tree[n * 2 + 1]/*.Len*/ = 0;
                    }
                }

                /* The pkzip format requires that at least one distance code exists,
                 * and that at least one bit should be sent even if there is only one
                 * possible code. So to avoid special checks later on we force at least
                 * two codes of non zero frequency.
                 */
                while (s.heap_len < 2) {
                    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
                    tree[node * 2]/*.Freq*/ = 1;
                    s.depth[node] = 0;
                    s.opt_len--;

                    if (has_stree) {
                        s.static_len -= stree[node * 2 + 1]/*.Len*/;
                    }
                    /* node is 0 or 1 so it does not have extra bits */
                }
                desc.max_code = max_code;

                /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
                 * establish sub-heaps of increasing lengths:
                 */
                for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

                /* Construct the Huffman tree by repeatedly combining the least two
                 * frequent nodes.
                 */
                node = elems;              /* next internal node of the tree */
                do {
                    //pqremove(s, tree, n);  /* n = node of least frequency */
                    /*** pqremove ***/
                    n = s.heap[1/*SMALLEST*/];
                    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
                    pqdownheap(s, tree, 1/*SMALLEST*/);
                    /***/

                    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

                    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
                    s.heap[--s.heap_max] = m;

                    /* Create a new node father of n and m */
                    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
                    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
                    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

                    /* and insert the new node in the heap */
                    s.heap[1/*SMALLEST*/] = node++;
                    pqdownheap(s, tree, 1/*SMALLEST*/);

                } while (s.heap_len >= 2);

                s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

                /* At this point, the fields freq and dad are set. We can now
                 * generate the bit lengths.
                 */
                gen_bitlen(s, desc);

                /* The field len is now set, we can generate the bit codes */
                gen_codes(tree, max_code, s.bl_count);
            }


            /* ===========================================================================
             * Scan a literal or distance tree to determine the frequencies of the codes
             * in the bit length tree.
             */
            function scan_tree(s, tree, max_code)
            //    deflate_state *s;
            //    ct_data *tree;   /* the tree to be scanned */
            //    int max_code;    /* and its largest code of non zero frequency */
            {
                var n;                     /* iterates over all tree elements */
                var prevlen = -1;          /* last emitted length */
                var curlen;                /* length of current code */

                var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

                var count = 0;             /* repeat count of the current code */
                var max_count = 7;         /* max repeat count */
                var min_count = 4;         /* min repeat count */

                if (nextlen === 0) {
                    max_count = 138;
                    min_count = 3;
                }
                tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

                for (n = 0; n <= max_code; n++) {
                    curlen = nextlen;
                    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

                    if (++count < max_count && curlen === nextlen) {
                        continue;

                    } else if (count < min_count) {
                        s.bl_tree[curlen * 2]/*.Freq*/ += count;

                    } else if (curlen !== 0) {

                        if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
                        s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

                    } else if (count <= 10) {
                        s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

                    } else {
                        s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
                    }

                    count = 0;
                    prevlen = curlen;

                    if (nextlen === 0) {
                        max_count = 138;
                        min_count = 3;

                    } else if (curlen === nextlen) {
                        max_count = 6;
                        min_count = 3;

                    } else {
                        max_count = 7;
                        min_count = 4;
                    }
                }
            }


            /* ===========================================================================
             * Send a literal or distance tree in compressed form, using the codes in
             * bl_tree.
             */
            function send_tree(s, tree, max_code)
            //    deflate_state *s;
            //    ct_data *tree; /* the tree to be scanned */
            //    int max_code;       /* and its largest code of non zero frequency */
            {
                var n;                     /* iterates over all tree elements */
                var prevlen = -1;          /* last emitted length */
                var curlen;                /* length of current code */

                var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

                var count = 0;             /* repeat count of the current code */
                var max_count = 7;         /* max repeat count */
                var min_count = 4;         /* min repeat count */

                /* tree[max_code+1].Len = -1; */  /* guard already set */
                if (nextlen === 0) {
                    max_count = 138;
                    min_count = 3;
                }

                for (n = 0; n <= max_code; n++) {
                    curlen = nextlen;
                    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

                    if (++count < max_count && curlen === nextlen) {
                        continue;

                    } else if (count < min_count) {
                        do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

                    } else if (curlen !== 0) {
                        if (curlen !== prevlen) {
                            send_code(s, curlen, s.bl_tree);
                            count--;
                        }
                        //Assert(count >= 3 && count <= 6, " 3_6?");
                        send_code(s, REP_3_6, s.bl_tree);
                        send_bits(s, count - 3, 2);

                    } else if (count <= 10) {
                        send_code(s, REPZ_3_10, s.bl_tree);
                        send_bits(s, count - 3, 3);

                    } else {
                        send_code(s, REPZ_11_138, s.bl_tree);
                        send_bits(s, count - 11, 7);
                    }

                    count = 0;
                    prevlen = curlen;
                    if (nextlen === 0) {
                        max_count = 138;
                        min_count = 3;

                    } else if (curlen === nextlen) {
                        max_count = 6;
                        min_count = 3;

                    } else {
                        max_count = 7;
                        min_count = 4;
                    }
                }
            }


            /* ===========================================================================
             * Construct the Huffman tree for the bit lengths and return the index in
             * bl_order of the last bit length code to send.
             */
            function build_bl_tree(s) {
                var max_blindex;  /* index of last bit length code of non zero freq */

                /* Determine the bit length frequencies for literal and distance trees */
                scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
                scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

                /* Build the bit length tree: */
                build_tree(s, s.bl_desc);
                /* opt_len now includes the length of the tree representations, except
                 * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
                 */

                /* Determine the number of bit length codes to send. The pkzip format
                 * requires that at least 4 bit length codes be sent. (appnote.txt says
                 * 3 but the actual value used is 4.)
                 */
                for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
                    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
                        break;
                    }
                }
                /* Update opt_len to include the bit length tree and counts */
                s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
                //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
                //        s->opt_len, s->static_len));

                return max_blindex;
            }


            /* ===========================================================================
             * Send the header for a block using dynamic Huffman trees: the counts, the
             * lengths of the bit length codes, the literal tree and the distance tree.
             * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
             */
            function send_all_trees(s, lcodes, dcodes, blcodes)
            //    deflate_state *s;
            //    int lcodes, dcodes, blcodes; /* number of codes for each tree */
            {
                var rank;                    /* index in bl_order */

                //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
                //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
                //        "too many codes");
                //Tracev((stderr, "\nbl counts: "));
                send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
                send_bits(s, dcodes - 1,   5);
                send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
                for (rank = 0; rank < blcodes; rank++) {
                    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
                    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
                }
                //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

                send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
                //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

                send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
                //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
            }


            /* ===========================================================================
             * Check if the data type is TEXT or BINARY, using the following algorithm:
             * - TEXT if the two conditions below are satisfied:
             *    a) There are no non-portable control characters belonging to the
             *       "black list" (0..6, 14..25, 28..31).
             *    b) There is at least one printable character belonging to the
             *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
             * - BINARY otherwise.
             * - The following partially-portable control characters form a
             *   "gray list" that is ignored in this detection algorithm:
             *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
             * IN assertion: the fields Freq of dyn_ltree are set.
             */
            function detect_data_type(s) {
                /* black_mask is the bit mask of black-listed bytes
                 * set bits 0..6, 14..25, and 28..31
                 * 0xf3ffc07f = binary 11110011111111111100000001111111
                 */
                var black_mask = 0xf3ffc07f;
                var n;

                /* Check for non-textual ("black-listed") bytes. */
                for (n = 0; n <= 31; n++, black_mask >>>= 1) {
                    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
                        return Z_BINARY;
                    }
                }

                /* Check for textual ("white-listed") bytes. */
                if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
                    s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
                    return Z_TEXT;
                }
                for (n = 32; n < LITERALS; n++) {
                    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
                        return Z_TEXT;
                    }
                }

                /* There are no "black-listed" or "white-listed" bytes:
                 * this stream either is empty or has tolerated ("gray-listed") bytes only.
                 */
                return Z_BINARY;
            }


            var static_init_done = false;

            /* ===========================================================================
             * Initialize the tree data structures for a new zlib stream.
             */
            function _tr_init(s)
            {

                if (!static_init_done) {
                    tr_static_init();
                    static_init_done = true;
                }

                s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
                s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
                s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

                s.bi_buf = 0;
                s.bi_valid = 0;

                /* Initialize the first block of the first file: */
                init_block(s);
            }


            /* ===========================================================================
             * Send a stored block
             */
            function _tr_stored_block(s, buf, stored_len, last)
            //DeflateState *s;
            //charf *buf;       /* input block */
            //ulg stored_len;   /* length of input block */
            //int last;         /* one if this is the last block for a file */
            {
                send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
                copy_block(s, buf, stored_len, true); /* with header */
            }


            /* ===========================================================================
             * Send one empty static block to give enough lookahead for inflate.
             * This takes 10 bits, of which 7 may remain in the bit buffer.
             */
            function _tr_align(s) {
                send_bits(s, STATIC_TREES << 1, 3);
                send_code(s, END_BLOCK, static_ltree);
                bi_flush(s);
            }


            /* ===========================================================================
             * Determine the best encoding for the current block: dynamic trees, static
             * trees or store, and output the encoded block to the zip file.
             */
            function _tr_flush_block(s, buf, stored_len, last)
            //DeflateState *s;
            //charf *buf;       /* input block, or NULL if too old */
            //ulg stored_len;   /* length of input block */
            //int last;         /* one if this is the last block for a file */
            {
                var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
                var max_blindex = 0;        /* index of last bit length code of non zero freq */

                /* Build the Huffman trees unless a stored block is forced */
                if (s.level > 0) {

                    /* Check if the file is binary or text */
                    if (s.strm.data_type === Z_UNKNOWN) {
                        s.strm.data_type = detect_data_type(s);
                    }

                    /* Construct the literal and distance trees */
                    build_tree(s, s.l_desc);
                    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
                    //        s->static_len));

                    build_tree(s, s.d_desc);
                    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
                    //        s->static_len));
                    /* At this point, opt_len and static_len are the total bit lengths of
                     * the compressed block data, excluding the tree representations.
                     */

                    /* Build the bit length tree for the above two trees, and get the index
                     * in bl_order of the last bit length code to send.
                     */
                    max_blindex = build_bl_tree(s);

                    /* Determine the best encoding. Compute the block lengths in bytes. */
                    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
                    static_lenb = (s.static_len + 3 + 7) >>> 3;

                    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
                    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
                    //        s->last_lit));

                    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

                } else {
                    // Assert(buf != (char*)0, "lost buf");
                    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
                }

                if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
                    /* 4: two words for the lengths */

                    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
                     * Otherwise we can't have processed more than WSIZE input bytes since
                     * the last block flush, because compression would have been
                     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
                     * transform a block into a stored block.
                     */
                    _tr_stored_block(s, buf, stored_len, last);

                } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

                    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
                    compress_block(s, static_ltree, static_dtree);

                } else {
                    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
                    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
                    compress_block(s, s.dyn_ltree, s.dyn_dtree);
                }
                // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
                /* The above check is made mod 2^32, for files larger than 512 MB
                 * and uLong implemented on 32 bits.
                 */
                init_block(s);

                if (last) {
                    bi_windup(s);
                }
                // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
                //       s->compressed_len-7*last));
            }

            /* ===========================================================================
             * Save the match info and tally the frequency counts. Return true if
             * the current block must be flushed.
             */
            function _tr_tally(s, dist, lc)
            //    deflate_state *s;
            //    unsigned dist;  /* distance of matched string */
            //    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
            {
                //var out_length, in_length, dcode;

                s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
                s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

                s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
                s.last_lit++;

                if (dist === 0) {
                    /* lc is the unmatched char */
                    s.dyn_ltree[lc * 2]/*.Freq*/++;
                } else {
                    s.matches++;
                    /* Here, lc is the match length - MIN_MATCH */
                    dist--;             /* dist = match distance - 1 */
                    //Assert((ush)dist < (ush)MAX_DIST(s) &&
                    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
                    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

                    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;
                    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
                }

                // (!) This block is disabled in zlib defailts,
                // don't enable it for binary compatibility

                //#ifdef TRUNCATE_BLOCK
                //  /* Try to guess if it is profitable to stop the current block here */
                //  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
                //    /* Compute an upper bound for the compressed length */
                //    out_length = s.last_lit*8;
                //    in_length = s.strstart - s.block_start;
                //
                //    for (dcode = 0; dcode < D_CODES; dcode++) {
                //      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
                //    }
                //    out_length >>>= 3;
                //    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
                //    //       s->last_lit, in_length, out_length,
                //    //       100L - out_length*100L/in_length));
                //    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
                //      return true;
                //    }
                //  }
                //#endif

                return (s.last_lit === s.lit_bufsize - 1);
                /* We avoid equality with lit_bufsize because of wraparound at 64K
                 * on 16 bit machines and because stored blocks are restricted to
                 * 64K-1 bytes.
                 */
            }

            exports._tr_init  = _tr_init;
            exports._tr_stored_block = _tr_stored_block;
            exports._tr_flush_block  = _tr_flush_block;
            exports._tr_tally = _tr_tally;
            exports._tr_align = _tr_align;


            /***/ }),
        /* 66 */
        /***/ (function(module, exports) {

            'use strict';

            // Note: adler32 takes 12% for level 0 and 2% for level 6.
            // It doesn't worth to make additional optimizationa as in original.
            // Small size is preferable.

            function adler32(adler, buf, len, pos) {
                var s1 = (adler & 0xffff) |0,
                    s2 = ((adler >>> 16) & 0xffff) |0,
                    n = 0;

                while (len !== 0) {
                    // Set limit ~ twice less than 5552, to keep
                    // s2 in 31-bits, because we force signed ints.
                    // in other case %= will fail.
                    n = len > 2000 ? 2000 : len;
                    len -= n;

                    do {
                        s1 = (s1 + buf[pos++]) |0;
                        s2 = (s2 + s1) |0;
                    } while (--n);

                    s1 %= 65521;
                    s2 %= 65521;
                }

                return (s1 | (s2 << 16)) |0;
            }


            module.exports = adler32;


            /***/ }),
        /* 67 */
        /***/ (function(module, exports) {

            'use strict';

            // Note: we can't get significant speed boost here.
            // So write code to minimize size - no pregenerated tables
            // and array tools dependencies.


            // Use ordinary array, since untyped makes no boost here
            function makeTable() {
                var c, table = [];

                for (var n = 0; n < 256; n++) {
                    c = n;
                    for (var k = 0; k < 8; k++) {
                        c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
                    }
                    table[n] = c;
                }

                return table;
            }

            // Create table on load. Just 255 signed longs. Not a problem.
            var crcTable = makeTable();


            function crc32(crc, buf, len, pos) {
                var t = crcTable,
                    end = pos + len;

                crc ^= -1;

                for (var i = pos; i < end; i++) {
                    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
                }

                return (crc ^ (-1)); // >>> 0;
            }


            module.exports = crc32;


            /***/ }),
        /* 68 */
        /***/ (function(module, exports, __webpack_require__) {

            'use strict';


            var utils         = __webpack_require__(64);
            var adler32       = __webpack_require__(66);
            var crc32         = __webpack_require__(67);
            var inflate_fast  = __webpack_require__(69);
            var inflate_table = __webpack_require__(70);

            var CODES = 0;
            var LENS = 1;
            var DISTS = 2;

            /* Public constants ==========================================================*/
            /* ===========================================================================*/


            /* Allowed flush values; see deflate() and inflate() below for details */
            //var Z_NO_FLUSH      = 0;
            //var Z_PARTIAL_FLUSH = 1;
            //var Z_SYNC_FLUSH    = 2;
            //var Z_FULL_FLUSH    = 3;
            var Z_FINISH        = 4;
            var Z_BLOCK         = 5;
            var Z_TREES         = 6;


            /* Return codes for the compression/decompression functions. Negative values
             * are errors, positive values are used for special but normal events.
             */
            var Z_OK            = 0;
            var Z_STREAM_END    = 1;
            var Z_NEED_DICT     = 2;
            //var Z_ERRNO         = -1;
            var Z_STREAM_ERROR  = -2;
            var Z_DATA_ERROR    = -3;
            var Z_MEM_ERROR     = -4;
            var Z_BUF_ERROR     = -5;
            //var Z_VERSION_ERROR = -6;

            /* The deflate compression method */
            var Z_DEFLATED  = 8;


            /* STATES ====================================================================*/
            /* ===========================================================================*/


            var    HEAD = 1;       /* i: waiting for magic header */
            var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
            var    TIME = 3;       /* i: waiting for modification time (gzip) */
            var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
            var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
            var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
            var    NAME = 7;       /* i: waiting for end of file name (gzip) */
            var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
            var    HCRC = 9;       /* i: waiting for header crc (gzip) */
            var    DICTID = 10;    /* i: waiting for dictionary check value */
            var    DICT = 11;      /* waiting for inflateSetDictionary() call */
            var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
            var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
            var        STORED = 14;    /* i: waiting for stored size (length and complement) */
            var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
            var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
            var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
            var        LENLENS = 18;   /* i: waiting for code length code lengths */
            var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
            var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
            var            LEN = 21;       /* i: waiting for length/lit/eob code */
            var            LENEXT = 22;    /* i: waiting for length extra bits */
            var            DIST = 23;      /* i: waiting for distance code */
            var            DISTEXT = 24;   /* i: waiting for distance extra bits */
            var            MATCH = 25;     /* o: waiting for output space to copy string */
            var            LIT = 26;       /* o: waiting for output space to write literal */
            var    CHECK = 27;     /* i: waiting for 32-bit check value */
            var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
            var    DONE = 29;      /* finished check, done -- remain here until reset */
            var    BAD = 30;       /* got a data error -- remain here until reset */
            var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
            var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

            /* ===========================================================================*/



            var ENOUGH_LENS = 852;
            var ENOUGH_DISTS = 592;
            //var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

            var MAX_WBITS = 15;
            /* 32K LZ77 window */
            var DEF_WBITS = MAX_WBITS;


            function zswap32(q) {
                return  (((q >>> 24) & 0xff) +
                ((q >>> 8) & 0xff00) +
                ((q & 0xff00) << 8) +
                ((q & 0xff) << 24));
            }


            function InflateState() {
                this.mode = 0;             /* current inflate mode */
                this.last = false;          /* true if processing last block */
                this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
                this.havedict = false;      /* true if dictionary provided */
                this.flags = 0;             /* gzip header method and flags (0 if zlib) */
                this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
                this.check = 0;             /* protected copy of check value */
                this.total = 0;             /* protected copy of output count */
                // TODO: may be {}
                this.head = null;           /* where to save gzip header information */

                /* sliding window */
                this.wbits = 0;             /* log base 2 of requested window size */
                this.wsize = 0;             /* window size or zero if not using window */
                this.whave = 0;             /* valid bytes in the window */
                this.wnext = 0;             /* window write index */
                this.window = null;         /* allocated sliding window, if needed */

                /* bit accumulator */
                this.hold = 0;              /* input bit accumulator */
                this.bits = 0;              /* number of bits in "in" */

                /* for string and stored block copying */
                this.length = 0;            /* literal or length of data to copy */
                this.offset = 0;            /* distance back to copy string from */

                /* for table and code decoding */
                this.extra = 0;             /* extra bits needed */

                /* fixed and dynamic code tables */
                this.lencode = null;          /* starting table for length/literal codes */
                this.distcode = null;         /* starting table for distance codes */
                this.lenbits = 0;           /* index bits for lencode */
                this.distbits = 0;          /* index bits for distcode */

                /* dynamic table building */
                this.ncode = 0;             /* number of code length code lengths */
                this.nlen = 0;              /* number of length code lengths */
                this.ndist = 0;             /* number of distance code lengths */
                this.have = 0;              /* number of code lengths in lens[] */
                this.next = null;              /* next available space in codes[] */

                this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
                this.work = new utils.Buf16(288); /* work area for code table building */

                /*
                 because we don't have pointers in js, we use lencode and distcode directly
                 as buffers so we don't need codes
                 */
                //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
                this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
                this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
                this.sane = 0;                   /* if false, allow invalid distance too far */
                this.back = 0;                   /* bits back of last unprocessed length/lit */
                this.was = 0;                    /* initial length of match */
            }

            function inflateResetKeep(strm) {
                var state;

                if (!strm || !strm.state) { return Z_STREAM_ERROR; }
                state = strm.state;
                strm.total_in = strm.total_out = state.total = 0;
                strm.msg = ''; /*Z_NULL*/
                if (state.wrap) {       /* to support ill-conceived Java test suite */
                    strm.adler = state.wrap & 1;
                }
                state.mode = HEAD;
                state.last = 0;
                state.havedict = 0;
                state.dmax = 32768;
                state.head = null/*Z_NULL*/;
                state.hold = 0;
                state.bits = 0;
                //state.lencode = state.distcode = state.next = state.codes;
                state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
                state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);

                state.sane = 1;
                state.back = -1;
                //Tracev((stderr, "inflate: reset\n"));
                return Z_OK;
            }

            function inflateReset(strm) {
                var state;

                if (!strm || !strm.state) { return Z_STREAM_ERROR; }
                state = strm.state;
                state.wsize = 0;
                state.whave = 0;
                state.wnext = 0;
                return inflateResetKeep(strm);

            }

            function inflateReset2(strm, windowBits) {
                var wrap;
                var state;

                /* get the state */
                if (!strm || !strm.state) { return Z_STREAM_ERROR; }
                state = strm.state;

                /* extract wrap request from windowBits parameter */
                if (windowBits < 0) {
                    wrap = 0;
                    windowBits = -windowBits;
                }
                else {
                    wrap = (windowBits >> 4) + 1;
                    if (windowBits < 48) {
                        windowBits &= 15;
                    }
                }

                /* set number of window bits, free window if different */
                if (windowBits && (windowBits < 8 || windowBits > 15)) {
                    return Z_STREAM_ERROR;
                }
                if (state.window !== null && state.wbits !== windowBits) {
                    state.window = null;
                }

                /* update state and reset the rest of it */
                state.wrap = wrap;
                state.wbits = windowBits;
                return inflateReset(strm);
            }

            function inflateInit2(strm, windowBits) {
                var ret;
                var state;

                if (!strm) { return Z_STREAM_ERROR; }
                //strm.msg = Z_NULL;                 /* in case we return an error */

                state = new InflateState();

                //if (state === Z_NULL) return Z_MEM_ERROR;
                //Tracev((stderr, "inflate: allocated\n"));
                strm.state = state;
                state.window = null/*Z_NULL*/;
                ret = inflateReset2(strm, windowBits);
                if (ret !== Z_OK) {
                    strm.state = null/*Z_NULL*/;
                }
                return ret;
            }

            function inflateInit(strm) {
                return inflateInit2(strm, DEF_WBITS);
            }


            /*
             Return state with length and distance decoding tables and index sizes set to
             fixed code decoding.  Normally this returns fixed tables from inffixed.h.
             If BUILDFIXED is defined, then instead this routine builds the tables the
             first time it's called, and returns those tables the first time and
             thereafter.  This reduces the size of the code by about 2K bytes, in
             exchange for a little execution time.  However, BUILDFIXED should not be
             used for threaded applications, since the rewriting of the tables and virgin
             may not be thread-safe.
             */
            var virgin = true;

            var lenfix, distfix; // We have no pointers in JS, so keep tables separate

            function fixedtables(state) {
                /* build fixed huffman tables if first call (may not be thread safe) */
                if (virgin) {
                    var sym;

                    lenfix = new utils.Buf32(512);
                    distfix = new utils.Buf32(32);

                    /* literal/length table */
                    sym = 0;
                    while (sym < 144) { state.lens[sym++] = 8; }
                    while (sym < 256) { state.lens[sym++] = 9; }
                    while (sym < 280) { state.lens[sym++] = 7; }
                    while (sym < 288) { state.lens[sym++] = 8; }

                    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

                    /* distance table */
                    sym = 0;
                    while (sym < 32) { state.lens[sym++] = 5; }

                    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

                    /* do this just once */
                    virgin = false;
                }

                state.lencode = lenfix;
                state.lenbits = 9;
                state.distcode = distfix;
                state.distbits = 5;
            }


            /*
             Update the window with the last wsize (normally 32K) bytes written before
             returning.  If window does not exist yet, create it.  This is only called
             when a window is already in use, or when output has been written during this
             inflate call, but the end of the deflate stream has not been reached yet.
             It is also called to create a window for dictionary data when a dictionary
             is loaded.

             Providing output buffers larger than 32K to inflate() should provide a speed
             advantage, since only the last 32K of output is copied to the sliding window
             upon return from inflate(), and since all distances after the first 32K of
             output will fall in the output data, making match copies simpler and faster.
             The advantage may be dependent on the size of the processor's data caches.
             */
            function updatewindow(strm, src, end, copy) {
                var dist;
                var state = strm.state;

                /* if it hasn't been done already, allocate space for the window */
                if (state.window === null) {
                    state.wsize = 1 << state.wbits;
                    state.wnext = 0;
                    state.whave = 0;

                    state.window = new utils.Buf8(state.wsize);
                }

                /* copy state->wsize or less output bytes into the circular window */
                if (copy >= state.wsize) {
                    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
                    state.wnext = 0;
                    state.whave = state.wsize;
                }
                else {
                    dist = state.wsize - state.wnext;
                    if (dist > copy) {
                        dist = copy;
                    }
                    //zmemcpy(state->window + state->wnext, end - copy, dist);
                    utils.arraySet(state.window, src, end - copy, dist, state.wnext);
                    copy -= dist;
                    if (copy) {
                        //zmemcpy(state->window, end - copy, copy);
                        utils.arraySet(state.window, src, end - copy, copy, 0);
                        state.wnext = copy;
                        state.whave = state.wsize;
                    }
                    else {
                        state.wnext += dist;
                        if (state.wnext === state.wsize) { state.wnext = 0; }
                        if (state.whave < state.wsize) { state.whave += dist; }
                    }
                }
                return 0;
            }

            function inflate(strm, flush) {
                var state;
                var input, output;          // input/output buffers
                var next;                   /* next input INDEX */
                var put;                    /* next output INDEX */
                var have, left;             /* available input and output */
                var hold;                   /* bit buffer */
                var bits;                   /* bits in bit buffer */
                var _in, _out;              /* save starting available input and output */
                var copy;                   /* number of stored or match bytes to copy */
                var from;                   /* where to copy match bytes from */
                var from_source;
                var here = 0;               /* current decoding table entry */
                var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
                //var last;                   /* parent table entry */
                var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
                var len;                    /* length to copy for repeats, bits to drop */
                var ret;                    /* return code */
                var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
                var opts;

                var n; // temporary var for NEED_BITS

                var order = /* permutation of code lengths */
                    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];


                if (!strm || !strm.state || !strm.output ||
                    (!strm.input && strm.avail_in !== 0)) {
                    return Z_STREAM_ERROR;
                }

                state = strm.state;
                if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


                //--- LOAD() ---
                put = strm.next_out;
                output = strm.output;
                left = strm.avail_out;
                next = strm.next_in;
                input = strm.input;
                have = strm.avail_in;
                hold = state.hold;
                bits = state.bits;
                //---

                _in = have;
                _out = left;
                ret = Z_OK;

                inf_leave: // goto emulation
                    for (;;) {
                        switch (state.mode) {
                            case HEAD:
                                if (state.wrap === 0) {
                                    state.mode = TYPEDO;
                                    break;
                                }
                                //=== NEEDBITS(16);
                                while (bits < 16) {
                                    if (have === 0) { break inf_leave; }
                                    have--;
                                    hold += input[next++] << bits;
                                    bits += 8;
                                }
                                //===//
                                if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
                                    state.check = 0/*crc32(0L, Z_NULL, 0)*/;
                                    //=== CRC2(state.check, hold);
                                    hbuf[0] = hold & 0xff;
                                    hbuf[1] = (hold >>> 8) & 0xff;
                                    state.check = crc32(state.check, hbuf, 2, 0);
                                    //===//

                                    //=== INITBITS();
                                    hold = 0;
                                    bits = 0;
                                    //===//
                                    state.mode = FLAGS;
                                    break;
                                }
                                state.flags = 0;           /* expect zlib header */
                                if (state.head) {
                                    state.head.done = false;
                                }
                                if (!(state.wrap & 1) ||   /* check if zlib header allowed */
                                    (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
                                    strm.msg = 'incorrect header check';
                                    state.mode = BAD;
                                    break;
                                }
                                if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
                                    strm.msg = 'unknown compression method';
                                    state.mode = BAD;
                                    break;
                                }
                                //--- DROPBITS(4) ---//
                                hold >>>= 4;
                                bits -= 4;
                                //---//
                                len = (hold & 0x0f)/*BITS(4)*/ + 8;
                                if (state.wbits === 0) {
                                    state.wbits = len;
                                }
                                else if (len > state.wbits) {
                                    strm.msg = 'invalid window size';
                                    state.mode = BAD;
                                    break;
                                }
                                state.dmax = 1 << len;
                                //Tracev((stderr, "inflate:   zlib header ok\n"));
                                strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
                                state.mode = hold & 0x200 ? DICTID : TYPE;
                                //=== INITBITS();
                                hold = 0;
                                bits = 0;
                                //===//
                                break;
                            case FLAGS:
                                //=== NEEDBITS(16); */
                                while (bits < 16) {
                                    if (have === 0) { break inf_leave; }
                                    have--;
                                    hold += input[next++] << bits;
                                    bits += 8;
                                }
                                //===//
                                state.flags = hold;
                                if ((state.flags & 0xff) !== Z_DEFLATED) {
                                    strm.msg = 'unknown compression method';
                                    state.mode = BAD;
                                    break;
                                }
                                if (state.flags & 0xe000) {
                                    strm.msg = 'unknown header flags set';
                                    state.mode = BAD;
                                    break;
                                }
                                if (state.head) {
                                    state.head.text = ((hold >> 8) & 1);
                                }
                                if (state.flags & 0x0200) {
                                    //=== CRC2(state.check, hold);
                                    hbuf[0] = hold & 0xff;
                                    hbuf[1] = (hold >>> 8) & 0xff;
                                    state.check = crc32(state.check, hbuf, 2, 0);
                                    //===//
                                }
                                //=== INITBITS();
                                hold = 0;
                                bits = 0;
                                //===//
                                state.mode = TIME;
                            /* falls through */
                            case TIME:
                                //=== NEEDBITS(32); */
                                while (bits < 32) {
                                    if (have === 0) { break inf_leave; }
                                    have--;
                                    hold += input[next++] << bits;
                                    bits += 8;
                                }
                                //===//
                                if (state.head) {
                                    state.head.time = hold;
                                }
                                if (state.flags & 0x0200) {
                                    //=== CRC4(state.check, hold)
                                    hbuf[0] = hold & 0xff;
                                    hbuf[1] = (hold >>> 8) & 0xff;
                                    hbuf[2] = (hold >>> 16) & 0xff;
                                    hbuf[3] = (hold >>> 24) & 0xff;
                                    state.check = crc32(state.check, hbuf, 4, 0);
                                    //===
                                }
                                //=== INITBITS();
                                hold = 0;
                                bits = 0;
                                //===//
                                state.mode = OS;
                            /* falls through */
                            case OS:
                                //=== NEEDBITS(16); */
                                while (bits < 16) {
                                    if (have === 0) { break inf_leave; }
                                    have--;
                                    hold += input[next++] << bits;
                                    bits += 8;
                                }
                                //===//
                                if (state.head) {
                                    state.head.xflags = (hold & 0xff);
                                    state.head.os = (hold >> 8);
                                }
                                if (state.flags & 0x0200) {
                                    //=== CRC2(state.check, hold);
                                    hbuf[0] = hold & 0xff;
                                    hbuf[1] = (hold >>> 8) & 0xff;
                                    state.check = crc32(state.check, hbuf, 2, 0);
                                    //===//
                                }
                                //=== INITBITS();
                                hold = 0;
                                bits = 0;
                                //===//
                                state.mode = EXLEN;
                            /* falls through */
                            case EXLEN:
                                if (state.flags & 0x0400) {
                                    //=== NEEDBITS(16); */
                                    while (bits < 16) {
                                        if (have === 0) { break inf_leave; }
                                        have--;
                                        hold += input[next++] << bits;
                                        bits += 8;
                                    }
                                    //===//
                                    state.length = hold;
                                    if (state.head) {
                                        state.head.extra_len = hold;
                                    }
                                    if (state.flags & 0x0200) {
                                        //=== CRC2(state.check, hold);
                                        hbuf[0] = hold & 0xff;
                                        hbuf[1] = (hold >>> 8) & 0xff;
                                        state.check = crc32(state.check, hbuf, 2, 0);
                                        //===//
                                    }
                                    //=== INITBITS();
                                    hold = 0;
                                    bits = 0;
                                    //===//
                                }
                                else if (state.head) {
                                    state.head.extra = null/*Z_NULL*/;
                                }
                                state.mode = EXTRA;
                            /* falls through */
                            case EXTRA:
                                if (state.flags & 0x0400) {
                                    copy = state.length;
                                    if (copy > have) { copy = have; }
                                    if (copy) {
                                        if (state.head) {
                                            len = state.head.extra_len - state.length;
                                            if (!state.head.extra) {
                                                // Use untyped array for more conveniend processing later
                                                state.head.extra = new Array(state.head.extra_len);
                                            }
                                            utils.arraySet(
                                                state.head.extra,
                                                input,
                                                next,
                                                // extra field is limited to 65536 bytes
                                                // - no need for additional size check
                                                copy,
                                                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                                                len
                                            );
                                            //zmemcpy(state.head.extra + len, next,
                                            //        len + copy > state.head.extra_max ?
                                            //        state.head.extra_max - len : copy);
                                        }
                                        if (state.flags & 0x0200) {
                                            state.check = crc32(state.check, input, copy, next);
                                        }
                                        have -= copy;
                                        next += copy;
                                        state.length -= copy;
                                    }
                                    if (state.length) { break inf_leave; }
                                }
                                state.length = 0;
                                state.mode = NAME;
                            /* falls through */
                            case NAME:
                                if (state.flags & 0x0800) {
                                    if (have === 0) { break inf_leave; }
                                    copy = 0;
                                    do {
                                        // TODO: 2 or 1 bytes?
                                        len = input[next + copy++];
                                        /* use constant limit because in js we should not preallocate memory */
                                        if (state.head && len &&
                                            (state.length < 65536 /*state.head.name_max*/)) {
                                            state.head.name += String.fromCharCode(len);
                                        }
                                    } while (len && copy < have);

                                    if (state.flags & 0x0200) {
                                        state.check = crc32(state.check, input, copy, next);
                                    }
                                    have -= copy;
                                    next += copy;
                                    if (len) { break inf_leave; }
                                }
                                else if (state.head) {
                                    state.head.name = null;
                                }
                                state.length = 0;
                                state.mode = COMMENT;
                            /* falls through */
                            case COMMENT:
                                if (state.flags & 0x1000) {
                                    if (have === 0) { break inf_leave; }
                                    copy = 0;
                                    do {
                                        len = input[next + copy++];
                                        /* use constant limit because in js we should not preallocate memory */
                                        if (state.head && len &&
                                            (state.length < 65536 /*state.head.comm_max*/)) {
                                            state.head.comment += String.fromCharCode(len);
                                        }
                                    } while (len && copy < have);
                                    if (state.flags & 0x0200) {
                                        state.check = crc32(state.check, input, copy, next);
                                    }
                                    have -= copy;
                                    next += copy;
                                    if (len) { break inf_leave; }
                                }
                                else if (state.head) {
                                    state.head.comment = null;
                                }
                                state.mode = HCRC;
                            /* falls through */
                            case HCRC:
                                if (state.flags & 0x0200) {
                                    //=== NEEDBITS(16); */
                                    while (bits < 16) {
                                        if (have === 0) { break inf_leave; }
                                        have--;
                                        hold += input[next++] << bits;
                                        bits += 8;
                                    }
                                    //===//
                                    if (hold !== (state.check & 0xffff)) {
                                        strm.msg = 'header crc mismatch';
                                        state.mode = BAD;
                                        break;
                                    }
                                    //=== INITBITS();
                                    hold = 0;
                                    bits = 0;
                                    //===//
                                }
                                if (state.head) {
                                    state.head.hcrc = ((state.flags >> 9) & 1);
                                    state.head.done = true;
                                }
                                strm.adler = state.check = 0;
                                state.mode = TYPE;
                                break;
                            case DICTID:
                                //=== NEEDBITS(32); */
                                while (bits < 32) {
                                    if (have === 0) { break inf_leave; }
                                    have--;
                                    hold += input[next++] << bits;
                                    bits += 8;
                                }
                                //===//
                                strm.adler = state.check = zswap32(hold);
                                //=== INITBITS();
                                hold = 0;
                                bits = 0;
                                //===//
                                state.mode = DICT;
                            /* falls through */
                            case DICT:
                                if (state.havedict === 0) {
                                    //--- RESTORE() ---
                                    strm.next_out = put;
                                    strm.avail_out = left;
                                    strm.next_in = next;
                                    strm.avail_in = have;
                                    state.hold = hold;
                                    state.bits = bits;
                                    //---
                                    return Z_NEED_DICT;
                                }
                                strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
                                state.mode = TYPE;
                            /* falls through */
                            case TYPE:
                                if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
                            /* falls through */
                            case TYPEDO:
                                if (state.last) {
                                    //--- BYTEBITS() ---//
                                    hold >>>= bits & 7;
                                    bits -= bits & 7;
                                    //---//
                                    state.mode = CHECK;
                                    break;
                                }
                                //=== NEEDBITS(3); */
                                while (bits < 3) {
                                    if (have === 0) { break inf_leave; }
                                    have--;
                                    hold += input[next++] << bits;
                                    bits += 8;
                                }
                                //===//
                                state.last = (hold & 0x01)/*BITS(1)*/;
                                //--- DROPBITS(1) ---//
                                hold >>>= 1;
                                bits -= 1;
                                //---//

                                switch ((hold & 0x03)/*BITS(2)*/) {
                                    case 0:                             /* stored block */
                                        //Tracev((stderr, "inflate:     stored block%s\n",
                                        //        state.last ? " (last)" : ""));
                                        state.mode = STORED;
                                        break;
                                    case 1:                             /* fixed block */
                                        fixedtables(state);
                                        //Tracev((stderr, "inflate:     fixed codes block%s\n",
                                        //        state.last ? " (last)" : ""));
                                        state.mode = LEN_;             /* decode codes */
                                        if (flush === Z_TREES) {
                                            //--- DROPBITS(2) ---//
                                            hold >>>= 2;
                                            bits -= 2;
                                            //---//
                                            break inf_leave;
                                        }
                                        break;
                                    case 2:                             /* dynamic block */
                                        //Tracev((stderr, "inflate:     dynamic codes block%s\n",
                                        //        state.last ? " (last)" : ""));
                                        state.mode = TABLE;
                                        break;
                                    case 3:
                                        strm.msg = 'invalid block type';
                                        state.mode = BAD;
                                }
                                //--- DROPBITS(2) ---//
                                hold >>>= 2;
                                bits -= 2;
                                //---//
                                break;
                            case STORED:
                                //--- BYTEBITS() ---// /* go to byte boundary */
                                hold >>>= bits & 7;
                                bits -= bits & 7;
                                //---//
                                //=== NEEDBITS(32); */
                                while (bits < 32) {
                                    if (have === 0) { break inf_leave; }
                                    have--;
                                    hold += input[next++] << bits;
                                    bits += 8;
                                }
                                //===//
                                if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
                                    strm.msg = 'invalid stored block lengths';
                                    state.mode = BAD;
                                    break;
                                }
                                state.length = hold & 0xffff;
                                //Tracev((stderr, "inflate:       stored length %u\n",
                                //        state.length));
                                //=== INITBITS();
                                hold = 0;
                                bits = 0;
                                //===//
                                state.mode = COPY_;
                                if (flush === Z_TREES) { break inf_leave; }
                            /* falls through */
                            case COPY_:
                                state.mode = COPY;
                            /* falls through */
                            case COPY:
                                copy = state.length;
                                if (copy) {
                                    if (copy > have) { copy = have; }
                                    if (copy > left) { copy = left; }
                                    if (copy === 0) { break inf_leave; }
                                    //--- zmemcpy(put, next, copy); ---
                                    utils.arraySet(output, input, next, copy, put);
                                    //---//
                                    have -= copy;
                                    next += copy;
                                    left -= copy;
                                    put += copy;
                                    state.length -= copy;
                                    break;
                                }
                                //Tracev((stderr, "inflate:       stored end\n"));
                                state.mode = TYPE;
                                break;
                            case TABLE:
                                //=== NEEDBITS(14); */
                                while (bits < 14) {
                                    if (have === 0) { break inf_leave; }
                                    have--;
                                    hold += input[next++] << bits;
                                    bits += 8;
                                }
                                //===//
                                state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
                                //--- DROPBITS(5) ---//
                                hold >>>= 5;
                                bits -= 5;
                                //---//
                                state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
                                //--- DROPBITS(5) ---//
                                hold >>>= 5;
                                bits -= 5;
                                //---//
                                state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
                                //--- DROPBITS(4) ---//
                                hold >>>= 4;
                                bits -= 4;
                                //---//
                                //#ifndef PKZIP_BUG_WORKAROUND
                                if (state.nlen > 286 || state.ndist > 30) {
                                    strm.msg = 'too many length or distance symbols';
                                    state.mode = BAD;
                                    break;
                                }
                                //#endif
                                //Tracev((stderr, "inflate:       table sizes ok\n"));
                                state.have = 0;
                                state.mode = LENLENS;
                            /* falls through */
                            case LENLENS:
                                while (state.have < state.ncode) {
                                    //=== NEEDBITS(3);
                                    while (bits < 3) {
                                        if (have === 0) { break inf_leave; }
                                        have--;
                                        hold += input[next++] << bits;
                                        bits += 8;
                                    }
                                    //===//
                                    state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
                                    //--- DROPBITS(3) ---//
                                    hold >>>= 3;
                                    bits -= 3;
                                    //---//
                                }
                                while (state.have < 19) {
                                    state.lens[order[state.have++]] = 0;
                                }
                                // We have separate tables & no pointers. 2 commented lines below not needed.
                                //state.next = state.codes;
                                //state.lencode = state.next;
                                // Switch to use dynamic table
                                state.lencode = state.lendyn;
                                state.lenbits = 7;

                                opts = { bits: state.lenbits };
                                ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
                                state.lenbits = opts.bits;

                                if (ret) {
                                    strm.msg = 'invalid code lengths set';
                                    state.mode = BAD;
                                    break;
                                }
                                //Tracev((stderr, "inflate:       code lengths ok\n"));
                                state.have = 0;
                                state.mode = CODELENS;
                            /* falls through */
                            case CODELENS:
                                while (state.have < state.nlen + state.ndist) {
                                    for (;;) {
                                        here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
                                        here_bits = here >>> 24;
                                        here_op = (here >>> 16) & 0xff;
                                        here_val = here & 0xffff;

                                        if ((here_bits) <= bits) { break; }
                                        //--- PULLBYTE() ---//
                                        if (have === 0) { break inf_leave; }
                                        have--;
                                        hold += input[next++] << bits;
                                        bits += 8;
                                        //---//
                                    }
                                    if (here_val < 16) {
                                        //--- DROPBITS(here.bits) ---//
                                        hold >>>= here_bits;
                                        bits -= here_bits;
                                        //---//
                                        state.lens[state.have++] = here_val;
                                    }
                                    else {
                                        if (here_val === 16) {
                                            //=== NEEDBITS(here.bits + 2);
                                            n = here_bits + 2;
                                            while (bits < n) {
                                                if (have === 0) { break inf_leave; }
                                                have--;
                                                hold += input[next++] << bits;
                                                bits += 8;
                                            }
                                            //===//
                                            //--- DROPBITS(here.bits) ---//
                                            hold >>>= here_bits;
                                            bits -= here_bits;
                                            //---//
                                            if (state.have === 0) {
                                                strm.msg = 'invalid bit length repeat';
                                                state.mode = BAD;
                                                break;
                                            }
                                            len = state.lens[state.have - 1];
                                            copy = 3 + (hold & 0x03);//BITS(2);
                                            //--- DROPBITS(2) ---//
                                            hold >>>= 2;
                                            bits -= 2;
                                            //---//
                                        }
                                        else if (here_val === 17) {
                                            //=== NEEDBITS(here.bits + 3);
                                            n = here_bits + 3;
                                            while (bits < n) {
                                                if (have === 0) { break inf_leave; }
                                                have--;
                                                hold += input[next++] << bits;
                                                bits += 8;
                                            }
                                            //===//
                                            //--- DROPBITS(here.bits) ---//
                                            hold >>>= here_bits;
                                            bits -= here_bits;
                                            //---//
                                            len = 0;
                                            copy = 3 + (hold & 0x07);//BITS(3);
                                            //--- DROPBITS(3) ---//
                                            hold >>>= 3;
                                            bits -= 3;
                                            //---//
                                        }
                                        else {
                                            //=== NEEDBITS(here.bits + 7);
                                            n = here_bits + 7;
                                            while (bits < n) {
                                                if (have === 0) { break inf_leave; }
                                                have--;
                                                hold += input[next++] << bits;
                                                bits += 8;
                                            }
                                            //===//
                                            //--- DROPBITS(here.bits) ---//
                                            hold >>>= here_bits;
                                            bits -= here_bits;
                                            //---//
                                            len = 0;
                                            copy = 11 + (hold & 0x7f);//BITS(7);
                                            //--- DROPBITS(7) ---//
                                            hold >>>= 7;
                                            bits -= 7;
                                            //---//
                                        }
                                        if (state.have + copy > state.nlen + state.ndist) {
                                            strm.msg = 'invalid bit length repeat';
                                            state.mode = BAD;
                                            break;
                                        }
                                        while (copy--) {
                                            state.lens[state.have++] = len;
                                        }
                                    }
                                }

                                /* handle error breaks in while */
                                if (state.mode === BAD) { break; }

                                /* check for end-of-block code (better have one) */
                                if (state.lens[256] === 0) {
                                    strm.msg = 'invalid code -- missing end-of-block';
                                    state.mode = BAD;
                                    break;
                                }

                                /* build code tables -- note: do not change the lenbits or distbits
                                 values here (9 and 6) without reading the comments in inftrees.h
                                 concerning the ENOUGH constants, which depend on those values */
                                state.lenbits = 9;

                                opts = { bits: state.lenbits };
                                ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
                                // We have separate tables & no pointers. 2 commented lines below not needed.
                                // state.next_index = opts.table_index;
                                state.lenbits = opts.bits;
                                // state.lencode = state.next;

                                if (ret) {
                                    strm.msg = 'invalid literal/lengths set';
                                    state.mode = BAD;
                                    break;
                                }

                                state.distbits = 6;
                                //state.distcode.copy(state.codes);
                                // Switch to use dynamic table
                                state.distcode = state.distdyn;
                                opts = { bits: state.distbits };
                                ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
                                // We have separate tables & no pointers. 2 commented lines below not needed.
                                // state.next_index = opts.table_index;
                                state.distbits = opts.bits;
                                // state.distcode = state.next;

                                if (ret) {
                                    strm.msg = 'invalid distances set';
                                    state.mode = BAD;
                                    break;
                                }
                                //Tracev((stderr, 'inflate:       codes ok\n'));
                                state.mode = LEN_;
                                if (flush === Z_TREES) { break inf_leave; }
                            /* falls through */
                            case LEN_:
                                state.mode = LEN;
                            /* falls through */
                            case LEN:
                                if (have >= 6 && left >= 258) {
                                    //--- RESTORE() ---
                                    strm.next_out = put;
                                    strm.avail_out = left;
                                    strm.next_in = next;
                                    strm.avail_in = have;
                                    state.hold = hold;
                                    state.bits = bits;
                                    //---
                                    inflate_fast(strm, _out);
                                    //--- LOAD() ---
                                    put = strm.next_out;
                                    output = strm.output;
                                    left = strm.avail_out;
                                    next = strm.next_in;
                                    input = strm.input;
                                    have = strm.avail_in;
                                    hold = state.hold;
                                    bits = state.bits;
                                    //---

                                    if (state.mode === TYPE) {
                                        state.back = -1;
                                    }
                                    break;
                                }
                                state.back = 0;
                                for (;;) {
                                    here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
                                    here_bits = here >>> 24;
                                    here_op = (here >>> 16) & 0xff;
                                    here_val = here & 0xffff;

                                    if (here_bits <= bits) { break; }
                                    //--- PULLBYTE() ---//
                                    if (have === 0) { break inf_leave; }
                                    have--;
                                    hold += input[next++] << bits;
                                    bits += 8;
                                    //---//
                                }
                                if (here_op && (here_op & 0xf0) === 0) {
                                    last_bits = here_bits;
                                    last_op = here_op;
                                    last_val = here_val;
                                    for (;;) {
                                        here = state.lencode[last_val +
                                        ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
                                        here_bits = here >>> 24;
                                        here_op = (here >>> 16) & 0xff;
                                        here_val = here & 0xffff;

                                        if ((last_bits + here_bits) <= bits) { break; }
                                        //--- PULLBYTE() ---//
                                        if (have === 0) { break inf_leave; }
                                        have--;
                                        hold += input[next++] << bits;
                                        bits += 8;
                                        //---//
                                    }
                                    //--- DROPBITS(last.bits) ---//
                                    hold >>>= last_bits;
                                    bits -= last_bits;
                                    //---//
                                    state.back += last_bits;
                                }
                                //--- DROPBITS(here.bits) ---//
                                hold >>>= here_bits;
                                bits -= here_bits;
                                //---//
                                state.back += here_bits;
                                state.length = here_val;
                                if (here_op === 0) {
                                    //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
                                    //        "inflate:         literal '%c'\n" :
                                    //        "inflate:         literal 0x%02x\n", here.val));
                                    state.mode = LIT;
                                    break;
                                }
                                if (here_op & 32) {
                                    //Tracevv((stderr, "inflate:         end of block\n"));
                                    state.back = -1;
                                    state.mode = TYPE;
                                    break;
                                }
                                if (here_op & 64) {
                                    strm.msg = 'invalid literal/length code';
                                    state.mode = BAD;
                                    break;
                                }
                                state.extra = here_op & 15;
                                state.mode = LENEXT;
                            /* falls through */
                            case LENEXT:
                                if (state.extra) {
                                    //=== NEEDBITS(state.extra);
                                    n = state.extra;
                                    while (bits < n) {
                                        if (have === 0) { break inf_leave; }
                                        have--;
                                        hold += input[next++] << bits;
                                        bits += 8;
                                    }
                                    //===//
                                    state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
                                    //--- DROPBITS(state.extra) ---//
                                    hold >>>= state.extra;
                                    bits -= state.extra;
                                    //---//
                                    state.back += state.extra;
                                }
                                //Tracevv((stderr, "inflate:         length %u\n", state.length));
                                state.was = state.length;
                                state.mode = DIST;
                            /* falls through */
                            case DIST:
                                for (;;) {
                                    here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
                                    here_bits = here >>> 24;
                                    here_op = (here >>> 16) & 0xff;
                                    here_val = here & 0xffff;

                                    if ((here_bits) <= bits) { break; }
                                    //--- PULLBYTE() ---//
                                    if (have === 0) { break inf_leave; }
                                    have--;
                                    hold += input[next++] << bits;
                                    bits += 8;
                                    //---//
                                }
                                if ((here_op & 0xf0) === 0) {
                                    last_bits = here_bits;
                                    last_op = here_op;
                                    last_val = here_val;
                                    for (;;) {
                                        here = state.distcode[last_val +
                                        ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
                                        here_bits = here >>> 24;
                                        here_op = (here >>> 16) & 0xff;
                                        here_val = here & 0xffff;

                                        if ((last_bits + here_bits) <= bits) { break; }
                                        //--- PULLBYTE() ---//
                                        if (have === 0) { break inf_leave; }
                                        have--;
                                        hold += input[next++] << bits;
                                        bits += 8;
                                        //---//
                                    }
                                    //--- DROPBITS(last.bits) ---//
                                    hold >>>= last_bits;
                                    bits -= last_bits;
                                    //---//
                                    state.back += last_bits;
                                }
                                //--- DROPBITS(here.bits) ---//
                                hold >>>= here_bits;
                                bits -= here_bits;
                                //---//
                                state.back += here_bits;
                                if (here_op & 64) {
                                    strm.msg = 'invalid distance code';
                                    state.mode = BAD;
                                    break;
                                }
                                state.offset = here_val;
                                state.extra = (here_op) & 15;
                                state.mode = DISTEXT;
                            /* falls through */
                            case DISTEXT:
                                if (state.extra) {
                                    //=== NEEDBITS(state.extra);
                                    n = state.extra;
                                    while (bits < n) {
                                        if (have === 0) { break inf_leave; }
                                        have--;
                                        hold += input[next++] << bits;
                                        bits += 8;
                                    }
                                    //===//
                                    state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
                                    //--- DROPBITS(state.extra) ---//
                                    hold >>>= state.extra;
                                    bits -= state.extra;
                                    //---//
                                    state.back += state.extra;
                                }
                                //#ifdef INFLATE_STRICT
                                if (state.offset > state.dmax) {
                                    strm.msg = 'invalid distance too far back';
                                    state.mode = BAD;
                                    break;
                                }
                                //#endif
                                //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
                                state.mode = MATCH;
                            /* falls through */
                            case MATCH:
                                if (left === 0) { break inf_leave; }
                                copy = _out - left;
                                if (state.offset > copy) {         /* copy from window */
                                    copy = state.offset - copy;
                                    if (copy > state.whave) {
                                        if (state.sane) {
                                            strm.msg = 'invalid distance too far back';
                                            state.mode = BAD;
                                            break;
                                        }
                                        // (!) This block is disabled in zlib defailts,
                                        // don't enable it for binary compatibility
                                        //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
                                        //          Trace((stderr, "inflate.c too far\n"));
                                        //          copy -= state.whave;
                                        //          if (copy > state.length) { copy = state.length; }
                                        //          if (copy > left) { copy = left; }
                                        //          left -= copy;
                                        //          state.length -= copy;
                                        //          do {
                                        //            output[put++] = 0;
                                        //          } while (--copy);
                                        //          if (state.length === 0) { state.mode = LEN; }
                                        //          break;
                                        //#endif
                                    }
                                    if (copy > state.wnext) {
                                        copy -= state.wnext;
                                        from = state.wsize - copy;
                                    }
                                    else {
                                        from = state.wnext - copy;
                                    }
                                    if (copy > state.length) { copy = state.length; }
                                    from_source = state.window;
                                }
                                else {                              /* copy from output */
                                    from_source = output;
                                    from = put - state.offset;
                                    copy = state.length;
                                }
                                if (copy > left) { copy = left; }
                                left -= copy;
                                state.length -= copy;
                                do {
                                    output[put++] = from_source[from++];
                                } while (--copy);
                                if (state.length === 0) { state.mode = LEN; }
                                break;
                            case LIT:
                                if (left === 0) { break inf_leave; }
                                output[put++] = state.length;
                                left--;
                                state.mode = LEN;
                                break;
                            case CHECK:
                                if (state.wrap) {
                                    //=== NEEDBITS(32);
                                    while (bits < 32) {
                                        if (have === 0) { break inf_leave; }
                                        have--;
                                        // Use '|' insdead of '+' to make sure that result is signed
                                        hold |= input[next++] << bits;
                                        bits += 8;
                                    }
                                    //===//
                                    _out -= left;
                                    strm.total_out += _out;
                                    state.total += _out;
                                    if (_out) {
                                        strm.adler = state.check =
                                            /*UPDATE(state.check, put - _out, _out);*/
                                            (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

                                    }
                                    _out = left;
                                    // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
                                    if ((state.flags ? hold : zswap32(hold)) !== state.check) {
                                        strm.msg = 'incorrect data check';
                                        state.mode = BAD;
                                        break;
                                    }
                                    //=== INITBITS();
                                    hold = 0;
                                    bits = 0;
                                    //===//
                                    //Tracev((stderr, "inflate:   check matches trailer\n"));
                                }
                                state.mode = LENGTH;
                            /* falls through */
                            case LENGTH:
                                if (state.wrap && state.flags) {
                                    //=== NEEDBITS(32);
                                    while (bits < 32) {
                                        if (have === 0) { break inf_leave; }
                                        have--;
                                        hold += input[next++] << bits;
                                        bits += 8;
                                    }
                                    //===//
                                    if (hold !== (state.total & 0xffffffff)) {
                                        strm.msg = 'incorrect length check';
                                        state.mode = BAD;
                                        break;
                                    }
                                    //=== INITBITS();
                                    hold = 0;
                                    bits = 0;
                                    //===//
                                    //Tracev((stderr, "inflate:   length matches trailer\n"));
                                }
                                state.mode = DONE;
                            /* falls through */
                            case DONE:
                                ret = Z_STREAM_END;
                                break inf_leave;
                            case BAD:
                                ret = Z_DATA_ERROR;
                                break inf_leave;
                            case MEM:
                                return Z_MEM_ERROR;
                            case SYNC:
                            /* falls through */
                            default:
                                return Z_STREAM_ERROR;
                        }
                    }

                // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

                /*
                 Return from inflate(), updating the total counts and the check value.
                 If there was no progress during the inflate() call, return a buffer
                 error.  Call updatewindow() to create and/or update the window state.
                 Note: a memory error from inflate() is non-recoverable.
                 */

                //--- RESTORE() ---
                strm.next_out = put;
                strm.avail_out = left;
                strm.next_in = next;
                strm.avail_in = have;
                state.hold = hold;
                state.bits = bits;
                //---

                if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                    (state.mode < CHECK || flush !== Z_FINISH))) {
                    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
                        state.mode = MEM;
                        return Z_MEM_ERROR;
                    }
                }
                _in -= strm.avail_in;
                _out -= strm.avail_out;
                strm.total_in += _in;
                strm.total_out += _out;
                state.total += _out;
                if (state.wrap && _out) {
                    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
                        (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
                }
                strm.data_type = state.bits + (state.last ? 64 : 0) +
                    (state.mode === TYPE ? 128 : 0) +
                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
                if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
                    ret = Z_BUF_ERROR;
                }
                return ret;
            }

            function inflateEnd(strm) {

                if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
                    return Z_STREAM_ERROR;
                }

                var state = strm.state;
                if (state.window) {
                    state.window = null;
                }
                strm.state = null;
                return Z_OK;
            }

            function inflateGetHeader(strm, head) {
                var state;

                /* check state */
                if (!strm || !strm.state) { return Z_STREAM_ERROR; }
                state = strm.state;
                if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

                /* save header structure */
                state.head = head;
                head.done = false;
                return Z_OK;
            }

            function inflateSetDictionary(strm, dictionary) {
                var dictLength = dictionary.length;

                var state;
                var dictid;
                var ret;

                /* check state */
                if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
                state = strm.state;

                if (state.wrap !== 0 && state.mode !== DICT) {
                    return Z_STREAM_ERROR;
                }

                /* check for correct dictionary identifier */
                if (state.mode === DICT) {
                    dictid = 1; /* adler32(0, null, 0)*/
                    /* dictid = adler32(dictid, dictionary, dictLength); */
                    dictid = adler32(dictid, dictionary, dictLength, 0);
                    if (dictid !== state.check) {
                        return Z_DATA_ERROR;
                    }
                }
                /* copy dictionary to window using updatewindow(), which will amend the
                 existing dictionary if appropriate */
                ret = updatewindow(strm, dictionary, dictLength, dictLength);
                if (ret) {
                    state.mode = MEM;
                    return Z_MEM_ERROR;
                }
                state.havedict = 1;
                // Tracev((stderr, "inflate:   dictionary set\n"));
                return Z_OK;
            }

            exports.inflateReset = inflateReset;
            exports.inflateReset2 = inflateReset2;
            exports.inflateResetKeep = inflateResetKeep;
            exports.inflateInit = inflateInit;
            exports.inflateInit2 = inflateInit2;
            exports.inflate = inflate;
            exports.inflateEnd = inflateEnd;
            exports.inflateGetHeader = inflateGetHeader;
            exports.inflateSetDictionary = inflateSetDictionary;
            exports.inflateInfo = 'pako inflate (from Nodeca project)';

            /* Not implemented
             exports.inflateCopy = inflateCopy;
             exports.inflateGetDictionary = inflateGetDictionary;
             exports.inflateMark = inflateMark;
             exports.inflatePrime = inflatePrime;
             exports.inflateSync = inflateSync;
             exports.inflateSyncPoint = inflateSyncPoint;
             exports.inflateUndermine = inflateUndermine;
             */


            /***/ }),
        /* 69 */
        /***/ (function(module, exports) {

            'use strict';

            // See state defs from inflate.js
            var BAD = 30;       /* got a data error -- remain here until reset */
            var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */

            /*
             Decode literal, length, and distance codes and write out the resulting
             literal and match bytes until either not enough input or output is
             available, an end-of-block is encountered, or a data error is encountered.
             When large enough input and output buffers are supplied to inflate(), for
             example, a 16K input buffer and a 64K output buffer, more than 95% of the
             inflate execution time is spent in this routine.

             Entry assumptions:

             state.mode === LEN
             strm.avail_in >= 6
             strm.avail_out >= 258
             start >= strm.avail_out
             state.bits < 8

             On return, state.mode is one of:

             LEN -- ran out of enough output space or enough available input
             TYPE -- reached end of block code, inflate() to interpret next block
             BAD -- error in block data

             Notes:

             - The maximum input bits used by a length/distance pair is 15 bits for the
             length code, 5 bits for the length extra, 15 bits for the distance code,
             and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
             Therefore if strm.avail_in >= 6, then there is enough input to avoid
             checking for available input while decoding.

             - The maximum bytes that a single length/distance pair can output is 258
             bytes, which is the maximum length that can be coded.  inflate_fast()
             requires strm.avail_out >= 258 for each loop to avoid checking for
             output space.
             */
            module.exports = function inflate_fast(strm, start) {
                var state;
                var _in;                    /* local strm.input */
                var last;                   /* have enough input while in < last */
                var _out;                   /* local strm.output */
                var beg;                    /* inflate()'s initial strm.output */
                var end;                    /* while out < end, enough space available */
                //#ifdef INFLATE_STRICT
                var dmax;                   /* maximum distance from zlib header */
                //#endif
                var wsize;                  /* window size or zero if not using window */
                var whave;                  /* valid bytes in the window */
                var wnext;                  /* window write index */
                // Use `s_window` instead `window`, avoid conflict with instrumentation tools
                var s_window;               /* allocated sliding window, if wsize != 0 */
                var hold;                   /* local strm.hold */
                var bits;                   /* local strm.bits */
                var lcode;                  /* local strm.lencode */
                var dcode;                  /* local strm.distcode */
                var lmask;                  /* mask for first level of length codes */
                var dmask;                  /* mask for first level of distance codes */
                var here;                   /* retrieved table entry */
                var op;                     /* code bits, operation, extra bits, or */
                /*  window position, window bytes to copy */
                var len;                    /* match length, unused bytes */
                var dist;                   /* match distance */
                var from;                   /* where to copy match from */
                var from_source;


                var input, output; // JS specific, because we have no pointers

                /* copy state to local variables */
                state = strm.state;
                //here = state.here;
                _in = strm.next_in;
                input = strm.input;
                last = _in + (strm.avail_in - 5);
                _out = strm.next_out;
                output = strm.output;
                beg = _out - (start - strm.avail_out);
                end = _out + (strm.avail_out - 257);
                //#ifdef INFLATE_STRICT
                dmax = state.dmax;
                //#endif
                wsize = state.wsize;
                whave = state.whave;
                wnext = state.wnext;
                s_window = state.window;
                hold = state.hold;
                bits = state.bits;
                lcode = state.lencode;
                dcode = state.distcode;
                lmask = (1 << state.lenbits) - 1;
                dmask = (1 << state.distbits) - 1;


                /* decode literals and length/distances until end-of-block or not enough
                 input data or output space */

                top:
                    do {
                        if (bits < 15) {
                            hold += input[_in++] << bits;
                            bits += 8;
                            hold += input[_in++] << bits;
                            bits += 8;
                        }

                        here = lcode[hold & lmask];

                        dolen:
                            for (;;) { // Goto emulation
                                op = here >>> 24/*here.bits*/;
                                hold >>>= op;
                                bits -= op;
                                op = (here >>> 16) & 0xff/*here.op*/;
                                if (op === 0) {                          /* literal */
                                    //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
                                    //        "inflate:         literal '%c'\n" :
                                    //        "inflate:         literal 0x%02x\n", here.val));
                                    output[_out++] = here & 0xffff/*here.val*/;
                                }
                                else if (op & 16) {                     /* length base */
                                    len = here & 0xffff/*here.val*/;
                                    op &= 15;                           /* number of extra bits */
                                    if (op) {
                                        if (bits < op) {
                                            hold += input[_in++] << bits;
                                            bits += 8;
                                        }
                                        len += hold & ((1 << op) - 1);
                                        hold >>>= op;
                                        bits -= op;
                                    }
                                    //Tracevv((stderr, "inflate:         length %u\n", len));
                                    if (bits < 15) {
                                        hold += input[_in++] << bits;
                                        bits += 8;
                                        hold += input[_in++] << bits;
                                        bits += 8;
                                    }
                                    here = dcode[hold & dmask];

                                    dodist:
                                        for (;;) { // goto emulation
                                            op = here >>> 24/*here.bits*/;
                                            hold >>>= op;
                                            bits -= op;
                                            op = (here >>> 16) & 0xff/*here.op*/;

                                            if (op & 16) {                      /* distance base */
                                                dist = here & 0xffff/*here.val*/;
                                                op &= 15;                       /* number of extra bits */
                                                if (bits < op) {
                                                    hold += input[_in++] << bits;
                                                    bits += 8;
                                                    if (bits < op) {
                                                        hold += input[_in++] << bits;
                                                        bits += 8;
                                                    }
                                                }
                                                dist += hold & ((1 << op) - 1);
                                                //#ifdef INFLATE_STRICT
                                                if (dist > dmax) {
                                                    strm.msg = 'invalid distance too far back';
                                                    state.mode = BAD;
                                                    break top;
                                                }
                                                //#endif
                                                hold >>>= op;
                                                bits -= op;
                                                //Tracevv((stderr, "inflate:         distance %u\n", dist));
                                                op = _out - beg;                /* max distance in output */
                                                if (dist > op) {                /* see if copy from window */
                                                    op = dist - op;               /* distance back in window */
                                                    if (op > whave) {
                                                        if (state.sane) {
                                                            strm.msg = 'invalid distance too far back';
                                                            state.mode = BAD;
                                                            break top;
                                                        }

                                                        // (!) This block is disabled in zlib defailts,
                                                        // don't enable it for binary compatibility
                                                        //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
                                                        //                if (len <= op - whave) {
                                                        //                  do {
                                                        //                    output[_out++] = 0;
                                                        //                  } while (--len);
                                                        //                  continue top;
                                                        //                }
                                                        //                len -= op - whave;
                                                        //                do {
                                                        //                  output[_out++] = 0;
                                                        //                } while (--op > whave);
                                                        //                if (op === 0) {
                                                        //                  from = _out - dist;
                                                        //                  do {
                                                        //                    output[_out++] = output[from++];
                                                        //                  } while (--len);
                                                        //                  continue top;
                                                        //                }
                                                        //#endif
                                                    }
                                                    from = 0; // window index
                                                    from_source = s_window;
                                                    if (wnext === 0) {           /* very common case */
                                                        from += wsize - op;
                                                        if (op < len) {         /* some from window */
                                                            len -= op;
                                                            do {
                                                                output[_out++] = s_window[from++];
                                                            } while (--op);
                                                            from = _out - dist;  /* rest from output */
                                                            from_source = output;
                                                        }
                                                    }
                                                    else if (wnext < op) {      /* wrap around window */
                                                        from += wsize + wnext - op;
                                                        op -= wnext;
                                                        if (op < len) {         /* some from end of window */
                                                            len -= op;
                                                            do {
                                                                output[_out++] = s_window[from++];
                                                            } while (--op);
                                                            from = 0;
                                                            if (wnext < len) {  /* some from start of window */
                                                                op = wnext;
                                                                len -= op;
                                                                do {
                                                                    output[_out++] = s_window[from++];
                                                                } while (--op);
                                                                from = _out - dist;      /* rest from output */
                                                                from_source = output;
                                                            }
                                                        }
                                                    }
                                                    else {                      /* contiguous in window */
                                                        from += wnext - op;
                                                        if (op < len) {         /* some from window */
                                                            len -= op;
                                                            do {
                                                                output[_out++] = s_window[from++];
                                                            } while (--op);
                                                            from = _out - dist;  /* rest from output */
                                                            from_source = output;
                                                        }
                                                    }
                                                    while (len > 2) {
                                                        output[_out++] = from_source[from++];
                                                        output[_out++] = from_source[from++];
                                                        output[_out++] = from_source[from++];
                                                        len -= 3;
                                                    }
                                                    if (len) {
                                                        output[_out++] = from_source[from++];
                                                        if (len > 1) {
                                                            output[_out++] = from_source[from++];
                                                        }
                                                    }
                                                }
                                                else {
                                                    from = _out - dist;          /* copy direct from output */
                                                    do {                        /* minimum length is three */
                                                        output[_out++] = output[from++];
                                                        output[_out++] = output[from++];
                                                        output[_out++] = output[from++];
                                                        len -= 3;
                                                    } while (len > 2);
                                                    if (len) {
                                                        output[_out++] = output[from++];
                                                        if (len > 1) {
                                                            output[_out++] = output[from++];
                                                        }
                                                    }
                                                }
                                            }
                                            else if ((op & 64) === 0) {          /* 2nd level distance code */
                                                here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
                                                continue dodist;
                                            }
                                            else {
                                                strm.msg = 'invalid distance code';
                                                state.mode = BAD;
                                                break top;
                                            }

                                            break; // need to emulate goto via "continue"
                                        }
                                }
                                else if ((op & 64) === 0) {              /* 2nd level length code */
                                    here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
                                    continue dolen;
                                }
                                else if (op & 32) {                     /* end-of-block */
                                    //Tracevv((stderr, "inflate:         end of block\n"));
                                    state.mode = TYPE;
                                    break top;
                                }
                                else {
                                    strm.msg = 'invalid literal/length code';
                                    state.mode = BAD;
                                    break top;
                                }

                                break; // need to emulate goto via "continue"
                            }
                    } while (_in < last && _out < end);

                /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
                len = bits >> 3;
                _in -= len;
                bits -= len << 3;
                hold &= (1 << bits) - 1;

                /* update state and return */
                strm.next_in = _in;
                strm.next_out = _out;
                strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
                strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
                state.hold = hold;
                state.bits = bits;
                return;
            };


            /***/ }),
        /* 70 */
        /***/ (function(module, exports, __webpack_require__) {

            'use strict';


            var utils = __webpack_require__(64);

            var MAXBITS = 15;
            var ENOUGH_LENS = 852;
            var ENOUGH_DISTS = 592;
            //var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

            var CODES = 0;
            var LENS = 1;
            var DISTS = 2;

            var lbase = [ /* Length codes 257..285 base */
                3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
                35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
            ];

            var lext = [ /* Length codes 257..285 extra */
                16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
                19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
            ];

            var dbase = [ /* Distance codes 0..29 base */
                1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
                257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
                8193, 12289, 16385, 24577, 0, 0
            ];

            var dext = [ /* Distance codes 0..29 extra */
                16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
                23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
                28, 28, 29, 29, 64, 64
            ];

            module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
            {
                var bits = opts.bits;
                //here = opts.here; /* table entry for duplication */

                var len = 0;               /* a code's length in bits */
                var sym = 0;               /* index of code symbols */
                var min = 0, max = 0;          /* minimum and maximum code lengths */
                var root = 0;              /* number of index bits for root table */
                var curr = 0;              /* number of index bits for current table */
                var drop = 0;              /* code bits to drop for sub-table */
                var left = 0;                   /* number of prefix codes available */
                var used = 0;              /* code entries in table used */
                var huff = 0;              /* Huffman code */
                var incr;              /* for incrementing code, index */
                var fill;              /* index for replicating entries */
                var low;               /* low bits for current root entry */
                var mask;              /* mask for low root bits */
                var next;             /* next available space in table */
                var base = null;     /* base value table to use */
                var base_index = 0;
                //  var shoextra;    /* extra bits table to use */
                var end;                    /* use base and extra for symbol > end */
                var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
                var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
                var extra = null;
                var extra_index = 0;

                var here_bits, here_op, here_val;

                /*
                 Process a set of code lengths to create a canonical Huffman code.  The
                 code lengths are lens[0..codes-1].  Each length corresponds to the
                 symbols 0..codes-1.  The Huffman code is generated by first sorting the
                 symbols by length from short to long, and retaining the symbol order
                 for codes with equal lengths.  Then the code starts with all zero bits
                 for the first code of the shortest length, and the codes are integer
                 increments for the same length, and zeros are appended as the length
                 increases.  For the deflate format, these bits are stored backwards
                 from their more natural integer increment ordering, and so when the
                 decoding tables are built in the large loop below, the integer codes
                 are incremented backwards.

                 This routine assumes, but does not check, that all of the entries in
                 lens[] are in the range 0..MAXBITS.  The caller must assure this.
                 1..MAXBITS is interpreted as that code length.  zero means that that
                 symbol does not occur in this code.

                 The codes are sorted by computing a count of codes for each length,
                 creating from that a table of starting indices for each length in the
                 sorted table, and then entering the symbols in order in the sorted
                 table.  The sorted table is work[], with that space being provided by
                 the caller.

                 The length counts are used for other purposes as well, i.e. finding
                 the minimum and maximum length codes, determining if there are any
                 codes at all, checking for a valid set of lengths, and looking ahead
                 at length counts to determine sub-table sizes when building the
                 decoding tables.
                 */

                /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
                for (len = 0; len <= MAXBITS; len++) {
                    count[len] = 0;
                }
                for (sym = 0; sym < codes; sym++) {
                    count[lens[lens_index + sym]]++;
                }

                /* bound code lengths, force root to be within code lengths */
                root = bits;
                for (max = MAXBITS; max >= 1; max--) {
                    if (count[max] !== 0) { break; }
                }
                if (root > max) {
                    root = max;
                }
                if (max === 0) {                     /* no symbols to code at all */
                    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
                    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
                    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
                    table[table_index++] = (1 << 24) | (64 << 16) | 0;


                    //table.op[opts.table_index] = 64;
                    //table.bits[opts.table_index] = 1;
                    //table.val[opts.table_index++] = 0;
                    table[table_index++] = (1 << 24) | (64 << 16) | 0;

                    opts.bits = 1;
                    return 0;     /* no symbols, but wait for decoding to report error */
                }
                for (min = 1; min < max; min++) {
                    if (count[min] !== 0) { break; }
                }
                if (root < min) {
                    root = min;
                }

                /* check for an over-subscribed or incomplete set of lengths */
                left = 1;
                for (len = 1; len <= MAXBITS; len++) {
                    left <<= 1;
                    left -= count[len];
                    if (left < 0) {
                        return -1;
                    }        /* over-subscribed */
                }
                if (left > 0 && (type === CODES || max !== 1)) {
                    return -1;                      /* incomplete set */
                }

                /* generate offsets into symbol table for each length for sorting */
                offs[1] = 0;
                for (len = 1; len < MAXBITS; len++) {
                    offs[len + 1] = offs[len] + count[len];
                }

                /* sort symbols by length, by symbol order within each length */
                for (sym = 0; sym < codes; sym++) {
                    if (lens[lens_index + sym] !== 0) {
                        work[offs[lens[lens_index + sym]]++] = sym;
                    }
                }

                /*
                 Create and fill in decoding tables.  In this loop, the table being
                 filled is at next and has curr index bits.  The code being used is huff
                 with length len.  That code is converted to an index by dropping drop
                 bits off of the bottom.  For codes where len is less than drop + curr,
                 those top drop + curr - len bits are incremented through all values to
                 fill the table with replicated entries.

                 root is the number of index bits for the root table.  When len exceeds
                 root, sub-tables are created pointed to by the root entry with an index
                 of the low root bits of huff.  This is saved in low to check for when a
                 new sub-table should be started.  drop is zero when the root table is
                 being filled, and drop is root when sub-tables are being filled.

                 When a new sub-table is needed, it is necessary to look ahead in the
                 code lengths to determine what size sub-table is needed.  The length
                 counts are used for this, and so count[] is decremented as codes are
                 entered in the tables.

                 used keeps track of how many table entries have been allocated from the
                 provided *table space.  It is checked for LENS and DIST tables against
                 the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
                 the initial root table size constants.  See the comments in inftrees.h
                 for more information.

                 sym increments through all symbols, and the loop terminates when
                 all codes of length max, i.e. all codes, have been processed.  This
                 routine permits incomplete codes, so another loop after this one fills
                 in the rest of the decoding tables with invalid code markers.
                 */

                /* set up for code type */
                // poor man optimization - use if-else instead of switch,
                // to avoid deopts in old v8
                if (type === CODES) {
                    base = extra = work;    /* dummy value--not used */
                    end = 19;

                } else if (type === LENS) {
                    base = lbase;
                    base_index -= 257;
                    extra = lext;
                    extra_index -= 257;
                    end = 256;

                } else {                    /* DISTS */
                    base = dbase;
                    extra = dext;
                    end = -1;
                }

                /* initialize opts for loop */
                huff = 0;                   /* starting code */
                sym = 0;                    /* starting code symbol */
                len = min;                  /* starting code length */
                next = table_index;              /* current table to fill in */
                curr = root;                /* current table index bits */
                drop = 0;                   /* current bits to drop from code for index */
                low = -1;                   /* trigger new sub-table when len > root */
                used = 1 << root;          /* use root table entries */
                mask = used - 1;            /* mask for comparing low */

                /* check available table space */
                if ((type === LENS && used > ENOUGH_LENS) ||
                    (type === DISTS && used > ENOUGH_DISTS)) {
                    return 1;
                }

                var i = 0;
                /* process all codes and make table entries */
                for (;;) {
                    i++;
                    /* create table entry */
                    here_bits = len - drop;
                    if (work[sym] < end) {
                        here_op = 0;
                        here_val = work[sym];
                    }
                    else if (work[sym] > end) {
                        here_op = extra[extra_index + work[sym]];
                        here_val = base[base_index + work[sym]];
                    }
                    else {
                        here_op = 32 + 64;         /* end of block */
                        here_val = 0;
                    }

                    /* replicate for those indices with low len bits equal to huff */
                    incr = 1 << (len - drop);
                    fill = 1 << curr;
                    min = fill;                 /* save offset to next table */
                    do {
                        fill -= incr;
                        table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
                    } while (fill !== 0);

                    /* backwards increment the len-bit code huff */
                    incr = 1 << (len - 1);
                    while (huff & incr) {
                        incr >>= 1;
                    }
                    if (incr !== 0) {
                        huff &= incr - 1;
                        huff += incr;
                    } else {
                        huff = 0;
                    }

                    /* go to next symbol, update count, len */
                    sym++;
                    if (--count[len] === 0) {
                        if (len === max) { break; }
                        len = lens[lens_index + work[sym]];
                    }

                    /* create new sub-table if needed */
                    if (len > root && (huff & mask) !== low) {
                        /* if first time, transition to sub-tables */
                        if (drop === 0) {
                            drop = root;
                        }

                        /* increment past last table */
                        next += min;            /* here min is 1 << curr */

                        /* determine length of next table */
                        curr = len - drop;
                        left = 1 << curr;
                        while (curr + drop < max) {
                            left -= count[curr + drop];
                            if (left <= 0) { break; }
                            curr++;
                            left <<= 1;
                        }

                        /* check for enough space */
                        used += 1 << curr;
                        if ((type === LENS && used > ENOUGH_LENS) ||
                            (type === DISTS && used > ENOUGH_DISTS)) {
                            return 1;
                        }

                        /* point entry in root table to sub-table */
                        low = huff & mask;
                        /*table.op[low] = curr;
                         table.bits[low] = root;
                         table.val[low] = next - opts.table_index;*/
                        table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
                    }
                }

                /* fill in remaining table entry if code is incomplete (guaranteed to have
                 at most one remaining entry, since if the code is incomplete, the
                 maximum code length that was allowed to get this far is one bit) */
                if (huff !== 0) {
                    //table.op[next + huff] = 64;            /* invalid code marker */
                    //table.bits[next + huff] = len - drop;
                    //table.val[next + huff] = 0;
                    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
                }

                /* set return parameters */
                //opts.table_index += used;
                opts.bits = root;
                return 0;
            };


            /***/ }),
        /* 71 */
        /***/ (function(module, exports) {

            'use strict';


            module.exports = {

                /* Allowed flush values; see deflate() and inflate() below for details */
                Z_NO_FLUSH:         0,
                Z_PARTIAL_FLUSH:    1,
                Z_SYNC_FLUSH:       2,
                Z_FULL_FLUSH:       3,
                Z_FINISH:           4,
                Z_BLOCK:            5,
                Z_TREES:            6,

                /* Return codes for the compression/decompression functions. Negative values
                 * are errors, positive values are used for special but normal events.
                 */
                Z_OK:               0,
                Z_STREAM_END:       1,
                Z_NEED_DICT:        2,
                Z_ERRNO:           -1,
                Z_STREAM_ERROR:    -2,
                Z_DATA_ERROR:      -3,
                //Z_MEM_ERROR:     -4,
                Z_BUF_ERROR:       -5,
                //Z_VERSION_ERROR: -6,

                /* compression levels */
                Z_NO_COMPRESSION:         0,
                Z_BEST_SPEED:             1,
                Z_BEST_COMPRESSION:       9,
                Z_DEFAULT_COMPRESSION:   -1,


                Z_FILTERED:               1,
                Z_HUFFMAN_ONLY:           2,
                Z_RLE:                    3,
                Z_FIXED:                  4,
                Z_DEFAULT_STRATEGY:       0,

                /* Possible values of the data_type field (though see inflate()) */
                Z_BINARY:                 0,
                Z_TEXT:                   1,
                //Z_ASCII:                1, // = Z_TEXT (deprecated)
                Z_UNKNOWN:                2,

                /* The deflate compression method */
                Z_DEFLATED:               8
                //Z_NULL:                 null // Use -1 or null inline, depending on var type
            };


            /***/ }),
        /* 72 */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
                //
                // Permission is hereby granted, free of charge, to any person obtaining a
                // copy of this software and associated documentation files (the
                // "Software"), to deal in the Software without restriction, including
                // without limitation the rights to use, copy, modify, merge, publish,
                // distribute, sublicense, and/or sell copies of the Software, and to permit
                // persons to whom the Software is furnished to do so, subject to the
                // following conditions:
                //
                // The above copyright notice and this permission notice shall be included
                // in all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                // USE OR OTHER DEALINGS IN THE SOFTWARE.

                var formatRegExp = /%[sdj%]/g;
                exports.format = function(f) {
                    if (!isString(f)) {
                        var objects = [];
                        for (var i = 0; i < arguments.length; i++) {
                            objects.push(inspect(arguments[i]));
                        }
                        return objects.join(' ');
                    }

                    var i = 1;
                    var args = arguments;
                    var len = args.length;
                    var str = String(f).replace(formatRegExp, function(x) {
                        if (x === '%%') return '%';
                        if (i >= len) return x;
                        switch (x) {
                            case '%s': return String(args[i++]);
                            case '%d': return Number(args[i++]);
                            case '%j':
                                try {
                                    return JSON.stringify(args[i++]);
                                } catch (_) {
                                    return '[Circular]';
                                }
                            default:
                                return x;
                        }
                    });
                    for (var x = args[i]; i < len; x = args[++i]) {
                        if (isNull(x) || !isObject(x)) {
                            str += ' ' + x;
                        } else {
                            str += ' ' + inspect(x);
                        }
                    }
                    return str;
                };


                // Mark that a method should not be used.
                // Returns a modified function which warns once by default.
                // If --no-deprecation is set, then it is a no-op.
                exports.deprecate = function(fn, msg) {
                    // Allow for deprecating things in the process of starting up.
                    if (isUndefined(global.process)) {
                        return function() {
                            return exports.deprecate(fn, msg).apply(this, arguments);
                        };
                    }

                    if (process.noDeprecation === true) {
                        return fn;
                    }

                    var warned = false;
                    function deprecated() {
                        if (!warned) {
                            if (process.throwDeprecation) {
                                throw new Error(msg);
                            } else if (process.traceDeprecation) {
                                console.trace(msg);
                            } else {
                                console.error(msg);
                            }
                            warned = true;
                        }
                        return fn.apply(this, arguments);
                    }

                    return deprecated;
                };


                var debugs = {};
                var debugEnviron;
                exports.debuglog = function(set) {
                    if (isUndefined(debugEnviron))
                        debugEnviron = process.env.NODE_DEBUG || '';
                    set = set.toUpperCase();
                    if (!debugs[set]) {
                        if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
                            var pid = process.pid;
                            debugs[set] = function() {
                                var msg = exports.format.apply(exports, arguments);
                                console.error('%s %d: %s', set, pid, msg);
                            };
                        } else {
                            debugs[set] = function() {};
                        }
                    }
                    return debugs[set];
                };


                /**
                 * Echos the value of a value. Trys to print the value out
                 * in the best way possible given the different types.
                 *
                 * @param {Object} obj The object to print out.
                 * @param {Object} opts Optional options object that alters the output.
                 */
                /* legacy: obj, showHidden, depth, colors*/
                function inspect(obj, opts) {
                    // default options
                    var ctx = {
                        seen: [],
                        stylize: stylizeNoColor
                    };
                    // legacy...
                    if (arguments.length >= 3) ctx.depth = arguments[2];
                    if (arguments.length >= 4) ctx.colors = arguments[3];
                    if (isBoolean(opts)) {
                        // legacy...
                        ctx.showHidden = opts;
                    } else if (opts) {
                        // got an "options" object
                        exports._extend(ctx, opts);
                    }
                    // set default options
                    if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
                    if (isUndefined(ctx.depth)) ctx.depth = 2;
                    if (isUndefined(ctx.colors)) ctx.colors = false;
                    if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
                    if (ctx.colors) ctx.stylize = stylizeWithColor;
                    return formatValue(ctx, obj, ctx.depth);
                }
                exports.inspect = inspect;


                // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
                inspect.colors = {
                    'bold' : [1, 22],
                    'italic' : [3, 23],
                    'underline' : [4, 24],
                    'inverse' : [7, 27],
                    'white' : [37, 39],
                    'grey' : [90, 39],
                    'black' : [30, 39],
                    'blue' : [34, 39],
                    'cyan' : [36, 39],
                    'green' : [32, 39],
                    'magenta' : [35, 39],
                    'red' : [31, 39],
                    'yellow' : [33, 39]
                };

                // Don't use 'blue' not visible on cmd.exe
                inspect.styles = {
                    'special': 'cyan',
                    'number': 'yellow',
                    'boolean': 'yellow',
                    'undefined': 'grey',
                    'null': 'bold',
                    'string': 'green',
                    'date': 'magenta',
                    // "name": intentionally not styling
                    'regexp': 'red'
                };


                function stylizeWithColor(str, styleType) {
                    var style = inspect.styles[styleType];

                    if (style) {
                        return '\u001b[' + inspect.colors[style][0] + 'm' + str +
                            '\u001b[' + inspect.colors[style][1] + 'm';
                    } else {
                        return str;
                    }
                }


                function stylizeNoColor(str, styleType) {
                    return str;
                }


                function arrayToHash(array) {
                    var hash = {};

                    array.forEach(function(val, idx) {
                        hash[val] = true;
                    });

                    return hash;
                }


                function formatValue(ctx, value, recurseTimes) {
                    // Provide a hook for user-specified inspect functions.
                    // Check that value is an object with an inspect function on it
                    if (ctx.customInspect &&
                        value &&
                        isFunction(value.inspect) &&
                        // Filter out the util module, it's inspect function is special
                        value.inspect !== exports.inspect &&
                        // Also filter out any prototype objects using the circular check.
                        !(value.constructor && value.constructor.prototype === value)) {
                        var ret = value.inspect(recurseTimes, ctx);
                        if (!isString(ret)) {
                            ret = formatValue(ctx, ret, recurseTimes);
                        }
                        return ret;
                    }

                    // Primitive types cannot have properties
                    var primitive = formatPrimitive(ctx, value);
                    if (primitive) {
                        return primitive;
                    }

                    // Look up the keys of the object.
                    var keys = Object.keys(value);
                    var visibleKeys = arrayToHash(keys);

                    if (ctx.showHidden) {
                        keys = Object.getOwnPropertyNames(value);
                    }

                    // IE doesn't make error fields non-enumerable
                    // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
                    if (isError(value)
                        && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
                        return formatError(value);
                    }

                    // Some type of object without properties can be shortcutted.
                    if (keys.length === 0) {
                        if (isFunction(value)) {
                            var name = value.name ? ': ' + value.name : '';
                            return ctx.stylize('[Function' + name + ']', 'special');
                        }
                        if (isRegExp(value)) {
                            return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
                        }
                        if (isDate(value)) {
                            return ctx.stylize(Date.prototype.toString.call(value), 'date');
                        }
                        if (isError(value)) {
                            return formatError(value);
                        }
                    }

                    var base = '', array = false, braces = ['{', '}'];

                    // Make Array say that they are Array
                    if (isArray(value)) {
                        array = true;
                        braces = ['[', ']'];
                    }

                    // Make functions say that they are functions
                    if (isFunction(value)) {
                        var n = value.name ? ': ' + value.name : '';
                        base = ' [Function' + n + ']';
                    }

                    // Make RegExps say that they are RegExps
                    if (isRegExp(value)) {
                        base = ' ' + RegExp.prototype.toString.call(value);
                    }

                    // Make dates with properties first say the date
                    if (isDate(value)) {
                        base = ' ' + Date.prototype.toUTCString.call(value);
                    }

                    // Make error with message first say the error
                    if (isError(value)) {
                        base = ' ' + formatError(value);
                    }

                    if (keys.length === 0 && (!array || value.length == 0)) {
                        return braces[0] + base + braces[1];
                    }

                    if (recurseTimes < 0) {
                        if (isRegExp(value)) {
                            return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
                        } else {
                            return ctx.stylize('[Object]', 'special');
                        }
                    }

                    ctx.seen.push(value);

                    var output;
                    if (array) {
                        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
                    } else {
                        output = keys.map(function(key) {
                            return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
                        });
                    }

                    ctx.seen.pop();

                    return reduceToSingleString(output, base, braces);
                }


                function formatPrimitive(ctx, value) {
                    if (isUndefined(value))
                        return ctx.stylize('undefined', 'undefined');
                    if (isString(value)) {
                        var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                .replace(/'/g, "\\'")
                                .replace(/\\"/g, '"') + '\'';
                        return ctx.stylize(simple, 'string');
                    }
                    if (isNumber(value))
                        return ctx.stylize('' + value, 'number');
                    if (isBoolean(value))
                        return ctx.stylize('' + value, 'boolean');
                    // For some reason typeof null is "object", so special case here.
                    if (isNull(value))
                        return ctx.stylize('null', 'null');
                }


                function formatError(value) {
                    return '[' + Error.prototype.toString.call(value) + ']';
                }


                function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
                    var output = [];
                    for (var i = 0, l = value.length; i < l; ++i) {
                        if (hasOwnProperty(value, String(i))) {
                            output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
                                String(i), true));
                        } else {
                            output.push('');
                        }
                    }
                    keys.forEach(function(key) {
                        if (!key.match(/^\d+$/)) {
                            output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
                                key, true));
                        }
                    });
                    return output;
                }


                function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
                    var name, str, desc;
                    desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
                    if (desc.get) {
                        if (desc.set) {
                            str = ctx.stylize('[Getter/Setter]', 'special');
                        } else {
                            str = ctx.stylize('[Getter]', 'special');
                        }
                    } else {
                        if (desc.set) {
                            str = ctx.stylize('[Setter]', 'special');
                        }
                    }
                    if (!hasOwnProperty(visibleKeys, key)) {
                        name = '[' + key + ']';
                    }
                    if (!str) {
                        if (ctx.seen.indexOf(desc.value) < 0) {
                            if (isNull(recurseTimes)) {
                                str = formatValue(ctx, desc.value, null);
                            } else {
                                str = formatValue(ctx, desc.value, recurseTimes - 1);
                            }
                            if (str.indexOf('\n') > -1) {
                                if (array) {
                                    str = str.split('\n').map(function(line) {
                                        return '  ' + line;
                                    }).join('\n').substr(2);
                                } else {
                                    str = '\n' + str.split('\n').map(function(line) {
                                            return '   ' + line;
                                        }).join('\n');
                                }
                            }
                        } else {
                            str = ctx.stylize('[Circular]', 'special');
                        }
                    }
                    if (isUndefined(name)) {
                        if (array && key.match(/^\d+$/)) {
                            return str;
                        }
                        name = JSON.stringify('' + key);
                        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
                            name = name.substr(1, name.length - 2);
                            name = ctx.stylize(name, 'name');
                        } else {
                            name = name.replace(/'/g, "\\'")
                                .replace(/\\"/g, '"')
                                .replace(/(^"|"$)/g, "'");
                            name = ctx.stylize(name, 'string');
                        }
                    }

                    return name + ': ' + str;
                }


                function reduceToSingleString(output, base, braces) {
                    var numLinesEst = 0;
                    var length = output.reduce(function(prev, cur) {
                        numLinesEst++;
                        if (cur.indexOf('\n') >= 0) numLinesEst++;
                        return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
                    }, 0);

                    if (length > 60) {
                        return braces[0] +
                            (base === '' ? '' : base + '\n ') +
                            ' ' +
                            output.join(',\n  ') +
                            ' ' +
                            braces[1];
                    }

                    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
                }


                // NOTE: These type checking functions intentionally don't use `instanceof`
                // because it is fragile and can be easily faked with `Object.create()`.
                function isArray(ar) {
                    return Array.isArray(ar);
                }
                exports.isArray = isArray;

                function isBoolean(arg) {
                    return typeof arg === 'boolean';
                }
                exports.isBoolean = isBoolean;

                function isNull(arg) {
                    return arg === null;
                }
                exports.isNull = isNull;

                function isNullOrUndefined(arg) {
                    return arg == null;
                }
                exports.isNullOrUndefined = isNullOrUndefined;

                function isNumber(arg) {
                    return typeof arg === 'number';
                }
                exports.isNumber = isNumber;

                function isString(arg) {
                    return typeof arg === 'string';
                }
                exports.isString = isString;

                function isSymbol(arg) {
                    return typeof arg === 'symbol';
                }
                exports.isSymbol = isSymbol;

                function isUndefined(arg) {
                    return arg === void 0;
                }
                exports.isUndefined = isUndefined;

                function isRegExp(re) {
                    return isObject(re) && objectToString(re) === '[object RegExp]';
                }
                exports.isRegExp = isRegExp;

                function isObject(arg) {
                    return typeof arg === 'object' && arg !== null;
                }
                exports.isObject = isObject;

                function isDate(d) {
                    return isObject(d) && objectToString(d) === '[object Date]';
                }
                exports.isDate = isDate;

                function isError(e) {
                    return isObject(e) &&
                        (objectToString(e) === '[object Error]' || e instanceof Error);
                }
                exports.isError = isError;

                function isFunction(arg) {
                    return typeof arg === 'function';
                }
                exports.isFunction = isFunction;

                function isPrimitive(arg) {
                    return arg === null ||
                        typeof arg === 'boolean' ||
                        typeof arg === 'number' ||
                        typeof arg === 'string' ||
                        typeof arg === 'symbol' ||  // ES6 symbol
                        typeof arg === 'undefined';
                }
                exports.isPrimitive = isPrimitive;

                exports.isBuffer = __webpack_require__(73);

                function objectToString(o) {
                    return Object.prototype.toString.call(o);
                }


                function pad(n) {
                    return n < 10 ? '0' + n.toString(10) : n.toString(10);
                }


                var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
                    'Oct', 'Nov', 'Dec'];

                // 26 Feb 16:19:34
                function timestamp() {
                    var d = new Date();
                    var time = [pad(d.getHours()),
                        pad(d.getMinutes()),
                        pad(d.getSeconds())].join(':');
                    return [d.getDate(), months[d.getMonth()], time].join(' ');
                }


                // log is just a thin wrapper to console.log that prepends a timestamp
                exports.log = function() {
                    console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
                };


                /**
                 * Inherit the prototype methods from one constructor into another.
                 *
                 * The Function.prototype.inherits from lang.js rewritten as a standalone
                 * function (not on Function.prototype). NOTE: If this file is to be loaded
                 * during bootstrapping this function needs to be rewritten using some native
                 * functions as prototype setup using normal JavaScript does not work as
                 * expected during bootstrapping (see mirror.js in r114903).
                 *
                 * @param {function} ctor Constructor function which needs to inherit the
                 *     prototype.
                 * @param {function} superCtor Constructor function to inherit prototype from.
                 */
                exports.inherits = __webpack_require__(74);

                exports._extend = function(origin, add) {
                    // Don't do anything if add isn't an object
                    if (!add || !isObject(add)) return origin;

                    var keys = Object.keys(add);
                    var i = keys.length;
                    while (i--) {
                        origin[keys[i]] = add[keys[i]];
                    }
                    return origin;
                };

                function hasOwnProperty(obj, prop) {
                    return Object.prototype.hasOwnProperty.call(obj, prop);
                }

                /* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(36)))

            /***/ }),
        /* 73 */
        /***/ (function(module, exports) {

            module.exports = function isBuffer(arg) {
                return arg && typeof arg === 'object'
                    && typeof arg.copy === 'function'
                    && typeof arg.fill === 'function'
                    && typeof arg.readUInt8 === 'function';
            }

            /***/ }),
        /* 74 */
        /***/ (function(module, exports) {

            if (typeof Object.create === 'function') {
                // implementation from standard node.js 'util' module
                module.exports = function inherits(ctor, superCtor) {
                    ctor.super_ = superCtor
                    ctor.prototype = Object.create(superCtor.prototype, {
                        constructor: {
                            value: ctor,
                            enumerable: false,
                            writable: true,
                            configurable: true
                        }
                    });
                };
            } else {
                // old school shim for old browsers
                module.exports = function inherits(ctor, superCtor) {
                    ctor.super_ = superCtor
                    var TempCtor = function () {}
                    TempCtor.prototype = superCtor.prototype
                    ctor.prototype = new TempCtor()
                    ctor.prototype.constructor = ctor
                }
            }


            /***/ }),
        /* 75 */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(global) {'use strict';

                // compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
                // original notice:

                /*!
                 * The buffer module from node.js, for the browser.
                 *
                 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
                 * @license  MIT
                 */
                function compare(a, b) {
                    if (a === b) {
                        return 0;
                    }

                    var x = a.length;
                    var y = b.length;

                    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                        if (a[i] !== b[i]) {
                            x = a[i];
                            y = b[i];
                            break;
                        }
                    }

                    if (x < y) {
                        return -1;
                    }
                    if (y < x) {
                        return 1;
                    }
                    return 0;
                }
                function isBuffer(b) {
                    if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
                        return global.Buffer.isBuffer(b);
                    }
                    return !!(b != null && b._isBuffer);
                }

                // based on node assert, original notice:

                // http://wiki.commonjs.org/wiki/Unit_Testing/1.0
                //
                // THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
                //
                // Originally from narwhal.js (http://narwhaljs.org)
                // Copyright (c) 2009 Thomas Robinson <280north.com>
                //
                // Permission is hereby granted, free of charge, to any person obtaining a copy
                // of this software and associated documentation files (the 'Software'), to
                // deal in the Software without restriction, including without limitation the
                // rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
                // sell copies of the Software, and to permit persons to whom the Software is
                // furnished to do so, subject to the following conditions:
                //
                // The above copyright notice and this permission notice shall be included in
                // all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                // AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
                // ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
                // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

                var util = __webpack_require__(72);
                var hasOwn = Object.prototype.hasOwnProperty;
                var pSlice = Array.prototype.slice;
                var functionsHaveNames = (function () {
                    return function foo() {}.name === 'foo';
                }());
                function pToString (obj) {
                    return Object.prototype.toString.call(obj);
                }
                function isView(arrbuf) {
                    if (isBuffer(arrbuf)) {
                        return false;
                    }
                    if (typeof global.ArrayBuffer !== 'function') {
                        return false;
                    }
                    if (typeof ArrayBuffer.isView === 'function') {
                        return ArrayBuffer.isView(arrbuf);
                    }
                    if (!arrbuf) {
                        return false;
                    }
                    if (arrbuf instanceof DataView) {
                        return true;
                    }
                    if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
                        return true;
                    }
                    return false;
                }
                // 1. The assert module provides functions that throw
                // AssertionError's when particular conditions are not met. The
                // assert module must conform to the following interface.

                var assert = module.exports = ok;

                // 2. The AssertionError is defined in assert.
                // new assert.AssertionError({ message: message,
                //                             actual: actual,
                //                             expected: expected })

                var regex = /\s*function\s+([^\(\s]*)\s*/;
                // based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
                function getName(func) {
                    if (!util.isFunction(func)) {
                        return;
                    }
                    if (functionsHaveNames) {
                        return func.name;
                    }
                    var str = func.toString();
                    var match = str.match(regex);
                    return match && match[1];
                }
                assert.AssertionError = function AssertionError(options) {
                    this.name = 'AssertionError';
                    this.actual = options.actual;
                    this.expected = options.expected;
                    this.operator = options.operator;
                    if (options.message) {
                        this.message = options.message;
                        this.generatedMessage = false;
                    } else {
                        this.message = getMessage(this);
                        this.generatedMessage = true;
                    }
                    var stackStartFunction = options.stackStartFunction || fail;
                    if (Error.captureStackTrace) {
                        Error.captureStackTrace(this, stackStartFunction);
                    } else {
                        // non v8 browsers so we can have a stacktrace
                        var err = new Error();
                        if (err.stack) {
                            var out = err.stack;

                            // try to strip useless frames
                            var fn_name = getName(stackStartFunction);
                            var idx = out.indexOf('\n' + fn_name);
                            if (idx >= 0) {
                                // once we have located the function frame
                                // we need to strip out everything before it (and its line)
                                var next_line = out.indexOf('\n', idx + 1);
                                out = out.substring(next_line + 1);
                            }

                            this.stack = out;
                        }
                    }
                };

                // assert.AssertionError instanceof Error
                util.inherits(assert.AssertionError, Error);

                function truncate(s, n) {
                    if (typeof s === 'string') {
                        return s.length < n ? s : s.slice(0, n);
                    } else {
                        return s;
                    }
                }
                function inspect(something) {
                    if (functionsHaveNames || !util.isFunction(something)) {
                        return util.inspect(something);
                    }
                    var rawname = getName(something);
                    var name = rawname ? ': ' + rawname : '';
                    return '[Function' +  name + ']';
                }
                function getMessage(self) {
                    return truncate(inspect(self.actual), 128) + ' ' +
                        self.operator + ' ' +
                        truncate(inspect(self.expected), 128);
                }

                // At present only the three keys mentioned above are used and
                // understood by the spec. Implementations or sub modules can pass
                // other keys to the AssertionError's constructor - they will be
                // ignored.

                // 3. All of the following functions must throw an AssertionError
                // when a corresponding condition is not met, with a message that
                // may be undefined if not provided.  All assertion methods provide
                // both the actual and expected values to the assertion error for
                // display purposes.

                function fail(actual, expected, message, operator, stackStartFunction) {
                    throw new assert.AssertionError({
                        message: message,
                        actual: actual,
                        expected: expected,
                        operator: operator,
                        stackStartFunction: stackStartFunction
                    });
                }

                // EXTENSION! allows for well behaved errors defined elsewhere.
                assert.fail = fail;

                // 4. Pure assertion tests whether a value is truthy, as determined
                // by !!guard.
                // assert.ok(guard, message_opt);
                // This statement is equivalent to assert.equal(true, !!guard,
                // message_opt);. To test strictly for the value true, use
                // assert.strictEqual(true, guard, message_opt);.

                function ok(value, message) {
                    if (!value) fail(value, true, message, '==', assert.ok);
                }
                assert.ok = ok;

                // 5. The equality assertion tests shallow, coercive equality with
                // ==.
                // assert.equal(actual, expected, message_opt);

                assert.equal = function equal(actual, expected, message) {
                    if (actual != expected) fail(actual, expected, message, '==', assert.equal);
                };

                // 6. The non-equality assertion tests for whether two objects are not equal
                // with != assert.notEqual(actual, expected, message_opt);

                assert.notEqual = function notEqual(actual, expected, message) {
                    if (actual == expected) {
                        fail(actual, expected, message, '!=', assert.notEqual);
                    }
                };

                // 7. The equivalence assertion tests a deep equality relation.
                // assert.deepEqual(actual, expected, message_opt);

                assert.deepEqual = function deepEqual(actual, expected, message) {
                    if (!_deepEqual(actual, expected, false)) {
                        fail(actual, expected, message, 'deepEqual', assert.deepEqual);
                    }
                };

                assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
                    if (!_deepEqual(actual, expected, true)) {
                        fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
                    }
                };

                function _deepEqual(actual, expected, strict, memos) {
                    // 7.1. All identical values are equivalent, as determined by ===.
                    if (actual === expected) {
                        return true;
                    } else if (isBuffer(actual) && isBuffer(expected)) {
                        return compare(actual, expected) === 0;

                        // 7.2. If the expected value is a Date object, the actual value is
                        // equivalent if it is also a Date object that refers to the same time.
                    } else if (util.isDate(actual) && util.isDate(expected)) {
                        return actual.getTime() === expected.getTime();

                        // 7.3 If the expected value is a RegExp object, the actual value is
                        // equivalent if it is also a RegExp object with the same source and
                        // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
                    } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
                        return actual.source === expected.source &&
                            actual.global === expected.global &&
                            actual.multiline === expected.multiline &&
                            actual.lastIndex === expected.lastIndex &&
                            actual.ignoreCase === expected.ignoreCase;

                        // 7.4. Other pairs that do not both pass typeof value == 'object',
                        // equivalence is determined by ==.
                    } else if ((actual === null || typeof actual !== 'object') &&
                        (expected === null || typeof expected !== 'object')) {
                        return strict ? actual === expected : actual == expected;

                        // If both values are instances of typed arrays, wrap their underlying
                        // ArrayBuffers in a Buffer each to increase performance
                        // This optimization requires the arrays to have the same type as checked by
                        // Object.prototype.toString (aka pToString). Never perform binary
                        // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
                        // bit patterns are not identical.
                    } else if (isView(actual) && isView(expected) &&
                        pToString(actual) === pToString(expected) &&
                        !(actual instanceof Float32Array ||
                        actual instanceof Float64Array)) {
                        return compare(new Uint8Array(actual.buffer),
                                new Uint8Array(expected.buffer)) === 0;

                        // 7.5 For all other Object pairs, including Array objects, equivalence is
                        // determined by having the same number of owned properties (as verified
                        // with Object.prototype.hasOwnProperty.call), the same set of keys
                        // (although not necessarily the same order), equivalent values for every
                        // corresponding key, and an identical 'prototype' property. Note: this
                        // accounts for both named and indexed properties on Arrays.
                    } else if (isBuffer(actual) !== isBuffer(expected)) {
                        return false;
                    } else {
                        memos = memos || {actual: [], expected: []};

                        var actualIndex = memos.actual.indexOf(actual);
                        if (actualIndex !== -1) {
                            if (actualIndex === memos.expected.indexOf(expected)) {
                                return true;
                            }
                        }

                        memos.actual.push(actual);
                        memos.expected.push(expected);

                        return objEquiv(actual, expected, strict, memos);
                    }
                }

                function isArguments(object) {
                    return Object.prototype.toString.call(object) == '[object Arguments]';
                }

                function objEquiv(a, b, strict, actualVisitedObjects) {
                    if (a === null || a === undefined || b === null || b === undefined)
                        return false;
                    // if one is a primitive, the other must be same
                    if (util.isPrimitive(a) || util.isPrimitive(b))
                        return a === b;
                    if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
                        return false;
                    var aIsArgs = isArguments(a);
                    var bIsArgs = isArguments(b);
                    if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
                        return false;
                    if (aIsArgs) {
                        a = pSlice.call(a);
                        b = pSlice.call(b);
                        return _deepEqual(a, b, strict);
                    }
                    var ka = objectKeys(a);
                    var kb = objectKeys(b);
                    var key, i;
                    // having the same number of owned properties (keys incorporates
                    // hasOwnProperty)
                    if (ka.length !== kb.length)
                        return false;
                    //the same set of keys (although not necessarily the same order),
                    ka.sort();
                    kb.sort();
                    //~~~cheap key test
                    for (i = ka.length - 1; i >= 0; i--) {
                        if (ka[i] !== kb[i])
                            return false;
                    }
                    //equivalent values for every corresponding key, and
                    //~~~possibly expensive deep test
                    for (i = ka.length - 1; i >= 0; i--) {
                        key = ka[i];
                        if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
                            return false;
                    }
                    return true;
                }

                // 8. The non-equivalence assertion tests for any deep inequality.
                // assert.notDeepEqual(actual, expected, message_opt);

                assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
                    if (_deepEqual(actual, expected, false)) {
                        fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
                    }
                };

                assert.notDeepStrictEqual = notDeepStrictEqual;
                function notDeepStrictEqual(actual, expected, message) {
                    if (_deepEqual(actual, expected, true)) {
                        fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
                    }
                }


                // 9. The strict equality assertion tests strict equality, as determined by ===.
                // assert.strictEqual(actual, expected, message_opt);

                assert.strictEqual = function strictEqual(actual, expected, message) {
                    if (actual !== expected) {
                        fail(actual, expected, message, '===', assert.strictEqual);
                    }
                };

                // 10. The strict non-equality assertion tests for strict inequality, as
                // determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

                assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
                    if (actual === expected) {
                        fail(actual, expected, message, '!==', assert.notStrictEqual);
                    }
                };

                function expectedException(actual, expected) {
                    if (!actual || !expected) {
                        return false;
                    }

                    if (Object.prototype.toString.call(expected) == '[object RegExp]') {
                        return expected.test(actual);
                    }

                    try {
                        if (actual instanceof expected) {
                            return true;
                        }
                    } catch (e) {
                        // Ignore.  The instanceof check doesn't work for arrow functions.
                    }

                    if (Error.isPrototypeOf(expected)) {
                        return false;
                    }

                    return expected.call({}, actual) === true;
                }

                function _tryBlock(block) {
                    var error;
                    try {
                        block();
                    } catch (e) {
                        error = e;
                    }
                    return error;
                }

                function _throws(shouldThrow, block, expected, message) {
                    var actual;

                    if (typeof block !== 'function') {
                        throw new TypeError('"block" argument must be a function');
                    }

                    if (typeof expected === 'string') {
                        message = expected;
                        expected = null;
                    }

                    actual = _tryBlock(block);

                    message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
                        (message ? ' ' + message : '.');

                    if (shouldThrow && !actual) {
                        fail(actual, expected, 'Missing expected exception' + message);
                    }

                    var userProvidedMessage = typeof message === 'string';
                    var isUnwantedException = !shouldThrow && util.isError(actual);
                    var isUnexpectedException = !shouldThrow && actual && !expected;

                    if ((isUnwantedException &&
                        userProvidedMessage &&
                        expectedException(actual, expected)) ||
                        isUnexpectedException) {
                        fail(actual, expected, 'Got unwanted exception' + message);
                    }

                    if ((shouldThrow && actual && expected &&
                        !expectedException(actual, expected)) || (!shouldThrow && actual)) {
                        throw actual;
                    }
                }

                // 11. Expected to throw an error:
                // assert.throws(block, Error_opt, message_opt);

                assert.throws = function(block, /*optional*/error, /*optional*/message) {
                    _throws(true, block, error, message);
                };

                // EXTENSION! This is annoying to write outside this module.
                assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
                    _throws(false, block, error, message);
                };

                assert.ifError = function(err) { if (err) throw err; };

                var objectKeys = Object.keys || function (obj) {
                        var keys = [];
                        for (var key in obj) {
                            if (hasOwn.call(obj, key)) keys.push(key);
                        }
                        return keys;
                    };

                /* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

            /***/ }),
        /* 76 */
        /***/ (function(module, exports) {

            // Generated by CoffeeScript 1.12.6

            /*
             PDFPage - represents a single page in the PDF document
             By Devon Govett
             */

            (function() {
                var PDFPage;

                PDFPage = (function() {
                    var DEFAULT_MARGINS, SIZES;

                    function PDFPage(document, options) {
                        var dimensions;
                        this.document = document;
                        if (options == null) {
                            options = {};
                        }
                        this.size = options.size || 'letter';
                        this.layout = options.layout || 'portrait';
                        if (typeof options.margin === 'number') {
                            this.margins = {
                                top: options.margin,
                                left: options.margin,
                                bottom: options.margin,
                                right: options.margin
                            };
                        } else {
                            this.margins = options.margins || DEFAULT_MARGINS;
                        }
                        dimensions = Array.isArray(this.size) ? this.size : SIZES[this.size.toUpperCase()];
                        this.width = dimensions[this.layout === 'portrait' ? 0 : 1];
                        this.height = dimensions[this.layout === 'portrait' ? 1 : 0];
                        this.content = this.document.ref();
                        this.resources = this.document.ref({
                            ProcSet: ['PDF', 'Text', 'ImageB', 'ImageC', 'ImageI']
                        });
                        Object.defineProperties(this, {
                            fonts: {
                                get: (function(_this) {
                                    return function() {
                                        var base;
                                        return (base = _this.resources.data).Font != null ? base.Font : base.Font = {};
                                    };
                                })(this)
                            },
                            xobjects: {
                                get: (function(_this) {
                                    return function() {
                                        var base;
                                        return (base = _this.resources.data).XObject != null ? base.XObject : base.XObject = {};
                                    };
                                })(this)
                            },
                            ext_gstates: {
                                get: (function(_this) {
                                    return function() {
                                        var base;
                                        return (base = _this.resources.data).ExtGState != null ? base.ExtGState : base.ExtGState = {};
                                    };
                                })(this)
                            },
                            patterns: {
                                get: (function(_this) {
                                    return function() {
                                        var base;
                                        return (base = _this.resources.data).Pattern != null ? base.Pattern : base.Pattern = {};
                                    };
                                })(this)
                            },
                            annotations: {
                                get: (function(_this) {
                                    return function() {
                                        var base;
                                        return (base = _this.dictionary.data).Annots != null ? base.Annots : base.Annots = [];
                                    };
                                })(this)
                            }
                        });
                        this.dictionary = this.document.ref({
                            Type: 'Page',
                            Parent: this.document._root.data.Pages,
                            MediaBox: [0, 0, this.width, this.height],
                            Contents: this.content,
                            Resources: this.resources
                        });
                    }

                    PDFPage.prototype.maxY = function() {
                        return this.height - this.margins.bottom;
                    };

                    PDFPage.prototype.write = function(chunk) {
                        return this.content.write(chunk);
                    };

                    PDFPage.prototype.end = function() {
                        this.dictionary.end();
                        this.resources.end();
                        return this.content.end();
                    };

                    DEFAULT_MARGINS = {
                        top: 72,
                        left: 72,
                        bottom: 72,
                        right: 72
                    };

                    SIZES = {
                        '4A0': [4767.87, 6740.79],
                        '2A0': [3370.39, 4767.87],
                        A0: [2383.94, 3370.39],
                        A1: [1683.78, 2383.94],
                        A2: [1190.55, 1683.78],
                        A3: [841.89, 1190.55],
                        A4: [595.28, 841.89],
                        A5: [419.53, 595.28],
                        A6: [297.64, 419.53],
                        A7: [209.76, 297.64],
                        A8: [147.40, 209.76],
                        A9: [104.88, 147.40],
                        A10: [73.70, 104.88],
                        B0: [2834.65, 4008.19],
                        B1: [2004.09, 2834.65],
                        B2: [1417.32, 2004.09],
                        B3: [1000.63, 1417.32],
                        B4: [708.66, 1000.63],
                        B5: [498.90, 708.66],
                        B6: [354.33, 498.90],
                        B7: [249.45, 354.33],
                        B8: [175.75, 249.45],
                        B9: [124.72, 175.75],
                        B10: [87.87, 124.72],
                        C0: [2599.37, 3676.54],
                        C1: [1836.85, 2599.37],
                        C2: [1298.27, 1836.85],
                        C3: [918.43, 1298.27],
                        C4: [649.13, 918.43],
                        C5: [459.21, 649.13],
                        C6: [323.15, 459.21],
                        C7: [229.61, 323.15],
                        C8: [161.57, 229.61],
                        C9: [113.39, 161.57],
                        C10: [79.37, 113.39],
                        RA0: [2437.80, 3458.27],
                        RA1: [1729.13, 2437.80],
                        RA2: [1218.90, 1729.13],
                        RA3: [864.57, 1218.90],
                        RA4: [609.45, 864.57],
                        SRA0: [2551.18, 3628.35],
                        SRA1: [1814.17, 2551.18],
                        SRA2: [1275.59, 1814.17],
                        SRA3: [907.09, 1275.59],
                        SRA4: [637.80, 907.09],
                        EXECUTIVE: [521.86, 756.00],
                        FOLIO: [612.00, 936.00],
                        LEGAL: [612.00, 1008.00],
                        LETTER: [612.00, 792.00],
                        TABLOID: [792.00, 1224.00]
                    };

                    return PDFPage;

                })();

                module.exports = PDFPage;

            }).call(this);


            /***/ }),
        /* 77 */
        /***/ (function(module, exports, __webpack_require__) {

            // Generated by CoffeeScript 1.12.6
            (function() {
                var PDFGradient, PDFLinearGradient, PDFRadialGradient, namedColors, ref;

                ref = __webpack_require__(78), PDFGradient = ref.PDFGradient, PDFLinearGradient = ref.PDFLinearGradient, PDFRadialGradient = ref.PDFRadialGradient;

                module.exports = {
                    initColor: function() {
                        this._opacityRegistry = {};
                        this._opacityCount = 0;
                        return this._gradCount = 0;
                    },
                    _normalizeColor: function(color) {
                        var hex, part;
                        if (color instanceof PDFGradient) {
                            return color;
                        }
                        if (typeof color === 'string') {
                            if (color.charAt(0) === '#') {
                                if (color.length === 4) {
                                    color = color.replace(/#([0-9A-F])([0-9A-F])([0-9A-F])/i, "#$1$1$2$2$3$3");
                                }
                                hex = parseInt(color.slice(1), 16);
                                color = [hex >> 16, hex >> 8 & 0xff, hex & 0xff];
                            } else if (namedColors[color]) {
                                color = namedColors[color];
                            }
                        }
                        if (Array.isArray(color)) {
                            if (color.length === 3) {
                                color = (function() {
                                    var i, len, results;
                                    results = [];
                                    for (i = 0, len = color.length; i < len; i++) {
                                        part = color[i];
                                        results.push(part / 255);
                                    }
                                    return results;
                                })();
                            } else if (color.length === 4) {
                                color = (function() {
                                    var i, len, results;
                                    results = [];
                                    for (i = 0, len = color.length; i < len; i++) {
                                        part = color[i];
                                        results.push(part / 100);
                                    }
                                    return results;
                                })();
                            }
                            return color;
                        }
                        return null;
                    },
                    _setColor: function(color, stroke) {
                        var op, space;
                        color = this._normalizeColor(color);
                        if (!color) {
                            return false;
                        }
                        op = stroke ? 'SCN' : 'scn';
                        if (color instanceof PDFGradient) {
                            this._setColorSpace('Pattern', stroke);
                            color.apply(op);
                        } else {
                            space = color.length === 4 ? 'DeviceCMYK' : 'DeviceRGB';
                            this._setColorSpace(space, stroke);
                            color = color.join(' ');
                            this.addContent(color + " " + op);
                        }
                        return true;
                    },
                    _setColorSpace: function(space, stroke) {
                        var op;
                        op = stroke ? 'CS' : 'cs';
                        return this.addContent("/" + space + " " + op);
                    },
                    fillColor: function(color, opacity) {
                        var set;
                        set = this._setColor(color, false);
                        if (set) {
                            this.fillOpacity(opacity);
                        }
                        this._fillColor = [color, opacity];
                        return this;
                    },
                    strokeColor: function(color, opacity) {
                        var set;
                        set = this._setColor(color, true);
                        if (set) {
                            this.strokeOpacity(opacity);
                        }
                        return this;
                    },
                    opacity: function(opacity) {
                        this._doOpacity(opacity, opacity);
                        return this;
                    },
                    fillOpacity: function(opacity) {
                        this._doOpacity(opacity, null);
                        return this;
                    },
                    strokeOpacity: function(opacity) {
                        this._doOpacity(null, opacity);
                        return this;
                    },
                    _doOpacity: function(fillOpacity, strokeOpacity) {
                        var dictionary, id, key, name, ref1;
                        if (!((fillOpacity != null) || (strokeOpacity != null))) {
                            return;
                        }
                        if (fillOpacity != null) {
                            fillOpacity = Math.max(0, Math.min(1, fillOpacity));
                        }
                        if (strokeOpacity != null) {
                            strokeOpacity = Math.max(0, Math.min(1, strokeOpacity));
                        }
                        key = fillOpacity + "_" + strokeOpacity;
                        if (this._opacityRegistry[key]) {
                            ref1 = this._opacityRegistry[key], dictionary = ref1[0], name = ref1[1];
                        } else {
                            dictionary = {
                                Type: 'ExtGState'
                            };
                            if (fillOpacity != null) {
                                dictionary.ca = fillOpacity;
                            }
                            if (strokeOpacity != null) {
                                dictionary.CA = strokeOpacity;
                            }
                            dictionary = this.ref(dictionary);
                            dictionary.end();
                            id = ++this._opacityCount;
                            name = "Gs" + id;
                            this._opacityRegistry[key] = [dictionary, name];
                        }
                        this.page.ext_gstates[name] = dictionary;
                        return this.addContent("/" + name + " gs");
                    },
                    linearGradient: function(x1, y1, x2, y2) {
                        return new PDFLinearGradient(this, x1, y1, x2, y2);
                    },
                    radialGradient: function(x1, y1, r1, x2, y2, r2) {
                        return new PDFRadialGradient(this, x1, y1, r1, x2, y2, r2);
                    }
                };

                namedColors = {
                    aliceblue: [240, 248, 255],
                    antiquewhite: [250, 235, 215],
                    aqua: [0, 255, 255],
                    aquamarine: [127, 255, 212],
                    azure: [240, 255, 255],
                    beige: [245, 245, 220],
                    bisque: [255, 228, 196],
                    black: [0, 0, 0],
                    blanchedalmond: [255, 235, 205],
                    blue: [0, 0, 255],
                    blueviolet: [138, 43, 226],
                    brown: [165, 42, 42],
                    burlywood: [222, 184, 135],
                    cadetblue: [95, 158, 160],
                    chartreuse: [127, 255, 0],
                    chocolate: [210, 105, 30],
                    coral: [255, 127, 80],
                    cornflowerblue: [100, 149, 237],
                    cornsilk: [255, 248, 220],
                    crimson: [220, 20, 60],
                    cyan: [0, 255, 255],
                    darkblue: [0, 0, 139],
                    darkcyan: [0, 139, 139],
                    darkgoldenrod: [184, 134, 11],
                    darkgray: [169, 169, 169],
                    darkgreen: [0, 100, 0],
                    darkgrey: [169, 169, 169],
                    darkkhaki: [189, 183, 107],
                    darkmagenta: [139, 0, 139],
                    darkolivegreen: [85, 107, 47],
                    darkorange: [255, 140, 0],
                    darkorchid: [153, 50, 204],
                    darkred: [139, 0, 0],
                    darksalmon: [233, 150, 122],
                    darkseagreen: [143, 188, 143],
                    darkslateblue: [72, 61, 139],
                    darkslategray: [47, 79, 79],
                    darkslategrey: [47, 79, 79],
                    darkturquoise: [0, 206, 209],
                    darkviolet: [148, 0, 211],
                    deeppink: [255, 20, 147],
                    deepskyblue: [0, 191, 255],
                    dimgray: [105, 105, 105],
                    dimgrey: [105, 105, 105],
                    dodgerblue: [30, 144, 255],
                    firebrick: [178, 34, 34],
                    floralwhite: [255, 250, 240],
                    forestgreen: [34, 139, 34],
                    fuchsia: [255, 0, 255],
                    gainsboro: [220, 220, 220],
                    ghostwhite: [248, 248, 255],
                    gold: [255, 215, 0],
                    goldenrod: [218, 165, 32],
                    gray: [128, 128, 128],
                    grey: [128, 128, 128],
                    green: [0, 128, 0],
                    greenyellow: [173, 255, 47],
                    honeydew: [240, 255, 240],
                    hotpink: [255, 105, 180],
                    indianred: [205, 92, 92],
                    indigo: [75, 0, 130],
                    ivory: [255, 255, 240],
                    khaki: [240, 230, 140],
                    lavender: [230, 230, 250],
                    lavenderblush: [255, 240, 245],
                    lawngreen: [124, 252, 0],
                    lemonchiffon: [255, 250, 205],
                    lightblue: [173, 216, 230],
                    lightcoral: [240, 128, 128],
                    lightcyan: [224, 255, 255],
                    lightgoldenrodyellow: [250, 250, 210],
                    lightgray: [211, 211, 211],
                    lightgreen: [144, 238, 144],
                    lightgrey: [211, 211, 211],
                    lightpink: [255, 182, 193],
                    lightsalmon: [255, 160, 122],
                    lightseagreen: [32, 178, 170],
                    lightskyblue: [135, 206, 250],
                    lightslategray: [119, 136, 153],
                    lightslategrey: [119, 136, 153],
                    lightsteelblue: [176, 196, 222],
                    lightyellow: [255, 255, 224],
                    lime: [0, 255, 0],
                    limegreen: [50, 205, 50],
                    linen: [250, 240, 230],
                    magenta: [255, 0, 255],
                    maroon: [128, 0, 0],
                    mediumaquamarine: [102, 205, 170],
                    mediumblue: [0, 0, 205],
                    mediumorchid: [186, 85, 211],
                    mediumpurple: [147, 112, 219],
                    mediumseagreen: [60, 179, 113],
                    mediumslateblue: [123, 104, 238],
                    mediumspringgreen: [0, 250, 154],
                    mediumturquoise: [72, 209, 204],
                    mediumvioletred: [199, 21, 133],
                    midnightblue: [25, 25, 112],
                    mintcream: [245, 255, 250],
                    mistyrose: [255, 228, 225],
                    moccasin: [255, 228, 181],
                    navajowhite: [255, 222, 173],
                    navy: [0, 0, 128],
                    oldlace: [253, 245, 230],
                    olive: [128, 128, 0],
                    olivedrab: [107, 142, 35],
                    orange: [255, 165, 0],
                    orangered: [255, 69, 0],
                    orchid: [218, 112, 214],
                    palegoldenrod: [238, 232, 170],
                    palegreen: [152, 251, 152],
                    paleturquoise: [175, 238, 238],
                    palevioletred: [219, 112, 147],
                    papayawhip: [255, 239, 213],
                    peachpuff: [255, 218, 185],
                    peru: [205, 133, 63],
                    pink: [255, 192, 203],
                    plum: [221, 160, 221],
                    powderblue: [176, 224, 230],
                    purple: [128, 0, 128],
                    red: [255, 0, 0],
                    rosybrown: [188, 143, 143],
                    royalblue: [65, 105, 225],
                    saddlebrown: [139, 69, 19],
                    salmon: [250, 128, 114],
                    sandybrown: [244, 164, 96],
                    seagreen: [46, 139, 87],
                    seashell: [255, 245, 238],
                    sienna: [160, 82, 45],
                    silver: [192, 192, 192],
                    skyblue: [135, 206, 235],
                    slateblue: [106, 90, 205],
                    slategray: [112, 128, 144],
                    slategrey: [112, 128, 144],
                    snow: [255, 250, 250],
                    springgreen: [0, 255, 127],
                    steelblue: [70, 130, 180],
                    tan: [210, 180, 140],
                    teal: [0, 128, 128],
                    thistle: [216, 191, 216],
                    tomato: [255, 99, 71],
                    turquoise: [64, 224, 208],
                    violet: [238, 130, 238],
                    wheat: [245, 222, 179],
                    white: [255, 255, 255],
                    whitesmoke: [245, 245, 245],
                    yellow: [255, 255, 0],
                    yellowgreen: [154, 205, 50]
                };

            }).call(this);


            /***/ }),
        /* 78 */
        /***/ (function(module, exports) {

            // Generated by CoffeeScript 1.12.6
            (function() {
                var PDFGradient, PDFLinearGradient, PDFRadialGradient,
                    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
                    hasProp = {}.hasOwnProperty;

                PDFGradient = (function() {
                    function PDFGradient(doc) {
                        this.doc = doc;
                        this.stops = [];
                        this.embedded = false;
                        this.transform = [1, 0, 0, 1, 0, 0];
                        this._colorSpace = 'DeviceRGB';
                    }

                    PDFGradient.prototype.stop = function(pos, color, opacity) {
                        if (opacity == null) {
                            opacity = 1;
                        }
                        opacity = Math.max(0, Math.min(1, opacity));
                        this.stops.push([pos, this.doc._normalizeColor(color), opacity]);
                        return this;
                    };

                    PDFGradient.prototype.setTransform = function(m11, m12, m21, m22, dx, dy) {
                        this.transform = [m11, m12, m21, m22, dx, dy];
                        return this;
                    };

                    PDFGradient.prototype.embed = function(m) {
                        var bounds, encode, fn, form, grad, gstate, i, j, k, last, len, opacityPattern, pageBBox, pattern, ref, ref1, shader, stop, stops, v;
                        if (this.stops.length === 0) {
                            return;
                        }
                        this.embedded = true;
                        this.matrix = m;
                        last = this.stops[this.stops.length - 1];
                        if (last[0] < 1) {
                            this.stops.push([1, last[1], last[2]]);
                        }
                        bounds = [];
                        encode = [];
                        stops = [];
                        for (i = j = 0, ref = this.stops.length - 1; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
                            encode.push(0, 1);
                            if (i + 2 !== this.stops.length) {
                                bounds.push(this.stops[i + 1][0]);
                            }
                            fn = this.doc.ref({
                                FunctionType: 2,
                                Domain: [0, 1],
                                C0: this.stops[i + 0][1],
                                C1: this.stops[i + 1][1],
                                N: 1
                            });
                            stops.push(fn);
                            fn.end();
                        }
                        if (stops.length === 1) {
                            fn = stops[0];
                        } else {
                            fn = this.doc.ref({
                                FunctionType: 3,
                                Domain: [0, 1],
                                Functions: stops,
                                Bounds: bounds,
                                Encode: encode
                            });
                            fn.end();
                        }
                        this.id = 'Sh' + (++this.doc._gradCount);
                        shader = this.shader(fn);
                        shader.end();
                        pattern = this.doc.ref({
                            Type: 'Pattern',
                            PatternType: 2,
                            Shading: shader,
                            Matrix: (function() {
                                var k, len, ref1, results;
                                ref1 = this.matrix;
                                results = [];
                                for (k = 0, len = ref1.length; k < len; k++) {
                                    v = ref1[k];
                                    results.push(+v.toFixed(5));
                                }
                                return results;
                            }).call(this)
                        });
                        pattern.end();
                        if (this.stops.some(function(stop) {
                                return stop[2] < 1;
                            })) {
                            grad = this.opacityGradient();
                            grad._colorSpace = 'DeviceGray';
                            ref1 = this.stops;
                            for (k = 0, len = ref1.length; k < len; k++) {
                                stop = ref1[k];
                                grad.stop(stop[0], [stop[2]]);
                            }
                            grad = grad.embed(this.matrix);
                            pageBBox = [0, 0, this.doc.page.width, this.doc.page.height];
                            form = this.doc.ref({
                                Type: 'XObject',
                                Subtype: 'Form',
                                FormType: 1,
                                BBox: pageBBox,
                                Group: {
                                    Type: 'Group',
                                    S: 'Transparency',
                                    CS: 'DeviceGray'
                                },
                                Resources: {
                                    ProcSet: ['PDF', 'Text', 'ImageB', 'ImageC', 'ImageI'],
                                    Pattern: {
                                        Sh1: grad
                                    }
                                }
                            });
                            form.write("/Pattern cs /Sh1 scn");
                            form.end((pageBBox.join(" ")) + " re f");
                            gstate = this.doc.ref({
                                Type: 'ExtGState',
                                SMask: {
                                    Type: 'Mask',
                                    S: 'Luminosity',
                                    G: form
                                }
                            });
                            gstate.end();
                            opacityPattern = this.doc.ref({
                                Type: 'Pattern',
                                PatternType: 1,
                                PaintType: 1,
                                TilingType: 2,
                                BBox: pageBBox,
                                XStep: pageBBox[2],
                                YStep: pageBBox[3],
                                Resources: {
                                    ProcSet: ['PDF', 'Text', 'ImageB', 'ImageC', 'ImageI'],
                                    Pattern: {
                                        Sh1: pattern
                                    },
                                    ExtGState: {
                                        Gs1: gstate
                                    }
                                }
                            });
                            opacityPattern.write("/Gs1 gs /Pattern cs /Sh1 scn");
                            opacityPattern.end((pageBBox.join(" ")) + " re f");
                            this.doc.page.patterns[this.id] = opacityPattern;
                        } else {
                            this.doc.page.patterns[this.id] = pattern;
                        }
                        return pattern;
                    };

                    PDFGradient.prototype.apply = function(op) {
                        var dx, dy, m, m0, m1, m11, m12, m2, m21, m22, m3, m4, m5, ref, ref1;
                        ref = this.doc._ctm.slice(), m0 = ref[0], m1 = ref[1], m2 = ref[2], m3 = ref[3], m4 = ref[4], m5 = ref[5];
                        ref1 = this.transform, m11 = ref1[0], m12 = ref1[1], m21 = ref1[2], m22 = ref1[3], dx = ref1[4], dy = ref1[5];
                        m = [m0 * m11 + m2 * m12, m1 * m11 + m3 * m12, m0 * m21 + m2 * m22, m1 * m21 + m3 * m22, m0 * dx + m2 * dy + m4, m1 * dx + m3 * dy + m5];
                        if (!(this.embedded && m.join(" ") === this.matrix.join(" "))) {
                            this.embed(m);
                        }
                        return this.doc.addContent("/" + this.id + " " + op);
                    };

                    return PDFGradient;

                })();

                PDFLinearGradient = (function(superClass) {
                    extend(PDFLinearGradient, superClass);

                    function PDFLinearGradient(doc, x1, y1, x2, y2) {
                        this.doc = doc;
                        this.x1 = x1;
                        this.y1 = y1;
                        this.x2 = x2;
                        this.y2 = y2;
                        PDFLinearGradient.__super__.constructor.apply(this, arguments);
                    }

                    PDFLinearGradient.prototype.shader = function(fn) {
                        return this.doc.ref({
                            ShadingType: 2,
                            ColorSpace: this._colorSpace,
                            Coords: [this.x1, this.y1, this.x2, this.y2],
                            Function: fn,
                            Extend: [true, true]
                        });
                    };

                    PDFLinearGradient.prototype.opacityGradient = function() {
                        return new PDFLinearGradient(this.doc, this.x1, this.y1, this.x2, this.y2);
                    };

                    return PDFLinearGradient;

                })(PDFGradient);

                PDFRadialGradient = (function(superClass) {
                    extend(PDFRadialGradient, superClass);

                    function PDFRadialGradient(doc, x1, y1, r1, x2, y2, r2) {
                        this.doc = doc;
                        this.x1 = x1;
                        this.y1 = y1;
                        this.r1 = r1;
                        this.x2 = x2;
                        this.y2 = y2;
                        this.r2 = r2;
                        PDFRadialGradient.__super__.constructor.apply(this, arguments);
                    }

                    PDFRadialGradient.prototype.shader = function(fn) {
                        return this.doc.ref({
                            ShadingType: 3,
                            ColorSpace: this._colorSpace,
                            Coords: [this.x1, this.y1, this.r1, this.x2, this.y2, this.r2],
                            Function: fn,
                            Extend: [true, true]
                        });
                    };

                    PDFRadialGradient.prototype.opacityGradient = function() {
                        return new PDFRadialGradient(this.doc, this.x1, this.y1, this.r1, this.x2, this.y2, this.r2);
                    };

                    return PDFRadialGradient;

                })(PDFGradient);

                module.exports = {
                    PDFGradient: PDFGradient,
                    PDFLinearGradient: PDFLinearGradient,
                    PDFRadialGradient: PDFRadialGradient
                };

            }).call(this);


            /***/ }),
        /* 79 */
        /***/ (function(module, exports, __webpack_require__) {

            // Generated by CoffeeScript 1.12.6
            (function() {
                var KAPPA, SVGPath, number,
                    slice = [].slice;

                SVGPath = __webpack_require__(80);

                number = __webpack_require__(57).number;

                KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);

                module.exports = {
                    initVector: function() {
                        this._ctm = [1, 0, 0, 1, 0, 0];
                        return this._ctmStack = [];
                    },
                    save: function() {
                        this._ctmStack.push(this._ctm.slice());
                        return this.addContent('q');
                    },
                    restore: function() {
                        this._ctm = this._ctmStack.pop() || [1, 0, 0, 1, 0, 0];
                        return this.addContent('Q');
                    },
                    closePath: function() {
                        return this.addContent('h');
                    },
                    lineWidth: function(w) {
                        return this.addContent((number(w)) + " w");
                    },
                    _CAP_STYLES: {
                        BUTT: 0,
                        ROUND: 1,
                        SQUARE: 2
                    },
                    lineCap: function(c) {
                        if (typeof c === 'string') {
                            c = this._CAP_STYLES[c.toUpperCase()];
                        }
                        return this.addContent(c + " J");
                    },
                    _JOIN_STYLES: {
                        MITER: 0,
                        ROUND: 1,
                        BEVEL: 2
                    },
                    lineJoin: function(j) {
                        if (typeof j === 'string') {
                            j = this._JOIN_STYLES[j.toUpperCase()];
                        }
                        return this.addContent(j + " j");
                    },
                    miterLimit: function(m) {
                        return this.addContent((number(m)) + " M");
                    },
                    dash: function(length, options) {
                        var phase, ref, space, v;
                        if (options == null) {
                            options = {};
                        }
                        if (length == null) {
                            return this;
                        }
                        if (Array.isArray(length)) {
                            length = ((function() {
                                var i, len, results;
                                results = [];
                                for (i = 0, len = length.length; i < len; i++) {
                                    v = length[i];
                                    results.push(number(v));
                                }
                                return results;
                            })()).join(' ');
                            phase = options.phase || 0;
                            return this.addContent("[" + length + "] " + (number(phase)) + " d");
                        } else {
                            space = (ref = options.space) != null ? ref : length;
                            phase = options.phase || 0;
                            return this.addContent("[" + (number(length)) + " " + (number(space)) + "] " + (number(phase)) + " d");
                        }
                    },
                    undash: function() {
                        return this.addContent("[] 0 d");
                    },
                    moveTo: function(x, y) {
                        return this.addContent((number(x)) + " " + (number(y)) + " m");
                    },
                    lineTo: function(x, y) {
                        return this.addContent((number(x)) + " " + (number(y)) + " l");
                    },
                    bezierCurveTo: function(cp1x, cp1y, cp2x, cp2y, x, y) {
                        return this.addContent((number(cp1x)) + " " + (number(cp1y)) + " " + (number(cp2x)) + " " + (number(cp2y)) + " " + (number(x)) + " " + (number(y)) + " c");
                    },
                    quadraticCurveTo: function(cpx, cpy, x, y) {
                        return this.addContent((number(cpx)) + " " + (number(cpy)) + " " + (number(x)) + " " + (number(y)) + " v");
                    },
                    rect: function(x, y, w, h) {
                        return this.addContent((number(x)) + " " + (number(y)) + " " + (number(w)) + " " + (number(h)) + " re");
                    },
                    roundedRect: function(x, y, w, h, r) {
                        var c;
                        if (r == null) {
                            r = 0;
                        }
                        r = Math.min(r, 0.5 * w, 0.5 * h);
                        c = r * (1.0 - KAPPA);
                        this.moveTo(x + r, y);
                        this.lineTo(x + w - r, y);
                        this.bezierCurveTo(x + w - c, y, x + w, y + c, x + w, y + r);
                        this.lineTo(x + w, y + h - r);
                        this.bezierCurveTo(x + w, y + h - c, x + w - c, y + h, x + w - r, y + h);
                        this.lineTo(x + r, y + h);
                        this.bezierCurveTo(x + c, y + h, x, y + h - c, x, y + h - r);
                        this.lineTo(x, y + r);
                        this.bezierCurveTo(x, y + c, x + c, y, x + r, y);
                        return this.closePath();
                    },
                    ellipse: function(x, y, r1, r2) {
                        var ox, oy, xe, xm, ye, ym;
                        if (r2 == null) {
                            r2 = r1;
                        }
                        x -= r1;
                        y -= r2;
                        ox = r1 * KAPPA;
                        oy = r2 * KAPPA;
                        xe = x + r1 * 2;
                        ye = y + r2 * 2;
                        xm = x + r1;
                        ym = y + r2;
                        this.moveTo(x, ym);
                        this.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
                        this.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
                        this.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
                        this.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
                        return this.closePath();
                    },
                    circle: function(x, y, radius) {
                        return this.ellipse(x, y, radius);
                    },
                    arc: function(x, y, radius, startAngle, endAngle, anticlockwise) {
                        var HALF_PI, TWO_PI, ax, ay, cp1x, cp1y, cp2x, cp2y, curAng, deltaAng, deltaCx, deltaCy, dir, handleLen, i, numSegs, ref, segAng, segIdx;
                        if (anticlockwise == null) {
                            anticlockwise = false;
                        }
                        TWO_PI = 2.0 * Math.PI;
                        HALF_PI = 0.5 * Math.PI;
                        deltaAng = endAngle - startAngle;
                        if (Math.abs(deltaAng) > TWO_PI) {
                            deltaAng = TWO_PI;
                        } else if (deltaAng !== 0 && anticlockwise !== (deltaAng < 0)) {
                            dir = anticlockwise ? -1 : 1;
                            deltaAng = dir * TWO_PI + deltaAng;
                        }
                        numSegs = Math.ceil(Math.abs(deltaAng) / HALF_PI);
                        segAng = deltaAng / numSegs;
                        handleLen = (segAng / HALF_PI) * KAPPA * radius;
                        curAng = startAngle;
                        deltaCx = -Math.sin(curAng) * handleLen;
                        deltaCy = Math.cos(curAng) * handleLen;
                        ax = x + Math.cos(curAng) * radius;
                        ay = y + Math.sin(curAng) * radius;
                        this.moveTo(ax, ay);
                        for (segIdx = i = 0, ref = numSegs; 0 <= ref ? i < ref : i > ref; segIdx = 0 <= ref ? ++i : --i) {
                            cp1x = ax + deltaCx;
                            cp1y = ay + deltaCy;
                            curAng += segAng;
                            ax = x + Math.cos(curAng) * radius;
                            ay = y + Math.sin(curAng) * radius;
                            deltaCx = -Math.sin(curAng) * handleLen;
                            deltaCy = Math.cos(curAng) * handleLen;
                            cp2x = ax - deltaCx;
                            cp2y = ay - deltaCy;
                            this.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, ax, ay);
                        }
                        return this;
                    },
                    polygon: function() {
                        var i, len, point, points;
                        points = 1 <= arguments.length ? slice.call(arguments, 0) : [];
                        this.moveTo.apply(this, points.shift());
                        for (i = 0, len = points.length; i < len; i++) {
                            point = points[i];
                            this.lineTo.apply(this, point);
                        }
                        return this.closePath();
                    },
                    path: function(path) {
                        SVGPath.apply(this, path);
                        return this;
                    },
                    _windingRule: function(rule) {
                        if (/even-?odd/.test(rule)) {
                            return '*';
                        }
                        return '';
                    },
                    fill: function(color, rule) {
                        if (/(even-?odd)|(non-?zero)/.test(color)) {
                            rule = color;
                            color = null;
                        }
                        if (color) {
                            this.fillColor(color);
                        }
                        return this.addContent('f' + this._windingRule(rule));
                    },
                    stroke: function(color) {
                        if (color) {
                            this.strokeColor(color);
                        }
                        return this.addContent('S');
                    },
                    fillAndStroke: function(fillColor, strokeColor, rule) {
                        var isFillRule;
                        if (strokeColor == null) {
                            strokeColor = fillColor;
                        }
                        isFillRule = /(even-?odd)|(non-?zero)/;
                        if (isFillRule.test(fillColor)) {
                            rule = fillColor;
                            fillColor = null;
                        }
                        if (isFillRule.test(strokeColor)) {
                            rule = strokeColor;
                            strokeColor = fillColor;
                        }
                        if (fillColor) {
                            this.fillColor(fillColor);
                            this.strokeColor(strokeColor);
                        }
                        return this.addContent('B' + this._windingRule(rule));
                    },
                    clip: function(rule) {
                        return this.addContent('W' + this._windingRule(rule) + ' n');
                    },
                    transform: function(m11, m12, m21, m22, dx, dy) {
                        var m, m0, m1, m2, m3, m4, m5, v, values;
                        m = this._ctm;
                        m0 = m[0], m1 = m[1], m2 = m[2], m3 = m[3], m4 = m[4], m5 = m[5];
                        m[0] = m0 * m11 + m2 * m12;
                        m[1] = m1 * m11 + m3 * m12;
                        m[2] = m0 * m21 + m2 * m22;
                        m[3] = m1 * m21 + m3 * m22;
                        m[4] = m0 * dx + m2 * dy + m4;
                        m[5] = m1 * dx + m3 * dy + m5;
                        values = ((function() {
                            var i, len, ref, results;
                            ref = [m11, m12, m21, m22, dx, dy];
                            results = [];
                            for (i = 0, len = ref.length; i < len; i++) {
                                v = ref[i];
                                results.push(number(v));
                            }
                            return results;
                        })()).join(' ');
                        return this.addContent(values + " cm");
                    },
                    translate: function(x, y) {
                        return this.transform(1, 0, 0, 1, x, y);
                    },
                    rotate: function(angle, options) {
                        var cos, rad, ref, sin, x, x1, y, y1;
                        if (options == null) {
                            options = {};
                        }
                        rad = angle * Math.PI / 180;
                        cos = Math.cos(rad);
                        sin = Math.sin(rad);
                        x = y = 0;
                        if (options.origin != null) {
                            ref = options.origin, x = ref[0], y = ref[1];
                            x1 = x * cos - y * sin;
                            y1 = x * sin + y * cos;
                            x -= x1;
                            y -= y1;
                        }
                        return this.transform(cos, sin, -sin, cos, x, y);
                    },
                    scale: function(xFactor, yFactor, options) {
                        var ref, x, y;
                        if (yFactor == null) {
                            yFactor = xFactor;
                        }
                        if (options == null) {
                            options = {};
                        }
                        if (typeof yFactor === "object") {
                            options = yFactor;
                            yFactor = xFactor;
                        }
                        x = y = 0;
                        if (options.origin != null) {
                            ref = options.origin, x = ref[0], y = ref[1];
                            x -= xFactor * x;
                            y -= yFactor * y;
                        }
                        return this.transform(xFactor, 0, 0, yFactor, x, y);
                    }
                };

            }).call(this);


            /***/ }),
        /* 80 */
        /***/ (function(module, exports) {

            // Generated by CoffeeScript 1.12.6
            (function() {
                var SVGPath;

                SVGPath = (function() {
                    var apply, arcToSegments, cx, cy, parameters, parse, px, py, runners, segmentToBezier, solveArc, sx, sy;

                    function SVGPath() {}

                    SVGPath.apply = function(doc, path) {
                        var commands;
                        commands = parse(path);
                        return apply(commands, doc);
                    };

                    parameters = {
                        A: 7,
                        a: 7,
                        C: 6,
                        c: 6,
                        H: 1,
                        h: 1,
                        L: 2,
                        l: 2,
                        M: 2,
                        m: 2,
                        Q: 4,
                        q: 4,
                        S: 4,
                        s: 4,
                        T: 2,
                        t: 2,
                        V: 1,
                        v: 1,
                        Z: 0,
                        z: 0
                    };

                    parse = function(path) {
                        var args, c, cmd, curArg, foundDecimal, j, len, params, ret;
                        ret = [];
                        args = [];
                        curArg = "";
                        foundDecimal = false;
                        params = 0;
                        for (j = 0, len = path.length; j < len; j++) {
                            c = path[j];
                            if (parameters[c] != null) {
                                params = parameters[c];
                                if (cmd) {
                                    if (curArg.length > 0) {
                                        args[args.length] = +curArg;
                                    }
                                    ret[ret.length] = {
                                        cmd: cmd,
                                        args: args
                                    };
                                    args = [];
                                    curArg = "";
                                    foundDecimal = false;
                                }
                                cmd = c;
                            } else if ((c === " " || c === ",") || (c === "-" && curArg.length > 0 && curArg[curArg.length - 1] !== 'e') || (c === "." && foundDecimal)) {
                                if (curArg.length === 0) {
                                    continue;
                                }
                                if (args.length === params) {
                                    ret[ret.length] = {
                                        cmd: cmd,
                                        args: args
                                    };
                                    args = [+curArg];
                                    if (cmd === "M") {
                                        cmd = "L";
                                    }
                                    if (cmd === "m") {
                                        cmd = "l";
                                    }
                                } else {
                                    args[args.length] = +curArg;
                                }
                                foundDecimal = c === ".";
                                curArg = c === '-' || c === '.' ? c : '';
                            } else {
                                curArg += c;
                                if (c === '.') {
                                    foundDecimal = true;
                                }
                            }
                        }
                        if (curArg.length > 0) {
                            if (args.length === params) {
                                ret[ret.length] = {
                                    cmd: cmd,
                                    args: args
                                };
                                args = [+curArg];
                                if (cmd === "M") {
                                    cmd = "L";
                                }
                                if (cmd === "m") {
                                    cmd = "l";
                                }
                            } else {
                                args[args.length] = +curArg;
                            }
                        }
                        ret[ret.length] = {
                            cmd: cmd,
                            args: args
                        };
                        return ret;
                    };

                    cx = cy = px = py = sx = sy = 0;

                    apply = function(commands, doc) {
                        var c, i, j, len, name;
                        cx = cy = px = py = sx = sy = 0;
                        for (i = j = 0, len = commands.length; j < len; i = ++j) {
                            c = commands[i];
                            if (typeof runners[name = c.cmd] === "function") {
                                runners[name](doc, c.args);
                            }
                        }
                        return cx = cy = px = py = 0;
                    };

                    runners = {
                        M: function(doc, a) {
                            cx = a[0];
                            cy = a[1];
                            px = py = null;
                            sx = cx;
                            sy = cy;
                            return doc.moveTo(cx, cy);
                        },
                        m: function(doc, a) {
                            cx += a[0];
                            cy += a[1];
                            px = py = null;
                            sx = cx;
                            sy = cy;
                            return doc.moveTo(cx, cy);
                        },
                        C: function(doc, a) {
                            cx = a[4];
                            cy = a[5];
                            px = a[2];
                            py = a[3];
                            return doc.bezierCurveTo.apply(doc, a);
                        },
                        c: function(doc, a) {
                            doc.bezierCurveTo(a[0] + cx, a[1] + cy, a[2] + cx, a[3] + cy, a[4] + cx, a[5] + cy);
                            px = cx + a[2];
                            py = cy + a[3];
                            cx += a[4];
                            return cy += a[5];
                        },
                        S: function(doc, a) {
                            if (px === null) {
                                px = cx;
                                py = cy;
                            }
                            doc.bezierCurveTo(cx - (px - cx), cy - (py - cy), a[0], a[1], a[2], a[3]);
                            px = a[0];
                            py = a[1];
                            cx = a[2];
                            return cy = a[3];
                        },
                        s: function(doc, a) {
                            if (px === null) {
                                px = cx;
                                py = cy;
                            }
                            doc.bezierCurveTo(cx - (px - cx), cy - (py - cy), cx + a[0], cy + a[1], cx + a[2], cy + a[3]);
                            px = cx + a[0];
                            py = cy + a[1];
                            cx += a[2];
                            return cy += a[3];
                        },
                        Q: function(doc, a) {
                            px = a[0];
                            py = a[1];
                            cx = a[2];
                            cy = a[3];
                            return doc.quadraticCurveTo(a[0], a[1], cx, cy);
                        },
                        q: function(doc, a) {
                            doc.quadraticCurveTo(a[0] + cx, a[1] + cy, a[2] + cx, a[3] + cy);
                            px = cx + a[0];
                            py = cy + a[1];
                            cx += a[2];
                            return cy += a[3];
                        },
                        T: function(doc, a) {
                            if (px === null) {
                                px = cx;
                                py = cy;
                            } else {
                                px = cx - (px - cx);
                                py = cy - (py - cy);
                            }
                            doc.quadraticCurveTo(px, py, a[0], a[1]);
                            px = cx - (px - cx);
                            py = cy - (py - cy);
                            cx = a[0];
                            return cy = a[1];
                        },
                        t: function(doc, a) {
                            if (px === null) {
                                px = cx;
                                py = cy;
                            } else {
                                px = cx - (px - cx);
                                py = cy - (py - cy);
                            }
                            doc.quadraticCurveTo(px, py, cx + a[0], cy + a[1]);
                            cx += a[0];
                            return cy += a[1];
                        },
                        A: function(doc, a) {
                            solveArc(doc, cx, cy, a);
                            cx = a[5];
                            return cy = a[6];
                        },
                        a: function(doc, a) {
                            a[5] += cx;
                            a[6] += cy;
                            solveArc(doc, cx, cy, a);
                            cx = a[5];
                            return cy = a[6];
                        },
                        L: function(doc, a) {
                            cx = a[0];
                            cy = a[1];
                            px = py = null;
                            return doc.lineTo(cx, cy);
                        },
                        l: function(doc, a) {
                            cx += a[0];
                            cy += a[1];
                            px = py = null;
                            return doc.lineTo(cx, cy);
                        },
                        H: function(doc, a) {
                            cx = a[0];
                            px = py = null;
                            return doc.lineTo(cx, cy);
                        },
                        h: function(doc, a) {
                            cx += a[0];
                            px = py = null;
                            return doc.lineTo(cx, cy);
                        },
                        V: function(doc, a) {
                            cy = a[0];
                            px = py = null;
                            return doc.lineTo(cx, cy);
                        },
                        v: function(doc, a) {
                            cy += a[0];
                            px = py = null;
                            return doc.lineTo(cx, cy);
                        },
                        Z: function(doc) {
                            doc.closePath();
                            cx = sx;
                            return cy = sy;
                        },
                        z: function(doc) {
                            doc.closePath();
                            cx = sx;
                            return cy = sy;
                        }
                    };

                    solveArc = function(doc, x, y, coords) {
                        var bez, ex, ey, j, large, len, results, rot, rx, ry, seg, segs, sweep;
                        rx = coords[0], ry = coords[1], rot = coords[2], large = coords[3], sweep = coords[4], ex = coords[5], ey = coords[6];
                        segs = arcToSegments(ex, ey, rx, ry, large, sweep, rot, x, y);
                        results = [];
                        for (j = 0, len = segs.length; j < len; j++) {
                            seg = segs[j];
                            bez = segmentToBezier.apply(null, seg);
                            results.push(doc.bezierCurveTo.apply(doc, bez));
                        }
                        return results;
                    };

                    arcToSegments = function(x, y, rx, ry, large, sweep, rotateX, ox, oy) {
                        var a00, a01, a10, a11, cos_th, d, i, j, pl, ref, result, segments, sfactor, sfactor_sq, sin_th, th, th0, th1, th2, th3, th_arc, x0, x1, xc, y0, y1, yc;
                        th = rotateX * (Math.PI / 180);
                        sin_th = Math.sin(th);
                        cos_th = Math.cos(th);
                        rx = Math.abs(rx);
                        ry = Math.abs(ry);
                        px = cos_th * (ox - x) * 0.5 + sin_th * (oy - y) * 0.5;
                        py = cos_th * (oy - y) * 0.5 - sin_th * (ox - x) * 0.5;
                        pl = (px * px) / (rx * rx) + (py * py) / (ry * ry);
                        if (pl > 1) {
                            pl = Math.sqrt(pl);
                            rx *= pl;
                            ry *= pl;
                        }
                        a00 = cos_th / rx;
                        a01 = sin_th / rx;
                        a10 = (-sin_th) / ry;
                        a11 = cos_th / ry;
                        x0 = a00 * ox + a01 * oy;
                        y0 = a10 * ox + a11 * oy;
                        x1 = a00 * x + a01 * y;
                        y1 = a10 * x + a11 * y;
                        d = (x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0);
                        sfactor_sq = 1 / d - 0.25;
                        if (sfactor_sq < 0) {
                            sfactor_sq = 0;
                        }
                        sfactor = Math.sqrt(sfactor_sq);
                        if (sweep === large) {
                            sfactor = -sfactor;
                        }
                        xc = 0.5 * (x0 + x1) - sfactor * (y1 - y0);
                        yc = 0.5 * (y0 + y1) + sfactor * (x1 - x0);
                        th0 = Math.atan2(y0 - yc, x0 - xc);
                        th1 = Math.atan2(y1 - yc, x1 - xc);
                        th_arc = th1 - th0;
                        if (th_arc < 0 && sweep === 1) {
                            th_arc += 2 * Math.PI;
                        } else if (th_arc > 0 && sweep === 0) {
                            th_arc -= 2 * Math.PI;
                        }
                        segments = Math.ceil(Math.abs(th_arc / (Math.PI * 0.5 + 0.001)));
                        result = [];
                        for (i = j = 0, ref = segments; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
                            th2 = th0 + i * th_arc / segments;
                            th3 = th0 + (i + 1) * th_arc / segments;
                            result[i] = [xc, yc, th2, th3, rx, ry, sin_th, cos_th];
                        }
                        return result;
                    };

                    segmentToBezier = function(cx, cy, th0, th1, rx, ry, sin_th, cos_th) {
                        var a00, a01, a10, a11, t, th_half, x1, x2, x3, y1, y2, y3;
                        a00 = cos_th * rx;
                        a01 = -sin_th * ry;
                        a10 = sin_th * rx;
                        a11 = cos_th * ry;
                        th_half = 0.5 * (th1 - th0);
                        t = (8 / 3) * Math.sin(th_half * 0.5) * Math.sin(th_half * 0.5) / Math.sin(th_half);
                        x1 = cx + Math.cos(th0) - t * Math.sin(th0);
                        y1 = cy + Math.sin(th0) + t * Math.cos(th0);
                        x3 = cx + Math.cos(th1);
                        y3 = cy + Math.sin(th1);
                        x2 = x3 + t * Math.sin(th1);
                        y2 = y3 - t * Math.cos(th1);
                        return [a00 * x1 + a01 * y1, a10 * x1 + a11 * y1, a00 * x2 + a01 * y2, a10 * x2 + a11 * y2, a00 * x3 + a01 * y3, a10 * x3 + a11 * y3];
                    };

                    return SVGPath;

                })();

                module.exports = SVGPath;

            }).call(this);


            /***/ }),
        /* 81 */
        /***/ (function(module, exports, __webpack_require__) {

            // Generated by CoffeeScript 1.12.6
            (function() {
                var PDFFont;

                PDFFont = __webpack_require__(82);

                module.exports = {
                    initFonts: function() {
                        this._fontFamilies = {};
                        this._fontCount = 0;
                        this._fontSize = 12;
                        this._font = null;
                        this._registeredFonts = {};

                    },
                    font: function(src, family, size) {
                        var cacheKey, font, id, ref;
                        if (typeof family === 'number') {
                            size = family;
                            family = null;
                        }
                        if (typeof src === 'string' && this._registeredFonts[src]) {
                            cacheKey = src;
                            ref = this._registeredFonts[src], src = ref.src, family = ref.family;
                        } else {
                            cacheKey = family || src;
                            if (typeof cacheKey !== 'string') {
                                cacheKey = null;
                            }
                        }
                        if (size != null) {
                            this.fontSize(size);
                        }
                        if (font = this._fontFamilies[cacheKey]) {
                            this._font = font;
                            return this;
                        }
                        id = 'F' + (++this._fontCount);
                        this._font = PDFFont.open(this, src, family, id);
                        if (font = this._fontFamilies[this._font.name]) {
                            this._font = font;
                            return this;
                        }
                        if (cacheKey) {
                            this._fontFamilies[cacheKey] = this._font;
                        }
                        if (this._font.name) {
                            this._fontFamilies[this._font.name] = this._font;
                        }
                        return this;
                    },
                    fontSize: function(_fontSize) {
                        this._fontSize = _fontSize;
                        return this;
                    },
                    currentLineHeight: function(includeGap) {
                        if (includeGap == null) {
                            includeGap = false;
                        }
                        return this._font.lineHeight(this._fontSize, includeGap);
                    },
                    registerFont: function(name, src, family) {
                        this._registeredFonts[name] = {
                            src: src,
                            family: family
                        };
                        return this;
                    }
                };

            }).call(this);


            /***/ }),
        /* 82 */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(Buffer) {// Generated by CoffeeScript 1.12.6
                (function() {
                    var EmbeddedFont, PDFFont, StandardFont, fontkit;

                    fontkit = __webpack_require__(83);

                    PDFFont = (function() {
                        PDFFont.open = function(document, src, family, id) {
                            var font;
                            if (typeof src === 'string') {
                                if (StandardFont.isStandardFont(src)) {
                                    return new StandardFont(document, src, id);
                                }
                                font = fontkit.openSync(src, family);
                            } else if (Buffer.isBuffer(src)) {
                                font = fontkit.create(src, family);
                            } else if (src instanceof Uint8Array) {
                                font = fontkit.create(new Buffer(src), family);
                            } else if (src instanceof ArrayBuffer) {
                                font = fontkit.create(new Buffer(new Uint8Array(src)), family);
                            }
                            if (font == null) {
                                throw new Error('Not a supported font format or standard PDF font.');
                            }
                            return new EmbeddedFont(document, font, id);
                        };

                        function PDFFont() {
                            throw new Error('Cannot construct a PDFFont directly.');
                        }

                        PDFFont.prototype.encode = function(text) {
                            throw new Error('Must be implemented by subclasses');
                        };

                        PDFFont.prototype.widthOfString = function(text) {
                            throw new Error('Must be implemented by subclasses');
                        };

                        PDFFont.prototype.ref = function() {
                            return this.dictionary != null ? this.dictionary : this.dictionary = this.document.ref();
                        };

                        PDFFont.prototype.finalize = function() {
                            if (this.embedded || (this.dictionary == null)) {
                                return;
                            }
                            this.embed();
                            return this.embedded = true;
                        };

                        PDFFont.prototype.embed = function() {
                            throw new Error('Must be implemented by subclasses');
                        };

                        PDFFont.prototype.lineHeight = function(size, includeGap) {
                            var gap;
                            if (includeGap == null) {
                                includeGap = false;
                            }
                            gap = includeGap ? this.lineGap : 0;
                            return (this.ascender + gap - this.descender) / 1000 * size;
                        };

                        return PDFFont;

                    })();

                    module.exports = PDFFont;

                    StandardFont = __webpack_require__(285);

                    EmbeddedFont = __webpack_require__(287);

                }).call(this);

                /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))

            /***/ }),
        /* 83 */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(Buffer, process) {'use strict';

                function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

                var r = _interopDefault(__webpack_require__(84));
                var _Object$getOwnPropertyDescriptor = _interopDefault(__webpack_require__(122));
                var _getIterator = _interopDefault(__webpack_require__(148));
                var _Object$freeze = _interopDefault(__webpack_require__(181));
                var _Object$keys = _interopDefault(__webpack_require__(185));
                var _typeof = _interopDefault(__webpack_require__(188));
                var _Object$defineProperty = _interopDefault(__webpack_require__(205));
                var _classCallCheck = _interopDefault(__webpack_require__(208));
                var _createClass = _interopDefault(__webpack_require__(209));
                var _Map = _interopDefault(__webpack_require__(210));
                var _possibleConstructorReturn = _interopDefault(__webpack_require__(227));
                var _inherits = _interopDefault(__webpack_require__(228));
                var restructure_src_utils = __webpack_require__(110);
                var _Object$defineProperties = _interopDefault(__webpack_require__(236));
                var isEqual = _interopDefault(__webpack_require__(239));
                var _Object$assign = _interopDefault(__webpack_require__(242));
                var _String$fromCodePoint = _interopDefault(__webpack_require__(246));
                var _Array$from = _interopDefault(__webpack_require__(249));
                var _Set = _interopDefault(__webpack_require__(254));
                var unicode = _interopDefault(__webpack_require__(258));
                var UnicodeTrie = _interopDefault(__webpack_require__(17));
                var StateMachine = _interopDefault(__webpack_require__(260));
                var _Number$EPSILON = _interopDefault(__webpack_require__(269));
                var cloneDeep = _interopDefault(__webpack_require__(272));
                var inflate = _interopDefault(__webpack_require__(18));
                var brotli = _interopDefault(__webpack_require__(273));



                var fontkit = {};
                fontkit.logErrors = false;

                var formats = [];
                fontkit.registerFormat = function (format) {
                    formats.push(format);
                };

                fontkit.openSync = function (filename, postscriptName) {
                    var buffer = __webpack_require__(56).readFileSync(filename);
                    return fontkit.create(buffer, postscriptName);
                };

                fontkit.open = function (filename, postscriptName, callback) {
                    if (typeof postscriptName === 'function') {
                        callback = postscriptName;
                        postscriptName = null;
                    }

                    __webpack_require__(56).readFile(filename, function (err, buffer) {
                        if (err) {
                            return callback(err);
                        }

                        try {
                            var font = fontkit.create(buffer, postscriptName);
                        } catch (e) {
                            return callback(e);
                        }

                        return callback(null, font);
                    });

                    return;
                };

                fontkit.create = function (buffer, postscriptName) {
                    for (var i = 0; i < formats.length; i++) {
                        var format = formats[i];
                        if (format.probe(buffer)) {
                            var font = new format(new r.DecodeStream(buffer));
                            if (postscriptName) {
                                return font.getFont(postscriptName);
                            }

                            return font;
                        }
                    }

                    throw new Error('Unknown font format');
                };

                /**
                 * This decorator caches the results of a getter or method such that
                 * the results are lazily computed once, and then cached.
                 * @private
                 */
                function cache(target, key, descriptor) {
                    if (descriptor.get) {
                        var get = descriptor.get;
                        descriptor.get = function () {
                            var value = get.call(this);
                            _Object$defineProperty(this, key, { value: value });
                            return value;
                        };
                    } else if (typeof descriptor.value === 'function') {
                        var fn = descriptor.value;

                        return {
                            get: function get() {
                                var cache = new _Map();
                                function memoized() {
                                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                        args[_key] = arguments[_key];
                                    }

                                    var key = args.length > 0 ? args[0] : 'value';
                                    if (cache.has(key)) {
                                        return cache.get(key);
                                    }

                                    var result = fn.apply(this, args);
                                    cache.set(key, result);
                                    return result;
                                };

                                _Object$defineProperty(this, key, { value: memoized });
                                return memoized;
                            }
                        };
                    }
                }

                var SubHeader = new r.Struct({
                    firstCode: r.uint16,
                    entryCount: r.uint16,
                    idDelta: r.int16,
                    idRangeOffset: r.uint16
                });

                var CmapGroup = new r.Struct({
                    startCharCode: r.uint32,
                    endCharCode: r.uint32,
                    glyphID: r.uint32
                });

                var UnicodeValueRange = new r.Struct({
                    startUnicodeValue: r.uint24,
                    additionalCount: r.uint8
                });

                var UVSMapping = new r.Struct({
                    unicodeValue: r.uint24,
                    glyphID: r.uint16
                });

                var DefaultUVS = new r.Array(UnicodeValueRange, r.uint32);
                var NonDefaultUVS = new r.Array(UVSMapping, r.uint32);

                var VarSelectorRecord = new r.Struct({
                    varSelector: r.uint24,
                    defaultUVS: new r.Pointer(r.uint32, DefaultUVS, { type: 'parent' }),
                    nonDefaultUVS: new r.Pointer(r.uint32, NonDefaultUVS, { type: 'parent' })
                });

                var CmapSubtable = new r.VersionedStruct(r.uint16, {
                    0: { // Byte encoding
                        length: r.uint16, // Total table length in bytes (set to 262 for format 0)
                        language: r.uint16, // Language code for this encoding subtable, or zero if language-independent
                        codeMap: new r.LazyArray(r.uint8, 256)
                    },

                    2: { // High-byte mapping (CJK)
                        length: r.uint16,
                        language: r.uint16,
                        subHeaderKeys: new r.Array(r.uint16, 256),
                        subHeaderCount: function subHeaderCount(t) {
                            return Math.max.apply(Math, t.subHeaderKeys);
                        },
                        subHeaders: new r.LazyArray(SubHeader, 'subHeaderCount'),
                        glyphIndexArray: new r.LazyArray(r.uint16, 'subHeaderCount')
                    },

                    4: { // Segment mapping to delta values
                        length: r.uint16, // Total table length in bytes
                        language: r.uint16, // Language code
                        segCountX2: r.uint16,
                        segCount: function segCount(t) {
                            return t.segCountX2 >> 1;
                        },
                        searchRange: r.uint16,
                        entrySelector: r.uint16,
                        rangeShift: r.uint16,
                        endCode: new r.LazyArray(r.uint16, 'segCount'),
                        reservedPad: new r.Reserved(r.uint16), // This value should be zero
                        startCode: new r.LazyArray(r.uint16, 'segCount'),
                        idDelta: new r.LazyArray(r.int16, 'segCount'),
                        idRangeOffset: new r.LazyArray(r.uint16, 'segCount'),
                        glyphIndexArray: new r.LazyArray(r.uint16, function (t) {
                            return (t.length - t._currentOffset) / 2;
                        })
                    },

                    6: { // Trimmed table
                        length: r.uint16,
                        language: r.uint16,
                        firstCode: r.uint16,
                        entryCount: r.uint16,
                        glyphIndices: new r.LazyArray(r.uint16, 'entryCount')
                    },

                    8: { // mixed 16-bit and 32-bit coverage
                        reserved: new r.Reserved(r.uint16),
                        length: r.uint32,
                        language: r.uint16,
                        is32: new r.LazyArray(r.uint8, 8192),
                        nGroups: r.uint32,
                        groups: new r.LazyArray(CmapGroup, 'nGroups')
                    },

                    10: { // Trimmed Array
                        reserved: new r.Reserved(r.uint16),
                        length: r.uint32,
                        language: r.uint32,
                        firstCode: r.uint32,
                        entryCount: r.uint32,
                        glyphIndices: new r.LazyArray(r.uint16, 'numChars')
                    },

                    12: { // Segmented coverage
                        reserved: new r.Reserved(r.uint16),
                        length: r.uint32,
                        language: r.uint32,
                        nGroups: r.uint32,
                        groups: new r.LazyArray(CmapGroup, 'nGroups')
                    },

                    13: { // Many-to-one range mappings (same as 12 except for group.startGlyphID)
                        reserved: new r.Reserved(r.uint16),
                        length: r.uint32,
                        language: r.uint32,
                        nGroups: r.uint32,
                        groups: new r.LazyArray(CmapGroup, 'nGroups')
                    },

                    14: { // Unicode Variation Sequences
                        length: r.uint32,
                        numRecords: r.uint32,
                        varSelectors: new r.LazyArray(VarSelectorRecord, 'numRecords')
                    }
                });

                var CmapEntry = new r.Struct({
                    platformID: r.uint16, // Platform identifier
                    encodingID: r.uint16, // Platform-specific encoding identifier
                    table: new r.Pointer(r.uint32, CmapSubtable, { type: 'parent', lazy: true })
                });

                // character to glyph mapping
                var cmap = new r.Struct({
                    version: r.uint16,
                    numSubtables: r.uint16,
                    tables: new r.Array(CmapEntry, 'numSubtables')
                });

                // font header
                var head = new r.Struct({
                    version: r.int32, // 0x00010000 (version 1.0)
                    revision: r.int32, // set by font manufacturer
                    checkSumAdjustment: r.uint32,
                    magicNumber: r.uint32, // set to 0x5F0F3CF5
                    flags: r.uint16,
                    unitsPerEm: r.uint16, // range from 64 to 16384
                    created: new r.Array(r.int32, 2),
                    modified: new r.Array(r.int32, 2),
                    xMin: r.int16, // for all glyph bounding boxes
                    yMin: r.int16, // for all glyph bounding boxes
                    xMax: r.int16, // for all glyph bounding boxes
                    yMax: r.int16, // for all glyph bounding boxes
                    macStyle: new r.Bitfield(r.uint16, ['bold', 'italic', 'underline', 'outline', 'shadow', 'condensed', 'extended']),
                    lowestRecPPEM: r.uint16, // smallest readable size in pixels
                    fontDirectionHint: r.int16,
                    indexToLocFormat: r.int16, // 0 for short offsets, 1 for long
                    glyphDataFormat: r.int16 // 0 for current format
                });

                // horizontal header
                var hhea = new r.Struct({
                    version: r.int32,
                    ascent: r.int16, // Distance from baseline of highest ascender
                    descent: r.int16, // Distance from baseline of lowest descender
                    lineGap: r.int16, // Typographic line gap
                    advanceWidthMax: r.uint16, // Maximum advance width value in 'hmtx' table
                    minLeftSideBearing: r.int16, // Maximum advance width value in 'hmtx' table
                    minRightSideBearing: r.int16, // Minimum right sidebearing value
                    xMaxExtent: r.int16,
                    caretSlopeRise: r.int16, // Used to calculate the slope of the cursor (rise/run); 1 for vertical
                    caretSlopeRun: r.int16, // 0 for vertical
                    caretOffset: r.int16, // Set to 0 for non-slanted fonts
                    reserved: new r.Reserved(r.int16, 4),
                    metricDataFormat: r.int16, // 0 for current format
                    numberOfMetrics: r.uint16 // Number of advance widths in 'hmtx' table
                });

                var HmtxEntry = new r.Struct({
                    advance: r.uint16,
                    bearing: r.int16
                });

                var hmtx = new r.Struct({
                    metrics: new r.LazyArray(HmtxEntry, function (t) {
                        return t.parent.hhea.numberOfMetrics;
                    }),
                    bearings: new r.LazyArray(r.int16, function (t) {
                        return t.parent.maxp.numGlyphs - t.parent.hhea.numberOfMetrics;
                    })
                });

                // maxiumum profile
                var maxp = new r.Struct({
                    version: r.int32,
                    numGlyphs: r.uint16, // The number of glyphs in the font
                    maxPoints: r.uint16, // Maximum points in a non-composite glyph
                    maxContours: r.uint16, // Maximum contours in a non-composite glyph
                    maxComponentPoints: r.uint16, // Maximum points in a composite glyph
                    maxComponentContours: r.uint16, // Maximum contours in a composite glyph
                    maxZones: r.uint16, // 1 if instructions do not use the twilight zone, 2 otherwise
                    maxTwilightPoints: r.uint16, // Maximum points used in Z0
                    maxStorage: r.uint16, // Number of Storage Area locations
                    maxFunctionDefs: r.uint16, // Number of FDEFs
                    maxInstructionDefs: r.uint16, // Number of IDEFs
                    maxStackElements: r.uint16, // Maximum stack depth
                    maxSizeOfInstructions: r.uint16, // Maximum byte count for glyph instructions
                    maxComponentElements: r.uint16, // Maximum number of components referenced at éˆ¥æ¸¢op leveléˆ¥ï¿½ for any composite glyph
                    maxComponentDepth: r.uint16 // Maximum levels of recursion; 1 for simple components
                });

                /**
                 * Gets an encoding name from platform, encoding, and language ids.
                 * Returned encoding names can be used in iconv-lite to decode text.
                 */
                function getEncoding(platformID, encodingID) {
                    var languageID = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

                    if (platformID === 1 && MAC_LANGUAGE_ENCODINGS[languageID]) {
                        return MAC_LANGUAGE_ENCODINGS[languageID];
                    }

                    return ENCODINGS[platformID][encodingID];
                }

                // Map of platform ids to encoding ids.
                var ENCODINGS = [
                    // unicode
                    ['utf16be', 'utf16be', 'utf16be', 'utf16be', 'utf16be', 'utf16be'],

                    // macintosh
                    // Mappings available at http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/
                    // 0	Roman                 17	Malayalam
                    // 1	Japanese	            18	Sinhalese
                    // 2	Traditional Chinese	  19	Burmese
                    // 3	Korean	              20	Khmer
                    // 4	Arabic	              21	Thai
                    // 5	Hebrew	              22	Laotian
                    // 6	Greek	                23	Georgian
                    // 7	Russian	              24	Armenian
                    // 8	RSymbol	              25	Simplified Chinese
                    // 9	Devanagari	          26	Tibetan
                    // 10	Gurmukhi	            27	Mongolian
                    // 11	Gujarati	            28	Geez
                    // 12	Oriya	                29	Slavic
                    // 13	Bengali	              30	Vietnamese
                    // 14	Tamil	                31	Sindhi
                    // 15	Telugu	              32	(Uninterpreted)
                    // 16	Kannada
                    ['macroman', 'shift-jis', 'big5', 'euc-kr', 'iso-8859-6', 'iso-8859-8', 'macgreek', 'maccyrillic', 'symbol', 'Devanagari', 'Gurmukhi', 'Gujarati', 'Oriya', 'Bengali', 'Tamil', 'Telugu', 'Kannada', 'Malayalam', 'Sinhalese', 'Burmese', 'Khmer', 'macthai', 'Laotian', 'Georgian', 'Armenian', 'gb-2312-80', 'Tibetan', 'Mongolian', 'Geez', 'maccenteuro', 'Vietnamese', 'Sindhi'],

                    // ISO (deprecated)
                    ['ascii'],

                    // windows
                    // Docs here: http://msdn.microsoft.com/en-us/library/system.text.encoding(v=vs.110).aspx
                    ['symbol', 'utf16be', 'shift-jis', 'gb18030', 'big5', 'wansung', 'johab', null, null, null, 'utf16be']];

                // Overrides for Mac scripts by language id.
                // See http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt
                var MAC_LANGUAGE_ENCODINGS = {
                    15: 'maciceland',
                    17: 'macturkish',
                    18: 'maccroatian',
                    24: 'maccenteuro',
                    25: 'maccenteuro',
                    26: 'maccenteuro',
                    27: 'maccenteuro',
                    28: 'maccenteuro',
                    30: 'maciceland',
                    37: 'macromania',
                    38: 'maccenteuro',
                    39: 'maccenteuro',
                    40: 'maccenteuro',
                    143: 'macinuit', // Unsupported by iconv-lite
                    146: 'macgaelic' // Unsupported by iconv-lite
                };

                // Map of platform ids to BCP-47 language codes.
                var LANGUAGES = [
                    // unicode
                    [], { // macintosh
                        0: 'en', 30: 'fo', 60: 'ks', 90: 'rw',
                        1: 'fr', 31: 'fa', 61: 'ku', 91: 'rn',
                        2: 'de', 32: 'ru', 62: 'sd', 92: 'ny',
                        3: 'it', 33: 'zh', 63: 'bo', 93: 'mg',
                        4: 'nl', 34: 'nl-BE', 64: 'ne', 94: 'eo',
                        5: 'sv', 35: 'ga', 65: 'sa', 128: 'cy',
                        6: 'es', 36: 'sq', 66: 'mr', 129: 'eu',
                        7: 'da', 37: 'ro', 67: 'bn', 130: 'ca',
                        8: 'pt', 38: 'cz', 68: 'as', 131: 'la',
                        9: 'no', 39: 'sk', 69: 'gu', 132: 'qu',
                        10: 'he', 40: 'si', 70: 'pa', 133: 'gn',
                        11: 'ja', 41: 'yi', 71: 'or', 134: 'ay',
                        12: 'ar', 42: 'sr', 72: 'ml', 135: 'tt',
                        13: 'fi', 43: 'mk', 73: 'kn', 136: 'ug',
                        14: 'el', 44: 'bg', 74: 'ta', 137: 'dz',
                        15: 'is', 45: 'uk', 75: 'te', 138: 'jv',
                        16: 'mt', 46: 'be', 76: 'si', 139: 'su',
                        17: 'tr', 47: 'uz', 77: 'my', 140: 'gl',
                        18: 'hr', 48: 'kk', 78: 'km', 141: 'af',
                        19: 'zh-Hant', 49: 'az-Cyrl', 79: 'lo', 142: 'br',
                        20: 'ur', 50: 'az-Arab', 80: 'vi', 143: 'iu',
                        21: 'hi', 51: 'hy', 81: 'id', 144: 'gd',
                        22: 'th', 52: 'ka', 82: 'tl', 145: 'gv',
                        23: 'ko', 53: 'mo', 83: 'ms', 146: 'ga',
                        24: 'lt', 54: 'ky', 84: 'ms-Arab', 147: 'to',
                        25: 'pl', 55: 'tg', 85: 'am', 148: 'el-polyton',
                        26: 'hu', 56: 'tk', 86: 'ti', 149: 'kl',
                        27: 'es', 57: 'mn-CN', 87: 'om', 150: 'az',
                        28: 'lv', 58: 'mn', 88: 'so', 151: 'nn',
                        29: 'se', 59: 'ps', 89: 'sw'
                    },

                    // ISO (deprecated)
                    [], { // windows
                        0x0436: 'af', 0x4009: 'en-IN', 0x0487: 'rw', 0x0432: 'tn',
                        0x041C: 'sq', 0x1809: 'en-IE', 0x0441: 'sw', 0x045B: 'si',
                        0x0484: 'gsw', 0x2009: 'en-JM', 0x0457: 'kok', 0x041B: 'sk',
                        0x045E: 'am', 0x4409: 'en-MY', 0x0412: 'ko', 0x0424: 'sl',
                        0x1401: 'ar-DZ', 0x1409: 'en-NZ', 0x0440: 'ky', 0x2C0A: 'es-AR',
                        0x3C01: 'ar-BH', 0x3409: 'en-PH', 0x0454: 'lo', 0x400A: 'es-BO',
                        0x0C01: 'ar', 0x4809: 'en-SG', 0x0426: 'lv', 0x340A: 'es-CL',
                        0x0801: 'ar-IQ', 0x1C09: 'en-ZA', 0x0427: 'lt', 0x240A: 'es-CO',
                        0x2C01: 'ar-JO', 0x2C09: 'en-TT', 0x082E: 'dsb', 0x140A: 'es-CR',
                        0x3401: 'ar-KW', 0x0809: 'en-GB', 0x046E: 'lb', 0x1C0A: 'es-DO',
                        0x3001: 'ar-LB', 0x0409: 'en', 0x042F: 'mk', 0x300A: 'es-EC',
                        0x1001: 'ar-LY', 0x3009: 'en-ZW', 0x083E: 'ms-BN', 0x440A: 'es-SV',
                        0x1801: 'ary', 0x0425: 'et', 0x043E: 'ms', 0x100A: 'es-GT',
                        0x2001: 'ar-OM', 0x0438: 'fo', 0x044C: 'ml', 0x480A: 'es-HN',
                        0x4001: 'ar-QA', 0x0464: 'fil', 0x043A: 'mt', 0x080A: 'es-MX',
                        0x0401: 'ar-SA', 0x040B: 'fi', 0x0481: 'mi', 0x4C0A: 'es-NI',
                        0x2801: 'ar-SY', 0x080C: 'fr-BE', 0x047A: 'arn', 0x180A: 'es-PA',
                        0x1C01: 'aeb', 0x0C0C: 'fr-CA', 0x044E: 'mr', 0x3C0A: 'es-PY',
                        0x3801: 'ar-AE', 0x040C: 'fr', 0x047C: 'moh', 0x280A: 'es-PE',
                        0x2401: 'ar-YE', 0x140C: 'fr-LU', 0x0450: 'mn', 0x500A: 'es-PR',
                        0x042B: 'hy', 0x180C: 'fr-MC', 0x0850: 'mn-CN', 0x0C0A: 'es',
                        0x044D: 'as', 0x100C: 'fr-CH', 0x0461: 'ne', 0x040A: 'es',
                        0x082C: 'az-Cyrl', 0x0462: 'fy', 0x0414: 'nb', 0x540A: 'es-US',
                        0x042C: 'az', 0x0456: 'gl', 0x0814: 'nn', 0x380A: 'es-UY',
                        0x046D: 'ba', 0x0437: 'ka', 0x0482: 'oc', 0x200A: 'es-VE',
                        0x042D: 'eu', 0x0C07: 'de-AT', 0x0448: 'or', 0x081D: 'sv-FI',
                        0x0423: 'be', 0x0407: 'de', 0x0463: 'ps', 0x041D: 'sv',
                        0x0845: 'bn', 0x1407: 'de-LI', 0x0415: 'pl', 0x045A: 'syr',
                        0x0445: 'bn-IN', 0x1007: 'de-LU', 0x0416: 'pt', 0x0428: 'tg',
                        0x201A: 'bs-Cyrl', 0x0807: 'de-CH', 0x0816: 'pt-PT', 0x085F: 'tzm',
                        0x141A: 'bs', 0x0408: 'el', 0x0446: 'pa', 0x0449: 'ta',
                        0x047E: 'br', 0x046F: 'kl', 0x046B: 'qu-BO', 0x0444: 'tt',
                        0x0402: 'bg', 0x0447: 'gu', 0x086B: 'qu-EC', 0x044A: 'te',
                        0x0403: 'ca', 0x0468: 'ha', 0x0C6B: 'qu', 0x041E: 'th',
                        0x0C04: 'zh-HK', 0x040D: 'he', 0x0418: 'ro', 0x0451: 'bo',
                        0x1404: 'zh-MO', 0x0439: 'hi', 0x0417: 'rm', 0x041F: 'tr',
                        0x0804: 'zh', 0x040E: 'hu', 0x0419: 'ru', 0x0442: 'tk',
                        0x1004: 'zh-SG', 0x040F: 'is', 0x243B: 'smn', 0x0480: 'ug',
                        0x0404: 'zh-TW', 0x0470: 'ig', 0x103B: 'smj-NO', 0x0422: 'uk',
                        0x0483: 'co', 0x0421: 'id', 0x143B: 'smj', 0x042E: 'hsb',
                        0x041A: 'hr', 0x045D: 'iu', 0x0C3B: 'se-FI', 0x0420: 'ur',
                        0x101A: 'hr-BA', 0x085D: 'iu-Latn', 0x043B: 'se', 0x0843: 'uz-Cyrl',
                        0x0405: 'cs', 0x083C: 'ga', 0x083B: 'se-SE', 0x0443: 'uz',
                        0x0406: 'da', 0x0434: 'xh', 0x203B: 'sms', 0x042A: 'vi',
                        0x048C: 'prs', 0x0435: 'zu', 0x183B: 'sma-NO', 0x0452: 'cy',
                        0x0465: 'dv', 0x0410: 'it', 0x1C3B: 'sms', 0x0488: 'wo',
                        0x0813: 'nl-BE', 0x0810: 'it-CH', 0x044F: 'sa', 0x0485: 'sah',
                        0x0413: 'nl', 0x0411: 'ja', 0x1C1A: 'sr-Cyrl-BA', 0x0478: 'ii',
                        0x0C09: 'en-AU', 0x044B: 'kn', 0x0C1A: 'sr', 0x046A: 'yo',
                        0x2809: 'en-BZ', 0x043F: 'kk', 0x181A: 'sr-Latn-BA',
                        0x1009: 'en-CA', 0x0453: 'km', 0x081A: 'sr-Latn',
                        0x2409: 'en-029', 0x0486: 'quc', 0x046C: 'nso'
                    }];

                var NameRecord = new r.Struct({
                    platformID: r.uint16,
                    encodingID: r.uint16,
                    languageID: r.uint16,
                    nameID: r.uint16,
                    length: r.uint16,
                    string: new r.Pointer(r.uint16, new r.String('length', function (t) {
                        return getEncoding(t.platformID, t.encodingID, t.languageID);
                    }), { type: 'parent', relativeTo: 'parent.stringOffset', allowNull: false })
                });

                var LangTagRecord = new r.Struct({
                    length: r.uint16,
                    tag: new r.Pointer(r.uint16, new r.String('length', 'utf16be'), { type: 'parent', relativeTo: 'stringOffset' })
                });

                var NameTable = new r.VersionedStruct(r.uint16, {
                    0: {
                        count: r.uint16,
                        stringOffset: r.uint16,
                        records: new r.Array(NameRecord, 'count')
                    },
                    1: {
                        count: r.uint16,
                        stringOffset: r.uint16,
                        records: new r.Array(NameRecord, 'count'),
                        langTagCount: r.uint16,
                        langTags: new r.Array(LangTagRecord, 'langTagCount')
                    }
                });

                var NAMES = ['copyright', 'fontFamily', 'fontSubfamily', 'uniqueSubfamily', 'fullName', 'version', 'postscriptName', // Note: A font may have only one PostScript name and that name must be ASCII.
                    'trademark', 'manufacturer', 'designer', 'description', 'vendorURL', 'designerURL', 'license', 'licenseURL', null, // reserved
                    'preferredFamily', 'preferredSubfamily', 'compatibleFull', 'sampleText', 'postscriptCIDFontName', 'wwsFamilyName', 'wwsSubfamilyName'];

                NameTable.process = function (stream) {
                    var records = {};
                    for (var _iterator = this.records, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
                        var _ref;

                        if (_isArray) {
                            if (_i >= _iterator.length) break;
                            _ref = _iterator[_i++];
                        } else {
                            _i = _iterator.next();
                            if (_i.done) break;
                            _ref = _i.value;
                        }

                        var record = _ref;

                        // find out what language this is for
                        var language = LANGUAGES[record.platformID][record.languageID];

                        if (language == null && this.langTags != null && record.languageID >= 0x8000) {
                            language = this.langTags[record.languageID - 0x8000].tag;
                        }

                        if (language == null) {
                            language = record.platformID + '-' + record.languageID;
                        }

                        // if the nameID is >= 256, it is a font feature record (AAT)
                        var key = record.nameID >= 256 ? 'fontFeatures' : NAMES[record.nameID] || record.nameID;
                        if (records[key] == null) {
                            records[key] = {};
                        }

                        var obj = records[key];
                        if (record.nameID >= 256) {
                            obj = obj[record.nameID] || (obj[record.nameID] = {});
                        }

                        if (typeof record.string === 'string' || typeof obj[language] !== 'string') {
                            obj[language] = record.string;
                        }
                    }

                    this.records = records;
                };

                NameTable.preEncode = function () {
                    if (Array.isArray(this.records)) return;
                    this.version = 0;

                    var records = [];
                    for (var key in this.records) {
                        var val = this.records[key];
                        if (key === 'fontFeatures') continue;

                        records.push({
                            platformID: 3,
                            encodingID: 1,
                            languageID: 0x409,
                            nameID: NAMES.indexOf(key),
                            length: Buffer.byteLength(val.en, 'utf16le'),
                            string: val.en
                        });

                        if (key === 'postscriptName') {
                            records.push({
                                platformID: 1,
                                encodingID: 0,
                                languageID: 0,
                                nameID: NAMES.indexOf(key),
                                length: val.en.length,
                                string: val.en
                            });
                        }
                    }

                    this.records = records;
                    this.count = records.length;
                    this.stringOffset = NameTable.size(this, null, false);
                };

                var OS2 = new r.VersionedStruct(r.uint16, {
                    header: {
                        xAvgCharWidth: r.int16, // average weighted advance width of lower case letters and space
                        usWeightClass: r.uint16, // visual weight of stroke in glyphs
                        usWidthClass: r.uint16, // relative change from the normal aspect ratio (width to height ratio)
                        fsType: new r.Bitfield(r.uint16, [// Indicates font embedding licensing rights
                            null, 'noEmbedding', 'viewOnly', 'editable', null, null, null, null, 'noSubsetting', 'bitmapOnly']),
                        ySubscriptXSize: r.int16, // recommended horizontal size in pixels for subscripts
                        ySubscriptYSize: r.int16, // recommended vertical size in pixels for subscripts
                        ySubscriptXOffset: r.int16, // recommended horizontal offset for subscripts
                        ySubscriptYOffset: r.int16, // recommended vertical offset form the baseline for subscripts
                        ySuperscriptXSize: r.int16, // recommended horizontal size in pixels for superscripts
                        ySuperscriptYSize: r.int16, // recommended vertical size in pixels for superscripts
                        ySuperscriptXOffset: r.int16, // recommended horizontal offset for superscripts
                        ySuperscriptYOffset: r.int16, // recommended vertical offset from the baseline for superscripts
                        yStrikeoutSize: r.int16, // width of the strikeout stroke
                        yStrikeoutPosition: r.int16, // position of the strikeout stroke relative to the baseline
                        sFamilyClass: r.int16, // classification of font-family design
                        panose: new r.Array(r.uint8, 10), // describe the visual characteristics of a given typeface
                        ulCharRange: new r.Array(r.uint32, 4),
                        vendorID: new r.String(4), // four character identifier for the font vendor
                        fsSelection: new r.Bitfield(r.uint16, [// bit field containing information about the font
                            'italic', 'underscore', 'negative', 'outlined', 'strikeout', 'bold', 'regular', 'useTypoMetrics', 'wws', 'oblique']),
                        usFirstCharIndex: r.uint16, // The minimum Unicode index in this font
                        usLastCharIndex: r.uint16 // The maximum Unicode index in this font
                    },

                    // The Apple version of this table ends here, but the Microsoft one continues on...
                    0: {},

                    1: {
                        typoAscender: r.int16,
                        typoDescender: r.int16,
                        typoLineGap: r.int16,
                        winAscent: r.uint16,
                        winDescent: r.uint16,
                        codePageRange: new r.Array(r.uint32, 2)
                    },

                    2: {
                        // these should be common with version 1 somehow
                        typoAscender: r.int16,
                        typoDescender: r.int16,
                        typoLineGap: r.int16,
                        winAscent: r.uint16,
                        winDescent: r.uint16,
                        codePageRange: new r.Array(r.uint32, 2),

                        xHeight: r.int16,
                        capHeight: r.int16,
                        defaultChar: r.uint16,
                        breakChar: r.uint16,
                        maxContent: r.uint16
                    },

                    5: {
                        typoAscender: r.int16,
                        typoDescender: r.int16,
                        typoLineGap: r.int16,
                        winAscent: r.uint16,
                        winDescent: r.uint16,
                        codePageRange: new r.Array(r.uint32, 2),

                        xHeight: r.int16,
                        capHeight: r.int16,
                        defaultChar: r.uint16,
                        breakChar: r.uint16,
                        maxContent: r.uint16,

                        usLowerOpticalPointSize: r.uint16,
                        usUpperOpticalPointSize: r.uint16
                    }
                });

                var versions = OS2.versions;
                versions[3] = versions[4] = versions[2];

                // PostScript information
                var post = new r.VersionedStruct(r.fixed32, {
                    header: { // these fields exist at the top of all versions
                        italicAngle: r.fixed32, // Italic angle in counter-clockwise degrees from the vertical.
                        underlinePosition: r.int16, // Suggested distance of the top of the underline from the baseline
                        underlineThickness: r.int16, // Suggested values for the underline thickness
                        isFixedPitch: r.uint32, // Whether the font is monospaced
                        minMemType42: r.uint32, // Minimum memory usage when a TrueType font is downloaded as a Type 42 font
                        maxMemType42: r.uint32, // Maximum memory usage when a TrueType font is downloaded as a Type 42 font
                        minMemType1: r.uint32, // Minimum memory usage when a TrueType font is downloaded as a Type 1 font
                        maxMemType1: r.uint32 // Maximum memory usage when a TrueType font is downloaded as a Type 1 font
                    },

                    1: {}, // version 1 has no additional fields

                    2: {
                        numberOfGlyphs: r.uint16,
                        glyphNameIndex: new r.Array(r.uint16, 'numberOfGlyphs'),
                        names: new r.Array(new r.String(r.uint8))
                    },

                    2.5: {
                        numberOfGlyphs: r.uint16,
                        offsets: new r.Array(r.uint8, 'numberOfGlyphs')
                    },

                    3: {}, // version 3 has no additional fields

                    4: {
                        map: new r.Array(r.uint32, function (t) {
                            return t.parent.maxp.numGlyphs;
                        })
                    }
                });

                // An array of predefined values accessible by instructions
                var cvt = new r.Struct({
                    controlValues: new r.Array(r.int16)
                });

                // A list of instructions that are executed once when a font is first used.
                // These instructions are known as the font program. The main use of this table
                // is for the definition of functions that are used in many different glyph programs.
                var fpgm = new r.Struct({
                    instructions: new r.Array(r.uint8)
                });

                var loca = new r.VersionedStruct('head.indexToLocFormat', {
                    0: {
                        offsets: new r.Array(r.uint16)
                    },
                    1: {
                        offsets: new r.Array(r.uint32)
                    }
                });

                loca.process = function () {
                    if (this.version === 0) {
                        for (var i = 0; i < this.offsets.length; i++) {
                            this.offsets[i] <<= 1;
                        }
                    }
                };

                loca.preEncode = function () {
                    if (this.version != null) return;

                    // assume this.offsets is a sorted array
                    this.version = this.offsets[this.offsets.length - 1] > 0xffff ? 1 : 0;

                    if (this.version === 0) {
                        for (var i = 0; i < this.offsets.length; i++) {
                            this.offsets[i] >>>= 1;
                        }
                    }
                };

                // Set of instructions executed whenever the point size or font transformation change
                var prep = new r.Struct({
                    controlValueProgram: new r.Array(r.uint8)
                });

                // only used for encoding
                var glyf = new r.Array(new r.Buffer());

                var CFFIndex = function () {
                    function CFFIndex(type) {
                        _classCallCheck(this, CFFIndex);

                        this.type = type;
                    }

                    CFFIndex.prototype.getCFFVersion = function getCFFVersion(ctx) {
                        while (ctx && !ctx.hdrSize) {
                            ctx = ctx.parent;
                        }

                        return ctx ? ctx.version : -1;
                    };

                    CFFIndex.prototype.decode = function decode(stream, parent) {
                        var version = this.getCFFVersion(parent);
                        var count = version >= 2 ? stream.readUInt32BE() : stream.readUInt16BE();

                        if (count === 0) {
                            return [];
                        }

                        var offSize = stream.readUInt8();
                        var offsetType = void 0;
                        if (offSize === 1) {
                            offsetType = r.uint8;
                        } else if (offSize === 2) {
                            offsetType = r.uint16;
                        } else if (offSize === 3) {
                            offsetType = r.uint24;
                        } else if (offSize === 4) {
                            offsetType = r.uint32;
                        } else {
                            throw new Error("Bad offset size in CFFIndex: " + offSize + " " + stream.pos);
                        }

                        var ret = [];
                        var startPos = stream.pos + (count + 1) * offSize - 1;

                        var start = offsetType.decode(stream);
                        for (var i = 0; i < count; i++) {
                            var end = offsetType.decode(stream);

                            if (this.type != null) {
                                var pos = stream.pos;
                                stream.pos = startPos + start;

                                parent.length = end - start;
                                ret.push(this.type.decode(stream, parent));
                                stream.pos = pos;
                            } else {
                                ret.push({
                                    offset: startPos + start,
                                    length: end - start
                                });
                            }

                            start = end;
                        }

                        stream.pos = startPos + start;
                        return ret;
                    };

                    CFFIndex.prototype.size = function size(arr, parent) {
                        var size = 2;
                        if (arr.length === 0) {
                            return size;
                        }

                        var type = this.type || new r.Buffer();

                        // find maximum offset to detminine offset type
                        var offset = 1;
                        for (var i = 0; i < arr.length; i++) {
                            var item = arr[i];
                            offset += type.size(item, parent);
                        }

                        var offsetType = void 0;
                        if (offset <= 0xff) {
                            offsetType = r.uint8;
                        } else if (offset <= 0xffff) {
                            offsetType = r.uint16;
                        } else if (offset <= 0xffffff) {
                            offsetType = r.uint24;
                        } else if (offset <= 0xffffffff) {
                            offsetType = r.uint32;
                        } else {
                            throw new Error("Bad offset in CFFIndex");
                        }

                        size += 1 + offsetType.size() * (arr.length + 1);
                        size += offset - 1;

                        return size;
                    };

                    CFFIndex.prototype.encode = function encode(stream, arr, parent) {
                        stream.writeUInt16BE(arr.length);
                        if (arr.length === 0) {
                            return;
                        }

                        var type = this.type || new r.Buffer();

                        // find maximum offset to detminine offset type
                        var sizes = [];
                        var offset = 1;
                        for (var _iterator = arr, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
                            var _ref;

                            if (_isArray) {
                                if (_i >= _iterator.length) break;
                                _ref = _iterator[_i++];
                            } else {
                                _i = _iterator.next();
                                if (_i.done) break;
                                _ref = _i.value;
                            }

                            var item = _ref;

                            var s = type.size(item, parent);
                            sizes.push(s);
                            offset += s;
                        }

                        var offsetType = void 0;
                        if (offset <= 0xff) {
                            offsetType = r.uint8;
                        } else if (offset <= 0xffff) {
                            offsetType = r.uint16;
                        } else if (offset <= 0xffffff) {
                            offsetType = r.uint24;
                        } else if (offset <= 0xffffffff) {
                            offsetType = r.uint32;
                        } else {
                            throw new Error("Bad offset in CFFIndex");
                        }

                        // write offset size
                        stream.writeUInt8(offsetType.size());

                        // write elements
                        offset = 1;
                        offsetType.encode(stream, offset);

                        for (var _iterator2 = sizes, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
                            var _ref2;

                            if (_isArray2) {
                                if (_i2 >= _iterator2.length) break;
                                _ref2 = _iterator2[_i2++];
                            } else {
                                _i2 = _iterator2.next();
                                if (_i2.done) break;
                                _ref2 = _i2.value;
                            }

                            var size = _ref2;

                            offset += size;
                            offsetType.encode(stream, offset);
                        }

                        for (var _iterator3 = arr, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
                            var _ref3;

                            if (_isArray3) {
                                if (_i3 >= _iterator3.length) break;
                                _ref3 = _iterator3[_i3++];
                            } else {
                                _i3 = _iterator3.next();
                                if (_i3.done) break;
                                _ref3 = _i3.value;
                            }

                            var _item = _ref3;

                            type.encode(stream, _item, parent);
                        }

                        return;
                    };

                    return CFFIndex;
                }();

                var FLOAT_EOF = 0xf;
                var FLOAT_LOOKUP = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', 'E', 'E-', null, '-'];

                var FLOAT_ENCODE_LOOKUP = {
                    '.': 10,
                    'E': 11,
                    'E-': 12,
                    '-': 14
                };

                var CFFOperand = function () {
                    function CFFOperand() {
                        _classCallCheck(this, CFFOperand);
                    }

                    CFFOperand.decode = function decode(stream, value) {
                        if (32 <= value && value <= 246) {
                            return value - 139;
                        }

                        if (247 <= value && value <= 250) {
                            return (value - 247) * 256 + stream.readUInt8() + 108;
                        }

                        if (251 <= value && value <= 254) {
                            return -(value - 251) * 256 - stream.readUInt8() - 108;
                        }

                        if (value === 28) {
                            return stream.readInt16BE();
                        }

                        if (value === 29) {
                            return stream.readInt32BE();
                        }

                        if (value === 30) {
                            var str = '';
                            while (true) {
                                var b = stream.readUInt8();

                                var n1 = b >> 4;
                                if (n1 === FLOAT_EOF) {
                                    break;
                                }
                                str += FLOAT_LOOKUP[n1];

                                var n2 = b & 15;
                                if (n2 === FLOAT_EOF) {
                                    break;
                                }
                                str += FLOAT_LOOKUP[n2];
                            }

                            return parseFloat(str);
                        }

                        return null;
                    };

                    CFFOperand.size = function size(value) {
                        // if the value needs to be forced to the largest size (32 bit)
                        // e.g. for unknown pointers, set to 32768
                        if (value.forceLarge) {
                            value = 32768;
                        }

                        if ((value | 0) !== value) {
                            // floating point
                            var str = '' + value;
                            return 1 + Math.ceil((str.length + 1) / 2);
                        } else if (-107 <= value && value <= 107) {
                            return 1;
                        } else if (108 <= value && value <= 1131 || -1131 <= value && value <= -108) {
                            return 2;
                        } else if (-32768 <= value && value <= 32767) {
                            return 3;
                        } else {
                            return 5;
                        }
                    };

                    CFFOperand.encode = function encode(stream, value) {
                        // if the value needs to be forced to the largest size (32 bit)
                        // e.g. for unknown pointers, save the old value and set to 32768
                        var val = Number(value);

                        if (value.forceLarge) {
                            stream.writeUInt8(29);
                            return stream.writeInt32BE(val);
                        } else if ((val | 0) !== val) {
                            // floating point
                            stream.writeUInt8(30);

                            var str = '' + val;
                            for (var i = 0; i < str.length; i += 2) {
                                var c1 = str[i];
                                var n1 = FLOAT_ENCODE_LOOKUP[c1] || +c1;

                                if (i === str.length - 1) {
                                    var n2 = FLOAT_EOF;
                                } else {
                                    var c2 = str[i + 1];
                                    var n2 = FLOAT_ENCODE_LOOKUP[c2] || +c2;
                                }

                                stream.writeUInt8(n1 << 4 | n2 & 15);
                            }

                            if (n2 !== FLOAT_EOF) {
                                return stream.writeUInt8(FLOAT_EOF << 4);
                            }
                        } else if (-107 <= val && val <= 107) {
                            return stream.writeUInt8(val + 139);
                        } else if (108 <= val && val <= 1131) {
                            val -= 108;
                            stream.writeUInt8((val >> 8) + 247);
                            return stream.writeUInt8(val & 0xff);
                        } else if (-1131 <= val && val <= -108) {
                            val = -val - 108;
                            stream.writeUInt8((val >> 8) + 251);
                            return stream.writeUInt8(val & 0xff);
                        } else if (-32768 <= val && val <= 32767) {
                            stream.writeUInt8(28);
                            return stream.writeInt16BE(val);
                        } else {
                            stream.writeUInt8(29);
                            return stream.writeInt32BE(val);
                        }
                    };

                    return CFFOperand;
                }();

                var CFFDict = function () {
                    function CFFDict() {
                        var ops = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

                        _classCallCheck(this, CFFDict);

                        this.ops = ops;
                        this.fields = {};
                        for (var _iterator = ops, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
                            var _ref;

                            if (_isArray) {
                                if (_i >= _iterator.length) break;
                                _ref = _iterator[_i++];
                            } else {
                                _i = _iterator.next();
                                if (_i.done) break;
                                _ref = _i.value;
                            }

                            var field = _ref;

                            var key = Array.isArray(field[0]) ? field[0][0] << 8 | field[0][1] : field[0];
                            this.fields[key] = field;
                        }
                    }

                    CFFDict.prototype.decodeOperands = function decodeOperands(type, stream, ret, operands) {
                        var _this = this;

                        if (Array.isArray(type)) {
                            return operands.map(function (op, i) {
                                return _this.decodeOperands(type[i], stream, ret, [op]);
                            });
                        } else if (type.decode != null) {
                            return type.decode(stream, ret, operands);
                        } else {
                            switch (type) {
                                case 'number':
                                case 'offset':
                                case 'sid':
                                    return operands[0];
                                case 'boolean':
                                    return !!operands[0];
                                default:
                                    return operands;
                            }
                        }
                    };

                    CFFDict.prototype.encodeOperands = function encodeOperands(type, stream, ctx, operands) {
                        var _this2 = this;

                        if (Array.isArray(type)) {
                            return operands.map(function (op, i) {
                                return _this2.encodeOperands(type[i], stream, ctx, op)[0];
                            });
                        } else if (type.encode != null) {
                            return type.encode(stream, operands, ctx);
                        } else if (typeof operands === 'number') {
                            return [operands];
                        } else if (typeof operands === 'boolean') {
                            return [+operands];
                        } else if (Array.isArray(operands)) {
                            return operands;
                        } else {
                            return [operands];
                        }
                    };

                    CFFDict.prototype.decode = function decode(stream, parent) {
                        var end = stream.pos + parent.length;
                        var ret = {};
                        var operands = [];

                        // define hidden properties
                        _Object$defineProperties(ret, {
                            parent: { value: parent },
                            _startOffset: { value: stream.pos }
                        });

                        // fill in defaults
                        for (var key in this.fields) {
                            var field = this.fields[key];
                            ret[field[1]] = field[3];
                        }

                        while (stream.pos < end) {
                            var b = stream.readUInt8();
                            if (b < 28) {
                                if (b === 12) {
                                    b = b << 8 | stream.readUInt8();
                                }

                                var _field = this.fields[b];
                                if (!_field) {
                                    throw new Error('Unknown operator ' + b);
                                }

                                var val = this.decodeOperands(_field[2], stream, ret, operands);
                                if (val != null) {
                                    if (val instanceof restructure_src_utils.PropertyDescriptor) {
                                        _Object$defineProperty(ret, _field[1], val);
                                    } else {
                                        ret[_field[1]] = val;
                                    }
                                }

                                operands = [];
                            } else {
                                operands.push(CFFOperand.decode(stream, b));
                            }
                        }

                        return ret;
                    };

                    CFFDict.prototype.size = function size(dict, parent) {
                        var includePointers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

                        var ctx = {
                            parent: parent,
                            val: dict,
                            pointerSize: 0,
                            startOffset: parent.startOffset || 0
                        };

                        var len = 0;

                        for (var k in this.fields) {
                            var field = this.fields[k];
                            var val = dict[field[1]];
                            if (val == null || isEqual(val, field[3])) {
                                continue;
                            }

                            var operands = this.encodeOperands(field[2], null, ctx, val);
                            for (var _iterator2 = operands, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
                                var _ref2;

                                if (_isArray2) {
                                    if (_i2 >= _iterator2.length) break;
                                    _ref2 = _iterator2[_i2++];
                                } else {
                                    _i2 = _iterator2.next();
                                    if (_i2.done) break;
                                    _ref2 = _i2.value;
                                }

                                var op = _ref2;

                                len += CFFOperand.size(op);
                            }

                            var key = Array.isArray(field[0]) ? field[0] : [field[0]];
                            len += key.length;
                        }

                        if (includePointers) {
                            len += ctx.pointerSize;
                        }

                        return len;
                    };

                    CFFDict.prototype.encode = function encode(stream, dict, parent) {
                        var ctx = {
                            pointers: [],
                            startOffset: stream.pos,
                            parent: parent,
                            val: dict,
                            pointerSize: 0
                        };

                        ctx.pointerOffset = stream.pos + this.size(dict, ctx, false);

                        for (var _iterator3 = this.ops, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
                            var _ref3;

                            if (_isArray3) {
                                if (_i3 >= _iterator3.length) break;
                                _ref3 = _iterator3[_i3++];
                            } else {
                                _i3 = _iterator3.next();
                                if (_i3.done) break;
                                _ref3 = _i3.value;
                            }

                            var field = _ref3;

                            var val = dict[field[1]];
                            if (val == null || isEqual(val, field[3])) {
                                continue;
                            }

                            var operands = this.encodeOperands(field[2], stream, ctx, val);
                            for (var _iterator4 = operands, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
                                var _ref4;

                                if (_isArray4) {
                                    if (_i4 >= _iterator4.length) break;
                                    _ref4 = _iterator4[_i4++];
                                } else {
                                    _i4 = _iterator4.next();
                                    if (_i4.done) break;
                                    _ref4 = _i4.value;
                                }

                                var op = _ref4;

                                CFFOperand.encode(stream, op);
                            }

                            var key = Array.isArray(field[0]) ? field[0] : [field[0]];
                            for (var _iterator5 = key, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _getIterator(_iterator5);;) {
                                var _ref5;

                                if (_isArray5) {
                                    if (_i5 >= _iterator5.length) break;
                                    _ref5 = _iterator5[_i5++];
                                } else {
                                    _i5 = _iterator5.next();
                                    if (_i5.done) break;
                                    _ref5 = _i5.value;
                                }

                                var _op = _ref5;

                                stream.writeUInt8(_op);
                            }
                        }

                        var i = 0;
                        while (i < ctx.pointers.length) {
                            var ptr = ctx.pointers[i++];
                            ptr.type.encode(stream, ptr.val, ptr.parent);
                        }

                        return;
                    };

                    return CFFDict;
                }();

                var CFFPointer = function (_r$Pointer) {
                    _inherits(CFFPointer, _r$Pointer);

                    function CFFPointer(type) {
                        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                        _classCallCheck(this, CFFPointer);

                        if (options.type == null) {
                            options.type = 'global';
                        }

                        return _possibleConstructorReturn(this, _r$Pointer.call(this, null, type, options));
                    }

                    CFFPointer.prototype.decode = function decode(stream, parent, operands) {
                        this.offsetType = {
                            decode: function decode() {
                                return operands[0];
                            }
                        };

                        return _r$Pointer.prototype.decode.call(this, stream, parent, operands);
                    };

                    CFFPointer.prototype.encode = function encode(stream, value, ctx) {
                        if (!stream) {
                            // compute the size (so ctx.pointerSize is correct)
                            this.offsetType = {
                                size: function size() {
                                    return 0;
                                }
                            };

                            this.size(value, ctx);
                            return [new Ptr(0)];
                        }

                        var ptr = null;
                        this.offsetType = {
                            encode: function encode(stream, val) {
                                return ptr = val;
                            }
                        };

                        _r$Pointer.prototype.encode.call(this, stream, value, ctx);
                        return [new Ptr(ptr)];
                    };

                    return CFFPointer;
                }(r.Pointer);

                var Ptr = function () {
                    function Ptr(val) {
                        _classCallCheck(this, Ptr);

                        this.val = val;
                        this.forceLarge = true;
                    }

                    Ptr.prototype.valueOf = function valueOf() {
                        return this.val;
                    };

                    return Ptr;
                }();

                var CFFBlendOp = function () {
                    function CFFBlendOp() {
                        _classCallCheck(this, CFFBlendOp);
                    }

                    CFFBlendOp.decode = function decode(stream, parent, operands) {
                        var numBlends = operands.pop();

                        // TODO: actually blend. For now just consume the deltas
                        // since we don't use any of the values anyway.
                        while (operands.length > numBlends) {
                            operands.pop();
                        }
                    };

                    return CFFBlendOp;
                }();

                var CFFPrivateDict = new CFFDict([
                    // key       name                    type                                          default
                    [6, 'BlueValues', 'delta', null], [7, 'OtherBlues', 'delta', null], [8, 'FamilyBlues', 'delta', null], [9, 'FamilyOtherBlues', 'delta', null], [[12, 9], 'BlueScale', 'number', 0.039625], [[12, 10], 'BlueShift', 'number', 7], [[12, 11], 'BlueFuzz', 'number', 1], [10, 'StdHW', 'number', null], [11, 'StdVW', 'number', null], [[12, 12], 'StemSnapH', 'delta', null], [[12, 13], 'StemSnapV', 'delta', null], [[12, 14], 'ForceBold', 'boolean', false], [[12, 17], 'LanguageGroup', 'number', 0], [[12, 18], 'ExpansionFactor', 'number', 0.06], [[12, 19], 'initialRandomSeed', 'number', 0], [20, 'defaultWidthX', 'number', 0], [21, 'nominalWidthX', 'number', 0], [22, 'vsindex', 'number', 0], [23, 'blend', CFFBlendOp, null], [19, 'Subrs', new CFFPointer(new CFFIndex(), { type: 'local' }), null]]);

                // Automatically generated from Appendix A of the CFF specification; do
                // not edit. Length should be 391.
                var standardStrings = [".notdef", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quoteright", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "quoteleft", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "exclamdown", "cent", "sterling", "fraction", "yen", "florin", "section", "currency", "quotesingle", "quotedblleft", "guillemotleft", "guilsinglleft", "guilsinglright", "fi", "fl", "endash", "dagger", "daggerdbl", "periodcentered", "paragraph", "bullet", "quotesinglbase", "quotedblbase", "quotedblright", "guillemotright", "ellipsis", "perthousand", "questiondown", "grave", "acute", "circumflex", "tilde", "macron", "breve", "dotaccent", "dieresis", "ring", "cedilla", "hungarumlaut", "ogonek", "caron", "emdash", "AE", "ordfeminine", "Lslash", "Oslash", "OE", "ordmasculine", "ae", "dotlessi", "lslash", "oslash", "oe", "germandbls", "onesuperior", "logicalnot", "mu", "trademark", "Eth", "onehalf", "plusminus", "Thorn", "onequarter", "divide", "brokenbar", "degree", "thorn", "threequarters", "twosuperior", "registered", "minus", "eth", "multiply", "threesuperior", "copyright", "Aacute", "Acircumflex", "Adieresis", "Agrave", "Aring", "Atilde", "Ccedilla", "Eacute", "Ecircumflex", "Edieresis", "Egrave", "Iacute", "Icircumflex", "Idieresis", "Igrave", "Ntilde", "Oacute", "Ocircumflex", "Odieresis", "Ograve", "Otilde", "Scaron", "Uacute", "Ucircumflex", "Udieresis", "Ugrave", "Yacute", "Ydieresis", "Zcaron", "aacute", "acircumflex", "adieresis", "agrave", "aring", "atilde", "ccedilla", "eacute", "ecircumflex", "edieresis", "egrave", "iacute", "icircumflex", "idieresis", "igrave", "ntilde", "oacute", "ocircumflex", "odieresis", "ograve", "otilde", "scaron", "uacute", "ucircumflex", "udieresis", "ugrave", "yacute", "ydieresis", "zcaron", "exclamsmall", "Hungarumlautsmall", "dollaroldstyle", "dollarsuperior", "ampersandsmall", "Acutesmall", "parenleftsuperior", "parenrightsuperior", "twodotenleader", "onedotenleader", "zerooldstyle", "oneoldstyle", "twooldstyle", "threeoldstyle", "fouroldstyle", "fiveoldstyle", "sixoldstyle", "sevenoldstyle", "eightoldstyle", "nineoldstyle", "commasuperior", "threequartersemdash", "periodsuperior", "questionsmall", "asuperior", "bsuperior", "centsuperior", "dsuperior", "esuperior", "isuperior", "lsuperior", "msuperior", "nsuperior", "osuperior", "rsuperior", "ssuperior", "tsuperior", "ff", "ffi", "ffl", "parenleftinferior", "parenrightinferior", "Circumflexsmall", "hyphensuperior", "Gravesmall", "Asmall", "Bsmall", "Csmall", "Dsmall", "Esmall", "Fsmall", "Gsmall", "Hsmall", "Ismall", "Jsmall", "Ksmall", "Lsmall", "Msmall", "Nsmall", "Osmall", "Psmall", "Qsmall", "Rsmall", "Ssmall", "Tsmall", "Usmall", "Vsmall", "Wsmall", "Xsmall", "Ysmall", "Zsmall", "colonmonetary", "onefitted", "rupiah", "Tildesmall", "exclamdownsmall", "centoldstyle", "Lslashsmall", "Scaronsmall", "Zcaronsmall", "Dieresissmall", "Brevesmall", "Caronsmall", "Dotaccentsmall", "Macronsmall", "figuredash", "hypheninferior", "Ogoneksmall", "Ringsmall", "Cedillasmall", "questiondownsmall", "oneeighth", "threeeighths", "fiveeighths", "seveneighths", "onethird", "twothirds", "zerosuperior", "foursuperior", "fivesuperior", "sixsuperior", "sevensuperior", "eightsuperior", "ninesuperior", "zeroinferior", "oneinferior", "twoinferior", "threeinferior", "fourinferior", "fiveinferior", "sixinferior", "seveninferior", "eightinferior", "nineinferior", "centinferior", "dollarinferior", "periodinferior", "commainferior", "Agravesmall", "Aacutesmall", "Acircumflexsmall", "Atildesmall", "Adieresissmall", "Aringsmall", "AEsmall", "Ccedillasmall", "Egravesmall", "Eacutesmall", "Ecircumflexsmall", "Edieresissmall", "Igravesmall", "Iacutesmall", "Icircumflexsmall", "Idieresissmall", "Ethsmall", "Ntildesmall", "Ogravesmall", "Oacutesmall", "Ocircumflexsmall", "Otildesmall", "Odieresissmall", "OEsmall", "Oslashsmall", "Ugravesmall", "Uacutesmall", "Ucircumflexsmall", "Udieresissmall", "Yacutesmall", "Thornsmall", "Ydieresissmall", "001.000", "001.001", "001.002", "001.003", "Black", "Bold", "Book", "Light", "Medium", "Regular", "Roman", "Semibold"];

                var StandardEncoding = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', '', 'endash', 'dagger', 'daggerdbl', 'periodcentered', '', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand', '', 'questiondown', '', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', '', 'ring', 'cedilla', '', 'hungarumlaut', 'ogonek', 'caron', 'emdash', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'AE', '', 'ordfeminine', '', '', '', '', 'Lslash', 'Oslash', 'OE', 'ordmasculine', '', '', '', '', '', 'ae', '', '', '', 'dotlessi', '', '', 'lslash', 'oslash', 'oe', 'germandbls'];

                var ExpertEncoding = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'space', 'exclamsmall', 'Hungarumlautsmall', '', 'dollaroldstyle', 'dollarsuperior', 'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader', 'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon', 'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', '', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', '', '', 'isuperior', '', '', 'lsuperior', 'msuperior', 'nsuperior', 'osuperior', '', '', 'rsuperior', 'ssuperior', 'tsuperior', '', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior', '', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall', 'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall', 'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall', 'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'exclamdownsmall', 'centoldstyle', 'Lslashsmall', '', '', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall', '', 'Dotaccentsmall', '', '', 'Macronsmall', '', '', 'figuredash', 'hypheninferior', '', '', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', '', '', '', 'onequarter', 'onehalf', 'threequarters', 'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', '', '', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'];

                var ISOAdobeCharset = ['.notdef', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'endash', 'dagger', 'daggerdbl', 'periodcentered', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand', 'questiondown', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', 'ring', 'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'emdash', 'AE', 'ordfeminine', 'Lslash', 'Oslash', 'OE', 'ordmasculine', 'ae', 'dotlessi', 'lslash', 'oslash', 'oe', 'germandbls', 'onesuperior', 'logicalnot', 'mu', 'trademark', 'Eth', 'onehalf', 'plusminus', 'Thorn', 'onequarter', 'divide', 'brokenbar', 'degree', 'thorn', 'threequarters', 'twosuperior', 'registered', 'minus', 'eth', 'multiply', 'threesuperior', 'copyright', 'Aacute', 'Acircumflex', 'Adieresis', 'Agrave', 'Aring', 'Atilde', 'Ccedilla', 'Eacute', 'Ecircumflex', 'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Ntilde', 'Oacute', 'Ocircumflex', 'Odieresis', 'Ograve', 'Otilde', 'Scaron', 'Uacute', 'Ucircumflex', 'Udieresis', 'Ugrave', 'Yacute', 'Ydieresis', 'Zcaron', 'aacute', 'acircumflex', 'adieresis', 'agrave', 'aring', 'atilde', 'ccedilla', 'eacute', 'ecircumflex', 'edieresis', 'egrave', 'iacute', 'icircumflex', 'idieresis', 'igrave', 'ntilde', 'oacute', 'ocircumflex', 'odieresis', 'ograve', 'otilde', 'scaron', 'uacute', 'ucircumflex', 'udieresis', 'ugrave', 'yacute', 'ydieresis', 'zcaron'];

                var ExpertCharset = ['.notdef', 'space', 'exclamsmall', 'Hungarumlautsmall', 'dollaroldstyle', 'dollarsuperior', 'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader', 'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon', 'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior', 'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall', 'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall', 'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall', 'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', 'exclamdownsmall', 'centoldstyle', 'Lslashsmall', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall', 'Dotaccentsmall', 'Macronsmall', 'figuredash', 'hypheninferior', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', 'onequarter', 'onehalf', 'threequarters', 'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'];

                var ExpertSubsetCharset = ['.notdef', 'space', 'dollaroldstyle', 'dollarsuperior', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader', 'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon', 'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior', 'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior', 'parenrightinferior', 'hyphensuperior', 'colonmonetary', 'onefitted', 'rupiah', 'centoldstyle', 'figuredash', 'hypheninferior', 'onequarter', 'onehalf', 'threequarters', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior'];

                //########################
                // Scripts and Languages #
                //########################

                var LangSysTable = new r.Struct({
                    reserved: new r.Reserved(r.uint16),
                    reqFeatureIndex: r.uint16,
                    featureCount: r.uint16,
                    featureIndexes: new r.Array(r.uint16, 'featureCount')
                });

                var LangSysRecord = new r.Struct({
                    tag: new r.String(4),
                    langSys: new r.Pointer(r.uint16, LangSysTable, { type: 'parent' })
                });

                var Script = new r.Struct({
                    defaultLangSys: new r.Pointer(r.uint16, LangSysTable),
                    count: r.uint16,
                    langSysRecords: new r.Array(LangSysRecord, 'count')
                });

                var ScriptRecord = new r.Struct({
                    tag: new r.String(4),
                    script: new r.Pointer(r.uint16, Script, { type: 'parent' })
                });

                var ScriptList = new r.Array(ScriptRecord, r.uint16);

                //#######################
                // Features and Lookups #
                //#######################

                var Feature = new r.Struct({
                    featureParams: r.uint16, // pointer
                    lookupCount: r.uint16,
                    lookupListIndexes: new r.Array(r.uint16, 'lookupCount')
                });

                var FeatureRecord = new r.Struct({
                    tag: new r.String(4),
                    feature: new r.Pointer(r.uint16, Feature, { type: 'parent' })
                });

                var FeatureList = new r.Array(FeatureRecord, r.uint16);

                var LookupFlags = new r.Struct({
                    markAttachmentType: r.uint8,
                    flags: new r.Bitfield(r.uint8, ['rightToLeft', 'ignoreBaseGlyphs', 'ignoreLigatures', 'ignoreMarks', 'useMarkFilteringSet'])
                });

                function LookupList(SubTable) {
                    var Lookup = new r.Struct({
                        lookupType: r.uint16,
                        flags: LookupFlags,
                        subTableCount: r.uint16,
                        subTables: new r.Array(new r.Pointer(r.uint16, SubTable), 'subTableCount'),
                        markFilteringSet: new r.Optional(r.uint16, function (t) {
                            return t.flags.flags.useMarkFilteringSet;
                        })
                    });

                    return new r.LazyArray(new r.Pointer(r.uint16, Lookup), r.uint16);
                }

                //#################
                // Coverage Table #
                //#################

                var RangeRecord = new r.Struct({
                    start: r.uint16,
                    end: r.uint16,
                    startCoverageIndex: r.uint16
                });

                var Coverage = new r.VersionedStruct(r.uint16, {
                    1: {
                        glyphCount: r.uint16,
                        glyphs: new r.Array(r.uint16, 'glyphCount')
                    },
                    2: {
                        rangeCount: r.uint16,
                        rangeRecords: new r.Array(RangeRecord, 'rangeCount')
                    }
                });

                //#########################
                // Class Definition Table #
                //#########################

                var ClassRangeRecord = new r.Struct({
                    start: r.uint16,
                    end: r.uint16,
                    class: r.uint16
                });

                var ClassDef = new r.VersionedStruct(r.uint16, {
                    1: { // Class array
                        startGlyph: r.uint16,
                        glyphCount: r.uint16,
                        classValueArray: new r.Array(r.uint16, 'glyphCount')
                    },
                    2: { // Class ranges
                        classRangeCount: r.uint16,
                        classRangeRecord: new r.Array(ClassRangeRecord, 'classRangeCount')
                    }
                });

                //###############
                // Device Table #
                //###############

                var Device = new r.Struct({
                    a: r.uint16, // startSize for hinting Device, outerIndex for VariationIndex
                    b: r.uint16, // endSize for Device, innerIndex for VariationIndex
                    deltaFormat: r.uint16
                });

                //#############################################
                // Contextual Substitution/Positioning Tables #
                //#############################################

                var LookupRecord = new r.Struct({
                    sequenceIndex: r.uint16,
                    lookupListIndex: r.uint16
                });

                var Rule = new r.Struct({
                    glyphCount: r.uint16,
                    lookupCount: r.uint16,
                    input: new r.Array(r.uint16, function (t) {
                        return t.glyphCount - 1;
                    }),
                    lookupRecords: new r.Array(LookupRecord, 'lookupCount')
                });

                var RuleSet = new r.Array(new r.Pointer(r.uint16, Rule), r.uint16);

                var ClassRule = new r.Struct({
                    glyphCount: r.uint16,
                    lookupCount: r.uint16,
                    classes: new r.Array(r.uint16, function (t) {
                        return t.glyphCount - 1;
                    }),
                    lookupRecords: new r.Array(LookupRecord, 'lookupCount')
                });

                var ClassSet = new r.Array(new r.Pointer(r.uint16, ClassRule), r.uint16);

                var Context = new r.VersionedStruct(r.uint16, {
                    1: { // Simple context
                        coverage: new r.Pointer(r.uint16, Coverage),
                        ruleSetCount: r.uint16,
                        ruleSets: new r.Array(new r.Pointer(r.uint16, RuleSet), 'ruleSetCount')
                    },
                    2: { // Class-based context
                        coverage: new r.Pointer(r.uint16, Coverage),
                        classDef: new r.Pointer(r.uint16, ClassDef),
                        classSetCnt: r.uint16,
                        classSet: new r.Array(new r.Pointer(r.uint16, ClassSet), 'classSetCnt')
                    },
                    3: {
                        glyphCount: r.uint16,
                        lookupCount: r.uint16,
                        coverages: new r.Array(new r.Pointer(r.uint16, Coverage), 'glyphCount'),
                        lookupRecords: new r.Array(LookupRecord, 'lookupCount')
                    }
                });

                //######################################################
                // Chaining Contextual Substitution/Positioning Tables #
                //######################################################

                var ChainRule = new r.Struct({
                    backtrackGlyphCount: r.uint16,
                    backtrack: new r.Array(r.uint16, 'backtrackGlyphCount'),
                    inputGlyphCount: r.uint16,
                    input: new r.Array(r.uint16, function (t) {
                        return t.inputGlyphCount - 1;
                    }),
                    lookaheadGlyphCount: r.uint16,
                    lookahead: new r.Array(r.uint16, 'lookaheadGlyphCount'),
                    lookupCount: r.uint16,
                    lookupRecords: new r.Array(LookupRecord, 'lookupCount')
                });

                var ChainRuleSet = new r.Array(new r.Pointer(r.uint16, ChainRule), r.uint16);

                var ChainingContext = new r.VersionedStruct(r.uint16, {
                    1: { // Simple context glyph substitution
                        coverage: new r.Pointer(r.uint16, Coverage),
                        chainCount: r.uint16,
                        chainRuleSets: new r.Array(new r.Pointer(r.uint16, ChainRuleSet), 'chainCount')
                    },

                    2: { // Class-based chaining context
                        coverage: new r.Pointer(r.uint16, Coverage),
                        backtrackClassDef: new r.Pointer(r.uint16, ClassDef),
                        inputClassDef: new r.Pointer(r.uint16, ClassDef),
                        lookaheadClassDef: new r.Pointer(r.uint16, ClassDef),
                        chainCount: r.uint16,
                        chainClassSet: new r.Array(new r.Pointer(r.uint16, ChainRuleSet), 'chainCount')
                    },

                    3: { // Coverage-based chaining context
                        backtrackGlyphCount: r.uint16,
                        backtrackCoverage: new r.Array(new r.Pointer(r.uint16, Coverage), 'backtrackGlyphCount'),
                        inputGlyphCount: r.uint16,
                        inputCoverage: new r.Array(new r.Pointer(r.uint16, Coverage), 'inputGlyphCount'),
                        lookaheadGlyphCount: r.uint16,
                        lookaheadCoverage: new r.Array(new r.Pointer(r.uint16, Coverage), 'lookaheadGlyphCount'),
                        lookupCount: r.uint16,
                        lookupRecords: new r.Array(LookupRecord, 'lookupCount')
                    }
                });

                var _;

                /*******************
                 * Variation Store *
                 *******************/

                var F2DOT14 = new r.Fixed(16, 'BE', 14);
                var RegionAxisCoordinates = new r.Struct({
                    startCoord: F2DOT14,
                    peakCoord: F2DOT14,
                    endCoord: F2DOT14
                });

                var VariationRegionList = new r.Struct({
                    axisCount: r.uint16,
                    regionCount: r.uint16,
                    variationRegions: new r.Array(new r.Array(RegionAxisCoordinates, 'axisCount'), 'regionCount')
                });

                var DeltaSet = new r.Struct({
                    shortDeltas: new r.Array(r.int16, function (t) {
                        return t.parent.shortDeltaCount;
                    }),
                    regionDeltas: new r.Array(r.int8, function (t) {
                        return t.parent.regionIndexCount - t.parent.shortDeltaCount;
                    }),
                    deltas: function deltas(t) {
                        return t.shortDeltas.concat(t.regionDeltas);
                    }
                });

                var ItemVariationData = new r.Struct({
                    itemCount: r.uint16,
                    shortDeltaCount: r.uint16,
                    regionIndexCount: r.uint16,
                    regionIndexes: new r.Array(r.uint16, 'regionIndexCount'),
                    deltaSets: new r.Array(DeltaSet, 'itemCount')
                });

                var ItemVariationStore = new r.Struct({
                    format: r.uint16,
                    variationRegionList: new r.Pointer(r.uint32, VariationRegionList),
                    variationDataCount: r.uint16,
                    itemVariationData: new r.Array(new r.Pointer(r.uint32, ItemVariationData), 'variationDataCount')
                });

                /**********************
                 * Feature Variations *
                 **********************/

                var ConditionTable = new r.VersionedStruct(r.uint16, {
                    1: (_ = {
                        axisIndex: r.uint16
                    }, _['axisIndex'] = r.uint16, _.filterRangeMinValue = F2DOT14, _.filterRangeMaxValue = F2DOT14, _)
                });

                var ConditionSet = new r.Struct({
                    conditionCount: r.uint16,
                    conditionTable: new r.Array(new r.Pointer(r.uint32, ConditionTable), 'conditionCount')
                });

                var FeatureTableSubstitutionRecord = new r.Struct({
                    featureIndex: r.uint16,
                    alternateFeatureTable: new r.Pointer(r.uint32, Feature, { type: 'parent' })
                });

                var FeatureTableSubstitution = new r.Struct({
                    version: r.fixed32,
                    substitutionCount: r.uint16,
                    substitutions: new r.Array(FeatureTableSubstitutionRecord, 'substitutionCount')
                });

                var FeatureVariationRecord = new r.Struct({
                    conditionSet: new r.Pointer(r.uint32, ConditionSet, { type: 'parent' }),
                    featureTableSubstitution: new r.Pointer(r.uint32, FeatureTableSubstitution, { type: 'parent' })
                });

                var FeatureVariations = new r.Struct({
                    majorVersion: r.uint16,
                    minorVersion: r.uint16,
                    featureVariationRecordCount: r.uint32,
                    featureVariationRecords: new r.Array(FeatureVariationRecord, 'featureVariationRecordCount')
                });

                // Checks if an operand is an index of a predefined value,
                // otherwise delegates to the provided type.

                var PredefinedOp = function () {
                    function PredefinedOp(predefinedOps, type) {
                        _classCallCheck(this, PredefinedOp);

                        this.predefinedOps = predefinedOps;
                        this.type = type;
                    }

                    PredefinedOp.prototype.decode = function decode(stream, parent, operands) {
                        if (this.predefinedOps[operands[0]]) {
                            return this.predefinedOps[operands[0]];
                        }

                        return this.type.decode(stream, parent, operands);
                    };

                    PredefinedOp.prototype.size = function size(value, ctx) {
                        return this.type.size(value, ctx);
                    };

                    PredefinedOp.prototype.encode = function encode(stream, value, ctx) {
                        var index = this.predefinedOps.indexOf(value);
                        if (index !== -1) {
                            return index;
                        }

                        return this.type.encode(stream, value, ctx);
                    };

                    return PredefinedOp;
                }();

                var CFFEncodingVersion = function (_r$Number) {
                    _inherits(CFFEncodingVersion, _r$Number);

                    function CFFEncodingVersion() {
                        _classCallCheck(this, CFFEncodingVersion);

                        return _possibleConstructorReturn(this, _r$Number.call(this, 'UInt8'));
                    }

                    CFFEncodingVersion.prototype.decode = function decode(stream) {
                        return r.uint8.decode(stream) & 0x7f;
                    };

                    return CFFEncodingVersion;
                }(r.Number);

                var Range1 = new r.Struct({
                    first: r.uint16,
                    nLeft: r.uint8
                });

                var Range2 = new r.Struct({
                    first: r.uint16,
                    nLeft: r.uint16
                });

                var CFFCustomEncoding = new r.VersionedStruct(new CFFEncodingVersion(), {
                    0: {
                        nCodes: r.uint8,
                        codes: new r.Array(r.uint8, 'nCodes')
                    },

                    1: {
                        nRanges: r.uint8,
                        ranges: new r.Array(Range1, 'nRanges')
                    }

                    // TODO: supplement?
                });

                var CFFEncoding = new PredefinedOp([StandardEncoding, ExpertEncoding], new CFFPointer(CFFCustomEncoding, { lazy: true }));

                // Decodes an array of ranges until the total
                // length is equal to the provided length.

                var RangeArray = function (_r$Array) {
                    _inherits(RangeArray, _r$Array);

                    function RangeArray() {
                        _classCallCheck(this, RangeArray);

                        return _possibleConstructorReturn(this, _r$Array.apply(this, arguments));
                    }

                    RangeArray.prototype.decode = function decode(stream, parent) {
                        var length = restructure_src_utils.resolveLength(this.length, stream, parent);
                        var count = 0;
                        var res = [];
                        while (count < length) {
                            var range = this.type.decode(stream, parent);
                            range.offset = count;
                            count += range.nLeft + 1;
                            res.push(range);
                        }

                        return res;
                    };

                    return RangeArray;
                }(r.Array);

                var CFFCustomCharset = new r.VersionedStruct(r.uint8, {
                    0: {
                        glyphs: new r.Array(r.uint16, function (t) {
                            return t.parent.CharStrings.length - 1;
                        })
                    },

                    1: {
                        ranges: new RangeArray(Range1, function (t) {
                            return t.parent.CharStrings.length - 1;
                        })
                    },

                    2: {
                        ranges: new RangeArray(Range2, function (t) {
                            return t.parent.CharStrings.length - 1;
                        })
                    }
                });

                var CFFCharset = new PredefinedOp([ISOAdobeCharset, ExpertCharset, ExpertSubsetCharset], new CFFPointer(CFFCustomCharset, { lazy: true }));

                var FDRange3 = new r.Struct({
                    first: r.uint16,
                    fd: r.uint8
                });

                var FDRange4 = new r.Struct({
                    first: r.uint32,
                    fd: r.uint16
                });

                var FDSelect = new r.VersionedStruct(r.uint8, {
                    0: {
                        fds: new r.Array(r.uint8, function (t) {
                            return t.parent.CharStrings.length;
                        })
                    },

                    3: {
                        nRanges: r.uint16,
                        ranges: new r.Array(FDRange3, 'nRanges'),
                        sentinel: r.uint16
                    },

                    4: {
                        nRanges: r.uint32,
                        ranges: new r.Array(FDRange4, 'nRanges'),
                        sentinel: r.uint32
                    }
                });

                var ptr = new CFFPointer(CFFPrivateDict);

                var CFFPrivateOp = function () {
                    function CFFPrivateOp() {
                        _classCallCheck(this, CFFPrivateOp);
                    }

                    CFFPrivateOp.prototype.decode = function decode(stream, parent, operands) {
                        parent.length = operands[0];
                        return ptr.decode(stream, parent, [operands[1]]);
                    };

                    CFFPrivateOp.prototype.size = function size(dict, ctx) {
                        return [CFFPrivateDict.size(dict, ctx, false), ptr.size(dict, ctx)[0]];
                    };

                    CFFPrivateOp.prototype.encode = function encode(stream, dict, ctx) {
                        return [CFFPrivateDict.size(dict, ctx, false), ptr.encode(stream, dict, ctx)[0]];
                    };

                    return CFFPrivateOp;
                }();

                var FontDict = new CFFDict([
                    // key       name                   type(s)                                 default
                    [18, 'Private', new CFFPrivateOp(), null], [[12, 38], 'FontName', 'sid', null]]);

                var CFFTopDict = new CFFDict([
                    // key       name                   type(s)                                 default
                    [[12, 30], 'ROS', ['sid', 'sid', 'number'], null], [0, 'version', 'sid', null], [1, 'Notice', 'sid', null], [[12, 0], 'Copyright', 'sid', null], [2, 'FullName', 'sid', null], [3, 'FamilyName', 'sid', null], [4, 'Weight', 'sid', null], [[12, 1], 'isFixedPitch', 'boolean', false], [[12, 2], 'ItalicAngle', 'number', 0], [[12, 3], 'UnderlinePosition', 'number', -100], [[12, 4], 'UnderlineThickness', 'number', 50], [[12, 5], 'PaintType', 'number', 0], [[12, 6], 'CharstringType', 'number', 2], [[12, 7], 'FontMatrix', 'array', [0.001, 0, 0, 0.001, 0, 0]], [13, 'UniqueID', 'number', null], [5, 'FontBBox', 'array', [0, 0, 0, 0]], [[12, 8], 'StrokeWidth', 'number', 0], [14, 'XUID', 'array', null], [15, 'charset', CFFCharset, ISOAdobeCharset], [16, 'Encoding', CFFEncoding, StandardEncoding], [17, 'CharStrings', new CFFPointer(new CFFIndex()), null], [18, 'Private', new CFFPrivateOp(), null], [[12, 20], 'SyntheticBase', 'number', null], [[12, 21], 'PostScript', 'sid', null], [[12, 22], 'BaseFontName', 'sid', null], [[12, 23], 'BaseFontBlend', 'delta', null],

                    // CID font specific
                    [[12, 31], 'CIDFontVersion', 'number', 0], [[12, 32], 'CIDFontRevision', 'number', 0], [[12, 33], 'CIDFontType', 'number', 0], [[12, 34], 'CIDCount', 'number', 8720], [[12, 35], 'UIDBase', 'number', null], [[12, 37], 'FDSelect', new CFFPointer(FDSelect), null], [[12, 36], 'FDArray', new CFFPointer(new CFFIndex(FontDict)), null], [[12, 38], 'FontName', 'sid', null]]);

                var VariationStore = new r.Struct({
                    length: r.uint16,
                    itemVariationStore: ItemVariationStore
                });

                var CFF2TopDict = new CFFDict([[[12, 7], 'FontMatrix', 'array', [0.001, 0, 0, 0.001, 0, 0]], [17, 'CharStrings', new CFFPointer(new CFFIndex()), null], [[12, 37], 'FDSelect', new CFFPointer(FDSelect), null], [[12, 36], 'FDArray', new CFFPointer(new CFFIndex(FontDict)), null], [24, 'vstore', new CFFPointer(VariationStore), null], [25, 'maxstack', 'number', 193]]);

                var CFFTop = new r.VersionedStruct(r.fixed16, {
                    1: {
                        hdrSize: r.uint8,
                        offSize: r.uint8,
                        nameIndex: new CFFIndex(new r.String('length')),
                        topDictIndex: new CFFIndex(CFFTopDict),
                        stringIndex: new CFFIndex(new r.String('length')),
                        globalSubrIndex: new CFFIndex()
                    },

                    2: {
                        hdrSize: r.uint8,
                        length: r.uint16,
                        topDict: CFF2TopDict,
                        globalSubrIndex: new CFFIndex()
                    }
                });

                var CFFFont = function () {
                    function CFFFont(stream) {
                        _classCallCheck(this, CFFFont);

                        this.stream = stream;
                        this.decode();
                    }

                    CFFFont.decode = function decode(stream) {
                        return new CFFFont(stream);
                    };

                    CFFFont.prototype.decode = function decode() {
                        var start = this.stream.pos;
                        var top = CFFTop.decode(this.stream);
                        for (var key in top) {
                            var val = top[key];
                            this[key] = val;
                        }

                        if (this.version < 2) {
                            if (this.topDictIndex.length !== 1) {
                                throw new Error("Only a single font is allowed in CFF");
                            }

                            this.topDict = this.topDictIndex[0];
                        }

                        this.isCIDFont = this.topDict.ROS != null;
                        return this;
                    };

                    CFFFont.prototype.string = function string(sid) {
                        if (this.version >= 2) {
                            return null;
                        }

                        if (sid < standardStrings.length) {
                            return standardStrings[sid];
                        }

                        return this.stringIndex[sid - standardStrings.length];
                    };

                    CFFFont.prototype.getCharString = function getCharString(glyph) {
                        this.stream.pos = this.topDict.CharStrings[glyph].offset;
                        return this.stream.readBuffer(this.topDict.CharStrings[glyph].length);
                    };

                    CFFFont.prototype.getGlyphName = function getGlyphName(gid) {
                        // CFF2 glyph names are in the post table.
                        if (this.version >= 2) {
                            return null;
                        }

                        // CID-keyed fonts don't have glyph names
                        if (this.isCIDFont) {
                            return null;
                        }

                        var charset = this.topDict.charset;

                        if (Array.isArray(charset)) {
                            return charset[gid];
                        }

                        if (gid === 0) {
                            return '.notdef';
                        }

                        gid -= 1;

                        switch (charset.version) {
                            case 0:
                                return this.string(charset.glyphs[gid]);

                            case 1:
                            case 2:
                                for (var i = 0; i < charset.ranges.length; i++) {
                                    var range = charset.ranges[i];
                                    if (range.offset <= gid && gid <= range.offset + range.nLeft) {
                                        return this.string(range.first + (gid - range.offset));
                                    }
                                }
                                break;
                        }

                        return null;
                    };

                    CFFFont.prototype.fdForGlyph = function fdForGlyph(gid) {
                        if (!this.topDict.FDSelect) {
                            return null;
                        }

                        switch (this.topDict.FDSelect.version) {
                            case 0:
                                return this.topDict.FDSelect.fds[gid];

                            case 3:
                            case 4:
                                var ranges = this.topDict.FDSelect.ranges;

                                var low = 0;
                                var high = ranges.length - 1;

                                while (low <= high) {
                                    var mid = low + high >> 1;

                                    if (gid < ranges[mid].first) {
                                        high = mid - 1;
                                    } else if (mid < high && gid > ranges[mid + 1].first) {
                                        low = mid + 1;
                                    } else {
                                        return ranges[mid].fd;
                                    }
                                }
                            default:
                                throw new Error('Unknown FDSelect version: ' + this.topDict.FDSelect.version);
                        }
                    };

                    CFFFont.prototype.privateDictForGlyph = function privateDictForGlyph(gid) {
                        if (this.topDict.FDSelect) {
                            var fd = this.fdForGlyph(gid);
                            if (this.topDict.FDArray[fd]) {
                                return this.topDict.FDArray[fd].Private;
                            }

                            return null;
                        }

                        if (this.version < 2) {
                            return this.topDict.Private;
                        }

                        return this.topDict.FDArray[0].Private;
                    };

                    _createClass(CFFFont, [{
                        key: 'postscriptName',
                        get: function get() {
                            if (this.version < 2) {
                                return this.nameIndex[0];
                            }

                            return null;
                        }
                    }, {
                        key: 'fullName',
                        get: function get() {
                            return this.string(this.topDict.FullName);
                        }
                    }, {
                        key: 'familyName',
                        get: function get() {
                            return this.string(this.topDict.FamilyName);
                        }
                    }]);

                    return CFFFont;
                }();

                var VerticalOrigin = new r.Struct({
                    glyphIndex: r.uint16,
                    vertOriginY: r.int16
                });

                var VORG = new r.Struct({
                    majorVersion: r.uint16,
                    minorVersion: r.uint16,
                    defaultVertOriginY: r.int16,
                    numVertOriginYMetrics: r.uint16,
                    metrics: new r.Array(VerticalOrigin, 'numVertOriginYMetrics')
                });

                var BigMetrics = new r.Struct({
                    height: r.uint8,
                    width: r.uint8,
                    horiBearingX: r.int8,
                    horiBearingY: r.int8,
                    horiAdvance: r.uint8,
                    vertBearingX: r.int8,
                    vertBearingY: r.int8,
                    vertAdvance: r.uint8
                });

                var SmallMetrics = new r.Struct({
                    height: r.uint8,
                    width: r.uint8,
                    bearingX: r.int8,
                    bearingY: r.int8,
                    advance: r.uint8
                });

                var EBDTComponent = new r.Struct({
                    glyph: r.uint16,
                    xOffset: r.int8,
                    yOffset: r.int8
                });

                var ByteAligned = function ByteAligned() {
                    _classCallCheck(this, ByteAligned);
                };

                var BitAligned = function BitAligned() {
                    _classCallCheck(this, BitAligned);
                };

                var glyph = new r.VersionedStruct('version', {
                    1: {
                        metrics: SmallMetrics,
                        data: ByteAligned
                    },

                    2: {
                        metrics: SmallMetrics,
                        data: BitAligned
                    },

                    // format 3 is deprecated
                    // format 4 is not supported by Microsoft

                    5: {
                        data: BitAligned
                    },

                    6: {
                        metrics: BigMetrics,
                        data: ByteAligned
                    },

                    7: {
                        metrics: BigMetrics,
                        data: BitAligned
                    },

                    8: {
                        metrics: SmallMetrics,
                        pad: new r.Reserved(r.uint8),
                        numComponents: r.uint16,
                        components: new r.Array(EBDTComponent, 'numComponents')
                    },

                    9: {
                        metrics: BigMetrics,
                        pad: new r.Reserved(r.uint8),
                        numComponents: r.uint16,
                        components: new r.Array(EBDTComponent, 'numComponents')
                    },

                    17: {
                        metrics: SmallMetrics,
                        dataLen: r.uint32,
                        data: new r.Buffer('dataLen')
                    },

                    18: {
                        metrics: BigMetrics,
                        dataLen: r.uint32,
                        data: new r.Buffer('dataLen')
                    },

                    19: {
                        dataLen: r.uint32,
                        data: new r.Buffer('dataLen')
                    }
                });

                var SBitLineMetrics = new r.Struct({
                    ascender: r.int8,
                    descender: r.int8,
                    widthMax: r.uint8,
                    caretSlopeNumerator: r.int8,
                    caretSlopeDenominator: r.int8,
                    caretOffset: r.int8,
                    minOriginSB: r.int8,
                    minAdvanceSB: r.int8,
                    maxBeforeBL: r.int8,
                    minAfterBL: r.int8,
                    pad: new r.Reserved(r.int8, 2)
                });

                var CodeOffsetPair = new r.Struct({
                    glyphCode: r.uint16,
                    offset: r.uint16
                });

                var IndexSubtable = new r.VersionedStruct(r.uint16, {
                    header: {
                        imageFormat: r.uint16,
                        imageDataOffset: r.uint32
                    },

                    1: {
                        offsetArray: new r.Array(r.uint32, function (t) {
                            return t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1;
                        })
                    },

                    2: {
                        imageSize: r.uint32,
                        bigMetrics: BigMetrics
                    },

                    3: {
                        offsetArray: new r.Array(r.uint16, function (t) {
                            return t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1;
                        })
                    },

                    4: {
                        numGlyphs: r.uint32,
                        glyphArray: new r.Array(CodeOffsetPair, function (t) {
                            return t.numGlyphs + 1;
                        })
                    },

                    5: {
                        imageSize: r.uint32,
                        bigMetrics: BigMetrics,
                        numGlyphs: r.uint32,
                        glyphCodeArray: new r.Array(r.uint16, 'numGlyphs')
                    }
                });

                var IndexSubtableArray = new r.Struct({
                    firstGlyphIndex: r.uint16,
                    lastGlyphIndex: r.uint16,
                    subtable: new r.Pointer(r.uint32, IndexSubtable)
                });

                var BitmapSizeTable = new r.Struct({
                    indexSubTableArray: new r.Pointer(r.uint32, new r.Array(IndexSubtableArray, 1), { type: 'parent' }),
                    indexTablesSize: r.uint32,
                    numberOfIndexSubTables: r.uint32,
                    colorRef: r.uint32,
                    hori: SBitLineMetrics,
                    vert: SBitLineMetrics,
                    startGlyphIndex: r.uint16,
                    endGlyphIndex: r.uint16,
                    ppemX: r.uint8,
                    ppemY: r.uint8,
                    bitDepth: r.uint8,
                    flags: new r.Bitfield(r.uint8, ['horizontal', 'vertical'])
                });

                var EBLC = new r.Struct({
                    version: r.uint32, // 0x00020000
                    numSizes: r.uint32,
                    sizes: new r.Array(BitmapSizeTable, 'numSizes')
                });

                var ImageTable = new r.Struct({
                    ppem: r.uint16,
                    resolution: r.uint16,
                    imageOffsets: new r.Array(new r.Pointer(r.uint32, 'void'), function (t) {
                        return t.parent.parent.maxp.numGlyphs + 1;
                    })
                });

                // This is the Apple sbix table, used by the "Apple Color Emoji" font.
                // It includes several image tables with images for each bitmap glyph
                // of several different sizes.
                var sbix = new r.Struct({
                    version: r.uint16,
                    flags: new r.Bitfield(r.uint16, ['renderOutlines']),
                    numImgTables: r.uint32,
                    imageTables: new r.Array(new r.Pointer(r.uint32, ImageTable), 'numImgTables')
                });

                var LayerRecord = new r.Struct({
                    gid: r.uint16, // Glyph ID of layer glyph (must be in z-order from bottom to top).
                    paletteIndex: r.uint16 // Index value to use in the appropriate palette. This value must
                }); // be less than numPaletteEntries in the CPAL table, except for
                // the special case noted below. Each palette entry is 16 bits.
                // A palette index of 0xFFFF is a special case indicating that
                // the text foreground color should be used.

                var BaseGlyphRecord = new r.Struct({
                    gid: r.uint16, // Glyph ID of reference glyph. This glyph is for reference only
                    // and is not rendered for color.
                    firstLayerIndex: r.uint16, // Index (from beginning of the Layer Records) to the layer record.
                    // There will be numLayers consecutive entries for this base glyph.
                    numLayers: r.uint16
                });

                var COLR = new r.Struct({
                    version: r.uint16,
                    numBaseGlyphRecords: r.uint16,
                    baseGlyphRecord: new r.Pointer(r.uint32, new r.Array(BaseGlyphRecord, 'numBaseGlyphRecords')),
                    layerRecords: new r.Pointer(r.uint32, new r.Array(LayerRecord, 'numLayerRecords'), { lazy: true }),
                    numLayerRecords: r.uint16
                });

                var ColorRecord = new r.Struct({
                    blue: r.uint8,
                    green: r.uint8,
                    red: r.uint8,
                    alpha: r.uint8
                });

                var CPAL = new r.VersionedStruct(r.uint16, {
                    header: {
                        numPaletteEntries: r.uint16,
                        numPalettes: r.uint16,
                        numColorRecords: r.uint16,
                        colorRecords: new r.Pointer(r.uint32, new r.Array(ColorRecord, 'numColorRecords')),
                        colorRecordIndices: new r.Array(r.uint16, 'numPalettes')
                    },
                    0: {},
                    1: {
                        offsetPaletteTypeArray: new r.Pointer(r.uint32, new r.Array(r.uint32, 'numPalettes')),
                        offsetPaletteLabelArray: new r.Pointer(r.uint32, new r.Array(r.uint16, 'numPalettes')),
                        offsetPaletteEntryLabelArray: new r.Pointer(r.uint32, new r.Array(r.uint16, 'numPaletteEntries'))
                    }
                });

                var BaseCoord = new r.VersionedStruct(r.uint16, {
                    1: { // Design units only
                        coordinate: r.int16 // X or Y value, in design units
                    },

                    2: { // Design units plus contour point
                        coordinate: r.int16, // X or Y value, in design units
                        referenceGlyph: r.uint16, // GlyphID of control glyph
                        baseCoordPoint: r.uint16 // Index of contour point on the referenceGlyph
                    },

                    3: { // Design units plus Device table
                        coordinate: r.int16, // X or Y value, in design units
                        deviceTable: new r.Pointer(r.uint16, Device) // Device table for X or Y value
                    }
                });

                var BaseValues = new r.Struct({
                    defaultIndex: r.uint16, // Index of default baseline for this script-same index in the BaseTagList
                    baseCoordCount: r.uint16,
                    baseCoords: new r.Array(new r.Pointer(r.uint16, BaseCoord), 'baseCoordCount')
                });

                var FeatMinMaxRecord = new r.Struct({
                    tag: new r.String(4), // 4-byte feature identification tag-must match FeatureTag in FeatureList
                    minCoord: new r.Pointer(r.uint16, BaseCoord, { type: 'parent' }), // May be NULL
                    maxCoord: new r.Pointer(r.uint16, BaseCoord, { type: 'parent' }) // May be NULL
                });

                var MinMax = new r.Struct({
                    minCoord: new r.Pointer(r.uint16, BaseCoord), // May be NULL
                    maxCoord: new r.Pointer(r.uint16, BaseCoord), // May be NULL
                    featMinMaxCount: r.uint16, // May be 0
                    featMinMaxRecords: new r.Array(FeatMinMaxRecord, 'featMinMaxCount') // In alphabetical order
                });

                var BaseLangSysRecord = new r.Struct({
                    tag: new r.String(4), // 4-byte language system identification tag
                    minMax: new r.Pointer(r.uint16, MinMax, { type: 'parent' })
                });

                var BaseScript = new r.Struct({
                    baseValues: new r.Pointer(r.uint16, BaseValues), // May be NULL
                    defaultMinMax: new r.Pointer(r.uint16, MinMax), // May be NULL
                    baseLangSysCount: r.uint16, // May be 0
                    baseLangSysRecords: new r.Array(BaseLangSysRecord, 'baseLangSysCount') // in alphabetical order by BaseLangSysTag
                });

                var BaseScriptRecord = new r.Struct({
                    tag: new r.String(4), // 4-byte script identification tag
                    script: new r.Pointer(r.uint16, BaseScript, { type: 'parent' })
                });

                var BaseScriptList = new r.Array(BaseScriptRecord, r.uint16);

                // Array of 4-byte baseline identification tags-must be in alphabetical order
                var BaseTagList = new r.Array(new r.String(4), r.uint16);

                var Axis = new r.Struct({
                    baseTagList: new r.Pointer(r.uint16, BaseTagList), // May be NULL
                    baseScriptList: new r.Pointer(r.uint16, BaseScriptList)
                });

                var BASE = new r.VersionedStruct(r.uint32, {
                    header: {
                        horizAxis: new r.Pointer(r.uint16, Axis), // May be NULL
                        vertAxis: new r.Pointer(r.uint16, Axis) // May be NULL
                    },

                    0x00010000: {},
                    0x00010001: {
                        itemVariationStore: new r.Pointer(r.uint32, ItemVariationStore)
                    }
                });

                var AttachPoint = new r.Array(r.uint16, r.uint16);
                var AttachList = new r.Struct({
                    coverage: new r.Pointer(r.uint16, Coverage),
                    glyphCount: r.uint16,
                    attachPoints: new r.Array(new r.Pointer(r.uint16, AttachPoint), 'glyphCount')
                });

                var CaretValue = new r.VersionedStruct(r.uint16, {
                    1: { // Design units only
                        coordinate: r.int16
                    },

                    2: { // Contour point
                        caretValuePoint: r.uint16
                    },

                    3: { // Design units plus Device table
                        coordinate: r.int16,
                        deviceTable: new r.Pointer(r.uint16, Device)
                    }
                });

                var LigGlyph = new r.Array(new r.Pointer(r.uint16, CaretValue), r.uint16);

                var LigCaretList = new r.Struct({
                    coverage: new r.Pointer(r.uint16, Coverage),
                    ligGlyphCount: r.uint16,
                    ligGlyphs: new r.Array(new r.Pointer(r.uint16, LigGlyph), 'ligGlyphCount')
                });

                var MarkGlyphSetsDef = new r.Struct({
                    markSetTableFormat: r.uint16,
                    markSetCount: r.uint16,
                    coverage: new r.Array(new r.Pointer(r.uint32, Coverage), 'markSetCount')
                });

                var GDEF = new r.VersionedStruct(r.uint32, {
                    header: {
                        glyphClassDef: new r.Pointer(r.uint16, ClassDef),
                        attachList: new r.Pointer(r.uint16, AttachList),
                        ligCaretList: new r.Pointer(r.uint16, LigCaretList),
                        markAttachClassDef: new r.Pointer(r.uint16, ClassDef)
                    },

                    0x00010000: {},
                    0x00010002: {
                        markGlyphSetsDef: new r.Pointer(r.uint16, MarkGlyphSetsDef)
                    },
                    0x00010003: {
                        markGlyphSetsDef: new r.Pointer(r.uint16, MarkGlyphSetsDef),
                        itemVariationStore: new r.Pointer(r.uint32, ItemVariationStore)
                    }
                });

                var ValueFormat = new r.Bitfield(r.uint16, ['xPlacement', 'yPlacement', 'xAdvance', 'yAdvance', 'xPlaDevice', 'yPlaDevice', 'xAdvDevice', 'yAdvDevice']);

                var types = {
                    xPlacement: r.int16,
                    yPlacement: r.int16,
                    xAdvance: r.int16,
                    yAdvance: r.int16,
                    xPlaDevice: new r.Pointer(r.uint16, Device, { type: 'global', relativeTo: 'rel' }),
                    yPlaDevice: new r.Pointer(r.uint16, Device, { type: 'global', relativeTo: 'rel' }),
                    xAdvDevice: new r.Pointer(r.uint16, Device, { type: 'global', relativeTo: 'rel' }),
                    yAdvDevice: new r.Pointer(r.uint16, Device, { type: 'global', relativeTo: 'rel' })
                };

                var ValueRecord = function () {
                    function ValueRecord() {
                        var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'valueFormat';

                        _classCallCheck(this, ValueRecord);

                        this.key = key;
                    }

                    ValueRecord.prototype.buildStruct = function buildStruct(parent) {
                        var struct = parent;
                        while (!struct[this.key] && struct.parent) {
                            struct = struct.parent;
                        }

                        if (!struct[this.key]) return;

                        var fields = {};
                        fields.rel = function () {
                            return struct._startOffset;
                        };

                        var format = struct[this.key];
                        for (var key in format) {
                            if (format[key]) {
                                fields[key] = types[key];
                            }
                        }

                        return new r.Struct(fields);
                    };

                    ValueRecord.prototype.size = function size(val, ctx) {
                        return this.buildStruct(ctx).size(val, ctx);
                    };

                    ValueRecord.prototype.decode = function decode(stream, parent) {
                        var res = this.buildStruct(parent).decode(stream, parent);
                        delete res.rel;
                        return res;
                    };

                    return ValueRecord;
                }();

                var PairValueRecord = new r.Struct({
                    secondGlyph: r.uint16,
                    value1: new ValueRecord('valueFormat1'),
                    value2: new ValueRecord('valueFormat2')
                });

                var PairSet = new r.Array(PairValueRecord, r.uint16);

                var Class2Record = new r.Struct({
                    value1: new ValueRecord('valueFormat1'),
                    value2: new ValueRecord('valueFormat2')
                });

                var Anchor = new r.VersionedStruct(r.uint16, {
                    1: { // Design units only
                        xCoordinate: r.int16,
                        yCoordinate: r.int16
                    },

                    2: { // Design units plus contour point
                        xCoordinate: r.int16,
                        yCoordinate: r.int16,
                        anchorPoint: r.uint16
                    },

                    3: { // Design units plus Device tables
                        xCoordinate: r.int16,
                        yCoordinate: r.int16,
                        xDeviceTable: new r.Pointer(r.uint16, Device),
                        yDeviceTable: new r.Pointer(r.uint16, Device)
                    }
                });

                var EntryExitRecord = new r.Struct({
                    entryAnchor: new r.Pointer(r.uint16, Anchor, { type: 'parent' }),
                    exitAnchor: new r.Pointer(r.uint16, Anchor, { type: 'parent' })
                });

                var MarkRecord = new r.Struct({
                    class: r.uint16,
                    markAnchor: new r.Pointer(r.uint16, Anchor, { type: 'parent' })
                });

                var MarkArray = new r.Array(MarkRecord, r.uint16);

                var BaseRecord = new r.Array(new r.Pointer(r.uint16, Anchor), function (t) {
                    return t.parent.classCount;
                });
                var BaseArray = new r.Array(BaseRecord, r.uint16);

                var ComponentRecord = new r.Array(new r.Pointer(r.uint16, Anchor), function (t) {
                    return t.parent.parent.classCount;
                });
                var LigatureAttach = new r.Array(ComponentRecord, r.uint16);
                var LigatureArray = new r.Array(new r.Pointer(r.uint16, LigatureAttach), r.uint16);

                var GPOSLookup = new r.VersionedStruct('lookupType', {
                    1: new r.VersionedStruct(r.uint16, { // Single Adjustment
                        1: { // Single positioning value
                            coverage: new r.Pointer(r.uint16, Coverage),
                            valueFormat: ValueFormat,
                            value: new ValueRecord()
                        },
                        2: {
                            coverage: new r.Pointer(r.uint16, Coverage),
                            valueFormat: ValueFormat,
                            valueCount: r.uint16,
                            values: new r.LazyArray(new ValueRecord(), 'valueCount')
                        }
                    }),

                    2: new r.VersionedStruct(r.uint16, { // Pair Adjustment Positioning
                        1: { // Adjustments for glyph pairs
                            coverage: new r.Pointer(r.uint16, Coverage),
                            valueFormat1: ValueFormat,
                            valueFormat2: ValueFormat,
                            pairSetCount: r.uint16,
                            pairSets: new r.LazyArray(new r.Pointer(r.uint16, PairSet), 'pairSetCount')
                        },

                        2: { // Class pair adjustment
                            coverage: new r.Pointer(r.uint16, Coverage),
                            valueFormat1: ValueFormat,
                            valueFormat2: ValueFormat,
                            classDef1: new r.Pointer(r.uint16, ClassDef),
                            classDef2: new r.Pointer(r.uint16, ClassDef),
                            class1Count: r.uint16,
                            class2Count: r.uint16,
                            classRecords: new r.LazyArray(new r.LazyArray(Class2Record, 'class2Count'), 'class1Count')
                        }
                    }),

                    3: { // Cursive Attachment Positioning
                        format: r.uint16,
                        coverage: new r.Pointer(r.uint16, Coverage),
                        entryExitCount: r.uint16,
                        entryExitRecords: new r.Array(EntryExitRecord, 'entryExitCount')
                    },

                    4: { // MarkToBase Attachment Positioning
                        format: r.uint16,
                        markCoverage: new r.Pointer(r.uint16, Coverage),
                        baseCoverage: new r.Pointer(r.uint16, Coverage),
                        classCount: r.uint16,
                        markArray: new r.Pointer(r.uint16, MarkArray),
                        baseArray: new r.Pointer(r.uint16, BaseArray)
                    },

                    5: { // MarkToLigature Attachment Positioning
                        format: r.uint16,
                        markCoverage: new r.Pointer(r.uint16, Coverage),
                        ligatureCoverage: new r.Pointer(r.uint16, Coverage),
                        classCount: r.uint16,
                        markArray: new r.Pointer(r.uint16, MarkArray),
                        ligatureArray: new r.Pointer(r.uint16, LigatureArray)
                    },

                    6: { // MarkToMark Attachment Positioning
                        format: r.uint16,
                        mark1Coverage: new r.Pointer(r.uint16, Coverage),
                        mark2Coverage: new r.Pointer(r.uint16, Coverage),
                        classCount: r.uint16,
                        mark1Array: new r.Pointer(r.uint16, MarkArray),
                        mark2Array: new r.Pointer(r.uint16, BaseArray)
                    },

                    7: Context, // Contextual positioning
                    8: ChainingContext, // Chaining contextual positioning

                    9: { // Extension Positioning
                        posFormat: r.uint16,
                        lookupType: r.uint16, // cannot also be 9
                        extension: new r.Pointer(r.uint32, GPOSLookup)
                    }
                });

                // Fix circular reference
                GPOSLookup.versions[9].extension.type = GPOSLookup;

                var GPOS = new r.VersionedStruct(r.uint32, {
                    header: {
                        scriptList: new r.Pointer(r.uint16, ScriptList),
                        featureList: new r.Pointer(r.uint16, FeatureList),
                        lookupList: new r.Pointer(r.uint16, new LookupList(GPOSLookup))
                    },

                    0x00010000: {},
                    0x00010001: {
                        featureVariations: new r.Pointer(r.uint32, FeatureVariations)
                    }
                });

                var Sequence = new r.Array(r.uint16, r.uint16);
                var AlternateSet = Sequence;

                var Ligature = new r.Struct({
                    glyph: r.uint16,
                    compCount: r.uint16,
                    components: new r.Array(r.uint16, function (t) {
                        return t.compCount - 1;
                    })
                });

                var LigatureSet = new r.Array(new r.Pointer(r.uint16, Ligature), r.uint16);

                var GSUBLookup = new r.VersionedStruct('lookupType', {
                    1: new r.VersionedStruct(r.uint16, { // Single Substitution
                        1: {
                            coverage: new r.Pointer(r.uint16, Coverage),
                            deltaGlyphID: r.int16
                        },
                        2: {
                            coverage: new r.Pointer(r.uint16, Coverage),
                            glyphCount: r.uint16,
                            substitute: new r.LazyArray(r.uint16, 'glyphCount')
                        }
                    }),

                    2: { // Multiple Substitution
                        substFormat: r.uint16,
                        coverage: new r.Pointer(r.uint16, Coverage),
                        count: r.uint16,
                        sequences: new r.LazyArray(new r.Pointer(r.uint16, Sequence), 'count')
                    },

                    3: { // Alternate Substitution
                        substFormat: r.uint16,
                        coverage: new r.Pointer(r.uint16, Coverage),
                        count: r.uint16,
                        alternateSet: new r.LazyArray(new r.Pointer(r.uint16, AlternateSet), 'count')
                    },

                    4: { // Ligature Substitution
                        substFormat: r.uint16,
                        coverage: new r.Pointer(r.uint16, Coverage),
                        count: r.uint16,
                        ligatureSets: new r.LazyArray(new r.Pointer(r.uint16, LigatureSet), 'count')
                    },

                    5: Context, // Contextual Substitution
                    6: ChainingContext, // Chaining Contextual Substitution

                    7: { // Extension Substitution
                        substFormat: r.uint16,
                        lookupType: r.uint16, // cannot also be 7
                        extension: new r.Pointer(r.uint32, GSUBLookup)
                    },

                    8: { // Reverse Chaining Contextual Single Substitution
                        substFormat: r.uint16,
                        coverage: new r.Pointer(r.uint16, Coverage),
                        backtrackCoverage: new r.Array(new r.Pointer(r.uint16, Coverage), 'backtrackGlyphCount'),
                        lookaheadGlyphCount: r.uint16,
                        lookaheadCoverage: new r.Array(new r.Pointer(r.uint16, Coverage), 'lookaheadGlyphCount'),
                        glyphCount: r.uint16,
                        substitutes: new r.Array(r.uint16, 'glyphCount')
                    }
                });

                // Fix circular reference
                GSUBLookup.versions[7].extension.type = GSUBLookup;

                var GSUB = new r.VersionedStruct(r.uint32, {
                    header: {
                        scriptList: new r.Pointer(r.uint16, ScriptList),
                        featureList: new r.Pointer(r.uint16, FeatureList),
                        lookupList: new r.Pointer(r.uint16, new LookupList(GSUBLookup))
                    },

                    0x00010000: {},
                    0x00010001: {
                        featureVariations: new r.Pointer(r.uint32, FeatureVariations)
                    }
                });

                var JstfGSUBModList = new r.Array(r.uint16, r.uint16);

                var JstfPriority = new r.Struct({
                    shrinkageEnableGSUB: new r.Pointer(r.uint16, JstfGSUBModList),
                    shrinkageDisableGSUB: new r.Pointer(r.uint16, JstfGSUBModList),
                    shrinkageEnableGPOS: new r.Pointer(r.uint16, JstfGSUBModList),
                    shrinkageDisableGPOS: new r.Pointer(r.uint16, JstfGSUBModList),
                    shrinkageJstfMax: new r.Pointer(r.uint16, new LookupList(GPOSLookup)),
                    extensionEnableGSUB: new r.Pointer(r.uint16, JstfGSUBModList),
                    extensionDisableGSUB: new r.Pointer(r.uint16, JstfGSUBModList),
                    extensionEnableGPOS: new r.Pointer(r.uint16, JstfGSUBModList),
                    extensionDisableGPOS: new r.Pointer(r.uint16, JstfGSUBModList),
                    extensionJstfMax: new r.Pointer(r.uint16, new LookupList(GPOSLookup))
                });

                var JstfLangSys = new r.Array(new r.Pointer(r.uint16, JstfPriority), r.uint16);

                var JstfLangSysRecord = new r.Struct({
                    tag: new r.String(4),
                    jstfLangSys: new r.Pointer(r.uint16, JstfLangSys)
                });

                var JstfScript = new r.Struct({
                    extenderGlyphs: new r.Pointer(r.uint16, new r.Array(r.uint16, r.uint16)), // array of glyphs to extend line length
                    defaultLangSys: new r.Pointer(r.uint16, JstfLangSys),
                    langSysCount: r.uint16,
                    langSysRecords: new r.Array(JstfLangSysRecord, 'langSysCount')
                });

                var JstfScriptRecord = new r.Struct({
                    tag: new r.String(4),
                    script: new r.Pointer(r.uint16, JstfScript, { type: 'parent' })
                });

                var JSTF = new r.Struct({
                    version: r.uint32, // should be 0x00010000
                    scriptCount: r.uint16,
                    scriptList: new r.Array(JstfScriptRecord, 'scriptCount')
                });

                // TODO: add this to restructure

                var VariableSizeNumber = function () {
                    function VariableSizeNumber(size) {
                        _classCallCheck(this, VariableSizeNumber);

                        this._size = size;
                    }

                    VariableSizeNumber.prototype.decode = function decode(stream, parent) {
                        switch (this.size(0, parent)) {
                            case 1:
                                return stream.readUInt8();
                            case 2:
                                return stream.readUInt16BE();
                            case 3:
                                return stream.readUInt24BE();
                            case 4:
                                return stream.readUInt32BE();
                        }
                    };

                    VariableSizeNumber.prototype.size = function size(val, parent) {
                        return restructure_src_utils.resolveLength(this._size, null, parent);
                    };

                    return VariableSizeNumber;
                }();

                var MapDataEntry = new r.Struct({
                    entry: new VariableSizeNumber(function (t) {
                        return ((t.parent.entryFormat & 0x0030) >> 4) + 1;
                    }),
                    outerIndex: function outerIndex(t) {
                        return t.entry >> (t.parent.entryFormat & 0x000F) + 1;
                    },
                    innerIndex: function innerIndex(t) {
                        return t.entry & (1 << (t.parent.entryFormat & 0x000F) + 1) - 1;
                    }
                });

                var DeltaSetIndexMap = new r.Struct({
                    entryFormat: r.uint16,
                    mapCount: r.uint16,
                    mapData: new r.Array(MapDataEntry, 'mapCount')
                });

                var HVAR = new r.Struct({
                    majorVersion: r.uint16,
                    minorVersion: r.uint16,
                    itemVariationStore: new r.Pointer(r.uint32, ItemVariationStore),
                    advanceWidthMapping: new r.Pointer(r.uint32, DeltaSetIndexMap),
                    LSBMapping: new r.Pointer(r.uint32, DeltaSetIndexMap),
                    RSBMapping: new r.Pointer(r.uint32, DeltaSetIndexMap)
                });

                var Signature = new r.Struct({
                    format: r.uint32,
                    length: r.uint32,
                    offset: r.uint32
                });

                var SignatureBlock = new r.Struct({
                    reserved: new r.Reserved(r.uint16, 2),
                    cbSignature: r.uint32, // Length (in bytes) of the PKCS#7 packet in pbSignature
                    signature: new r.Buffer('cbSignature')
                });

                var DSIG = new r.Struct({
                    ulVersion: r.uint32, // Version number of the DSIG table (0x00000001)
                    usNumSigs: r.uint16, // Number of signatures in the table
                    usFlag: r.uint16, // Permission flags
                    signatures: new r.Array(Signature, 'usNumSigs'),
                    signatureBlocks: new r.Array(SignatureBlock, 'usNumSigs')
                });

                var GaspRange = new r.Struct({
                    rangeMaxPPEM: r.uint16, // Upper limit of range, in ppem
                    rangeGaspBehavior: new r.Bitfield(r.uint16, [// Flags describing desired rasterizer behavior
                        'grayscale', 'gridfit', 'symmetricSmoothing', 'symmetricGridfit' // only in version 1, for ClearType
                    ])
                });

                var gasp = new r.Struct({
                    version: r.uint16, // set to 0
                    numRanges: r.uint16,
                    gaspRanges: new r.Array(GaspRange, 'numRanges') // Sorted by ppem
                });

                var DeviceRecord = new r.Struct({
                    pixelSize: r.uint8,
                    maximumWidth: r.uint8,
                    widths: new r.Array(r.uint8, function (t) {
                        return t.parent.parent.maxp.numGlyphs;
                    })
                });

                // The Horizontal Device Metrics table stores integer advance widths scaled to particular pixel sizes
                var hdmx = new r.Struct({
                    version: r.uint16,
                    numRecords: r.int16,
                    sizeDeviceRecord: r.int32,
                    records: new r.Array(DeviceRecord, 'numRecords')
                });

                var KernPair = new r.Struct({
                    left: r.uint16,
                    right: r.uint16,
                    value: r.int16
                });

                var ClassTable = new r.Struct({
                    firstGlyph: r.uint16,
                    nGlyphs: r.uint16,
                    offsets: new r.Array(r.uint16, 'nGlyphs'),
                    max: function max(t) {
                        return t.offsets.length && Math.max.apply(Math, t.offsets);
                    }
                });

                var Kern2Array = new r.Struct({
                    off: function off(t) {
                        return t._startOffset - t.parent.parent._startOffset;
                    },
                    len: function len(t) {
                        return ((t.parent.leftTable.max - t.off) / t.parent.rowWidth + 1) * (t.parent.rowWidth / 2);
                    },
                    values: new r.LazyArray(r.int16, 'len')
                });

                var KernSubtable = new r.VersionedStruct('format', {
                    0: {
                        nPairs: r.uint16,
                        searchRange: r.uint16,
                        entrySelector: r.uint16,
                        rangeShift: r.uint16,
                        pairs: new r.Array(KernPair, 'nPairs')
                    },

                    2: {
                        rowWidth: r.uint16,
                        leftTable: new r.Pointer(r.uint16, ClassTable, { type: 'parent' }),
                        rightTable: new r.Pointer(r.uint16, ClassTable, { type: 'parent' }),
                        array: new r.Pointer(r.uint16, Kern2Array, { type: 'parent' })
                    },

                    3: {
                        glyphCount: r.uint16,
                        kernValueCount: r.uint8,
                        leftClassCount: r.uint8,
                        rightClassCount: r.uint8,
                        flags: r.uint8,
                        kernValue: new r.Array(r.int16, 'kernValueCount'),
                        leftClass: new r.Array(r.uint8, 'glyphCount'),
                        rightClass: new r.Array(r.uint8, 'glyphCount'),
                        kernIndex: new r.Array(r.uint8, function (t) {
                            return t.leftClassCount * t.rightClassCount;
                        })
                    }
                });

                var KernTable = new r.VersionedStruct('version', {
                    0: { // Microsoft uses this format
                        subVersion: r.uint16, // Microsoft has an extra sub-table version number
                        length: r.uint16, // Length of the subtable, in bytes
                        format: r.uint8, // Format of subtable
                        coverage: new r.Bitfield(r.uint8, ['horizontal', // 1 if table has horizontal data, 0 if vertical
                            'minimum', // If set to 1, the table has minimum values. If set to 0, the table has kerning values.
                            'crossStream', // If set to 1, kerning is perpendicular to the flow of the text
                            'override' // If set to 1 the value in this table replaces the accumulated value
                        ]),
                        subtable: KernSubtable,
                        padding: new r.Reserved(r.uint8, function (t) {
                            return t.length - t._currentOffset;
                        })
                    },
                    1: { // Apple uses this format
                        length: r.uint32,
                        coverage: new r.Bitfield(r.uint8, [null, null, null, null, null, 'variation', // Set if table has variation kerning values
                            'crossStream', // Set if table has cross-stream kerning values
                            'vertical' // Set if table has vertical kerning values
                        ]),
                        format: r.uint8,
                        tupleIndex: r.uint16,
                        subtable: KernSubtable,
                        padding: new r.Reserved(r.uint8, function (t) {
                            return t.length - t._currentOffset;
                        })
                    }
                });

                var kern = new r.VersionedStruct(r.uint16, {
                    0: { // Microsoft Version
                        nTables: r.uint16,
                        tables: new r.Array(KernTable, 'nTables')
                    },

                    1: { // Apple Version
                        reserved: new r.Reserved(r.uint16), // the other half of the version number
                        nTables: r.uint32,
                        tables: new r.Array(KernTable, 'nTables')
                    }
                });

                // Linear Threshold table
                // Records the ppem for each glyph at which the scaling becomes linear again,
                // despite instructions effecting the advance width
                var LTSH = new r.Struct({
                    version: r.uint16,
                    numGlyphs: r.uint16,
                    yPels: new r.Array(r.uint8, 'numGlyphs')
                });

                // PCL 5 Table
                // NOTE: The PCLT table is strongly discouraged for OpenType fonts with TrueType outlines
                var PCLT = new r.Struct({
                    version: r.uint16,
                    fontNumber: r.uint32,
                    pitch: r.uint16,
                    xHeight: r.uint16,
                    style: r.uint16,
                    typeFamily: r.uint16,
                    capHeight: r.uint16,
                    symbolSet: r.uint16,
                    typeface: new r.String(16),
                    characterComplement: new r.String(8),
                    fileName: new r.String(6),
                    strokeWeight: new r.String(1),
                    widthType: new r.String(1),
                    serifStyle: r.uint8,
                    reserved: new r.Reserved(r.uint8)
                });

                // VDMX tables contain ascender/descender overrides for certain (usually small)
                // sizes. This is needed in order to match font metrics on Windows.

                var Ratio = new r.Struct({
                    bCharSet: r.uint8, // Character set
                    xRatio: r.uint8, // Value to use for x-Ratio
                    yStartRatio: r.uint8, // Starting y-Ratio value
                    yEndRatio: r.uint8 // Ending y-Ratio value
                });

                var vTable = new r.Struct({
                    yPelHeight: r.uint16, // yPelHeight to which values apply
                    yMax: r.int16, // Maximum value (in pels) for this yPelHeight
                    yMin: r.int16 // Minimum value (in pels) for this yPelHeight
                });

                var VdmxGroup = new r.Struct({
                    recs: r.uint16, // Number of height records in this group
                    startsz: r.uint8, // Starting yPelHeight
                    endsz: r.uint8, // Ending yPelHeight
                    entries: new r.Array(vTable, 'recs') // The VDMX records
                });

                var VDMX = new r.Struct({
                    version: r.uint16, // Version number (0 or 1)
                    numRecs: r.uint16, // Number of VDMX groups present
                    numRatios: r.uint16, // Number of aspect ratio groupings
                    ratioRanges: new r.Array(Ratio, 'numRatios'), // Ratio ranges
                    offsets: new r.Array(r.uint16, 'numRatios'), // Offset to the VDMX group for this ratio range
                    groups: new r.Array(VdmxGroup, 'numRecs') // The actual VDMX groupings
                });

                // Vertical Header Table
                var vhea = new r.Struct({
                    version: r.uint16, // Version number of the Vertical Header Table
                    ascent: r.int16, // The vertical typographic ascender for this font
                    descent: r.int16, // The vertical typographic descender for this font
                    lineGap: r.int16, // The vertical typographic line gap for this font
                    advanceHeightMax: r.int16, // The maximum advance height measurement found in the font
                    minTopSideBearing: r.int16, // The minimum top side bearing measurement found in the font
                    minBottomSideBearing: r.int16, // The minimum bottom side bearing measurement found in the font
                    yMaxExtent: r.int16,
                    caretSlopeRise: r.int16, // Caret slope (rise/run)
                    caretSlopeRun: r.int16,
                    caretOffset: r.int16, // Set value equal to 0 for nonslanted fonts
                    reserved: new r.Reserved(r.int16, 4),
                    metricDataFormat: r.int16, // Set to 0
                    numberOfMetrics: r.uint16 // Number of advance heights in the Vertical Metrics table
                });

                var VmtxEntry = new r.Struct({
                    advance: r.uint16, // The advance height of the glyph
                    bearing: r.int16 // The top sidebearing of the glyph
                });

                // Vertical Metrics Table
                var vmtx = new r.Struct({
                    metrics: new r.LazyArray(VmtxEntry, function (t) {
                        return t.parent.vhea.numberOfMetrics;
                    }),
                    bearings: new r.LazyArray(r.int16, function (t) {
                        return t.parent.maxp.numGlyphs - t.parent.vhea.numberOfMetrics;
                    })
                });

                var shortFrac = new r.Fixed(16, 'BE', 14);

                var Correspondence = new r.Struct({
                    fromCoord: shortFrac,
                    toCoord: shortFrac
                });

                var Segment = new r.Struct({
                    pairCount: r.uint16,
                    correspondence: new r.Array(Correspondence, 'pairCount')
                });

                var avar = new r.Struct({
                    version: r.fixed32,
                    axisCount: r.uint32,
                    segment: new r.Array(Segment, 'axisCount')
                });

                var UnboundedArrayAccessor = function () {
                    function UnboundedArrayAccessor(type, stream, parent) {
                        _classCallCheck(this, UnboundedArrayAccessor);

                        this.type = type;
                        this.stream = stream;
                        this.parent = parent;
                        this.base = this.stream.pos;
                        this._items = [];
                    }

                    UnboundedArrayAccessor.prototype.getItem = function getItem(index) {
                        if (this._items[index] == null) {
                            var pos = this.stream.pos;
                            this.stream.pos = this.base + this.type.size(null, this.parent) * index;
                            this._items[index] = this.type.decode(this.stream, this.parent);
                            this.stream.pos = pos;
                        }

                        return this._items[index];
                    };

                    UnboundedArrayAccessor.prototype.inspect = function inspect() {
                        return '[UnboundedArray ' + this.type.constructor.name + ']';
                    };

                    return UnboundedArrayAccessor;
                }();

                var UnboundedArray = function (_r$Array) {
                    _inherits(UnboundedArray, _r$Array);

                    function UnboundedArray(type) {
                        _classCallCheck(this, UnboundedArray);

                        return _possibleConstructorReturn(this, _r$Array.call(this, type, 0));
                    }

                    UnboundedArray.prototype.decode = function decode(stream, parent) {
                        return new UnboundedArrayAccessor(this.type, stream, parent);
                    };

                    return UnboundedArray;
                }(r.Array);

                var LookupTable = function LookupTable() {
                    var ValueType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : r.uint16;

                    // Helper class that makes internal structures invisible to pointers
                    var Shadow = function () {
                        function Shadow(type) {
                            _classCallCheck(this, Shadow);

                            this.type = type;
                        }

                        Shadow.prototype.decode = function decode(stream, ctx) {
                            ctx = ctx.parent.parent;
                            return this.type.decode(stream, ctx);
                        };

                        Shadow.prototype.size = function size(val, ctx) {
                            ctx = ctx.parent.parent;
                            return this.type.size(val, ctx);
                        };

                        Shadow.prototype.encode = function encode(stream, val, ctx) {
                            ctx = ctx.parent.parent;
                            return this.type.encode(stream, val, ctx);
                        };

                        return Shadow;
                    }();

                    ValueType = new Shadow(ValueType);

                    var BinarySearchHeader = new r.Struct({
                        unitSize: r.uint16,
                        nUnits: r.uint16,
                        searchRange: r.uint16,
                        entrySelector: r.uint16,
                        rangeShift: r.uint16
                    });

                    var LookupSegmentSingle = new r.Struct({
                        lastGlyph: r.uint16,
                        firstGlyph: r.uint16,
                        value: ValueType
                    });

                    var LookupSegmentArray = new r.Struct({
                        lastGlyph: r.uint16,
                        firstGlyph: r.uint16,
                        values: new r.Pointer(r.uint16, new r.Array(ValueType, function (t) {
                            return t.lastGlyph - t.firstGlyph + 1;
                        }), { type: 'parent' })
                    });

                    var LookupSingle = new r.Struct({
                        glyph: r.uint16,
                        value: ValueType
                    });

                    return new r.VersionedStruct(r.uint16, {
                        0: {
                            values: new UnboundedArray(ValueType) // length == number of glyphs maybe?
                        },
                        2: {
                            binarySearchHeader: BinarySearchHeader,
                            segments: new r.Array(LookupSegmentSingle, function (t) {
                                return t.binarySearchHeader.nUnits;
                            })
                        },
                        4: {
                            binarySearchHeader: BinarySearchHeader,
                            segments: new r.Array(LookupSegmentArray, function (t) {
                                return t.binarySearchHeader.nUnits;
                            })
                        },
                        6: {
                            binarySearchHeader: BinarySearchHeader,
                            segments: new r.Array(LookupSingle, function (t) {
                                return t.binarySearchHeader.nUnits;
                            })
                        },
                        8: {
                            firstGlyph: r.uint16,
                            count: r.uint16,
                            values: new r.Array(ValueType, 'count')
                        }
                    });
                };

                function StateTable() {
                    var entryData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                    var lookupType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : r.uint16;

                    var entry = _Object$assign({
                        newState: r.uint16,
                        flags: r.uint16
                    }, entryData);

                    var Entry = new r.Struct(entry);
                    var StateArray = new UnboundedArray(new r.Array(r.uint16, function (t) {
                        return t.nClasses;
                    }));

                    var StateHeader = new r.Struct({
                        nClasses: r.uint32,
                        classTable: new r.Pointer(r.uint32, new LookupTable(lookupType)),
                        stateArray: new r.Pointer(r.uint32, StateArray),
                        entryTable: new r.Pointer(r.uint32, new UnboundedArray(Entry))
                    });

                    return StateHeader;
                }

                // This is the old version of the StateTable structure
                function StateTable1() {
                    var entryData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                    var lookupType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : r.uint16;

                    var ClassLookupTable = new r.Struct({
                        version: function version() {
                            return 8;
                        },
                        // simulate LookupTable
                        firstGlyph: r.uint16,
                        values: new r.Array(r.uint8, r.uint16)
                    });

                    var entry = _Object$assign({
                        newStateOffset: r.uint16,
                        // convert offset to stateArray index
                        newState: function newState(t) {
                            return (t.newStateOffset - (t.parent.stateArray.base - t.parent._startOffset)) / t.parent.nClasses;
                        },
                        flags: r.uint16
                    }, entryData);

                    var Entry = new r.Struct(entry);
                    var StateArray = new UnboundedArray(new r.Array(r.uint8, function (t) {
                        return t.nClasses;
                    }));

                    var StateHeader1 = new r.Struct({
                        nClasses: r.uint16,
                        classTable: new r.Pointer(r.uint16, ClassLookupTable),
                        stateArray: new r.Pointer(r.uint16, StateArray),
                        entryTable: new r.Pointer(r.uint16, new UnboundedArray(Entry))
                    });

                    return StateHeader1;
                }

                var BslnSubtable = new r.VersionedStruct('format', {
                    0: { // Distance-based, no mapping
                        deltas: new r.Array(r.int16, 32)
                    },

                    1: { // Distance-based, with mapping
                        deltas: new r.Array(r.int16, 32),
                        mappingData: new LookupTable(r.uint16)
                    },

                    2: { // Control point-based, no mapping
                        standardGlyph: r.uint16,
                        controlPoints: new r.Array(r.uint16, 32)
                    },

                    3: { // Control point-based, with mapping
                        standardGlyph: r.uint16,
                        controlPoints: new r.Array(r.uint16, 32),
                        mappingData: new LookupTable(r.uint16)
                    }
                });

                var bsln = new r.Struct({
                    version: r.fixed32,
                    format: r.uint16,
                    defaultBaseline: r.uint16,
                    subtable: BslnSubtable
                });

                var Setting = new r.Struct({
                    setting: r.uint16,
                    nameIndex: r.int16,
                    name: function name(t) {
                        return t.parent.parent.parent.name.records.fontFeatures[t.nameIndex];
                    }
                });

                var FeatureName = new r.Struct({
                    feature: r.uint16,
                    nSettings: r.uint16,
                    settingTable: new r.Pointer(r.uint32, new r.Array(Setting, 'nSettings'), { type: 'parent' }),
                    featureFlags: new r.Bitfield(r.uint8, [null, null, null, null, null, null, 'hasDefault', 'exclusive']),
                    defaultSetting: r.uint8,
                    nameIndex: r.int16,
                    name: function name(t) {
                        return t.parent.parent.name.records.fontFeatures[t.nameIndex];
                    }
                });

                var feat = new r.Struct({
                    version: r.fixed32,
                    featureNameCount: r.uint16,
                    reserved1: new r.Reserved(r.uint16),
                    reserved2: new r.Reserved(r.uint32),
                    featureNames: new r.Array(FeatureName, 'featureNameCount')
                });

                var Axis$1 = new r.Struct({
                    axisTag: new r.String(4),
                    minValue: r.fixed32,
                    defaultValue: r.fixed32,
                    maxValue: r.fixed32,
                    flags: r.uint16,
                    nameID: r.uint16,
                    name: function name(t) {
                        return t.parent.parent.name.records.fontFeatures[t.nameID];
                    }
                });

                var Instance = new r.Struct({
                    nameID: r.uint16,
                    name: function name(t) {
                        return t.parent.parent.name.records.fontFeatures[t.nameID];
                    },
                    flags: r.uint16,
                    coord: new r.Array(r.fixed32, function (t) {
                        return t.parent.axisCount;
                    }),
                    postscriptNameID: new r.Optional(r.uint16, function (t) {
                        return t.parent.instanceSize - t._currentOffset > 0;
                    })
                });

                var fvar = new r.Struct({
                    version: r.fixed32,
                    offsetToData: r.uint16,
                    countSizePairs: r.uint16,
                    axisCount: r.uint16,
                    axisSize: r.uint16,
                    instanceCount: r.uint16,
                    instanceSize: r.uint16,
                    axis: new r.Array(Axis$1, 'axisCount'),
                    instance: new r.Array(Instance, 'instanceCount')
                });

                var shortFrac$1 = new r.Fixed(16, 'BE', 14);

                var Offset = function () {
                    function Offset() {
                        _classCallCheck(this, Offset);
                    }

                    Offset.decode = function decode(stream, parent) {
                        // In short format, offsets are multiplied by 2.
                        // This doesn't seem to be documented by Apple, but it
                        // is implemented this way in Freetype.
                        return parent.flags ? stream.readUInt32BE() : stream.readUInt16BE() * 2;
                    };

                    return Offset;
                }();

                var gvar = new r.Struct({
                    version: r.uint16,
                    reserved: new r.Reserved(r.uint16),
                    axisCount: r.uint16,
                    globalCoordCount: r.uint16,
                    globalCoords: new r.Pointer(r.uint32, new r.Array(new r.Array(shortFrac$1, 'axisCount'), 'globalCoordCount')),
                    glyphCount: r.uint16,
                    flags: r.uint16,
                    offsetToData: r.uint32,
                    offsets: new r.Array(new r.Pointer(Offset, 'void', { relativeTo: 'offsetToData', allowNull: false }), function (t) {
                        return t.glyphCount + 1;
                    })
                });

                var ClassTable$1 = new r.Struct({
                    length: r.uint16,
                    coverage: r.uint16,
                    subFeatureFlags: r.uint32,
                    stateTable: new StateTable1()
                });

                var WidthDeltaRecord = new r.Struct({
                    justClass: r.uint32,
                    beforeGrowLimit: r.fixed32,
                    beforeShrinkLimit: r.fixed32,
                    afterGrowLimit: r.fixed32,
                    afterShrinkLimit: r.fixed32,
                    growFlags: r.uint16,
                    shrinkFlags: r.uint16
                });

                var WidthDeltaCluster = new r.Array(WidthDeltaRecord, r.uint32);

                var ActionData = new r.VersionedStruct('actionType', {
                    0: { // Decomposition action
                        lowerLimit: r.fixed32,
                        upperLimit: r.fixed32,
                        order: r.uint16,
                        glyphs: new r.Array(r.uint16, r.uint16)
                    },

                    1: { // Unconditional add glyph action
                        addGlyph: r.uint16
                    },

                    2: { // Conditional add glyph action
                        substThreshold: r.fixed32,
                        addGlyph: r.uint16,
                        substGlyph: r.uint16
                    },

                    3: {}, // Stretch glyph action (no data, not supported by CoreText)

                    4: { // Ductile glyph action (not supported by CoreText)
                        variationAxis: r.uint32,
                        minimumLimit: r.fixed32,
                        noStretchValue: r.fixed32,
                        maximumLimit: r.fixed32
                    },

                    5: { // Repeated add glyph action
                        flags: r.uint16,
                        glyph: r.uint16
                    }
                });

                var Action = new r.Struct({
                    actionClass: r.uint16,
                    actionType: r.uint16,
                    actionLength: r.uint32,
                    actionData: ActionData,
                    padding: new r.Reserved(r.uint8, function (t) {
                        return t.actionLength - t._currentOffset;
                    })
                });

                var PostcompensationAction = new r.Array(Action, r.uint32);
                var PostCompensationTable = new r.Struct({
                    lookupTable: new LookupTable(new r.Pointer(r.uint16, PostcompensationAction))
                });

                var JustificationTable = new r.Struct({
                    classTable: new r.Pointer(r.uint16, ClassTable$1, { type: 'parent' }),
                    wdcOffset: r.uint16,
                    postCompensationTable: new r.Pointer(r.uint16, PostCompensationTable, { type: 'parent' }),
                    widthDeltaClusters: new LookupTable(new r.Pointer(r.uint16, WidthDeltaCluster, { type: 'parent', relativeTo: 'wdcOffset' }))
                });

                var just = new r.Struct({
                    version: r.uint32,
                    format: r.uint16,
                    horizontal: new r.Pointer(r.uint16, JustificationTable),
                    vertical: new r.Pointer(r.uint16, JustificationTable)
                });

                var LigatureData = {
                    action: r.uint16
                };

                var ContextualData = {
                    markIndex: r.uint16,
                    currentIndex: r.uint16
                };

                var InsertionData = {
                    currentInsertIndex: r.uint16,
                    markedInsertIndex: r.uint16
                };

                var SubstitutionTable = new r.Struct({
                    items: new UnboundedArray(new r.Pointer(r.uint32, new LookupTable()))
                });

                var SubtableData = new r.VersionedStruct('type', {
                    0: { // Indic Rearrangement Subtable
                        stateTable: new StateTable()
                    },

                    1: { // Contextual Glyph Substitution Subtable
                        stateTable: new StateTable(ContextualData),
                        substitutionTable: new r.Pointer(r.uint32, SubstitutionTable)
                    },

                    2: { // Ligature subtable
                        stateTable: new StateTable(LigatureData),
                        ligatureActions: new r.Pointer(r.uint32, new UnboundedArray(r.uint32)),
                        components: new r.Pointer(r.uint32, new UnboundedArray(r.uint16)),
                        ligatureList: new r.Pointer(r.uint32, new UnboundedArray(r.uint16))
                    },

                    4: { // Non-contextual Glyph Substitution Subtable
                        lookupTable: new LookupTable()
                    },

                    5: { // Glyph Insertion Subtable
                        stateTable: new StateTable(InsertionData),
                        insertionActions: new r.Pointer(r.uint32, new UnboundedArray(r.uint16))
                    }
                });

                var Subtable = new r.Struct({
                    length: r.uint32,
                    coverage: r.uint24,
                    type: r.uint8,
                    subFeatureFlags: r.uint32,
                    table: SubtableData,
                    padding: new r.Reserved(r.uint8, function (t) {
                        return t.length - t._currentOffset;
                    })
                });

                var FeatureEntry = new r.Struct({
                    featureType: r.uint16,
                    featureSetting: r.uint16,
                    enableFlags: r.uint32,
                    disableFlags: r.uint32
                });

                var MorxChain = new r.Struct({
                    defaultFlags: r.uint32,
                    chainLength: r.uint32,
                    nFeatureEntries: r.uint32,
                    nSubtables: r.uint32,
                    features: new r.Array(FeatureEntry, 'nFeatureEntries'),
                    subtables: new r.Array(Subtable, 'nSubtables')
                });

                var morx = new r.Struct({
                    version: r.uint16,
                    unused: new r.Reserved(r.uint16),
                    nChains: r.uint32,
                    chains: new r.Array(MorxChain, 'nChains')
                });

                var OpticalBounds = new r.Struct({
                    left: r.int16,
                    top: r.int16,
                    right: r.int16,
                    bottom: r.int16
                });

                var opbd = new r.Struct({
                    version: r.fixed32,
                    format: r.uint16,
                    lookupTable: new LookupTable(OpticalBounds)
                });

                var tables = {};
                // Required Tables
                tables.cmap = cmap;
                tables.head = head;
                tables.hhea = hhea;
                tables.hmtx = hmtx;
                tables.maxp = maxp;
                tables.name = NameTable;
                tables['OS/2'] = OS2;
                tables.post = post;

                // TrueType Outlines
                tables.fpgm = fpgm;
                tables.loca = loca;
                tables.prep = prep;
                tables['cvt '] = cvt;
                tables.glyf = glyf;

                // PostScript Outlines
                tables['CFF '] = CFFFont;
                tables['CFF2'] = CFFFont;
                tables.VORG = VORG;

                // Bitmap Glyphs
                tables.EBLC = EBLC;
                tables.CBLC = tables.EBLC;
                tables.sbix = sbix;
                tables.COLR = COLR;
                tables.CPAL = CPAL;

                // Advanced OpenType Tables
                tables.BASE = BASE;
                tables.GDEF = GDEF;
                tables.GPOS = GPOS;
                tables.GSUB = GSUB;
                tables.JSTF = JSTF;

                // OpenType variations tables
                tables.HVAR = HVAR;

                // Other OpenType Tables
                tables.DSIG = DSIG;
                tables.gasp = gasp;
                tables.hdmx = hdmx;
                tables.kern = kern;
                tables.LTSH = LTSH;
                tables.PCLT = PCLT;
                tables.VDMX = VDMX;
                tables.vhea = vhea;
                tables.vmtx = vmtx;

                // Apple Advanced Typography Tables
                tables.avar = avar;
                tables.bsln = bsln;
                tables.feat = feat;
                tables.fvar = fvar;
                tables.gvar = gvar;
                tables.just = just;
                tables.morx = morx;
                tables.opbd = opbd;

                var TableEntry = new r.Struct({
                    tag: new r.String(4),
                    checkSum: r.uint32,
                    offset: new r.Pointer(r.uint32, 'void', { type: 'global' }),
                    length: r.uint32
                });

                var Directory = new r.Struct({
                    tag: new r.String(4),
                    numTables: r.uint16,
                    searchRange: r.uint16,
                    entrySelector: r.uint16,
                    rangeShift: r.uint16,
                    tables: new r.Array(TableEntry, 'numTables')
                });

                Directory.process = function () {
                    var tables = {};
                    for (var _iterator = this.tables, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
                        var _ref;

                        if (_isArray) {
                            if (_i >= _iterator.length) break;
                            _ref = _iterator[_i++];
                        } else {
                            _i = _iterator.next();
                            if (_i.done) break;
                            _ref = _i.value;
                        }

                        var table = _ref;

                        tables[table.tag] = table;
                    }

                    this.tables = tables;
                };

                Directory.preEncode = function (stream) {
                    var tables$$ = [];
                    for (var tag in this.tables) {
                        var table = this.tables[tag];
                        if (table) {
                            tables$$.push({
                                tag: tag,
                                checkSum: 0,
                                offset: new r.VoidPointer(tables[tag], table),
                                length: tables[tag].size(table)
                            });
                        }
                    }

                    this.tag = 'true';
                    this.numTables = tables$$.length;
                    this.tables = tables$$;

                    this.searchRange = Math.floor(Math.log(this.numTables) / Math.LN2) * 16;
                    this.entrySelector = Math.floor(this.searchRange / Math.LN2);
                    this.rangeShift = this.numTables * 16 - this.searchRange;
                };

                function binarySearch(arr, cmp) {
                    var min = 0;
                    var max = arr.length - 1;
                    while (min <= max) {
                        var mid = min + max >> 1;
                        var res = cmp(arr[mid]);

                        if (res < 0) {
                            max = mid - 1;
                        } else if (res > 0) {
                            min = mid + 1;
                        } else {
                            return mid;
                        }
                    }

                    return -1;
                }

                function range(index, end) {
                    var range = [];
                    while (index < end) {
                        range.push(index++);
                    }
                    return range;
                }

                var _class$1;
                function _applyDecoratedDescriptor$1(target, property, decorators, descriptor, context) {
                    var desc = {};
                    Object['ke' + 'ys'](descriptor).forEach(function (key) {
                        desc[key] = descriptor[key];
                    });
                    desc.enumerable = !!desc.enumerable;
                    desc.configurable = !!desc.configurable;

                    if ('value' in desc || desc.initializer) {
                        desc.writable = true;
                    }

                    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
                        return decorator(target, property, desc) || desc;
                    }, desc);

                    if (context && desc.initializer !== void 0) {
                        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
                        desc.initializer = undefined;
                    }

                    if (desc.initializer === void 0) {
                        Object['define' + 'Property'](target, property, desc);
                        desc = null;
                    }

                    return desc;
                }

                // iconv-lite is an optional dependency.
                try {
                    var iconv = __webpack_require__(87);
                } catch (err) {}

                var CmapProcessor = (_class$1 = function () {
                    function CmapProcessor(cmapTable) {
                        _classCallCheck(this, CmapProcessor);

                        // Attempt to find a Unicode cmap first
                        this.encoding = null;
                        this.cmap = this.findSubtable(cmapTable, [
                            // 32-bit subtables
                            [3, 10], [0, 6], [0, 4],

                            // 16-bit subtables
                            [3, 1], [0, 3], [0, 2], [0, 1], [0, 0]]);

                        // If not unicode cmap was found, and iconv-lite is installed,
                        // take the first table with a supported encoding.
                        if (!this.cmap && iconv) {
                            for (var _iterator = cmapTable.tables, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
                                var _ref;

                                if (_isArray) {
                                    if (_i >= _iterator.length) break;
                                    _ref = _iterator[_i++];
                                } else {
                                    _i = _iterator.next();
                                    if (_i.done) break;
                                    _ref = _i.value;
                                }

                                var cmap = _ref;

                                var encoding = getEncoding(cmap.platformID, cmap.encodingID, cmap.table.language - 1);
                                if (iconv.encodingExists(encoding)) {
                                    this.cmap = cmap.table;
                                    this.encoding = encoding;
                                }
                            }
                        }

                        if (!this.cmap) {
                            throw new Error("Could not find a supported cmap table");
                        }

                        this.uvs = this.findSubtable(cmapTable, [[0, 5]]);
                        if (this.uvs && this.uvs.version !== 14) {
                            this.uvs = null;
                        }
                    }

                    CmapProcessor.prototype.findSubtable = function findSubtable(cmapTable, pairs) {
                        for (var _iterator2 = pairs, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
                            var _ref2;

                            if (_isArray2) {
                                if (_i2 >= _iterator2.length) break;
                                _ref2 = _iterator2[_i2++];
                            } else {
                                _i2 = _iterator2.next();
                                if (_i2.done) break;
                                _ref2 = _i2.value;
                            }

                            var _ref3 = _ref2,
                                platformID = _ref3[0],
                                encodingID = _ref3[1];

                            for (var _iterator3 = cmapTable.tables, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
                                var _ref4;

                                if (_isArray3) {
                                    if (_i3 >= _iterator3.length) break;
                                    _ref4 = _iterator3[_i3++];
                                } else {
                                    _i3 = _iterator3.next();
                                    if (_i3.done) break;
                                    _ref4 = _i3.value;
                                }

                                var cmap = _ref4;

                                if (cmap.platformID === platformID && cmap.encodingID === encodingID) {
                                    return cmap.table;
                                }
                            }
                        }

                        return null;
                    };

                    CmapProcessor.prototype.lookup = function lookup(codepoint, variationSelector) {
                        // If there is no Unicode cmap in this font, we need to re-encode
                        // the codepoint in the encoding that the cmap supports.
                        if (this.encoding) {
                            var buf = iconv.encode(_String$fromCodePoint(codepoint), this.encoding);
                            codepoint = 0;
                            for (var i = 0; i < buf.length; i++) {
                                codepoint = codepoint << 8 | buf[i];
                            }

                            // Otherwise, try to get a Unicode variation selector for this codepoint if one is provided.
                        } else if (variationSelector) {
                            var gid = this.getVariationSelector(codepoint, variationSelector);
                            if (gid) {
                                return gid;
                            }
                        }

                        var cmap = this.cmap;
                        switch (cmap.version) {
                            case 0:
                                return cmap.codeMap.get(codepoint) || 0;

                            case 4:
                            {
                                var min = 0;
                                var max = cmap.segCount - 1;
                                while (min <= max) {
                                    var mid = min + max >> 1;

                                    if (codepoint < cmap.startCode.get(mid)) {
                                        max = mid - 1;
                                    } else if (codepoint > cmap.endCode.get(mid)) {
                                        min = mid + 1;
                                    } else {
                                        var rangeOffset = cmap.idRangeOffset.get(mid);
                                        var _gid = void 0;

                                        if (rangeOffset === 0) {
                                            _gid = codepoint + cmap.idDelta.get(mid);
                                        } else {
                                            var index = rangeOffset / 2 + (codepoint - cmap.startCode.get(mid)) - (cmap.segCount - mid);
                                            _gid = cmap.glyphIndexArray.get(index) || 0;
                                            if (_gid !== 0) {
                                                _gid += cmap.idDelta.get(mid);
                                            }
                                        }

                                        return _gid & 0xffff;
                                    }
                                }

                                return 0;
                            }

                            case 8:
                                throw new Error('TODO: cmap format 8');

                            case 6:
                            case 10:
                                return cmap.glyphIndices.get(codepoint - cmap.firstCode) || 0;

                            case 12:
                            case 13:
                            {
                                var _min = 0;
                                var _max = cmap.nGroups - 1;
                                while (_min <= _max) {
                                    var _mid = _min + _max >> 1;
                                    var group = cmap.groups.get(_mid);

                                    if (codepoint < group.startCharCode) {
                                        _max = _mid - 1;
                                    } else if (codepoint > group.endCharCode) {
                                        _min = _mid + 1;
                                    } else {
                                        if (cmap.version === 12) {
                                            return group.glyphID + (codepoint - group.startCharCode);
                                        } else {
                                            return group.glyphID;
                                        }
                                    }
                                }

                                return 0;
                            }

                            case 14:
                                throw new Error('TODO: cmap format 14');

                            default:
                                throw new Error('Unknown cmap format ' + cmap.version);
                        }
                    };

                    CmapProcessor.prototype.getVariationSelector = function getVariationSelector(codepoint, variationSelector) {
                        if (!this.uvs) {
                            return 0;
                        }

                        var selectors = this.uvs.varSelectors.toArray();
                        var i = binarySearch(selectors, function (x) {
                            return variationSelector - x.varSelector;
                        });
                        var sel = selectors[i];

                        if (i !== -1 && sel.defaultUVS) {
                            i = binarySearch(sel.defaultUVS, function (x) {
                                return codepoint < x.startUnicodeValue ? -1 : codepoint > x.startUnicodeValue + x.additionalCount ? +1 : 0;
                            });
                        }

                        if (i !== -1 && sel.nonDefaultUVS) {
                            i = binarySearch(sel.nonDefaultUVS, function (x) {
                                return codepoint - x.unicodeValue;
                            });
                            if (i !== -1) {
                                return sel.nonDefaultUVS[i].glyphID;
                            }
                        }

                        return 0;
                    };

                    CmapProcessor.prototype.getCharacterSet = function getCharacterSet() {
                        var cmap = this.cmap;
                        switch (cmap.version) {
                            case 0:
                                return range(0, cmap.codeMap.length);

                            case 4:
                            {
                                var res = [];
                                var endCodes = cmap.endCode.toArray();
                                for (var i = 0; i < endCodes.length; i++) {
                                    var tail = endCodes[i] + 1;
                                    var start = cmap.startCode.get(i);
                                    res.push.apply(res, range(start, tail));
                                }

                                return res;
                            }

                            case 8:
                                throw new Error('TODO: cmap format 8');

                            case 6:
                            case 10:
                                return range(cmap.firstCode, cmap.firstCode + cmap.glyphIndices.length);

                            case 12:
                            case 13:
                            {
                                var _res = [];
                                for (var _iterator4 = cmap.groups.toArray(), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
                                    var _ref5;

                                    if (_isArray4) {
                                        if (_i4 >= _iterator4.length) break;
                                        _ref5 = _iterator4[_i4++];
                                    } else {
                                        _i4 = _iterator4.next();
                                        if (_i4.done) break;
                                        _ref5 = _i4.value;
                                    }

                                    var group = _ref5;

                                    _res.push.apply(_res, range(group.startCharCode, group.endCharCode + 1));
                                }

                                return _res;
                            }

                            case 14:
                                throw new Error('TODO: cmap format 14');

                            default:
                                throw new Error('Unknown cmap format ' + cmap.version);
                        }
                    };

                    CmapProcessor.prototype.codePointsForGlyph = function codePointsForGlyph(gid) {
                        var cmap = this.cmap;
                        switch (cmap.version) {
                            case 0:
                            {
                                var res = [];
                                for (var i = 0; i < 256; i++) {
                                    if (cmap.codeMap.get(i) === gid) {
                                        res.push(i);
                                    }
                                }

                                return res;
                            }

                            case 4:
                            {
                                var _res2 = [];
                                for (var _i5 = 0; _i5 < cmap.segCount; _i5++) {
                                    var end = cmap.endCode.get(_i5);
                                    var start = cmap.startCode.get(_i5);
                                    var rangeOffset = cmap.idRangeOffset.get(_i5);
                                    var delta = cmap.idDelta.get(_i5);

                                    for (var c = start; c <= end; c++) {
                                        var g = 0;
                                        if (rangeOffset === 0) {
                                            g = c + delta;
                                        } else {
                                            var index = rangeOffset / 2 + (c - start) - (cmap.segCount - _i5);
                                            g = cmap.glyphIndexArray.get(index) || 0;
                                            if (g !== 0) {
                                                g += delta;
                                            }
                                        }

                                        if (g === gid) {
                                            _res2.push(c);
                                        }
                                    }
                                }

                                return _res2;
                            }

                            case 12:
                            {
                                var _res3 = [];
                                for (var _iterator5 = cmap.groups.toArray(), _isArray5 = Array.isArray(_iterator5), _i6 = 0, _iterator5 = _isArray5 ? _iterator5 : _getIterator(_iterator5);;) {
                                    var _ref6;

                                    if (_isArray5) {
                                        if (_i6 >= _iterator5.length) break;
                                        _ref6 = _iterator5[_i6++];
                                    } else {
                                        _i6 = _iterator5.next();
                                        if (_i6.done) break;
                                        _ref6 = _i6.value;
                                    }

                                    var group = _ref6;

                                    if (gid >= group.glyphID && gid <= group.glyphID + (group.endCharCode - group.startCharCode)) {
                                        _res3.push(group.startCharCode + (gid - group.glyphID));
                                    }
                                }

                                return _res3;
                            }

                            case 13:
                            {
                                var _res4 = [];
                                for (var _iterator6 = cmap.groups.toArray(), _isArray6 = Array.isArray(_iterator6), _i7 = 0, _iterator6 = _isArray6 ? _iterator6 : _getIterator(_iterator6);;) {
                                    var _ref7;

                                    if (_isArray6) {
                                        if (_i7 >= _iterator6.length) break;
                                        _ref7 = _iterator6[_i7++];
                                    } else {
                                        _i7 = _iterator6.next();
                                        if (_i7.done) break;
                                        _ref7 = _i7.value;
                                    }

                                    var _group = _ref7;

                                    if (gid === _group.glyphID) {
                                        _res4.push.apply(_res4, range(_group.startCharCode, _group.endCharCode + 1));
                                    }
                                }

                                return _res4;
                            }

                            default:
                                throw new Error('Unknown cmap format ' + cmap.version);
                        }
                    };

                    return CmapProcessor;
                }(), (_applyDecoratedDescriptor$1(_class$1.prototype, 'getCharacterSet', [cache], _Object$getOwnPropertyDescriptor(_class$1.prototype, 'getCharacterSet'), _class$1.prototype), _applyDecoratedDescriptor$1(_class$1.prototype, 'codePointsForGlyph', [cache], _Object$getOwnPropertyDescriptor(_class$1.prototype, 'codePointsForGlyph'), _class$1.prototype)), _class$1);

                var KernProcessor = function () {
                    function KernProcessor(font) {
                        _classCallCheck(this, KernProcessor);

                        this.kern = font.kern;
                    }

                    KernProcessor.prototype.process = function process(glyphs, positions) {
                        for (var glyphIndex = 0; glyphIndex < glyphs.length - 1; glyphIndex++) {
                            var left = glyphs[glyphIndex].id;
                            var right = glyphs[glyphIndex + 1].id;
                            positions[glyphIndex].xAdvance += this.getKerning(left, right);
                        }
                    };

                    KernProcessor.prototype.getKerning = function getKerning(left, right) {
                        var res = 0;

                        for (var _iterator = this.kern.tables, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
                            var _ref;

                            if (_isArray) {
                                if (_i >= _iterator.length) break;
                                _ref = _iterator[_i++];
                            } else {
                                _i = _iterator.next();
                                if (_i.done) break;
                                _ref = _i.value;
                            }

                            var table = _ref;

                            if (table.coverage.crossStream) {
                                continue;
                            }

                            switch (table.version) {
                                case 0:
                                    if (!table.coverage.horizontal) {
                                        continue;
                                    }

                                    break;
                                case 1:
                                    if (table.coverage.vertical || table.coverage.variation) {
                                        continue;
                                    }

                                    break;
                                default:
                                    throw new Error('Unsupported kerning table version ' + table.version);
                            }

                            var val = 0;
                            var s = table.subtable;
                            switch (table.format) {
                                case 0:
                                    var pairIdx = binarySearch(s.pairs, function (pair) {
                                        return left - pair.left || right - pair.right;
                                    });

                                    if (pairIdx >= 0) {
                                        val = s.pairs[pairIdx].value;
                                    }

                                    break;

                                case 2:
                                    var leftOffset = 0,
                                        rightOffset = 0;
                                    if (left >= s.leftTable.firstGlyph && left < s.leftTable.firstGlyph + s.leftTable.nGlyphs) {
                                        leftOffset = s.leftTable.offsets[left - s.leftTable.firstGlyph];
                                    } else {
                                        leftOffset = s.array.off;
                                    }

                                    if (right >= s.rightTable.firstGlyph && right < s.rightTable.firstGlyph + s.rightTable.nGlyphs) {
                                        rightOffset = s.rightTable.offsets[right - s.rightTable.firstGlyph];
                                    }

                                    var index = (leftOffset + rightOffset - s.array.off) / 2;
                                    val = s.array.values.get(index);
                                    break;

                                case 3:
                                    if (left >= s.glyphCount || right >= s.glyphCount) {
                                        return 0;
                                    }

                                    val = s.kernValue[s.kernIndex[s.leftClass[left] * s.rightClassCount + s.rightClass[right]]];
                                    break;

                                default:
                                    throw new Error('Unsupported kerning sub-table format ' + table.format);
                            }

                            // Microsoft supports the override flag, which resets the result
                            // Otherwise, the sum of the results from all subtables is returned
                            if (table.coverage.override) {
                                res = val;
                            } else {
                                res += val;
                            }
                        }

                        return res;
                    };

                    return KernProcessor;
                }();

                /**
                 * This class is used when GPOS does not define 'mark' or 'mkmk' features
                 * for positioning marks relative to base glyphs. It uses the unicode
                 * combining class property to position marks.
                 *
                 * Based on code from Harfbuzz, thanks!
                 * https://github.com/behdad/harfbuzz/blob/master/src/hb-ot-shape-fallback.cc
                 */

                var UnicodeLayoutEngine = function () {
                    function UnicodeLayoutEngine(font) {
                        _classCallCheck(this, UnicodeLayoutEngine);

                        this.font = font;
                    }

                    UnicodeLayoutEngine.prototype.positionGlyphs = function positionGlyphs(glyphs, positions) {
                        // find each base + mark cluster, and position the marks relative to the base
                        var clusterStart = 0;
                        var clusterEnd = 0;
                        for (var index = 0; index < glyphs.length; index++) {
                            var glyph = glyphs[index];
                            if (glyph.isMark) {
                                // TODO: handle ligatures
                                clusterEnd = index;
                            } else {
                                if (clusterStart !== clusterEnd) {
                                    this.positionCluster(glyphs, positions, clusterStart, clusterEnd);
                                }

                                clusterStart = clusterEnd = index;
                            }
                        }

                        if (clusterStart !== clusterEnd) {
                            this.positionCluster(glyphs, positions, clusterStart, clusterEnd);
                        }

                        return positions;
                    };

                    UnicodeLayoutEngine.prototype.positionCluster = function positionCluster(glyphs, positions, clusterStart, clusterEnd) {
                        var base = glyphs[clusterStart];
                        var baseBox = base.cbox.copy();

                        // adjust bounding box for ligature glyphs
                        if (base.codePoints.length > 1) {
                            // LTR. TODO: RTL support.
                            baseBox.minX += (base.codePoints.length - 1) * baseBox.width / base.codePoints.length;
                        }

                        var xOffset = -positions[clusterStart].xAdvance;
                        var yOffset = 0;
                        var yGap = this.font.unitsPerEm / 16;

                        // position each of the mark glyphs relative to the base glyph
                        for (var index = clusterStart + 1; index <= clusterEnd; index++) {
                            var mark = glyphs[index];
                            var markBox = mark.cbox;
                            var position = positions[index];

                            var combiningClass = this.getCombiningClass(mark.codePoints[0]);

                            if (combiningClass !== 'Not_Reordered') {
                                position.xOffset = position.yOffset = 0;

                                // x positioning
                                switch (combiningClass) {
                                    case 'Double_Above':
                                    case 'Double_Below':
                                        // LTR. TODO: RTL support.
                                        position.xOffset += baseBox.minX - markBox.width / 2 - markBox.minX;
                                        break;

                                    case 'Attached_Below_Left':
                                    case 'Below_Left':
                                    case 'Above_Left':
                                        // left align
                                        position.xOffset += baseBox.minX - markBox.minX;
                                        break;

                                    case 'Attached_Above_Right':
                                    case 'Below_Right':
                                    case 'Above_Right':
                                        // right align
                                        position.xOffset += baseBox.maxX - markBox.width - markBox.minX;
                                        break;

                                    default:
                                        // Attached_Below, Attached_Above, Below, Above, other
                                        // center align
                                        position.xOffset += baseBox.minX + (baseBox.width - markBox.width) / 2 - markBox.minX;
                                }

                                // y positioning
                                switch (combiningClass) {
                                    case 'Double_Below':
                                    case 'Below_Left':
                                    case 'Below':
                                    case 'Below_Right':
                                    case 'Attached_Below_Left':
                                    case 'Attached_Below':
                                        // add a small gap between the glyphs if they are not attached
                                        if (combiningClass === 'Attached_Below_Left' || combiningClass === 'Attached_Below') {
                                            baseBox.minY += yGap;
                                        }

                                        position.yOffset = -baseBox.minY - markBox.maxY;
                                        baseBox.minY += markBox.height;
                                        break;

                                    case 'Double_Above':
                                    case 'Above_Left':
                                    case 'Above':
                                    case 'Above_Right':
                                    case 'Attached_Above':
                                    case 'Attached_Above_Right':
                                        // add a small gap between the glyphs if they are not attached
                                        if (combiningClass === 'Attached_Above' || combiningClass === 'Attached_Above_Right') {
                                            baseBox.maxY += yGap;
                                        }

                                        position.yOffset = baseBox.maxY - markBox.minY;
                                        baseBox.maxY += markBox.height;
                                        break;
                                }

                                position.xAdvance = position.yAdvance = 0;
                                position.xOffset += xOffset;
                                position.yOffset += yOffset;
                            } else {
                                xOffset -= position.xAdvance;
                                yOffset -= position.yAdvance;
                            }
                        }

                        return;
                    };

                    UnicodeLayoutEngine.prototype.getCombiningClass = function getCombiningClass(codePoint) {
                        var combiningClass = unicode.getCombiningClass(codePoint);

                        // Thai / Lao need some per-character work
                        if ((codePoint & ~0xff) === 0x0e00) {
                            if (combiningClass === 'Not_Reordered') {
                                switch (codePoint) {
                                    case 0x0e31:
                                    case 0x0e34:
                                    case 0x0e35:
                                    case 0x0e36:
                                    case 0x0e37:
                                    case 0x0e47:
                                    case 0x0e4c:
                                    case 0x0e3d:
                                    case 0x0e4e:
                                        return 'Above_Right';

                                    case 0x0eb1:
                                    case 0x0eb4:
                                    case 0x0eb5:
                                    case 0x0eb6:
                                    case 0x0eb7:
                                    case 0x0ebb:
                                    case 0x0ecc:
                                    case 0x0ecd:
                                        return 'Above';

                                    case 0x0ebc:
                                        return 'Below';
                                }
                            } else if (codePoint === 0x0e3a) {
                                // virama
                                return 'Below_Right';
                            }
                        }

                        switch (combiningClass) {
                            // Hebrew

                            case 'CCC10': // sheva
                            case 'CCC11': // hataf segol
                            case 'CCC12': // hataf patah
                            case 'CCC13': // hataf qamats
                            case 'CCC14': // hiriq
                            case 'CCC15': // tsere
                            case 'CCC16': // segol
                            case 'CCC17': // patah
                            case 'CCC18': // qamats
                            case 'CCC20': // qubuts
                            case 'CCC22':
                                // meteg
                                return 'Below';

                            case 'CCC23':
                                // rafe
                                return 'Attached_Above';

                            case 'CCC24':
                                // shin dot
                                return 'Above_Right';

                            case 'CCC25': // sin dot
                            case 'CCC19':
                                // holam
                                return 'Above_Left';

                            case 'CCC26':
                                // point varika
                                return 'Above';

                            case 'CCC21':
                                // dagesh
                                break;

                            // Arabic and Syriac

                            case 'CCC27': // fathatan
                            case 'CCC28': // dammatan
                            case 'CCC30': // fatha
                            case 'CCC31': // damma
                            case 'CCC33': // shadda
                            case 'CCC34': // sukun
                            case 'CCC35': // superscript alef
                            case 'CCC36':
                                // superscript alaph
                                return 'Above';

                            case 'CCC29': // kasratan
                            case 'CCC32':
                                // kasra
                                return 'Below';

                            // Thai

                            case 'CCC103':
                                // sara u / sara uu
                                return 'Below_Right';

                            case 'CCC107':
                                // mai
                                return 'Above_Right';

                            // Lao

                            case 'CCC118':
                                // sign u / sign uu
                                return 'Below';

                            case 'CCC122':
                                // mai
                                return 'Above';

                            // Tibetan

                            case 'CCC129': // sign aa
                            case 'CCC132':
                                // sign u
                                return 'Below';

                            case 'CCC130':
                                // sign i
                                return 'Above';
                        }

                        return combiningClass;
                    };

                    return UnicodeLayoutEngine;
                }();

                /**
                 * Represents a glyph bounding box
                 */
                var BBox = function () {
                    function BBox() {
                        var minX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;
                        var minY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;
                        var maxX = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -Infinity;
                        var maxY = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -Infinity;

                        _classCallCheck(this, BBox);

                        /**
                         * The minimum X position in the bounding box
                         * @type {number}
                         */
                        this.minX = minX;

                        /**
                         * The minimum Y position in the bounding box
                         * @type {number}
                         */
                        this.minY = minY;

                        /**
                         * The maxmimum X position in the bounding box
                         * @type {number}
                         */
                        this.maxX = maxX;

                        /**
                         * The maxmimum Y position in the bounding box
                         * @type {number}
                         */
                        this.maxY = maxY;
                    }

                    /**
                     * The width of the bounding box
                     * @type {number}
                     */


                    BBox.prototype.addPoint = function addPoint(x, y) {
                        if (Math.abs(x) !== Infinity) {
                            if (x < this.minX) {
                                this.minX = x;
                            }

                            if (x > this.maxX) {
                                this.maxX = x;
                            }
                        }

                        if (Math.abs(y) !== Infinity) {
                            if (y < this.minY) {
                                this.minY = y;
                            }

                            if (y > this.maxY) {
                                this.maxY = y;
                            }
                        }
                    };

                    BBox.prototype.copy = function copy() {
                        return new BBox(this.minX, this.minY, this.maxX, this.maxY);
                    };

                    _createClass(BBox, [{
                        key: "width",
                        get: function get() {
                            return this.maxX - this.minX;
                        }

                        /**
                         * The height of the bounding box
                         * @type {number}
                         */

                    }, {
                        key: "height",
                        get: function get() {
                            return this.maxY - this.minY;
                        }
                    }]);

                    return BBox;
                }();

                // This maps the Unicode Script property to an OpenType script tag
                // Data from http://www.microsoft.com/typography/otspec/scripttags.htm
                // and http://www.unicode.org/Public/UNIDATA/PropertyValueAliases.txt.
                var UNICODE_SCRIPTS = {
                    Caucasian_Albanian: 'aghb',
                    Arabic: 'arab',
                    Imperial_Aramaic: 'armi',
                    Armenian: 'armn',
                    Avestan: 'avst',
                    Balinese: 'bali',
                    Bamum: 'bamu',
                    Bassa_Vah: 'bass',
                    Batak: 'batk',
                    Bengali: ['bng2', 'beng'],
                    Bopomofo: 'bopo',
                    Brahmi: 'brah',
                    Braille: 'brai',
                    Buginese: 'bugi',
                    Buhid: 'buhd',
                    Chakma: 'cakm',
                    Canadian_Aboriginal: 'cans',
                    Carian: 'cari',
                    Cham: 'cham',
                    Cherokee: 'cher',
                    Coptic: 'copt',
                    Cypriot: 'cprt',
                    Cyrillic: 'cyrl',
                    Devanagari: ['dev2', 'deva'],
                    Deseret: 'dsrt',
                    Duployan: 'dupl',
                    Egyptian_Hieroglyphs: 'egyp',
                    Elbasan: 'elba',
                    Ethiopic: 'ethi',
                    Georgian: 'geor',
                    Glagolitic: 'glag',
                    Gothic: 'goth',
                    Grantha: 'gran',
                    Greek: 'grek',
                    Gujarati: ['gjr2', 'gujr'],
                    Gurmukhi: ['gur2', 'guru'],
                    Hangul: 'hang',
                    Han: 'hani',
                    Hanunoo: 'hano',
                    Hebrew: 'hebr',
                    Hiragana: 'hira',
                    Pahawh_Hmong: 'hmng',
                    Katakana_Or_Hiragana: 'hrkt',
                    Old_Italic: 'ital',
                    Javanese: 'java',
                    Kayah_Li: 'kali',
                    Katakana: 'kana',
                    Kharoshthi: 'khar',
                    Khmer: 'khmr',
                    Khojki: 'khoj',
                    Kannada: ['knd2', 'knda'],
                    Kaithi: 'kthi',
                    Tai_Tham: 'lana',
                    Lao: 'lao ',
                    Latin: 'latn',
                    Lepcha: 'lepc',
                    Limbu: 'limb',
                    Linear_A: 'lina',
                    Linear_B: 'linb',
                    Lisu: 'lisu',
                    Lycian: 'lyci',
                    Lydian: 'lydi',
                    Mahajani: 'mahj',
                    Mandaic: 'mand',
                    Manichaean: 'mani',
                    Mende_Kikakui: 'mend',
                    Meroitic_Cursive: 'merc',
                    Meroitic_Hieroglyphs: 'mero',
                    Malayalam: ['mlm2', 'mlym'],
                    Modi: 'modi',
                    Mongolian: 'mong',
                    Mro: 'mroo',
                    Meetei_Mayek: 'mtei',
                    Myanmar: ['mym2', 'mymr'],
                    Old_North_Arabian: 'narb',
                    Nabataean: 'nbat',
                    Nko: 'nko ',
                    Ogham: 'ogam',
                    Ol_Chiki: 'olck',
                    Old_Turkic: 'orkh',
                    Oriya: ['ory2', 'orya'],
                    Osmanya: 'osma',
                    Palmyrene: 'palm',
                    Pau_Cin_Hau: 'pauc',
                    Old_Permic: 'perm',
                    Phags_Pa: 'phag',
                    Inscriptional_Pahlavi: 'phli',
                    Psalter_Pahlavi: 'phlp',
                    Phoenician: 'phnx',
                    Miao: 'plrd',
                    Inscriptional_Parthian: 'prti',
                    Rejang: 'rjng',
                    Runic: 'runr',
                    Samaritan: 'samr',
                    Old_South_Arabian: 'sarb',
                    Saurashtra: 'saur',
                    Shavian: 'shaw',
                    Sharada: 'shrd',
                    Siddham: 'sidd',
                    Khudawadi: 'sind',
                    Sinhala: 'sinh',
                    Sora_Sompeng: 'sora',
                    Sundanese: 'sund',
                    Syloti_Nagri: 'sylo',
                    Syriac: 'syrc',
                    Tagbanwa: 'tagb',
                    Takri: 'takr',
                    Tai_Le: 'tale',
                    New_Tai_Lue: 'talu',
                    Tamil: ['tml2', 'taml'],
                    Tai_Viet: 'tavt',
                    Telugu: ['tel2', 'telu'],
                    Tifinagh: 'tfng',
                    Tagalog: 'tglg',
                    Thaana: 'thaa',
                    Thai: 'thai',
                    Tibetan: 'tibt',
                    Tirhuta: 'tirh',
                    Ugaritic: 'ugar',
                    Vai: 'vai ',
                    Warang_Citi: 'wara',
                    Old_Persian: 'xpeo',
                    Cuneiform: 'xsux',
                    Yi: 'yi  ',
                    Inherited: 'zinh',
                    Common: 'zyyy',
                    Unknown: 'zzzz'
                };

                var OPENTYPE_SCRIPTS = {};
                for (var script in UNICODE_SCRIPTS) {
                    var tag = UNICODE_SCRIPTS[script];
                    if (Array.isArray(tag)) {
                        for (var _iterator = tag, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
                            var _ref;

                            if (_isArray) {
                                if (_i >= _iterator.length) break;
                                _ref = _iterator[_i++];
                            } else {
                                _i = _iterator.next();
                                if (_i.done) break;
                                _ref = _i.value;
                            }

                            var t = _ref;

                            OPENTYPE_SCRIPTS[t] = script;
                        }
                    } else {
                        OPENTYPE_SCRIPTS[tag] = script;
                    }
                }

                function fromOpenType(tag) {
                    return OPENTYPE_SCRIPTS[tag];
                }

                function forString(string) {
                    var len = string.length;
                    var idx = 0;
                    while (idx < len) {
                        var code = string.charCodeAt(idx++);

                        // Check if this is a high surrogate
                        if (0xd800 <= code && code <= 0xdbff && idx < len) {
                            var next = string.charCodeAt(idx);

                            // Check if this is a low surrogate
                            if (0xdc00 <= next && next <= 0xdfff) {
                                idx++;
                                code = ((code & 0x3FF) << 10) + (next & 0x3FF) + 0x10000;
                            }
                        }

                        var _script = unicode.getScript(code);
                        if (_script !== 'Common' && _script !== 'Inherited' && _script !== 'Unknown') {
                            return UNICODE_SCRIPTS[_script];
                        }
                    }

                    return UNICODE_SCRIPTS.Unknown;
                }

                function forCodePoints(codePoints) {
                    for (var i = 0; i < codePoints.length; i++) {
                        var codePoint = codePoints[i];
                        var _script2 = unicode.getScript(codePoint);
                        if (_script2 !== 'Common' && _script2 !== 'Inherited' && _script2 !== 'Unknown') {
                            return UNICODE_SCRIPTS[_script2];
                        }
                    }

                    return UNICODE_SCRIPTS.Unknown;
                }

                // The scripts in this map are written from right to left
                var RTL = {
                    arab: true, // Arabic
                    hebr: true, // Hebrew
                    syrc: true, // Syriac
                    thaa: true, // Thaana
                    cprt: true, // Cypriot Syllabary
                    khar: true, // Kharosthi
                    phnx: true, // Phoenician
                    'nko ': true, // N'Ko
                    lydi: true, // Lydian
                    avst: true, // Avestan
                    armi: true, // Imperial Aramaic
                    phli: true, // Inscriptional Pahlavi
                    prti: true, // Inscriptional Parthian
                    sarb: true, // Old South Arabian
                    orkh: true, // Old Turkic, Orkhon Runic
                    samr: true, // Samaritan
                    mand: true, // Mandaic, Mandaean
                    merc: true, // Meroitic Cursive
                    mero: true, // Meroitic Hieroglyphs

                    // Unicode 7.0 (not listed on http://www.microsoft.com/typography/otspec/scripttags.htm)
                    mani: true, // Manichaean
                    mend: true, // Mende Kikakui
                    nbat: true, // Nabataean
                    narb: true, // Old North Arabian
                    palm: true, // Palmyrene
                    phlp: true // Psalter Pahlavi
                };

                function direction(script) {
                    if (RTL[script]) {
                        return 'rtl';
                    }

                    return 'ltr';
                }

                /**
                 * Represents a run of Glyph and GlyphPosition objects.
                 * Returned by the font layout method.
                 */

                var GlyphRun = function () {
                    function GlyphRun(glyphs, features, script, language, direction$$) {
                        _classCallCheck(this, GlyphRun);

                        /**
                         * An array of Glyph objects in the run
                         * @type {Glyph[]}
                         */
                        this.glyphs = glyphs;

                        /**
                         * An array of GlyphPosition objects for each glyph in the run
                         * @type {GlyphPosition[]}
                         */
                        this.positions = null;

                        /**
                         * The script that was requested for shaping. This was either passed in or detected automatically.
                         * @type {string}
                         */
                        this.script = script;

                        /**
                         * The language requested for shaping, as passed in. If `null`, the default language for the
                         * script was used.
                         * @type {string}
                         */
                        this.language = language || null;

                        /**
                         * The direction requested for shaping, as passed in (either ltr or rtl).
                         * If `null`, the default direction of the script is used.
                         * @type {string}
                         */
                        this.direction = direction$$ || direction(script);

                        /**
                         * The features requested during shaping. This is a combination of user
                         * specified features and features chosen by the shaper.
                         * @type {object}
                         */
                        this.features = {};

                        // Convert features to an object
                        if (Array.isArray(features)) {
                            for (var _iterator = features, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
                                var _ref;

                                if (_isArray) {
                                    if (_i >= _iterator.length) break;
                                    _ref = _iterator[_i++];
                                } else {
                                    _i = _iterator.next();
                                    if (_i.done) break;
                                    _ref = _i.value;
                                }

                                var tag = _ref;

                                this.features[tag] = true;
                            }
                        } else if ((typeof features === 'undefined' ? 'undefined' : _typeof(features)) === 'object') {
                            this.features = features;
                        }
                    }

                    /**
                     * The total advance width of the run.
                     * @type {number}
                     */


                    _createClass(GlyphRun, [{
                        key: 'advanceWidth',
                        get: function get() {
                            var width = 0;
                            for (var _iterator2 = this.positions, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
                                var _ref2;

                                if (_isArray2) {
                                    if (_i2 >= _iterator2.length) break;
                                    _ref2 = _iterator2[_i2++];
                                } else {
                                    _i2 = _iterator2.next();
                                    if (_i2.done) break;
                                    _ref2 = _i2.value;
                                }

                                var position = _ref2;

                                width += position.xAdvance;
                            }

                            return width;
                        }

                        /**
                         * The total advance height of the run.
                         * @type {number}
                         */

                    }, {
                        key: 'advanceHeight',
                        get: function get() {
                            var height = 0;
                            for (var _iterator3 = this.positions, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
                                var _ref3;

                                if (_isArray3) {
                                    if (_i3 >= _iterator3.length) break;
                                    _ref3 = _iterator3[_i3++];
                                } else {
                                    _i3 = _iterator3.next();
                                    if (_i3.done) break;
                                    _ref3 = _i3.value;
                                }

                                var position = _ref3;

                                height += position.yAdvance;
                            }

                            return height;
                        }

                        /**
                         * The bounding box containing all glyphs in the run.
                         * @type {BBox}
                         */

                    }, {
                        key: 'bbox',
                        get: function get() {
                            var bbox = new BBox();

                            var x = 0;
                            var y = 0;
                            for (var index = 0; index < this.glyphs.length; index++) {
                                var glyph = this.glyphs[index];
                                var p = this.positions[index];
                                var b = glyph.bbox;

                                bbox.addPoint(b.minX + x + p.xOffset, b.minY + y + p.yOffset);
                                bbox.addPoint(b.maxX + x + p.xOffset, b.maxY + y + p.yOffset);

                                x += p.xAdvance;
                                y += p.yAdvance;
                            }

                            return bbox;
                        }
                    }]);

                    return GlyphRun;
                }();

                /**
                 * Represents positioning information for a glyph in a GlyphRun.
                 */
                var GlyphPosition = function GlyphPosition() {
                    var xAdvance = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                    var yAdvance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                    var xOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
                    var yOffset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

                    _classCallCheck(this, GlyphPosition);

                    /**
                     * The amount to move the virtual pen in the X direction after rendering this glyph.
                     * @type {number}
                     */
                    this.xAdvance = xAdvance;

                    /**
                     * The amount to move the virtual pen in the Y direction after rendering this glyph.
                     * @type {number}
                     */
                    this.yAdvance = yAdvance;

                    /**
                     * The offset from the pen position in the X direction at which to render this glyph.
                     * @type {number}
                     */
                    this.xOffset = xOffset;

                    /**
                     * The offset from the pen position in the Y direction at which to render this glyph.
                     * @type {number}
                     */
                    this.yOffset = yOffset;
                };

                // see https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html
                // and /System/Library/Frameworks/CoreText.framework/Versions/A/Headers/SFNTLayoutTypes.h on a Mac
                var features = {
                    allTypographicFeatures: {
                        code: 0,
                        exclusive: false,
                        allTypeFeatures: 0
                    },
                    ligatures: {
                        code: 1,
                        exclusive: false,
                        requiredLigatures: 0,
                        commonLigatures: 2,
                        rareLigatures: 4,
                        // logos: 6
                        rebusPictures: 8,
                        diphthongLigatures: 10,
                        squaredLigatures: 12,
                        abbrevSquaredLigatures: 14,
                        symbolLigatures: 16,
                        contextualLigatures: 18,
                        historicalLigatures: 20
                    },
                    cursiveConnection: {
                        code: 2,
                        exclusive: true,
                        unconnected: 0,
                        partiallyConnected: 1,
                        cursive: 2
                    },
                    letterCase: {
                        code: 3,
                        exclusive: true
                    },
                    // upperAndLowerCase: 0          # deprecated
                    // allCaps: 1                    # deprecated
                    // allLowerCase: 2               # deprecated
                    // smallCaps: 3                  # deprecated
                    // initialCaps: 4                # deprecated
                    // initialCapsAndSmallCaps: 5    # deprecated
                    verticalSubstitution: {
                        code: 4,
                        exclusive: false,
                        substituteVerticalForms: 0
                    },
                    linguisticRearrangement: {
                        code: 5,
                        exclusive: false,
                        linguisticRearrangement: 0
                    },
                    numberSpacing: {
                        code: 6,
                        exclusive: true,
                        monospacedNumbers: 0,
                        proportionalNumbers: 1,
                        thirdWidthNumbers: 2,
                        quarterWidthNumbers: 3
                    },
                    smartSwash: {
                        code: 8,
                        exclusive: false,
                        wordInitialSwashes: 0,
                        wordFinalSwashes: 2,
                        // lineInitialSwashes: 4
                        // lineFinalSwashes: 6
                        nonFinalSwashes: 8
                    },
                    diacritics: {
                        code: 9,
                        exclusive: true,
                        showDiacritics: 0,
                        hideDiacritics: 1,
                        decomposeDiacritics: 2
                    },
                    verticalPosition: {
                        code: 10,
                        exclusive: true,
                        normalPosition: 0,
                        superiors: 1,
                        inferiors: 2,
                        ordinals: 3,
                        scientificInferiors: 4
                    },
                    fractions: {
                        code: 11,
                        exclusive: true,
                        noFractions: 0,
                        verticalFractions: 1,
                        diagonalFractions: 2
                    },
                    overlappingCharacters: {
                        code: 13,
                        exclusive: false,
                        preventOverlap: 0
                    },
                    typographicExtras: {
                        code: 14,
                        exclusive: false,
                        // hyphensToEmDash: 0
                        // hyphenToEnDash: 2
                        slashedZero: 4
                    },
                    // formInterrobang: 6
                    // smartQuotes: 8
                    // periodsToEllipsis: 10
                    mathematicalExtras: {
                        code: 15,
                        exclusive: false,
                        // hyphenToMinus: 0
                        // asteristoMultiply: 2
                        // slashToDivide: 4
                        // inequalityLigatures: 6
                        // exponents: 8
                        mathematicalGreek: 10
                    },
                    ornamentSets: {
                        code: 16,
                        exclusive: true,
                        noOrnaments: 0,
                        dingbats: 1,
                        piCharacters: 2,
                        fleurons: 3,
                        decorativeBorders: 4,
                        internationalSymbols: 5,
                        mathSymbols: 6
                    },
                    characterAlternatives: {
                        code: 17,
                        exclusive: true,
                        noAlternates: 0
                    },
                    // user defined options
                    designComplexity: {
                        code: 18,
                        exclusive: true,
                        designLevel1: 0,
                        designLevel2: 1,
                        designLevel3: 2,
                        designLevel4: 3,
                        designLevel5: 4
                    },
                    styleOptions: {
                        code: 19,
                        exclusive: true,
                        noStyleOptions: 0,
                        displayText: 1,
                        engravedText: 2,
                        illuminatedCaps: 3,
                        titlingCaps: 4,
                        tallCaps: 5
                    },
                    characterShape: {
                        code: 20,
                        exclusive: true,
                        traditionalCharacters: 0,
                        simplifiedCharacters: 1,
                        JIS1978Characters: 2,
                        JIS1983Characters: 3,
                        JIS1990Characters: 4,
                        traditionalAltOne: 5,
                        traditionalAltTwo: 6,
                        traditionalAltThree: 7,
                        traditionalAltFour: 8,
                        traditionalAltFive: 9,
                        expertCharacters: 10,
                        JIS2004Characters: 11,
                        hojoCharacters: 12,
                        NLCCharacters: 13,
                        traditionalNamesCharacters: 14
                    },
                    numberCase: {
                        code: 21,
                        exclusive: true,
                        lowerCaseNumbers: 0,
                        upperCaseNumbers: 1
                    },
                    textSpacing: {
                        code: 22,
                        exclusive: true,
                        proportionalText: 0,
                        monospacedText: 1,
                        halfWidthText: 2,
                        thirdWidthText: 3,
                        quarterWidthText: 4,
                        altProportionalText: 5,
                        altHalfWidthText: 6
                    },
                    transliteration: {
                        code: 23,
                        exclusive: true,
                        noTransliteration: 0
                    },
                    // hanjaToHangul: 1
                    // hiraganaToKatakana: 2
                    // katakanaToHiragana: 3
                    // kanaToRomanization: 4
                    // romanizationToHiragana: 5
                    // romanizationToKatakana: 6
                    // hanjaToHangulAltOne: 7
                    // hanjaToHangulAltTwo: 8
                    // hanjaToHangulAltThree: 9
                    annotation: {
                        code: 24,
                        exclusive: true,
                        noAnnotation: 0,
                        boxAnnotation: 1,
                        roundedBoxAnnotation: 2,
                        circleAnnotation: 3,
                        invertedCircleAnnotation: 4,
                        parenthesisAnnotation: 5,
                        periodAnnotation: 6,
                        romanNumeralAnnotation: 7,
                        diamondAnnotation: 8,
                        invertedBoxAnnotation: 9,
                        invertedRoundedBoxAnnotation: 10
                    },
                    kanaSpacing: {
                        code: 25,
                        exclusive: true,
                        fullWidthKana: 0,
                        proportionalKana: 1
                    },
                    ideographicSpacing: {
                        code: 26,
                        exclusive: true,
                        fullWidthIdeographs: 0,
                        proportionalIdeographs: 1,
                        halfWidthIdeographs: 2
                    },
                    unicodeDecomposition: {
                        code: 27,
                        exclusive: false,
                        canonicalComposition: 0,
                        compatibilityComposition: 2,
                        transcodingComposition: 4
                    },
                    rubyKana: {
                        code: 28,
                        exclusive: false,
                        // noRubyKana: 0     # deprecated - use rubyKanaOff instead
                        // rubyKana: 1     # deprecated - use rubyKanaOn instead
                        rubyKana: 2
                    },
                    CJKSymbolAlternatives: {
                        code: 29,
                        exclusive: true,
                        noCJKSymbolAlternatives: 0,
                        CJKSymbolAltOne: 1,
                        CJKSymbolAltTwo: 2,
                        CJKSymbolAltThree: 3,
                        CJKSymbolAltFour: 4,
                        CJKSymbolAltFive: 5
                    },
                    ideographicAlternatives: {
                        code: 30,
                        exclusive: true,
                        noIdeographicAlternatives: 0,
                        ideographicAltOne: 1,
                        ideographicAltTwo: 2,
                        ideographicAltThree: 3,
                        ideographicAltFour: 4,
                        ideographicAltFive: 5
                    },
                    CJKVerticalRomanPlacement: {
                        code: 31,
                        exclusive: true,
                        CJKVerticalRomanCentered: 0,
                        CJKVerticalRomanHBaseline: 1
                    },
                    italicCJKRoman: {
                        code: 32,
                        exclusive: false,
                        // noCJKItalicRoman: 0     # deprecated - use CJKItalicRomanOff instead
                        // CJKItalicRoman: 1     # deprecated - use CJKItalicRomanOn instead
                        CJKItalicRoman: 2
                    },
                    caseSensitiveLayout: {
                        code: 33,
                        exclusive: false,
                        caseSensitiveLayout: 0,
                        caseSensitiveSpacing: 2
                    },
                    alternateKana: {
                        code: 34,
                        exclusive: false,
                        alternateHorizKana: 0,
                        alternateVertKana: 2
                    },
                    stylisticAlternatives: {
                        code: 35,
                        exclusive: false,
                        noStylisticAlternates: 0,
                        stylisticAltOne: 2,
                        stylisticAltTwo: 4,
                        stylisticAltThree: 6,
                        stylisticAltFour: 8,
                        stylisticAltFive: 10,
                        stylisticAltSix: 12,
                        stylisticAltSeven: 14,
                        stylisticAltEight: 16,
                        stylisticAltNine: 18,
                        stylisticAltTen: 20,
                        stylisticAltEleven: 22,
                        stylisticAltTwelve: 24,
                        stylisticAltThirteen: 26,
                        stylisticAltFourteen: 28,
                        stylisticAltFifteen: 30,
                        stylisticAltSixteen: 32,
                        stylisticAltSeventeen: 34,
                        stylisticAltEighteen: 36,
                        stylisticAltNineteen: 38,
                        stylisticAltTwenty: 40
                    },
                    contextualAlternates: {
                        code: 36,
                        exclusive: false,
                        contextualAlternates: 0,
                        swashAlternates: 2,
                        contextualSwashAlternates: 4
                    },
                    lowerCase: {
                        code: 37,
                        exclusive: true,
                        defaultLowerCase: 0,
                        lowerCaseSmallCaps: 1,
                        lowerCasePetiteCaps: 2
                    },
                    upperCase: {
                        code: 38,
                        exclusive: true,
                        defaultUpperCase: 0,
                        upperCaseSmallCaps: 1,
                        upperCasePetiteCaps: 2
                    },
                    languageTag: { // indices into ltag table
                        code: 39,
                        exclusive: true
                    },
                    CJKRomanSpacing: {
                        code: 103,
                        exclusive: true,
                        halfWidthCJKRoman: 0,
                        proportionalCJKRoman: 1,
                        defaultCJKRoman: 2,
                        fullWidthCJKRoman: 3
                    }
                };

                var feature = function feature(name, selector) {
                    return [features[name].code, features[name][selector]];
                };

                var OTMapping = {
                    rlig: feature('ligatures', 'requiredLigatures'),
                    clig: feature('ligatures', 'contextualLigatures'),
                    dlig: feature('ligatures', 'rareLigatures'),
                    hlig: feature('ligatures', 'historicalLigatures'),
                    liga: feature('ligatures', 'commonLigatures'),
                    hist: feature('ligatures', 'historicalLigatures'), // ??

                    smcp: feature('lowerCase', 'lowerCaseSmallCaps'),
                    pcap: feature('lowerCase', 'lowerCasePetiteCaps'),

                    frac: feature('fractions', 'diagonalFractions'),
                    dnom: feature('fractions', 'diagonalFractions'), // ??
                    numr: feature('fractions', 'diagonalFractions'), // ??
                    afrc: feature('fractions', 'verticalFractions'),
                    // aalt
                    // abvf, abvm, abvs, akhn, blwf, blwm, blws, cfar, cjct, cpsp, falt, isol, jalt, ljmo, mset?
                    // ltra, ltrm, nukt, pref, pres, pstf, psts, rand, rkrf, rphf, rtla, rtlm, size, tjmo, tnum?
                    // unic, vatu, vhal, vjmo, vpal, vrt2
                    // dist -> trak table?
                    // kern, vkrn -> kern table
                    // lfbd + opbd + rtbd -> opbd table?
                    // mark, mkmk -> acnt table?
                    // locl -> languageTag + ltag table

                    case: feature('caseSensitiveLayout', 'caseSensitiveLayout'), // also caseSensitiveSpacing
                    ccmp: feature('unicodeDecomposition', 'canonicalComposition'), // compatibilityComposition?
                    cpct: feature('CJKVerticalRomanPlacement', 'CJKVerticalRomanCentered'), // guess..., probably not given below
                    valt: feature('CJKVerticalRomanPlacement', 'CJKVerticalRomanCentered'),
                    swsh: feature('contextualAlternates', 'swashAlternates'),
                    cswh: feature('contextualAlternates', 'contextualSwashAlternates'),
                    curs: feature('cursiveConnection', 'cursive'), // ??
                    c2pc: feature('upperCase', 'upperCasePetiteCaps'),
                    c2sc: feature('upperCase', 'upperCaseSmallCaps'),

                    init: feature('smartSwash', 'wordInitialSwashes'), // ??
                    fin2: feature('smartSwash', 'wordFinalSwashes'), // ??
                    medi: feature('smartSwash', 'nonFinalSwashes'), // ??
                    med2: feature('smartSwash', 'nonFinalSwashes'), // ??
                    fin3: feature('smartSwash', 'wordFinalSwashes'), // ??
                    fina: feature('smartSwash', 'wordFinalSwashes'), // ??

                    pkna: feature('kanaSpacing', 'proportionalKana'),
                    half: feature('textSpacing', 'halfWidthText'), // also HalfWidthCJKRoman, HalfWidthIdeographs?
                    halt: feature('textSpacing', 'altHalfWidthText'),

                    hkna: feature('alternateKana', 'alternateHorizKana'),
                    vkna: feature('alternateKana', 'alternateVertKana'),
                    // hngl: feature 'transliteration', 'hanjaToHangulSelector' # deprecated

                    ital: feature('italicCJKRoman', 'CJKItalicRoman'),
                    lnum: feature('numberCase', 'upperCaseNumbers'),
                    onum: feature('numberCase', 'lowerCaseNumbers'),
                    mgrk: feature('mathematicalExtras', 'mathematicalGreek'),

                    // nalt: not enough info. what type of annotation?
                    // ornm: ditto, which ornament style?

                    calt: feature('contextualAlternates', 'contextualAlternates'), // or more?
                    vrt2: feature('verticalSubstitution', 'substituteVerticalForms'), // oh... below?
                    vert: feature('verticalSubstitution', 'substituteVerticalForms'),
                    tnum: feature('numberSpacing', 'monospacedNumbers'),
                    pnum: feature('numberSpacing', 'proportionalNumbers'),
                    sups: feature('verticalPosition', 'superiors'),
                    subs: feature('verticalPosition', 'inferiors'),
                    ordn: feature('verticalPosition', 'ordinals'),
                    pwid: feature('textSpacing', 'proportionalText'),
                    hwid: feature('textSpacing', 'halfWidthText'),
                    qwid: feature('textSpacing', 'quarterWidthText'), // also QuarterWidthNumbers?
                    twid: feature('textSpacing', 'thirdWidthText'), // also ThirdWidthNumbers?
                    fwid: feature('textSpacing', 'proportionalText'), //??
                    palt: feature('textSpacing', 'altProportionalText'),
                    trad: feature('characterShape', 'traditionalCharacters'),
                    smpl: feature('characterShape', 'simplifiedCharacters'),
                    jp78: feature('characterShape', 'JIS1978Characters'),
                    jp83: feature('characterShape', 'JIS1983Characters'),
                    jp90: feature('characterShape', 'JIS1990Characters'),
                    jp04: feature('characterShape', 'JIS2004Characters'),
                    expt: feature('characterShape', 'expertCharacters'),
                    hojo: feature('characterShape', 'hojoCharacters'),
                    nlck: feature('characterShape', 'NLCCharacters'),
                    tnam: feature('characterShape', 'traditionalNamesCharacters'),
                    ruby: feature('rubyKana', 'rubyKana'),
                    titl: feature('styleOptions', 'titlingCaps'),
                    zero: feature('typographicExtras', 'slashedZero'),

                    ss01: feature('stylisticAlternatives', 'stylisticAltOne'),
                    ss02: feature('stylisticAlternatives', 'stylisticAltTwo'),
                    ss03: feature('stylisticAlternatives', 'stylisticAltThree'),
                    ss04: feature('stylisticAlternatives', 'stylisticAltFour'),
                    ss05: feature('stylisticAlternatives', 'stylisticAltFive'),
                    ss06: feature('stylisticAlternatives', 'stylisticAltSix'),
                    ss07: feature('stylisticAlternatives', 'stylisticAltSeven'),
                    ss08: feature('stylisticAlternatives', 'stylisticAltEight'),
                    ss09: feature('stylisticAlternatives', 'stylisticAltNine'),
                    ss10: feature('stylisticAlternatives', 'stylisticAltTen'),
                    ss11: feature('stylisticAlternatives', 'stylisticAltEleven'),
                    ss12: feature('stylisticAlternatives', 'stylisticAltTwelve'),
                    ss13: feature('stylisticAlternatives', 'stylisticAltThirteen'),
                    ss14: feature('stylisticAlternatives', 'stylisticAltFourteen'),
                    ss15: feature('stylisticAlternatives', 'stylisticAltFifteen'),
                    ss16: feature('stylisticAlternatives', 'stylisticAltSixteen'),
                    ss17: feature('stylisticAlternatives', 'stylisticAltSeventeen'),
                    ss18: feature('stylisticAlternatives', 'stylisticAltEighteen'),
                    ss19: feature('stylisticAlternatives', 'stylisticAltNineteen'),
                    ss20: feature('stylisticAlternatives', 'stylisticAltTwenty')
                };

                // salt: feature 'stylisticAlternatives', 'stylisticAltOne' # hmm, which one to choose

                // Add cv01-cv99 features
                for (var i = 1; i <= 99; i++) {
                    OTMapping['cv' + ('00' + i).slice(-2)] = [features.characterAlternatives.code, i];
                }

                // create inverse mapping
                var AATMapping = {};
                for (var ot in OTMapping) {
                    var aat = OTMapping[ot];
                    if (AATMapping[aat[0]] == null) {
                        AATMapping[aat[0]] = {};
                    }

                    AATMapping[aat[0]][aat[1]] = ot;
                }

                // Maps an array of OpenType features to AAT features
                // in the form of {featureType:{featureSetting:true}}
                function mapOTToAAT(features) {
                    var res = {};
                    for (var k in features) {
                        var r = void 0;
                        if (r = OTMapping[k]) {
                            if (res[r[0]] == null) {
                                res[r[0]] = {};
                            }

                            res[r[0]][r[1]] = features[k];
                        }
                    }

                    return res;
                }

                // Maps strings in a [featureType, featureSetting]
                // to their equivalent number codes
                function mapFeatureStrings(f) {
                    var type = f[0],
                        setting = f[1];

                    if (isNaN(type)) {
                        var typeCode = features[type] && features[type].code;
                    } else {
                        var typeCode = type;
                    }

                    if (isNaN(setting)) {
                        var settingCode = features[type] && features[type][setting];
                    } else {
                        var settingCode = setting;
                    }

                    return [typeCode, settingCode];
                }

                // Maps AAT features to an array of OpenType features
                // Supports both arrays in the form of [[featureType, featureSetting]]
                // and objects in the form of {featureType:{featureSetting:true}}
                // featureTypes and featureSettings can be either strings or number codes
                function mapAATToOT(features) {
                    var res = {};
                    if (Array.isArray(features)) {
                        for (var k = 0; k < features.length; k++) {
                            var r = void 0;
                            var f = mapFeatureStrings(features[k]);
                            if (r = AATMapping[f[0]] && AATMapping[f[0]][f[1]]) {
                                res[r] = true;
                            }
                        }
                    } else if ((typeof features === 'undefined' ? 'undefined' : _typeof(features)) === 'object') {
                        for (var type in features) {
                            var _feature = features[type];
                            for (var setting in _feature) {
                                var _r = void 0;
                                var _f = mapFeatureStrings([type, setting]);
                                if (_feature[setting] && (_r = AATMapping[_f[0]] && AATMapping[_f[0]][_f[1]])) {
                                    res[_r] = true;
                                }
                            }
                        }
                    }

                    return _Object$keys(res);
                }

                var _class$3;
                function _applyDecoratedDescriptor$3(target, property, decorators, descriptor, context) {
                    var desc = {};
                    Object['ke' + 'ys'](descriptor).forEach(function (key) {
                        desc[key] = descriptor[key];
                    });
                    desc.enumerable = !!desc.enumerable;
                    desc.configurable = !!desc.configurable;

                    if ('value' in desc || desc.initializer) {
                        desc.writable = true;
                    }

                    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
                        return decorator(target, property, desc) || desc;
                    }, desc);

                    if (context && desc.initializer !== void 0) {
                        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
                        desc.initializer = undefined;
                    }

                    if (desc.initializer === void 0) {
                        Object['define' + 'Property'](target, property, desc);
                        desc = null;
                    }

                    return desc;
                }

                var AATLookupTable = (_class$3 = function () {
                    function AATLookupTable(table) {
                        _classCallCheck(this, AATLookupTable);

                        this.table = table;
                    }

                    AATLookupTable.prototype.lookup = function lookup(glyph) {
                        switch (this.table.version) {
                            case 0:
                                // simple array format
                                return this.table.values.getItem(glyph);

                            case 2: // segment format
                            case 4:
                            {
                                var min = 0;
                                var max = this.table.binarySearchHeader.nUnits - 1;

                                while (min <= max) {
                                    var mid = min + max >> 1;
                                    var seg = this.table.segments[mid];

                                    // special end of search value
                                    if (seg.firstGlyph === 0xffff) {
                                        return null;
                                    }

                                    if (glyph < seg.firstGlyph) {
                                        max = mid - 1;
                                    } else if (glyph > seg.lastGlyph) {
                                        min = mid + 1;
                                    } else {
                                        if (this.table.version === 2) {
                                            return seg.value;
                                        } else {
                                            return seg.values[glyph - seg.firstGlyph];
                                        }
                                    }
                                }

                                return null;
                            }

                            case 6:
                            {
                                // lookup single
                                var _min = 0;
                                var _max = this.table.binarySearchHeader.nUnits - 1;

                                while (_min <= _max) {
                                    var mid = _min + _max >> 1;
                                    var seg = this.table.segments[mid];

                                    // special end of search value
                                    if (seg.glyph === 0xffff) {
                                        return null;
                                    }

                                    if (glyph < seg.glyph) {
                                        _max = mid - 1;
                                    } else if (glyph > seg.glyph) {
                                        _min = mid + 1;
                                    } else {
                                        return seg.value;
                                    }
                                }

                                return null;
                            }

                            case 8:
                                // lookup trimmed
                                return this.table.values[glyph - this.table.firstGlyph];

                            default:
                                throw new Error('Unknown lookup table format: ' + this.table.version);
                        }
                    };

                    AATLookupTable.prototype.glyphsForValue = function glyphsForValue(classValue) {
                        var res = [];

                        switch (this.table.version) {
                            case 2: // segment format
                            case 4:
                            {
                                for (var _iterator = this.table.segments, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
                                    var _ref;

                                    if (_isArray) {
                                        if (_i >= _iterator.length) break;
                                        _ref = _iterator[_i++];
                                    } else {
                                        _i = _iterator.next();
                                        if (_i.done) break;
                                        _ref = _i.value;
                                    }

                                    var segment = _ref;

                                    if (this.table.version === 2 && segment.value === classValue) {
                                        res.push.apply(res, range(segment.firstGlyph, segment.lastGlyph + 1));
                                    } else {
                                        for (var index = 0; index < segment.values.length; index++) {
                                            if (segment.values[index] === classValue) {
                                                res.push(segment.firstGlyph + index);
                                            }
                                        }
                                    }
                                }

                                break;
                            }

                            case 6:
                            {
                                // lookup single
                                for (var _iterator2 = this.table.segments, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
                                    var _ref2;

                                    if (_isArray2) {
                                        if (_i2 >= _iterator2.length) break;
                                        _ref2 = _iterator2[_i2++];
                                    } else {
                                        _i2 = _iterator2.next();
                                        if (_i2.done) break;
                                        _ref2 = _i2.value;
                                    }

                                    var _segment = _ref2;

                                    if (_segment.value === classValue) {
                                        res.push(_segment.glyph);
                                    }
                                }

                                break;
                            }

                            case 8:
                            {
                                // lookup trimmed
                                for (var i = 0; i < this.table.values.length; i++) {
                                    if (this.table.values[i] === classValue) {
                                        res.push(this.table.firstGlyph + i);
                                    }
                                }

                                break;
                            }

                            default:
                                throw new Error('Unknown lookup table format: ' + this.table.version);
                        }

                        return res;
                    };

                    return AATLookupTable;
                }(), (_applyDecoratedDescriptor$3(_class$3.prototype, 'glyphsForValue', [cache], _Object$getOwnPropertyDescriptor(_class$3.prototype, 'glyphsForValue'), _class$3.prototype)), _class$3);

                var START_OF_TEXT_STATE = 0;
                var END_OF_TEXT_CLASS = 0;
                var OUT_OF_BOUNDS_CLASS = 1;
                var DELETED_GLYPH_CLASS = 2;
                var DONT_ADVANCE = 0x4000;

                var AATStateMachine = function () {
                    function AATStateMachine(stateTable) {
                        _classCallCheck(this, AATStateMachine);

                        this.stateTable = stateTable;
                        this.lookupTable = new AATLookupTable(stateTable.classTable);
                    }

                    AATStateMachine.prototype.process = function process(glyphs, reverse, processEntry) {
                        var currentState = START_OF_TEXT_STATE; // START_OF_LINE_STATE is used for kashida glyph insertions sometimes I think?
                        var index = reverse ? glyphs.length - 1 : 0;
                        var dir = reverse ? -1 : 1;

                        while (dir === 1 && index <= glyphs.length || dir === -1 && index >= -1) {
                            var glyph = null;
                            var classCode = OUT_OF_BOUNDS_CLASS;
                            var shouldAdvance = true;

                            if (index === glyphs.length || index === -1) {
                                classCode = END_OF_TEXT_CLASS;
                            } else {
                                glyph = glyphs[index];
                                if (glyph.id === 0xffff) {
                                    // deleted glyph
                                    classCode = DELETED_GLYPH_CLASS;
                                } else {
                                    classCode = this.lookupTable.lookup(glyph.id);
                                    if (classCode == null) {
                                        classCode = OUT_OF_BOUNDS_CLASS;
                                    }
                                }
                            }

                            var row = this.stateTable.stateArray.getItem(currentState);
                            var entryIndex = row[classCode];
                            var entry = this.stateTable.entryTable.getItem(entryIndex);

                            if (classCode !== END_OF_TEXT_CLASS && classCode !== DELETED_GLYPH_CLASS) {
                                processEntry(glyph, entry, index);
                                shouldAdvance = !(entry.flags & DONT_ADVANCE);
                            }

                            currentState = entry.newState;
                            if (shouldAdvance) {
                                index += dir;
                            }
                        }

                        return glyphs;
                    };

                    /**
                     * Performs a depth-first traversal of the glyph strings
                     * represented by the state machine.
                     */


                    AATStateMachine.prototype.traverse = function traverse(opts) {
                        var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                        var visited = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new _Set();

                        if (visited.has(state)) {
                            return;
                        }

                        visited.add(state);

                        var _stateTable = this.stateTable,
                            nClasses = _stateTable.nClasses,
                            stateArray = _stateTable.stateArray,
                            entryTable = _stateTable.entryTable;

                        var row = stateArray.getItem(state);

                        // Skip predefined classes
                        for (var classCode = 4; classCode < nClasses; classCode++) {
                            var entryIndex = row[classCode];
                            var entry = entryTable.getItem(entryIndex);

                            // Try all glyphs in the class
                            for (var _iterator = this.lookupTable.glyphsForValue(classCode), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
                                var _ref;

                                if (_isArray) {
                                    if (_i >= _iterator.length) break;
                                    _ref = _iterator[_i++];
                                } else {
                                    _i = _iterator.next();
                                    if (_i.done) break;
                                    _ref = _i.value;
                                }

                                var glyph = _ref;

                                if (opts.enter) {
                                    opts.enter(glyph, entry);
                                }

                                if (entry.newState !== 0) {
                                    this.traverse(opts, entry.newState, visited);
                                }

                                if (opts.exit) {
                                    opts.exit(glyph, entry);
                                }
                            }
                        }
                    };

                    return AATStateMachine;
                }();

                var _class$2;
                function _applyDecoratedDescriptor$2(target, property, decorators, descriptor, context) {
                    var desc = {};
                    Object['ke' + 'ys'](descriptor).forEach(function (key) {
                        desc[key] = descriptor[key];
                    });
                    desc.enumerable = !!desc.enumerable;
                    desc.configurable = !!desc.configurable;

                    if ('value' in desc || desc.initializer) {
                        desc.writable = true;
                    }

                    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
                        return decorator(target, property, desc) || desc;
                    }, desc);

                    if (context && desc.initializer !== void 0) {
                        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
                        desc.initializer = undefined;
                    }

                    if (desc.initializer === void 0) {
                        Object['define' + 'Property'](target, property, desc);
                        desc = null;
                    }

                    return desc;
                }

                // indic replacement flags
                var MARK_FIRST = 0x8000;
                var MARK_LAST = 0x2000;
                var VERB = 0x000F;

                // contextual substitution and glyph insertion flag
                var SET_MARK = 0x8000;

                // ligature entry flags
                var SET_COMPONENT = 0x8000;
                var PERFORM_ACTION = 0x2000;

                // ligature action masks
                var LAST_MASK = 0x80000000;
                var STORE_MASK = 0x40000000;
                var OFFSET_MASK = 0x3FFFFFFF;

                var REVERSE_DIRECTION = 0x400000;
                var CURRENT_INSERT_BEFORE = 0x0800;
                var MARKED_INSERT_BEFORE = 0x0400;
                var CURRENT_INSERT_COUNT = 0x03E0;
                var MARKED_INSERT_COUNT = 0x001F;

                var AATMorxProcessor = (_class$2 = function () {
                    function AATMorxProcessor(font) {
                        _classCallCheck(this, AATMorxProcessor);

                        this.processIndicRearragement = this.processIndicRearragement.bind(this);
                        this.processContextualSubstitution = this.processContextualSubstitution.bind(this);
                        this.processLigature = this.processLigature.bind(this);
                        this.processNoncontextualSubstitutions = this.processNoncontextualSubstitutions.bind(this);
                        this.processGlyphInsertion = this.processGlyphInsertion.bind(this);
                        this.font = font;
                        this.morx = font.morx;
                        this.inputCache = null;
                    }

                    // Processes an array of glyphs and applies the specified features
                    // Features should be in the form of {featureType:{featureSetting:true}}


                    AATMorxProcessor.prototype.process = function process(glyphs) {
                        var features = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                        for (var _iterator = this.morx.chains, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
                            var _ref;

                            if (_isArray) {
                                if (_i >= _iterator.length) break;
                                _ref = _iterator[_i++];
                            } else {
                                _i = _iterator.next();
                                if (_i.done) break;
                                _ref = _i.value;
                            }

                            var chain = _ref;

                            var flags = chain.defaultFlags;

                            // enable/disable the requested features
                            for (var _iterator2 = chain.features, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
                                var _ref2;

                                if (_isArray2) {
                                    if (_i2 >= _iterator2.length) break;
                                    _ref2 = _iterator2[_i2++];
                                } else {
                                    _i2 = _iterator2.next();
                                    if (_i2.done) break;
                                    _ref2 = _i2.value;
                                }

                                var feature = _ref2;

                                var f = void 0;
                                if ((f = features[feature.featureType]) && f[feature.featureSetting]) {
                                    flags &= feature.disableFlags;
                                    flags |= feature.enableFlags;
                                }
                            }

                            for (var _iterator3 = chain.subtables, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
                                var _ref3;

                                if (_isArray3) {
                                    if (_i3 >= _iterator3.length) break;
                                    _ref3 = _iterator3[_i3++];
                                } else {
                                    _i3 = _iterator3.next();
                                    if (_i3.done) break;
                                    _ref3 = _i3.value;
                                }

                                var subtable = _ref3;

                                if (subtable.subFeatureFlags & flags) {
                                    this.processSubtable(subtable, glyphs);
                                }
                            }
                        }

                        // remove deleted glyphs
                        var index = glyphs.length - 1;
                        while (index >= 0) {
                            if (glyphs[index].id === 0xffff) {
                                glyphs.splice(index, 1);
                            }

                            index--;
                        }

                        return glyphs;
                    };

                    AATMorxProcessor.prototype.processSubtable = function processSubtable(subtable, glyphs) {
                        this.subtable = subtable;
                        this.glyphs = glyphs;
                        if (this.subtable.type === 4) {
                            this.processNoncontextualSubstitutions(this.subtable, this.glyphs);
                            return;
                        }

                        this.ligatureStack = [];
                        this.markedGlyph = null;
                        this.firstGlyph = null;
                        this.lastGlyph = null;
                        this.markedIndex = null;

                        var stateMachine = this.getStateMachine(subtable);
                        var process = this.getProcessor();

                        var reverse = !!(this.subtable.coverage & REVERSE_DIRECTION);
                        return stateMachine.process(this.glyphs, reverse, process);
                    };

                    AATMorxProcessor.prototype.getStateMachine = function getStateMachine(subtable) {
                        return new AATStateMachine(subtable.table.stateTable);
                    };

                    AATMorxProcessor.prototype.getProcessor = function getProcessor() {
                        switch (this.subtable.type) {
                            case 0:
                                return this.processIndicRearragement;
                            case 1:
                                return this.processContextualSubstitution;
                            case 2:
                                return this.processLigature;
                            case 4:
                                return this.processNoncontextualSubstitutions;
                            case 5:
                                return this.processGlyphInsertion;
                            default:
                                throw new Error('Invalid morx subtable type: ' + this.subtable.type);
                        }
                    };

                    AATMorxProcessor.prototype.processIndicRearragement = function processIndicRearragement(glyph, entry, index) {
                        if (entry.flags & MARK_FIRST) {
                            this.firstGlyph = index;
                        }

                        if (entry.flags & MARK_LAST) {
                            this.lastGlyph = index;
                        }

                        reorderGlyphs(this.glyphs, entry.flags & VERB, this.firstGlyph, this.lastGlyph);
                    };

                    AATMorxProcessor.prototype.processContextualSubstitution = function processContextualSubstitution(glyph, entry, index) {
                        var subsitutions = this.subtable.table.substitutionTable.items;
                        if (entry.markIndex !== 0xffff) {
                            var lookup = subsitutions.getItem(entry.markIndex);
                            var lookupTable = new AATLookupTable(lookup);
                            glyph = this.glyphs[this.markedGlyph];
                            var gid = lookupTable.lookup(glyph.id);
                            if (gid) {
                                this.glyphs[this.markedGlyph] = this.font.getGlyph(gid, glyph.codePoints);
                            }
                        }

                        if (entry.currentIndex !== 0xffff) {
                            var _lookup = subsitutions.getItem(entry.currentIndex);
                            var _lookupTable = new AATLookupTable(_lookup);
                            glyph = this.glyphs[index];
                            var gid = _lookupTable.lookup(glyph.id);
                            if (gid) {
                                this.glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);
                            }
                        }

                        if (entry.flags & SET_MARK) {
                            this.markedGlyph = index;
                        }
                    };

                    AATMorxProcessor.prototype.processLigature = function processLigature(glyph, entry, index) {
                        if (entry.flags & SET_COMPONENT) {
                            this.ligatureStack.push(index);
                        }

                        if (entry.flags & PERFORM_ACTION) {
                            var _ligatureStack;

                            var actions = this.subtable.table.ligatureActions;
                            var components = this.subtable.table.components;
                            var ligatureList = this.subtable.table.ligatureList;

                            var actionIndex = entry.action;
                            var last = false;
                            var ligatureIndex = 0;
                            var codePoints = [];
                            var ligatureGlyphs = [];

                            while (!last) {
                                var _codePoints;

                                var componentGlyph = this.ligatureStack.pop();
                                (_codePoints = codePoints).unshift.apply(_codePoints, this.glyphs[componentGlyph].codePoints);

                                var action = actions.getItem(actionIndex++);
                                last = !!(action & LAST_MASK);
                                var store = !!(action & STORE_MASK);
                                var offset = (action & OFFSET_MASK) << 2 >> 2; // sign extend 30 to 32 bits
                                offset += this.glyphs[componentGlyph].id;

                                var component = components.getItem(offset);
                                ligatureIndex += component;

                                if (last || store) {
                                    var ligatureEntry = ligatureList.getItem(ligatureIndex);
                                    this.glyphs[componentGlyph] = this.font.getGlyph(ligatureEntry, codePoints);
                                    ligatureGlyphs.push(componentGlyph);
                                    ligatureIndex = 0;
                                    codePoints = [];
                                } else {
                                    this.glyphs[componentGlyph] = this.font.getGlyph(0xffff);
                                }
                            }

                            // Put ligature glyph indexes back on the stack
                            (_ligatureStack = this.ligatureStack).push.apply(_ligatureStack, ligatureGlyphs);
                        }
                    };

                    AATMorxProcessor.prototype.processNoncontextualSubstitutions = function processNoncontextualSubstitutions(subtable, glyphs, index) {
                        var lookupTable = new AATLookupTable(subtable.table.lookupTable);

                        for (index = 0; index < glyphs.length; index++) {
                            var glyph = glyphs[index];
                            if (glyph.id !== 0xffff) {
                                var gid = lookupTable.lookup(glyph.id);
                                if (gid) {
                                    // 0 means do nothing
                                    glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);
                                }
                            }
                        }
                    };

                    AATMorxProcessor.prototype._insertGlyphs = function _insertGlyphs(glyphIndex, insertionActionIndex, count, isBefore) {
                        var _glyphs;

                        var insertions = [];
                        while (count--) {
                            var gid = this.subtable.table.insertionActions.getItem(insertionActionIndex++);
                            insertions.push(this.font.getGlyph(gid));
                        }

                        if (!isBefore) {
                            glyphIndex++;
                        }

                        (_glyphs = this.glyphs).splice.apply(_glyphs, [glyphIndex, 0].concat(insertions));
                    };

                    AATMorxProcessor.prototype.processGlyphInsertion = function processGlyphInsertion(glyph, entry, index) {
                        if (entry.flags & SET_MARK) {
                            this.markedIndex = index;
                        }

                        if (entry.markedInsertIndex !== 0xffff) {
                            var count = (entry.flags & MARKED_INSERT_COUNT) >>> 5;
                            var isBefore = !!(entry.flags & MARKED_INSERT_BEFORE);
                            this._insertGlyphs(this.markedIndex, entry.markedInsertIndex, count, isBefore);
                        }

                        if (entry.currentInsertIndex !== 0xffff) {
                            var _count = (entry.flags & CURRENT_INSERT_COUNT) >>> 5;
                            var _isBefore = !!(entry.flags & CURRENT_INSERT_BEFORE);
                            this._insertGlyphs(index, entry.currentInsertIndex, _count, _isBefore);
                        }
                    };

                    AATMorxProcessor.prototype.getSupportedFeatures = function getSupportedFeatures() {
                        var features = [];
                        for (var _iterator4 = this.morx.chains, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
                            var _ref4;

                            if (_isArray4) {
                                if (_i4 >= _iterator4.length) break;
                                _ref4 = _iterator4[_i4++];
                            } else {
                                _i4 = _iterator4.next();
                                if (_i4.done) break;
                                _ref4 = _i4.value;
                            }

                            var chain = _ref4;

                            for (var _iterator5 = chain.features, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _getIterator(_iterator5);;) {
                                var _ref5;

                                if (_isArray5) {
                                    if (_i5 >= _iterator5.length) break;
                                    _ref5 = _iterator5[_i5++];
                                } else {
                                    _i5 = _iterator5.next();
                                    if (_i5.done) break;
                                    _ref5 = _i5.value;
                                }

                                var feature = _ref5;

                                features.push([feature.featureType, feature.featureSetting]);
                            }
                        }

                        return features;
                    };

                    AATMorxProcessor.prototype.generateInputs = function generateInputs(gid) {
                        if (!this.inputCache) {
                            this.generateInputCache();
                        }

                        return this.inputCache[gid] || [];
                    };

                    AATMorxProcessor.prototype.generateInputCache = function generateInputCache() {
                        this.inputCache = {};

                        for (var _iterator6 = this.morx.chains, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _getIterator(_iterator6);;) {
                            var _ref6;

                            if (_isArray6) {
                                if (_i6 >= _iterator6.length) break;
                                _ref6 = _iterator6[_i6++];
                            } else {
                                _i6 = _iterator6.next();
                                if (_i6.done) break;
                                _ref6 = _i6.value;
                            }

                            var chain = _ref6;

                            var flags = chain.defaultFlags;

                            for (var _iterator7 = chain.subtables, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _getIterator(_iterator7);;) {
                                var _ref7;

                                if (_isArray7) {
                                    if (_i7 >= _iterator7.length) break;
                                    _ref7 = _iterator7[_i7++];
                                } else {
                                    _i7 = _iterator7.next();
                                    if (_i7.done) break;
                                    _ref7 = _i7.value;
                                }

                                var subtable = _ref7;

                                if (subtable.subFeatureFlags & flags) {
                                    this.generateInputsForSubtable(subtable);
                                }
                            }
                        }
                    };

                    AATMorxProcessor.prototype.generateInputsForSubtable = function generateInputsForSubtable(subtable) {
                        var _this = this;

                        // Currently, only supporting ligature subtables.
                        if (subtable.type !== 2) {
                            return;
                        }

                        var reverse = !!(subtable.coverage & REVERSE_DIRECTION);
                        if (reverse) {
                            throw new Error('Reverse subtable, not supported.');
                        }

                        this.subtable = subtable;
                        this.ligatureStack = [];

                        var stateMachine = this.getStateMachine(subtable);
                        var process = this.getProcessor();

                        var input = [];
                        var stack = [];
                        this.glyphs = [];

                        stateMachine.traverse({
                            enter: function enter(glyph, entry) {
                                var glyphs = _this.glyphs;
                                stack.push({
                                    glyphs: glyphs.slice(),
                                    ligatureStack: _this.ligatureStack.slice()
                                });

                                // Add glyph to input and glyphs to process.
                                var g = _this.font.getGlyph(glyph);
                                input.push(g);
                                glyphs.push(input[input.length - 1]);

                                // Process ligature substitution
                                process(glyphs[glyphs.length - 1], entry, glyphs.length - 1);

                                // Add input to result if only one matching (non-deleted) glyph remains.
                                var count = 0;
                                var found = 0;
                                for (var i = 0; i < glyphs.length && count <= 1; i++) {
                                    if (glyphs[i].id !== 0xffff) {
                                        count++;
                                        found = glyphs[i].id;
                                    }
                                }

                                if (count === 1) {
                                    var result = input.map(function (g) {
                                        return g.id;
                                    });
                                    var _cache = _this.inputCache[found];
                                    if (_cache) {
                                        _cache.push(result);
                                    } else {
                                        _this.inputCache[found] = [result];
                                    }
                                }
                            },

                            exit: function exit() {
                                var _stack$pop = stack.pop();

                                _this.glyphs = _stack$pop.glyphs;
                                _this.ligatureStack = _stack$pop.ligatureStack;

                                input.pop();
                            }
                        });
                    };

                    return AATMorxProcessor;
                }(), (_applyDecoratedDescriptor$2(_class$2.prototype, 'getStateMachine', [cache], _Object$getOwnPropertyDescriptor(_class$2.prototype, 'getStateMachine'), _class$2.prototype)), _class$2);

                function swap(glyphs, rangeA, rangeB) {
                    var reverseA = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
                    var reverseB = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

                    var end = glyphs.splice(rangeB[0] - (rangeB[1] - 1), rangeB[1]);
                    if (reverseB) {
                        end.reverse();
                    }

                    var start = glyphs.splice.apply(glyphs, [rangeA[0], rangeA[1]].concat(end));
                    if (reverseA) {
                        start.reverse();
                    }

                    glyphs.splice.apply(glyphs, [rangeB[0] - (rangeA[1] - 1), 0].concat(start));
                    return glyphs;
                }

                function reorderGlyphs(glyphs, verb, firstGlyph, lastGlyph) {
                    var length = lastGlyph - firstGlyph + 1;
                    switch (verb) {
                        case 0:
                            // no change
                            return glyphs;

                        case 1:
                            // Ax => xA
                            return swap(glyphs, [firstGlyph, 1], [lastGlyph, 0]);

                        case 2:
                            // xD => Dx
                            return swap(glyphs, [firstGlyph, 0], [lastGlyph, 1]);

                        case 3:
                            // AxD => DxA
                            return swap(glyphs, [firstGlyph, 1], [lastGlyph, 1]);

                        case 4:
                            // ABx => xAB
                            return swap(glyphs, [firstGlyph, 2], [lastGlyph, 0]);

                        case 5:
                            // ABx => xBA
                            return swap(glyphs, [firstGlyph, 2], [lastGlyph, 0], true, false);

                        case 6:
                            // xCD => CDx
                            return swap(glyphs, [firstGlyph, 0], [lastGlyph, 2]);

                        case 7:
                            // xCD => DCx
                            return swap(glyphs, [firstGlyph, 0], [lastGlyph, 2], false, true);

                        case 8:
                            // AxCD => CDxA
                            return swap(glyphs, [firstGlyph, 1], [lastGlyph, 2]);

                        case 9:
                            // AxCD => DCxA
                            return swap(glyphs, [firstGlyph, 1], [lastGlyph, 2], false, true);

                        case 10:
                            // ABxD => DxAB
                            return swap(glyphs, [firstGlyph, 2], [lastGlyph, 1]);

                        case 11:
                            // ABxD => DxBA
                            return swap(glyphs, [firstGlyph, 2], [lastGlyph, 1], true, false);

                        case 12:
                            // ABxCD => CDxAB
                            return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2]);

                        case 13:
                            // ABxCD => CDxBA
                            return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2], true, false);

                        case 14:
                            // ABxCD => DCxAB
                            return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2], false, true);

                        case 15:
                            // ABxCD => DCxBA
                            return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2], true, true);

                        default:
                            throw new Error('Unknown verb: ' + verb);
                    }
                }

                var AATLayoutEngine = function () {
                    function AATLayoutEngine(font) {
                        _classCallCheck(this, AATLayoutEngine);

                        this.font = font;
                        this.morxProcessor = new AATMorxProcessor(font);
                        this.fallbackPosition = false;
                    }

                    AATLayoutEngine.prototype.substitute = function substitute(glyphRun) {
                        // AAT expects the glyphs to be in visual order prior to morx processing,
                        // so reverse the glyphs if the script is right-to-left.
                        if (glyphRun.direction === 'rtl') {
                            glyphRun.glyphs.reverse();
                        }

                        this.morxProcessor.process(glyphRun.glyphs, mapOTToAAT(glyphRun.features));
                    };

                    AATLayoutEngine.prototype.getAvailableFeatures = function getAvailableFeatures(script, language) {
                        return mapAATToOT(this.morxProcessor.getSupportedFeatures());
                    };

                    AATLayoutEngine.prototype.stringsForGlyph = function stringsForGlyph(gid) {
                        var glyphStrings = this.morxProcessor.generateInputs(gid);
                        var result = new _Set();

                        for (var _iterator = glyphStrings, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
                            var _ref;

                            if (_isArray) {
                                if (_i >= _iterator.length) break;
                                _ref = _iterator[_i++];
                            } else {
                                _i = _iterator.next();
                                if (_i.done) break;
                                _ref = _i.value;
                            }

                            var glyphs = _ref;

                            this._addStrings(glyphs, 0, result, '');
                        }

                        return result;
                    };

                    AATLayoutEngine.prototype._addStrings = function _addStrings(glyphs, index, strings, string) {
                        var codePoints = this.font._cmapProcessor.codePointsForGlyph(glyphs[index]);

                        for (var _iterator2 = codePoints, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
                            var _ref2;

                            if (_isArray2) {
                                if (_i2 >= _iterator2.length) break;
                                _ref2 = _iterator2[_i2++];
                            } else {
                                _i2 = _iterator2.next();
                                if (_i2.done) break;
                                _ref2 = _i2.value;
                            }

                            var codePoint = _ref2;

                            var s = string + _String$fromCodePoint(codePoint);
                            if (index < glyphs.length - 1) {
                                this._addStrings(glyphs, index + 1, strings, s);
                            } else {
                                strings.add(s);
                            }
                        }
                    };

                    return AATLayoutEngine;
                }();

                /**
                 * ShapingPlans are used by the OpenType shapers to store which
                 * features should by applied, and in what order to apply them.
                 * The features are applied in groups called stages. A feature
                 * can be applied globally to all glyphs, or locally to only
                 * specific glyphs.
                 *
                 * @private
                 */

                var ShapingPlan = function () {
                    function ShapingPlan(font, script, direction) {
                        _classCallCheck(this, ShapingPlan);

                        this.font = font;
                        this.script = script;
                        this.direction = direction;
                        this.stages = [];
                        this.globalFeatures = {};
                        this.allFeatures = {};
                    }

                    /**
                     * Adds the given features to the last stage.
                     * Ignores features that have already been applied.
                     */


                    ShapingPlan.prototype._addFeatures = function _addFeatures(features, global) {
                        var stageIndex = this.stages.length - 1;
                        var stage = this.stages[stageIndex];
                        for (var _iterator = features, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
                            var _ref;

                            if (_isArray) {
                                if (_i >= _iterator.length) break;
                                _ref = _iterator[_i++];
                            } else {
                                _i = _iterator.next();
                                if (_i.done) break;
                                _ref = _i.value;
                            }

                            var feature = _ref;

                            if (this.allFeatures[feature] == null) {
                                stage.push(feature);
                                this.allFeatures[feature] = stageIndex;

                                if (global) {
                                    this.globalFeatures[feature] = true;
                                }
                            }
                        }
                    };

                    /**
                     * Add features to the last stage
                     */


                    ShapingPlan.prototype.add = function add(arg) {
                        var global = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

                        if (this.stages.length === 0) {
                            this.stages.push([]);
                        }

                        if (typeof arg === 'string') {
                            arg = [arg];
                        }

                        if (Array.isArray(arg)) {
                            this._addFeatures(arg, global);
                        } else if ((typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object') {
                            this._addFeatures(arg.global || [], true);
                            this._addFeatures(arg.local || [], false);
                        } else {
                            throw new Error("Unsupported argument to ShapingPlan#add");
                        }
                    };

                    /**
                     * Add a new stage
                     */


                    ShapingPlan.prototype.addStage = function addStage(arg, global) {
                        if (typeof arg === 'function') {
                            this.stages.push(arg, []);
                        } else {
                            this.stages.push([]);
                            this.add(arg, global);
                        }
                    };

                    ShapingPlan.prototype.setFeatureOverrides = function setFeatureOverrides(features) {
                        if (Array.isArray(features)) {
                            this.add(features);
                        } else if ((typeof features === 'undefined' ? 'undefined' : _typeof(features)) === 'object') {
                            for (var tag in features) {
                                if (features[tag]) {
                                    this.add(tag);
                                } else if (this.allFeatures[tag] != null) {
                                    var stage = this.stages[this.allFeatures[tag]];
                                    stage.splice(stage.indexOf(tag), 1);
                                    delete this.allFeatures[tag];
                                    delete this.globalFeatures[tag];
                                }
                            }
                        }
                    };

                    /**
                     * Assigns the global features to the given glyphs
                     */


                    ShapingPlan.prototype.assignGlobalFeatures = function assignGlobalFeatures(glyphs) {
                        for (var _iterator2 = glyphs, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
                            var _ref2;

                            if (_isArray2) {
                                if (_i2 >= _iterator2.length) break;
                                _ref2 = _iterator2[_i2++];
                            } else {
                                _i2 = _iterator2.next();
                                if (_i2.done) break;
                                _ref2 = _i2.value;
                            }

                            var glyph = _ref2;

                            for (var feature in this.globalFeatures) {
                                glyph.features[feature] = true;
                            }
                        }
                    };

                    /**
                     * Executes the planned stages using the given OTProcessor
                     */


                    ShapingPlan.prototype.process = function process(processor, glyphs, positions) {
                        for (var _iterator3 = this.stages, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
                            var _ref3;

                            if (_isArray3) {
                                if (_i3 >= _iterator3.length) break;
                                _ref3 = _iterator3[_i3++];
                            } else {
                                _i3 = _iterator3.next();
                                if (_i3.done) break;
                                _ref3 = _i3.value;
                            }

                            var stage = _ref3;

                            if (typeof stage === 'function') {
                                if (!positions) {
                                    stage(this.font, glyphs, this);
                                }
                            } else if (stage.length > 0) {
                                processor.applyFeatures(stage, glyphs, positions);
                            }
                        }
                    };

                    return ShapingPlan;
                }();

                var _class$4;
                var _temp;
                var VARIATION_FEATURES = ['rvrn'];
                var COMMON_FEATURES = ['ccmp', 'locl', 'rlig', 'mark', 'mkmk'];
                var FRACTIONAL_FEATURES = ['frac', 'numr', 'dnom'];
                var HORIZONTAL_FEATURES = ['calt', 'clig', 'liga', 'rclt', 'curs', 'kern'];
                var DIRECTIONAL_FEATURES = {
                    ltr: ['ltra', 'ltrm'],
                    rtl: ['rtla', 'rtlm']
                };

                var DefaultShaper = (_temp = _class$4 = function () {
                    function DefaultShaper() {
                        _classCallCheck(this, DefaultShaper);
                    }

                    DefaultShaper.plan = function plan(_plan, glyphs, features) {
                        // Plan the features we want to apply
                        this.planPreprocessing(_plan);
                        this.planFeatures(_plan);
                        this.planPostprocessing(_plan, features);

                        // Assign the global features to all the glyphs
                        _plan.assignGlobalFeatures(glyphs);

                        // Assign local features to glyphs
                        this.assignFeatures(_plan, glyphs);
                    };

                    DefaultShaper.planPreprocessing = function planPreprocessing(plan) {
                        plan.add({
                            global: [].concat(VARIATION_FEATURES, DIRECTIONAL_FEATURES[plan.direction]),
                            local: FRACTIONAL_FEATURES
                        });
                    };

                    DefaultShaper.planFeatures = function planFeatures(plan) {
                        // Do nothing by default. Let subclasses override this.
                    };

                    DefaultShaper.planPostprocessing = function planPostprocessing(plan, userFeatures) {
                        plan.add([].concat(COMMON_FEATURES, HORIZONTAL_FEATURES));
                        plan.setFeatureOverrides(userFeatures);
                    };

                    DefaultShaper.assignFeatures = function assignFeatures(plan, glyphs) {
                        // Enable contextual fractions
                        for (var i = 0; i < glyphs.length; i++) {
                            var glyph = glyphs[i];
                            if (glyph.codePoints[0] === 0x2044) {
                                // fraction slash
                                var start = i;
                                var end = i + 1;

                                // Apply numerator
                                while (start > 0 && unicode.isDigit(glyphs[start - 1].codePoints[0])) {
                                    glyphs[start - 1].features.numr = true;
                                    glyphs[start - 1].features.frac = true;
                                    start--;
                                }

                                // Apply denominator
                                while (end < glyphs.length && unicode.isDigit(glyphs[end].codePoints[0])) {
                                    glyphs[end].features.dnom = true;
                                    glyphs[end].features.frac = true;
                                    end++;
                                }

                                // Apply fraction slash
                                glyph.features.frac = true;
                                i = end - 1;
                            }
                        }
                    };

                    return DefaultShaper;
                }(), _class$4.zeroMarkWidths = 'AFTER_GPOS', _temp);

                var trie = new UnicodeTrie(Buffer("AAEQAAAAAAAAADGgAZUBav7t2CtPA0EUBeDZB00pin9AJZIEgyUEj0QhweDAgQOJxCBRBElQSBwSicLgkOAwnNKZ5GaY2c7uzj4o5yZfZrrbefbuIx2nSq3CGmzAWH/+K+UO7MIe7MMhHMMpnMMFXMIVXIt2t3CnP088iPqjqNN8e4Ij7Rle4LUH82rLm6i/92A+RERERERERERNmfz/89GDeRARERERzbN8ceps2Iwt9H0C9/AJ6yOlDkbTczcot5VSm8Pm1vcFWfb7+BKOLTuOd2UlTX4wGP85Eg953lWPFbnuN7PkjtLmalOWbNenkHOSa7T3KmR9MVTZ2zZkVj1kHa68MueVKH0R4zqQ44WEXLM8VjcWHP0PtKLfPzQnMtGn3W4QYf6qxFxceVI394r2xnV+1rih0fV1Vzf3fO1n3evL5J78ruvZ5ptX2Rwy92Tfb1wlEqut3U+sZ3HXOeJ7/zDrbyuP6+Zz0fqa6Nv3vhY7Yu1xWnGevmsvsUpTT/RYIe8waUH/rvHMWKFzLfN8L+rTfp645mfX7ftlnfDtYxN59w0=","base64"));
                var FEATURES = ['isol', 'fina', 'fin2', 'fin3', 'medi', 'med2', 'init'];

                var ShapingClasses = {
                    Non_Joining: 0,
                    Left_Joining: 1,
                    Right_Joining: 2,
                    Dual_Joining: 3,
                    Join_Causing: 3,
                    ALAPH: 4,
                    'DALATH RISH': 5,
                    Transparent: 6
                };

                var ISOL = 'isol';
                var FINA = 'fina';
                var FIN2 = 'fin2';
                var FIN3 = 'fin3';
                var MEDI = 'medi';
                var MED2 = 'med2';
                var INIT = 'init';
                var NONE = null;

                // Each entry is [prevAction, curAction, nextState]
                var STATE_TABLE = [
                    //   Non_Joining,        Left_Joining,       Right_Joining,     Dual_Joining,           ALAPH,            DALATH RISH
                    // State 0: prev was U,  not willing to join.
                    [[NONE, NONE, 0], [NONE, ISOL, 2], [NONE, ISOL, 1], [NONE, ISOL, 2], [NONE, ISOL, 1], [NONE, ISOL, 6]],

                    // State 1: prev was R or ISOL/ALAPH,  not willing to join.
                    [[NONE, NONE, 0], [NONE, ISOL, 2], [NONE, ISOL, 1], [NONE, ISOL, 2], [NONE, FIN2, 5], [NONE, ISOL, 6]],

                    // State 2: prev was D/L in ISOL form,  willing to join.
                    [[NONE, NONE, 0], [NONE, ISOL, 2], [INIT, FINA, 1], [INIT, FINA, 3], [INIT, FINA, 4], [INIT, FINA, 6]],

                    // State 3: prev was D in FINA form,  willing to join.
                    [[NONE, NONE, 0], [NONE, ISOL, 2], [MEDI, FINA, 1], [MEDI, FINA, 3], [MEDI, FINA, 4], [MEDI, FINA, 6]],

                    // State 4: prev was FINA ALAPH,  not willing to join.
                    [[NONE, NONE, 0], [NONE, ISOL, 2], [MED2, ISOL, 1], [MED2, ISOL, 2], [MED2, FIN2, 5], [MED2, ISOL, 6]],

                    // State 5: prev was FIN2/FIN3 ALAPH,  not willing to join.
                    [[NONE, NONE, 0], [NONE, ISOL, 2], [ISOL, ISOL, 1], [ISOL, ISOL, 2], [ISOL, FIN2, 5], [ISOL, ISOL, 6]],

                    // State 6: prev was DALATH/RISH,  not willing to join.
                    [[NONE, NONE, 0], [NONE, ISOL, 2], [NONE, ISOL, 1], [NONE, ISOL, 2], [NONE, FIN3, 5], [NONE, ISOL, 6]]];

                /**
                 * This is a shaper for Arabic, and other cursive scripts.
                 * It uses data from ArabicShaping.txt in the Unicode database,
                 * compiled to a UnicodeTrie by generate-data.coffee.
                 *
                 * The shaping state machine was ported from Harfbuzz.
                 * https://github.com/behdad/harfbuzz/blob/master/src/hb-ot-shape-complex-arabic.cc
                 */

                var ArabicShaper = function (_DefaultShaper) {
                    _inherits(ArabicShaper, _DefaultShaper);

                    function ArabicShaper() {
                        _classCallCheck(this, ArabicShaper);

                        return _possibleConstructorReturn(this, _DefaultShaper.apply(this, arguments));
                    }

                    ArabicShaper.planFeatures = function planFeatures(plan) {
                        plan.add(['ccmp', 'locl']);
                        for (var i = 0; i < FEATURES.length; i++) {
                            var feature = FEATURES[i];
                            plan.addStage(feature, false);
                        }

                        plan.addStage('mset');
                    };

                    ArabicShaper.assignFeatures = function assignFeatures(plan, glyphs) {
                        _DefaultShaper.assignFeatures.call(this, plan, glyphs);

                        var prev = -1;
                        var state = 0;
                        var actions = [];

                        // Apply the state machine to map glyphs to features
                        for (var i = 0; i < glyphs.length; i++) {
                            var curAction = void 0,
                                prevAction = void 0;
                            var glyph = glyphs[i];
                            var type = getShapingClass(glyph.codePoints[0]);
                            if (type === ShapingClasses.Transparent) {
                                actions[i] = NONE;
                                continue;
                            }

                            var _STATE_TABLE$state$ty = STATE_TABLE[state][type];
                            prevAction = _STATE_TABLE$state$ty[0];
                            curAction = _STATE_TABLE$state$ty[1];
                            state = _STATE_TABLE$state$ty[2];


                            if (prevAction !== NONE && prev !== -1) {
                                actions[prev] = prevAction;
                            }

                            actions[i] = curAction;
                            prev = i;
                        }

                        // Apply the chosen features to their respective glyphs
                        for (var index = 0; index < glyphs.length; index++) {
                            var feature = void 0;
                            var glyph = glyphs[index];
                            if (feature = actions[index]) {
                                glyph.features[feature] = true;
                            }
                        }
                    };

                    return ArabicShaper;
                }(DefaultShaper);

                function getShapingClass(codePoint) {
                    var res = trie.get(codePoint);
                    if (res) {
                        return res - 1;
                    }

                    var category = unicode.getCategory(codePoint);
                    if (category === 'Mn' || category === 'Me' || category === 'Cf') {
                        return ShapingClasses.Transparent;
                    }

                    return ShapingClasses.Non_Joining;
                }

                var GlyphIterator = function () {
                    function GlyphIterator(glyphs, options) {
                        _classCallCheck(this, GlyphIterator);

                        this.glyphs = glyphs;
                        this.reset(options);
                    }

                    GlyphIterator.prototype.reset = function reset() {
                        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                        var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

                        this.options = options;
                        this.flags = options.flags || {};
                        this.markAttachmentType = options.markAttachmentType || 0;
                        this.index = index;
                    };

                    GlyphIterator.prototype.shouldIgnore = function shouldIgnore(glyph) {
                        return this.flags.ignoreMarks && glyph.isMark || this.flags.ignoreBaseGlyphs && glyph.isBase || this.flags.ignoreLigatures && glyph.isLigature || this.markAttachmentType && glyph.isMark && glyph.markAttachmentType !== this.markAttachmentType;
                    };

                    GlyphIterator.prototype.move = function move(dir) {
                        this.index += dir;
                        while (0 <= this.index && this.index < this.glyphs.length && this.shouldIgnore(this.glyphs[this.index])) {
                            this.index += dir;
                        }

                        if (0 > this.index || this.index >= this.glyphs.length) {
                            return null;
                        }

                        return this.glyphs[this.index];
                    };

                    GlyphIterator.prototype.next = function next() {
                        return this.move(+1);
                    };

                    GlyphIterator.prototype.prev = function prev() {
                        return this.move(-1);
                    };

                    GlyphIterator.prototype.peek = function peek() {
                        var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

                        var idx = this.index;
                        var res = this.increment(count);
                        this.index = idx;
                        return res;
                    };

                    GlyphIterator.prototype.peekIndex = function peekIndex() {
                        var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

                        var idx = this.index;
                        this.increment(count);
                        var res = this.index;
                        this.index = idx;
                        return res;
                    };

                    GlyphIterator.prototype.increment = function increment() {
                        var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

                        var dir = count < 0 ? -1 : 1;
                        count = Math.abs(count);
                        while (count--) {
                            this.move(dir);
                        }

                        return this.glyphs[this.index];
                    };

                    _createClass(GlyphIterator, [{
                        key: "cur",
                        get: function get() {
                            return this.glyphs[this.index] || null;
                        }
                    }]);

                    return GlyphIterator;
                }();

                var DEFAULT_SCRIPTS = ['DFLT', 'dflt', 'latn'];

                var OTProcessor = function () {
                    function OTProcessor(font, table) {
                        _classCallCheck(this, OTProcessor);

                        this.font = font;
                        this.table = table;

                        this.script = null;
                        this.scriptTag = null;

                        this.language = null;
                        this.languageTag = null;

                        this.features = {};
                        this.lookups = {};

                        // Setup variation substitutions
                        this.variationsIndex = font._variationProcessor ? this.findVariationsIndex(font._variationProcessor.normalizedCoords) : -1;

                        // initialize to default script + language
                        this.selectScript();

                        // current context (set by applyFeatures)
                        this.glyphs = [];
                        this.positions = []; // only used by GPOS
                        this.ligatureID = 1;
                        this.currentFeature = null;
                    }

                    OTProcessor.prototype.findScript = function findScript(script) {
                        if (this.table.scriptList == null) {
                            return null;
                        }

                        if (!Array.isArray(script)) {
                            script = [script];
                        }

                        for (var _iterator = script, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
                            var _ref;

                            if (_isArray) {
                                if (_i >= _iterator.length) break;
                                _ref = _iterator[_i++];
                            } else {
                                _i = _iterator.next();
                                if (_i.done) break;
                                _ref = _i.value;
                            }

                            var s = _ref;

                            for (var _iterator2 = this.table.scriptList, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
                                var _ref2;

                                if (_isArray2) {
                                    if (_i2 >= _iterator2.length) break;
                                    _ref2 = _iterator2[_i2++];
                                } else {
                                    _i2 = _iterator2.next();
                                    if (_i2.done) break;
                                    _ref2 = _i2.value;
                                }

                                var entry = _ref2;

                                if (entry.tag === s) {
                                    return entry;
                                }
                            }
                        }

                        return null;
                    };

                    OTProcessor.prototype.selectScript = function selectScript(script, language, direction$$) {
                        var changed = false;
                        var entry = void 0;
                        if (!this.script || script !== this.scriptTag) {
                            entry = this.findScript(script);
                            if (!entry) {
                                entry = this.findScript(DEFAULT_SCRIPTS);
                            }

                            if (!entry) {
                                return this.scriptTag;
                            }

                            this.scriptTag = entry.tag;
                            this.script = entry.script;
                            this.language = null;
                            this.languageTag = null;
                            changed = true;
                        }

                        if (!direction$$ || direction$$ !== this.direction) {
                            this.direction = direction$$ || direction(script);
                        }

                        if (language && language.length < 4) {
                            language += ' '.repeat(4 - language.length);
                        }

                        if (!language || language !== this.languageTag) {
                            this.language = null;

                            for (var _iterator3 = this.script.langSysRecords, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
                                var _ref3;

                                if (_isArray3) {
                                    if (_i3 >= _iterator3.length) break;
                                    _ref3 = _iterator3[_i3++];
                                } else {
                                    _i3 = _iterator3.next();
                                    if (_i3.done) break;
                                    _ref3 = _i3.value;
                                }

                                var lang = _ref3;

                                if (lang.tag === language) {
                                    this.language = lang.langSys;
                                    this.languageTag = lang.tag;
                                    break;
                                }
                            }

                            if (!this.language) {
                                this.language = this.script.defaultLangSys;
                                this.languageTag = null;
                            }

                            changed = true;
                        }

                        // Build a feature lookup table
                        if (changed) {
                            this.features = {};
                            if (this.language) {
                                for (var _iterator4 = this.language.featureIndexes, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
                                    var _ref4;

                                    if (_isArray4) {
                                        if (_i4 >= _iterator4.length) break;
                                        _ref4 = _iterator4[_i4++];
                                    } else {
                                        _i4 = _iterator4.next();
                                        if (_i4.done) break;
                                        _ref4 = _i4.value;
                                    }

                                    var featureIndex = _ref4;

                                    var record = this.table.featureList[featureIndex];
                                    var substituteFeature = this.substituteFeatureForVariations(featureIndex);
                                    this.features[record.tag] = substituteFeature || record.feature;
                                }
                            }
                        }

                        return this.scriptTag;
                    };

                    OTProcessor.prototype.lookupsForFeatures = function lookupsForFeatures() {
                        var userFeatures = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
                        var exclude = arguments[1];

                        var lookups = [];
                        for (var _iterator5 = userFeatures, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _getIterator(_iterator5);;) {
                            var _ref5;

                            if (_isArray5) {
                                if (_i5 >= _iterator5.length) break;
                                _ref5 = _iterator5[_i5++];
                            } else {
                                _i5 = _iterator5.next();
                                if (_i5.done) break;
                                _ref5 = _i5.value;
                            }

                            var tag = _ref5;

                            var feature = this.features[tag];
                            if (!feature) {
                                continue;
                            }

                            for (var _iterator6 = feature.lookupListIndexes, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _getIterator(_iterator6);;) {
                                var _ref6;

                                if (_isArray6) {
                                    if (_i6 >= _iterator6.length) break;
                                    _ref6 = _iterator6[_i6++];
                                } else {
                                    _i6 = _iterator6.next();
                                    if (_i6.done) break;
                                    _ref6 = _i6.value;
                                }

                                var lookupIndex = _ref6;

                                if (exclude && exclude.indexOf(lookupIndex) !== -1) {
                                    continue;
                                }

                                lookups.push({
                                    feature: tag,
                                    index: lookupIndex,
                                    lookup: this.table.lookupList.get(lookupIndex)
                                });
                            }
                        }

                        lookups.sort(function (a, b) {
                            return a.index - b.index;
                        });
                        return lookups;
                    };

                    OTProcessor.prototype.substituteFeatureForVariations = function substituteFeatureForVariations(featureIndex) {
                        if (this.variationsIndex === -1) {
                            return null;
                        }

                        var record = this.table.featureVariations.featureVariationRecords[this.variationsIndex];
                        var substitutions = record.featureTableSubstitution.substitutions;
                        for (var _iterator7 = substitutions, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _getIterator(_iterator7);;) {
                            var _ref7;

                            if (_isArray7) {
                                if (_i7 >= _iterator7.length) break;
                                _ref7 = _iterator7[_i7++];
                            } else {
                                _i7 = _iterator7.next();
                                if (_i7.done) break;
                                _ref7 = _i7.value;
                            }

                            var substitution = _ref7;

                            if (substitution.featureIndex === featureIndex) {
                                return substitution.alternateFeatureTable;
                            }
                        }

                        return null;
                    };

                    OTProcessor.prototype.findVariationsIndex = function findVariationsIndex(coords) {
                        var variations = this.table.featureVariations;
                        if (!variations) {
                            return -1;
                        }

                        var records = variations.featureVariationRecords;
                        for (var i = 0; i < records.length; i++) {
                            var conditions = records[i].conditionSet.conditionTable;
                            if (this.variationConditionsMatch(conditions, coords)) {
                                return i;
                            }
                        }

                        return -1;
                    };

                    OTProcessor.prototype.variationConditionsMatch = function variationConditionsMatch(conditions, coords) {
                        return conditions.every(function (condition) {
                            var coord = condition.axisIndex < coords.length ? coords[condition.axisIndex] : 0;
                            return condition.filterRangeMinValue <= coord && coord <= condition.filterRangeMaxValue;
                        });
                    };

                    OTProcessor.prototype.applyFeatures = function applyFeatures(userFeatures, glyphs, advances) {
                        var lookups = this.lookupsForFeatures(userFeatures);
                        this.applyLookups(lookups, glyphs, advances);
                    };

                    OTProcessor.prototype.applyLookups = function applyLookups(lookups, glyphs, positions) {
                        this.glyphs = glyphs;
                        this.positions = positions;
                        this.glyphIterator = new GlyphIterator(glyphs);

                        for (var _iterator8 = lookups, _isArray8 = Array.isArray(_iterator8), _i8 = 0, _iterator8 = _isArray8 ? _iterator8 : _getIterator(_iterator8);;) {
                            var _ref8;

                            if (_isArray8) {
                                if (_i8 >= _iterator8.length) break;
                                _ref8 = _iterator8[_i8++];
                            } else {
                                _i8 = _iterator8.next();
                                if (_i8.done) break;
                                _ref8 = _i8.value;
                            }

                            var _ref9 = _ref8,
                                feature = _ref9.feature,
                                lookup = _ref9.lookup;

                            this.currentFeature = feature;
                            this.glyphIterator.reset(lookup.flags);

                            while (this.glyphIterator.index < glyphs.length) {
                                if (!(feature in this.glyphIterator.cur.features)) {
                                    this.glyphIterator.next();
                                    continue;
                                }

                                for (var _iterator9 = lookup.subTables, _isArray9 = Array.isArray(_iterator9), _i9 = 0, _iterator9 = _isArray9 ? _iterator9 : _getIterator(_iterator9);;) {
                                    var _ref10;

                                    if (_isArray9) {
                                        if (_i9 >= _iterator9.length) break;
                                        _ref10 = _iterator9[_i9++];
                                    } else {
                                        _i9 = _iterator9.next();
                                        if (_i9.done) break;
                                        _ref10 = _i9.value;
                                    }

                                    var table = _ref10;

                                    var res = this.applyLookup(lookup.lookupType, table);
                                    if (res) {
                                        break;
                                    }
                                }

                                this.glyphIterator.next();
                            }
                        }
                    };

                    OTProcessor.prototype.applyLookup = function applyLookup(lookup, table) {
                        throw new Error("applyLookup must be implemented by subclasses");
                    };

                    OTProcessor.prototype.applyLookupList = function applyLookupList(lookupRecords) {
                        var options = this.glyphIterator.options;
                        var glyphIndex = this.glyphIterator.index;

                        for (var _iterator10 = lookupRecords, _isArray10 = Array.isArray(_iterator10), _i10 = 0, _iterator10 = _isArray10 ? _iterator10 : _getIterator(_iterator10);;) {
                            var _ref11;

                            if (_isArray10) {
                                if (_i10 >= _iterator10.length) break;
                                _ref11 = _iterator10[_i10++];
                            } else {
                                _i10 = _iterator10.next();
                                if (_i10.done) break;
                                _ref11 = _i10.value;
                            }

                            var lookupRecord = _ref11;

                            // Reset flags and find glyph index for this lookup record
                            this.glyphIterator.reset(options, glyphIndex);
                            this.glyphIterator.increment(lookupRecord.sequenceIndex);

                            // Get the lookup and setup flags for subtables
                            var lookup = this.table.lookupList.get(lookupRecord.lookupListIndex);
                            this.glyphIterator.reset(lookup.flags, this.glyphIterator.index);

                            // Apply lookup subtables until one matches
                            for (var _iterator11 = lookup.subTables, _isArray11 = Array.isArray(_iterator11), _i11 = 0, _iterator11 = _isArray11 ? _iterator11 : _getIterator(_iterator11);;) {
                                var _ref12;

                                if (_isArray11) {
                                    if (_i11 >= _iterator11.length) break;
                                    _ref12 = _iterator11[_i11++];
                                } else {
                                    _i11 = _iterator11.next();
                                    if (_i11.done) break;
                                    _ref12 = _i11.value;
                                }

                                var table = _ref12;

                                if (this.applyLookup(lookup.lookupType, table)) {
                                    break;
                                }
                            }
                        }

                        this.glyphIterator.reset(options, glyphIndex);
                        return true;
                    };

                    OTProcessor.prototype.coverageIndex = function coverageIndex(coverage, glyph) {
                        if (glyph == null) {
                            glyph = this.glyphIterator.cur.id;
                        }

                        switch (coverage.version) {
                            case 1:
                                return coverage.glyphs.indexOf(glyph);

                            case 2:
                                for (var _iterator12 = coverage.rangeRecords, _isArray12 = Array.isArray(_iterator12), _i12 = 0, _iterator12 = _isArray12 ? _iterator12 : _getIterator(_iterator12);;) {
                                    var _ref13;

                                    if (_isArray12) {
                                        if (_i12 >= _iterator12.length) break;
                                        _ref13 = _iterator12[_i12++];
                                    } else {
                                        _i12 = _iterator12.next();
                                        if (_i12.done) break;
                                        _ref13 = _i12.value;
                                    }

                                    var range = _ref13;

                                    if (range.start <= glyph && glyph <= range.end) {
                                        return range.startCoverageIndex + glyph - range.start;
                                    }
                                }

                                break;
                        }

                        return -1;
                    };

                    OTProcessor.prototype.match = function match(sequenceIndex, sequence, fn, matched) {
                        var pos = this.glyphIterator.index;
                        var glyph = this.glyphIterator.increment(sequenceIndex);
                        var idx = 0;

                        while (idx < sequence.length && glyph && fn(sequence[idx], glyph)) {
                            if (matched) {
                                matched.push(this.glyphIterator.index);
                            }

                            idx++;
                            glyph = this.glyphIterator.next();
                        }

                        this.glyphIterator.index = pos;
                        if (idx < sequence.length) {
                            return false;
                        }

                        return matched || true;
                    };

                    OTProcessor.prototype.sequenceMatches = function sequenceMatches(sequenceIndex, sequence) {
                        return this.match(sequenceIndex, sequence, function (component, glyph) {
                            return component === glyph.id;
                        });
                    };

                    OTProcessor.prototype.sequenceMatchIndices = function sequenceMatchIndices(sequenceIndex, sequence) {
                        var _this = this;

                        return this.match(sequenceIndex, sequence, function (component, glyph) {
                            // If the current feature doesn't apply to this glyph,
                            if (!(_this.currentFeature in glyph.features)) {
                                return false;
                            }

                            return component === glyph.id;
                        }, []);
                    };

                    OTProcessor.prototype.coverageSequenceMatches = function coverageSequenceMatches(sequenceIndex, sequence) {
                        var _this2 = this;

                        return this.match(sequenceIndex, sequence, function (coverage, glyph) {
                            return _this2.coverageIndex(coverage, glyph.id) >= 0;
                        });
                    };

                    OTProcessor.prototype.getClassID = function getClassID(glyph, classDef) {
                        switch (classDef.version) {
                            case 1:
                                // Class array
                                var i = glyph - classDef.startGlyph;
                                if (i >= 0 && i < classDef.classValueArray.length) {
                                    return classDef.classValueArray[i];
                                }

                                break;

                            case 2:
                                for (var _iterator13 = classDef.classRangeRecord, _isArray13 = Array.isArray(_iterator13), _i13 = 0, _iterator13 = _isArray13 ? _iterator13 : _getIterator(_iterator13);;) {
                                    var _ref14;

                                    if (_isArray13) {
                                        if (_i13 >= _iterator13.length) break;
                                        _ref14 = _iterator13[_i13++];
                                    } else {
                                        _i13 = _iterator13.next();
                                        if (_i13.done) break;
                                        _ref14 = _i13.value;
                                    }

                                    var range = _ref14;

                                    if (range.start <= glyph && glyph <= range.end) {
                                        return range.class;
                                    }
                                }

                                break;
                        }

                        return 0;
                    };

                    OTProcessor.prototype.classSequenceMatches = function classSequenceMatches(sequenceIndex, sequence, classDef) {
                        var _this3 = this;

                        return this.match(sequenceIndex, sequence, function (classID, glyph) {
                            return classID === _this3.getClassID(glyph.id, classDef);
                        });
                    };

                    OTProcessor.prototype.applyContext = function applyContext(table) {
                        switch (table.version) {
                            case 1:
                                var index = this.coverageIndex(table.coverage);
                                if (index === -1) {
                                    return false;
                                }

                                var set = table.ruleSets[index];
                                for (var _iterator14 = set, _isArray14 = Array.isArray(_iterator14), _i14 = 0, _iterator14 = _isArray14 ? _iterator14 : _getIterator(_iterator14);;) {
                                    var _ref15;

                                    if (_isArray14) {
                                        if (_i14 >= _iterator14.length) break;
                                        _ref15 = _iterator14[_i14++];
                                    } else {
                                        _i14 = _iterator14.next();
                                        if (_i14.done) break;
                                        _ref15 = _i14.value;
                                    }

                                    var rule = _ref15;

                                    if (this.sequenceMatches(1, rule.input)) {
                                        return this.applyLookupList(rule.lookupRecords);
                                    }
                                }

                                break;

                            case 2:
                                if (this.coverageIndex(table.coverage) === -1) {
                                    return false;
                                }

                                index = this.getClassID(this.glyphIterator.cur.id, table.classDef);
                                if (index === -1) {
                                    return false;
                                }

                                set = table.classSet[index];
                                for (var _iterator15 = set, _isArray15 = Array.isArray(_iterator15), _i15 = 0, _iterator15 = _isArray15 ? _iterator15 : _getIterator(_iterator15);;) {
                                    var _ref16;

                                    if (_isArray15) {
                                        if (_i15 >= _iterator15.length) break;
                                        _ref16 = _iterator15[_i15++];
                                    } else {
                                        _i15 = _iterator15.next();
                                        if (_i15.done) break;
                                        _ref16 = _i15.value;
                                    }

                                    var _rule = _ref16;

                                    if (this.classSequenceMatches(1, _rule.classes, table.classDef)) {
                                        return this.applyLookupList(_rule.lookupRecords);
                                    }
                                }

                                break;

                            case 3:
                                if (this.coverageSequenceMatches(0, table.coverages)) {
                                    return this.applyLookupList(table.lookupRecords);
                                }

                                break;
                        }

                        return false;
                    };

                    OTProcessor.prototype.applyChainingContext = function applyChainingContext(table) {
                        switch (table.version) {
                            case 1:
                                var index = this.coverageIndex(table.coverage);
                                if (index === -1) {
                                    return false;
                                }

                                var set = table.chainRuleSets[index];
                                for (var _iterator16 = set, _isArray16 = Array.isArray(_iterator16), _i16 = 0, _iterator16 = _isArray16 ? _iterator16 : _getIterator(_iterator16);;) {
                                    var _ref17;

                                    if (_isArray16) {
                                        if (_i16 >= _iterator16.length) break;
                                        _ref17 = _iterator16[_i16++];
                                    } else {
                                        _i16 = _iterator16.next();
                                        if (_i16.done) break;
                                        _ref17 = _i16.value;
                                    }

                                    var rule = _ref17;

                                    if (this.sequenceMatches(-rule.backtrack.length, rule.backtrack) && this.sequenceMatches(1, rule.input) && this.sequenceMatches(1 + rule.input.length, rule.lookahead)) {
                                        return this.applyLookupList(rule.lookupRecords);
                                    }
                                }

                                break;

                            case 2:
                                if (this.coverageIndex(table.coverage) === -1) {
                                    return false;
                                }

                                index = this.getClassID(this.glyphIterator.cur.id, table.inputClassDef);
                                var rules = table.chainClassSet[index];
                                if (!rules) {
                                    return false;
                                }

                                for (var _iterator17 = rules, _isArray17 = Array.isArray(_iterator17), _i17 = 0, _iterator17 = _isArray17 ? _iterator17 : _getIterator(_iterator17);;) {
                                    var _ref18;

                                    if (_isArray17) {
                                        if (_i17 >= _iterator17.length) break;
                                        _ref18 = _iterator17[_i17++];
                                    } else {
                                        _i17 = _iterator17.next();
                                        if (_i17.done) break;
                                        _ref18 = _i17.value;
                                    }

                                    var _rule2 = _ref18;

                                    if (this.classSequenceMatches(-_rule2.backtrack.length, _rule2.backtrack, table.backtrackClassDef) && this.classSequenceMatches(1, _rule2.input, table.inputClassDef) && this.classSequenceMatches(1 + _rule2.input.length, _rule2.lookahead, table.lookaheadClassDef)) {
                                        return this.applyLookupList(_rule2.lookupRecords);
                                    }
                                }

                                break;

                            case 3:
                                if (this.coverageSequenceMatches(-table.backtrackGlyphCount, table.backtrackCoverage) && this.coverageSequenceMatches(0, table.inputCoverage) && this.coverageSequenceMatches(table.inputGlyphCount, table.lookaheadCoverage)) {
                                    return this.applyLookupList(table.lookupRecords);
                                }

                                break;
                        }

                        return false;
                    };

                    return OTProcessor;
                }();

                var GlyphInfo = function () {
                    function GlyphInfo(font, id) {
                        var codePoints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
                        var features = arguments[3];

                        _classCallCheck(this, GlyphInfo);

                        this._font = font;
                        this.codePoints = codePoints;
                        this.id = id;

                        this.features = {};
                        if (Array.isArray(features)) {
                            for (var i = 0; i < features.length; i++) {
                                var feature = features[i];
                                this.features[feature] = true;
                            }
                        } else if ((typeof features === 'undefined' ? 'undefined' : _typeof(features)) === 'object') {
                            _Object$assign(this.features, features);
                        }

                        this.ligatureID = null;
                        this.ligatureComponent = null;
                        this.isLigated = false;
                        this.cursiveAttachment = null;
                        this.markAttachment = null;
                        this.shaperInfo = null;
                        this.substituted = false;
                        this.isMultiplied = false;
                    }

                    GlyphInfo.prototype.copy = function copy() {
                        return new GlyphInfo(this._font, this.id, this.codePoints, this.features);
                    };

                    _createClass(GlyphInfo, [{
                        key: 'id',
                        get: function get() {
                            return this._id;
                        },
                        set: function set(id) {
                            this._id = id;
                            this.substituted = true;

                            var GDEF = this._font.GDEF;
                            if (GDEF && GDEF.glyphClassDef) {
                                // TODO: clean this up
                                var classID = OTProcessor.prototype.getClassID(id, GDEF.glyphClassDef);
                                this.isBase = classID === 1;
                                this.isLigature = classID === 2;
                                this.isMark = classID === 3;
                                this.markAttachmentType = GDEF.markAttachClassDef ? OTProcessor.prototype.getClassID(id, GDEF.markAttachClassDef) : 0;
                            } else {
                                this.isMark = this.codePoints.every(unicode.isMark);
                                this.isBase = !this.isMark;
                                this.isLigature = this.codePoints.length > 1;
                                this.markAttachmentType = 0;
                            }
                        }
                    }]);

                    return GlyphInfo;
                }();

                var _class$5;
                var _temp$1;
                /**
                 * This is a shaper for the Hangul script, used by the Korean language.
                 * It does the following:
                 *   - decompose if unsupported by the font:
                 *     <LV>   -> <L,V>
                 *     <LVT>  -> <L,V,T>
                 *     <LV,T> -> <L,V,T>
                 *
                 *   - compose if supported by the font:
                 *     <L,V>   -> <LV>
                 *     <L,V,T> -> <LVT>
                 *     <LV,T>  -> <LVT>
                 *
                 *   - reorder tone marks (S is any valid syllable):
                 *     <S, M> -> <M, S>
                 *
                 *   - apply ljmo, vjmo, and tjmo OpenType features to decomposed Jamo sequences.
                 *
                 * This logic is based on the following documents:
                 *   - http://www.microsoft.com/typography/OpenTypeDev/hangul/intro.htm
                 *   - http://ktug.org/~nomos/harfbuzz-hangul/hangulshaper.pdf
                 */
                var HangulShaper = (_temp$1 = _class$5 = function (_DefaultShaper) {
                    _inherits(HangulShaper, _DefaultShaper);

                    function HangulShaper() {
                        _classCallCheck(this, HangulShaper);

                        return _possibleConstructorReturn(this, _DefaultShaper.apply(this, arguments));
                    }

                    HangulShaper.planFeatures = function planFeatures(plan) {
                        plan.add(['ljmo', 'vjmo', 'tjmo'], false);
                    };

                    HangulShaper.assignFeatures = function assignFeatures(plan, glyphs) {
                        var state = 0;
                        var i = 0;
                        while (i < glyphs.length) {
                            var action = void 0;
                            var glyph = glyphs[i];
                            var code = glyph.codePoints[0];
                            var type = getType(code);

                            var _STATE_TABLE$state$ty = STATE_TABLE$1[state][type];
                            action = _STATE_TABLE$state$ty[0];
                            state = _STATE_TABLE$state$ty[1];


                            switch (action) {
                                case DECOMPOSE:
                                    // Decompose the composed syllable if it is not supported by the font.
                                    if (!plan.font.hasGlyphForCodePoint(code)) {
                                        i = decompose(glyphs, i, plan.font);
                                    }
                                    break;

                                case COMPOSE:
                                    // Found a decomposed syllable. Try to compose if supported by the font.
                                    i = compose(glyphs, i, plan.font);
                                    break;

                                case TONE_MARK:
                                    // Got a valid syllable, followed by a tone mark. Move the tone mark to the beginning of the syllable.
                                    reorderToneMark(glyphs, i, plan.font);
                                    break;

                                case INVALID:
                                    // Tone mark has no valid syllable to attach to, so insert a dotted circle
                                    i = insertDottedCircle(glyphs, i, plan.font);
                                    break;
                            }

                            i++;
                        }
                    };

                    return HangulShaper;
                }(DefaultShaper), _class$5.zeroMarkWidths = 'NONE', _temp$1);
                var HANGUL_BASE = 0xac00;
                var HANGUL_END = 0xd7a4;
                var HANGUL_COUNT = HANGUL_END - HANGUL_BASE + 1;
                var L_BASE = 0x1100; // lead
                var V_BASE = 0x1161; // vowel
                var T_BASE = 0x11a7; // trail
                var L_COUNT = 19;
                var V_COUNT = 21;
                var T_COUNT = 28;
                var L_END = L_BASE + L_COUNT - 1;
                var V_END = V_BASE + V_COUNT - 1;
                var T_END = T_BASE + T_COUNT - 1;
                var DOTTED_CIRCLE = 0x25cc;

                var isL = function isL(code) {
                    return 0x1100 <= code && code <= 0x115f || 0xa960 <= code && code <= 0xa97c;
                };
                var isV = function isV(code) {
                    return 0x1160 <= code && code <= 0x11a7 || 0xd7b0 <= code && code <= 0xd7c6;
                };
                var isT = function isT(code) {
                    return 0x11a8 <= code && code <= 0x11ff || 0xd7cb <= code && code <= 0xd7fb;
                };
                var isTone = function isTone(code) {
                    return 0x302e <= code && code <= 0x302f;
                };
                var isLVT = function isLVT(code) {
                    return HANGUL_BASE <= code && code <= HANGUL_END;
                };
                var isLV = function isLV(code) {
                    return code - HANGUL_BASE < HANGUL_COUNT && (code - HANGUL_BASE) % T_COUNT === 0;
                };
                var isCombiningL = function isCombiningL(code) {
                    return L_BASE <= code && code <= L_END;
                };
                var isCombiningV = function isCombiningV(code) {
                    return V_BASE <= code && code <= V_END;
                };
                var isCombiningT = function isCombiningT(code) {
                    return T_BASE + 1 && 1 <= code && code <= T_END;
                };

                // Character categories
                var X = 0; // Other character
                var L = 1; // Leading consonant
                var V = 2; // Medial vowel
                var T = 3; // Trailing consonant
                var LV = 4; // Composed <LV> syllable
                var LVT = 5; // Composed <LVT> syllable
                var M = 6; // Tone mark

                // This function classifies a character using the above categories.
                function getType(code) {
                    if (isL(code)) {
                        return L;
                    }
                    if (isV(code)) {
                        return V;
                    }
                    if (isT(code)) {
                        return T;
                    }
                    if (isLV(code)) {
                        return LV;
                    }
                    if (isLVT(code)) {
                        return LVT;
                    }
                    if (isTone(code)) {
                        return M;
                    }
                    return X;
                }

                // State machine actions
                var NO_ACTION = 0;
                var DECOMPOSE = 1;
                var COMPOSE = 2;
                var TONE_MARK = 4;
                var INVALID = 5;

                // Build a state machine that accepts valid syllables, and applies actions along the way.
                // The logic this is implementing is documented at the top of the file.
                var STATE_TABLE$1 = [
                    //       X                 L                 V                T                  LV                LVT               M
                    // State 0: start state
                    [[NO_ACTION, 0], [NO_ACTION, 1], [NO_ACTION, 0], [NO_ACTION, 0], [DECOMPOSE, 2], [DECOMPOSE, 3], [INVALID, 0]],

                    // State 1: <L>
                    [[NO_ACTION, 0], [NO_ACTION, 1], [COMPOSE, 2], [NO_ACTION, 0], [DECOMPOSE, 2], [DECOMPOSE, 3], [INVALID, 0]],

                    // State 2: <L,V> or <LV>
                    [[NO_ACTION, 0], [NO_ACTION, 1], [NO_ACTION, 0], [COMPOSE, 3], [DECOMPOSE, 2], [DECOMPOSE, 3], [TONE_MARK, 0]],

                    // State 3: <L,V,T> or <LVT>
                    [[NO_ACTION, 0], [NO_ACTION, 1], [NO_ACTION, 0], [NO_ACTION, 0], [DECOMPOSE, 2], [DECOMPOSE, 3], [TONE_MARK, 0]]];

                function getGlyph(font, code, features) {
                    return new GlyphInfo(font, font.glyphForCodePoint(code).id, [code], features);
                }

                function decompose(glyphs, i, font) {
                    var glyph = glyphs[i];
                    var code = glyph.codePoints[0];

                    var s = code - HANGUL_BASE;
                    var t = T_BASE + s % T_COUNT;
                    s = s / T_COUNT | 0;
                    var l = L_BASE + s / V_COUNT | 0;
                    var v = V_BASE + s % V_COUNT;

                    // Don't decompose if all of the components are not available
                    if (!font.hasGlyphForCodePoint(l) || !font.hasGlyphForCodePoint(v) || t !== T_BASE && !font.hasGlyphForCodePoint(t)) {
                        return i;
                    }

                    // Replace the current glyph with decomposed L, V, and T glyphs,
                    // and apply the proper OpenType features to each component.
                    var ljmo = getGlyph(font, l, glyph.features);
                    ljmo.features.ljmo = true;

                    var vjmo = getGlyph(font, v, glyph.features);
                    vjmo.features.vjmo = true;

                    var insert = [ljmo, vjmo];

                    if (t > T_BASE) {
                        var tjmo = getGlyph(font, t, glyph.features);
                        tjmo.features.tjmo = true;
                        insert.push(tjmo);
                    }

                    glyphs.splice.apply(glyphs, [i, 1].concat(insert));
                    return i + insert.length - 1;
                }

                function compose(glyphs, i, font) {
                    var glyph = glyphs[i];
                    var code = glyphs[i].codePoints[0];
                    var type = getType(code);

                    var prev = glyphs[i - 1].codePoints[0];
                    var prevType = getType(prev);

                    // Figure out what type of syllable we're dealing with
                    var lv = void 0,
                        ljmo = void 0,
                        vjmo = void 0,
                        tjmo = void 0;
                    if (prevType === LV && type === T) {
                        // <LV,T>
                        lv = prev;
                        tjmo = glyph;
                    } else {
                        if (type === V) {
                            // <L,V>
                            ljmo = glyphs[i - 1];
                            vjmo = glyph;
                        } else {
                            // <L,V,T>
                            ljmo = glyphs[i - 2];
                            vjmo = glyphs[i - 1];
                            tjmo = glyph;
                        }

                        var l = ljmo.codePoints[0];
                        var v = vjmo.codePoints[0];

                        // Make sure L and V are combining characters
                        if (isCombiningL(l) && isCombiningV(v)) {
                            lv = HANGUL_BASE + ((l - L_BASE) * V_COUNT + (v - V_BASE)) * T_COUNT;
                        }
                    }

                    var t = tjmo && tjmo.codePoints[0] || T_BASE;
                    if (lv != null && (t === T_BASE || isCombiningT(t))) {
                        var s = lv + (t - T_BASE);

                        // Replace with a composed glyph if supported by the font,
                        // otherwise apply the proper OpenType features to each component.
                        if (font.hasGlyphForCodePoint(s)) {
                            var del = prevType === V ? 3 : 2;
                            glyphs.splice(i - del + 1, del, getGlyph(font, s, glyph.features));
                            return i - del + 1;
                        }
                    }

                    // Didn't compose (either a non-combining component or unsupported by font).
                    if (ljmo) {
                        ljmo.features.ljmo = true;
                    }
                    if (vjmo) {
                        vjmo.features.vjmo = true;
                    }
                    if (tjmo) {
                        tjmo.features.tjmo = true;
                    }

                    if (prevType === LV) {
                        // Sequence was originally <L,V>, which got combined earlier.
                        // Either the T was non-combining, or the LVT glyph wasn't supported.
                        // Decompose the glyph again and apply OT features.
                        decompose(glyphs, i - 1, font);
                        return i + 1;
                    }

                    return i;
                }

                function getLength(code) {
                    switch (getType(code)) {
                        case LV:
                        case LVT:
                            return 1;
                        case V:
                            return 2;
                        case T:
                            return 3;
                    }
                }

                function reorderToneMark(glyphs, i, font) {
                    var glyph = glyphs[i];
                    var code = glyphs[i].codePoints[0];

                    // Move tone mark to the beginning of the previous syllable, unless it is zero width
                    if (font.glyphForCodePoint(code).advanceWidth === 0) {
                        return;
                    }

                    var prev = glyphs[i - 1].codePoints[0];
                    var len = getLength(prev);

                    glyphs.splice(i, 1);
                    return glyphs.splice(i - len, 0, glyph);
                }

                function insertDottedCircle(glyphs, i, font) {
                    var glyph = glyphs[i];
                    var code = glyphs[i].codePoints[0];

                    if (font.hasGlyphForCodePoint(DOTTED_CIRCLE)) {
                        var dottedCircle = getGlyph(font, DOTTED_CIRCLE, glyph.features);

                        // If the tone mark is zero width, insert the dotted circle before, otherwise after
                        var idx = font.glyphForCodePoint(code).advanceWidth === 0 ? i : i + 1;
                        glyphs.splice(idx, 0, dottedCircle);
                        i++;
                    }

                    return i;
                }

                var stateTable = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 18, 19, 20, 21, 22, 23, 0, 24, 0, 0, 25, 26, 0, 0, 27, 0], [0, 0, 0, 28, 29, 30, 31, 32, 33, 0, 34, 0, 0, 35, 36, 0, 0, 37, 0], [0, 0, 0, 38, 5, 7, 7, 8, 9, 0, 10, 0, 0, 0, 13, 0, 0, 16, 0], [0, 39, 0, 0, 0, 40, 41, 0, 9, 0, 10, 0, 0, 0, 42, 0, 39, 0, 0], [0, 0, 0, 0, 43, 44, 44, 8, 9, 0, 0, 0, 0, 12, 43, 0, 0, 0, 0], [0, 0, 0, 0, 43, 44, 44, 8, 9, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0], [0, 0, 0, 45, 46, 47, 48, 49, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 50, 0, 0, 51, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 53, 54, 55, 56, 57, 58, 0, 59, 0, 0, 60, 61, 0, 0, 62, 0], [0, 0, 0, 4, 5, 7, 7, 8, 9, 0, 10, 0, 0, 0, 13, 0, 0, 16, 0], [0, 63, 64, 0, 0, 40, 41, 0, 9, 0, 10, 0, 0, 0, 42, 0, 63, 0, 0], [0, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 11, 12, 13, 0, 2, 16, 0], [0, 0, 0, 18, 65, 20, 21, 22, 23, 0, 24, 0, 0, 25, 26, 0, 0, 27, 0], [0, 0, 0, 0, 66, 67, 67, 8, 9, 0, 10, 0, 0, 0, 68, 0, 0, 0, 0], [0, 0, 0, 69, 0, 70, 70, 0, 71, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 73, 19, 74, 74, 22, 23, 0, 24, 0, 0, 0, 26, 0, 0, 27, 0], [0, 75, 0, 0, 0, 76, 77, 0, 23, 0, 24, 0, 0, 0, 78, 0, 75, 0, 0], [0, 0, 0, 0, 79, 80, 80, 22, 23, 0, 0, 0, 0, 25, 79, 0, 0, 0, 0], [0, 0, 0, 18, 19, 20, 74, 22, 23, 0, 24, 0, 0, 25, 26, 0, 0, 27, 0], [0, 0, 0, 81, 82, 83, 84, 85, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 86, 0, 0, 87, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 18, 19, 74, 74, 22, 23, 0, 24, 0, 0, 0, 26, 0, 0, 27, 0], [0, 89, 90, 0, 0, 76, 77, 0, 23, 0, 24, 0, 0, 0, 78, 0, 89, 0, 0], [0, 0, 0, 0, 91, 92, 92, 22, 23, 0, 24, 0, 0, 0, 93, 0, 0, 0, 0], [0, 0, 0, 94, 29, 95, 31, 32, 33, 0, 34, 0, 0, 0, 36, 0, 0, 37, 0], [0, 96, 0, 0, 0, 97, 98, 0, 33, 0, 34, 0, 0, 0, 99, 0, 96, 0, 0], [0, 0, 0, 0, 100, 101, 101, 32, 33, 0, 0, 0, 0, 35, 100, 0, 0, 0, 0], [0, 0, 0, 0, 100, 101, 101, 32, 33, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0], [0, 0, 0, 102, 103, 104, 105, 106, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 107, 0, 0, 108, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 28, 29, 95, 31, 32, 33, 0, 34, 0, 0, 0, 36, 0, 0, 37, 0], [0, 110, 111, 0, 0, 97, 98, 0, 33, 0, 34, 0, 0, 0, 99, 0, 110, 0, 0], [0, 0, 0, 0, 112, 113, 113, 32, 33, 0, 34, 0, 0, 0, 114, 0, 0, 0, 0], [0, 0, 0, 0, 5, 7, 7, 8, 9, 0, 10, 0, 0, 0, 13, 0, 0, 16, 0], [0, 0, 0, 115, 116, 117, 118, 8, 9, 0, 10, 0, 0, 119, 120, 0, 0, 16, 0], [0, 0, 0, 0, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 39, 0, 122, 0, 123, 123, 8, 9, 0, 10, 0, 0, 0, 42, 0, 39, 0, 0], [0, 124, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 0, 0], [0, 39, 0, 0, 0, 121, 125, 0, 9, 0, 10, 0, 0, 0, 42, 0, 39, 0, 0], [0, 0, 0, 0, 0, 126, 126, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 46, 47, 48, 49, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 47, 47, 49, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 127, 127, 49, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 128, 127, 127, 49, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 129, 130, 131, 132, 133, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 135, 54, 56, 56, 57, 58, 0, 59, 0, 0, 0, 61, 0, 0, 62, 0], [0, 136, 0, 0, 0, 137, 138, 0, 58, 0, 59, 0, 0, 0, 139, 0, 136, 0, 0], [0, 0, 0, 0, 140, 141, 141, 57, 58, 0, 0, 0, 0, 60, 140, 0, 0, 0, 0], [0, 0, 0, 0, 140, 141, 141, 57, 58, 0, 0, 0, 0, 0, 140, 0, 0, 0, 0], [0, 0, 0, 142, 143, 144, 145, 146, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 147, 0, 0, 148, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 149, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 53, 54, 56, 56, 57, 58, 0, 59, 0, 0, 0, 61, 0, 0, 62, 0], [0, 150, 151, 0, 0, 137, 138, 0, 58, 0, 59, 0, 0, 0, 139, 0, 150, 0, 0], [0, 0, 0, 0, 152, 153, 153, 57, 58, 0, 59, 0, 0, 0, 154, 0, 0, 0, 0], [0, 0, 0, 155, 116, 156, 157, 8, 9, 0, 10, 0, 0, 158, 120, 0, 0, 16, 0], [0, 0, 0, 0, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0], [0, 75, 3, 4, 5, 159, 160, 8, 161, 0, 162, 0, 11, 12, 163, 0, 75, 16, 0], [0, 0, 0, 0, 0, 40, 164, 0, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 165, 44, 44, 8, 9, 0, 0, 0, 0, 0, 165, 0, 0, 0, 0], [0, 124, 64, 0, 0, 40, 164, 0, 9, 0, 10, 0, 0, 0, 42, 0, 124, 0, 0], [0, 0, 0, 0, 0, 70, 70, 0, 71, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 166, 0, 0, 167, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 168, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 19, 74, 74, 22, 23, 0, 24, 0, 0, 0, 26, 0, 0, 27, 0], [0, 0, 0, 0, 79, 80, 80, 22, 23, 0, 0, 0, 0, 0, 79, 0, 0, 0, 0], [0, 0, 0, 169, 170, 171, 172, 22, 23, 0, 24, 0, 0, 173, 174, 0, 0, 27, 0], [0, 0, 0, 0, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 75, 0, 176, 0, 177, 177, 22, 23, 0, 24, 0, 0, 0, 78, 0, 75, 0, 0], [0, 178, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 178, 0, 0], [0, 75, 0, 0, 0, 175, 179, 0, 23, 0, 24, 0, 0, 0, 78, 0, 75, 0, 0], [0, 0, 0, 0, 0, 180, 180, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 82, 83, 84, 85, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 83, 83, 85, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 181, 181, 85, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 182, 181, 181, 85, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 183, 184, 185, 186, 187, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 188, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 189, 170, 190, 191, 22, 23, 0, 24, 0, 0, 192, 174, 0, 0, 27, 0], [0, 0, 0, 0, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 76, 193, 0, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 194, 80, 80, 22, 23, 0, 0, 0, 0, 0, 194, 0, 0, 0, 0], [0, 178, 90, 0, 0, 76, 193, 0, 23, 0, 24, 0, 0, 0, 78, 0, 178, 0, 0], [0, 0, 0, 0, 29, 95, 31, 32, 33, 0, 34, 0, 0, 0, 36, 0, 0, 37, 0], [0, 0, 0, 0, 100, 101, 101, 32, 33, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0], [0, 0, 0, 195, 196, 197, 198, 32, 33, 0, 34, 0, 0, 199, 200, 0, 0, 37, 0], [0, 0, 0, 0, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 96, 0, 202, 0, 203, 203, 32, 33, 0, 34, 0, 0, 0, 99, 0, 96, 0, 0], [0, 204, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 204, 0, 0], [0, 96, 0, 0, 0, 201, 205, 0, 33, 0, 34, 0, 0, 0, 99, 0, 96, 0, 0], [0, 0, 0, 0, 0, 206, 206, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 103, 104, 105, 106, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 104, 104, 106, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 207, 207, 106, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 208, 207, 207, 106, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 209, 210, 211, 212, 213, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 107, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 214, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 215, 196, 216, 217, 32, 33, 0, 34, 0, 0, 218, 200, 0, 0, 37, 0], [0, 0, 0, 0, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 97, 219, 0, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 220, 101, 101, 32, 33, 0, 0, 0, 0, 0, 220, 0, 0, 0, 0], [0, 204, 111, 0, 0, 97, 219, 0, 33, 0, 34, 0, 0, 0, 99, 0, 204, 0, 0], [0, 0, 0, 221, 116, 222, 222, 8, 9, 0, 10, 0, 0, 0, 120, 0, 0, 16, 0], [0, 223, 0, 0, 0, 40, 224, 0, 9, 0, 10, 0, 0, 0, 42, 0, 223, 0, 0], [0, 0, 0, 0, 225, 44, 44, 8, 9, 0, 0, 0, 0, 119, 225, 0, 0, 0, 0], [0, 0, 0, 115, 116, 117, 222, 8, 9, 0, 10, 0, 0, 119, 120, 0, 0, 16, 0], [0, 0, 0, 115, 116, 222, 222, 8, 9, 0, 10, 0, 0, 0, 120, 0, 0, 16, 0], [0, 226, 64, 0, 0, 40, 224, 0, 9, 0, 10, 0, 0, 0, 42, 0, 226, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 39, 0, 0, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 39, 0, 0], [0, 0, 0, 0, 0, 44, 44, 8, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 227, 0, 228, 229, 0, 9, 0, 10, 0, 0, 230, 0, 0, 0, 0, 0], [0, 39, 0, 122, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 39, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 231, 231, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 130, 131, 132, 133, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 131, 131, 133, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 233, 233, 133, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 234, 233, 233, 133, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 235, 236, 237, 238, 239, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 54, 56, 56, 57, 58, 0, 59, 0, 0, 0, 61, 0, 0, 62, 0], [0, 0, 0, 240, 241, 242, 243, 57, 58, 0, 59, 0, 0, 244, 245, 0, 0, 62, 0], [0, 0, 0, 0, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 136, 0, 247, 0, 248, 248, 57, 58, 0, 59, 0, 0, 0, 139, 0, 136, 0, 0], [0, 249, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 249, 0, 0], [0, 136, 0, 0, 0, 246, 250, 0, 58, 0, 59, 0, 0, 0, 139, 0, 136, 0, 0], [0, 0, 0, 0, 0, 251, 251, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 143, 144, 145, 146, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 144, 144, 146, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 252, 252, 146, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 253, 252, 252, 146, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 254, 255, 256, 257, 258, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 147, 0, 0, 0, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 259, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 260, 241, 261, 262, 57, 58, 0, 59, 0, 0, 263, 245, 0, 0, 62, 0], [0, 0, 0, 0, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 137, 264, 0, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 265, 141, 141, 57, 58, 0, 0, 0, 0, 0, 265, 0, 0, 0, 0], [0, 249, 151, 0, 0, 137, 264, 0, 58, 0, 59, 0, 0, 0, 139, 0, 249, 0, 0], [0, 0, 0, 221, 116, 222, 222, 8, 9, 0, 10, 0, 0, 0, 120, 0, 0, 16, 0], [0, 0, 0, 0, 225, 44, 44, 8, 9, 0, 0, 0, 0, 158, 225, 0, 0, 0, 0], [0, 0, 0, 155, 116, 156, 222, 8, 9, 0, 10, 0, 0, 158, 120, 0, 0, 16, 0], [0, 0, 0, 155, 116, 222, 222, 8, 9, 0, 10, 0, 0, 0, 120, 0, 0, 16, 0], [0, 0, 0, 0, 43, 266, 266, 8, 161, 0, 24, 0, 0, 12, 267, 0, 0, 0, 0], [0, 75, 0, 176, 43, 268, 268, 269, 161, 0, 24, 0, 0, 0, 267, 0, 75, 0, 0], [0, 0, 0, 0, 0, 270, 0, 0, 271, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 272, 0, 0, 0, 0, 0, 0, 0, 0], [0, 273, 274, 0, 0, 40, 41, 0, 9, 0, 10, 0, 0, 0, 42, 0, 273, 0, 0], [0, 0, 0, 40, 0, 123, 123, 8, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 121, 275, 0, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 166, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 276, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 277, 170, 278, 278, 22, 23, 0, 24, 0, 0, 0, 174, 0, 0, 27, 0], [0, 279, 0, 0, 0, 76, 280, 0, 23, 0, 24, 0, 0, 0, 78, 0, 279, 0, 0], [0, 0, 0, 0, 281, 80, 80, 22, 23, 0, 0, 0, 0, 173, 281, 0, 0, 0, 0], [0, 0, 0, 169, 170, 171, 278, 22, 23, 0, 24, 0, 0, 173, 174, 0, 0, 27, 0], [0, 0, 0, 169, 170, 278, 278, 22, 23, 0, 24, 0, 0, 0, 174, 0, 0, 27, 0], [0, 282, 90, 0, 0, 76, 280, 0, 23, 0, 24, 0, 0, 0, 78, 0, 282, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 75, 0, 0, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 75, 0, 0], [0, 0, 0, 0, 0, 80, 80, 22, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 283, 0, 284, 285, 0, 23, 0, 24, 0, 0, 286, 0, 0, 0, 0, 0], [0, 75, 0, 176, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 75, 0, 0], [0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 287, 287, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 184, 185, 186, 187, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 185, 185, 187, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 289, 289, 187, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 290, 289, 289, 187, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 291, 292, 293, 294, 295, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 277, 170, 278, 278, 22, 23, 0, 24, 0, 0, 0, 174, 0, 0, 27, 0], [0, 0, 0, 0, 281, 80, 80, 22, 23, 0, 0, 0, 0, 192, 281, 0, 0, 0, 0], [0, 0, 0, 189, 170, 190, 278, 22, 23, 0, 24, 0, 0, 192, 174, 0, 0, 27, 0], [0, 0, 0, 189, 170, 278, 278, 22, 23, 0, 24, 0, 0, 0, 174, 0, 0, 27, 0], [0, 0, 0, 76, 0, 177, 177, 22, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 175, 296, 0, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 297, 196, 298, 298, 32, 33, 0, 34, 0, 0, 0, 200, 0, 0, 37, 0], [0, 299, 0, 0, 0, 97, 300, 0, 33, 0, 34, 0, 0, 0, 99, 0, 299, 0, 0], [0, 0, 0, 0, 301, 101, 101, 32, 33, 0, 0, 0, 0, 199, 301, 0, 0, 0, 0], [0, 0, 0, 195, 196, 197, 298, 32, 33, 0, 34, 0, 0, 199, 200, 0, 0, 37, 0], [0, 0, 0, 195, 196, 298, 298, 32, 33, 0, 34, 0, 0, 0, 200, 0, 0, 37, 0], [0, 302, 111, 0, 0, 97, 300, 0, 33, 0, 34, 0, 0, 0, 99, 0, 302, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 96, 0, 0, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 96, 0, 0], [0, 0, 0, 0, 0, 101, 101, 32, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 303, 0, 304, 305, 0, 33, 0, 34, 0, 0, 306, 0, 0, 0, 0, 0], [0, 96, 0, 202, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 96, 0, 0], [0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 307, 307, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 210, 211, 212, 213, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 211, 211, 213, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 309, 309, 213, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 310, 309, 309, 213, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 311, 312, 313, 314, 315, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 297, 196, 298, 298, 32, 33, 0, 34, 0, 0, 0, 200, 0, 0, 37, 0], [0, 0, 0, 0, 301, 101, 101, 32, 33, 0, 0, 0, 0, 218, 301, 0, 0, 0, 0], [0, 0, 0, 215, 196, 216, 298, 32, 33, 0, 34, 0, 0, 218, 200, 0, 0, 37, 0], [0, 0, 0, 215, 196, 298, 298, 32, 33, 0, 34, 0, 0, 0, 200, 0, 0, 37, 0], [0, 0, 0, 97, 0, 203, 203, 32, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 201, 316, 0, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 116, 222, 222, 8, 9, 0, 10, 0, 0, 0, 120, 0, 0, 16, 0], [0, 0, 0, 0, 225, 44, 44, 8, 9, 0, 0, 0, 0, 0, 225, 0, 0, 0, 0], [0, 0, 0, 317, 318, 319, 320, 8, 9, 0, 10, 0, 0, 321, 322, 0, 0, 16, 0], [0, 223, 0, 323, 0, 123, 123, 8, 9, 0, 10, 0, 0, 0, 42, 0, 223, 0, 0], [0, 223, 0, 0, 0, 121, 324, 0, 9, 0, 10, 0, 0, 0, 42, 0, 223, 0, 0], [0, 0, 0, 325, 318, 326, 327, 8, 9, 0, 10, 0, 0, 328, 322, 0, 0, 16, 0], [0, 0, 0, 64, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 230, 0, 0, 0, 0, 0], [0, 0, 0, 227, 0, 228, 121, 0, 9, 0, 10, 0, 0, 230, 0, 0, 0, 0, 0], [0, 0, 0, 227, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0], [0, 0, 0, 0, 0, 329, 329, 133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 330, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 236, 237, 238, 239, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 237, 237, 239, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 331, 331, 239, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 332, 331, 331, 239, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 333, 40, 121, 334, 0, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 335, 241, 336, 336, 57, 58, 0, 59, 0, 0, 0, 245, 0, 0, 62, 0], [0, 337, 0, 0, 0, 137, 338, 0, 58, 0, 59, 0, 0, 0, 139, 0, 337, 0, 0], [0, 0, 0, 0, 339, 141, 141, 57, 58, 0, 0, 0, 0, 244, 339, 0, 0, 0, 0], [0, 0, 0, 240, 241, 242, 336, 57, 58, 0, 59, 0, 0, 244, 245, 0, 0, 62, 0], [0, 0, 0, 240, 241, 336, 336, 57, 58, 0, 59, 0, 0, 0, 245, 0, 0, 62, 0], [0, 340, 151, 0, 0, 137, 338, 0, 58, 0, 59, 0, 0, 0, 139, 0, 340, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 136, 0, 0, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 136, 0, 0], [0, 0, 0, 0, 0, 141, 141, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 341, 0, 342, 343, 0, 58, 0, 59, 0, 0, 344, 0, 0, 0, 0, 0], [0, 136, 0, 247, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 136, 0, 0], [0, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 345, 345, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 346, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 255, 256, 257, 258, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 256, 256, 258, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 347, 347, 258, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 348, 347, 347, 258, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 349, 350, 351, 352, 353, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 335, 241, 336, 336, 57, 58, 0, 59, 0, 0, 0, 245, 0, 0, 62, 0], [0, 0, 0, 0, 339, 141, 141, 57, 58, 0, 0, 0, 0, 263, 339, 0, 0, 0, 0], [0, 0, 0, 260, 241, 261, 336, 57, 58, 0, 59, 0, 0, 263, 245, 0, 0, 62, 0], [0, 0, 0, 260, 241, 336, 336, 57, 58, 0, 59, 0, 0, 0, 245, 0, 0, 62, 0], [0, 0, 0, 137, 0, 248, 248, 57, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 246, 354, 0, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 126, 126, 8, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 355, 90, 0, 0, 121, 125, 0, 9, 0, 10, 0, 0, 0, 42, 0, 355, 0, 0], [0, 0, 0, 0, 0, 356, 356, 269, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 357, 358, 359, 360, 361, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 270, 0, 0, 0, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 363, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 364, 116, 365, 366, 8, 161, 0, 162, 0, 0, 367, 120, 0, 0, 16, 0], [0, 0, 0, 0, 0, 368, 368, 0, 161, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 40, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 170, 278, 278, 22, 23, 0, 24, 0, 0, 0, 174, 0, 0, 27, 0], [0, 0, 0, 0, 281, 80, 80, 22, 23, 0, 0, 0, 0, 0, 281, 0, 0, 0, 0], [0, 0, 0, 369, 370, 371, 372, 22, 23, 0, 24, 0, 0, 373, 374, 0, 0, 27, 0], [0, 279, 0, 375, 0, 177, 177, 22, 23, 0, 24, 0, 0, 0, 78, 0, 279, 0, 0], [0, 279, 0, 0, 0, 175, 376, 0, 23, 0, 24, 0, 0, 0, 78, 0, 279, 0, 0], [0, 0, 0, 377, 370, 378, 379, 22, 23, 0, 24, 0, 0, 380, 374, 0, 0, 27, 0], [0, 0, 0, 90, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 286, 0, 0, 0, 0, 0], [0, 0, 0, 283, 0, 284, 175, 0, 23, 0, 24, 0, 0, 286, 0, 0, 0, 0, 0], [0, 0, 0, 283, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0], [0, 0, 0, 0, 0, 381, 381, 187, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 382, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 292, 293, 294, 295, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 293, 293, 295, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 383, 383, 295, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 384, 383, 383, 295, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 385, 76, 175, 386, 0, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 76, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 196, 298, 298, 32, 33, 0, 34, 0, 0, 0, 200, 0, 0, 37, 0], [0, 0, 0, 0, 301, 101, 101, 32, 33, 0, 0, 0, 0, 0, 301, 0, 0, 0, 0], [0, 0, 0, 387, 388, 389, 390, 32, 33, 0, 34, 0, 0, 391, 392, 0, 0, 37, 0], [0, 299, 0, 393, 0, 203, 203, 32, 33, 0, 34, 0, 0, 0, 99, 0, 299, 0, 0], [0, 299, 0, 0, 0, 201, 394, 0, 33, 0, 34, 0, 0, 0, 99, 0, 299, 0, 0], [0, 0, 0, 395, 388, 396, 397, 32, 33, 0, 34, 0, 0, 398, 392, 0, 0, 37, 0], [0, 0, 0, 111, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 306, 0, 0, 0, 0, 0], [0, 0, 0, 303, 0, 304, 201, 0, 33, 0, 34, 0, 0, 306, 0, 0, 0, 0, 0], [0, 0, 0, 303, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 0, 0], [0, 0, 0, 0, 0, 399, 399, 213, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 312, 313, 314, 315, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 313, 313, 315, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 401, 401, 315, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 402, 401, 401, 315, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 403, 97, 201, 404, 0, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 97, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 405, 318, 406, 406, 8, 9, 0, 10, 0, 0, 0, 322, 0, 0, 16, 0], [0, 407, 0, 0, 0, 40, 408, 0, 9, 0, 10, 0, 0, 0, 42, 0, 407, 0, 0], [0, 0, 0, 0, 409, 44, 44, 8, 9, 0, 0, 0, 0, 321, 409, 0, 0, 0, 0], [0, 0, 0, 317, 318, 319, 406, 8, 9, 0, 10, 0, 0, 321, 322, 0, 0, 16, 0], [0, 0, 0, 317, 318, 406, 406, 8, 9, 0, 10, 0, 0, 0, 322, 0, 0, 16, 0], [0, 410, 64, 0, 0, 40, 408, 0, 9, 0, 10, 0, 0, 0, 42, 0, 410, 0, 0], [0, 223, 0, 0, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 223, 0, 0], [0, 223, 0, 323, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 223, 0, 0], [0, 0, 0, 405, 318, 406, 406, 8, 9, 0, 10, 0, 0, 0, 322, 0, 0, 16, 0], [0, 0, 0, 0, 409, 44, 44, 8, 9, 0, 0, 0, 0, 328, 409, 0, 0, 0, 0], [0, 0, 0, 325, 318, 326, 406, 8, 9, 0, 10, 0, 0, 328, 322, 0, 0, 16, 0], [0, 0, 0, 325, 318, 406, 406, 8, 9, 0, 10, 0, 0, 0, 322, 0, 0, 16, 0], [0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 0, 0], [0, 0, 0, 0, 0, 411, 411, 239, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 412, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 40, 121, 334, 0, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 413, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 241, 336, 336, 57, 58, 0, 59, 0, 0, 0, 245, 0, 0, 62, 0], [0, 0, 0, 0, 339, 141, 141, 57, 58, 0, 0, 0, 0, 0, 339, 0, 0, 0, 0], [0, 0, 0, 414, 415, 416, 417, 57, 58, 0, 59, 0, 0, 418, 419, 0, 0, 62, 0], [0, 337, 0, 420, 0, 248, 248, 57, 58, 0, 59, 0, 0, 0, 139, 0, 337, 0, 0], [0, 337, 0, 0, 0, 246, 421, 0, 58, 0, 59, 0, 0, 0, 139, 0, 337, 0, 0], [0, 0, 0, 422, 415, 423, 424, 57, 58, 0, 59, 0, 0, 425, 419, 0, 0, 62, 0], [0, 0, 0, 151, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0, 0, 344, 0, 0, 0, 0, 0], [0, 0, 0, 341, 0, 342, 246, 0, 58, 0, 59, 0, 0, 344, 0, 0, 0, 0, 0], [0, 0, 0, 341, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 143, 0, 0], [0, 0, 0, 0, 0, 426, 426, 258, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 427, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 350, 351, 352, 353, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 351, 351, 353, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 428, 428, 353, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 429, 428, 428, 353, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 430, 137, 246, 431, 0, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 137, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 432, 116, 433, 434, 8, 161, 0, 162, 0, 0, 435, 120, 0, 0, 16, 0], [0, 0, 0, 0, 0, 180, 180, 269, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 358, 359, 360, 361, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 0, 359, 359, 361, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 0, 436, 436, 361, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 437, 436, 436, 361, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 438, 439, 440, 441, 442, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 443, 274, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 443, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 444, 116, 445, 445, 8, 161, 0, 162, 0, 0, 0, 120, 0, 0, 16, 0], [0, 0, 0, 0, 225, 44, 44, 8, 161, 0, 0, 0, 0, 367, 225, 0, 0, 0, 0], [0, 0, 0, 364, 116, 365, 445, 8, 161, 0, 162, 0, 0, 367, 120, 0, 0, 16, 0], [0, 0, 0, 364, 116, 445, 445, 8, 161, 0, 162, 0, 0, 0, 120, 0, 0, 16, 0], [0, 0, 0, 0, 0, 0, 0, 0, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 446, 370, 447, 447, 22, 23, 0, 24, 0, 0, 0, 374, 0, 0, 27, 0], [0, 448, 0, 0, 0, 76, 449, 0, 23, 0, 24, 0, 0, 0, 78, 0, 448, 0, 0], [0, 0, 0, 0, 450, 80, 80, 22, 23, 0, 0, 0, 0, 373, 450, 0, 0, 0, 0], [0, 0, 0, 369, 370, 371, 447, 22, 23, 0, 24, 0, 0, 373, 374, 0, 0, 27, 0], [0, 0, 0, 369, 370, 447, 447, 22, 23, 0, 24, 0, 0, 0, 374, 0, 0, 27, 0], [0, 451, 90, 0, 0, 76, 449, 0, 23, 0, 24, 0, 0, 0, 78, 0, 451, 0, 0], [0, 279, 0, 0, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 279, 0, 0], [0, 279, 0, 375, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 279, 0, 0], [0, 0, 0, 446, 370, 447, 447, 22, 23, 0, 24, 0, 0, 0, 374, 0, 0, 27, 0], [0, 0, 0, 0, 450, 80, 80, 22, 23, 0, 0, 0, 0, 380, 450, 0, 0, 0, 0], [0, 0, 0, 377, 370, 378, 447, 22, 23, 0, 24, 0, 0, 380, 374, 0, 0, 27, 0], [0, 0, 0, 377, 370, 447, 447, 22, 23, 0, 24, 0, 0, 0, 374, 0, 0, 27, 0], [0, 0, 0, 0, 0, 0, 0, 187, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 184, 0, 0], [0, 0, 0, 0, 0, 452, 452, 295, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 453, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 76, 175, 386, 0, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 454, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 455, 388, 456, 456, 32, 33, 0, 34, 0, 0, 0, 392, 0, 0, 37, 0], [0, 457, 0, 0, 0, 97, 458, 0, 33, 0, 34, 0, 0, 0, 99, 0, 457, 0, 0], [0, 0, 0, 0, 459, 101, 101, 32, 33, 0, 0, 0, 0, 391, 459, 0, 0, 0, 0], [0, 0, 0, 387, 388, 389, 456, 32, 33, 0, 34, 0, 0, 391, 392, 0, 0, 37, 0], [0, 0, 0, 387, 388, 456, 456, 32, 33, 0, 34, 0, 0, 0, 392, 0, 0, 37, 0], [0, 460, 111, 0, 0, 97, 458, 0, 33, 0, 34, 0, 0, 0, 99, 0, 460, 0, 0], [0, 299, 0, 0, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 299, 0, 0], [0, 299, 0, 393, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 299, 0, 0], [0, 0, 0, 455, 388, 456, 456, 32, 33, 0, 34, 0, 0, 0, 392, 0, 0, 37, 0], [0, 0, 0, 0, 459, 101, 101, 32, 33, 0, 0, 0, 0, 398, 459, 0, 0, 0, 0], [0, 0, 0, 395, 388, 396, 456, 32, 33, 0, 34, 0, 0, 398, 392, 0, 0, 37, 0], [0, 0, 0, 395, 388, 456, 456, 32, 33, 0, 34, 0, 0, 0, 392, 0, 0, 37, 0], [0, 0, 0, 0, 0, 0, 0, 213, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0], [0, 0, 0, 0, 0, 461, 461, 315, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 462, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 97, 201, 404, 0, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 463, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 318, 406, 406, 8, 9, 0, 10, 0, 0, 0, 322, 0, 0, 16, 0], [0, 0, 0, 0, 409, 44, 44, 8, 9, 0, 0, 0, 0, 0, 409, 0, 0, 0, 0], [0, 0, 0, 464, 465, 466, 467, 8, 9, 0, 10, 0, 0, 468, 469, 0, 0, 16, 0], [0, 407, 0, 470, 0, 123, 123, 8, 9, 0, 10, 0, 0, 0, 42, 0, 407, 0, 0], [0, 407, 0, 0, 0, 121, 471, 0, 9, 0, 10, 0, 0, 0, 42, 0, 407, 0, 0], [0, 0, 0, 472, 465, 473, 474, 8, 9, 0, 10, 0, 0, 475, 469, 0, 0, 16, 0], [0, 0, 0, 0, 0, 0, 0, 239, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 236, 0, 0], [0, 0, 0, 0, 0, 0, 476, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 477, 415, 478, 478, 57, 58, 0, 59, 0, 0, 0, 419, 0, 0, 62, 0], [0, 479, 0, 0, 0, 137, 480, 0, 58, 0, 59, 0, 0, 0, 139, 0, 479, 0, 0], [0, 0, 0, 0, 481, 141, 141, 57, 58, 0, 0, 0, 0, 418, 481, 0, 0, 0, 0], [0, 0, 0, 414, 415, 416, 478, 57, 58, 0, 59, 0, 0, 418, 419, 0, 0, 62, 0], [0, 0, 0, 414, 415, 478, 478, 57, 58, 0, 59, 0, 0, 0, 419, 0, 0, 62, 0], [0, 482, 151, 0, 0, 137, 480, 0, 58, 0, 59, 0, 0, 0, 139, 0, 482, 0, 0], [0, 337, 0, 0, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 337, 0, 0], [0, 337, 0, 420, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 337, 0, 0], [0, 0, 0, 477, 415, 478, 478, 57, 58, 0, 59, 0, 0, 0, 419, 0, 0, 62, 0], [0, 0, 0, 0, 481, 141, 141, 57, 58, 0, 0, 0, 0, 425, 481, 0, 0, 0, 0], [0, 0, 0, 422, 415, 423, 478, 57, 58, 0, 59, 0, 0, 425, 419, 0, 0, 62, 0], [0, 0, 0, 422, 415, 478, 478, 57, 58, 0, 59, 0, 0, 0, 419, 0, 0, 62, 0], [0, 0, 0, 0, 0, 0, 0, 258, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0], [0, 0, 0, 0, 0, 483, 483, 353, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 484, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 137, 246, 431, 0, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 485, 0, 0, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 444, 116, 445, 445, 8, 161, 0, 162, 0, 0, 0, 120, 0, 0, 16, 0], [0, 0, 0, 0, 225, 44, 44, 8, 161, 0, 0, 0, 0, 435, 225, 0, 0, 0, 0], [0, 0, 0, 432, 116, 433, 445, 8, 161, 0, 162, 0, 0, 435, 120, 0, 0, 16, 0], [0, 0, 0, 432, 116, 445, 445, 8, 161, 0, 162, 0, 0, 0, 120, 0, 0, 16, 0], [0, 0, 0, 0, 0, 486, 486, 361, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 487, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 439, 440, 441, 442, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 0, 440, 440, 442, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 0, 488, 488, 442, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 489, 488, 488, 442, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 490, 491, 492, 493, 494, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 495, 0, 496, 497, 0, 161, 0, 162, 0, 0, 498, 0, 0, 0, 0, 0], [0, 0, 0, 0, 116, 445, 445, 8, 161, 0, 162, 0, 0, 0, 120, 0, 0, 16, 0], [0, 0, 0, 0, 225, 44, 44, 8, 161, 0, 0, 0, 0, 0, 225, 0, 0, 0, 0], [0, 0, 0, 0, 370, 447, 447, 22, 23, 0, 24, 0, 0, 0, 374, 0, 0, 27, 0], [0, 0, 0, 0, 450, 80, 80, 22, 23, 0, 0, 0, 0, 0, 450, 0, 0, 0, 0], [0, 0, 0, 499, 500, 501, 502, 22, 23, 0, 24, 0, 0, 503, 504, 0, 0, 27, 0], [0, 448, 0, 505, 0, 177, 177, 22, 23, 0, 24, 0, 0, 0, 78, 0, 448, 0, 0], [0, 448, 0, 0, 0, 175, 506, 0, 23, 0, 24, 0, 0, 0, 78, 0, 448, 0, 0], [0, 0, 0, 507, 500, 508, 509, 22, 23, 0, 24, 0, 0, 510, 504, 0, 0, 27, 0], [0, 0, 0, 0, 0, 0, 0, 295, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 292, 0, 0], [0, 0, 0, 0, 0, 0, 511, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 388, 456, 456, 32, 33, 0, 34, 0, 0, 0, 392, 0, 0, 37, 0], [0, 0, 0, 0, 459, 101, 101, 32, 33, 0, 0, 0, 0, 0, 459, 0, 0, 0, 0], [0, 0, 0, 512, 513, 514, 515, 32, 33, 0, 34, 0, 0, 516, 517, 0, 0, 37, 0], [0, 457, 0, 518, 0, 203, 203, 32, 33, 0, 34, 0, 0, 0, 99, 0, 457, 0, 0], [0, 457, 0, 0, 0, 201, 519, 0, 33, 0, 34, 0, 0, 0, 99, 0, 457, 0, 0], [0, 0, 0, 520, 513, 521, 522, 32, 33, 0, 34, 0, 0, 523, 517, 0, 0, 37, 0], [0, 0, 0, 0, 0, 0, 0, 315, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 312, 0, 0], [0, 0, 0, 0, 0, 0, 524, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 525, 465, 526, 526, 8, 9, 0, 10, 0, 0, 0, 469, 0, 0, 16, 0], [0, 527, 0, 0, 0, 40, 528, 0, 9, 0, 10, 0, 0, 0, 42, 0, 527, 0, 0], [0, 0, 0, 0, 529, 44, 44, 8, 9, 0, 0, 0, 0, 468, 529, 0, 0, 0, 0], [0, 0, 0, 464, 465, 466, 526, 8, 9, 0, 10, 0, 0, 468, 469, 0, 0, 16, 0], [0, 0, 0, 464, 465, 526, 526, 8, 9, 0, 10, 0, 0, 0, 469, 0, 0, 16, 0], [0, 530, 64, 0, 0, 40, 528, 0, 9, 0, 10, 0, 0, 0, 42, 0, 530, 0, 0], [0, 407, 0, 0, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 407, 0, 0], [0, 407, 0, 470, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 407, 0, 0], [0, 0, 0, 525, 465, 526, 526, 8, 9, 0, 10, 0, 0, 0, 469, 0, 0, 16, 0], [0, 0, 0, 0, 529, 44, 44, 8, 9, 0, 0, 0, 0, 475, 529, 0, 0, 0, 0], [0, 0, 0, 472, 465, 473, 526, 8, 9, 0, 10, 0, 0, 475, 469, 0, 0, 16, 0], [0, 0, 0, 472, 465, 526, 526, 8, 9, 0, 10, 0, 0, 0, 469, 0, 0, 16, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0], [0, 0, 0, 0, 415, 478, 478, 57, 58, 0, 59, 0, 0, 0, 419, 0, 0, 62, 0], [0, 0, 0, 0, 481, 141, 141, 57, 58, 0, 0, 0, 0, 0, 481, 0, 0, 0, 0], [0, 0, 0, 531, 532, 533, 534, 57, 58, 0, 59, 0, 0, 535, 536, 0, 0, 62, 0], [0, 479, 0, 537, 0, 248, 248, 57, 58, 0, 59, 0, 0, 0, 139, 0, 479, 0, 0], [0, 479, 0, 0, 0, 246, 538, 0, 58, 0, 59, 0, 0, 0, 139, 0, 479, 0, 0], [0, 0, 0, 539, 532, 540, 541, 57, 58, 0, 59, 0, 0, 542, 536, 0, 0, 62, 0], [0, 0, 0, 0, 0, 0, 0, 353, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 350, 0, 0], [0, 0, 0, 0, 0, 0, 543, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 361, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 358, 0, 0], [0, 0, 0, 0, 0, 544, 544, 442, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 545, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 491, 492, 493, 494, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 0, 492, 492, 494, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 0, 546, 546, 494, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 547, 546, 546, 494, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 548, 549, 368, 550, 0, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 274, 0, 368, 368, 0, 161, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 161, 0, 0, 0, 0, 498, 0, 0, 0, 0, 0], [0, 0, 0, 495, 0, 496, 368, 0, 161, 0, 162, 0, 0, 498, 0, 0, 0, 0, 0], [0, 0, 0, 495, 0, 368, 368, 0, 161, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 551, 500, 552, 552, 22, 23, 0, 24, 0, 0, 0, 504, 0, 0, 27, 0], [0, 553, 0, 0, 0, 76, 554, 0, 23, 0, 24, 0, 0, 0, 78, 0, 553, 0, 0], [0, 0, 0, 0, 555, 80, 80, 22, 23, 0, 0, 0, 0, 503, 555, 0, 0, 0, 0], [0, 0, 0, 499, 500, 501, 552, 22, 23, 0, 24, 0, 0, 503, 504, 0, 0, 27, 0], [0, 0, 0, 499, 500, 552, 552, 22, 23, 0, 24, 0, 0, 0, 504, 0, 0, 27, 0], [0, 556, 90, 0, 0, 76, 554, 0, 23, 0, 24, 0, 0, 0, 78, 0, 556, 0, 0], [0, 448, 0, 0, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 448, 0, 0], [0, 448, 0, 505, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 448, 0, 0], [0, 0, 0, 551, 500, 552, 552, 22, 23, 0, 24, 0, 0, 0, 504, 0, 0, 27, 0], [0, 0, 0, 0, 555, 80, 80, 22, 23, 0, 0, 0, 0, 510, 555, 0, 0, 0, 0], [0, 0, 0, 507, 500, 508, 552, 22, 23, 0, 24, 0, 0, 510, 504, 0, 0, 27, 0], [0, 0, 0, 507, 500, 552, 552, 22, 23, 0, 24, 0, 0, 0, 504, 0, 0, 27, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0], [0, 0, 0, 557, 513, 558, 558, 32, 33, 0, 34, 0, 0, 0, 517, 0, 0, 37, 0], [0, 559, 0, 0, 0, 97, 560, 0, 33, 0, 34, 0, 0, 0, 99, 0, 559, 0, 0], [0, 0, 0, 0, 561, 101, 101, 32, 33, 0, 0, 0, 0, 516, 561, 0, 0, 0, 0], [0, 0, 0, 512, 513, 514, 558, 32, 33, 0, 34, 0, 0, 516, 517, 0, 0, 37, 0], [0, 0, 0, 512, 513, 558, 558, 32, 33, 0, 34, 0, 0, 0, 517, 0, 0, 37, 0], [0, 562, 111, 0, 0, 97, 560, 0, 33, 0, 34, 0, 0, 0, 99, 0, 562, 0, 0], [0, 457, 0, 0, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 457, 0, 0], [0, 457, 0, 518, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 457, 0, 0], [0, 0, 0, 557, 513, 558, 558, 32, 33, 0, 34, 0, 0, 0, 517, 0, 0, 37, 0], [0, 0, 0, 0, 561, 101, 101, 32, 33, 0, 0, 0, 0, 523, 561, 0, 0, 0, 0], [0, 0, 0, 520, 513, 521, 558, 32, 33, 0, 34, 0, 0, 523, 517, 0, 0, 37, 0], [0, 0, 0, 520, 513, 558, 558, 32, 33, 0, 34, 0, 0, 0, 517, 0, 0, 37, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0], [0, 0, 0, 0, 465, 526, 526, 8, 9, 0, 10, 0, 0, 0, 469, 0, 0, 16, 0], [0, 0, 0, 0, 529, 44, 44, 8, 9, 0, 0, 0, 0, 0, 529, 0, 0, 0, 0], [0, 0, 0, 563, 66, 564, 565, 8, 9, 0, 10, 0, 0, 566, 68, 0, 0, 16, 0], [0, 527, 0, 567, 0, 123, 123, 8, 9, 0, 10, 0, 0, 0, 42, 0, 527, 0, 0], [0, 527, 0, 0, 0, 121, 568, 0, 9, 0, 10, 0, 0, 0, 42, 0, 527, 0, 0], [0, 0, 0, 569, 66, 570, 571, 8, 9, 0, 10, 0, 0, 572, 68, 0, 0, 16, 0], [0, 0, 0, 573, 532, 574, 574, 57, 58, 0, 59, 0, 0, 0, 536, 0, 0, 62, 0], [0, 575, 0, 0, 0, 137, 576, 0, 58, 0, 59, 0, 0, 0, 139, 0, 575, 0, 0], [0, 0, 0, 0, 577, 141, 141, 57, 58, 0, 0, 0, 0, 535, 577, 0, 0, 0, 0], [0, 0, 0, 531, 532, 533, 574, 57, 58, 0, 59, 0, 0, 535, 536, 0, 0, 62, 0], [0, 0, 0, 531, 532, 574, 574, 57, 58, 0, 59, 0, 0, 0, 536, 0, 0, 62, 0], [0, 578, 151, 0, 0, 137, 576, 0, 58, 0, 59, 0, 0, 0, 139, 0, 578, 0, 0], [0, 479, 0, 0, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 479, 0, 0], [0, 479, 0, 537, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 479, 0, 0], [0, 0, 0, 573, 532, 574, 574, 57, 58, 0, 59, 0, 0, 0, 536, 0, 0, 62, 0], [0, 0, 0, 0, 577, 141, 141, 57, 58, 0, 0, 0, 0, 542, 577, 0, 0, 0, 0], [0, 0, 0, 539, 532, 540, 574, 57, 58, 0, 59, 0, 0, 542, 536, 0, 0, 62, 0], [0, 0, 0, 539, 532, 574, 574, 57, 58, 0, 59, 0, 0, 0, 536, 0, 0, 62, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 137, 0, 0], [0, 0, 0, 0, 0, 0, 0, 442, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 439, 0, 0], [0, 0, 0, 0, 0, 579, 579, 494, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 580, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 549, 368, 550, 0, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 0, 368, 368, 0, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 581, 0, 0, 0, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 500, 552, 552, 22, 23, 0, 24, 0, 0, 0, 504, 0, 0, 27, 0], [0, 0, 0, 0, 555, 80, 80, 22, 23, 0, 0, 0, 0, 0, 555, 0, 0, 0, 0], [0, 0, 0, 582, 91, 583, 584, 22, 23, 0, 24, 0, 0, 585, 93, 0, 0, 27, 0], [0, 553, 0, 586, 0, 177, 177, 22, 23, 0, 24, 0, 0, 0, 78, 0, 553, 0, 0], [0, 553, 0, 0, 0, 175, 587, 0, 23, 0, 24, 0, 0, 0, 78, 0, 553, 0, 0], [0, 0, 0, 588, 91, 589, 590, 22, 23, 0, 24, 0, 0, 591, 93, 0, 0, 27, 0], [0, 0, 0, 0, 513, 558, 558, 32, 33, 0, 34, 0, 0, 0, 517, 0, 0, 37, 0], [0, 0, 0, 0, 561, 101, 101, 32, 33, 0, 0, 0, 0, 0, 561, 0, 0, 0, 0], [0, 0, 0, 592, 112, 593, 594, 32, 33, 0, 34, 0, 0, 595, 114, 0, 0, 37, 0], [0, 559, 0, 596, 0, 203, 203, 32, 33, 0, 34, 0, 0, 0, 99, 0, 559, 0, 0], [0, 559, 0, 0, 0, 201, 597, 0, 33, 0, 34, 0, 0, 0, 99, 0, 559, 0, 0], [0, 0, 0, 598, 112, 599, 600, 32, 33, 0, 34, 0, 0, 601, 114, 0, 0, 37, 0], [0, 0, 0, 602, 66, 67, 67, 8, 9, 0, 10, 0, 0, 0, 68, 0, 0, 16, 0], [0, 0, 0, 0, 165, 44, 44, 8, 9, 0, 0, 0, 0, 566, 165, 0, 0, 0, 0], [0, 0, 0, 563, 66, 564, 67, 8, 9, 0, 10, 0, 0, 566, 68, 0, 0, 16, 0], [0, 0, 0, 563, 66, 67, 67, 8, 9, 0, 10, 0, 0, 0, 68, 0, 0, 16, 0], [0, 527, 0, 0, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 527, 0, 0], [0, 527, 0, 567, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 527, 0, 0], [0, 0, 0, 602, 66, 67, 67, 8, 9, 0, 10, 0, 0, 0, 68, 0, 0, 16, 0], [0, 0, 0, 0, 165, 44, 44, 8, 9, 0, 0, 0, 0, 572, 165, 0, 0, 0, 0], [0, 0, 0, 569, 66, 570, 67, 8, 9, 0, 10, 0, 0, 572, 68, 0, 0, 16, 0], [0, 0, 0, 569, 66, 67, 67, 8, 9, 0, 10, 0, 0, 0, 68, 0, 0, 16, 0], [0, 0, 0, 0, 532, 574, 574, 57, 58, 0, 59, 0, 0, 0, 536, 0, 0, 62, 0], [0, 0, 0, 0, 577, 141, 141, 57, 58, 0, 0, 0, 0, 0, 577, 0, 0, 0, 0], [0, 0, 0, 603, 152, 604, 605, 57, 58, 0, 59, 0, 0, 606, 154, 0, 0, 62, 0], [0, 575, 0, 607, 0, 248, 248, 57, 58, 0, 59, 0, 0, 0, 139, 0, 575, 0, 0], [0, 575, 0, 0, 0, 246, 608, 0, 58, 0, 59, 0, 0, 0, 139, 0, 575, 0, 0], [0, 0, 0, 609, 152, 610, 611, 57, 58, 0, 59, 0, 0, 612, 154, 0, 0, 62, 0], [0, 0, 0, 0, 0, 0, 0, 494, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 491, 0, 0], [0, 0, 0, 0, 0, 0, 613, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 614, 91, 92, 92, 22, 23, 0, 24, 0, 0, 0, 93, 0, 0, 27, 0], [0, 0, 0, 0, 194, 80, 80, 22, 23, 0, 0, 0, 0, 585, 194, 0, 0, 0, 0], [0, 0, 0, 582, 91, 583, 92, 22, 23, 0, 24, 0, 0, 585, 93, 0, 0, 27, 0], [0, 0, 0, 582, 91, 92, 92, 22, 23, 0, 24, 0, 0, 0, 93, 0, 0, 27, 0], [0, 553, 0, 0, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 553, 0, 0], [0, 553, 0, 586, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 553, 0, 0], [0, 0, 0, 614, 91, 92, 92, 22, 23, 0, 24, 0, 0, 0, 93, 0, 0, 27, 0], [0, 0, 0, 0, 194, 80, 80, 22, 23, 0, 0, 0, 0, 591, 194, 0, 0, 0, 0], [0, 0, 0, 588, 91, 589, 92, 22, 23, 0, 24, 0, 0, 591, 93, 0, 0, 27, 0], [0, 0, 0, 588, 91, 92, 92, 22, 23, 0, 24, 0, 0, 0, 93, 0, 0, 27, 0], [0, 0, 0, 615, 112, 113, 113, 32, 33, 0, 34, 0, 0, 0, 114, 0, 0, 37, 0], [0, 0, 0, 0, 220, 101, 101, 32, 33, 0, 0, 0, 0, 595, 220, 0, 0, 0, 0], [0, 0, 0, 592, 112, 593, 113, 32, 33, 0, 34, 0, 0, 595, 114, 0, 0, 37, 0], [0, 0, 0, 592, 112, 113, 113, 32, 33, 0, 34, 0, 0, 0, 114, 0, 0, 37, 0], [0, 559, 0, 0, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 559, 0, 0], [0, 559, 0, 596, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 559, 0, 0], [0, 0, 0, 615, 112, 113, 113, 32, 33, 0, 34, 0, 0, 0, 114, 0, 0, 37, 0], [0, 0, 0, 0, 220, 101, 101, 32, 33, 0, 0, 0, 0, 601, 220, 0, 0, 0, 0], [0, 0, 0, 598, 112, 599, 113, 32, 33, 0, 34, 0, 0, 601, 114, 0, 0, 37, 0], [0, 0, 0, 598, 112, 113, 113, 32, 33, 0, 34, 0, 0, 0, 114, 0, 0, 37, 0], [0, 0, 0, 0, 66, 67, 67, 8, 9, 0, 10, 0, 0, 0, 68, 0, 0, 16, 0], [0, 0, 0, 616, 152, 153, 153, 57, 58, 0, 59, 0, 0, 0, 154, 0, 0, 62, 0], [0, 0, 0, 0, 265, 141, 141, 57, 58, 0, 0, 0, 0, 606, 265, 0, 0, 0, 0], [0, 0, 0, 603, 152, 604, 153, 57, 58, 0, 59, 0, 0, 606, 154, 0, 0, 62, 0], [0, 0, 0, 603, 152, 153, 153, 57, 58, 0, 59, 0, 0, 0, 154, 0, 0, 62, 0], [0, 575, 0, 0, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 575, 0, 0], [0, 575, 0, 607, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 575, 0, 0], [0, 0, 0, 616, 152, 153, 153, 57, 58, 0, 59, 0, 0, 0, 154, 0, 0, 62, 0], [0, 0, 0, 0, 265, 141, 141, 57, 58, 0, 0, 0, 0, 612, 265, 0, 0, 0, 0], [0, 0, 0, 609, 152, 610, 153, 57, 58, 0, 59, 0, 0, 612, 154, 0, 0, 62, 0], [0, 0, 0, 609, 152, 153, 153, 57, 58, 0, 59, 0, 0, 0, 154, 0, 0, 62, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 549, 0, 0], [0, 0, 0, 0, 91, 92, 92, 22, 23, 0, 24, 0, 0, 0, 93, 0, 0, 27, 0], [0, 0, 0, 0, 112, 113, 113, 32, 33, 0, 34, 0, 0, 0, 114, 0, 0, 37, 0], [0, 0, 0, 0, 152, 153, 153, 57, 58, 0, 59, 0, 0, 0, 154, 0, 0, 62, 0]];
                var accepting = [false, true, true, true, true, true, false, false, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, false, true, false, true, true, false, false, true, true, true, true, true, true, false, false, true, true, true, true, true, true, true, true, true, true, false, true, true, false, true, true, true, false, true, true, true, false, true, false, true, true, false, false, true, true, true, true, true, true, true, false, true, true, false, true, true, true, false, true, false, true, true, false, false, true, true, true, true, true, true, true, false, true, true, true, false, true, true, true, false, true, false, true, true, false, false, false, true, true, false, false, true, true, true, true, true, true, false, true, false, true, true, false, false, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, false, true, false, true, true, false, false, false, true, true, false, false, true, true, true, false, true, true, true, true, true, true, false, true, true, true, false, true, false, true, true, false, false, false, true, true, false, false, true, true, true, false, true, true, true, true, true, false, true, true, true, true, true, false, true, true, false, false, false, false, true, true, false, false, true, true, true, false, true, true, true, false, true, false, true, true, false, false, false, true, true, false, false, true, true, true, false, true, true, true, true, false, true, false, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, false, true, true, false, false, false, false, true, true, false, false, true, true, true, false, true, true, true, true, true, false, true, true, false, false, false, false, true, true, false, false, true, true, true, true, false, true, true, true, true, true, true, false, true, true, false, false, false, false, true, false, true, false, true, true, true, true, true, false, true, true, false, false, false, false, true, true, false, false, true, true, true, false, true, true, false, false, true, false, true, true, false, true, true, false, true, true, false, true, true, true, true, true, true, false, true, true, false, false, false, false, true, false, true, true, false, true, true, true, true, true, true, false, true, true, false, false, false, false, true, false, true, false, true, true, true, true, false, false, false, true, true, false, true, true, true, true, true, true, false, true, true, false, false, false, false, true, false, true, false, true, true, false, false, true, true, false, false, true, true, true, false, true, false, true, true, true, true, false, false, false, true, false, true, true, true, true, false, false, false, true, true, false, true, true, true, true, true, true, false, true, true, false, true, false, true, true, true, true, false, false, false, false, false, false, false, true, true, false, false, true, true, false, true, true, true, true, false, true, true, true, true, true, true, false, true, true, false, true, true, false, true, true, true, true, true, true, false, true, true, false, true, false, true, true, true, true, true, true, false, true, true, true, true, true, true, false, true, true, false, false, false, false, false, true, true, false, true, false, true, true, true, true, true, false, true, true, true, true, true, false, true, true, true, true, true, false, true, true, true, false, true, true, true, true, false, false, false, true, false, true, true, true, true, true, false, true, true, true, false, true, true, true, true, true, false, true, true, true, true, false, true, true, true, true, true, false, true, true, false, true, true, true];
                var tags = [[], ["broken_cluster"], ["consonant_syllable"], ["vowel_syllable"], ["broken_cluster"], ["broken_cluster"], [], [], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["standalone_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["consonant_syllable"], ["broken_cluster"], ["symbol_cluster"], ["consonant_syllable"], ["consonant_syllable"], [], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["vowel_syllable"], ["vowel_syllable"], [], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], [], ["broken_cluster"], [], ["broken_cluster"], ["broken_cluster"], [], [], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["standalone_cluster"], ["standalone_cluster"], [], [], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["broken_cluster"], ["broken_cluster"], ["consonant_syllable", "broken_cluster"], ["broken_cluster"], [], ["broken_cluster"], ["symbol_cluster"], [], ["symbol_cluster"], ["symbol_cluster"], ["consonant_syllable"], [], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], [], ["consonant_syllable"], [], ["consonant_syllable"], ["consonant_syllable"], [], [], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], [], ["consonant_syllable"], ["vowel_syllable"], [], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], [], ["vowel_syllable"], [], ["vowel_syllable"], ["vowel_syllable"], [], [], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], [], ["vowel_syllable"], ["broken_cluster"], ["broken_cluster"], [], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], [], ["broken_cluster"], [], ["broken_cluster"], ["broken_cluster"], [], [], [], ["broken_cluster"], ["broken_cluster"], [], [], ["broken_cluster"], ["broken_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], [], ["standalone_cluster"], [], ["standalone_cluster"], ["standalone_cluster"], [], [], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], [], ["standalone_cluster"], ["broken_cluster"], [], ["broken_cluster"], ["broken_cluster"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable", "broken_cluster"], ["consonant_syllable", "broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["symbol_cluster"], ["symbol_cluster"], ["symbol_cluster"], ["consonant_syllable"], ["consonant_syllable"], [], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], [], ["consonant_syllable"], [], ["consonant_syllable"], ["consonant_syllable"], [], [], [], ["consonant_syllable"], ["consonant_syllable"], [], [], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], [], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["vowel_syllable"], ["vowel_syllable"], [], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], [], ["vowel_syllable"], [], ["vowel_syllable"], ["vowel_syllable"], [], [], [], ["vowel_syllable"], ["vowel_syllable"], [], [], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], [], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["broken_cluster"], [], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], [], ["broken_cluster"], ["broken_cluster"], [], [], [], [], ["broken_cluster"], ["broken_cluster"], [], [], ["broken_cluster"], ["standalone_cluster"], ["standalone_cluster"], [], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], [], ["standalone_cluster"], [], ["standalone_cluster"], ["standalone_cluster"], [], [], [], ["standalone_cluster"], ["standalone_cluster"], [], [], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], [], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], [], ["broken_cluster"], [], ["consonant_syllable", "broken_cluster"], ["consonant_syllable", "broken_cluster"], ["consonant_syllable", "broken_cluster"], ["consonant_syllable", "broken_cluster"], ["consonant_syllable", "broken_cluster"], ["consonant_syllable", "broken_cluster"], ["broken_cluster"], ["symbol_cluster"], ["consonant_syllable"], [], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], [], ["consonant_syllable"], ["consonant_syllable"], [], [], [], [], ["consonant_syllable"], ["consonant_syllable"], [], [], ["consonant_syllable"], ["consonant_syllable"], ["vowel_syllable"], [], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], [], ["vowel_syllable"], ["vowel_syllable"], [], [], [], [], ["vowel_syllable"], ["vowel_syllable"], [], [], ["vowel_syllable"], ["vowel_syllable"], ["broken_cluster"], ["broken_cluster"], [], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], [], ["broken_cluster"], ["broken_cluster"], [], [], [], [], ["broken_cluster"], [], ["standalone_cluster"], [], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], [], ["standalone_cluster"], ["standalone_cluster"], [], [], [], [], ["standalone_cluster"], ["standalone_cluster"], [], [], ["standalone_cluster"], ["standalone_cluster"], ["consonant_syllable", "broken_cluster"], [], ["consonant_syllable", "broken_cluster"], ["consonant_syllable", "broken_cluster"], [], [], ["consonant_syllable", "broken_cluster"], [], ["consonant_syllable", "broken_cluster"], ["consonant_syllable", "broken_cluster"], [], ["consonant_syllable", "broken_cluster"], ["consonant_syllable", "broken_cluster"], [], ["consonant_syllable"], ["consonant_syllable"], [], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], [], ["consonant_syllable"], ["consonant_syllable"], [], [], [], [], ["consonant_syllable"], [], ["vowel_syllable"], ["vowel_syllable"], [], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], [], ["vowel_syllable"], ["vowel_syllable"], [], [], [], [], ["vowel_syllable"], [], ["broken_cluster"], [], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], [], [], [], ["standalone_cluster"], ["standalone_cluster"], [], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], [], ["standalone_cluster"], ["standalone_cluster"], [], [], [], [], ["standalone_cluster"], [], ["consonant_syllable", "broken_cluster"], [], ["consonant_syllable", "broken_cluster"], ["consonant_syllable", "broken_cluster"], [], [], ["consonant_syllable", "broken_cluster"], ["consonant_syllable", "broken_cluster"], [], [], ["consonant_syllable", "broken_cluster"], ["consonant_syllable", "broken_cluster"], ["consonant_syllable", "broken_cluster"], [], ["consonant_syllable"], [], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], [], [], [], ["vowel_syllable"], [], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], [], [], [], ["broken_cluster"], ["broken_cluster"], [], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], [], ["broken_cluster"], ["broken_cluster"], [], ["standalone_cluster"], [], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], [], [], [], [], [], [], [], ["consonant_syllable", "broken_cluster"], ["consonant_syllable", "broken_cluster"], [], [], ["consonant_syllable", "broken_cluster"], ["consonant_syllable", "broken_cluster"], [], ["consonant_syllable", "broken_cluster"], ["consonant_syllable", "broken_cluster"], ["consonant_syllable"], ["consonant_syllable"], [], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], [], ["consonant_syllable"], ["consonant_syllable"], [], ["vowel_syllable"], ["vowel_syllable"], [], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], [], ["vowel_syllable"], ["vowel_syllable"], [], ["broken_cluster"], [], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["standalone_cluster"], ["standalone_cluster"], [], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], [], ["standalone_cluster"], ["standalone_cluster"], [], [], [], [], [], ["consonant_syllable", "broken_cluster"], ["consonant_syllable", "broken_cluster"], [], ["consonant_syllable"], [], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["vowel_syllable"], [], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["broken_cluster"], [], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], [], ["broken_cluster"], ["broken_cluster"], ["standalone_cluster"], [], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], [], [], [], ["consonant_syllable"], [], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], ["consonant_syllable"], [], ["consonant_syllable"], ["consonant_syllable"], ["vowel_syllable"], [], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], ["vowel_syllable"], [], ["vowel_syllable"], ["vowel_syllable"], ["broken_cluster"], ["standalone_cluster"], [], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], ["standalone_cluster"], [], ["standalone_cluster"], ["standalone_cluster"], [], ["consonant_syllable"], ["vowel_syllable"], ["standalone_cluster"]];
                var indicMachine = {
                    stateTable: stateTable,
                    accepting: accepting,
                    tags: tags
                };

                var categories = ["O", "IND", "S", "GB", "B", "FM", "CGJ", "VMAbv", "VMPst", "VAbv", "VPst", "CMBlw", "VPre", "VBlw", "H", "VMBlw", "CMAbv", "MBlw", "CS", "R", "SUB", "MPst", "MPre", "FAbv", "FPst", "FBlw", "SMAbv", "SMBlw", "VMPre", "ZWNJ", "ZWJ", "WJ", "VS", "N", "HN", "MAbv"];
                var decompositions$1 = { "2507": [2503, 2494], "2508": [2503, 2519], "2888": [2887, 2902], "2891": [2887, 2878], "2892": [2887, 2903], "3018": [3014, 3006], "3019": [3015, 3006], "3020": [3014, 3031], "3144": [3142, 3158], "3264": [3263, 3285], "3271": [3270, 3285], "3272": [3270, 3286], "3274": [3270, 3266], "3275": [3270, 3266, 3285], "3402": [3398, 3390], "3403": [3399, 3390], "3404": [3398, 3415], "3546": [3545, 3530], "3548": [3545, 3535], "3549": [3545, 3535, 3530], "3550": [3545, 3551], "3635": [3661, 3634], "3763": [3789, 3762], "3955": [3953, 3954], "3957": [3953, 3956], "3958": [4018, 3968], "3959": [4018, 3953, 3968], "3960": [4019, 3968], "3961": [4019, 3953, 3968], "3969": [3953, 3968], "6971": [6970, 6965], "6973": [6972, 6965], "6976": [6974, 6965], "6977": [6975, 6965], "6979": [6978, 6965], "69934": [69937, 69927], "69935": [69938, 69927], "70475": [70471, 70462], "70476": [70471, 70487], "70843": [70841, 70842], "70844": [70841, 70832], "70846": [70841, 70845], "71098": [71096, 71087], "71099": [71097, 71087] };
                var stateTable$1 = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 3, 4, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 17, 18, 11, 19, 20, 21, 22, 0, 0, 23, 0, 0, 2, 0, 24, 0, 25], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 0, 0, 0, 0, 27, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0, 0, 41, 35, 42, 43, 44, 45, 0, 0, 46, 0, 0, 0, 39, 0, 0, 47], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 0, 0, 12, 0, 14, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 0, 9, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 16, 0, 0, 18, 11, 19, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 25], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 0, 11, 12, 0, 14, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 0, 9, 0, 0, 12, 0, 14, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 7, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 0, 18, 11, 19, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 25], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 0, 11, 12, 0, 14, 0, 0, 0, 0, 0, 11, 0, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 0, 18, 11, 19, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 25], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 48, 11, 12, 13, 14, 48, 16, 0, 0, 18, 11, 19, 20, 21, 22, 0, 0, 23, 0, 0, 0, 49, 0, 0, 25], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 0, 11, 12, 0, 14, 0, 16, 0, 0, 0, 11, 0, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 25], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 51, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 0, 11, 12, 0, 14, 0, 16, 0, 0, 0, 11, 0, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 0, 0, 36, 0, 38, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 0, 33, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 34, 35, 36, 37, 38, 0, 40, 0, 0, 41, 35, 42, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 47], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 0, 35, 36, 0, 38, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 0, 33, 0, 0, 36, 0, 38, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 0, 31, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0, 0, 41, 35, 42, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 47], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 0, 35, 36, 0, 38, 0, 0, 0, 0, 0, 35, 0, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 52, 35, 36, 37, 38, 52, 40, 0, 0, 41, 35, 42, 43, 44, 45, 0, 0, 46, 0, 0, 0, 53, 0, 0, 47], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 0, 35, 36, 0, 38, 0, 40, 0, 0, 0, 35, 0, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 47], [0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 0, 35, 36, 0, 38, 0, 40, 0, 0, 0, 35, 0, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 48, 11, 12, 13, 14, 0, 16, 0, 0, 18, 11, 19, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 25], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 48, 11, 12, 13, 14, 48, 16, 0, 0, 18, 11, 19, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 25], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 52, 35, 36, 37, 38, 0, 40, 0, 0, 41, 35, 42, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 47], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 52, 35, 36, 37, 38, 52, 40, 0, 0, 41, 35, 42, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 47], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 51, 0]];
                var accepting$1 = [false, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true];
                var tags$1 = [[], ["broken_cluster"], ["independent_cluster"], ["symbol_cluster"], ["standard_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], [], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["broken_cluster"], ["numeral_cluster"], ["broken_cluster"], ["independent_cluster"], ["symbol_cluster"], ["symbol_cluster"], ["standard_cluster"], ["standard_cluster"], ["standard_cluster"], ["standard_cluster"], ["standard_cluster"], ["standard_cluster"], ["standard_cluster"], ["standard_cluster"], ["virama_terminated_cluster"], ["standard_cluster"], ["standard_cluster"], ["standard_cluster"], ["standard_cluster"], ["standard_cluster"], ["standard_cluster"], ["standard_cluster"], ["standard_cluster"], ["standard_cluster"], ["standard_cluster"], ["broken_cluster"], ["broken_cluster"], ["numeral_cluster"], ["number_joiner_terminated_cluster"], ["standard_cluster"], ["standard_cluster"], ["numeral_cluster"]];
                var useData = {
                    categories: categories,
                    decompositions: decompositions$1,
                    stateTable: stateTable$1,
                    accepting: accepting$1,
                    tags: tags$1
                };

                // Cateories used in the OpenType spec:
                // https://www.microsoft.com/typography/otfntdev/devanot/shaping.aspx
                var CATEGORIES = {
                    X: 1 << 0,
                    C: 1 << 1,
                    V: 1 << 2,
                    N: 1 << 3,
                    H: 1 << 4,
                    ZWNJ: 1 << 5,
                    ZWJ: 1 << 6,
                    M: 1 << 7,
                    SM: 1 << 8,
                    VD: 1 << 9,
                    A: 1 << 10,
                    Placeholder: 1 << 11,
                    Dotted_Circle: 1 << 12,
                    RS: 1 << 13, // Register Shifter, used in Khmer OT spec.
                    Coeng: 1 << 14, // Khmer-style Virama.
                    Repha: 1 << 15, // Atomically-encoded logical or visual repha.
                    Ra: 1 << 16,
                    CM: 1 << 17, // Consonant-Medial.
                    Symbol: 1 << 18 // Avagraha, etc that take marks (SM,A,VD).
                };

                // Visual positions in a syllable from left to right.
                var POSITIONS = {
                    Start: 1 << 0,

                    Ra_To_Become_Reph: 1 << 1,
                    Pre_M: 1 << 2,
                    Pre_C: 1 << 3,

                    Base_C: 1 << 4,
                    After_Main: 1 << 5,

                    Above_C: 1 << 6,

                    Before_Sub: 1 << 7,
                    Below_C: 1 << 8,
                    After_Sub: 1 << 9,

                    Before_Post: 1 << 10,
                    Post_C: 1 << 11,
                    After_Post: 1 << 12,

                    Final_C: 1 << 13,
                    SMVD: 1 << 14,

                    End: 1 << 15
                };

                var CONSONANT_FLAGS = CATEGORIES.C | CATEGORIES.Ra | CATEGORIES.CM | CATEGORIES.V | CATEGORIES.Placeholder | CATEGORIES.Dotted_Circle;
                var JOINER_FLAGS = CATEGORIES.ZWJ | CATEGORIES.ZWNJ;
                var HALANT_OR_COENG_FLAGS = CATEGORIES.H | CATEGORIES.Coeng;

                var INDIC_CONFIGS = {
                    Default: {
                        hasOldSpec: false,
                        virama: 0,
                        basePos: 'Last',
                        rephPos: POSITIONS.Before_Post,
                        rephMode: 'Implicit',
                        blwfMode: 'Pre_And_Post'
                    },

                    Devanagari: {
                        hasOldSpec: true,
                        virama: 0x094D,
                        basePos: 'Last',
                        rephPos: POSITIONS.Before_Post,
                        rephMode: 'Implicit',
                        blwfMode: 'Pre_And_Post'
                    },

                    Bengali: {
                        hasOldSpec: true,
                        virama: 0x09CD,
                        basePos: 'Last',
                        rephPos: POSITIONS.After_Sub,
                        rephMode: 'Implicit',
                        blwfMode: 'Pre_And_Post'
                    },

                    Gurmukhi: {
                        hasOldSpec: true,
                        virama: 0x0A4D,
                        basePos: 'Last',
                        rephPos: POSITIONS.Before_Sub,
                        rephMode: 'Implicit',
                        blwfMode: 'Pre_And_Post'
                    },

                    Gujarati: {
                        hasOldSpec: true,
                        virama: 0x0ACD,
                        basePos: 'Last',
                        rephPos: POSITIONS.Before_Post,
                        rephMode: 'Implicit',
                        blwfMode: 'Pre_And_Post'
                    },

                    Oriya: {
                        hasOldSpec: true,
                        virama: 0x0B4D,
                        basePos: 'Last',
                        rephPos: POSITIONS.After_Main,
                        rephMode: 'Implicit',
                        blwfMode: 'Pre_And_Post'
                    },

                    Tamil: {
                        hasOldSpec: true,
                        virama: 0x0BCD,
                        basePos: 'Last',
                        rephPos: POSITIONS.After_Post,
                        rephMode: 'Implicit',
                        blwfMode: 'Pre_And_Post'
                    },

                    Telugu: {
                        hasOldSpec: true,
                        virama: 0x0C4D,
                        basePos: 'Last',
                        rephPos: POSITIONS.After_Post,
                        rephMode: 'Explicit',
                        blwfMode: 'Post_Only'
                    },

                    Kannada: {
                        hasOldSpec: true,
                        virama: 0x0CCD,
                        basePos: 'Last',
                        rephPos: POSITIONS.After_Post,
                        rephMode: 'Implicit',
                        blwfMode: 'Post_Only'
                    },

                    Malayalam: {
                        hasOldSpec: true,
                        virama: 0x0D4D,
                        basePos: 'Last',
                        rephPos: POSITIONS.After_Main,
                        rephMode: 'Log_Repha',
                        blwfMode: 'Pre_And_Post'
                    },

                    // Handled by UniversalShaper
                    // Sinhala: {
                    //   hasOldSpec: false,
                    //   virama: 0x0DCA,
                    //   basePos: 'Last_Sinhala',
                    //   rephPos: POSITIONS.After_Main,
                    //   rephMode: 'Explicit',
                    //   blwfMode: 'Pre_And_Post'
                    // },

                    Khmer: {
                        hasOldSpec: false,
                        virama: 0x17D2,
                        basePos: 'First',
                        rephPos: POSITIONS.Ra_To_Become_Reph,
                        rephMode: 'Vis_Repha',
                        blwfMode: 'Pre_And_Post'
                    }
                };

                // Additional decompositions that aren't in Unicode
                var INDIC_DECOMPOSITIONS = {
                    // Khmer
                    0x17BE: [0x17C1, 0x17BE],
                    0x17BF: [0x17C1, 0x17BF],
                    0x17C0: [0x17C1, 0x17C0],
                    0x17C4: [0x17C1, 0x17C4],
                    0x17C5: [0x17C1, 0x17C5]
                };

                var _class$6;
                var _temp$2;
                var decompositions = useData.decompositions;

                var trie$1 = new UnicodeTrie(Buffer("ABEAAAAAAAAAAMKgAbENTvLtnX+sHUUVx/f13nd/vHf7bl+FRGL7R0OJMcWYphBrimkVCSJR2xiEaLEGQ7AkBGowbYRSgj8K2B/GkpRYE6wlQSyJKCagrSlGkmqsqUZMY7S2CWkgqQViQSkt4Hfuzrx77tyZ2fm1u+/RPcknuzs7O3PmnDOzs7N73zteS5KXwKvgDTCnniTvBfPBJeAVpP2vFr69GGUtAkvAModyr0DeT4BrwCpwPVgDbga3ga+DjYbyluLcCvBN8F2wGWwHO8Ej4DjyPIbtz0DCeZpvD4CD4E/gb+AoOAFOgtPgLKiNJkkbTIKLwALwfvAh8GGwHFwFPg2uAzeCm8Ft4E5wN7gPPAi+D34AfgR+Ap7kx8+AZ8HvwZ/BEXAMvAheAa+Bc6OpzvVGknTABY30eB62C8GlYDFYCpaDq/n5z2J7PVgDbgG3N1KbrOdbWzby/N/G9i6wlR8/wLebUNcOll7vX7PLsQ4bdpAy92B/L3gK7AO/A38EfwX/AC+AkyT/m3x7mqdtYz7Gfq2ZJOPgPc3UXu/D9uJmmmcRT1uC7TJwZTONJxFL1+J4JbgBrAG3gNv5Nev5dhO2m3l54rqtON7RNLd1V8Z5auMfI+8Wbvv12P4Ux78AvyZl/Bb7fwD34HwH/EVR/t8t6rRlrYgFlHnMsdyXIupRFP+Gzv8Bb4CklSSjrTR9bz21uZx/Nj8v+uIFOJ4HFnJo3kWtNG6WkPSzBl1YbC8jeVfx+q+R9Pg48lxN8jFdhd8+01LrLTCdq6io8GNb1a8qKioqKioqKioc2cbXGcrWQ2Ynf9a9rmV/zVua9Dc16V/gz8pfxvar4A6wAdwL7gdbwUPgh+BR8AR4qpWuLe3D9gA4CA6DI+AoOAFOtdL1nNexfYs937fxDA8ubKf1zmv3dViI/Uvb9m2sqKioqAiHrVtehrH3TK2/3l4WZduioqIiDq+Rd1Jbef9ehnHmSnCtNNf7nOPcr8PHilO8jrfBF9v996lfwf6tUpl3tPvvdSjsvcwGnLt3Gsw/kzkpK8CdYH83my3Id0iT91WkL5xMktXgIfD85OD54zjfmYu5OFgN7h1LkmdBMg5fgbvAChzv49ujfEuZ3xlOk7kReTaSfL/B/jl+fMXsJLkb7AcPj8TlHC/zsgnYcyLd3zSh1vGAJr2ioqKiIn/eKXkMjn3/cWF5t/z6y37+K5urwP2YB36vPfw8yr7zeRjpu8g8cTf2H2+n89EtivLE93fs27Ez/Br2vM2+qWPl/ZyX9StFfQxW5v724PPxzXz7XHu4Pps5Jvtmiq13szmzfP0hlHkYHGn358bHeD0vYvsy+K+kz9vt/jy8gT40G1w4Rua0PN98nnaGf/e1G+mXIO2DY8P6Xz7WPz7Ky/7omJ0PBff4+B91fAqsAp8HXwI3gR04txbbdWDDWDpP/g7Yxs6BXWAP2AueJHo+M5bOpw+Cw+AIOApOgFMW7Xkdec6AkXH1+QfgyzbOTY73jy/C/gJ+/CCOP4D9xfz4I9h+TFMWtf9SRWzZwq7f0yi/L9voWSRbDfV/clx/3TuKfjoT26/iX813URx4tiVG3ay/sfFuJenb7J50A4mr1di/CZzLKZ6y2reunup4qzT+fM0wHp0PUD9+A7bYNJ5fn3eNP/Ft5bc0+S4n9/l1Gj+K82zesd1wfj3fZ79h2YyyVvLj7djfCR4xjJEyuy1+S/FyDt/MPwodn5hB8axrxy9nSBtYjOyHrs+BQ+B58E+u+wsWbWBtpb/hYL8RuA/pJ8fT2GffX+wl+daSa08jz9nxNG2k4963XBG/ZVhpUS573mh3BtPo7x/Eb7pE2yd5XvZssY/M/RZLc9SLeDsfD5gfTidi9//pwrzWu7t9lKcN7dxynthAh8vcKrQu1frHTGKBNF662KfoOXU1FsaFxe6x2kjClkBnGvXxwX0bytZ5unK+S9n2jxabTc5M0HUaIyTrfFa+Ljmflc9Xz7JtNdPa4eKz6WAPlb5l6xfLBzopWxcfncvSf7rHRJk2KSN2bKRsvcu2UZmxVIb9qd551e8rZcTERGuQ+qwIjERkjl2+djOlhWfpibnp/qxmP92FVr1/bc9GYxxuI5o3UzdukzYpj+H6nOxra9nHiaksjhDdsasPe9ca/CvOU1GVwUT4t8P921H4T8gsnkdIh+dn/pXrU0mnOZw21CbJv1P5LP0r4jtkbLH171BbCvavnFfeZ8L8K2wv/CuQRU6n/qWSNSbr2mO8xtK/U+Mq6Y/1yQyFJHHtv8Kn2uOC/Gvbf2VEPxJ9SvhY5d+Q+y21iRxLruOzsY6MWGrOkPHZ1b+jFuPzqEX/VcmoZkyIPT53k36/DZnrMd+K/Dbjs6kv6+6VYl9OU+WT07TplvMvWWhfVo3f4t48S+rbjIZl/1b5Xyd5vJdQiTyf7tUdMlbn0J9d/cn6c7M5DO1TNF0+bmT0Z3qdKaaoXeg1Lv7NEhufzyT/6vIKEeO1jX/psdi38a889qpkStcI/u12U3zE1Re+/Yv6QNwvdTDJGi9t2ps1XtKYDJ0PmcZKcU812sRxvms7J47mZ5c+SWJD5LPRg4qqj+nWL8Q5sRVrGar1EG0sOI6ndH3DVWL7wpeuwaY6O1Nh19N+Oqs5uI7Eto3aICxNrCn5rAuZ7Cn2bdJtfZPlL/k8Ld+ki6v9E56XPUvT52mV/YVvmMj2Zz8TEuNMTxfHuFfFUJ60OLrz1utODnFG47fLbSjXy0xSy4gN63EywlhMxWcNmK71svszi5OGTvdJe3rtd8ifB6I/mKBr1ap7uU/sqqTsMb+H5fxBFyuq+yqLnd7cmj33TwyOVVOwuj3nVXRtQtUGWR9jzI6kecZrKSKPuFakU2hZmXXZMDlsS1W9jBavv6eHpf3EtfJ7mKwYV0lX2g9FVY5N+Ung9aH1590+n3KLgEredfiez6u9svisY/Suk9Jsnkli1a+C1m/T7rzqd5UY9mfiXX9R92ibdZUIawTC96b1GBn6rDG1JsPv/b392SkiXVUGmyN0LO5LYi46Zf/Adc/QMaCo8TtG/bH1Z/TsW1QfUPRjm2cZee5PRaT33lEbnhlMax4qe1o/Y8a0icdaoOv9bsh+Hj6jonueoGtHumcMlX9lxLxXq7/D84fSzznGt6rtUerXxYU47/IcPeG3vqBbJ1StETZqg9fS2Akd/0Ovp+/CxD3P+/6bQwzJtsvyh5w+XjeXH9KfXGH3/VbSX4tS4XoftPZbnvcyxX1G5QvW1wbWTkbs7c3mTco6NWODbdxk3R9lGZo/aGxhiknTmETXLVs1c90u9+mBGCf6hs6fsmTq29sxPv8d82CuhCpNjGNjg31blGHrz1i41hd6nuYzbU3XhLQzj7Jt67Otw0uXUdDoH8e4F/joMdVui2dMJc3E+Tetvr6jEtPnPhJaVwz9Y7TDVlx1qnfitlEbtzlTVD0qX/pcm1esxI65PO3mU4eNrr5SZMz46FDE+aIlb5tntb1o/WOUETsW847pvNpaZH225eUpNnrS9yDy9wTysyr9XVOe63+qd3M6e4X6Ptd1Dpc1SdV53ZqFag1hpP+bE5f4ivY74BzXilzWWW1+S0TjJng91Gd9wmbNgpMVz6W8d7GJZwWtWp8p++c8fpjW0Vzff3dJfzGuoersEtnmpjVLupY48H6o7n8/C+kvJn+Lcd6q3QHx3usvZax3W8apvP6rev+UJSHfiCYe/h2aTwTaRi5DO28ZSd9zNhTfJ8b2je7drOo9HtNNbPMW03zOpq2qNqnKFN+0huhlMye2Pe9TdzfCedfxMlRfG7xjncaJ7fiXMYZk3X+ZvuKbXCGh8y8XH8TybajPTfq4tjG2/qb0RJO3SB19ba2SMuoNbW8R/g653qa9sdsRYsssu+ZxPss+tnayFd94yjofEi+hZdvo73q9jd3yisUYbfEpQ9XmMqUIm2fFZh4xkZeE1BNDL5v+ZcqXh/90bSwjflz8U0QcFWHzPOpy0amM+stqf1ad7LltVPqWmG3p3+GiIvLJf8duYA3NcBwbWRpkDXmo7RP+z5E6+8Xswz512dbrW2aMNrpKaBt9y45VR2j9efhAQL/PF38Xadq907NYC5dpZLy3kMX6PUHgeGGS3nfoPn9rObJ9s/4uMntnSt/J5TX+2ZRhtFcB8ZgVmyZbit8GCd/7/C7EOcYK7LdyjNhIlL81nqN/Xf9mOHt/anovP4X0tyem/OUZF9TmscY2nzEulq96ZeVwv2Bxxnwk3s9njT8m/YWOKl199fe53tTXyu5DLojfKWXej6R3RAPtDf1ex/PvtdJ8Q7aP7Ht6XpdXSJf8/wMdQuS/j0/HtKny9KbT+oT2K2ETuW7Tt09Uss5nCdWhjPuMTXzrztO4FHMy+V6TJaH9I6+2C5HPq9oc8xlKRva5rF8M/7tC26/6BsNFivQ//e1pVsyP19VrNrH1D5Wi7oUDdVp8Q5HVr1ztlzXPtH2Gc30+lMX3edH3ecm3fp0+Ps/IPvWH6OpiV7meEMlbzyIkpi1jtDU0Pmm6nMd0jU8bXK7N0jWkb/joHyNebfWgtrJpc0h7QiQP24aKqcwYPnTRIUmG63fRQ5VXLsekgy5NtVXVadLfpjzV9S6xYnuNri159ZmsmLCpJ8/6XSRGOaH659H+GLYtwhd51xvq31B9Qm0UavM84qhoKaNOnfwf","base64"));
                var stateMachine = new StateMachine(indicMachine);

                /**
                 * The IndicShaper supports indic scripts e.g. Devanagari, Kannada, etc.
                 * Based on code from Harfbuzz: https://github.com/behdad/harfbuzz/blob/master/src/hb-ot-shape-complex-indic.cc
                 */
                var IndicShaper = (_temp$2 = _class$6 = function (_DefaultShaper) {
                    _inherits(IndicShaper, _DefaultShaper);

                    function IndicShaper() {
                        _classCallCheck(this, IndicShaper);

                        return _possibleConstructorReturn(this, _DefaultShaper.apply(this, arguments));
                    }

                    IndicShaper.planFeatures = function planFeatures(plan) {
                        plan.addStage(setupSyllables);

                        plan.addStage(['locl', 'ccmp']);

                        plan.addStage(initialReordering);

                        plan.addStage('nukt');
                        plan.addStage('akhn');
                        plan.addStage('rphf', false);
                        plan.addStage('rkrf');
                        plan.addStage('pref', false);
                        plan.addStage('blwf', false);
                        plan.addStage('abvf', false);
                        plan.addStage('half', false);
                        plan.addStage('pstf', false);
                        plan.addStage('vatu');
                        plan.addStage('cjct');
                        plan.addStage('cfar', false);

                        plan.addStage(finalReordering);

                        plan.addStage({
                            local: ['init'],
                            global: ['pres', 'abvs', 'blws', 'psts', 'haln', 'dist', 'abvm', 'blwm', 'calt', 'clig']
                        });

                        // Setup the indic config for the selected script
                        plan.unicodeScript = fromOpenType(plan.script);
                        plan.indicConfig = INDIC_CONFIGS[plan.unicodeScript] || INDIC_CONFIGS.Default;
                        plan.isOldSpec = plan.indicConfig.hasOldSpec && plan.script[plan.script.length - 1] !== '2';

                        // TODO: turn off kern (Khmer) and liga features.
                    };

                    IndicShaper.assignFeatures = function assignFeatures(plan, glyphs) {
                        var _loop = function _loop(i) {
                            var codepoint = glyphs[i].codePoints[0];
                            var d = INDIC_DECOMPOSITIONS[codepoint] || decompositions[codepoint];
                            if (d) {
                                var decomposed = d.map(function (c) {
                                    var g = plan.font.glyphForCodePoint(c);
                                    return new GlyphInfo(plan.font, g.id, [c], glyphs[i].features);
                                });

                                glyphs.splice.apply(glyphs, [i, 1].concat(decomposed));
                            }
                        };

                        // Decompose split matras
                        // TODO: do this in a more general unicode normalizer
                        for (var i = glyphs.length - 1; i >= 0; i--) {
                            _loop(i);
                        }
                    };

                    return IndicShaper;
                }(DefaultShaper), _class$6.zeroMarkWidths = 'NONE', _temp$2);
                function indicCategory(glyph) {
                    return trie$1.get(glyph.codePoints[0]) >> 8;
                }

                function indicPosition(glyph) {
                    return 1 << (trie$1.get(glyph.codePoints[0]) & 0xff);
                }

                var IndicInfo = function IndicInfo(category, position, syllableType, syllable) {
                    _classCallCheck(this, IndicInfo);

                    this.category = category;
                    this.position = position;
                    this.syllableType = syllableType;
                    this.syllable = syllable;
                };

                function setupSyllables(font, glyphs) {
                    var syllable = 0;
                    var last = 0;
                    for (var _iterator = stateMachine.match(glyphs.map(indicCategory)), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
                        var _ref;

                        if (_isArray) {
                            if (_i >= _iterator.length) break;
                            _ref = _iterator[_i++];
                        } else {
                            _i = _iterator.next();
                            if (_i.done) break;
                            _ref = _i.value;
                        }

                        var _ref2 = _ref,
                            start = _ref2[0],
                            end = _ref2[1],
                            tags = _ref2[2];

                        if (start > last) {
                            ++syllable;
                            for (var _i2 = last; _i2 < start; _i2++) {
                                glyphs[_i2].shaperInfo = new IndicInfo(CATEGORIES.X, POSITIONS.End, 'non_indic_cluster', syllable);
                            }
                        }

                        ++syllable;

                        // Create shaper info
                        for (var _i3 = start; _i3 <= end; _i3++) {
                            glyphs[_i3].shaperInfo = new IndicInfo(1 << indicCategory(glyphs[_i3]), indicPosition(glyphs[_i3]), tags[0], syllable);
                        }

                        last = end + 1;
                    }

                    if (last < glyphs.length) {
                        ++syllable;
                        for (var i = last; i < glyphs.length; i++) {
                            glyphs[i].shaperInfo = new IndicInfo(CATEGORIES.X, POSITIONS.End, 'non_indic_cluster', syllable);
                        }
                    }
                }

                function isConsonant(glyph) {
                    return glyph.shaperInfo.category & CONSONANT_FLAGS;
                }

                function isJoiner(glyph) {
                    return glyph.shaperInfo.category & JOINER_FLAGS;
                }

                function isHalantOrCoeng(glyph) {
                    return glyph.shaperInfo.category & HALANT_OR_COENG_FLAGS;
                }

                function wouldSubstitute(glyphs, feature) {
                    for (var _iterator2 = glyphs, _isArray2 = Array.isArray(_iterator2), _i4 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
                        var _glyph$features;

                        var _ref3;

                        if (_isArray2) {
                            if (_i4 >= _iterator2.length) break;
                            _ref3 = _iterator2[_i4++];
                        } else {
                            _i4 = _iterator2.next();
                            if (_i4.done) break;
                            _ref3 = _i4.value;
                        }

                        var glyph = _ref3;

                        glyph.features = (_glyph$features = {}, _glyph$features[feature] = true, _glyph$features);
                    }

                    var GSUB = glyphs[0]._font._layoutEngine.engine.GSUBProcessor;
                    GSUB.applyFeatures([feature], glyphs);

                    return glyphs.length === 1;
                }

                function consonantPosition(font, consonant, virama) {
                    var glyphs = [virama, consonant, virama];
                    if (wouldSubstitute(glyphs.slice(0, 2), 'blwf') || wouldSubstitute(glyphs.slice(1, 3), 'blwf')) {
                        return POSITIONS.Below_C;
                    } else if (wouldSubstitute(glyphs.slice(0, 2), 'pstf') || wouldSubstitute(glyphs.slice(1, 3), 'pstf')) {
                        return POSITIONS.Post_C;
                    } else if (wouldSubstitute(glyphs.slice(0, 2), 'pref') || wouldSubstitute(glyphs.slice(1, 3), 'pref')) {
                        return POSITIONS.Post_C;
                    }

                    return POSITIONS.Base_C;
                }

                function initialReordering(font, glyphs, plan) {
                    var indicConfig = plan.indicConfig;
                    var features = font._layoutEngine.engine.GSUBProcessor.features;

                    var dottedCircle = font.glyphForCodePoint(0x25cc).id;
                    var virama = font.glyphForCodePoint(indicConfig.virama).id;
                    if (virama) {
                        var info = new GlyphInfo(font, virama, [indicConfig.virama]);
                        for (var i = 0; i < glyphs.length; i++) {
                            if (glyphs[i].shaperInfo.position === POSITIONS.Base_C) {
                                glyphs[i].shaperInfo.position = consonantPosition(font, glyphs[i].copy(), info);
                            }
                        }
                    }

                    for (var start = 0, end = nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = nextSyllable(glyphs, start)) {
                        var _glyphs$start$shaperI = glyphs[start].shaperInfo,
                            category = _glyphs$start$shaperI.category,
                            syllableType = _glyphs$start$shaperI.syllableType;


                        if (syllableType === 'symbol_cluster' || syllableType === 'non_indic_cluster') {
                            continue;
                        }

                        if (syllableType === 'broken_cluster' && dottedCircle) {
                            var g = new GlyphInfo(font, dottedCircle, [0x25cc]);
                            g.shaperInfo = new IndicInfo(1 << indicCategory(g), indicPosition(g), glyphs[start].shaperInfo.syllableType, glyphs[start].shaperInfo.syllable);

                            // Insert after possible Repha.
                            var _i5 = start;
                            while (_i5 < end && glyphs[_i5].shaperInfo.category === CATEGORIES.Repha) {
                                _i5++;
                            }

                            glyphs.splice(_i5++, 0, g);
                            end++;
                        }

                        // 1. Find base consonant:
                        //
                        // The shaping engine finds the base consonant of the syllable, using the
                        // following algorithm: starting from the end of the syllable, move backwards
                        // until a consonant is found that does not have a below-base or post-base
                        // form (post-base forms have to follow below-base forms), or that is not a
                        // pre-base reordering Ra, or arrive at the first consonant. The consonant
                        // stopped at will be the base.

                        var base = end;
                        var limit = start;
                        var hasReph = false;

                        // If the syllable starts with Ra + Halant (in a script that has Reph)
                        // and has more than one consonant, Ra is excluded from candidates for
                        // base consonants.
                        if (indicConfig.rephPos !== POSITIONS.Ra_To_Become_Reph && features.rphf && start + 3 <= end && (indicConfig.rephMode === 'Implicit' && !isJoiner(glyphs[start + 2]) || indicConfig.rephMode === 'Explicit' && glyphs[start + 2].shaperInfo.category === CATEGORIES.ZWJ)) {
                            // See if it matches the 'rphf' feature.
                            var _g = [glyphs[start].copy(), glyphs[start + 1].copy(), glyphs[start + 2].copy()];
                            if (wouldSubstitute(_g.slice(0, 2), 'rphf') || indicConfig.rephMode === 'Explicit' && wouldSubstitute(_g, 'rphf')) {
                                limit += 2;
                                while (limit < end && isJoiner(glyphs[limit])) {
                                    limit++;
                                }
                                base = start;
                                hasReph = true;
                            }
                        } else if (indicConfig.rephMode === 'Log_Repha' && glyphs[start].shaperInfo.category === CATEGORIES.Repha) {
                            limit++;
                            while (limit < end && isJoiner(glyphs[limit])) {
                                limit++;
                            }
                            base = start;
                            hasReph = true;
                        }

                        switch (indicConfig.basePos) {
                            case 'Last':
                            {
                                // starting from the end of the syllable, move backwards
                                var _i6 = end;
                                var seenBelow = false;

                                do {
                                    var _info = glyphs[--_i6].shaperInfo;

                                    // until a consonant is found
                                    if (isConsonant(glyphs[_i6])) {
                                        // that does not have a below-base or post-base form
                                        // (post-base forms have to follow below-base forms),
                                        if (_info.position !== POSITIONS.Below_C && (_info.position !== POSITIONS.Post_C || seenBelow)) {
                                            base = _i6;
                                            break;
                                        }

                                        // or that is not a pre-base reordering Ra,
                                        //
                                        // IMPLEMENTATION NOTES:
                                        //
                                        // Our pre-base reordering Ra's are marked POS_POST_C, so will be skipped
                                        // by the logic above already.
                                        //

                                        // or arrive at the first consonant. The consonant stopped at will
                                        // be the base.
                                        if (_info.position === POSITIONS.Below_C) {
                                            seenBelow = true;
                                        }

                                        base = _i6;
                                    } else if (start < _i6 && _info.category === CATEGORIES.ZWJ && glyphs[_i6 - 1].shaperInfo.category === CATEGORIES.H) {
                                        // A ZWJ after a Halant stops the base search, and requests an explicit
                                        // half form.
                                        // A ZWJ before a Halant, requests a subjoined form instead, and hence
                                        // search continues.  This is particularly important for Bengali
                                        // sequence Ra,H,Ya that should form Ya-Phalaa by subjoining Ya.
                                        break;
                                    }
                                } while (_i6 > limit);
                                break;
                            }

                            case 'First':
                            {
                                // The first consonant is always the base.
                                base = start;

                                // Mark all subsequent consonants as below.
                                for (var _i7 = base + 1; _i7 < end; _i7++) {
                                    if (isConsonant(glyphs[_i7])) {
                                        glyphs[_i7].shaperInfo.position = POSITIONS.Below_C;
                                    }
                                }
                            }
                        }

                        // If the syllable starts with Ra + Halant (in a script that has Reph)
                        // and has more than one consonant, Ra is excluded from candidates for
                        // base consonants.
                        //
                        //  Only do this for unforced Reph. (ie. not for Ra,H,ZWJ)
                        if (hasReph && base === start && limit - base <= 2) {
                            hasReph = false;
                        }

                        // 2. Decompose and reorder Matras:
                        //
                        // Each matra and any syllable modifier sign in the cluster are moved to the
                        // appropriate position relative to the consonant(s) in the cluster. The
                        // shaping engine decomposes two- or three-part matras into their constituent
                        // parts before any repositioning. Matra characters are classified by which
                        // consonant in a conjunct they have affinity for and are reordered to the
                        // following positions:
                        //
                        //   o Before first half form in the syllable
                        //   o After subjoined consonants
                        //   o After post-form consonant
                        //   o After main consonant (for above marks)
                        //
                        // IMPLEMENTATION NOTES:
                        //
                        // The normalize() routine has already decomposed matras for us, so we don't
                        // need to worry about that.

                        // 3.  Reorder marks to canonical order:
                        //
                        // Adjacent nukta and halant or nukta and vedic sign are always repositioned
                        // if necessary, so that the nukta is first.
                        //
                        // IMPLEMENTATION NOTES:
                        //
                        // We don't need to do this: the normalize() routine already did this for us.

                        // Reorder characters

                        for (var _i8 = start; _i8 < base; _i8++) {
                            var _info2 = glyphs[_i8].shaperInfo;
                            _info2.position = Math.min(POSITIONS.Pre_C, _info2.position);
                        }

                        if (base < end) {
                            glyphs[base].shaperInfo.position = POSITIONS.Base_C;
                        }

                        // Mark final consonants.  A final consonant is one appearing after a matra,
                        // like in Khmer.
                        for (var _i9 = base + 1; _i9 < end; _i9++) {
                            if (glyphs[_i9].shaperInfo.category === CATEGORIES.M) {
                                for (var j = _i9 + 1; j < end; j++) {
                                    if (isConsonant(glyphs[j])) {
                                        glyphs[j].shaperInfo.position = POSITIONS.Final_C;
                                        break;
                                    }
                                }
                                break;
                            }
                        }

                        // Handle beginning Ra
                        if (hasReph) {
                            glyphs[start].shaperInfo.position = POSITIONS.Ra_To_Become_Reph;
                        }

                        // For old-style Indic script tags, move the first post-base Halant after
                        // last consonant.
                        //
                        // Reports suggest that in some scripts Uniscribe does this only if there
                        // is *not* a Halant after last consonant already (eg. Kannada), while it
                        // does it unconditionally in other scripts (eg. Malayalam).  We don't
                        // currently know about other scripts, so we single out Malayalam for now.
                        //
                        // Kannada test case:
                        // U+0C9A,U+0CCD,U+0C9A,U+0CCD
                        // With some versions of Lohit Kannada.
                        // https://bugs.freedesktop.org/show_bug.cgi?id=59118
                        //
                        // Malayalam test case:
                        // U+0D38,U+0D4D,U+0D31,U+0D4D,U+0D31,U+0D4D
                        // With lohit-ttf-20121122/Lohit-Malayalam.ttf
                        if (plan.isOldSpec) {
                            var disallowDoubleHalants = plan.unicodeScript !== 'Malayalam';
                            for (var _i10 = base + 1; _i10 < end; _i10++) {
                                if (glyphs[_i10].shaperInfo.category === CATEGORIES.H) {
                                    var _j = void 0;
                                    for (_j = end - 1; _j > _i10; _j--) {
                                        if (isConsonant(glyphs[_j]) || disallowDoubleHalants && glyphs[_j].shaperInfo.category === CATEGORIES.H) {
                                            break;
                                        }
                                    }

                                    if (glyphs[_j].shaperInfo.category !== CATEGORIES.H && _j > _i10) {
                                        // Move Halant to after last consonant.
                                        var t = glyphs[_i10];
                                        glyphs.splice.apply(glyphs, [_i10, 0].concat(glyphs.splice(_i10 + 1, _j - _i10)));
                                        glyphs[_j] = t;
                                    }

                                    break;
                                }
                            }
                        }

                        // Attach misc marks to previous char to move with them.
                        var lastPos = POSITIONS.Start;
                        for (var _i11 = start; _i11 < end; _i11++) {
                            var _info3 = glyphs[_i11].shaperInfo;
                            if (_info3.category & (JOINER_FLAGS | CATEGORIES.N | CATEGORIES.RS | CATEGORIES.CM | HALANT_OR_COENG_FLAGS & _info3.category)) {
                                _info3.position = lastPos;
                                if (_info3.category === CATEGORIES.H && _info3.position === POSITIONS.Pre_M) {
                                    // Uniscribe doesn't move the Halant with Left Matra.
                                    // TEST: U+092B,U+093F,U+094DE
                                    // We follow.  This is important for the Sinhala
                                    // U+0DDA split matra since it decomposes to U+0DD9,U+0DCA
                                    // where U+0DD9 is a left matra and U+0DCA is the virama.
                                    // We don't want to move the virama with the left matra.
                                    // TEST: U+0D9A,U+0DDA
                                    for (var _j2 = _i11; _j2 > start; _j2--) {
                                        if (glyphs[_j2 - 1].shaperInfo.position !== POSITIONS.Pre_M) {
                                            _info3.position = glyphs[_j2 - 1].shaperInfo.position;
                                            break;
                                        }
                                    }
                                }
                            } else if (_info3.position !== POSITIONS.SMVD) {
                                lastPos = _info3.position;
                            }
                        }

                        // For post-base consonants let them own anything before them
                        // since the last consonant or matra.
                        var last = base;
                        for (var _i12 = base + 1; _i12 < end; _i12++) {
                            if (isConsonant(glyphs[_i12])) {
                                for (var _j3 = last + 1; _j3 < _i12; _j3++) {
                                    if (glyphs[_j3].shaperInfo.position < POSITIONS.SMVD) {
                                        glyphs[_j3].shaperInfo.position = glyphs[_i12].shaperInfo.position;
                                    }
                                }
                                last = _i12;
                            } else if (glyphs[_i12].shaperInfo.category === CATEGORIES.M) {
                                last = _i12;
                            }
                        }

                        var arr = glyphs.slice(start, end);
                        arr.sort(function (a, b) {
                            return a.shaperInfo.position - b.shaperInfo.position;
                        });
                        glyphs.splice.apply(glyphs, [start, arr.length].concat(arr));

                        // Find base again
                        for (var _i13 = start; _i13 < end; _i13++) {
                            if (glyphs[_i13].shaperInfo.position === POSITIONS.Base_C) {
                                base = _i13;
                                break;
                            }
                        }

                        // Setup features now

                        // Reph
                        for (var _i14 = start; _i14 < end && glyphs[_i14].shaperInfo.position === POSITIONS.Ra_To_Become_Reph; _i14++) {
                            glyphs[_i14].features.rphf = true;
                        }

                        // Pre-base
                        var blwf = !plan.isOldSpec && indicConfig.blwfMode === 'Pre_And_Post';
                        for (var _i15 = start; _i15 < base; _i15++) {
                            glyphs[_i15].features.half = true;
                            if (blwf) {
                                glyphs[_i15].features.blwf = true;
                            }
                        }

                        // Post-base
                        for (var _i16 = base + 1; _i16 < end; _i16++) {
                            glyphs[_i16].features.abvf = true;
                            glyphs[_i16].features.pstf = true;
                            glyphs[_i16].features.blwf = true;
                        }

                        if (plan.isOldSpec && plan.unicodeScript === 'Devanagari') {
                            // Old-spec eye-lash Ra needs special handling.  From the
                            // spec:
                            //
                            // "The feature 'below-base form' is applied to consonants
                            // having below-base forms and following the base consonant.
                            // The exception is vattu, which may appear below half forms
                            // as well as below the base glyph. The feature 'below-base
                            // form' will be applied to all such occurrences of Ra as well."
                            //
                            // Test case: U+0924,U+094D,U+0930,U+094d,U+0915
                            // with Sanskrit 2003 font.
                            //
                            // However, note that Ra,Halant,ZWJ is the correct way to
                            // request eyelash form of Ra, so we wouldbn't inhibit it
                            // in that sequence.
                            //
                            // Test case: U+0924,U+094D,U+0930,U+094d,U+200D,U+0915
                            for (var _i17 = start; _i17 + 1 < base; _i17++) {
                                if (glyphs[_i17].shaperInfo.category === CATEGORIES.Ra && glyphs[_i17 + 1].shaperInfo.category === CATEGORIES.H && (_i17 + 1 === base || glyphs[_i17 + 2].shaperInfo.category === CATEGORIES.ZWJ)) {
                                    glyphs[_i17].features.blwf = true;
                                    glyphs[_i17 + 1].features.blwf = true;
                                }
                            }
                        }

                        var prefLen = 2;
                        if (features.pref && base + prefLen < end) {
                            // Find a Halant,Ra sequence and mark it for pre-base reordering processing.
                            for (var _i18 = base + 1; _i18 + prefLen - 1 < end; _i18++) {
                                var _g2 = [glyphs[_i18].copy(), glyphs[_i18 + 1].copy()];
                                if (wouldSubstitute(_g2, 'pref')) {
                                    for (var _j4 = 0; _j4 < prefLen; _j4++) {
                                        glyphs[_i18++].features.pref = true;
                                    }

                                    // Mark the subsequent stuff with 'cfar'.  Used in Khmer.
                                    // Read the feature spec.
                                    // This allows distinguishing the following cases with MS Khmer fonts:
                                    // U+1784,U+17D2,U+179A,U+17D2,U+1782
                                    // U+1784,U+17D2,U+1782,U+17D2,U+179A
                                    if (features.cfar) {
                                        for (; _i18 < end; _i18++) {
                                            glyphs[_i18].features.cfar = true;
                                        }
                                    }

                                    break;
                                }
                            }
                        }

                        // Apply ZWJ/ZWNJ effects
                        for (var _i19 = start + 1; _i19 < end; _i19++) {
                            if (isJoiner(glyphs[_i19])) {
                                var nonJoiner = glyphs[_i19].shaperInfo.category === CATEGORIES.ZWNJ;
                                var _j5 = _i19;

                                do {
                                    _j5--;

                                    // ZWJ/ZWNJ should disable CJCT.  They do that by simply
                                    // being there, since we don't skip them for the CJCT
                                    // feature (ie. F_MANUAL_ZWJ)

                                    // A ZWNJ disables HALF.
                                    if (nonJoiner) {
                                        delete glyphs[_j5].features.half;
                                    }
                                } while (_j5 > start && !isConsonant(glyphs[_j5]));
                            }
                        }
                    }
                }

                function finalReordering(font, glyphs, plan) {
                    var indicConfig = plan.indicConfig;
                    var features = font._layoutEngine.engine.GSUBProcessor.features;

                    for (var start = 0, end = nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = nextSyllable(glyphs, start)) {
                        // 4. Final reordering:
                        //
                        // After the localized forms and basic shaping forms GSUB features have been
                        // applied (see below), the shaping engine performs some final glyph
                        // reordering before applying all the remaining font features to the entire
                        // cluster.

                        var tryPref = !!features.pref;

                        // Find base again
                        var base = start;
                        for (; base < end; base++) {
                            if (glyphs[base].shaperInfo.position >= POSITIONS.Base_C) {
                                if (tryPref && base + 1 < end) {
                                    for (var i = base + 1; i < end; i++) {
                                        if (glyphs[i].features.pref) {
                                            if (!(glyphs[i].substituted && glyphs[i].isLigated && !glyphs[i].isMultiplied)) {
                                                // Ok, this was a 'pref' candidate but didn't form any.
                                                // Base is around here...
                                                base = i;
                                                while (base < end && isHalantOrCoeng(glyphs[base])) {
                                                    base++;
                                                }
                                                glyphs[base].shaperInfo.position = POSITIONS.BASE_C;
                                                tryPref = false;
                                            }
                                            break;
                                        }
                                    }
                                }

                                // For Malayalam, skip over unformed below- (but NOT post-) forms.
                                if (plan.unicodeScript === 'Malayalam') {
                                    for (var _i20 = base + 1; _i20 < end; _i20++) {
                                        while (_i20 < end && isJoiner(glyphs[_i20])) {
                                            _i20++;
                                        }

                                        if (_i20 === end || !isHalantOrCoeng(glyphs[_i20])) {
                                            break;
                                        }

                                        _i20++; // Skip halant.
                                        while (_i20 < end && isJoiner(glyphs[_i20])) {
                                            _i20++;
                                        }

                                        if (_i20 < end && isConsonant(glyphs[_i20]) && glyphs[_i20].shaperInfo.position === POSITIONS.Below_C) {
                                            base = _i20;
                                            glyphs[base].shaperInfo.position = POSITIONS.Base_C;
                                        }
                                    }
                                }

                                if (start < base && glyphs[base].shaperInfo.position > POSITIONS.Base_C) {
                                    base--;
                                }
                                break;
                            }
                        }

                        if (base === end && start < base && glyphs[base - 1].shaperInfo.category === CATEGORIES.ZWJ) {
                            base--;
                        }

                        if (base < end) {
                            while (start < base && glyphs[base].shaperInfo.category & (CATEGORIES.N | HALANT_OR_COENG_FLAGS)) {
                                base--;
                            }
                        }

                        // o Reorder matras:
                        //
                        // If a pre-base matra character had been reordered before applying basic
                        // features, the glyph can be moved closer to the main consonant based on
                        // whether half-forms had been formed. Actual position for the matra is
                        // defined as éˆ¥æ¸fter last standalone halant glyph, after initial matra
                        // position and before the main consonantéˆ¥ï¿½. If ZWJ or ZWNJ follow this
                        // halant, position is moved after it.
                        //

                        if (start + 1 < end && start < base) {
                            // Otherwise there can't be any pre-base matra characters.
                            // If we lost track of base, alas, position before last thingy.
                            var newPos = base === end ? base - 2 : base - 1;

                            // Malayalam / Tamil do not have "half" forms or explicit virama forms.
                            // The glyphs formed by 'half' are Chillus or ligated explicit viramas.
                            // We want to position matra after them.
                            if (plan.unicodeScript !== 'Malayalam' && plan.unicodeScript !== 'Tamil') {
                                while (newPos > start && !(glyphs[newPos].shaperInfo.category & (CATEGORIES.M | HALANT_OR_COENG_FLAGS))) {
                                    newPos--;
                                }

                                // If we found no Halant we are done.
                                // Otherwise only proceed if the Halant does
                                // not belong to the Matra itself!
                                if (isHalantOrCoeng(glyphs[newPos]) && glyphs[newPos].shaperInfo.position !== POSITIONS.Pre_M) {
                                    // If ZWJ or ZWNJ follow this halant, position is moved after it.
                                    if (newPos + 1 < end && isJoiner(glyphs[newPos + 1])) {
                                        newPos++;
                                    }
                                } else {
                                    newPos = start; // No move.
                                }
                            }

                            if (start < newPos && glyphs[newPos].shaperInfo.position !== POSITIONS.Pre_M) {
                                // Now go see if there's actually any matras...
                                for (var _i21 = newPos; _i21 > start; _i21--) {
                                    if (glyphs[_i21 - 1].shaperInfo.position === POSITIONS.Pre_M) {
                                        var oldPos = _i21 - 1;
                                        if (oldPos < base && base <= newPos) {
                                            // Shouldn't actually happen.
                                            base--;
                                        }

                                        var tmp = glyphs[oldPos];
                                        glyphs.splice.apply(glyphs, [oldPos, 0].concat(glyphs.splice(oldPos + 1, newPos - oldPos)));
                                        glyphs[newPos] = tmp;

                                        newPos--;
                                    }
                                }
                            }
                        }

                        // o Reorder reph:
                        //
                        // Rephéˆ¥æªš original position is always at the beginning of the syllable,
                        // (i.e. it is not reordered at the character reordering stage). However,
                        // it will be reordered according to the basic-forms shaping results.
                        // Possible positions for reph, depending on the script, are; after main,
                        // before post-base consonant forms, and after post-base consonant forms.

                        // Two cases:
                        //
                        // - If repha is encoded as a sequence of characters (Ra,H or Ra,H,ZWJ), then
                        //   we should only move it if the sequence ligated to the repha form.
                        //
                        // - If repha is encoded separately and in the logical position, we should only
                        //   move it if it did NOT ligate.  If it ligated, it's probably the font trying
                        //   to make it work without the reordering.
                        if (start + 1 < end && glyphs[start].shaperInfo.position === POSITIONS.Ra_To_Become_Reph && glyphs[start].shaperInfo.category === CATEGORIES.Repha !== (glyphs[start].isLigated && !glyphs[start].isMultiplied)) {
                            var newRephPos = void 0;
                            var rephPos = indicConfig.rephPos;
                            var found = false;

                            // 1. If reph should be positioned after post-base consonant forms,
                            //    proceed to step 5.
                            if (rephPos !== POSITIONS.After_Post) {
                                //  2. If the reph repositioning class is not after post-base: target
                                //     position is after the first explicit halant glyph between the
                                //     first post-reph consonant and last main consonant. If ZWJ or ZWNJ
                                //     are following this halant, position is moved after it. If such
                                //     position is found, this is the target position. Otherwise,
                                //     proceed to the next step.
                                //
                                //     Note: in old-implementation fonts, where classifications were
                                //     fixed in shaping engine, there was no case where reph position
                                //     will be found on this step.
                                newRephPos = start + 1;
                                while (newRephPos < base && !isHalantOrCoeng(glyphs[newRephPos])) {
                                    newRephPos++;
                                }

                                if (newRephPos < base && isHalantOrCoeng(glyphs[newRephPos])) {
                                    // ->If ZWJ or ZWNJ are following this halant, position is moved after it.
                                    if (newRephPos + 1 < base && isJoiner(glyphs[newRephPos + 1])) {
                                        newRephPos++;
                                    }

                                    found = true;
                                }

                                // 3. If reph should be repositioned after the main consonant: find the
                                //    first consonant not ligated with main, or find the first
                                //    consonant that is not a potential pre-base reordering Ra.
                                if (!found && rephPos === POSITIONS.After_Main) {
                                    newRephPos = base;
                                    while (newRephPos + 1 < end && glyphs[newRephPos + 1].shaperInfo.position <= POSITIONS.After_Main) {
                                        newRephPos++;
                                    }

                                    found = newRephPos < end;
                                }

                                // 4. If reph should be positioned before post-base consonant, find
                                //    first post-base classified consonant not ligated with main. If no
                                //    consonant is found, the target position should be before the
                                //    first matra, syllable modifier sign or vedic sign.
                                //
                                // This is our take on what step 4 is trying to say (and failing, BADLY).
                                if (!found && rephPos === POSITIONS.After_Sub) {
                                    newRephPos = base;
                                    while (newRephPos + 1 < end && !(glyphs[newRephPos + 1].shaperInfo.position & (POSITIONS.Post_C | POSITIONS.After_Post | POSITIONS.SMVD))) {
                                        newRephPos++;
                                    }

                                    found = newRephPos < end;
                                }
                            }

                            //  5. If no consonant is found in steps 3 or 4, move reph to a position
                            //     immediately before the first post-base matra, syllable modifier
                            //     sign or vedic sign that has a reordering class after the intended
                            //     reph position. For example, if the reordering position for reph
                            //     is post-main, it will skip above-base matras that also have a
                            //     post-main position.
                            if (!found) {
                                // Copied from step 2.
                                newRephPos = start + 1;
                                while (newRephPos < base && !isHalantOrCoeng(glyphs[newRephPos])) {
                                    newRephPos++;
                                }

                                if (newRephPos < base && isHalantOrCoeng(glyphs[newRephPos])) {
                                    // ->If ZWJ or ZWNJ are following this halant, position is moved after it.
                                    if (newRephPos + 1 < base && isJoiner(glyphs[newRephPos + 1])) {
                                        newRephPos++;
                                    }

                                    found = true;
                                }
                            }

                            // 6. Otherwise, reorder reph to the end of the syllable.
                            if (!found) {
                                newRephPos = end - 1;
                                while (newRephPos > start && glyphs[newRephPos].shaperInfo.position === POSITIONS.SMVD) {
                                    newRephPos--;
                                }

                                // If the Reph is to be ending up after a Matra,Halant sequence,
                                // position it before that Halant so it can interact with the Matra.
                                // However, if it's a plain Consonant,Halant we shouldn't do that.
                                // Uniscribe doesn't do this.
                                // TEST: U+0930,U+094D,U+0915,U+094B,U+094D
                                if (isHalantOrCoeng(glyphs[newRephPos])) {
                                    for (var _i22 = base + 1; _i22 < newRephPos; _i22++) {
                                        if (glyphs[_i22].shaperInfo.category === CATEGORIES.M) {
                                            newRephPos--;
                                        }
                                    }
                                }
                            }

                            var reph = glyphs[start];
                            glyphs.splice.apply(glyphs, [start, 0].concat(glyphs.splice(start + 1, newRephPos - start)));
                            glyphs[newRephPos] = reph;

                            if (start < base && base <= newRephPos) {
                                base--;
                            }
                        }

                        // o Reorder pre-base reordering consonants:
                        //
                        // If a pre-base reordering consonant is found, reorder it according to
                        // the following rules:
                        if (tryPref && base + 1 < end) {
                            for (var _i23 = base + 1; _i23 < end; _i23++) {
                                if (glyphs[_i23].features.pref) {
                                    // 1. Only reorder a glyph produced by substitution during application
                                    //    of the <pref> feature. (Note that a font may shape a Ra consonant with
                                    //    the feature generally but block it in certain contexts.)

                                    // Note: We just check that something got substituted.  We don't check that
                                    // the <pref> feature actually did it...
                                    //
                                    // Reorder pref only if it ligated.
                                    if (glyphs[_i23].isLigated && !glyphs[_i23].isMultiplied) {
                                        // 2. Try to find a target position the same way as for pre-base matra.
                                        //    If it is found, reorder pre-base consonant glyph.
                                        //
                                        // 3. If position is not found, reorder immediately before main
                                        //    consonant.
                                        var _newPos = base;

                                        // Malayalam / Tamil do not have "half" forms or explicit virama forms.
                                        // The glyphs formed by 'half' are Chillus or ligated explicit viramas.
                                        // We want to position matra after them.
                                        if (plan.unicodeScript !== 'Malayalam' && plan.unicodeScript !== 'Tamil') {
                                            while (_newPos > start && !(glyphs[_newPos - 1].shaperInfo.category & (CATEGORIES.M | HALANT_OR_COENG_FLAGS))) {
                                                _newPos--;
                                            }

                                            // In Khmer coeng model, a H,Ra can go *after* matras.  If it goes after a
                                            // split matra, it should be reordered to *before* the left part of such matra.
                                            if (_newPos > start && glyphs[_newPos - 1].shaperInfo.category === CATEGORIES.M) {
                                                var _oldPos2 = _i23;
                                                for (var j = base + 1; j < _oldPos2; j++) {
                                                    if (glyphs[j].shaperInfo.category === CATEGORIES.M) {
                                                        _newPos--;
                                                        break;
                                                    }
                                                }
                                            }
                                        }

                                        if (_newPos > start && isHalantOrCoeng(glyphs[_newPos - 1])) {
                                            // -> If ZWJ or ZWNJ follow this halant, position is moved after it.
                                            if (_newPos < end && isJoiner(glyphs[_newPos])) {
                                                _newPos++;
                                            }
                                        }

                                        var _oldPos = _i23;
                                        var _tmp = glyphs[_oldPos];
                                        glyphs.splice.apply(glyphs, [_newPos + 1, 0].concat(glyphs.splice(_newPos, _oldPos - _newPos)));
                                        glyphs[_newPos] = _tmp;

                                        if (_newPos <= base && base < _oldPos) {
                                            base++;
                                        }
                                    }

                                    break;
                                }
                            }
                        }

                        // Apply 'init' to the Left Matra if it's a word start.
                        if (glyphs[start].shaperInfo.position === POSITIONS.Pre_M && (!start || !/Cf|Mn/.test(unicode.getCategory(glyphs[start - 1].codePoints[0])))) {
                            glyphs[start].features.init = true;
                        }
                    }
                }

                function nextSyllable(glyphs, start) {
                    if (start >= glyphs.length) return start;
                    var syllable = glyphs[start].shaperInfo.syllable;
                    while (++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable) {}
                    return start;
                }

                var _class$7;
                var _temp$3;
                var categories$1 = useData.categories;
                var decompositions$2 = useData.decompositions;
                var trie$2 = new UnicodeTrie(Buffer("AAIAAAAAAAAAAKnQAVEMrvPtnH+oHUcVx+fd99799W5e8mx+9NkYm7YUI2KtimkVDG3FWgVTFY1Fqa2VJirYB0IaUFLBaKGJViXir6oxKCSBoi0UTKtg2yA26h+milYNtMH+0WK1VQyvtBS/487hnncyMzuzu7N7n7kHPszu7OzMmTNzdmdmfzzfUmpiUqkemAMbwSZwKbjcxM1XEL4VvB28G3zAk+56cLMlfgdYADvBbvBF8GWwH9xl+CFLfwj8BPwU/MKS38/AMfA86v9ro9ucQcdR+CjCP4CT4EnwDPg3eAFMTik1A+bAPNgINoFLwGawZSpLfzXCrWAb+AjYDm4BO8FusAfsA/vBXeAgOALuNfv3g4fAcXACPAaeAE+B58Bp8NJUpnN7WqlZsHY629+A8GLwWvAG8BZwJXinOf5ehB8EN4AdYGE6q7dmF9uugs8hvz0V58nZK/L+Kva/BX4ADoN7prP6HgUPgkfA73L0eQzHnwBPgX+Y80+DF8FUW6lBO4tbjXA9uAi8pj3sS2/E9mawBVwNtoJt5pzrTXgzwk+B7awP7sT+7nY6WxFfQBlfAl8H3wU/Anezcu/D9s/BMRN3HOEJ8EdwMkC/J5HmmXZmq2fBIjgEVEepbieLX4Fw0MnSrzRxmrVsm7MB8ReDV4vjr3ekJy7rZGVPMb196Xm6oug83oRyt4CrwDVgK9gGPtzxn3uTOD6YPDPNJ5Hm0+AznazffJ7Z4KSnXncg3VfAN8EBhx42/z/UGdbrx52sr9yH8AFTrt5+2GzfnWPbKuw7ZszZyNh/xowZM2bMmDFjxsQyZ5lPNs3h9nBNYHuAfr9ic9ffiHnsJzznU91/j3P+2snWYf6G8O/gn+A0eMnEt7vQp5ulX4NwHmwEm7rZ8UsRXg6uMPvXIHwPuK7rLl+nu9FzfMyYMWPGpGVuslmarv+YMWPSkNq/d2D8uNDNngvdivA2y3jy9m72bF9v3ymOf2MExp8fG2TsAcfA2wJYBJetWBq3i+0fwPafwLmzSl0LFmZNPMLHZ4fpnsX2AdjgcXB+T6kPge+AG7D/vXYW/tLsc9r9M+MkVyLNR1m6g9g+ZfYvmMExcHCm+ftP0+T5y/e17Uw/PYLwHnC0m80TH+zG30/3mjSDnPS2/B4pUJ4rX3n+b5H3o92l6UjfvZ7y/oJzToGnu8O66XTPYf8/Jr8XWL6TPXf9bPnHtmVs+89AnxVgDVgPLgKvAg+Y/F6H7c1gC7jKHH8XeJ/x15vAjt4wvwVs7wKfBXvAPvA18G1wsJevj36f5gjS3etIq+ft9+PYQ73h/nFsn2D7f+5l75bo/VPYftpTblFb2/Jo2pdjfL0uXOX/qxfnp8vZVk2Xv9hbmu+LxvYt3A/7/WZsPoptPkr9bdCv1ya+d4TuMO8Tre5n4XkILwSbzP4l/WHazX1//r2O/z7cFHnvSYW8R/Vm02ZXIHxHze1Xdf9bbn7p0z2kDroNr2X9WL+7937sX9fP+v9h9n6jTrfI3jG9EfsfN3G35PR/G4uRfY3eMTwdkFa/C3hrf2kcfy/xYTOmprrfZsLbEe7rDPW/U9Rrv9k/ahmTL0cWWxP/YxRkgtES+zwNhZPs+FQgMj/liEsto2HxsZBQX2pZoLZqWc5riXDaQBLSt1L3hcnE+Vct7aYVKCEhbXk2+b7NZ84mmXAwCiL14Ne85S62MYPcXi5StM/YxlJF2lfabznZsC6/C807xvZV+yFve9d1KY//d3HNO8pKUXuTDh0Gpp7B852q6QFMgdWM2dfbAxOuEPQEfcEsO5fquJLZrMfyCtWP0heZF6oSdiH9u4aQvJRIJ/eL6BBynItLp5D2JRkY5L5u3xAf6lviXHWSZcfaKO/+5zvO/c9Xtq8uRXSObd+8bS0zJrS1rxTyX7k/a0nrk5D+mHeOC90uq1Q216X57lykfqHt62uTGJ2rat+i/kttyq/RSi29PlclZf2Xxq55ZeSV34T96d5X5PqZJ9I3ZX2lnkXt3xL1Kyrav/LutbZ6uGxuS6ss6V3pXOXY4kP7EBfyJT7+4TJQS9uf74f6n+3+6ZIi9bCtieatFfCxUMx4KMYfy/pzrB30vm88q9SZ11K+n9eeNN612UFKWX8uI9TmRca7TbWvKy2JvF6naF+b/0uRupZp35cZikhZvyniY2R/CbdB3vXynIC6hbRBHf4l1xps6w4x/lVEtxRtGZMuRA8uNh/jfYV8kdpsBUszcODrD7E2JT2KrB3V6XMhbdNjcXItxzaOJWkpf976/I5glQn1sbLP86U9FQvz4l0S28/lcWUJbbrE2l+Z/TlHvi4/kvZXLMyrmy1PW7x8hl6UFgvlmNM1Jq3aJ3Se0yJcpdwS6mOp/ZgLX5N1rdFKaIzH9ztquMbqq+/qCFRk+hRoyZvrTHuO8fNd/djmEzZJ3TdisN1bNQNl7y96DV/3mVkTtwasVdk1ai6ybGlDek8nT1fXc4M5tVSPvhqOsWQeXQs8L1n3IradU8OxCeVjK7dr7Dpl0cMHnUvt18TzfVsfb/pZY56fV2GnVPVIYaOi9xcZJ8cmKcu3wcuPsVHV5cdKFfZXNZefp5sWft+wzR1cczKCxh99NRx76HvwOpWNv6YZtAajt6WPyPswtVVs/VOJ7xpYx3VR31er7gMxNuV9Q443CDlW43KuYSXblsybfKYt58trfez7A1X7Tdm+V7TcoudL+LpVGf2khN63U5OyD5Af0NoUv06l7Jc0Rte+so4xL9Ayy3Rz+SufY5Jf267xcm7J4dd3kumIOrmk7Pl549bUY1puI91Gdb8Tpu+9tjmhXFdwtfVsTv5SQvXKW0cK4eXgPBO6iJ07NNVOHH7/tF1jyJdnWbrU/Uau3VNI156QZ2ZaZFu76i6vQXy9YJ2H9QZ97aF3p1xlx1yfuYRcd0Kl7NyaX190+pUOKI0tvus5j7/nSWKLo3FER8R3LHEx8gqwge1POgi1l1yfirV3zHpISHxs3vLeFXOellcG1DFGbGP00PPkeKEOaXIsqhzbruOh9Qk5L08nW2grJ0avsvWocv0zRh/fGCG0TV35hB4v0rds5Vddjm/sFCKx+aXSt2yalPZsolxXW46CDnXp0YQ0rdso9OUYPSYT6+yzuxxzlrVfFfavQ/LKqsP+dbVzE/0qRb8pKin6V9U6Fnn24pqHufLMWy90nV+0DkXmcrb0Uq+6pU7/qcs/67SHTeTaaBk9ipyXQvLqW1U7uPKpux/ESlP9umydR8H3UjzHoXxj0/J1Yr5ubHsPrWOJqxK+hk5r+EVtH3pe1XWIXa+1vQ9YJ/oZre1bGReh3xKWeX7BxfYstwh5errGJi59be8482cSsfUPQT4Xlc9K+XMmatcY0fo2+SxYQs/4XO8M03Ng/TxujYH+FRELSdH+6mtveu8itb1Cy7C9X8GfsVOcfN86RHg56wJ0ob5qOz/E/rIdq7YhF34/0cfoeWKVftJjIbWDbDfXeXR/prBOKWJ/3dd43+sr+32TvgEIEZ6/7Zt5/l7ghMm77u+ey4gcz5xfktA5vE9C5vy2Y3lpXeX40tHcLMX42qZHS/ltZluXiSlDxillt3VdIvufbc0j75wy5aWaOxWRUZmfl5nDSh3LzoWbXJOg8uumKkndp1PnH2IPfe+U33z7vjWhdPQuWMh4raqxWMh9X89RZtSZ7/JpyXs3NWQcETN3CZHU/lmVnstZB1+ZfM5A/1VJ2V9t8wTXN1S+f27mzaulbCxJHePwC1Tz/0K1/VdPvtOsba+vL7ZxM1/jakJ/V9/yfdtNx+i7bhVRRll/rrK+sk3qLt/3T0afH+tzz1HDfxzZ/HlGDduK1y/GL21zvKptQGWFSpVlFm0z+ZxD/vdAt9EqQ971NkRHW7qytog53+cfVfeFGLStfddfYka5x6dl+yi//4z6/559aUn4/+/k2pv8BqfM/0qVCnu+If2OJPRZUcyzJF/5RQm5xtM9ln+LRN+8U9+iMQS1Veg9q2z/TlV3Ett3/rLOIXOookidy/5X3GYD+S8a1z2e0vH695T9vhEqdbY//0dU3jWZ2rYq/cvCRT8r08/NLlT5/zySdSurv1ybLiup5tAp5+NNzfPJ5r61warapajItfTQNeK610/rWEMPyb+uOo/ierRNbGU01Z+rqneIPWNsT9t1rD+OYr8rm0eKvp/Ch1P4Yepyy+hWVD/f+VWXX5X+TZdfZZ+KLb9J+S8=","base64"));
                var stateMachine$1 = new StateMachine(useData);

                /**
                 * This shaper is an implementation of the Universal Shaping Engine, which
                 * uses Unicode data to shape a number of scripts without a dedicated shaping engine.
                 * See https://www.microsoft.com/typography/OpenTypeDev/USE/intro.htm.
                 */
                var UniversalShaper = (_temp$3 = _class$7 = function (_DefaultShaper) {
                    _inherits(UniversalShaper, _DefaultShaper);

                    function UniversalShaper() {
                        _classCallCheck(this, UniversalShaper);

                        return _possibleConstructorReturn(this, _DefaultShaper.apply(this, arguments));
                    }

                    UniversalShaper.planFeatures = function planFeatures(plan) {
                        plan.addStage(setupSyllables$1);

                        // Default glyph pre-processing group
                        plan.addStage(['locl', 'ccmp', 'nukt', 'akhn']);

                        // Reordering group
                        plan.addStage(clearSubstitutionFlags);
                        plan.addStage(['rphf'], false);
                        plan.addStage(recordRphf);
                        plan.addStage(clearSubstitutionFlags);
                        plan.addStage(['pref']);
                        plan.addStage(recordPref);

                        // Orthographic unit shaping group
                        plan.addStage(['rkrf', 'abvf', 'blwf', 'half', 'pstf', 'vatu', 'cjct']);
                        plan.addStage(reorder);

                        // Topographical features
                        // Scripts that need this are handled by the Arabic shaper, not implemented here for now.
                        // plan.addStage(['isol', 'init', 'medi', 'fina', 'med2', 'fin2', 'fin3'], false);

                        // Standard topographic presentation and positional feature application
                        plan.addStage(['abvs', 'blws', 'pres', 'psts', 'dist', 'abvm', 'blwm']);
                    };

                    UniversalShaper.assignFeatures = function assignFeatures(plan, glyphs) {
                        var _loop = function _loop(i) {
                            var codepoint = glyphs[i].codePoints[0];
                            if (decompositions$2[codepoint]) {
                                var decomposed = decompositions$2[codepoint].map(function (c) {
                                    var g = plan.font.glyphForCodePoint(c);
                                    return new GlyphInfo(plan.font, g.id, [c], glyphs[i].features);
                                });

                                glyphs.splice.apply(glyphs, [i, 1].concat(decomposed));
                            }
                        };

                        // Decompose split vowels
                        // TODO: do this in a more general unicode normalizer
                        for (var i = glyphs.length - 1; i >= 0; i--) {
                            _loop(i);
                        }
                    };

                    return UniversalShaper;
                }(DefaultShaper), _class$7.zeroMarkWidths = 'BEFORE_GPOS', _temp$3);
                function useCategory(glyph) {
                    return trie$2.get(glyph.codePoints[0]);
                }

                var USEInfo = function USEInfo(category, syllableType, syllable) {
                    _classCallCheck(this, USEInfo);

                    this.category = category;
                    this.syllableType = syllableType;
                    this.syllable = syllable;
                };

                function setupSyllables$1(font, glyphs) {
                    var syllable = 0;
                    for (var _iterator = stateMachine$1.match(glyphs.map(useCategory)), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
                        var _ref;

                        if (_isArray) {
                            if (_i >= _iterator.length) break;
                            _ref = _iterator[_i++];
                        } else {
                            _i = _iterator.next();
                            if (_i.done) break;
                            _ref = _i.value;
                        }

                        var _ref2 = _ref,
                            start = _ref2[0],
                            end = _ref2[1],
                            tags = _ref2[2];

                        ++syllable;

                        // Create shaper info
                        for (var i = start; i <= end; i++) {
                            glyphs[i].shaperInfo = new USEInfo(categories$1[useCategory(glyphs[i])], tags[0], syllable);
                        }

                        // Assign rphf feature
                        var limit = glyphs[start].shaperInfo.category === 'R' ? 1 : Math.min(3, end - start);
                        for (var _i2 = start; _i2 < start + limit; _i2++) {
                            glyphs[_i2].features.rphf = true;
                        }
                    }
                }

                function clearSubstitutionFlags(font, glyphs) {
                    for (var _iterator2 = glyphs, _isArray2 = Array.isArray(_iterator2), _i3 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
                        var _ref3;

                        if (_isArray2) {
                            if (_i3 >= _iterator2.length) break;
                            _ref3 = _iterator2[_i3++];
                        } else {
                            _i3 = _iterator2.next();
                            if (_i3.done) break;
                            _ref3 = _i3.value;
                        }

                        var glyph = _ref3;

                        glyph.substituted = false;
                    }
                }

                function recordRphf(font, glyphs) {
                    for (var _iterator3 = glyphs, _isArray3 = Array.isArray(_iterator3), _i4 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
                        var _ref4;

                        if (_isArray3) {
                            if (_i4 >= _iterator3.length) break;
                            _ref4 = _iterator3[_i4++];
                        } else {
                            _i4 = _iterator3.next();
                            if (_i4.done) break;
                            _ref4 = _i4.value;
                        }

                        var glyph = _ref4;

                        if (glyph.substituted && glyph.features.rphf) {
                            // Mark a substituted repha.
                            glyph.shaperInfo.category = 'R';
                        }
                    }
                }

                function recordPref(font, glyphs) {
                    for (var _iterator4 = glyphs, _isArray4 = Array.isArray(_iterator4), _i5 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
                        var _ref5;

                        if (_isArray4) {
                            if (_i5 >= _iterator4.length) break;
                            _ref5 = _iterator4[_i5++];
                        } else {
                            _i5 = _iterator4.next();
                            if (_i5.done) break;
                            _ref5 = _i5.value;
                        }

                        var glyph = _ref5;

                        if (glyph.substituted) {
                            // Mark a substituted pref as VPre, as they behave the same way.
                            glyph.shaperInfo.category = 'VPre';
                        }
                    }
                }

                function reorder(font, glyphs) {
                    var dottedCircle = font.glyphForCodePoint(0x25cc).id;

                    for (var start = 0, end = nextSyllable$1(glyphs, 0); start < glyphs.length; start = end, end = nextSyllable$1(glyphs, start)) {
                        var i = void 0,
                            j = void 0;
                        var info = glyphs[start].shaperInfo;
                        var type = info.syllableType;

                        // Only a few syllable types need reordering.
                        if (type !== 'virama_terminated_cluster' && type !== 'standard_cluster' && type !== 'broken_cluster') {
                            continue;
                        }

                        // Insert a dotted circle glyph in broken clusters.
                        if (type === 'broken_cluster' && dottedCircle) {
                            var g = new GlyphInfo(font, dottedCircle, [0x25cc]);
                            g.shaperInfo = info;

                            // Insert after possible Repha.
                            for (i = start; i < end && glyphs[i].shaperInfo.category === 'R'; i++) {}
                            glyphs.splice(++i, 0, g);
                            end++;
                        }

                        // Move things forward.
                        if (info.category === 'R' && end - start > 1) {
                            // Got a repha. Reorder it to after first base, before first halant.
                            for (i = start + 1; i < end; i++) {
                                info = glyphs[i].shaperInfo;
                                if (isBase(info) || isHalant(glyphs[i])) {
                                    // If we hit a halant, move before it; otherwise it's a base: move to it's
                                    // place, and shift things in between backward.
                                    if (isHalant(glyphs[i])) {
                                        i--;
                                    }

                                    glyphs.splice.apply(glyphs, [start, 0].concat(glyphs.splice(start + 1, i - start), [glyphs[i]]));
                                    break;
                                }
                            }
                        }

                        // Move things back.
                        for (i = start, j = end; i < end; i++) {
                            info = glyphs[i].shaperInfo;
                            if (isBase(info) || isHalant(glyphs[i])) {
                                // If we hit a halant, move after it; otherwise it's a base: move to it's
                                // place, and shift things in between backward.
                                j = isHalant(glyphs[i]) ? i + 1 : i;
                            } else if ((info.category === 'VPre' || info.category === 'VMPre') && j < i) {
                                glyphs.splice.apply(glyphs, [j, 1, glyphs[i]].concat(glyphs.splice(j, i - j)));
                            }
                        }
                    }
                }

                function nextSyllable$1(glyphs, start) {
                    if (start >= glyphs.length) return start;
                    var syllable = glyphs[start].shaperInfo.syllable;
                    while (++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable) {}
                    return start;
                }

                function isHalant(glyph) {
                    return glyph.shaperInfo.category === 'H' && !glyph.isLigated;
                }

                function isBase(info) {
                    return info.category === 'B' || info.category === 'GB';
                }

                var SHAPERS = {
                    arab: ArabicShaper, // Arabic
                    mong: ArabicShaper, // Mongolian
                    syrc: ArabicShaper, // Syriac
                    'nko ': ArabicShaper, // N'Ko
                    phag: ArabicShaper, // Phags Pa
                    mand: ArabicShaper, // Mandaic
                    mani: ArabicShaper, // Manichaean
                    phlp: ArabicShaper, // Psalter Pahlavi

                    hang: HangulShaper, // Hangul

                    bng2: IndicShaper, // Bengali
                    beng: IndicShaper, // Bengali
                    dev2: IndicShaper, // Devanagari
                    deva: IndicShaper, // Devanagari
                    gjr2: IndicShaper, // Gujarati
                    gujr: IndicShaper, // Gujarati
                    guru: IndicShaper, // Gurmukhi
                    gur2: IndicShaper, // Gurmukhi
                    knda: IndicShaper, // Kannada
                    knd2: IndicShaper, // Kannada
                    mlm2: IndicShaper, // Malayalam
                    mlym: IndicShaper, // Malayalam
                    ory2: IndicShaper, // Oriya
                    orya: IndicShaper, // Oriya
                    taml: IndicShaper, // Tamil
                    tml2: IndicShaper, // Tamil
                    telu: IndicShaper, // Telugu
                    tel2: IndicShaper, // Telugu
                    khmr: IndicShaper, // Khmer

                    bali: UniversalShaper, // Balinese
                    batk: UniversalShaper, // Batak
                    brah: UniversalShaper, // Brahmi
                    bugi: UniversalShaper, // Buginese
                    buhd: UniversalShaper, // Buhid
                    cakm: UniversalShaper, // Chakma
                    cham: UniversalShaper, // Cham
                    dupl: UniversalShaper, // Duployan
                    egyp: UniversalShaper, // Egyptian Hieroglyphs
                    gran: UniversalShaper, // Grantha
                    hano: UniversalShaper, // Hanunoo
                    java: UniversalShaper, // Javanese
                    kthi: UniversalShaper, // Kaithi
                    kali: UniversalShaper, // Kayah Li
                    khar: UniversalShaper, // Kharoshthi
                    khoj: UniversalShaper, // Khojki
                    sind: UniversalShaper, // Khudawadi
                    lepc: UniversalShaper, // Lepcha
                    limb: UniversalShaper, // Limbu
                    mahj: UniversalShaper, // Mahajani
                    // mand: UniversalShaper, // Mandaic
                    // mani: UniversalShaper, // Manichaean
                    mtei: UniversalShaper, // Meitei Mayek
                    modi: UniversalShaper, // Modi
                    // mong: UniversalShaper, // Mongolian
                    // 'nko ': UniversalShaper, // Néˆ¥æ©©o
                    hmng: UniversalShaper, // Pahawh Hmong
                    // phag: UniversalShaper, // Phags-pa
                    // phlp: UniversalShaper, // Psalter Pahlavi
                    rjng: UniversalShaper, // Rejang
                    saur: UniversalShaper, // Saurashtra
                    shrd: UniversalShaper, // Sharada
                    sidd: UniversalShaper, // Siddham
                    sinh: UniversalShaper, // Sinhala
                    sund: UniversalShaper, // Sundanese
                    sylo: UniversalShaper, // Syloti Nagri
                    tglg: UniversalShaper, // Tagalog
                    tagb: UniversalShaper, // Tagbanwa
                    tale: UniversalShaper, // Tai Le
                    lana: UniversalShaper, // Tai Tham
                    tavt: UniversalShaper, // Tai Viet
                    takr: UniversalShaper, // Takri
                    tibt: UniversalShaper, // Tibetan
                    tfng: UniversalShaper, // Tifinagh
                    tirh: UniversalShaper, // Tirhuta

                    latn: DefaultShaper, // Latin
                    DFLT: DefaultShaper // Default
                };

                function choose(script) {
                    if (!Array.isArray(script)) {
                        script = [script];
                    }

                    for (var _iterator = script, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
                        var _ref;

                        if (_isArray) {
                            if (_i >= _iterator.length) break;
                            _ref = _iterator[_i++];
                        } else {
                            _i = _iterator.next();
                            if (_i.done) break;
                            _ref = _i.value;
                        }

                        var s = _ref;

                        var shaper = SHAPERS[s];
                        if (shaper) {
                            return shaper;
                        }
                    }

                    return DefaultShaper;
                }

                var GSUBProcessor = function (_OTProcessor) {
                    _inherits(GSUBProcessor, _OTProcessor);

                    function GSUBProcessor() {
                        _classCallCheck(this, GSUBProcessor);

                        return _possibleConstructorReturn(this, _OTProcessor.apply(this, arguments));
                    }

                    GSUBProcessor.prototype.applyLookup = function applyLookup(lookupType, table) {
                        var _this2 = this;

                        switch (lookupType) {
                            case 1:
                            {
                                // Single Substitution
                                var index = this.coverageIndex(table.coverage);
                                if (index === -1) {
                                    return false;
                                }

                                var glyph = this.glyphIterator.cur;
                                switch (table.version) {
                                    case 1:
                                        glyph.id = glyph.id + table.deltaGlyphID & 0xffff;
                                        break;

                                    case 2:
                                        glyph.id = table.substitute.get(index);
                                        break;
                                }

                                return true;
                            }

                            case 2:
                            {
                                // Multiple Substitution
                                var _index = this.coverageIndex(table.coverage);
                                if (_index !== -1) {
                                    var _glyphs;

                                    var sequence = table.sequences.get(_index);
                                    this.glyphIterator.cur.id = sequence[0];
                                    this.glyphIterator.cur.ligatureComponent = 0;

                                    var features = this.glyphIterator.cur.features;
                                    var curGlyph = this.glyphIterator.cur;
                                    var replacement = sequence.slice(1).map(function (gid, i) {
                                        var glyph = new GlyphInfo(_this2.font, gid, undefined, features);
                                        glyph.shaperInfo = curGlyph.shaperInfo;
                                        glyph.isLigated = curGlyph.isLigated;
                                        glyph.ligatureComponent = i + 1;
                                        glyph.substituted = true;
                                        glyph.isMultiplied = true;
                                        return glyph;
                                    });

                                    (_glyphs = this.glyphs).splice.apply(_glyphs, [this.glyphIterator.index + 1, 0].concat(replacement));
                                    return true;
                                }

                                return false;
                            }

                            case 3:
                            {
                                // Alternate Substitution
                                var _index2 = this.coverageIndex(table.coverage);
                                if (_index2 !== -1) {
                                    var USER_INDEX = 0; // TODO
                                    this.glyphIterator.cur.id = table.alternateSet.get(_index2)[USER_INDEX];
                                    return true;
                                }

                                return false;
                            }

                            case 4:
                            {
                                // Ligature Substitution
                                var _index3 = this.coverageIndex(table.coverage);
                                if (_index3 === -1) {
                                    return false;
                                }

                                for (var _iterator = table.ligatureSets.get(_index3), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
                                    var _ref;

                                    if (_isArray) {
                                        if (_i >= _iterator.length) break;
                                        _ref = _iterator[_i++];
                                    } else {
                                        _i = _iterator.next();
                                        if (_i.done) break;
                                        _ref = _i.value;
                                    }

                                    var ligature = _ref;

                                    var matched = this.sequenceMatchIndices(1, ligature.components);
                                    if (!matched) {
                                        continue;
                                    }

                                    var _curGlyph = this.glyphIterator.cur;

                                    // Concatenate all of the characters the new ligature will represent
                                    var characters = _curGlyph.codePoints.slice();
                                    for (var _iterator2 = matched, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
                                        var _ref2;

                                        if (_isArray2) {
                                            if (_i2 >= _iterator2.length) break;
                                            _ref2 = _iterator2[_i2++];
                                        } else {
                                            _i2 = _iterator2.next();
                                            if (_i2.done) break;
                                            _ref2 = _i2.value;
                                        }

                                        var _index4 = _ref2;

                                        characters.push.apply(characters, this.glyphs[_index4].codePoints);
                                    }

                                    // Create the replacement ligature glyph
                                    var ligatureGlyph = new GlyphInfo(this.font, ligature.glyph, characters, _curGlyph.features);
                                    ligatureGlyph.shaperInfo = _curGlyph.shaperInfo;
                                    ligatureGlyph.isLigated = true;
                                    ligatureGlyph.substituted = true;

                                    // From Harfbuzz:
                                    // - If it *is* a mark ligature, we don't allocate a new ligature id, and leave
                                    //   the ligature to keep its old ligature id.  This will allow it to attach to
                                    //   a base ligature in GPOS.  Eg. if the sequence is: LAM,LAM,SHADDA,FATHA,HEH,
                                    //   and LAM,LAM,HEH for a ligature, they will leave SHADDA and FATHA with a
                                    //   ligature id and component value of 2.  Then if SHADDA,FATHA form a ligature
                                    //   later, we don't want them to lose their ligature id/component, otherwise
                                    //   GPOS will fail to correctly position the mark ligature on top of the
                                    //   LAM,LAM,HEH ligature. See https://bugzilla.gnome.org/show_bug.cgi?id=676343
                                    //
                                    // - If a ligature is formed of components that some of which are also ligatures
                                    //   themselves, and those ligature components had marks attached to *their*
                                    //   components, we have to attach the marks to the new ligature component
                                    //   positions!  Now *that*'s tricky!  And these marks may be following the
                                    //   last component of the whole sequence, so we should loop forward looking
                                    //   for them and update them.
                                    //
                                    //   Eg. the sequence is LAM,LAM,SHADDA,FATHA,HEH, and the font first forms a
                                    //   'calt' ligature of LAM,HEH, leaving the SHADDA and FATHA with a ligature
                                    //   id and component == 1.  Now, during 'liga', the LAM and the LAM-HEH ligature
                                    //   form a LAM-LAM-HEH ligature.  We need to reassign the SHADDA and FATHA to
                                    //   the new ligature with a component value of 2.
                                    //
                                    //   This in fact happened to a font...  See https://bugzilla.gnome.org/show_bug.cgi?id=437633
                                    var isMarkLigature = _curGlyph.isMark;
                                    for (var i = 0; i < matched.length && isMarkLigature; i++) {
                                        isMarkLigature = this.glyphs[matched[i]].isMark;
                                    }

                                    ligatureGlyph.ligatureID = isMarkLigature ? null : this.ligatureID++;

                                    var lastLigID = _curGlyph.ligatureID;
                                    var lastNumComps = _curGlyph.codePoints.length;
                                    var curComps = lastNumComps;
                                    var idx = this.glyphIterator.index + 1;

                                    // Set ligatureID and ligatureComponent on glyphs that were skipped in the matched sequence.
                                    // This allows GPOS to attach marks to the correct ligature components.
                                    for (var _iterator3 = matched, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
                                        var _ref3;

                                        if (_isArray3) {
                                            if (_i3 >= _iterator3.length) break;
                                            _ref3 = _iterator3[_i3++];
                                        } else {
                                            _i3 = _iterator3.next();
                                            if (_i3.done) break;
                                            _ref3 = _i3.value;
                                        }

                                        var matchIndex = _ref3;

                                        // Don't assign new ligature components for mark ligatures (see above)
                                        if (isMarkLigature) {
                                            idx = matchIndex;
                                        } else {
                                            while (idx < matchIndex) {
                                                var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[idx].ligatureComponent || 1, lastNumComps);
                                                this.glyphs[idx].ligatureID = ligatureGlyph.ligatureID;
                                                this.glyphs[idx].ligatureComponent = ligatureComponent;
                                                idx++;
                                            }
                                        }

                                        lastLigID = this.glyphs[idx].ligatureID;
                                        lastNumComps = this.glyphs[idx].codePoints.length;
                                        curComps += lastNumComps;
                                        idx++; // skip base glyph
                                    }

                                    // Adjust ligature components for any marks following
                                    if (lastLigID && !isMarkLigature) {
                                        for (var _i4 = idx; _i4 < this.glyphs.length; _i4++) {
                                            if (this.glyphs[_i4].ligatureID === lastLigID) {
                                                var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[_i4].ligatureComponent || 1, lastNumComps);
                                                this.glyphs[_i4].ligatureComponent = ligatureComponent;
                                            } else {
                                                break;
                                            }
                                        }
                                    }

                                    // Delete the matched glyphs, and replace the current glyph with the ligature glyph
                                    for (var _i5 = matched.length - 1; _i5 >= 0; _i5--) {
                                        this.glyphs.splice(matched[_i5], 1);
                                    }

                                    this.glyphs[this.glyphIterator.index] = ligatureGlyph;
                                    return true;
                                }

                                return false;
                            }

                            case 5:
                                // Contextual Substitution
                                return this.applyContext(table);

                            case 6:
                                // Chaining Contextual Substitution
                                return this.applyChainingContext(table);

                            case 7:
                                // Extension Substitution
                                return this.applyLookup(table.lookupType, table.extension);

                            default:
                                throw new Error('GSUB lookupType ' + lookupType + ' is not supported');
                        }
                    };

                    return GSUBProcessor;
                }(OTProcessor);

                var GPOSProcessor = function (_OTProcessor) {
                    _inherits(GPOSProcessor, _OTProcessor);

                    function GPOSProcessor() {
                        _classCallCheck(this, GPOSProcessor);

                        return _possibleConstructorReturn(this, _OTProcessor.apply(this, arguments));
                    }

                    GPOSProcessor.prototype.applyPositionValue = function applyPositionValue(sequenceIndex, value) {
                        var position = this.positions[this.glyphIterator.peekIndex(sequenceIndex)];
                        if (value.xAdvance != null) {
                            position.xAdvance += value.xAdvance;
                        }

                        if (value.yAdvance != null) {
                            position.yAdvance += value.yAdvance;
                        }

                        if (value.xPlacement != null) {
                            position.xOffset += value.xPlacement;
                        }

                        if (value.yPlacement != null) {
                            position.yOffset += value.yPlacement;
                        }

                        // Adjustments for font variations
                        var variationProcessor = this.font._variationProcessor;
                        var variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;
                        if (variationProcessor && variationStore) {
                            if (value.xPlaDevice) {
                                position.xOffset += variationProcessor.getDelta(variationStore, value.xPlaDevice.a, value.xPlaDevice.b);
                            }

                            if (value.yPlaDevice) {
                                position.yOffset += variationProcessor.getDelta(variationStore, value.yPlaDevice.a, value.yPlaDevice.b);
                            }

                            if (value.xAdvDevice) {
                                position.xAdvance += variationProcessor.getDelta(variationStore, value.xAdvDevice.a, value.xAdvDevice.b);
                            }

                            if (value.yAdvDevice) {
                                position.yAdvance += variationProcessor.getDelta(variationStore, value.yAdvDevice.a, value.yAdvDevice.b);
                            }
                        }

                        // TODO: device tables
                    };

                    GPOSProcessor.prototype.applyLookup = function applyLookup(lookupType, table) {
                        switch (lookupType) {
                            case 1:
                            {
                                // Single positioning value
                                var index = this.coverageIndex(table.coverage);
                                if (index === -1) {
                                    return false;
                                }

                                switch (table.version) {
                                    case 1:
                                        this.applyPositionValue(0, table.value);
                                        break;

                                    case 2:
                                        this.applyPositionValue(0, table.values.get(index));
                                        break;
                                }

                                return true;
                            }

                            case 2:
                            {
                                // Pair Adjustment Positioning
                                var nextGlyph = this.glyphIterator.peek();
                                if (!nextGlyph) {
                                    return false;
                                }

                                var _index = this.coverageIndex(table.coverage);
                                if (_index === -1) {
                                    return false;
                                }

                                switch (table.version) {
                                    case 1:
                                        // Adjustments for glyph pairs
                                        var set = table.pairSets.get(_index);

                                        for (var _iterator = set, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
                                            var _ref;

                                            if (_isArray) {
                                                if (_i >= _iterator.length) break;
                                                _ref = _iterator[_i++];
                                            } else {
                                                _i = _iterator.next();
                                                if (_i.done) break;
                                                _ref = _i.value;
                                            }

                                            var _pair = _ref;

                                            if (_pair.secondGlyph === nextGlyph.id) {
                                                this.applyPositionValue(0, _pair.value1);
                                                this.applyPositionValue(1, _pair.value2);
                                                return true;
                                            }
                                        }

                                        return false;

                                    case 2:
                                        // Class pair adjustment
                                        var class1 = this.getClassID(this.glyphIterator.cur.id, table.classDef1);
                                        var class2 = this.getClassID(nextGlyph.id, table.classDef2);
                                        if (class1 === -1 || class2 === -1) {
                                            return false;
                                        }

                                        var pair = table.classRecords.get(class1).get(class2);
                                        this.applyPositionValue(0, pair.value1);
                                        this.applyPositionValue(1, pair.value2);
                                        return true;
                                }
                            }

                            case 3:
                            {
                                // Cursive Attachment Positioning
                                var nextIndex = this.glyphIterator.peekIndex();
                                var _nextGlyph = this.glyphs[nextIndex];
                                if (!_nextGlyph) {
                                    return false;
                                }

                                var curRecord = table.entryExitRecords[this.coverageIndex(table.coverage)];
                                if (!curRecord || !curRecord.exitAnchor) {
                                    return false;
                                }

                                var nextRecord = table.entryExitRecords[this.coverageIndex(table.coverage, _nextGlyph.id)];
                                if (!nextRecord || !nextRecord.entryAnchor) {
                                    return false;
                                }

                                var entry = this.getAnchor(nextRecord.entryAnchor);
                                var exit = this.getAnchor(curRecord.exitAnchor);

                                var cur = this.positions[this.glyphIterator.index];
                                var next = this.positions[nextIndex];

                                switch (this.direction) {
                                    case 'ltr':
                                        cur.xAdvance = exit.x + cur.xOffset;

                                        var d = entry.x + next.xOffset;
                                        next.xAdvance -= d;
                                        next.xOffset -= d;
                                        break;

                                    case 'rtl':
                                        d = exit.x + cur.xOffset;
                                        cur.xAdvance -= d;
                                        cur.xOffset -= d;
                                        next.xAdvance = entry.x + next.xOffset;
                                        break;
                                }

                                if (this.glyphIterator.flags.rightToLeft) {
                                    this.glyphIterator.cur.cursiveAttachment = nextIndex;
                                    cur.yOffset = entry.y - exit.y;
                                } else {
                                    _nextGlyph.cursiveAttachment = this.glyphIterator.index;
                                    cur.yOffset = exit.y - entry.y;
                                }

                                return true;
                            }

                            case 4:
                            {
                                // Mark to base positioning
                                var markIndex = this.coverageIndex(table.markCoverage);
                                if (markIndex === -1) {
                                    return false;
                                }

                                // search backward for a base glyph
                                var baseGlyphIndex = this.glyphIterator.index;
                                while (--baseGlyphIndex >= 0 && (this.glyphs[baseGlyphIndex].isMark || this.glyphs[baseGlyphIndex].ligatureComponent > 0)) {}

                                if (baseGlyphIndex < 0) {
                                    return false;
                                }

                                var baseIndex = this.coverageIndex(table.baseCoverage, this.glyphs[baseGlyphIndex].id);
                                if (baseIndex === -1) {
                                    return false;
                                }

                                var markRecord = table.markArray[markIndex];
                                var baseAnchor = table.baseArray[baseIndex][markRecord.class];
                                this.applyAnchor(markRecord, baseAnchor, baseGlyphIndex);
                                return true;
                            }

                            case 5:
                            {
                                // Mark to ligature positioning
                                var _markIndex = this.coverageIndex(table.markCoverage);
                                if (_markIndex === -1) {
                                    return false;
                                }

                                // search backward for a base glyph
                                var _baseGlyphIndex = this.glyphIterator.index;
                                while (--_baseGlyphIndex >= 0 && this.glyphs[_baseGlyphIndex].isMark) {}

                                if (_baseGlyphIndex < 0) {
                                    return false;
                                }

                                var ligIndex = this.coverageIndex(table.ligatureCoverage, this.glyphs[_baseGlyphIndex].id);
                                if (ligIndex === -1) {
                                    return false;
                                }

                                var ligAttach = table.ligatureArray[ligIndex];
                                var markGlyph = this.glyphIterator.cur;
                                var ligGlyph = this.glyphs[_baseGlyphIndex];
                                var compIndex = ligGlyph.ligatureID && ligGlyph.ligatureID === markGlyph.ligatureID && markGlyph.ligatureComponent > 0 ? Math.min(markGlyph.ligatureComponent, ligGlyph.codePoints.length) - 1 : ligGlyph.codePoints.length - 1;

                                var _markRecord = table.markArray[_markIndex];
                                var _baseAnchor = ligAttach[compIndex][_markRecord.class];
                                this.applyAnchor(_markRecord, _baseAnchor, _baseGlyphIndex);
                                return true;
                            }

                            case 6:
                            {
                                // Mark to mark positioning
                                var mark1Index = this.coverageIndex(table.mark1Coverage);
                                if (mark1Index === -1) {
                                    return false;
                                }

                                // get the previous mark to attach to
                                var prevIndex = this.glyphIterator.peekIndex(-1);
                                var prev = this.glyphs[prevIndex];
                                if (!prev || !prev.isMark) {
                                    return false;
                                }

                                var _cur = this.glyphIterator.cur;

                                // The following logic was borrowed from Harfbuzz
                                var good = false;
                                if (_cur.ligatureID === prev.ligatureID) {
                                    if (!_cur.ligatureID) {
                                        // Marks belonging to the same base
                                        good = true;
                                    } else if (_cur.ligatureComponent === prev.ligatureComponent) {
                                        // Marks belonging to the same ligature component
                                        good = true;
                                    }
                                } else {
                                    // If ligature ids don't match, it may be the case that one of the marks
                                    // itself is a ligature, in which case match.
                                    if (_cur.ligatureID && !_cur.ligatureComponent || prev.ligatureID && !prev.ligatureComponent) {
                                        good = true;
                                    }
                                }

                                if (!good) {
                                    return false;
                                }

                                var mark2Index = this.coverageIndex(table.mark2Coverage, prev.id);
                                if (mark2Index === -1) {
                                    return false;
                                }

                                var _markRecord2 = table.mark1Array[mark1Index];
                                var _baseAnchor2 = table.mark2Array[mark2Index][_markRecord2.class];
                                this.applyAnchor(_markRecord2, _baseAnchor2, prevIndex);
                                return true;
                            }

                            case 7:
                                // Contextual positioning
                                return this.applyContext(table);

                            case 8:
                                // Chaining contextual positioning
                                return this.applyChainingContext(table);

                            case 9:
                                // Extension positioning
                                return this.applyLookup(table.lookupType, table.extension);

                            default:
                                throw new Error('Unsupported GPOS table: ' + lookupType);
                        }
                    };

                    GPOSProcessor.prototype.applyAnchor = function applyAnchor(markRecord, baseAnchor, baseGlyphIndex) {
                        var baseCoords = this.getAnchor(baseAnchor);
                        var markCoords = this.getAnchor(markRecord.markAnchor);

                        var basePos = this.positions[baseGlyphIndex];
                        var markPos = this.positions[this.glyphIterator.index];

                        markPos.xOffset = baseCoords.x - markCoords.x;
                        markPos.yOffset = baseCoords.y - markCoords.y;
                        this.glyphIterator.cur.markAttachment = baseGlyphIndex;
                    };

                    GPOSProcessor.prototype.getAnchor = function getAnchor(anchor) {
                        // TODO: contour point, device tables
                        var x = anchor.xCoordinate;
                        var y = anchor.yCoordinate;

                        // Adjustments for font variations
                        var variationProcessor = this.font._variationProcessor;
                        var variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;
                        if (variationProcessor && variationStore) {
                            if (anchor.xDeviceTable) {
                                x += variationProcessor.getDelta(variationStore, anchor.xDeviceTable.a, anchor.xDeviceTable.b);
                            }

                            if (anchor.yDeviceTable) {
                                y += variationProcessor.getDelta(variationStore, anchor.yDeviceTable.a, anchor.yDeviceTable.b);
                            }
                        }

                        return { x: x, y: y };
                    };

                    GPOSProcessor.prototype.applyFeatures = function applyFeatures(userFeatures, glyphs, advances) {
                        _OTProcessor.prototype.applyFeatures.call(this, userFeatures, glyphs, advances);

                        for (var i = 0; i < this.glyphs.length; i++) {
                            this.fixCursiveAttachment(i);
                        }

                        this.fixMarkAttachment();
                    };

                    GPOSProcessor.prototype.fixCursiveAttachment = function fixCursiveAttachment(i) {
                        var glyph = this.glyphs[i];
                        if (glyph.cursiveAttachment != null) {
                            var j = glyph.cursiveAttachment;

                            glyph.cursiveAttachment = null;
                            this.fixCursiveAttachment(j);

                            this.positions[i].yOffset += this.positions[j].yOffset;
                        }
                    };

                    GPOSProcessor.prototype.fixMarkAttachment = function fixMarkAttachment() {
                        for (var i = 0; i < this.glyphs.length; i++) {
                            var glyph = this.glyphs[i];
                            if (glyph.markAttachment != null) {
                                var j = glyph.markAttachment;

                                this.positions[i].xOffset += this.positions[j].xOffset;
                                this.positions[i].yOffset += this.positions[j].yOffset;

                                if (this.direction === 'ltr') {
                                    for (var k = j; k < i; k++) {
                                        this.positions[i].xOffset -= this.positions[k].xAdvance;
                                        this.positions[i].yOffset -= this.positions[k].yAdvance;
                                    }
                                } else {
                                    for (var _k = j + 1; _k < i + 1; _k++) {
                                        this.positions[i].xOffset += this.positions[_k].xAdvance;
                                        this.positions[i].yOffset += this.positions[_k].yAdvance;
                                    }
                                }
                            }
                        }
                    };

                    return GPOSProcessor;
                }(OTProcessor);

                var OTLayoutEngine = function () {
                    function OTLayoutEngine(font) {
                        _classCallCheck(this, OTLayoutEngine);

                        this.font = font;
                        this.glyphInfos = null;
                        this.plan = null;
                        this.GSUBProcessor = null;
                        this.GPOSProcessor = null;
                        this.fallbackPosition = true;

                        if (font.GSUB) {
                            this.GSUBProcessor = new GSUBProcessor(font, font.GSUB);
                        }

                        if (font.GPOS) {
                            this.GPOSProcessor = new GPOSProcessor(font, font.GPOS);
                        }
                    }

                    OTLayoutEngine.prototype.setup = function setup(glyphRun) {
                        var _this = this;

                        // Map glyphs to GlyphInfo objects so data can be passed between
                        // GSUB and GPOS without mutating the real (shared) Glyph objects.
                        this.glyphInfos = glyphRun.glyphs.map(function (glyph) {
                            return new GlyphInfo(_this.font, glyph.id, [].concat(glyph.codePoints));
                        });

                        // Select a script based on what is available in GSUB/GPOS.
                        var script = null;
                        if (this.GPOSProcessor) {
                            script = this.GPOSProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);
                        }

                        if (this.GSUBProcessor) {
                            script = this.GSUBProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);
                        }

                        // Choose a shaper based on the script, and setup a shaping plan.
                        // This determines which features to apply to which glyphs.
                        this.shaper = choose(script);
                        this.plan = new ShapingPlan(this.font, script, glyphRun.direction);
                        this.shaper.plan(this.plan, this.glyphInfos, glyphRun.features);

                        // Assign chosen features to output glyph run
                        for (var key in this.plan.allFeatures) {
                            glyphRun.features[key] = true;
                        }
                    };

                    OTLayoutEngine.prototype.substitute = function substitute(glyphRun) {
                        var _this2 = this;

                        if (this.GSUBProcessor) {
                            this.plan.process(this.GSUBProcessor, this.glyphInfos);

                            // Map glyph infos back to normal Glyph objects
                            glyphRun.glyphs = this.glyphInfos.map(function (glyphInfo) {
                                return _this2.font.getGlyph(glyphInfo.id, glyphInfo.codePoints);
                            });
                        }
                    };

                    OTLayoutEngine.prototype.position = function position(glyphRun) {
                        if (this.shaper.zeroMarkWidths === 'BEFORE_GPOS') {
                            this.zeroMarkAdvances(glyphRun.positions);
                        }

                        if (this.GPOSProcessor) {
                            this.plan.process(this.GPOSProcessor, this.glyphInfos, glyphRun.positions);
                        }

                        if (this.shaper.zeroMarkWidths === 'AFTER_GPOS') {
                            this.zeroMarkAdvances(glyphRun.positions);
                        }

                        // Reverse the glyphs and positions if the script is right-to-left
                        if (glyphRun.direction === 'rtl') {
                            glyphRun.glyphs.reverse();
                            glyphRun.positions.reverse();
                        }

                        return this.GPOSProcessor && this.GPOSProcessor.features;
                    };

                    OTLayoutEngine.prototype.zeroMarkAdvances = function zeroMarkAdvances(positions) {
                        for (var i = 0; i < this.glyphInfos.length; i++) {
                            if (this.glyphInfos[i].isMark) {
                                positions[i].xAdvance = 0;
                                positions[i].yAdvance = 0;
                            }
                        }
                    };

                    OTLayoutEngine.prototype.cleanup = function cleanup() {
                        this.glyphInfos = null;
                        this.plan = null;
                        this.shaper = null;
                    };

                    OTLayoutEngine.prototype.getAvailableFeatures = function getAvailableFeatures(script, language) {
                        var features = [];

                        if (this.GSUBProcessor) {
                            this.GSUBProcessor.selectScript(script, language);
                            features.push.apply(features, _Object$keys(this.GSUBProcessor.features));
                        }

                        if (this.GPOSProcessor) {
                            this.GPOSProcessor.selectScript(script, language);
                            features.push.apply(features, _Object$keys(this.GPOSProcessor.features));
                        }

                        return features;
                    };

                    return OTLayoutEngine;
                }();

                var LayoutEngine = function () {
                    function LayoutEngine(font) {
                        _classCallCheck(this, LayoutEngine);

                        this.font = font;
                        this.unicodeLayoutEngine = null;
                        this.kernProcessor = null;

                        // Choose an advanced layout engine. We try the AAT morx table first since more
                        // scripts are currently supported because the shaping logic is built into the font.
                        if (this.font.morx) {
                            this.engine = new AATLayoutEngine(this.font);
                        } else if (this.font.GSUB || this.font.GPOS) {
                            this.engine = new OTLayoutEngine(this.font);
                        }
                    }

                    LayoutEngine.prototype.layout = function layout(string, features, script, language, direction) {
                        // Make the features parameter optional
                        if (typeof features === 'string') {
                            direction = language;
                            language = script;
                            script = features;
                            features = [];
                        }

                        // Map string to glyphs if needed
                        if (typeof string === 'string') {
                            // Attempt to detect the script from the string if not provided.
                            if (script == null) {
                                script = forString(string);
                            }

                            var glyphs = this.font.glyphsForString(string);
                        } else {
                            // Attempt to detect the script from the glyph code points if not provided.
                            if (script == null) {
                                var codePoints = [];
                                for (var _iterator = string, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
                                    var _ref;

                                    if (_isArray) {
                                        if (_i >= _iterator.length) break;
                                        _ref = _iterator[_i++];
                                    } else {
                                        _i = _iterator.next();
                                        if (_i.done) break;
                                        _ref = _i.value;
                                    }

                                    var glyph = _ref;

                                    codePoints.push.apply(codePoints, glyph.codePoints);
                                }

                                script = forCodePoints(codePoints);
                            }

                            var glyphs = string;
                        }

                        var glyphRun = new GlyphRun(glyphs, features, script, language, direction);

                        // Return early if there are no glyphs
                        if (glyphs.length === 0) {
                            glyphRun.positions = [];
                            return glyphRun;
                        }

                        // Setup the advanced layout engine
                        if (this.engine && this.engine.setup) {
                            this.engine.setup(glyphRun);
                        }

                        // Substitute and position the glyphs
                        this.substitute(glyphRun);
                        this.position(glyphRun);

                        this.hideDefaultIgnorables(glyphRun.glyphs, glyphRun.positions);

                        // Let the layout engine clean up any state it might have
                        if (this.engine && this.engine.cleanup) {
                            this.engine.cleanup();
                        }

                        return glyphRun;
                    };

                    LayoutEngine.prototype.substitute = function substitute(glyphRun) {
                        // Call the advanced layout engine to make substitutions
                        if (this.engine && this.engine.substitute) {
                            this.engine.substitute(glyphRun);
                        }
                    };

                    LayoutEngine.prototype.position = function position(glyphRun) {
                        // Get initial glyph positions
                        glyphRun.positions = glyphRun.glyphs.map(function (glyph) {
                            return new GlyphPosition(glyph.advanceWidth);
                        });
                        var positioned = null;

                        // Call the advanced layout engine. Returns the features applied.
                        if (this.engine && this.engine.position) {
                            positioned = this.engine.position(glyphRun);
                        }

                        // if there is no GPOS table, use unicode properties to position marks.
                        if (!positioned && (!this.engine || this.engine.fallbackPosition)) {
                            if (!this.unicodeLayoutEngine) {
                                this.unicodeLayoutEngine = new UnicodeLayoutEngine(this.font);
                            }

                            this.unicodeLayoutEngine.positionGlyphs(glyphRun.glyphs, glyphRun.positions);
                        }

                        // if kerning is not supported by GPOS, do kerning with the TrueType/AAT kern table
                        if ((!positioned || !positioned.kern) && glyphRun.features.kern !== false && this.font.kern) {
                            if (!this.kernProcessor) {
                                this.kernProcessor = new KernProcessor(this.font);
                            }

                            this.kernProcessor.process(glyphRun.glyphs, glyphRun.positions);
                            glyphRun.features.kern = true;
                        }
                    };

                    LayoutEngine.prototype.hideDefaultIgnorables = function hideDefaultIgnorables(glyphs, positions) {
                        var space = this.font.glyphForCodePoint(0x20);
                        for (var i = 0; i < glyphs.length; i++) {
                            if (this.isDefaultIgnorable(glyphs[i].codePoints[0])) {
                                glyphs[i] = space;
                                positions[i].xAdvance = 0;
                                positions[i].yAdvance = 0;
                            }
                        }
                    };

                    LayoutEngine.prototype.isDefaultIgnorable = function isDefaultIgnorable(ch) {
                        // From DerivedCoreProperties.txt in the Unicode database,
                        // minus U+115F, U+1160, U+3164 and U+FFA0, which is what
                        // Harfbuzz and Uniscribe do.
                        var plane = ch >> 16;
                        if (plane === 0) {
                            // BMP
                            switch (ch >> 8) {
                                case 0x00:
                                    return ch === 0x00AD;
                                case 0x03:
                                    return ch === 0x034F;
                                case 0x06:
                                    return ch === 0x061C;
                                case 0x17:
                                    return 0x17B4 <= ch && ch <= 0x17B5;
                                case 0x18:
                                    return 0x180B <= ch && ch <= 0x180E;
                                case 0x20:
                                    return 0x200B <= ch && ch <= 0x200F || 0x202A <= ch && ch <= 0x202E || 0x2060 <= ch && ch <= 0x206F;
                                case 0xFE:
                                    return 0xFE00 <= ch && ch <= 0xFE0F || ch === 0xFEFF;
                                case 0xFF:
                                    return 0xFFF0 <= ch && ch <= 0xFFF8;
                                default:
                                    return false;
                            }
                        } else {
                            // Other planes
                            switch (plane) {
                                case 0x01:
                                    return 0x1BCA0 <= ch && ch <= 0x1BCA3 || 0x1D173 <= ch && ch <= 0x1D17A;
                                case 0x0E:
                                    return 0xE0000 <= ch && ch <= 0xE0FFF;
                                default:
                                    return false;
                            }
                        }
                    };

                    LayoutEngine.prototype.getAvailableFeatures = function getAvailableFeatures(script, language) {
                        var features = [];

                        if (this.engine) {
                            features.push.apply(features, this.engine.getAvailableFeatures(script, language));
                        }

                        if (this.font.kern && features.indexOf('kern') === -1) {
                            features.push('kern');
                        }

                        return features;
                    };

                    LayoutEngine.prototype.stringsForGlyph = function stringsForGlyph(gid) {
                        var result = new _Set();

                        var codePoints = this.font._cmapProcessor.codePointsForGlyph(gid);
                        for (var _iterator2 = codePoints, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
                            var _ref2;

                            if (_isArray2) {
                                if (_i2 >= _iterator2.length) break;
                                _ref2 = _iterator2[_i2++];
                            } else {
                                _i2 = _iterator2.next();
                                if (_i2.done) break;
                                _ref2 = _i2.value;
                            }

                            var codePoint = _ref2;

                            result.add(_String$fromCodePoint(codePoint));
                        }

                        if (this.engine && this.engine.stringsForGlyph) {
                            for (var _iterator3 = this.engine.stringsForGlyph(gid), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
                                var _ref3;

                                if (_isArray3) {
                                    if (_i3 >= _iterator3.length) break;
                                    _ref3 = _iterator3[_i3++];
                                } else {
                                    _i3 = _iterator3.next();
                                    if (_i3.done) break;
                                    _ref3 = _i3.value;
                                }

                                var string = _ref3;

                                result.add(string);
                            }
                        }

                        return _Array$from(result);
                    };

                    return LayoutEngine;
                }();

                var SVG_COMMANDS = {
                    moveTo: 'M',
                    lineTo: 'L',
                    quadraticCurveTo: 'Q',
                    bezierCurveTo: 'C',
                    closePath: 'Z'
                };

                /**
                 * Path objects are returned by glyphs and represent the actual
                 * vector outlines for each glyph in the font. Paths can be converted
                 * to SVG path data strings, or to functions that can be applied to
                 * render the path to a graphics context.
                 */

                var Path = function () {
                    function Path() {
                        _classCallCheck(this, Path);

                        this.commands = [];
                        this._bbox = null;
                        this._cbox = null;
                    }

                    /**
                     * Compiles the path to a JavaScript function that can be applied with
                     * a graphics context in order to render the path.
                     * @return {string}
                     */


                    Path.prototype.toFunction = function toFunction() {
                        var cmds = this.commands.map(function (c) {
                            return '  ctx.' + c.command + '(' + c.args.join(', ') + ');';
                        });
                        return new Function('ctx', cmds.join('\n'));
                    };

                    /**
                     * Converts the path to an SVG path data string
                     * @return {string}
                     */


                    Path.prototype.toSVG = function toSVG() {
                        var cmds = this.commands.map(function (c) {
                            var args = c.args.map(function (arg) {
                                return Math.round(arg * 100) / 100;
                            });
                            return '' + SVG_COMMANDS[c.command] + args.join(' ');
                        });

                        return cmds.join('');
                    };

                    /**
                     * Gets the "control box" of a path.
                     * This is like the bounding box, but it includes all points including
                     * control points of bezier segments and is much faster to compute than
                     * the real bounding box.
                     * @type {BBox}
                     */


                    /**
                     * Applies a mapping function to each point in the path.
                     * @param {function} fn
                     * @return {Path}
                     */
                    Path.prototype.mapPoints = function mapPoints(fn) {
                        var path = new Path();

                        for (var _iterator = this.commands, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
                            var _ref;

                            if (_isArray) {
                                if (_i >= _iterator.length) break;
                                _ref = _iterator[_i++];
                            } else {
                                _i = _iterator.next();
                                if (_i.done) break;
                                _ref = _i.value;
                            }

                            var c = _ref;

                            var args = [];
                            for (var _i2 = 0; _i2 < c.args.length; _i2 += 2) {
                                var _fn = fn(c.args[_i2], c.args[_i2 + 1]),
                                    x = _fn[0],
                                    y = _fn[1];

                                args.push(x, y);
                            }

                            path[c.command].apply(path, args);
                        }

                        return path;
                    };

                    /**
                     * Transforms the path by the given matrix.
                     */


                    Path.prototype.transform = function transform(m0, m1, m2, m3, m4, m5) {
                        return this.mapPoints(function (x, y) {
                            x = m0 * x + m2 * y + m4;
                            y = m1 * x + m3 * y + m5;
                            return [x, y];
                        });
                    };

                    /**
                     * Translates the path by the given offset.
                     */


                    Path.prototype.translate = function translate(x, y) {
                        return this.transform(1, 0, 0, 1, x, y);
                    };

                    /**
                     * Rotates the path by the given angle (in radians).
                     */


                    Path.prototype.rotate = function rotate(angle) {
                        var cos = Math.cos(angle);
                        var sin = Math.sin(angle);
                        return this.transform(cos, sin, -sin, cos, 0, 0);
                    };

                    /**
                     * Scales the path.
                     */


                    Path.prototype.scale = function scale(scaleX) {
                        var scaleY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : scaleX;

                        return this.transform(scaleX, 0, 0, scaleY, 0, 0);
                    };

                    _createClass(Path, [{
                        key: 'cbox',
                        get: function get() {
                            if (!this._cbox) {
                                var cbox = new BBox();
                                for (var _iterator2 = this.commands, _isArray2 = Array.isArray(_iterator2), _i3 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
                                    var _ref2;

                                    if (_isArray2) {
                                        if (_i3 >= _iterator2.length) break;
                                        _ref2 = _iterator2[_i3++];
                                    } else {
                                        _i3 = _iterator2.next();
                                        if (_i3.done) break;
                                        _ref2 = _i3.value;
                                    }

                                    var command = _ref2;

                                    for (var _i4 = 0; _i4 < command.args.length; _i4 += 2) {
                                        cbox.addPoint(command.args[_i4], command.args[_i4 + 1]);
                                    }
                                }

                                this._cbox = _Object$freeze(cbox);
                            }

                            return this._cbox;
                        }

                        /**
                         * Gets the exact bounding box of the path by evaluating curve segments.
                         * Slower to compute than the control box, but more accurate.
                         * @type {BBox}
                         */

                    }, {
                        key: 'bbox',
                        get: function get() {
                            if (this._bbox) {
                                return this._bbox;
                            }

                            var bbox = new BBox();
                            var cx = 0,
                                cy = 0;

                            var f = function f(t) {
                                return Math.pow(1 - t, 3) * p0[i] + 3 * Math.pow(1 - t, 2) * t * p1[i] + 3 * (1 - t) * Math.pow(t, 2) * p2[i] + Math.pow(t, 3) * p3[i];
                            };

                            for (var _iterator3 = this.commands, _isArray3 = Array.isArray(_iterator3), _i5 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
                                var _ref3;

                                if (_isArray3) {
                                    if (_i5 >= _iterator3.length) break;
                                    _ref3 = _iterator3[_i5++];
                                } else {
                                    _i5 = _iterator3.next();
                                    if (_i5.done) break;
                                    _ref3 = _i5.value;
                                }

                                var c = _ref3;

                                switch (c.command) {
                                    case 'moveTo':
                                    case 'lineTo':
                                        var _c$args = c.args,
                                            x = _c$args[0],
                                            y = _c$args[1];

                                        bbox.addPoint(x, y);
                                        cx = x;
                                        cy = y;
                                        break;

                                    case 'quadraticCurveTo':
                                    case 'bezierCurveTo':
                                        if (c.command === 'quadraticCurveTo') {
                                            // http://fontforge.org/bezier.html
                                            var _c$args2 = c.args,
                                                qp1x = _c$args2[0],
                                                qp1y = _c$args2[1],
                                                p3x = _c$args2[2],
                                                p3y = _c$args2[3];

                                            var cp1x = cx + 2 / 3 * (qp1x - cx); // CP1 = QP0 + 2/3 * (QP1-QP0)
                                            var cp1y = cy + 2 / 3 * (qp1y - cy);
                                            var cp2x = p3x + 2 / 3 * (qp1x - p3x); // CP2 = QP2 + 2/3 * (QP1-QP2)
                                            var cp2y = p3y + 2 / 3 * (qp1y - p3y);
                                        } else {
                                            var _c$args3 = c.args,
                                                cp1x = _c$args3[0],
                                                cp1y = _c$args3[1],
                                                cp2x = _c$args3[2],
                                                cp2y = _c$args3[3],
                                                p3x = _c$args3[4],
                                                p3y = _c$args3[5];
                                        }

                                        // http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html
                                        bbox.addPoint(p3x, p3y);

                                        var p0 = [cx, cy];
                                        var p1 = [cp1x, cp1y];
                                        var p2 = [cp2x, cp2y];
                                        var p3 = [p3x, p3y];

                                        for (var i = 0; i <= 1; i++) {
                                            var b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];
                                            var a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];
                                            c = 3 * p1[i] - 3 * p0[i];

                                            if (a === 0) {
                                                if (b === 0) {
                                                    continue;
                                                }

                                                var t = -c / b;
                                                if (0 < t && t < 1) {
                                                    if (i === 0) {
                                                        bbox.addPoint(f(t), bbox.maxY);
                                                    } else if (i === 1) {
                                                        bbox.addPoint(bbox.maxX, f(t));
                                                    }
                                                }

                                                continue;
                                            }

                                            var b2ac = Math.pow(b, 2) - 4 * c * a;
                                            if (b2ac < 0) {
                                                continue;
                                            }

                                            var t1 = (-b + Math.sqrt(b2ac)) / (2 * a);
                                            if (0 < t1 && t1 < 1) {
                                                if (i === 0) {
                                                    bbox.addPoint(f(t1), bbox.maxY);
                                                } else if (i === 1) {
                                                    bbox.addPoint(bbox.maxX, f(t1));
                                                }
                                            }

                                            var t2 = (-b - Math.sqrt(b2ac)) / (2 * a);
                                            if (0 < t2 && t2 < 1) {
                                                if (i === 0) {
                                                    bbox.addPoint(f(t2), bbox.maxY);
                                                } else if (i === 1) {
                                                    bbox.addPoint(bbox.maxX, f(t2));
                                                }
                                            }
                                        }

                                        cx = p3x;
                                        cy = p3y;
                                        break;
                                }
                            }

                            return this._bbox = _Object$freeze(bbox);
                        }
                    }]);

                    return Path;
                }();

                var _arr = ['moveTo', 'lineTo', 'quadraticCurveTo', 'bezierCurveTo', 'closePath'];

                var _loop = function _loop() {
                    var command = _arr[_i6];
                    Path.prototype[command] = function () {
                        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                            args[_key] = arguments[_key];
                        }

                        this._bbox = this._cbox = null;
                        this.commands.push({
                            command: command,
                            args: args
                        });

                        return this;
                    };
                };

                for (var _i6 = 0; _i6 < _arr.length; _i6++) {
                    _loop();
                }

                var StandardNames = ['.notdef', '.null', 'nonmarkingreturn', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quotesingle', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'grave', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'Adieresis', 'Aring', 'Ccedilla', 'Eacute', 'Ntilde', 'Odieresis', 'Udieresis', 'aacute', 'agrave', 'acircumflex', 'adieresis', 'atilde', 'aring', 'ccedilla', 'eacute', 'egrave', 'ecircumflex', 'edieresis', 'iacute', 'igrave', 'icircumflex', 'idieresis', 'ntilde', 'oacute', 'ograve', 'ocircumflex', 'odieresis', 'otilde', 'uacute', 'ugrave', 'ucircumflex', 'udieresis', 'dagger', 'degree', 'cent', 'sterling', 'section', 'bullet', 'paragraph', 'germandbls', 'registered', 'copyright', 'trademark', 'acute', 'dieresis', 'notequal', 'AE', 'Oslash', 'infinity', 'plusminus', 'lessequal', 'greaterequal', 'yen', 'mu', 'partialdiff', 'summation', 'product', 'pi', 'integral', 'ordfeminine', 'ordmasculine', 'Omega', 'ae', 'oslash', 'questiondown', 'exclamdown', 'logicalnot', 'radical', 'florin', 'approxequal', 'Delta', 'guillemotleft', 'guillemotright', 'ellipsis', 'nonbreakingspace', 'Agrave', 'Atilde', 'Otilde', 'OE', 'oe', 'endash', 'emdash', 'quotedblleft', 'quotedblright', 'quoteleft', 'quoteright', 'divide', 'lozenge', 'ydieresis', 'Ydieresis', 'fraction', 'currency', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'daggerdbl', 'periodcentered', 'quotesinglbase', 'quotedblbase', 'perthousand', 'Acircumflex', 'Ecircumflex', 'Aacute', 'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Oacute', 'Ocircumflex', 'apple', 'Ograve', 'Uacute', 'Ucircumflex', 'Ugrave', 'dotlessi', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'ring', 'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'Lslash', 'lslash', 'Scaron', 'scaron', 'Zcaron', 'zcaron', 'brokenbar', 'Eth', 'eth', 'Yacute', 'yacute', 'Thorn', 'thorn', 'minus', 'multiply', 'onesuperior', 'twosuperior', 'threesuperior', 'onehalf', 'onequarter', 'threequarters', 'franc', 'Gbreve', 'gbreve', 'Idotaccent', 'Scedilla', 'scedilla', 'Cacute', 'cacute', 'Ccaron', 'ccaron', 'dcroat'];

                var _class$8;
                function _applyDecoratedDescriptor$4(target, property, decorators, descriptor, context) {
                    var desc = {};
                    Object['ke' + 'ys'](descriptor).forEach(function (key) {
                        desc[key] = descriptor[key];
                    });
                    desc.enumerable = !!desc.enumerable;
                    desc.configurable = !!desc.configurable;

                    if ('value' in desc || desc.initializer) {
                        desc.writable = true;
                    }

                    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
                        return decorator(target, property, desc) || desc;
                    }, desc);

                    if (context && desc.initializer !== void 0) {
                        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
                        desc.initializer = undefined;
                    }

                    if (desc.initializer === void 0) {
                        Object['define' + 'Property'](target, property, desc);
                        desc = null;
                    }

                    return desc;
                }

                /**
                 * Glyph objects represent a glyph in the font. They have various properties for accessing metrics and
                 * the actual vector path the glyph represents, and methods for rendering the glyph to a graphics context.
                 *
                 * You do not create glyph objects directly. They are created by various methods on the font object.
                 * There are several subclasses of the base Glyph class internally that may be returned depending
                 * on the font format, but they all inherit from this class.
                 */
                var Glyph = (_class$8 = function () {
                    function Glyph(id, codePoints, font) {
                        _classCallCheck(this, Glyph);

                        /**
                         * The glyph id in the font
                         * @type {number}
                         */
                        this.id = id;

                        /**
                         * An array of unicode code points that are represented by this glyph.
                         * There can be multiple code points in the case of ligatures and other glyphs
                         * that represent multiple visual characters.
                         * @type {number[]}
                         */
                        this.codePoints = codePoints;
                        this._font = font;

                        // TODO: get this info from GDEF if available
                        this.isMark = this.codePoints.every(unicode.isMark);
                        this.isLigature = this.codePoints.length > 1;
                    }

                    Glyph.prototype._getPath = function _getPath() {
                        return new Path();
                    };

                    Glyph.prototype._getCBox = function _getCBox() {
                        return this.path.cbox;
                    };

                    Glyph.prototype._getBBox = function _getBBox() {
                        return this.path.bbox;
                    };

                    Glyph.prototype._getTableMetrics = function _getTableMetrics(table) {
                        if (this.id < table.metrics.length) {
                            return table.metrics.get(this.id);
                        }

                        var metric = table.metrics.get(table.metrics.length - 1);
                        var res = {
                            advance: metric ? metric.advance : 0,
                            bearing: table.bearings.get(this.id - table.metrics.length) || 0
                        };

                        return res;
                    };

                    Glyph.prototype._getMetrics = function _getMetrics(cbox) {
                        if (this._metrics) {
                            return this._metrics;
                        }

                        var _getTableMetrics2 = this._getTableMetrics(this._font.hmtx),
                            advanceWidth = _getTableMetrics2.advance,
                            leftBearing = _getTableMetrics2.bearing;

                        // For vertical metrics, use vmtx if available, or fall back to global data from OS/2 or hhea


                        if (this._font.vmtx) {
                            var _getTableMetrics3 = this._getTableMetrics(this._font.vmtx),
                                advanceHeight = _getTableMetrics3.advance,
                                topBearing = _getTableMetrics3.bearing;
                        } else {
                            var os2 = void 0;
                            if (typeof cbox === 'undefined' || cbox === null) {
                                cbox = this.cbox;
                            }

                            if ((os2 = this._font['OS/2']) && os2.version > 0) {
                                var advanceHeight = Math.abs(os2.typoAscender - os2.typoDescender);
                                var topBearing = os2.typoAscender - cbox.maxY;
                            } else {
                                var hhea = this._font.hhea;

                                var advanceHeight = Math.abs(hhea.ascent - hhea.descent);
                                var topBearing = hhea.ascent - cbox.maxY;
                            }
                        }

                        if (this._font._variationProcessor && this._font.HVAR) {
                            advanceWidth += this._font._variationProcessor.getAdvanceAdjustment(this.id, this._font.HVAR);
                        }

                        return this._metrics = { advanceWidth: advanceWidth, advanceHeight: advanceHeight, leftBearing: leftBearing, topBearing: topBearing };
                    };

                    /**
                     * The glyphéˆ¥æªš control box.
                     * This is often the same as the bounding box, but is faster to compute.
                     * Because of the way bezier curves are defined, some of the control points
                     * can be outside of the bounding box. Where `bbox` takes this into account,
                     * `cbox` does not. Thus, cbox is less accurate, but faster to compute.
                     * See [here](http://www.freetype.org/freetype2/docs/glyphs/glyphs-6.html#section-2)
                     * for a more detailed description.
                     *
                     * @type {BBox}
                     */


                    /**
                     * Returns a path scaled to the given font size.
                     * @param {number} size
                     * @return {Path}
                     */
                    Glyph.prototype.getScaledPath = function getScaledPath(size) {
                        var scale = 1 / this._font.unitsPerEm * size;
                        return this.path.scale(scale);
                    };

                    /**
                     * The glyph's advance width.
                     * @type {number}
                     */


                    Glyph.prototype._getName = function _getName() {
                        var post = this._font.post;

                        if (!post) {
                            return null;
                        }

                        switch (post.version) {
                            case 1:
                                return StandardNames[this.id];

                            case 2:
                                var id = post.glyphNameIndex[this.id];
                                if (id < StandardNames.length) {
                                    return StandardNames[id];
                                }

                                return post.names[id - StandardNames.length];

                            case 2.5:
                                return StandardNames[this.id + post.offsets[this.id]];

                            case 4:
                                return String.fromCharCode(post.map[this.id]);
                        }
                    };

                    /**
                     * The glyph's name
                     * @type {string}
                     */


                    /**
                     * Renders the glyph to the given graphics context, at the specified font size.
                     * @param {CanvasRenderingContext2d} ctx
                     * @param {number} size
                     */
                    Glyph.prototype.render = function render(ctx, size) {
                        ctx.save();

                        var scale = 1 / this._font.head.unitsPerEm * size;
                        ctx.scale(scale, scale);

                        var fn = this.path.toFunction();
                        fn(ctx);
                        ctx.fill();

                        ctx.restore();
                    };

                    _createClass(Glyph, [{
                        key: 'cbox',
                        get: function get() {
                            return this._getCBox();
                        }

                        /**
                         * The glyphéˆ¥æªš bounding box, i.e. the rectangle that encloses the
                         * glyph outline as tightly as possible.
                         * @type {BBox}
                         */

                    }, {
                        key: 'bbox',
                        get: function get() {
                            return this._getBBox();
                        }

                        /**
                         * A vector Path object representing the glyph outline.
                         * @type {Path}
                         */

                    }, {
                        key: 'path',
                        get: function get() {
                            // Cache the path so we only decode it once
                            // Decoding is actually performed by subclasses
                            return this._getPath();
                        }
                    }, {
                        key: 'advanceWidth',
                        get: function get() {
                            return this._getMetrics().advanceWidth;
                        }

                        /**
                         * The glyph's advance height.
                         * @type {number}
                         */

                    }, {
                        key: 'advanceHeight',
                        get: function get() {
                            return this._getMetrics().advanceHeight;
                        }
                    }, {
                        key: 'ligatureCaretPositions',
                        get: function get() {}
                    }, {
                        key: 'name',
                        get: function get() {
                            return this._getName();
                        }
                    }]);

                    return Glyph;
                }(), (_applyDecoratedDescriptor$4(_class$8.prototype, 'cbox', [cache], _Object$getOwnPropertyDescriptor(_class$8.prototype, 'cbox'), _class$8.prototype), _applyDecoratedDescriptor$4(_class$8.prototype, 'bbox', [cache], _Object$getOwnPropertyDescriptor(_class$8.prototype, 'bbox'), _class$8.prototype), _applyDecoratedDescriptor$4(_class$8.prototype, 'path', [cache], _Object$getOwnPropertyDescriptor(_class$8.prototype, 'path'), _class$8.prototype), _applyDecoratedDescriptor$4(_class$8.prototype, 'advanceWidth', [cache], _Object$getOwnPropertyDescriptor(_class$8.prototype, 'advanceWidth'), _class$8.prototype), _applyDecoratedDescriptor$4(_class$8.prototype, 'advanceHeight', [cache], _Object$getOwnPropertyDescriptor(_class$8.prototype, 'advanceHeight'), _class$8.prototype), _applyDecoratedDescriptor$4(_class$8.prototype, 'name', [cache], _Object$getOwnPropertyDescriptor(_class$8.prototype, 'name'), _class$8.prototype)), _class$8);

                // The header for both simple and composite glyphs
                var GlyfHeader = new r.Struct({
                    numberOfContours: r.int16, // if negative, this is a composite glyph
                    xMin: r.int16,
                    yMin: r.int16,
                    xMax: r.int16,
                    yMax: r.int16
                });

                // Flags for simple glyphs
                var ON_CURVE = 1 << 0;
                var X_SHORT_VECTOR = 1 << 1;
                var Y_SHORT_VECTOR = 1 << 2;
                var REPEAT = 1 << 3;
                var SAME_X = 1 << 4;
                var SAME_Y = 1 << 5;

                // Flags for composite glyphs
                var ARG_1_AND_2_ARE_WORDS = 1 << 0;
                var WE_HAVE_A_SCALE = 1 << 3;
                var MORE_COMPONENTS = 1 << 5;
                var WE_HAVE_AN_X_AND_Y_SCALE = 1 << 6;
                var WE_HAVE_A_TWO_BY_TWO = 1 << 7;
                var WE_HAVE_INSTRUCTIONS = 1 << 8;
                // Represents a point in a simple glyph
                var Point = function () {
                    function Point(onCurve, endContour) {
                        var x = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
                        var y = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

                        _classCallCheck(this, Point);

                        this.onCurve = onCurve;
                        this.endContour = endContour;
                        this.x = x;
                        this.y = y;
                    }

                    Point.prototype.copy = function copy() {
                        return new Point(this.onCurve, this.endContour, this.x, this.y);
                    };

                    return Point;
                }();

                // Represents a component in a composite glyph

                var Component = function Component(glyphID, dx, dy) {
                    _classCallCheck(this, Component);

                    this.glyphID = glyphID;
                    this.dx = dx;
                    this.dy = dy;
                    this.pos = 0;
                    this.scaleX = this.scaleY = 1;
                    this.scale01 = this.scale10 = 0;
                };

                /**
                 * Represents a TrueType glyph.
                 */


                var TTFGlyph = function (_Glyph) {
                    _inherits(TTFGlyph, _Glyph);

                    function TTFGlyph() {
                        _classCallCheck(this, TTFGlyph);

                        return _possibleConstructorReturn(this, _Glyph.apply(this, arguments));
                    }

                    // Parses just the glyph header and returns the bounding box
                    TTFGlyph.prototype._getCBox = function _getCBox(internal) {
                        // We need to decode the glyph if variation processing is requested,
                        // so it's easier just to recompute the path's cbox after decoding.
                        if (this._font._variationProcessor && !internal) {
                            return this.path.cbox;
                        }

                        var stream = this._font._getTableStream('glyf');
                        stream.pos += this._font.loca.offsets[this.id];
                        var glyph = GlyfHeader.decode(stream);

                        var cbox = new BBox(glyph.xMin, glyph.yMin, glyph.xMax, glyph.yMax);
                        return _Object$freeze(cbox);
                    };

                    // Parses a single glyph coordinate


                    TTFGlyph.prototype._parseGlyphCoord = function _parseGlyphCoord(stream, prev, short, same) {
                        if (short) {
                            var val = stream.readUInt8();
                            if (!same) {
                                val = -val;
                            }

                            val += prev;
                        } else {
                            if (same) {
                                var val = prev;
                            } else {
                                var val = prev + stream.readInt16BE();
                            }
                        }

                        return val;
                    };

                    // Decodes the glyph data into points for simple glyphs,
                    // or components for composite glyphs


                    TTFGlyph.prototype._decode = function _decode() {
                        var glyfPos = this._font.loca.offsets[this.id];
                        var nextPos = this._font.loca.offsets[this.id + 1];

                        // Nothing to do if there is no data for this glyph
                        if (glyfPos === nextPos) {
                            return null;
                        }

                        var stream = this._font._getTableStream('glyf');
                        stream.pos += glyfPos;
                        var startPos = stream.pos;

                        var glyph = GlyfHeader.decode(stream);

                        if (glyph.numberOfContours > 0) {
                            this._decodeSimple(glyph, stream);
                        } else if (glyph.numberOfContours < 0) {
                            this._decodeComposite(glyph, stream, startPos);
                        }

                        return glyph;
                    };

                    TTFGlyph.prototype._decodeSimple = function _decodeSimple(glyph, stream) {
                        // this is a simple glyph
                        glyph.points = [];

                        var endPtsOfContours = new r.Array(r.uint16, glyph.numberOfContours).decode(stream);
                        glyph.instructions = new r.Array(r.uint8, r.uint16).decode(stream);

                        var flags = [];
                        var numCoords = endPtsOfContours[endPtsOfContours.length - 1] + 1;

                        while (flags.length < numCoords) {
                            var flag = stream.readUInt8();
                            flags.push(flag);

                            // check for repeat flag
                            if (flag & REPEAT) {
                                var count = stream.readUInt8();
                                for (var j = 0; j < count; j++) {
                                    flags.push(flag);
                                }
                            }
                        }

                        for (var i = 0; i < flags.length; i++) {
                            var flag = flags[i];
                            var point = new Point(!!(flag & ON_CURVE), endPtsOfContours.indexOf(i) >= 0, 0, 0);
                            glyph.points.push(point);
                        }

                        var px = 0;
                        for (var i = 0; i < flags.length; i++) {
                            var flag = flags[i];
                            glyph.points[i].x = px = this._parseGlyphCoord(stream, px, flag & X_SHORT_VECTOR, flag & SAME_X);
                        }

                        var py = 0;
                        for (var i = 0; i < flags.length; i++) {
                            var flag = flags[i];
                            glyph.points[i].y = py = this._parseGlyphCoord(stream, py, flag & Y_SHORT_VECTOR, flag & SAME_Y);
                        }

                        if (this._font._variationProcessor) {
                            var points = glyph.points.slice();
                            points.push.apply(points, this._getPhantomPoints(glyph));

                            this._font._variationProcessor.transformPoints(this.id, points);
                            glyph.phantomPoints = points.slice(-4);
                        }

                        return;
                    };

                    TTFGlyph.prototype._decodeComposite = function _decodeComposite(glyph, stream) {
                        var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

                        // this is a composite glyph
                        glyph.components = [];
                        var haveInstructions = false;
                        var flags = MORE_COMPONENTS;

                        while (flags & MORE_COMPONENTS) {
                            flags = stream.readUInt16BE();
                            var gPos = stream.pos - offset;
                            var glyphID = stream.readUInt16BE();
                            if (!haveInstructions) {
                                haveInstructions = (flags & WE_HAVE_INSTRUCTIONS) !== 0;
                            }

                            if (flags & ARG_1_AND_2_ARE_WORDS) {
                                var dx = stream.readInt16BE();
                                var dy = stream.readInt16BE();
                            } else {
                                var dx = stream.readInt8();
                                var dy = stream.readInt8();
                            }

                            var component = new Component(glyphID, dx, dy);
                            component.pos = gPos;

                            if (flags & WE_HAVE_A_SCALE) {
                                // fixed number with 14 bits of fraction
                                component.scaleX = component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
                            } else if (flags & WE_HAVE_AN_X_AND_Y_SCALE) {
                                component.scaleX = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
                                component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
                            } else if (flags & WE_HAVE_A_TWO_BY_TWO) {
                                component.scaleX = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
                                component.scale01 = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
                                component.scale10 = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
                                component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
                            }

                            glyph.components.push(component);
                        }

                        if (this._font._variationProcessor) {
                            var points = [];
                            for (var j = 0; j < glyph.components.length; j++) {
                                var component = glyph.components[j];
                                points.push(new Point(true, true, component.dx, component.dy));
                            }

                            points.push.apply(points, this._getPhantomPoints(glyph));

                            this._font._variationProcessor.transformPoints(this.id, points);
                            glyph.phantomPoints = points.splice(-4, 4);

                            for (var i = 0; i < points.length; i++) {
                                var point = points[i];
                                glyph.components[i].dx = point.x;
                                glyph.components[i].dy = point.y;
                            }
                        }

                        return haveInstructions;
                    };

                    TTFGlyph.prototype._getPhantomPoints = function _getPhantomPoints(glyph) {
                        var cbox = this._getCBox(true);
                        if (this._metrics == null) {
                            this._metrics = Glyph.prototype._getMetrics.call(this, cbox);
                        }

                        var _metrics = this._metrics,
                            advanceWidth = _metrics.advanceWidth,
                            advanceHeight = _metrics.advanceHeight,
                            leftBearing = _metrics.leftBearing,
                            topBearing = _metrics.topBearing;


                        return [new Point(false, true, glyph.xMin - leftBearing, 0), new Point(false, true, glyph.xMin - leftBearing + advanceWidth, 0), new Point(false, true, 0, glyph.yMax + topBearing), new Point(false, true, 0, glyph.yMax + topBearing + advanceHeight)];
                    };

                    // Decodes font data, resolves composite glyphs, and returns an array of contours


                    TTFGlyph.prototype._getContours = function _getContours() {
                        var glyph = this._decode();
                        if (!glyph) {
                            return [];
                        }

                        var points = [];

                        if (glyph.numberOfContours < 0) {
                            // resolve composite glyphs
                            for (var _iterator = glyph.components, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
                                var _ref;

                                if (_isArray) {
                                    if (_i >= _iterator.length) break;
                                    _ref = _iterator[_i++];
                                } else {
                                    _i = _iterator.next();
                                    if (_i.done) break;
                                    _ref = _i.value;
                                }

                                var component = _ref;

                                var _contours = this._font.getGlyph(component.glyphID)._getContours();
                                for (var i = 0; i < _contours.length; i++) {
                                    var contour = _contours[i];
                                    for (var j = 0; j < contour.length; j++) {
                                        var _point = contour[j];
                                        var x = _point.x * component.scaleX + _point.y * component.scale01 + component.dx;
                                        var y = _point.y * component.scaleY + _point.x * component.scale10 + component.dy;
                                        points.push(new Point(_point.onCurve, _point.endContour, x, y));
                                    }
                                }
                            }
                        } else {
                            points = glyph.points || [];
                        }

                        // Recompute and cache metrics if we performed variation processing, and don't have an HVAR table
                        if (glyph.phantomPoints && !this._font.directory.tables.HVAR) {
                            this._metrics.advanceWidth = glyph.phantomPoints[1].x - glyph.phantomPoints[0].x;
                            this._metrics.advanceHeight = glyph.phantomPoints[3].y - glyph.phantomPoints[2].y;
                            this._metrics.leftBearing = glyph.xMin - glyph.phantomPoints[0].x;
                            this._metrics.topBearing = glyph.phantomPoints[2].y - glyph.yMax;
                        }

                        var contours = [];
                        var cur = [];
                        for (var k = 0; k < points.length; k++) {
                            var point = points[k];
                            cur.push(point);
                            if (point.endContour) {
                                contours.push(cur);
                                cur = [];
                            }
                        }

                        return contours;
                    };

                    TTFGlyph.prototype._getMetrics = function _getMetrics() {
                        if (this._metrics) {
                            return this._metrics;
                        }

                        var cbox = this._getCBox(true);
                        _Glyph.prototype._getMetrics.call(this, cbox);

                        if (this._font._variationProcessor && !this._font.HVAR) {
                            // No HVAR table, decode the glyph. This triggers recomputation of metrics.
                            this.path;
                        }

                        return this._metrics;
                    };

                    // Converts contours to a Path object that can be rendered


                    TTFGlyph.prototype._getPath = function _getPath() {
                        var contours = this._getContours();
                        var path = new Path();

                        for (var i = 0; i < contours.length; i++) {
                            var contour = contours[i];
                            var firstPt = contour[0];
                            var lastPt = contour[contour.length - 1];
                            var start = 0;

                            if (firstPt.onCurve) {
                                // The first point will be consumed by the moveTo command, so skip in the loop
                                var curvePt = null;
                                start = 1;
                            } else {
                                if (lastPt.onCurve) {
                                    // Start at the last point if the first point is off curve and the last point is on curve
                                    firstPt = lastPt;
                                } else {
                                    // Start at the middle if both the first and last points are off curve
                                    firstPt = new Point(false, false, (firstPt.x + lastPt.x) / 2, (firstPt.y + lastPt.y) / 2);
                                }

                                var curvePt = firstPt;
                            }

                            path.moveTo(firstPt.x, firstPt.y);

                            for (var j = start; j < contour.length; j++) {
                                var pt = contour[j];
                                var prevPt = j === 0 ? firstPt : contour[j - 1];

                                if (prevPt.onCurve && pt.onCurve) {
                                    path.lineTo(pt.x, pt.y);
                                } else if (prevPt.onCurve && !pt.onCurve) {
                                    var curvePt = pt;
                                } else if (!prevPt.onCurve && !pt.onCurve) {
                                    var midX = (prevPt.x + pt.x) / 2;
                                    var midY = (prevPt.y + pt.y) / 2;
                                    path.quadraticCurveTo(prevPt.x, prevPt.y, midX, midY);
                                    var curvePt = pt;
                                } else if (!prevPt.onCurve && pt.onCurve) {
                                    path.quadraticCurveTo(curvePt.x, curvePt.y, pt.x, pt.y);
                                    var curvePt = null;
                                } else {
                                    throw new Error("Unknown TTF path state");
                                }
                            }

                            // Connect the first and last points
                            if (curvePt) {
                                path.quadraticCurveTo(curvePt.x, curvePt.y, firstPt.x, firstPt.y);
                            }

                            path.closePath();
                        }

                        return path;
                    };

                    return TTFGlyph;
                }(Glyph);

                /**
                 * Represents an OpenType PostScript glyph, in the Compact Font Format.
                 */

                var CFFGlyph = function (_Glyph) {
                    _inherits(CFFGlyph, _Glyph);

                    function CFFGlyph() {
                        _classCallCheck(this, CFFGlyph);

                        return _possibleConstructorReturn(this, _Glyph.apply(this, arguments));
                    }

                    CFFGlyph.prototype._getName = function _getName() {
                        if (this._font.CFF2) {
                            return _Glyph.prototype._getName.call(this);
                        }

                        return this._font['CFF '].getGlyphName(this.id);
                    };

                    CFFGlyph.prototype.bias = function bias(s) {
                        if (s.length < 1240) {
                            return 107;
                        } else if (s.length < 33900) {
                            return 1131;
                        } else {
                            return 32768;
                        }
                    };

                    CFFGlyph.prototype._getPath = function _getPath() {
                        var stream = this._font.stream;
                        var pos = stream.pos;


                        var cff = this._font.CFF2 || this._font['CFF '];
                        var str = cff.topDict.CharStrings[this.id];
                        var end = str.offset + str.length;
                        stream.pos = str.offset;

                        var path = new Path();
                        var stack = [];
                        var trans = [];

                        var width = null;
                        var nStems = 0;
                        var x = 0,
                            y = 0;
                        var usedGsubrs = void 0;
                        var usedSubrs = void 0;
                        var open = false;

                        this._usedGsubrs = usedGsubrs = {};
                        this._usedSubrs = usedSubrs = {};

                        var gsubrs = cff.globalSubrIndex || [];
                        var gsubrsBias = this.bias(gsubrs);

                        var privateDict = cff.privateDictForGlyph(this.id);
                        var subrs = privateDict.Subrs || [];
                        var subrsBias = this.bias(subrs);

                        var vstore = cff.topDict.vstore && cff.topDict.vstore.itemVariationStore;
                        var vsindex = privateDict.vsindex;
                        var variationProcessor = this._font._variationProcessor;

                        function checkWidth() {
                            if (width == null) {
                                width = stack.shift() + privateDict.nominalWidthX;
                            }
                        }

                        function parseStems() {
                            if (stack.length % 2 !== 0) {
                                checkWidth();
                            }

                            nStems += stack.length >> 1;
                            return stack.length = 0;
                        }

                        function moveTo(x, y) {
                            if (open) {
                                path.closePath();
                            }

                            path.moveTo(x, y);
                            open = true;
                        }

                        var parse = function parse() {
                            while (stream.pos < end) {
                                var op = stream.readUInt8();
                                if (op < 32) {
                                    switch (op) {
                                        case 1: // hstem
                                        case 3: // vstem
                                        case 18: // hstemhm
                                        case 23:
                                            // vstemhm
                                            parseStems();
                                            break;

                                        case 4:
                                            // vmoveto
                                            if (stack.length > 1) {
                                                checkWidth();
                                            }

                                            y += stack.shift();
                                            moveTo(x, y);
                                            break;

                                        case 5:
                                            // rlineto
                                            while (stack.length >= 2) {
                                                x += stack.shift();
                                                y += stack.shift();
                                                path.lineTo(x, y);
                                            }
                                            break;

                                        case 6: // hlineto
                                        case 7:
                                            // vlineto
                                            var phase = op === 6;
                                            while (stack.length >= 1) {
                                                if (phase) {
                                                    x += stack.shift();
                                                } else {
                                                    y += stack.shift();
                                                }

                                                path.lineTo(x, y);
                                                phase = !phase;
                                            }
                                            break;

                                        case 8:
                                            // rrcurveto
                                            while (stack.length > 0) {
                                                var c1x = x + stack.shift();
                                                var c1y = y + stack.shift();
                                                var c2x = c1x + stack.shift();
                                                var c2y = c1y + stack.shift();
                                                x = c2x + stack.shift();
                                                y = c2y + stack.shift();
                                                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);
                                            }
                                            break;

                                        case 10:
                                            // callsubr
                                            var index = stack.pop() + subrsBias;
                                            var subr = subrs[index];
                                            if (subr) {
                                                usedSubrs[index] = true;
                                                var p = stream.pos;
                                                var e = end;
                                                stream.pos = subr.offset;
                                                end = subr.offset + subr.length;
                                                parse();
                                                stream.pos = p;
                                                end = e;
                                            }
                                            break;

                                        case 11:
                                            // return
                                            if (cff.version >= 2) {
                                                break;
                                            }
                                            return;

                                        case 14:
                                            // endchar
                                            if (cff.version >= 2) {
                                                break;
                                            }

                                            if (stack.length > 0) {
                                                checkWidth();
                                            }

                                            if (open) {
                                                path.closePath();
                                                open = false;
                                            }
                                            break;

                                        case 15:
                                        {
                                            // vsindex
                                            if (cff.version < 2) {
                                                throw new Error('vsindex operator not supported in CFF v1');
                                            }

                                            vsindex = stack.pop();
                                            break;
                                        }

                                        case 16:
                                        {
                                            // blend
                                            if (cff.version < 2) {
                                                throw new Error('blend operator not supported in CFF v1');
                                            }

                                            if (!variationProcessor) {
                                                throw new Error('blend operator in non-variation font');
                                            }

                                            var blendVector = variationProcessor.getBlendVector(vstore, vsindex);
                                            var numBlends = stack.pop();
                                            var numOperands = numBlends * blendVector.length;
                                            var delta = stack.length - numOperands;
                                            var base = delta - numBlends;

                                            for (var i = 0; i < numBlends; i++) {
                                                var sum = stack[base + i];
                                                for (var j = 0; j < blendVector.length; j++) {
                                                    sum += blendVector[j] * stack[delta++];
                                                }

                                                stack[base + i] = sum;
                                            }

                                            while (numOperands--) {
                                                stack.pop();
                                            }

                                            break;
                                        }

                                        case 19: // hintmask
                                        case 20:
                                            // cntrmask
                                            parseStems();
                                            stream.pos += nStems + 7 >> 3;
                                            break;

                                        case 21:
                                            // rmoveto
                                            if (stack.length > 2) {
                                                checkWidth();
                                            }

                                            x += stack.shift();
                                            y += stack.shift();
                                            moveTo(x, y);
                                            break;

                                        case 22:
                                            // hmoveto
                                            if (stack.length > 1) {
                                                checkWidth();
                                            }

                                            x += stack.shift();
                                            moveTo(x, y);
                                            break;

                                        case 24:
                                            // rcurveline
                                            while (stack.length >= 8) {
                                                var c1x = x + stack.shift();
                                                var c1y = y + stack.shift();
                                                var c2x = c1x + stack.shift();
                                                var c2y = c1y + stack.shift();
                                                x = c2x + stack.shift();
                                                y = c2y + stack.shift();
                                                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);
                                            }

                                            x += stack.shift();
                                            y += stack.shift();
                                            path.lineTo(x, y);
                                            break;

                                        case 25:
                                            // rlinecurve
                                            while (stack.length >= 8) {
                                                x += stack.shift();
                                                y += stack.shift();
                                                path.lineTo(x, y);
                                            }

                                            var c1x = x + stack.shift();
                                            var c1y = y + stack.shift();
                                            var c2x = c1x + stack.shift();
                                            var c2y = c1y + stack.shift();
                                            x = c2x + stack.shift();
                                            y = c2y + stack.shift();
                                            path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);
                                            break;

                                        case 26:
                                            // vvcurveto
                                            if (stack.length % 2) {
                                                x += stack.shift();
                                            }

                                            while (stack.length >= 4) {
                                                c1x = x;
                                                c1y = y + stack.shift();
                                                c2x = c1x + stack.shift();
                                                c2y = c1y + stack.shift();
                                                x = c2x;
                                                y = c2y + stack.shift();
                                                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);
                                            }
                                            break;

                                        case 27:
                                            // hhcurveto
                                            if (stack.length % 2) {
                                                y += stack.shift();
                                            }

                                            while (stack.length >= 4) {
                                                c1x = x + stack.shift();
                                                c1y = y;
                                                c2x = c1x + stack.shift();
                                                c2y = c1y + stack.shift();
                                                x = c2x + stack.shift();
                                                y = c2y;
                                                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);
                                            }
                                            break;

                                        case 28:
                                            // shortint
                                            stack.push(stream.readInt16BE());
                                            break;

                                        case 29:
                                            // callgsubr
                                            index = stack.pop() + gsubrsBias;
                                            subr = gsubrs[index];
                                            if (subr) {
                                                usedGsubrs[index] = true;
                                                var p = stream.pos;
                                                var e = end;
                                                stream.pos = subr.offset;
                                                end = subr.offset + subr.length;
                                                parse();
                                                stream.pos = p;
                                                end = e;
                                            }
                                            break;

                                        case 30: // vhcurveto
                                        case 31:
                                            // hvcurveto
                                            phase = op === 31;
                                            while (stack.length >= 4) {
                                                if (phase) {
                                                    c1x = x + stack.shift();
                                                    c1y = y;
                                                    c2x = c1x + stack.shift();
                                                    c2y = c1y + stack.shift();
                                                    y = c2y + stack.shift();
                                                    x = c2x + (stack.length === 1 ? stack.shift() : 0);
                                                } else {
                                                    c1x = x;
                                                    c1y = y + stack.shift();
                                                    c2x = c1x + stack.shift();
                                                    c2y = c1y + stack.shift();
                                                    x = c2x + stack.shift();
                                                    y = c2y + (stack.length === 1 ? stack.shift() : 0);
                                                }

                                                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);
                                                phase = !phase;
                                            }
                                            break;

                                        case 12:
                                            op = stream.readUInt8();
                                            switch (op) {
                                                case 3:
                                                    // and
                                                    var a = stack.pop();
                                                    var b = stack.pop();
                                                    stack.push(a && b ? 1 : 0);
                                                    break;

                                                case 4:
                                                    // or
                                                    a = stack.pop();
                                                    b = stack.pop();
                                                    stack.push(a || b ? 1 : 0);
                                                    break;

                                                case 5:
                                                    // not
                                                    a = stack.pop();
                                                    stack.push(a ? 0 : 1);
                                                    break;

                                                case 9:
                                                    // abs
                                                    a = stack.pop();
                                                    stack.push(Math.abs(a));
                                                    break;

                                                case 10:
                                                    // add
                                                    a = stack.pop();
                                                    b = stack.pop();
                                                    stack.push(a + b);
                                                    break;

                                                case 11:
                                                    // sub
                                                    a = stack.pop();
                                                    b = stack.pop();
                                                    stack.push(a - b);
                                                    break;

                                                case 12:
                                                    // div
                                                    a = stack.pop();
                                                    b = stack.pop();
                                                    stack.push(a / b);
                                                    break;

                                                case 14:
                                                    // neg
                                                    a = stack.pop();
                                                    stack.push(-a);
                                                    break;

                                                case 15:
                                                    // eq
                                                    a = stack.pop();
                                                    b = stack.pop();
                                                    stack.push(a === b ? 1 : 0);
                                                    break;

                                                case 18:
                                                    // drop
                                                    stack.pop();
                                                    break;

                                                case 20:
                                                    // put
                                                    var val = stack.pop();
                                                    var idx = stack.pop();
                                                    trans[idx] = val;
                                                    break;

                                                case 21:
                                                    // get
                                                    idx = stack.pop();
                                                    stack.push(trans[idx] || 0);
                                                    break;

                                                case 22:
                                                    // ifelse
                                                    var s1 = stack.pop();
                                                    var s2 = stack.pop();
                                                    var v1 = stack.pop();
                                                    var v2 = stack.pop();
                                                    stack.push(v1 <= v2 ? s1 : s2);
                                                    break;

                                                case 23:
                                                    // random
                                                    stack.push(Math.random());
                                                    break;

                                                case 24:
                                                    // mul
                                                    a = stack.pop();
                                                    b = stack.pop();
                                                    stack.push(a * b);
                                                    break;

                                                case 26:
                                                    // sqrt
                                                    a = stack.pop();
                                                    stack.push(Math.sqrt(a));
                                                    break;

                                                case 27:
                                                    // dup
                                                    a = stack.pop();
                                                    stack.push(a, a);
                                                    break;

                                                case 28:
                                                    // exch
                                                    a = stack.pop();
                                                    b = stack.pop();
                                                    stack.push(b, a);
                                                    break;

                                                case 29:
                                                    // index
                                                    idx = stack.pop();
                                                    if (idx < 0) {
                                                        idx = 0;
                                                    } else if (idx > stack.length - 1) {
                                                        idx = stack.length - 1;
                                                    }

                                                    stack.push(stack[idx]);
                                                    break;

                                                case 30:
                                                    // roll
                                                    var n = stack.pop();
                                                    var _j = stack.pop();

                                                    if (_j >= 0) {
                                                        while (_j > 0) {
                                                            var t = stack[n - 1];
                                                            for (var _i = n - 2; _i >= 0; _i--) {
                                                                stack[_i + 1] = stack[_i];
                                                            }

                                                            stack[0] = t;
                                                            _j--;
                                                        }
                                                    } else {
                                                        while (_j < 0) {
                                                            var t = stack[0];
                                                            for (var _i2 = 0; _i2 <= n; _i2++) {
                                                                stack[_i2] = stack[_i2 + 1];
                                                            }

                                                            stack[n - 1] = t;
                                                            _j++;
                                                        }
                                                    }
                                                    break;

                                                case 34:
                                                    // hflex
                                                    c1x = x + stack.shift();
                                                    c1y = y;
                                                    c2x = c1x + stack.shift();
                                                    c2y = c1y + stack.shift();
                                                    var c3x = c2x + stack.shift();
                                                    var c3y = c2y;
                                                    var c4x = c3x + stack.shift();
                                                    var c4y = c3y;
                                                    var c5x = c4x + stack.shift();
                                                    var c5y = c4y;
                                                    var c6x = c5x + stack.shift();
                                                    var c6y = c5y;
                                                    x = c6x;
                                                    y = c6y;

                                                    path.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);
                                                    path.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);
                                                    break;

                                                case 35:
                                                    // flex
                                                    var pts = [];

                                                    for (var _i3 = 0; _i3 <= 5; _i3++) {
                                                        x += stack.shift();
                                                        y += stack.shift();
                                                        pts.push(x, y);
                                                    }

                                                    path.bezierCurveTo.apply(path, pts.slice(0, 6));
                                                    path.bezierCurveTo.apply(path, pts.slice(6));
                                                    stack.shift(); // fd
                                                    break;

                                                case 36:
                                                    // hflex1
                                                    c1x = x + stack.shift();
                                                    c1y = y + stack.shift();
                                                    c2x = c1x + stack.shift();
                                                    c2y = c1y + stack.shift();
                                                    c3x = c2x + stack.shift();
                                                    c3y = c2y;
                                                    c4x = c3x + stack.shift();
                                                    c4y = c3y;
                                                    c5x = c4x + stack.shift();
                                                    c5y = c4y + stack.shift();
                                                    c6x = c5x + stack.shift();
                                                    c6y = c5y;
                                                    x = c6x;
                                                    y = c6y;

                                                    path.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);
                                                    path.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);
                                                    break;

                                                case 37:
                                                    // flex1
                                                    var startx = x;
                                                    var starty = y;

                                                    pts = [];
                                                    for (var _i4 = 0; _i4 <= 4; _i4++) {
                                                        x += stack.shift();
                                                        y += stack.shift();
                                                        pts.push(x, y);
                                                    }

                                                    if (Math.abs(x - startx) > Math.abs(y - starty)) {
                                                        // horizontal
                                                        x += stack.shift();
                                                        y = starty;
                                                    } else {
                                                        x = startx;
                                                        y += stack.shift();
                                                    }

                                                    pts.push(x, y);
                                                    path.bezierCurveTo.apply(path, pts.slice(0, 6));
                                                    path.bezierCurveTo.apply(path, pts.slice(6));
                                                    break;

                                                default:
                                                    throw new Error('Unknown op: 12 ' + op);
                                            }
                                            break;

                                        default:
                                            throw new Error('Unknown op: ' + op);
                                    }
                                } else if (op < 247) {
                                    stack.push(op - 139);
                                } else if (op < 251) {
                                    var b1 = stream.readUInt8();
                                    stack.push((op - 247) * 256 + b1 + 108);
                                } else if (op < 255) {
                                    var b1 = stream.readUInt8();
                                    stack.push(-(op - 251) * 256 - b1 - 108);
                                } else {
                                    stack.push(stream.readInt32BE() / 65536);
                                }
                            }
                        };

                        parse();

                        if (open) {
                            path.closePath();
                        }

                        return path;
                    };

                    return CFFGlyph;
                }(Glyph);

                var SBIXImage = new r.Struct({
                    originX: r.uint16,
                    originY: r.uint16,
                    type: new r.String(4),
                    data: new r.Buffer(function (t) {
                        return t.parent.buflen - t._currentOffset;
                    })
                });

                /**
                 * Represents a color (e.g. emoji) glyph in Apple's SBIX format.
                 */

                var SBIXGlyph = function (_TTFGlyph) {
                    _inherits(SBIXGlyph, _TTFGlyph);

                    function SBIXGlyph() {
                        _classCallCheck(this, SBIXGlyph);

                        return _possibleConstructorReturn(this, _TTFGlyph.apply(this, arguments));
                    }

                    /**
                     * Returns an object representing a glyph image at the given point size.
                     * The object has a data property with a Buffer containing the actual image data,
                     * along with the image type, and origin.
                     *
                     * @param {number} size
                     * @return {object}
                     */
                    SBIXGlyph.prototype.getImageForSize = function getImageForSize(size) {
                        for (var i = 0; i < this._font.sbix.imageTables.length; i++) {
                            var table = this._font.sbix.imageTables[i];
                            if (table.ppem >= size) {
                                break;
                            }
                        }

                        var offsets = table.imageOffsets;
                        var start = offsets[this.id];
                        var end = offsets[this.id + 1];

                        if (start === end) {
                            return null;
                        }

                        this._font.stream.pos = start;
                        return SBIXImage.decode(this._font.stream, { buflen: end - start });
                    };

                    SBIXGlyph.prototype.render = function render(ctx, size) {
                        var img = this.getImageForSize(size);
                        if (img != null) {
                            var scale = size / this._font.unitsPerEm;
                            ctx.image(img.data, { height: size, x: img.originX, y: (this.bbox.minY - img.originY) * scale });
                        }

                        if (this._font.sbix.flags.renderOutlines) {
                            _TTFGlyph.prototype.render.call(this, ctx, size);
                        }
                    };

                    return SBIXGlyph;
                }(TTFGlyph);

                var COLRLayer = function COLRLayer(glyph, color) {
                    _classCallCheck(this, COLRLayer);

                    this.glyph = glyph;
                    this.color = color;
                };

                /**
                 * Represents a color (e.g. emoji) glyph in Microsoft's COLR format.
                 * Each glyph in this format contain a list of colored layers, each
                 * of which  is another vector glyph.
                 */


                var COLRGlyph = function (_Glyph) {
                    _inherits(COLRGlyph, _Glyph);

                    function COLRGlyph() {
                        _classCallCheck(this, COLRGlyph);

                        return _possibleConstructorReturn(this, _Glyph.apply(this, arguments));
                    }

                    COLRGlyph.prototype._getBBox = function _getBBox() {
                        var bbox = new BBox();
                        for (var i = 0; i < this.layers.length; i++) {
                            var layer = this.layers[i];
                            var b = layer.glyph.bbox;
                            bbox.addPoint(b.minX, b.minY);
                            bbox.addPoint(b.maxX, b.maxY);
                        }

                        return bbox;
                    };

                    /**
                     * Returns an array of objects containing the glyph and color for
                     * each layer in the composite color glyph.
                     * @type {object[]}
                     */


                    COLRGlyph.prototype.render = function render(ctx, size) {
                        for (var _iterator = this.layers, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
                            var _ref;

                            if (_isArray) {
                                if (_i >= _iterator.length) break;
                                _ref = _iterator[_i++];
                            } else {
                                _i = _iterator.next();
                                if (_i.done) break;
                                _ref = _i.value;
                            }

                            var _ref2 = _ref,
                                glyph = _ref2.glyph,
                                color = _ref2.color;

                            ctx.fillColor([color.red, color.green, color.blue], color.alpha / 255 * 100);
                            glyph.render(ctx, size);
                        }

                        return;
                    };

                    _createClass(COLRGlyph, [{
                        key: 'layers',
                        get: function get() {
                            var cpal = this._font.CPAL;
                            var colr = this._font.COLR;
                            var low = 0;
                            var high = colr.baseGlyphRecord.length - 1;

                            while (low <= high) {
                                var mid = low + high >> 1;
                                var rec = colr.baseGlyphRecord[mid];

                                if (this.id < rec.gid) {
                                    high = mid - 1;
                                } else if (this.id > rec.gid) {
                                    low = mid + 1;
                                } else {
                                    var baseLayer = rec;
                                    break;
                                }
                            }

                            // if base glyph not found in COLR table,
                            // default to normal glyph from glyf or CFF
                            if (baseLayer == null) {
                                var g = this._font._getBaseGlyph(this.id);
                                var color = {
                                    red: 0,
                                    green: 0,
                                    blue: 0,
                                    alpha: 255
                                };

                                return [new COLRLayer(g, color)];
                            }

                            // otherwise, return an array of all the layers
                            var layers = [];
                            for (var i = baseLayer.firstLayerIndex; i < baseLayer.firstLayerIndex + baseLayer.numLayers; i++) {
                                var rec = colr.layerRecords[i];
                                var color = cpal.colorRecords[rec.paletteIndex];
                                var g = this._font._getBaseGlyph(rec.gid);
                                layers.push(new COLRLayer(g, color));
                            }

                            return layers;
                        }
                    }]);

                    return COLRGlyph;
                }(Glyph);

                var TUPLES_SHARE_POINT_NUMBERS = 0x8000;
                var TUPLE_COUNT_MASK = 0x0fff;
                var EMBEDDED_TUPLE_COORD = 0x8000;
                var INTERMEDIATE_TUPLE = 0x4000;
                var PRIVATE_POINT_NUMBERS = 0x2000;
                var TUPLE_INDEX_MASK = 0x0fff;
                var POINTS_ARE_WORDS = 0x80;
                var POINT_RUN_COUNT_MASK = 0x7f;
                var DELTAS_ARE_ZERO = 0x80;
                var DELTAS_ARE_WORDS = 0x40;
                var DELTA_RUN_COUNT_MASK = 0x3f;

                /**
                 * This class is transforms TrueType glyphs according to the data from
                 * the Apple Advanced Typography variation tables (fvar, gvar, and avar).
                 * These tables allow infinite adjustments to glyph weight, width, slant,
                 * and optical size without the designer needing to specify every exact style.
                 *
                 * Apple's documentation for these tables is not great, so thanks to the
                 * Freetype project for figuring much of this out.
                 *
                 * @private
                 */

                var GlyphVariationProcessor = function () {
                    function GlyphVariationProcessor(font, coords) {
                        _classCallCheck(this, GlyphVariationProcessor);

                        this.font = font;
                        this.normalizedCoords = this.normalizeCoords(coords);
                        this.blendVectors = new _Map();
                    }

                    GlyphVariationProcessor.prototype.normalizeCoords = function normalizeCoords(coords) {
                        // the default mapping is linear along each axis, in two segments:
                        // from the minValue to defaultValue, and from defaultValue to maxValue.
                        var normalized = [];
                        for (var i = 0; i < this.font.fvar.axis.length; i++) {
                            var axis = this.font.fvar.axis[i];
                            if (coords[i] < axis.defaultValue) {
                                normalized.push((coords[i] - axis.defaultValue + _Number$EPSILON) / (axis.defaultValue - axis.minValue + _Number$EPSILON));
                            } else {
                                normalized.push((coords[i] - axis.defaultValue + _Number$EPSILON) / (axis.maxValue - axis.defaultValue + _Number$EPSILON));
                            }
                        }

                        // if there is an avar table, the normalized value is calculated
                        // by interpolating between the two nearest mapped values.
                        if (this.font.avar) {
                            for (var i = 0; i < this.font.avar.segment.length; i++) {
                                var segment = this.font.avar.segment[i];
                                for (var j = 0; j < segment.correspondence.length; j++) {
                                    var pair = segment.correspondence[j];
                                    if (j >= 1 && normalized[i] < pair.fromCoord) {
                                        var prev = segment.correspondence[j - 1];
                                        normalized[i] = ((normalized[i] - prev.fromCoord) * (pair.toCoord - prev.toCoord) + _Number$EPSILON) / (pair.fromCoord - prev.fromCoord + _Number$EPSILON) + prev.toCoord;

                                        break;
                                    }
                                }
                            }
                        }

                        return normalized;
                    };

                    GlyphVariationProcessor.prototype.transformPoints = function transformPoints(gid, glyphPoints) {
                        if (!this.font.fvar || !this.font.gvar) {
                            return;
                        }

                        var gvar = this.font.gvar;

                        if (gid >= gvar.glyphCount) {
                            return;
                        }

                        var offset = gvar.offsets[gid];
                        if (offset === gvar.offsets[gid + 1]) {
                            return;
                        }

                        // Read the gvar data for this glyph
                        var stream = this.font.stream;

                        stream.pos = offset;
                        if (stream.pos >= stream.length) {
                            return;
                        }

                        var tupleCount = stream.readUInt16BE();
                        var offsetToData = offset + stream.readUInt16BE();

                        if (tupleCount & TUPLES_SHARE_POINT_NUMBERS) {
                            var here = stream.pos;
                            stream.pos = offsetToData;
                            var sharedPoints = this.decodePoints();
                            offsetToData = stream.pos;
                            stream.pos = here;
                        }

                        var origPoints = glyphPoints.map(function (pt) {
                            return pt.copy();
                        });

                        tupleCount &= TUPLE_COUNT_MASK;
                        for (var i = 0; i < tupleCount; i++) {
                            var tupleDataSize = stream.readUInt16BE();
                            var tupleIndex = stream.readUInt16BE();

                            if (tupleIndex & EMBEDDED_TUPLE_COORD) {
                                var tupleCoords = [];
                                for (var a = 0; a < gvar.axisCount; a++) {
                                    tupleCoords.push(stream.readInt16BE() / 16384);
                                }
                            } else {
                                if ((tupleIndex & TUPLE_INDEX_MASK) >= gvar.globalCoordCount) {
                                    throw new Error('Invalid gvar table');
                                }

                                var tupleCoords = gvar.globalCoords[tupleIndex & TUPLE_INDEX_MASK];
                            }

                            if (tupleIndex & INTERMEDIATE_TUPLE) {
                                var startCoords = [];
                                for (var _a = 0; _a < gvar.axisCount; _a++) {
                                    startCoords.push(stream.readInt16BE() / 16384);
                                }

                                var endCoords = [];
                                for (var _a2 = 0; _a2 < gvar.axisCount; _a2++) {
                                    endCoords.push(stream.readInt16BE() / 16384);
                                }
                            }

                            // Get the factor at which to apply this tuple
                            var factor = this.tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords);
                            if (factor === 0) {
                                offsetToData += tupleDataSize;
                                continue;
                            }

                            var here = stream.pos;
                            stream.pos = offsetToData;

                            if (tupleIndex & PRIVATE_POINT_NUMBERS) {
                                var points = this.decodePoints();
                            } else {
                                var points = sharedPoints;
                            }

                            // points.length = 0 means there are deltas for all points
                            var nPoints = points.length === 0 ? glyphPoints.length : points.length;
                            var xDeltas = this.decodeDeltas(nPoints);
                            var yDeltas = this.decodeDeltas(nPoints);

                            if (points.length === 0) {
                                // all points
                                for (var _i = 0; _i < glyphPoints.length; _i++) {
                                    var point = glyphPoints[_i];
                                    point.x += Math.round(xDeltas[_i] * factor);
                                    point.y += Math.round(yDeltas[_i] * factor);
                                }
                            } else {
                                var outPoints = origPoints.map(function (pt) {
                                    return pt.copy();
                                });
                                var hasDelta = glyphPoints.map(function () {
                                    return false;
                                });

                                for (var _i2 = 0; _i2 < points.length; _i2++) {
                                    var idx = points[_i2];
                                    if (idx < glyphPoints.length) {
                                        var _point = outPoints[idx];
                                        hasDelta[idx] = true;

                                        _point.x += Math.round(xDeltas[_i2] * factor);
                                        _point.y += Math.round(yDeltas[_i2] * factor);
                                    }
                                }

                                this.interpolateMissingDeltas(outPoints, origPoints, hasDelta);

                                for (var _i3 = 0; _i3 < glyphPoints.length; _i3++) {
                                    var deltaX = outPoints[_i3].x - origPoints[_i3].x;
                                    var deltaY = outPoints[_i3].y - origPoints[_i3].y;

                                    glyphPoints[_i3].x += deltaX;
                                    glyphPoints[_i3].y += deltaY;
                                }
                            }

                            offsetToData += tupleDataSize;
                            stream.pos = here;
                        }
                    };

                    GlyphVariationProcessor.prototype.decodePoints = function decodePoints() {
                        var stream = this.font.stream;
                        var count = stream.readUInt8();

                        if (count & POINTS_ARE_WORDS) {
                            count = (count & POINT_RUN_COUNT_MASK) << 8 | stream.readUInt8();
                        }

                        var points = new Uint16Array(count);
                        var i = 0;
                        var point = 0;
                        while (i < count) {
                            var run = stream.readUInt8();
                            var runCount = (run & POINT_RUN_COUNT_MASK) + 1;
                            var fn = run & POINTS_ARE_WORDS ? stream.readUInt16 : stream.readUInt8;

                            for (var j = 0; j < runCount && i < count; j++) {
                                point += fn.call(stream);
                                points[i++] = point;
                            }
                        }

                        return points;
                    };

                    GlyphVariationProcessor.prototype.decodeDeltas = function decodeDeltas(count) {
                        var stream = this.font.stream;
                        var i = 0;
                        var deltas = new Int16Array(count);

                        while (i < count) {
                            var run = stream.readUInt8();
                            var runCount = (run & DELTA_RUN_COUNT_MASK) + 1;

                            if (run & DELTAS_ARE_ZERO) {
                                i += runCount;
                            } else {
                                var fn = run & DELTAS_ARE_WORDS ? stream.readInt16BE : stream.readInt8;
                                for (var j = 0; j < runCount && i < count; j++) {
                                    deltas[i++] = fn.call(stream);
                                }
                            }
                        }

                        return deltas;
                    };

                    GlyphVariationProcessor.prototype.tupleFactor = function tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords) {
                        var normalized = this.normalizedCoords;
                        var gvar = this.font.gvar;

                        var factor = 1;

                        for (var i = 0; i < gvar.axisCount; i++) {
                            if (tupleCoords[i] === 0) {
                                continue;
                            }

                            if (normalized[i] === 0) {
                                return 0;
                            }

                            if ((tupleIndex & INTERMEDIATE_TUPLE) === 0) {
                                if (normalized[i] < Math.min(0, tupleCoords[i]) || normalized[i] > Math.max(0, tupleCoords[i])) {
                                    return 0;
                                }

                                factor = (factor * normalized[i] + _Number$EPSILON) / (tupleCoords[i] + _Number$EPSILON);
                            } else {
                                if (normalized[i] < startCoords[i] || normalized[i] > endCoords[i]) {
                                    return 0;
                                } else if (normalized[i] < tupleCoords[i]) {
                                    factor = factor * (normalized[i] - startCoords[i] + _Number$EPSILON) / (tupleCoords[i] - startCoords[i] + _Number$EPSILON);
                                } else {
                                    factor = factor * (endCoords[i] - normalized[i] + _Number$EPSILON) / (endCoords[i] - tupleCoords[i] + _Number$EPSILON);
                                }
                            }
                        }

                        return factor;
                    };

                    // Interpolates points without delta values.
                    // Needed for the è„´ and Q glyphs in Skia.
                    // Algorithm from Freetype.


                    GlyphVariationProcessor.prototype.interpolateMissingDeltas = function interpolateMissingDeltas(points, inPoints, hasDelta) {
                        if (points.length === 0) {
                            return;
                        }

                        var point = 0;
                        while (point < points.length) {
                            var firstPoint = point;

                            // find the end point of the contour
                            var endPoint = point;
                            var pt = points[endPoint];
                            while (!pt.endContour) {
                                pt = points[++endPoint];
                            }

                            // find the first point that has a delta
                            while (point <= endPoint && !hasDelta[point]) {
                                point++;
                            }

                            if (point > endPoint) {
                                continue;
                            }

                            var firstDelta = point;
                            var curDelta = point;
                            point++;

                            while (point <= endPoint) {
                                // find the next point with a delta, and interpolate intermediate points
                                if (hasDelta[point]) {
                                    this.deltaInterpolate(curDelta + 1, point - 1, curDelta, point, inPoints, points);
                                    curDelta = point;
                                }

                                point++;
                            }

                            // shift contour if we only have a single delta
                            if (curDelta === firstDelta) {
                                this.deltaShift(firstPoint, endPoint, curDelta, inPoints, points);
                            } else {
                                // otherwise, handle the remaining points at the end and beginning of the contour
                                this.deltaInterpolate(curDelta + 1, endPoint, curDelta, firstDelta, inPoints, points);

                                if (firstDelta > 0) {
                                    this.deltaInterpolate(firstPoint, firstDelta - 1, curDelta, firstDelta, inPoints, points);
                                }
                            }

                            point = endPoint + 1;
                        }
                    };

                    GlyphVariationProcessor.prototype.deltaInterpolate = function deltaInterpolate(p1, p2, ref1, ref2, inPoints, outPoints) {
                        if (p1 > p2) {
                            return;
                        }

                        var iterable = ['x', 'y'];
                        for (var i = 0; i < iterable.length; i++) {
                            var k = iterable[i];
                            if (inPoints[ref1][k] > inPoints[ref2][k]) {
                                var p = ref1;
                                ref1 = ref2;
                                ref2 = p;
                            }

                            var in1 = inPoints[ref1][k];
                            var in2 = inPoints[ref2][k];
                            var out1 = outPoints[ref1][k];
                            var out2 = outPoints[ref2][k];

                            // If the reference points have the same coordinate but different
                            // delta, inferred delta is zero.  Otherwise interpolate.
                            if (in1 !== in2 || out1 === out2) {
                                var scale = in1 === in2 ? 0 : (out2 - out1) / (in2 - in1);

                                for (var _p = p1; _p <= p2; _p++) {
                                    var out = inPoints[_p][k];

                                    if (out <= in1) {
                                        out += out1 - in1;
                                    } else if (out >= in2) {
                                        out += out2 - in2;
                                    } else {
                                        out = out1 + (out - in1) * scale;
                                    }

                                    outPoints[_p][k] = out;
                                }
                            }
                        }
                    };

                    GlyphVariationProcessor.prototype.deltaShift = function deltaShift(p1, p2, ref, inPoints, outPoints) {
                        var deltaX = outPoints[ref].x - inPoints[ref].x;
                        var deltaY = outPoints[ref].y - inPoints[ref].y;

                        if (deltaX === 0 && deltaY === 0) {
                            return;
                        }

                        for (var p = p1; p <= p2; p++) {
                            if (p !== ref) {
                                outPoints[p].x += deltaX;
                                outPoints[p].y += deltaY;
                            }
                        }
                    };

                    GlyphVariationProcessor.prototype.getAdvanceAdjustment = function getAdvanceAdjustment(gid, table) {
                        var outerIndex = void 0,
                            innerIndex = void 0;

                        if (table.advanceWidthMapping) {
                            var idx = gid;
                            if (idx >= table.advanceWidthMapping.mapCount) {
                                idx = table.advanceWidthMapping.mapCount - 1;
                            }

                            var entryFormat = table.advanceWidthMapping.entryFormat;
                            var _table$advanceWidthMa = table.advanceWidthMapping.mapData[idx];
                            outerIndex = _table$advanceWidthMa.outerIndex;
                            innerIndex = _table$advanceWidthMa.innerIndex;
                        } else {
                            outerIndex = 0;
                            innerIndex = gid;
                        }

                        return this.getDelta(table.itemVariationStore, outerIndex, innerIndex);
                    };

                    // See pseudo code from `Font Variations Overview'
                    // in the OpenType specification.


                    GlyphVariationProcessor.prototype.getDelta = function getDelta(itemStore, outerIndex, innerIndex) {
                        if (outerIndex >= itemStore.itemVariationData.length) {
                            return 0;
                        }

                        var varData = itemStore.itemVariationData[outerIndex];
                        if (innerIndex >= varData.deltaSets.length) {
                            return 0;
                        }

                        var deltaSet = varData.deltaSets[innerIndex];
                        var blendVector = this.getBlendVector(itemStore, outerIndex);
                        var netAdjustment = 0;

                        for (var master = 0; master < varData.regionIndexCount; master++) {
                            netAdjustment += deltaSet.deltas[master] * blendVector[master];
                        }

                        return netAdjustment;
                    };

                    GlyphVariationProcessor.prototype.getBlendVector = function getBlendVector(itemStore, outerIndex) {
                        var varData = itemStore.itemVariationData[outerIndex];
                        if (this.blendVectors.has(varData)) {
                            return this.blendVectors.get(varData);
                        }

                        var normalizedCoords = this.normalizedCoords;
                        var blendVector = [];

                        // outer loop steps through master designs to be blended
                        for (var master = 0; master < varData.regionIndexCount; master++) {
                            var scalar = 1;
                            var regionIndex = varData.regionIndexes[master];
                            var axes = itemStore.variationRegionList.variationRegions[regionIndex];

                            // inner loop steps through axes in this region
                            for (var j = 0; j < axes.length; j++) {
                                var axis = axes[j];
                                var axisScalar = void 0;

                                // compute the scalar contribution of this axis
                                // ignore invalid ranges
                                if (axis.startCoord > axis.peakCoord || axis.peakCoord > axis.endCoord) {
                                    axisScalar = 1;
                                } else if (axis.startCoord < 0 && axis.endCoord > 0 && axis.peakCoord !== 0) {
                                    axisScalar = 1;

                                    // peak of 0 means ignore this axis
                                } else if (axis.peakCoord === 0) {
                                    axisScalar = 1;

                                    // ignore this region if coords are out of range
                                } else if (normalizedCoords[j] < axis.startCoord || normalizedCoords[j] > axis.endCoord) {
                                    axisScalar = 0;

                                    // calculate a proportional factor
                                } else {
                                    if (normalizedCoords[j] === axis.peakCoord) {
                                        axisScalar = 1;
                                    } else if (normalizedCoords[j] < axis.peakCoord) {
                                        axisScalar = (normalizedCoords[j] - axis.startCoord + _Number$EPSILON) / (axis.peakCoord - axis.startCoord + _Number$EPSILON);
                                    } else {
                                        axisScalar = (axis.endCoord - normalizedCoords[j] + _Number$EPSILON) / (axis.endCoord - axis.peakCoord + _Number$EPSILON);
                                    }
                                }

                                // take product of all the axis scalars
                                scalar *= axisScalar;
                            }

                            blendVector[master] = scalar;
                        }

                        this.blendVectors.set(varData, blendVector);
                        return blendVector;
                    };

                    return GlyphVariationProcessor;
                }();

                var Subset = function () {
                    function Subset(font) {
                        _classCallCheck(this, Subset);

                        this.font = font;
                        this.glyphs = [];
                        this.mapping = {};

                        // always include the missing glyph
                        this.includeGlyph(0);
                    }

                    Subset.prototype.includeGlyph = function includeGlyph(glyph) {
                        if ((typeof glyph === 'undefined' ? 'undefined' : _typeof(glyph)) === 'object') {
                            glyph = glyph.id;
                        }

                        if (this.mapping[glyph] == null) {
                            this.glyphs.push(glyph);
                            this.mapping[glyph] = this.glyphs.length - 1;
                        }

                        return this.mapping[glyph];
                    };

                    Subset.prototype.encodeStream = function encodeStream() {
                        var _this = this;

                        var s = new r.EncodeStream();

                        process.nextTick(function () {
                            _this.encode(s);
                            return s.end();
                        });

                        return s;
                    };

                    return Subset;
                }();

                // Flags for simple glyphs
                var ON_CURVE$1 = 1 << 0;
                var X_SHORT_VECTOR$1 = 1 << 1;
                var Y_SHORT_VECTOR$1 = 1 << 2;
                var REPEAT$1 = 1 << 3;
                var SAME_X$1 = 1 << 4;
                var SAME_Y$1 = 1 << 5;

                var Point$1 = function () {
                    function Point() {
                        _classCallCheck(this, Point);
                    }

                    Point.size = function size(val) {
                        return val >= 0 && val <= 255 ? 1 : 2;
                    };

                    Point.encode = function encode(stream, value) {
                        if (value >= 0 && value <= 255) {
                            stream.writeUInt8(value);
                        } else {
                            stream.writeInt16BE(value);
                        }
                    };

                    return Point;
                }();

                var Glyf = new r.Struct({
                    numberOfContours: r.int16, // if negative, this is a composite glyph
                    xMin: r.int16,
                    yMin: r.int16,
                    xMax: r.int16,
                    yMax: r.int16,
                    endPtsOfContours: new r.Array(r.uint16, 'numberOfContours'),
                    instructions: new r.Array(r.uint8, r.uint16),
                    flags: new r.Array(r.uint8, 0),
                    xPoints: new r.Array(Point$1, 0),
                    yPoints: new r.Array(Point$1, 0)
                });

                /**
                 * Encodes TrueType glyph outlines
                 */

                var TTFGlyphEncoder = function () {
                    function TTFGlyphEncoder() {
                        _classCallCheck(this, TTFGlyphEncoder);
                    }

                    TTFGlyphEncoder.prototype.encodeSimple = function encodeSimple(path) {
                        var instructions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

                        var endPtsOfContours = [];
                        var xPoints = [];
                        var yPoints = [];
                        var flags = [];
                        var same = 0;
                        var lastX = 0,
                            lastY = 0,
                            lastFlag = 0;
                        var pointCount = 0;

                        for (var i = 0; i < path.commands.length; i++) {
                            var c = path.commands[i];

                            for (var j = 0; j < c.args.length; j += 2) {
                                var x = c.args[j];
                                var y = c.args[j + 1];
                                var flag = 0;

                                // If the ending point of a quadratic curve is the midpoint
                                // between the control point and the control point of the next
                                // quadratic curve, we can omit the ending point.
                                if (c.command === 'quadraticCurveTo' && j === 2) {
                                    var next = path.commands[i + 1];
                                    if (next && next.command === 'quadraticCurveTo') {
                                        var midX = (lastX + next.args[0]) / 2;
                                        var midY = (lastY + next.args[1]) / 2;

                                        if (x === midX && y === midY) {
                                            continue;
                                        }
                                    }
                                }

                                // All points except control points are on curve.
                                if (!(c.command === 'quadraticCurveTo' && j === 0)) {
                                    flag |= ON_CURVE$1;
                                }

                                flag = this._encodePoint(x, lastX, xPoints, flag, X_SHORT_VECTOR$1, SAME_X$1);
                                flag = this._encodePoint(y, lastY, yPoints, flag, Y_SHORT_VECTOR$1, SAME_Y$1);

                                if (flag === lastFlag && same < 255) {
                                    flags[flags.length - 1] |= REPEAT$1;
                                    same++;
                                } else {
                                    if (same > 0) {
                                        flags.push(same);
                                        same = 0;
                                    }

                                    flags.push(flag);
                                    lastFlag = flag;
                                }

                                lastX = x;
                                lastY = y;
                                pointCount++;
                            }

                            if (c.command === 'closePath') {
                                endPtsOfContours.push(pointCount - 1);
                            }
                        }

                        // Close the path if the last command didn't already
                        if (path.commands.length > 1 && path.commands[path.commands.length - 1].command !== 'closePath') {
                            endPtsOfContours.push(pointCount - 1);
                        }

                        var bbox = path.bbox;
                        var glyf = {
                            numberOfContours: endPtsOfContours.length,
                            xMin: bbox.minX,
                            yMin: bbox.minY,
                            xMax: bbox.maxX,
                            yMax: bbox.maxY,
                            endPtsOfContours: endPtsOfContours,
                            instructions: instructions,
                            flags: flags,
                            xPoints: xPoints,
                            yPoints: yPoints
                        };

                        var size = Glyf.size(glyf);
                        var tail = 4 - size % 4;

                        var stream = new r.EncodeStream(size + tail);
                        Glyf.encode(stream, glyf);

                        // Align to 4-byte length
                        if (tail !== 0) {
                            stream.fill(0, tail);
                        }

                        return stream.buffer;
                    };

                    TTFGlyphEncoder.prototype._encodePoint = function _encodePoint(value, last, points, flag, shortFlag, sameFlag) {
                        var diff = value - last;

                        if (value === last) {
                            flag |= sameFlag;
                        } else {
                            if (-255 <= diff && diff <= 255) {
                                flag |= shortFlag;
                                if (diff < 0) {
                                    diff = -diff;
                                } else {
                                    flag |= sameFlag;
                                }
                            }

                            points.push(diff);
                        }

                        return flag;
                    };

                    return TTFGlyphEncoder;
                }();

                var TTFSubset = function (_Subset) {
                    _inherits(TTFSubset, _Subset);

                    function TTFSubset(font) {
                        _classCallCheck(this, TTFSubset);

                        var _this = _possibleConstructorReturn(this, _Subset.call(this, font));

                        _this.glyphEncoder = new TTFGlyphEncoder();
                        return _this;
                    }

                    TTFSubset.prototype._addGlyph = function _addGlyph(gid) {
                        var glyph = this.font.getGlyph(gid);
                        var glyf = glyph._decode();

                        // get the offset to the glyph from the loca table
                        var curOffset = this.font.loca.offsets[gid];
                        var nextOffset = this.font.loca.offsets[gid + 1];

                        var stream = this.font._getTableStream('glyf');
                        stream.pos += curOffset;

                        var buffer = stream.readBuffer(nextOffset - curOffset);

                        // if it is a compound glyph, include its components
                        if (glyf && glyf.numberOfContours < 0) {
                            buffer = new Buffer(buffer);
                            for (var _iterator = glyf.components, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
                                var _ref;

                                if (_isArray) {
                                    if (_i >= _iterator.length) break;
                                    _ref = _iterator[_i++];
                                } else {
                                    _i = _iterator.next();
                                    if (_i.done) break;
                                    _ref = _i.value;
                                }

                                var component = _ref;

                                gid = this.includeGlyph(component.glyphID);
                                buffer.writeUInt16BE(gid, component.pos);
                            }
                        } else if (glyf && this.font._variationProcessor) {
                            // If this is a TrueType variation glyph, re-encode the path
                            buffer = this.glyphEncoder.encodeSimple(glyph.path, glyf.instructions);
                        }

                        this.glyf.push(buffer);
                        this.loca.offsets.push(this.offset);

                        this.hmtx.metrics.push({
                            advance: glyph.advanceWidth,
                            bearing: glyph._getMetrics().leftBearing
                        });

                        this.offset += buffer.length;
                        return this.glyf.length - 1;
                    };

                    TTFSubset.prototype.encode = function encode(stream) {
                        // tables required by PDF spec:
                        //   head, hhea, loca, maxp, cvt , prep, glyf, hmtx, fpgm
                        //
                        // additional tables required for standalone fonts:
                        //   name, cmap, OS/2, post

                        this.glyf = [];
                        this.offset = 0;
                        this.loca = {
                            offsets: []
                        };

                        this.hmtx = {
                            metrics: [],
                            bearings: []
                        };

                        // include all the glyphs
                        // not using a for loop because we need to support adding more
                        // glyphs to the array as we go, and CoffeeScript caches the length.
                        var i = 0;
                        while (i < this.glyphs.length) {
                            this._addGlyph(this.glyphs[i++]);
                        }

                        var maxp = cloneDeep(this.font.maxp);
                        maxp.numGlyphs = this.glyf.length;

                        this.loca.offsets.push(this.offset);
                        tables.loca.preEncode.call(this.loca);

                        var head = cloneDeep(this.font.head);
                        head.indexToLocFormat = this.loca.version;

                        var hhea = cloneDeep(this.font.hhea);
                        hhea.numberOfMetrics = this.hmtx.metrics.length;

                        // map = []
                        // for index in [0...256]
                        //     if index < @numGlyphs
                        //         map[index] = index
                        //     else
                        //         map[index] = 0
                        //
                        // cmapTable =
                        //     version: 0
                        //     length: 262
                        //     language: 0
                        //     codeMap: map
                        //
                        // cmap =
                        //     version: 0
                        //     numSubtables: 1
                        //     tables: [
                        //         platformID: 1
                        //         encodingID: 0
                        //         table: cmapTable
                        //     ]

                        // TODO: subset prep, cvt, fpgm?
                        Directory.encode(stream, {
                            tables: {
                                head: head,
                                hhea: hhea,
                                loca: this.loca,
                                maxp: maxp,
                                'cvt ': this.font['cvt '],
                                prep: this.font.prep,
                                glyf: this.glyf,
                                hmtx: this.hmtx,
                                fpgm: this.font.fpgm

                                // name: clone @font.name
                                // 'OS/2': clone @font['OS/2']
                                // post: clone @font.post
                                // cmap: cmap
                            }
                        });
                    };

                    return TTFSubset;
                }(Subset);

                var CFFSubset = function (_Subset) {
                    _inherits(CFFSubset, _Subset);

                    function CFFSubset(font) {
                        _classCallCheck(this, CFFSubset);

                        var _this = _possibleConstructorReturn(this, _Subset.call(this, font));

                        _this.cff = _this.font['CFF '];
                        if (!_this.cff) {
                            throw new Error('Not a CFF Font');
                        }
                        return _this;
                    }

                    CFFSubset.prototype.subsetCharstrings = function subsetCharstrings() {
                        this.charstrings = [];
                        var gsubrs = {};

                        for (var _iterator = this.glyphs, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
                            var _ref;

                            if (_isArray) {
                                if (_i >= _iterator.length) break;
                                _ref = _iterator[_i++];
                            } else {
                                _i = _iterator.next();
                                if (_i.done) break;
                                _ref = _i.value;
                            }

                            var gid = _ref;

                            this.charstrings.push(this.cff.getCharString(gid));

                            var glyph = this.font.getGlyph(gid);
                            var path = glyph.path; // this causes the glyph to be parsed

                            for (var subr in glyph._usedGsubrs) {
                                gsubrs[subr] = true;
                            }
                        }

                        this.gsubrs = this.subsetSubrs(this.cff.globalSubrIndex, gsubrs);
                    };

                    CFFSubset.prototype.subsetSubrs = function subsetSubrs(subrs, used) {
                        var res = [];
                        for (var i = 0; i < subrs.length; i++) {
                            var subr = subrs[i];
                            if (used[i]) {
                                this.cff.stream.pos = subr.offset;
                                res.push(this.cff.stream.readBuffer(subr.length));
                            } else {
                                res.push(new Buffer([11])); // return
                            }
                        }

                        return res;
                    };

                    CFFSubset.prototype.subsetFontdict = function subsetFontdict(topDict) {
                        topDict.FDArray = [];
                        topDict.FDSelect = {
                            version: 0,
                            fds: []
                        };

                        var used_fds = {};
                        var used_subrs = [];
                        for (var _iterator2 = this.glyphs, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
                            var _ref2;

                            if (_isArray2) {
                                if (_i2 >= _iterator2.length) break;
                                _ref2 = _iterator2[_i2++];
                            } else {
                                _i2 = _iterator2.next();
                                if (_i2.done) break;
                                _ref2 = _i2.value;
                            }

                            var gid = _ref2;

                            var fd = this.cff.fdForGlyph(gid);
                            if (fd == null) {
                                continue;
                            }

                            if (!used_fds[fd]) {
                                topDict.FDArray.push(_Object$assign({}, this.cff.topDict.FDArray[fd]));
                                used_subrs.push({});
                            }

                            used_fds[fd] = true;
                            topDict.FDSelect.fds.push(topDict.FDArray.length - 1);

                            var glyph = this.font.getGlyph(gid);
                            var path = glyph.path; // this causes the glyph to be parsed
                            for (var subr in glyph._usedSubrs) {
                                used_subrs[used_subrs.length - 1][subr] = true;
                            }
                        }

                        for (var i = 0; i < topDict.FDArray.length; i++) {
                            var dict = topDict.FDArray[i];
                            delete dict.FontName;
                            if (dict.Private && dict.Private.Subrs) {
                                dict.Private = _Object$assign({}, dict.Private);
                                dict.Private.Subrs = this.subsetSubrs(dict.Private.Subrs, used_subrs[i]);
                            }
                        }

                        return;
                    };

                    CFFSubset.prototype.createCIDFontdict = function createCIDFontdict(topDict) {
                        var used_subrs = {};
                        for (var _iterator3 = this.glyphs, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
                            var _ref3;

                            if (_isArray3) {
                                if (_i3 >= _iterator3.length) break;
                                _ref3 = _iterator3[_i3++];
                            } else {
                                _i3 = _iterator3.next();
                                if (_i3.done) break;
                                _ref3 = _i3.value;
                            }

                            var gid = _ref3;

                            var glyph = this.font.getGlyph(gid);
                            var path = glyph.path; // this causes the glyph to be parsed

                            for (var subr in glyph._usedSubrs) {
                                used_subrs[subr] = true;
                            }
                        }

                        var privateDict = _Object$assign({}, this.cff.topDict.Private);
                        privateDict.Subrs = this.subsetSubrs(this.cff.topDict.Private.Subrs, used_subrs);

                        topDict.FDArray = [{ Private: privateDict }];
                        return topDict.FDSelect = {
                            version: 3,
                            nRanges: 1,
                            ranges: [{ first: 0, fd: 0 }],
                            sentinel: this.charstrings.length
                        };
                    };

                    CFFSubset.prototype.addString = function addString(string) {
                        if (!string) {
                            return null;
                        }

                        if (!this.strings) {
                            this.strings = [];
                        }

                        this.strings.push(string);
                        return standardStrings.length + this.strings.length - 1;
                    };

                    CFFSubset.prototype.encode = function encode(stream) {
                        this.subsetCharstrings();

                        var charset = {
                            version: this.charstrings.length > 255 ? 2 : 1,
                            ranges: [{ first: 1, nLeft: this.charstrings.length - 2 }]
                        };

                        var topDict = _Object$assign({}, this.cff.topDict);
                        topDict.Private = null;
                        topDict.charset = charset;
                        topDict.Encoding = null;
                        topDict.CharStrings = this.charstrings;

                        var _arr = ['version', 'Notice', 'Copyright', 'FullName', 'FamilyName', 'Weight', 'PostScript', 'BaseFontName', 'FontName'];
                        for (var _i4 = 0; _i4 < _arr.length; _i4++) {
                            var key = _arr[_i4];
                            topDict[key] = this.addString(this.cff.string(topDict[key]));
                        }

                        topDict.ROS = [this.addString('Adobe'), this.addString('Identity'), 0];
                        topDict.CIDCount = this.charstrings.length;

                        if (this.cff.isCIDFont) {
                            this.subsetFontdict(topDict);
                        } else {
                            this.createCIDFontdict(topDict);
                        }

                        var top = {
                            version: 1,
                            hdrSize: this.cff.hdrSize,
                            offSize: this.cff.length,
                            header: this.cff.header,
                            nameIndex: [this.cff.postscriptName],
                            topDictIndex: [topDict],
                            stringIndex: this.strings,
                            globalSubrIndex: this.gsubrs
                        };

                        CFFTop.encode(stream, top);
                    };

                    return CFFSubset;
                }(Subset);

                var _class;
                function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
                    var desc = {};
                    Object['ke' + 'ys'](descriptor).forEach(function (key) {
                        desc[key] = descriptor[key];
                    });
                    desc.enumerable = !!desc.enumerable;
                    desc.configurable = !!desc.configurable;

                    if ('value' in desc || desc.initializer) {
                        desc.writable = true;
                    }

                    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
                        return decorator(target, property, desc) || desc;
                    }, desc);

                    if (context && desc.initializer !== void 0) {
                        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
                        desc.initializer = undefined;
                    }

                    if (desc.initializer === void 0) {
                        Object['define' + 'Property'](target, property, desc);
                        desc = null;
                    }

                    return desc;
                }

                /**
                 * This is the base class for all SFNT-based font formats in fontkit.
                 * It supports TrueType, and PostScript glyphs, and several color glyph formats.
                 */
                var TTFFont = (_class = function () {
                    TTFFont.probe = function probe(buffer) {
                        var format = buffer.toString('ascii', 0, 4);
                        return format === 'true' || format === 'OTTO' || format === String.fromCharCode(0, 1, 0, 0);
                    };

                    function TTFFont(stream) {
                        var variationCoords = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

                        _classCallCheck(this, TTFFont);

                        this.stream = stream;
                        this.variationCoords = variationCoords;

                        this._directoryPos = this.stream.pos;
                        this._tables = {};
                        this._glyphs = {};
                        this._decodeDirectory();

                        // define properties for each table to lazily parse
                        for (var tag in this.directory.tables) {
                            var table = this.directory.tables[tag];
                            if (tables[tag] && table.length > 0) {
                                _Object$defineProperty(this, tag, {
                                    get: this._getTable.bind(this, table)
                                });
                            }
                        }
                    }

                    TTFFont.prototype._getTable = function _getTable(table) {
                        if (!(table.tag in this._tables)) {
                            try {
                                this._tables[table.tag] = this._decodeTable(table);
                            } catch (e) {
                                if (fontkit.logErrors) {
                                    console.error('Error decoding table ' + table.tag);
                                    console.error(e.stack);
                                }
                            }
                        }

                        return this._tables[table.tag];
                    };

                    TTFFont.prototype._getTableStream = function _getTableStream(tag) {
                        var table = this.directory.tables[tag];
                        if (table) {
                            this.stream.pos = table.offset;
                            return this.stream;
                        }

                        return null;
                    };

                    TTFFont.prototype._decodeDirectory = function _decodeDirectory() {
                        return this.directory = Directory.decode(this.stream, { _startOffset: 0 });
                    };

                    TTFFont.prototype._decodeTable = function _decodeTable(table) {
                        var pos = this.stream.pos;

                        var stream = this._getTableStream(table.tag);
                        var result = tables[table.tag].decode(stream, this, table.length);

                        this.stream.pos = pos;
                        return result;
                    };

                    /**
                     * The unique PostScript name for this font
                     * @type {string}
                     */


                    /**
                     * Gets a string from the font's `name` table
                     * `lang` is a BCP-47 language code.
                     * @return {string}
                     */
                    TTFFont.prototype.getName = function getName(key) {
                        var lang = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en';

                        var record = this.name.records[key];
                        if (record) {
                            return record[lang];
                        }

                        return null;
                    };

                    /**
                     * The font's full name, e.g. "Helvetica Bold"
                     * @type {string}
                     */


                    /**
                     * Returns whether there is glyph in the font for the given unicode code point.
                     *
                     * @param {number} codePoint
                     * @return {boolean}
                     */
                    TTFFont.prototype.hasGlyphForCodePoint = function hasGlyphForCodePoint(codePoint) {
                        return !!this._cmapProcessor.lookup(codePoint);
                    };

                    /**
                     * Maps a single unicode code point to a Glyph object.
                     * Does not perform any advanced substitutions (there is no context to do so).
                     *
                     * @param {number} codePoint
                     * @return {Glyph}
                     */


                    TTFFont.prototype.glyphForCodePoint = function glyphForCodePoint(codePoint) {
                        return this.getGlyph(this._cmapProcessor.lookup(codePoint), [codePoint]);
                    };

                    /**
                     * Returns an array of Glyph objects for the given string.
                     * This is only a one-to-one mapping from characters to glyphs.
                     * For most uses, you should use font.layout (described below), which
                     * provides a much more advanced mapping supporting AAT and OpenType shaping.
                     *
                     * @param {string} string
                     * @return {Glyph[]}
                     */


                    TTFFont.prototype.glyphsForString = function glyphsForString(string) {
                        var glyphs = [];
                        var len = string.length;
                        var idx = 0;
                        var last = -1;
                        var state = -1;

                        while (idx <= len) {
                            var code = 0;
                            var nextState = 0;

                            if (idx < len) {
                                // Decode the next codepoint from UTF 16
                                code = string.charCodeAt(idx++);
                                if (0xd800 <= code && code <= 0xdbff && idx < len) {
                                    var next = string.charCodeAt(idx);
                                    if (0xdc00 <= next && next <= 0xdfff) {
                                        idx++;
                                        code = ((code & 0x3ff) << 10) + (next & 0x3ff) + 0x10000;
                                    }
                                }

                                // Compute the next state: 1 if the next codepoint is a variation selector, 0 otherwise.
                                nextState = 0xfe00 <= code && code <= 0xfe0f || 0xe0100 <= code && code <= 0xe01ef ? 1 : 0;
                            } else {
                                idx++;
                            }

                            if (state === 0 && nextState === 1) {
                                // Variation selector following normal codepoint.
                                glyphs.push(this.getGlyph(this._cmapProcessor.lookup(last, code), [last, code]));
                            } else if (state === 0 && nextState === 0) {
                                // Normal codepoint following normal codepoint.
                                glyphs.push(this.glyphForCodePoint(last));
                            }

                            last = code;
                            state = nextState;
                        }

                        return glyphs;
                    };

                    /**
                     * Returns a GlyphRun object, which includes an array of Glyphs and GlyphPositions for the given string.
                     *
                     * @param {string} string
                     * @param {string[]} [userFeatures]
                     * @param {string} [script]
                     * @param {string} [language]
                     * @param {string} [direction]
                     * @return {GlyphRun}
                     */
                    TTFFont.prototype.layout = function layout(string, userFeatures, script, language, direction) {
                        return this._layoutEngine.layout(string, userFeatures, script, language, direction);
                    };

                    /**
                     * Returns an array of strings that map to the given glyph id.
                     * @param {number} gid - glyph id
                     */


                    TTFFont.prototype.stringsForGlyph = function stringsForGlyph(gid) {
                        return this._layoutEngine.stringsForGlyph(gid);
                    };

                    /**
                     * An array of all [OpenType feature tags](https://www.microsoft.com/typography/otspec/featuretags.htm)
                     * (or mapped AAT tags) supported by the font.
                     * The features parameter is an array of OpenType feature tags to be applied in addition to the default set.
                     * If this is an AAT font, the OpenType feature tags are mapped to AAT features.
                     *
                     * @type {string[]}
                     */


                    TTFFont.prototype.getAvailableFeatures = function getAvailableFeatures(script, language) {
                        return this._layoutEngine.getAvailableFeatures(script, language);
                    };

                    TTFFont.prototype._getBaseGlyph = function _getBaseGlyph(glyph) {
                        var characters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

                        if (!this._glyphs[glyph]) {
                            if (this.directory.tables.glyf) {
                                this._glyphs[glyph] = new TTFGlyph(glyph, characters, this);
                            } else if (this.directory.tables['CFF '] || this.directory.tables.CFF2) {
                                this._glyphs[glyph] = new CFFGlyph(glyph, characters, this);
                            }
                        }

                        return this._glyphs[glyph] || null;
                    };

                    /**
                     * Returns a glyph object for the given glyph id.
                     * You can pass the array of code points this glyph represents for
                     * your use later, and it will be stored in the glyph object.
                     *
                     * @param {number} glyph
                     * @param {number[]} characters
                     * @return {Glyph}
                     */


                    TTFFont.prototype.getGlyph = function getGlyph(glyph) {
                        var characters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

                        if (!this._glyphs[glyph]) {
                            if (this.directory.tables.sbix) {
                                this._glyphs[glyph] = new SBIXGlyph(glyph, characters, this);
                            } else if (this.directory.tables.COLR && this.directory.tables.CPAL) {
                                this._glyphs[glyph] = new COLRGlyph(glyph, characters, this);
                            } else {
                                this._getBaseGlyph(glyph, characters);
                            }
                        }

                        return this._glyphs[glyph] || null;
                    };

                    /**
                     * Returns a Subset for this font.
                     * @return {Subset}
                     */


                    TTFFont.prototype.createSubset = function createSubset() {
                        if (this.directory.tables['CFF ']) {
                            return new CFFSubset(this);
                        }

                        return new TTFSubset(this);
                    };

                    /**
                     * Returns an object describing the available variation axes
                     * that this font supports. Keys are setting tags, and values
                     * contain the axis name, range, and default value.
                     *
                     * @type {object}
                     */


                    /**
                     * Returns a new font with the given variation settings applied.
                     * Settings can either be an instance name, or an object containing
                     * variation tags as specified by the `variationAxes` property.
                     *
                     * @param {object} settings
                     * @return {TTFFont}
                     */
                    TTFFont.prototype.getVariation = function getVariation(settings) {
                        if (!(this.directory.tables.fvar && (this.directory.tables.gvar && this.directory.tables.glyf || this.directory.tables.CFF2))) {
                            throw new Error('Variations require a font with the fvar, gvar and glyf, or CFF2 tables.');
                        }

                        if (typeof settings === 'string') {
                            settings = this.namedVariations[settings];
                        }

                        if ((typeof settings === 'undefined' ? 'undefined' : _typeof(settings)) !== 'object') {
                            throw new Error('Variation settings must be either a variation name or settings object.');
                        }

                        // normalize the coordinates
                        var coords = this.fvar.axis.map(function (axis, i) {
                            var axisTag = axis.axisTag.trim();
                            if (axisTag in settings) {
                                return Math.max(axis.minValue, Math.min(axis.maxValue, settings[axisTag]));
                            } else {
                                return axis.defaultValue;
                            }
                        });

                        var stream = new r.DecodeStream(this.stream.buffer);
                        stream.pos = this._directoryPos;

                        var font = new TTFFont(stream, coords);
                        font._tables = this._tables;

                        return font;
                    };

                    // Standardized format plugin API
                    TTFFont.prototype.getFont = function getFont(name) {
                        return this.getVariation(name);
                    };

                    _createClass(TTFFont, [{
                        key: 'postscriptName',
                        get: function get() {
                            var name = this.name.records.postscriptName;
                            if (name) {
                                var lang = _Object$keys(name)[0];
                                return name[lang];
                            }

                            return null;
                        }
                    }, {
                        key: 'fullName',
                        get: function get() {
                            return this.getName('fullName');
                        }

                        /**
                         * The font's family name, e.g. "Helvetica"
                         * @type {string}
                         */

                    }, {
                        key: 'familyName',
                        get: function get() {
                            return this.getName('fontFamily');
                        }

                        /**
                         * The font's sub-family, e.g. "Bold".
                         * @type {string}
                         */

                    }, {
                        key: 'subfamilyName',
                        get: function get() {
                            return this.getName('fontSubfamily');
                        }

                        /**
                         * The font's copyright information
                         * @type {string}
                         */

                    }, {
                        key: 'copyright',
                        get: function get() {
                            return this.getName('copyright');
                        }

                        /**
                         * The font's version number
                         * @type {string}
                         */

                    }, {
                        key: 'version',
                        get: function get() {
                            return this.getName('version');
                        }

                        /**
                         * The fontéˆ¥æªš [ascender](https://en.wikipedia.org/wiki/Ascender_(typography))
                         * @type {number}
                         */

                    }, {
                        key: 'ascent',
                        get: function get() {
                            return this.hhea.ascent;
                        }

                        /**
                         * The fontéˆ¥æªš [descender](https://en.wikipedia.org/wiki/Descender)
                         * @type {number}
                         */

                    }, {
                        key: 'descent',
                        get: function get() {
                            return this.hhea.descent;
                        }

                        /**
                         * The amount of space that should be included between lines
                         * @type {number}
                         */

                    }, {
                        key: 'lineGap',
                        get: function get() {
                            return this.hhea.lineGap;
                        }

                        /**
                         * The offset from the normal underline position that should be used
                         * @type {number}
                         */

                    }, {
                        key: 'underlinePosition',
                        get: function get() {
                            return this.post.underlinePosition;
                        }

                        /**
                         * The weight of the underline that should be used
                         * @type {number}
                         */

                    }, {
                        key: 'underlineThickness',
                        get: function get() {
                            return this.post.underlineThickness;
                        }

                        /**
                         * If this is an italic font, the angle the cursor should be drawn at to match the font design
                         * @type {number}
                         */

                    }, {
                        key: 'italicAngle',
                        get: function get() {
                            return this.post.italicAngle;
                        }

                        /**
                         * The height of capital letters above the baseline.
                         * See [here](https://en.wikipedia.org/wiki/Cap_height) for more details.
                         * @type {number}
                         */

                    }, {
                        key: 'capHeight',
                        get: function get() {
                            var os2 = this['OS/2'];
                            return os2 ? os2.capHeight : this.ascent;
                        }

                        /**
                         * The height of lower case letters in the font.
                         * See [here](https://en.wikipedia.org/wiki/X-height) for more details.
                         * @type {number}
                         */

                    }, {
                        key: 'xHeight',
                        get: function get() {
                            var os2 = this['OS/2'];
                            return os2 ? os2.xHeight : 0;
                        }

                        /**
                         * The number of glyphs in the font.
                         * @type {number}
                         */

                    }, {
                        key: 'numGlyphs',
                        get: function get() {
                            return this.maxp.numGlyphs;
                        }

                        /**
                         * The size of the fontéˆ¥æªš internal coordinate grid
                         * @type {number}
                         */

                    }, {
                        key: 'unitsPerEm',
                        get: function get() {
                            return this.head.unitsPerEm;
                        }

                        /**
                         * The fontéˆ¥æªš bounding box, i.e. the box that encloses all glyphs in the font.
                         * @type {BBox}
                         */

                    }, {
                        key: 'bbox',
                        get: function get() {
                            return _Object$freeze(new BBox(this.head.xMin, this.head.yMin, this.head.xMax, this.head.yMax));
                        }
                    }, {
                        key: '_cmapProcessor',
                        get: function get() {
                            return new CmapProcessor(this.cmap);
                        }

                        /**
                         * An array of all of the unicode code points supported by the font.
                         * @type {number[]}
                         */

                    }, {
                        key: 'characterSet',
                        get: function get() {
                            return this._cmapProcessor.getCharacterSet();
                        }
                    }, {
                        key: '_layoutEngine',
                        get: function get() {
                            return new LayoutEngine(this);
                        }
                    }, {
                        key: 'availableFeatures',
                        get: function get() {
                            return this._layoutEngine.getAvailableFeatures();
                        }
                    }, {
                        key: 'variationAxes',
                        get: function get() {
                            var res = {};
                            if (!this.fvar) {
                                return res;
                            }

                            for (var _iterator = this.fvar.axis, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
                                var _ref;

                                if (_isArray) {
                                    if (_i >= _iterator.length) break;
                                    _ref = _iterator[_i++];
                                } else {
                                    _i = _iterator.next();
                                    if (_i.done) break;
                                    _ref = _i.value;
                                }

                                var axis = _ref;

                                res[axis.axisTag.trim()] = {
                                    name: axis.name.en,
                                    min: axis.minValue,
                                    default: axis.defaultValue,
                                    max: axis.maxValue
                                };
                            }

                            return res;
                        }

                        /**
                         * Returns an object describing the named variation instances
                         * that the font designer has specified. Keys are variation names
                         * and values are the variation settings for this instance.
                         *
                         * @type {object}
                         */

                    }, {
                        key: 'namedVariations',
                        get: function get() {
                            var res = {};
                            if (!this.fvar) {
                                return res;
                            }

                            for (var _iterator2 = this.fvar.instance, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
                                var _ref2;

                                if (_isArray2) {
                                    if (_i2 >= _iterator2.length) break;
                                    _ref2 = _iterator2[_i2++];
                                } else {
                                    _i2 = _iterator2.next();
                                    if (_i2.done) break;
                                    _ref2 = _i2.value;
                                }

                                var instance = _ref2;

                                var settings = {};
                                for (var i = 0; i < this.fvar.axis.length; i++) {
                                    var axis = this.fvar.axis[i];
                                    settings[axis.axisTag.trim()] = instance.coord[i];
                                }

                                res[instance.name.en] = settings;
                            }

                            return res;
                        }
                    }, {
                        key: '_variationProcessor',
                        get: function get() {
                            if (!this.fvar) {
                                return null;
                            }

                            var variationCoords = this.variationCoords;

                            // Ignore if no variation coords and not CFF2
                            if (!variationCoords && !this.CFF2) {
                                return null;
                            }

                            if (!variationCoords) {
                                variationCoords = this.fvar.axis.map(function (axis) {
                                    return axis.defaultValue;
                                });
                            }

                            return new GlyphVariationProcessor(this, variationCoords);
                        }
                    }]);

                    return TTFFont;
                }(), (_applyDecoratedDescriptor(_class.prototype, 'bbox', [cache], _Object$getOwnPropertyDescriptor(_class.prototype, 'bbox'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_cmapProcessor', [cache], _Object$getOwnPropertyDescriptor(_class.prototype, '_cmapProcessor'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'characterSet', [cache], _Object$getOwnPropertyDescriptor(_class.prototype, 'characterSet'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_layoutEngine', [cache], _Object$getOwnPropertyDescriptor(_class.prototype, '_layoutEngine'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'variationAxes', [cache], _Object$getOwnPropertyDescriptor(_class.prototype, 'variationAxes'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'namedVariations', [cache], _Object$getOwnPropertyDescriptor(_class.prototype, 'namedVariations'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_variationProcessor', [cache], _Object$getOwnPropertyDescriptor(_class.prototype, '_variationProcessor'), _class.prototype)), _class);

                var WOFFDirectoryEntry = new r.Struct({
                    tag: new r.String(4),
                    offset: new r.Pointer(r.uint32, 'void', { type: 'global' }),
                    compLength: r.uint32,
                    length: r.uint32,
                    origChecksum: r.uint32
                });

                var WOFFDirectory = new r.Struct({
                    tag: new r.String(4), // should be 'wOFF'
                    flavor: r.uint32,
                    length: r.uint32,
                    numTables: r.uint16,
                    reserved: new r.Reserved(r.uint16),
                    totalSfntSize: r.uint32,
                    majorVersion: r.uint16,
                    minorVersion: r.uint16,
                    metaOffset: r.uint32,
                    metaLength: r.uint32,
                    metaOrigLength: r.uint32,
                    privOffset: r.uint32,
                    privLength: r.uint32,
                    tables: new r.Array(WOFFDirectoryEntry, 'numTables')
                });

                WOFFDirectory.process = function () {
                    var tables = {};
                    for (var _iterator = this.tables, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
                        var _ref;

                        if (_isArray) {
                            if (_i >= _iterator.length) break;
                            _ref = _iterator[_i++];
                        } else {
                            _i = _iterator.next();
                            if (_i.done) break;
                            _ref = _i.value;
                        }

                        var table = _ref;

                        tables[table.tag] = table;
                    }

                    this.tables = tables;
                };

                var WOFFFont = function (_TTFFont) {
                    _inherits(WOFFFont, _TTFFont);

                    function WOFFFont() {
                        _classCallCheck(this, WOFFFont);

                        return _possibleConstructorReturn(this, _TTFFont.apply(this, arguments));
                    }

                    WOFFFont.probe = function probe(buffer) {
                        return buffer.toString('ascii', 0, 4) === 'wOFF';
                    };

                    WOFFFont.prototype._decodeDirectory = function _decodeDirectory() {
                        this.directory = WOFFDirectory.decode(this.stream, { _startOffset: 0 });
                    };

                    WOFFFont.prototype._getTableStream = function _getTableStream(tag) {
                        var table = this.directory.tables[tag];
                        if (table) {
                            this.stream.pos = table.offset;

                            if (table.compLength < table.length) {
                                this.stream.pos += 2; // skip deflate header
                                var outBuffer = new Buffer(table.length);
                                var buf = inflate(this.stream.readBuffer(table.compLength - 2), outBuffer);
                                return new r.DecodeStream(buf);
                            } else {
                                return this.stream;
                            }
                        }

                        return null;
                    };

                    return WOFFFont;
                }(TTFFont);

                /**
                 * Represents a TrueType glyph in the WOFF2 format, which compresses glyphs differently.
                 */

                var WOFF2Glyph = function (_TTFGlyph) {
                    _inherits(WOFF2Glyph, _TTFGlyph);

                    function WOFF2Glyph() {
                        _classCallCheck(this, WOFF2Glyph);

                        return _possibleConstructorReturn(this, _TTFGlyph.apply(this, arguments));
                    }

                    WOFF2Glyph.prototype._decode = function _decode() {
                        // We have to decode in advance (in WOFF2Font), so just return the pre-decoded data.
                        return this._font._transformedGlyphs[this.id];
                    };

                    WOFF2Glyph.prototype._getCBox = function _getCBox() {
                        return this.path.bbox;
                    };

                    return WOFF2Glyph;
                }(TTFGlyph);

                var Base128 = {
                    decode: function decode(stream) {
                        var result = 0;
                        var iterable = [0, 1, 2, 3, 4];
                        for (var j = 0; j < iterable.length; j++) {
                            var i = iterable[j];
                            var code = stream.readUInt8();

                            // If any of the top seven bits are set then we're about to overflow.
                            if (result & 0xe0000000) {
                                throw new Error('Overflow');
                            }

                            result = result << 7 | code & 0x7f;
                            if ((code & 0x80) === 0) {
                                return result;
                            }
                        }

                        throw new Error('Bad base 128 number');
                    }
                };

                var knownTags = ['cmap', 'head', 'hhea', 'hmtx', 'maxp', 'name', 'OS/2', 'post', 'cvt ', 'fpgm', 'glyf', 'loca', 'prep', 'CFF ', 'VORG', 'EBDT', 'EBLC', 'gasp', 'hdmx', 'kern', 'LTSH', 'PCLT', 'VDMX', 'vhea', 'vmtx', 'BASE', 'GDEF', 'GPOS', 'GSUB', 'EBSC', 'JSTF', 'MATH', 'CBDT', 'CBLC', 'COLR', 'CPAL', 'SVG ', 'sbix', 'acnt', 'avar', 'bdat', 'bloc', 'bsln', 'cvar', 'fdsc', 'feat', 'fmtx', 'fvar', 'gvar', 'hsty', 'just', 'lcar', 'mort', 'morx', 'opbd', 'prop', 'trak', 'Zapf', 'Silf', 'Glat', 'Gloc', 'Feat', 'Sill'];

                var WOFF2DirectoryEntry = new r.Struct({
                    flags: r.uint8,
                    customTag: new r.Optional(new r.String(4), function (t) {
                        return (t.flags & 0x3f) === 0x3f;
                    }),
                    tag: function tag(t) {
                        return t.customTag || knownTags[t.flags & 0x3f];
                    }, // || (() => { throw new Error(`Bad tag: ${flags & 0x3f}`); })(); },
                    length: Base128,
                    transformVersion: function transformVersion(t) {
                        return t.flags >>> 6 & 0x03;
                    },
                    transformed: function transformed(t) {
                        return t.tag === 'glyf' || t.tag === 'loca' ? t.transformVersion === 0 : t.transformVersion !== 0;
                    },
                    transformLength: new r.Optional(Base128, function (t) {
                        return t.transformed;
                    })
                });

                var WOFF2Directory = new r.Struct({
                    tag: new r.String(4), // should be 'wOF2'
                    flavor: r.uint32,
                    length: r.uint32,
                    numTables: r.uint16,
                    reserved: new r.Reserved(r.uint16),
                    totalSfntSize: r.uint32,
                    totalCompressedSize: r.uint32,
                    majorVersion: r.uint16,
                    minorVersion: r.uint16,
                    metaOffset: r.uint32,
                    metaLength: r.uint32,
                    metaOrigLength: r.uint32,
                    privOffset: r.uint32,
                    privLength: r.uint32,
                    tables: new r.Array(WOFF2DirectoryEntry, 'numTables')
                });

                WOFF2Directory.process = function () {
                    var tables = {};
                    for (var i = 0; i < this.tables.length; i++) {
                        var table = this.tables[i];
                        tables[table.tag] = table;
                    }

                    return this.tables = tables;
                };

                /**
                 * Subclass of TTFFont that represents a TTF/OTF font compressed by WOFF2
                 * See spec here: http://www.w3.org/TR/WOFF2/
                 */

                var WOFF2Font = function (_TTFFont) {
                    _inherits(WOFF2Font, _TTFFont);

                    function WOFF2Font() {
                        _classCallCheck(this, WOFF2Font);

                        return _possibleConstructorReturn(this, _TTFFont.apply(this, arguments));
                    }

                    WOFF2Font.probe = function probe(buffer) {
                        return buffer.toString('ascii', 0, 4) === 'wOF2';
                    };

                    WOFF2Font.prototype._decodeDirectory = function _decodeDirectory() {
                        this.directory = WOFF2Directory.decode(this.stream);
                        this._dataPos = this.stream.pos;
                    };

                    WOFF2Font.prototype._decompress = function _decompress() {
                        // decompress data and setup table offsets if we haven't already
                        if (!this._decompressed) {
                            this.stream.pos = this._dataPos;
                            var buffer = this.stream.readBuffer(this.directory.totalCompressedSize);

                            var decompressedSize = 0;
                            for (var tag in this.directory.tables) {
                                var entry = this.directory.tables[tag];
                                entry.offset = decompressedSize;
                                decompressedSize += entry.transformLength != null ? entry.transformLength : entry.length;
                            }

                            var decompressed = brotli(buffer, decompressedSize);
                            if (!decompressed) {
                                throw new Error('Error decoding compressed data in WOFF2');
                            }

                            this.stream = new r.DecodeStream(new Buffer(decompressed));
                            this._decompressed = true;
                        }
                    };

                    WOFF2Font.prototype._decodeTable = function _decodeTable(table) {
                        this._decompress();
                        return _TTFFont.prototype._decodeTable.call(this, table);
                    };

                    // Override this method to get a glyph and return our
                    // custom subclass if there is a glyf table.


                    WOFF2Font.prototype._getBaseGlyph = function _getBaseGlyph(glyph) {
                        var characters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

                        if (!this._glyphs[glyph]) {
                            if (this.directory.tables.glyf && this.directory.tables.glyf.transformed) {
                                if (!this._transformedGlyphs) {
                                    this._transformGlyfTable();
                                }
                                return this._glyphs[glyph] = new WOFF2Glyph(glyph, characters, this);
                            } else {
                                return _TTFFont.prototype._getBaseGlyph.call(this, glyph, characters);
                            }
                        }
                    };

                    WOFF2Font.prototype._transformGlyfTable = function _transformGlyfTable() {
                        this._decompress();
                        this.stream.pos = this.directory.tables.glyf.offset;
                        var table = GlyfTable.decode(this.stream);
                        var glyphs = [];

                        for (var index = 0; index < table.numGlyphs; index++) {
                            var glyph = {};
                            var nContours = table.nContours.readInt16BE();
                            glyph.numberOfContours = nContours;

                            if (nContours > 0) {
                                // simple glyph
                                var nPoints = [];
                                var totalPoints = 0;

                                for (var i = 0; i < nContours; i++) {
                                    var _r = read255UInt16(table.nPoints);
                                    totalPoints += _r;
                                    nPoints.push(totalPoints);
                                }

                                glyph.points = decodeTriplet(table.flags, table.glyphs, totalPoints);
                                for (var _i = 0; _i < nContours; _i++) {
                                    glyph.points[nPoints[_i] - 1].endContour = true;
                                }

                                var instructionSize = read255UInt16(table.glyphs);
                            } else if (nContours < 0) {
                                // composite glyph
                                var haveInstructions = TTFGlyph.prototype._decodeComposite.call({ _font: this }, glyph, table.composites);
                                if (haveInstructions) {
                                    var instructionSize = read255UInt16(table.glyphs);
                                }
                            }

                            glyphs.push(glyph);
                        }

                        this._transformedGlyphs = glyphs;
                    };

                    return WOFF2Font;
                }(TTFFont);

                var Substream = function () {
                    function Substream(length) {
                        _classCallCheck(this, Substream);

                        this.length = length;
                        this._buf = new r.Buffer(length);
                    }

                    Substream.prototype.decode = function decode(stream, parent) {
                        return new r.DecodeStream(this._buf.decode(stream, parent));
                    };

                    return Substream;
                }();

                // This struct represents the entire glyf table


                var GlyfTable = new r.Struct({
                    version: r.uint32,
                    numGlyphs: r.uint16,
                    indexFormat: r.uint16,
                    nContourStreamSize: r.uint32,
                    nPointsStreamSize: r.uint32,
                    flagStreamSize: r.uint32,
                    glyphStreamSize: r.uint32,
                    compositeStreamSize: r.uint32,
                    bboxStreamSize: r.uint32,
                    instructionStreamSize: r.uint32,
                    nContours: new Substream('nContourStreamSize'),
                    nPoints: new Substream('nPointsStreamSize'),
                    flags: new Substream('flagStreamSize'),
                    glyphs: new Substream('glyphStreamSize'),
                    composites: new Substream('compositeStreamSize'),
                    bboxes: new Substream('bboxStreamSize'),
                    instructions: new Substream('instructionStreamSize')
                });

                var WORD_CODE = 253;
                var ONE_MORE_BYTE_CODE2 = 254;
                var ONE_MORE_BYTE_CODE1 = 255;
                var LOWEST_U_CODE = 253;

                function read255UInt16(stream) {
                    var code = stream.readUInt8();

                    if (code === WORD_CODE) {
                        return stream.readUInt16BE();
                    }

                    if (code === ONE_MORE_BYTE_CODE1) {
                        return stream.readUInt8() + LOWEST_U_CODE;
                    }

                    if (code === ONE_MORE_BYTE_CODE2) {
                        return stream.readUInt8() + LOWEST_U_CODE * 2;
                    }

                    return code;
                }

                function withSign(flag, baseval) {
                    return flag & 1 ? baseval : -baseval;
                }

                function decodeTriplet(flags, glyphs, nPoints) {
                    var y = void 0;
                    var x = y = 0;
                    var res = [];

                    for (var i = 0; i < nPoints; i++) {
                        var dx = 0,
                            dy = 0;
                        var flag = flags.readUInt8();
                        var onCurve = !(flag >> 7);
                        flag &= 0x7f;

                        if (flag < 10) {
                            dx = 0;
                            dy = withSign(flag, ((flag & 14) << 7) + glyphs.readUInt8());
                        } else if (flag < 20) {
                            dx = withSign(flag, ((flag - 10 & 14) << 7) + glyphs.readUInt8());
                            dy = 0;
                        } else if (flag < 84) {
                            var b0 = flag - 20;
                            var b1 = glyphs.readUInt8();
                            dx = withSign(flag, 1 + (b0 & 0x30) + (b1 >> 4));
                            dy = withSign(flag >> 1, 1 + ((b0 & 0x0c) << 2) + (b1 & 0x0f));
                        } else if (flag < 120) {
                            var b0 = flag - 84;
                            dx = withSign(flag, 1 + (b0 / 12 << 8) + glyphs.readUInt8());
                            dy = withSign(flag >> 1, 1 + (b0 % 12 >> 2 << 8) + glyphs.readUInt8());
                        } else if (flag < 124) {
                            var b1 = glyphs.readUInt8();
                            var b2 = glyphs.readUInt8();
                            dx = withSign(flag, (b1 << 4) + (b2 >> 4));
                            dy = withSign(flag >> 1, ((b2 & 0x0f) << 8) + glyphs.readUInt8());
                        } else {
                            dx = withSign(flag, glyphs.readUInt16BE());
                            dy = withSign(flag >> 1, glyphs.readUInt16BE());
                        }

                        x += dx;
                        y += dy;
                        res.push(new Point(onCurve, false, x, y));
                    }

                    return res;
                }

                var TTCHeader = new r.VersionedStruct(r.uint32, {
                    0x00010000: {
                        numFonts: r.uint32,
                        offsets: new r.Array(r.uint32, 'numFonts')
                    },
                    0x00020000: {
                        numFonts: r.uint32,
                        offsets: new r.Array(r.uint32, 'numFonts'),
                        dsigTag: r.uint32,
                        dsigLength: r.uint32,
                        dsigOffset: r.uint32
                    }
                });

                var TrueTypeCollection = function () {
                    TrueTypeCollection.probe = function probe(buffer) {
                        return buffer.toString('ascii', 0, 4) === 'ttcf';
                    };

                    function TrueTypeCollection(stream) {
                        _classCallCheck(this, TrueTypeCollection);

                        this.stream = stream;
                        if (stream.readString(4) !== 'ttcf') {
                            throw new Error('Not a TrueType collection');
                        }

                        this.header = TTCHeader.decode(stream);
                    }

                    TrueTypeCollection.prototype.getFont = function getFont(name) {
                        for (var _iterator = this.header.offsets, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
                            var _ref;

                            if (_isArray) {
                                if (_i >= _iterator.length) break;
                                _ref = _iterator[_i++];
                            } else {
                                _i = _iterator.next();
                                if (_i.done) break;
                                _ref = _i.value;
                            }

                            var offset = _ref;

                            var stream = new r.DecodeStream(this.stream.buffer);
                            stream.pos = offset;
                            var font = new TTFFont(stream);
                            if (font.postscriptName === name) {
                                return font;
                            }
                        }

                        return null;
                    };

                    _createClass(TrueTypeCollection, [{
                        key: 'fonts',
                        get: function get() {
                            var fonts = [];
                            for (var _iterator2 = this.header.offsets, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
                                var _ref2;

                                if (_isArray2) {
                                    if (_i2 >= _iterator2.length) break;
                                    _ref2 = _iterator2[_i2++];
                                } else {
                                    _i2 = _iterator2.next();
                                    if (_i2.done) break;
                                    _ref2 = _i2.value;
                                }

                                var offset = _ref2;

                                var stream = new r.DecodeStream(this.stream.buffer);
                                stream.pos = offset;
                                fonts.push(new TTFFont(stream));
                            }

                            return fonts;
                        }
                    }]);

                    return TrueTypeCollection;
                }();

                var DFontName = new r.String(r.uint8);
                var DFontData = new r.Struct({
                    len: r.uint32,
                    buf: new r.Buffer('len')
                });

                var Ref = new r.Struct({
                    id: r.uint16,
                    nameOffset: r.int16,
                    attr: r.uint8,
                    dataOffset: r.uint24,
                    handle: r.uint32
                });

                var Type = new r.Struct({
                    name: new r.String(4),
                    maxTypeIndex: r.uint16,
                    refList: new r.Pointer(r.uint16, new r.Array(Ref, function (t) {
                        return t.maxTypeIndex + 1;
                    }), { type: 'parent' })
                });

                var TypeList = new r.Struct({
                    length: r.uint16,
                    types: new r.Array(Type, function (t) {
                        return t.length + 1;
                    })
                });

                var DFontMap = new r.Struct({
                    reserved: new r.Reserved(r.uint8, 24),
                    typeList: new r.Pointer(r.uint16, TypeList),
                    nameListOffset: new r.Pointer(r.uint16, 'void')
                });

                var DFontHeader = new r.Struct({
                    dataOffset: r.uint32,
                    map: new r.Pointer(r.uint32, DFontMap),
                    dataLength: r.uint32,
                    mapLength: r.uint32
                });

                var DFont = function () {
                    DFont.probe = function probe(buffer) {
                        var stream = new r.DecodeStream(buffer);

                        try {
                            var header = DFontHeader.decode(stream);
                        } catch (e) {
                            return false;
                        }

                        for (var _iterator = header.map.typeList.types, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
                            var _ref;

                            if (_isArray) {
                                if (_i >= _iterator.length) break;
                                _ref = _iterator[_i++];
                            } else {
                                _i = _iterator.next();
                                if (_i.done) break;
                                _ref = _i.value;
                            }

                            var type = _ref;

                            if (type.name === 'sfnt') {
                                return true;
                            }
                        }

                        return false;
                    };

                    function DFont(stream) {
                        _classCallCheck(this, DFont);

                        this.stream = stream;
                        this.header = DFontHeader.decode(this.stream);

                        for (var _iterator2 = this.header.map.typeList.types, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
                            var _ref2;

                            if (_isArray2) {
                                if (_i2 >= _iterator2.length) break;
                                _ref2 = _iterator2[_i2++];
                            } else {
                                _i2 = _iterator2.next();
                                if (_i2.done) break;
                                _ref2 = _i2.value;
                            }

                            var type = _ref2;

                            for (var _iterator3 = type.refList, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
                                var _ref3;

                                if (_isArray3) {
                                    if (_i3 >= _iterator3.length) break;
                                    _ref3 = _iterator3[_i3++];
                                } else {
                                    _i3 = _iterator3.next();
                                    if (_i3.done) break;
                                    _ref3 = _i3.value;
                                }

                                var ref = _ref3;

                                if (ref.nameOffset >= 0) {
                                    this.stream.pos = ref.nameOffset + this.header.map.nameListOffset;
                                    ref.name = DFontName.decode(this.stream);
                                } else {
                                    ref.name = null;
                                }
                            }

                            if (type.name === 'sfnt') {
                                this.sfnt = type;
                            }
                        }
                    }

                    DFont.prototype.getFont = function getFont(name) {
                        if (!this.sfnt) {
                            return null;
                        }

                        for (var _iterator4 = this.sfnt.refList, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
                            var _ref4;

                            if (_isArray4) {
                                if (_i4 >= _iterator4.length) break;
                                _ref4 = _iterator4[_i4++];
                            } else {
                                _i4 = _iterator4.next();
                                if (_i4.done) break;
                                _ref4 = _i4.value;
                            }

                            var ref = _ref4;

                            var pos = this.header.dataOffset + ref.dataOffset + 4;
                            var stream = new r.DecodeStream(this.stream.buffer.slice(pos));
                            var font = new TTFFont(stream);
                            if (font.postscriptName === name) {
                                return font;
                            }
                        }

                        return null;
                    };

                    _createClass(DFont, [{
                        key: 'fonts',
                        get: function get() {
                            var fonts = [];
                            for (var _iterator5 = this.sfnt.refList, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _getIterator(_iterator5);;) {
                                var _ref5;

                                if (_isArray5) {
                                    if (_i5 >= _iterator5.length) break;
                                    _ref5 = _iterator5[_i5++];
                                } else {
                                    _i5 = _iterator5.next();
                                    if (_i5.done) break;
                                    _ref5 = _i5.value;
                                }

                                var ref = _ref5;

                                var pos = this.header.dataOffset + ref.dataOffset + 4;
                                var stream = new r.DecodeStream(this.stream.buffer.slice(pos));
                                fonts.push(new TTFFont(stream));
                            }

                            return fonts;
                        }
                    }]);

                    return DFont;
                }();

                // Register font formats
                fontkit.registerFormat(TTFFont);
                fontkit.registerFormat(WOFFFont);
                fontkit.registerFormat(WOFF2Font);
                fontkit.registerFormat(TrueTypeCollection);
                fontkit.registerFormat(DFont);

                module.exports = fontkit;

                /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer, __webpack_require__(36)))

            /***/ }),
        /* 84 */
        /***/ (function(module, exports, __webpack_require__) {

            // Generated by CoffeeScript 1.7.1
            (function() {
                var key, val, _ref, _ref1;

                exports.EncodeStream = __webpack_require__(85);

                exports.DecodeStream = __webpack_require__(86);

                exports.Array = __webpack_require__(108);

                exports.LazyArray = __webpack_require__(111);

                exports.Bitfield = __webpack_require__(112);

                exports.Boolean = __webpack_require__(113);

                exports.Buffer = __webpack_require__(114);

                exports.Enum = __webpack_require__(115);

                exports.Optional = __webpack_require__(116);

                exports.Reserved = __webpack_require__(117);

                exports.String = __webpack_require__(118);

                exports.Struct = __webpack_require__(119);

                exports.VersionedStruct = __webpack_require__(120);

                _ref = __webpack_require__(109);
                for (key in _ref) {
                    val = _ref[key];
                    exports[key] = val;
                }

                _ref1 = __webpack_require__(121);
                for (key in _ref1) {
                    val = _ref1[key];
                    exports[key] = val;
                }

            }).call(this);


            /***/ }),
        /* 85 */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(Buffer) {// Generated by CoffeeScript 1.7.1
                (function() {
                    var DecodeStream, EncodeStream, iconv, stream,
                        __hasProp = {}.hasOwnProperty,
                        __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

                    stream = __webpack_require__(31);

                    DecodeStream = __webpack_require__(86);

                    try {
                        iconv = __webpack_require__(87);
                    } catch (_error) {}

                    EncodeStream = (function(_super) {
                        var key;

                        __extends(EncodeStream, _super);

                        function EncodeStream(bufferSize) {
                            if (bufferSize == null) {
                                bufferSize = 65536;
                            }
                            EncodeStream.__super__.constructor.apply(this, arguments);
                            this.buffer = new Buffer(bufferSize);
                            this.bufferOffset = 0;
                            this.pos = 0;
                        }

                        for (key in Buffer.prototype) {
                            if (key.slice(0, 5) === 'write') {
                                (function(key) {
                                    var bytes;
                                    bytes = +DecodeStream.TYPES[key.replace(/write|[BL]E/g, '')];
                                    return EncodeStream.prototype[key] = function(value) {
                                        this.ensure(bytes);
                                        this.buffer[key](value, this.bufferOffset);
                                        this.bufferOffset += bytes;
                                        return this.pos += bytes;
                                    };
                                })(key);
                            }
                        }

                        EncodeStream.prototype._read = function() {};

                        EncodeStream.prototype.ensure = function(bytes) {
                            if (this.bufferOffset + bytes > this.buffer.length) {
                                return this.flush();
                            }
                        };

                        EncodeStream.prototype.flush = function() {
                            if (this.bufferOffset > 0) {
                                this.push(new Buffer(this.buffer.slice(0, this.bufferOffset)));
                                return this.bufferOffset = 0;
                            }
                        };

                        EncodeStream.prototype.writeBuffer = function(buffer) {
                            this.flush();
                            this.push(buffer);
                            return this.pos += buffer.length;
                        };

                        EncodeStream.prototype.writeString = function(string, encoding) {
                            var buf, byte, i, _i, _ref;
                            if (encoding == null) {
                                encoding = 'ascii';
                            }
                            switch (encoding) {
                                case 'utf16le':
                                case 'ucs2':
                                case 'utf8':
                                case 'ascii':
                                    return this.writeBuffer(new Buffer(string, encoding));
                                case 'utf16be':
                                    buf = new Buffer(string, 'utf16le');
                                    for (i = _i = 0, _ref = buf.length - 1; _i < _ref; i = _i += 2) {
                                        byte = buf[i];
                                        buf[i] = buf[i + 1];
                                        buf[i + 1] = byte;
                                    }
                                    return this.writeBuffer(buf);
                                default:
                                    if (iconv) {
                                        return this.writeBuffer(iconv.encode(string, encoding));
                                    } else {
                                        throw new Error('Install iconv-lite to enable additional string encodings.');
                                    }
                            }
                        };

                        EncodeStream.prototype.writeUInt24BE = function(val) {
                            this.ensure(3);
                            this.buffer[this.bufferOffset++] = val >>> 16 & 0xff;
                            this.buffer[this.bufferOffset++] = val >>> 8 & 0xff;
                            this.buffer[this.bufferOffset++] = val & 0xff;
                            return this.pos += 3;
                        };

                        EncodeStream.prototype.writeUInt24LE = function(val) {
                            this.ensure(3);
                            this.buffer[this.bufferOffset++] = val & 0xff;
                            this.buffer[this.bufferOffset++] = val >>> 8 & 0xff;
                            this.buffer[this.bufferOffset++] = val >>> 16 & 0xff;
                            return this.pos += 3;
                        };

                        EncodeStream.prototype.writeInt24BE = function(val) {
                            if (val >= 0) {
                                return this.writeUInt24BE(val);
                            } else {
                                return this.writeUInt24BE(val + 0xffffff + 1);
                            }
                        };

                        EncodeStream.prototype.writeInt24LE = function(val) {
                            if (val >= 0) {
                                return this.writeUInt24LE(val);
                            } else {
                                return this.writeUInt24LE(val + 0xffffff + 1);
                            }
                        };

                        EncodeStream.prototype.fill = function(val, length) {
                            var buf;
                            if (length < this.buffer.length) {
                                this.ensure(length);
                                this.buffer.fill(val, this.bufferOffset, this.bufferOffset + length);
                                this.bufferOffset += length;
                                return this.pos += length;
                            } else {
                                buf = new Buffer(length);
                                buf.fill(val);
                                return this.writeBuffer(buf);
                            }
                        };

                        EncodeStream.prototype.end = function() {
                            this.flush();
                            return this.push(null);
                        };

                        return EncodeStream;

                    })(stream.Readable);

                    module.exports = EncodeStream;

                }).call(this);

                /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))

            /***/ }),
        /* 86 */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(Buffer) {// Generated by CoffeeScript 1.7.1
                (function() {
                    var DecodeStream, iconv;

                    try {
                        iconv = __webpack_require__(87);
                    } catch (_error) {}

                    DecodeStream = (function() {
                        var key;

                        function DecodeStream(buffer) {
                            this.buffer = buffer;
                            this.pos = 0;
                            this.length = this.buffer.length;
                        }

                        DecodeStream.TYPES = {
                            UInt8: 1,
                            UInt16: 2,
                            UInt24: 3,
                            UInt32: 4,
                            Int8: 1,
                            Int16: 2,
                            Int24: 3,
                            Int32: 4,
                            Float: 4,
                            Double: 8
                        };

                        for (key in Buffer.prototype) {
                            if (key.slice(0, 4) === 'read') {
                                (function(key) {
                                    var bytes;
                                    bytes = DecodeStream.TYPES[key.replace(/read|[BL]E/g, '')];
                                    return DecodeStream.prototype[key] = function() {
                                        var ret;
                                        ret = this.buffer[key](this.pos);
                                        this.pos += bytes;
                                        return ret;
                                    };
                                })(key);
                            }
                        }

                        DecodeStream.prototype.readString = function(length, encoding) {
                            var buf, byte, i, _i, _ref;
                            if (encoding == null) {
                                encoding = 'ascii';
                            }
                            switch (encoding) {
                                case 'utf16le':
                                case 'ucs2':
                                case 'utf8':
                                case 'ascii':
                                    return this.buffer.toString(encoding, this.pos, this.pos += length);
                                case 'utf16be':
                                    buf = new Buffer(this.readBuffer(length));
                                    for (i = _i = 0, _ref = buf.length - 1; _i < _ref; i = _i += 2) {
                                        byte = buf[i];
                                        buf[i] = buf[i + 1];
                                        buf[i + 1] = byte;
                                    }
                                    return buf.toString('utf16le');
                                default:
                                    buf = this.readBuffer(length);
                                    if (iconv) {
                                        try {
                                            return iconv.decode(buf, encoding);
                                        } catch (_error) {}
                                    }
                                    return buf;
                            }
                        };

                        DecodeStream.prototype.readBuffer = function(length) {
                            return this.buffer.slice(this.pos, this.pos += length);
                        };

                        DecodeStream.prototype.readUInt24BE = function() {
                            return (this.readUInt16BE() << 8) + this.readUInt8();
                        };

                        DecodeStream.prototype.readUInt24LE = function() {
                            return this.readUInt16LE() + (this.readUInt8() << 16);
                        };

                        DecodeStream.prototype.readInt24BE = function() {
                            return (this.readInt16BE() << 8) + this.readUInt8();
                        };

                        DecodeStream.prototype.readInt24LE = function() {
                            return this.readUInt16LE() + (this.readInt8() << 16);
                        };

                        return DecodeStream;

                    })();

                    module.exports = DecodeStream;

                }).call(this);

                /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))

            /***/ }),
        /* 87 */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(process) {"use strict";

                // Some environments don't have global Buffer (e.g. React Native).
                // Solution would be installing npm modules "buffer" and "stream" explicitly.
                var Buffer = __webpack_require__(2).Buffer;

                var bomHandling = __webpack_require__(88),
                    iconv = module.exports;

                // All codecs and aliases are kept here, keyed by encoding name/alias.
                // They are lazy loaded in `iconv.getCodec` from `encodings/index.js`.
                iconv.encodings = null;

                // Characters emitted in case of error.
                iconv.defaultCharUnicode = 'é”Ÿï¿½';
                iconv.defaultCharSingleByte = '?';

                // Public API.
                iconv.encode = function encode(str, encoding, options) {
                    str = "" + (str || ""); // Ensure string.

                    var encoder = iconv.getEncoder(encoding, options);

                    var res = encoder.write(str);
                    var trail = encoder.end();

                    return (trail && trail.length > 0) ? Buffer.concat([res, trail]) : res;
                }

                iconv.decode = function decode(buf, encoding, options) {
                    if (typeof buf === 'string') {
                        if (!iconv.skipDecodeWarning) {
                            console.error('Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding');
                            iconv.skipDecodeWarning = true;
                        }

                        buf = new Buffer("" + (buf || ""), "binary"); // Ensure buffer.
                    }

                    var decoder = iconv.getDecoder(encoding, options);

                    var res = decoder.write(buf);
                    var trail = decoder.end();

                    return trail ? (res + trail) : res;
                }

                iconv.encodingExists = function encodingExists(enc) {
                    try {
                        iconv.getCodec(enc);
                        return true;
                    } catch (e) {
                        return false;
                    }
                }

                // Legacy aliases to convert functions
                iconv.toEncoding = iconv.encode;
                iconv.fromEncoding = iconv.decode;

                // Search for a codec in iconv.encodings. Cache codec data in iconv._codecDataCache.
                iconv._codecDataCache = {};
                iconv.getCodec = function getCodec(encoding) {
                    if (!iconv.encodings)
                        iconv.encodings = __webpack_require__(89); // Lazy load all encoding definitions.

                    // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.
                    var enc = (''+encoding).toLowerCase().replace(/[^0-9a-z]|:\d{4}$/g, "");

                    // Traverse iconv.encodings to find actual codec.
                    var codecOptions = {};
                    while (true) {
                        var codec = iconv._codecDataCache[enc];
                        if (codec)
                            return codec;

                        var codecDef = iconv.encodings[enc];

                        switch (typeof codecDef) {
                            case "string": // Direct alias to other encoding.
                                enc = codecDef;
                                break;

                            case "object": // Alias with options. Can be layered.
                                for (var key in codecDef)
                                    codecOptions[key] = codecDef[key];

                                if (!codecOptions.encodingName)
                                    codecOptions.encodingName = enc;

                                enc = codecDef.type;
                                break;

                            case "function": // Codec itself.
                                if (!codecOptions.encodingName)
                                    codecOptions.encodingName = enc;

                                // The codec function must load all tables and return object with .encoder and .decoder methods.
                                // It'll be called only once (for each different options object).
                                codec = new codecDef(codecOptions, iconv);

                                iconv._codecDataCache[codecOptions.encodingName] = codec; // Save it to be reused later.
                                return codec;

                            default:
                                throw new Error("Encoding not recognized: '" + encoding + "' (searched as: '"+enc+"')");
                        }
                    }
                }

                iconv.getEncoder = function getEncoder(encoding, options) {
                    var codec = iconv.getCodec(encoding),
                        encoder = new codec.encoder(options, codec);

                    if (codec.bomAware && options && options.addBOM)
                        encoder = new bomHandling.PrependBOM(encoder, options);

                    return encoder;
                }

                iconv.getDecoder = function getDecoder(encoding, options) {
                    var codec = iconv.getCodec(encoding),
                        decoder = new codec.decoder(options, codec);

                    if (codec.bomAware && !(options && options.stripBOM === false))
                        decoder = new bomHandling.StripBOM(decoder, options);

                    return decoder;
                }


                // Load extensions in Node. All of them are omitted in Browserify build via 'browser' field in package.json.
                var nodeVer = typeof process !== 'undefined' && process.versions && process.versions.node;
                if (nodeVer) {

                    // Load streaming support in Node v0.10+
                    var nodeVerArr = nodeVer.split(".").map(Number);
                    if (nodeVerArr[0] > 0 || nodeVerArr[1] >= 10) {
                        __webpack_require__(106)(iconv);
                    }

                    // Load Node primitive extensions.
                    __webpack_require__(107)(iconv);
                }

                if (false) {
                    console.error("iconv-lite warning: javascript files are loaded not with utf-8 encoding. See https://github.com/ashtuchkin/iconv-lite/wiki/Javascript-source-file-encodings for more info.");
                }

                /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(36)))

            /***/ }),
        /* 88 */
        /***/ (function(module, exports) {

            "use strict";

            var BOMChar = '\uFEFF';

            exports.PrependBOM = PrependBOMWrapper
            function PrependBOMWrapper(encoder, options) {
                this.encoder = encoder;
                this.addBOM = true;
            }

            PrependBOMWrapper.prototype.write = function(str) {
                if (this.addBOM) {
                    str = BOMChar + str;
                    this.addBOM = false;
                }

                return this.encoder.write(str);
            }

            PrependBOMWrapper.prototype.end = function() {
                return this.encoder.end();
            }


            //------------------------------------------------------------------------------

            exports.StripBOM = StripBOMWrapper;
            function StripBOMWrapper(decoder, options) {
                this.decoder = decoder;
                this.pass = false;
                this.options = options || {};
            }

            StripBOMWrapper.prototype.write = function(buf) {
                var res = this.decoder.write(buf);
                if (this.pass || !res)
                    return res;

                if (res[0] === BOMChar) {
                    res = res.slice(1);
                    if (typeof this.options.stripBOM === 'function')
                        this.options.stripBOM();
                }

                this.pass = true;
                return res;
            }

            StripBOMWrapper.prototype.end = function() {
                return this.decoder.end();
            }



            /***/ }),
        /* 89 */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            // Update this array if you add/rename/remove files in this directory.
            // We support Browserify by skipping automatic module discovery and requiring modules directly.
            var modules = [
                __webpack_require__(90),
                __webpack_require__(91),
                __webpack_require__(92),
                __webpack_require__(93),
                __webpack_require__(94),
                __webpack_require__(95),
                __webpack_require__(96),
                __webpack_require__(97),
            ];

            // Put all encoding/alias/codec definitions to single object and export it.
            for (var i = 0; i < modules.length; i++) {
                var module = modules[i];
                for (var enc in module)
                    if (Object.prototype.hasOwnProperty.call(module, enc))
                        exports[enc] = module[enc];
            }


            /***/ }),
        /* 90 */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";
            var Buffer = __webpack_require__(2).Buffer;

            // Export Node.js internal encodings.

            module.exports = {
                // Encodings
                utf8:   { type: "_internal", bomAware: true},
                cesu8:  { type: "_internal", bomAware: true},
                unicode11utf8: "utf8",

                ucs2:   { type: "_internal", bomAware: true},
                utf16le: "ucs2",

                binary: { type: "_internal" },
                iso88591: "binary",

                base64: { type: "_internal" },
                hex:    { type: "_internal" },

                // Codec.
                _internal: InternalCodec,
            };

            //------------------------------------------------------------------------------

            function InternalCodec(codecOptions, iconv) {
                this.enc = codecOptions.encodingName;
                this.bomAware = codecOptions.bomAware;

                if (this.enc === "base64")
                    this.encoder = InternalEncoderBase64;
                else if (this.enc === "cesu8") {
                    this.enc = "utf8"; // Use utf8 for decoding.
                    this.encoder = InternalEncoderCesu8;

                    // Add decoder for versions of Node not supporting CESU-8
                    if (new Buffer('eda0bdedb2a9', 'hex').toString() !== 'é¦ƒæŒ¬') {
                        this.decoder = InternalDecoderCesu8;
                        this.defaultCharUnicode = iconv.defaultCharUnicode;
                    }
                }
            }

            InternalCodec.prototype.encoder = InternalEncoder;
            InternalCodec.prototype.decoder = InternalDecoder;

            //------------------------------------------------------------------------------

            // We use node.js internal decoder. Its signature is the same as ours.
            var StringDecoder = __webpack_require__(49).StringDecoder;

            if (!StringDecoder.prototype.end) // Node v0.8 doesn't have this method.
                StringDecoder.prototype.end = function() {};


            function InternalDecoder(options, codec) {
                StringDecoder.call(this, codec.enc);
            }

            InternalDecoder.prototype = StringDecoder.prototype;


            //------------------------------------------------------------------------------
            // Encoder is mostly trivial

            function InternalEncoder(options, codec) {
                this.enc = codec.enc;
            }

            InternalEncoder.prototype.write = function(str) {
                return new Buffer(str, this.enc);
            }

            InternalEncoder.prototype.end = function() {
            }


            //------------------------------------------------------------------------------
            // Except base64 encoder, which must keep its state.

            function InternalEncoderBase64(options, codec) {
                this.prevStr = '';
            }

            InternalEncoderBase64.prototype.write = function(str) {
                str = this.prevStr + str;
                var completeQuads = str.length - (str.length % 4);
                this.prevStr = str.slice(completeQuads);
                str = str.slice(0, completeQuads);

                return new Buffer(str, "base64");
            }

            InternalEncoderBase64.prototype.end = function() {
                return new Buffer(this.prevStr, "base64");
            }


            //------------------------------------------------------------------------------
            // CESU-8 encoder is also special.

            function InternalEncoderCesu8(options, codec) {
            }

            InternalEncoderCesu8.prototype.write = function(str) {
                var buf = new Buffer(str.length * 3), bufIdx = 0;
                for (var i = 0; i < str.length; i++) {
                    var charCode = str.charCodeAt(i);
                    // Naive implementation, but it works because CESU-8 is especially easy
                    // to convert from UTF-16 (which all JS strings are encoded in).
                    if (charCode < 0x80)
                        buf[bufIdx++] = charCode;
                    else if (charCode < 0x800) {
                        buf[bufIdx++] = 0xC0 + (charCode >>> 6);
                        buf[bufIdx++] = 0x80 + (charCode & 0x3f);
                    }
                    else { // charCode will always be < 0x10000 in javascript.
                        buf[bufIdx++] = 0xE0 + (charCode >>> 12);
                        buf[bufIdx++] = 0x80 + ((charCode >>> 6) & 0x3f);
                        buf[bufIdx++] = 0x80 + (charCode & 0x3f);
                    }
                }
                return buf.slice(0, bufIdx);
            }

            InternalEncoderCesu8.prototype.end = function() {
            }

            //------------------------------------------------------------------------------
            // CESU-8 decoder is not implemented in Node v4.0+

            function InternalDecoderCesu8(options, codec) {
                this.acc = 0;
                this.contBytes = 0;
                this.accBytes = 0;
                this.defaultCharUnicode = codec.defaultCharUnicode;
            }

            InternalDecoderCesu8.prototype.write = function(buf) {
                var acc = this.acc, contBytes = this.contBytes, accBytes = this.accBytes,
                    res = '';
                for (var i = 0; i < buf.length; i++) {
                    var curByte = buf[i];
                    if ((curByte & 0xC0) !== 0x80) { // Leading byte
                        if (contBytes > 0) { // Previous code is invalid
                            res += this.defaultCharUnicode;
                            contBytes = 0;
                        }

                        if (curByte < 0x80) { // Single-byte code
                            res += String.fromCharCode(curByte);
                        } else if (curByte < 0xE0) { // Two-byte code
                            acc = curByte & 0x1F;
                            contBytes = 1; accBytes = 1;
                        } else if (curByte < 0xF0) { // Three-byte code
                            acc = curByte & 0x0F;
                            contBytes = 2; accBytes = 1;
                        } else { // Four or more are not supported for CESU-8.
                            res += this.defaultCharUnicode;
                        }
                    } else { // Continuation byte
                        if (contBytes > 0) { // We're waiting for it.
                            acc = (acc << 6) | (curByte & 0x3f);
                            contBytes--; accBytes++;
                            if (contBytes === 0) {
                                // Check for overlong encoding, but support Modified UTF-8 (encoding NULL as C0 80)
                                if (accBytes === 2 && acc < 0x80 && acc > 0)
                                    res += this.defaultCharUnicode;
                                else if (accBytes === 3 && acc < 0x800)
                                    res += this.defaultCharUnicode;
                                else
                                // Actually add character.
                                    res += String.fromCharCode(acc);
                            }
                        } else { // Unexpected continuation byte
                            res += this.defaultCharUnicode;
                        }
                    }
                }
                this.acc = acc; this.contBytes = contBytes; this.accBytes = accBytes;
                return res;
            }

            InternalDecoderCesu8.prototype.end = function() {
                var res = 0;
                if (this.contBytes > 0)
                    res += this.defaultCharUnicode;
                return res;
            }


            /***/ }),
        /* 91 */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";
            var Buffer = __webpack_require__(2).Buffer;

            // Note: UTF16-LE (or UCS2) codec is Node.js native. See encodings/internal.js

            // == UTF16-BE codec. ==========================================================

            exports.utf16be = Utf16BECodec;
            function Utf16BECodec() {
            }

            Utf16BECodec.prototype.encoder = Utf16BEEncoder;
            Utf16BECodec.prototype.decoder = Utf16BEDecoder;
            Utf16BECodec.prototype.bomAware = true;


            // -- Encoding

            function Utf16BEEncoder() {
            }

            Utf16BEEncoder.prototype.write = function(str) {
                var buf = new Buffer(str, 'ucs2');
                for (var i = 0; i < buf.length; i += 2) {
                    var tmp = buf[i]; buf[i] = buf[i+1]; buf[i+1] = tmp;
                }
                return buf;
            }

            Utf16BEEncoder.prototype.end = function() {
            }


            // -- Decoding

            function Utf16BEDecoder() {
                this.overflowByte = -1;
            }

            Utf16BEDecoder.prototype.write = function(buf) {
                if (buf.length == 0)
                    return '';

                var buf2 = new Buffer(buf.length + 1),
                    i = 0, j = 0;

                if (this.overflowByte !== -1) {
                    buf2[0] = buf[0];
                    buf2[1] = this.overflowByte;
                    i = 1; j = 2;
                }

                for (; i < buf.length-1; i += 2, j+= 2) {
                    buf2[j] = buf[i+1];
                    buf2[j+1] = buf[i];
                }

                this.overflowByte = (i == buf.length-1) ? buf[buf.length-1] : -1;

                return buf2.slice(0, j).toString('ucs2');
            }

            Utf16BEDecoder.prototype.end = function() {
            }


            // == UTF-16 codec =============================================================
            // Decoder chooses automatically from UTF-16LE and UTF-16BE using BOM and space-based heuristic.
            // Defaults to UTF-16LE, as it's prevalent and default in Node.
            // http://en.wikipedia.org/wiki/UTF-16 and http://encoding.spec.whatwg.org/#utf-16le
            // Decoder default can be changed: iconv.decode(buf, 'utf16', {defaultEncoding: 'utf-16be'});

            // Encoder uses UTF-16LE and prepends BOM (which can be overridden with addBOM: false).

            exports.utf16 = Utf16Codec;
            function Utf16Codec(codecOptions, iconv) {
                this.iconv = iconv;
            }

            Utf16Codec.prototype.encoder = Utf16Encoder;
            Utf16Codec.prototype.decoder = Utf16Decoder;


            // -- Encoding (pass-through)

            function Utf16Encoder(options, codec) {
                options = options || {};
                if (options.addBOM === undefined)
                    options.addBOM = true;
                this.encoder = codec.iconv.getEncoder('utf-16le', options);
            }

            Utf16Encoder.prototype.write = function(str) {
                return this.encoder.write(str);
            }

            Utf16Encoder.prototype.end = function() {
                return this.encoder.end();
            }


            // -- Decoding

            function Utf16Decoder(options, codec) {
                this.decoder = null;
                this.initialBytes = [];
                this.initialBytesLen = 0;

                this.options = options || {};
                this.iconv = codec.iconv;
            }

            Utf16Decoder.prototype.write = function(buf) {
                if (!this.decoder) {
                    // Codec is not chosen yet. Accumulate initial bytes.
                    this.initialBytes.push(buf);
                    this.initialBytesLen += buf.length;

                    if (this.initialBytesLen < 16) // We need more bytes to use space heuristic (see below)
                        return '';

                    // We have enough bytes -> detect endianness.
                    var buf = Buffer.concat(this.initialBytes),
                        encoding = detectEncoding(buf, this.options.defaultEncoding);
                    this.decoder = this.iconv.getDecoder(encoding, this.options);
                    this.initialBytes.length = this.initialBytesLen = 0;
                }

                return this.decoder.write(buf);
            }

            Utf16Decoder.prototype.end = function() {
                if (!this.decoder) {
                    var buf = Buffer.concat(this.initialBytes),
                        encoding = detectEncoding(buf, this.options.defaultEncoding);
                    this.decoder = this.iconv.getDecoder(encoding, this.options);

                    var res = this.decoder.write(buf),
                        trail = this.decoder.end();

                    return trail ? (res + trail) : res;
                }
                return this.decoder.end();
            }

            function detectEncoding(buf, defaultEncoding) {
                var enc = defaultEncoding || 'utf-16le';

                if (buf.length >= 2) {
                    // Check BOM.
                    if (buf[0] == 0xFE && buf[1] == 0xFF) // UTF-16BE BOM
                        enc = 'utf-16be';
                    else if (buf[0] == 0xFF && buf[1] == 0xFE) // UTF-16LE BOM
                        enc = 'utf-16le';
                    else {
                        // No BOM found. Try to deduce encoding from initial content.
                        // Most of the time, the content has ASCII chars (U+00**), but the opposite (U+**00) is uncommon.
                        // So, we count ASCII as if it was LE or BE, and decide from that.
                        var asciiCharsLE = 0, asciiCharsBE = 0, // Counts of chars in both positions
                            _len = Math.min(buf.length - (buf.length % 2), 64); // Len is always even.

                        for (var i = 0; i < _len; i += 2) {
                            if (buf[i] === 0 && buf[i+1] !== 0) asciiCharsBE++;
                            if (buf[i] !== 0 && buf[i+1] === 0) asciiCharsLE++;
                        }

                        if (asciiCharsBE > asciiCharsLE)
                            enc = 'utf-16be';
                        else if (asciiCharsBE < asciiCharsLE)
                            enc = 'utf-16le';
                    }
                }

                return enc;
            }




            /***/ }),
        /* 92 */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";
            var Buffer = __webpack_require__(2).Buffer;

            // UTF-7 codec, according to https://tools.ietf.org/html/rfc2152
            // See also below a UTF-7-IMAP codec, according to http://tools.ietf.org/html/rfc3501#section-5.1.3

            exports.utf7 = Utf7Codec;
            exports.unicode11utf7 = 'utf7'; // Alias UNICODE-1-1-UTF-7
            function Utf7Codec(codecOptions, iconv) {
                this.iconv = iconv;
            };

            Utf7Codec.prototype.encoder = Utf7Encoder;
            Utf7Codec.prototype.decoder = Utf7Decoder;
            Utf7Codec.prototype.bomAware = true;


            // -- Encoding

            var nonDirectChars = /[^A-Za-z0-9'\(\),-\.\/:\? \n\r\t]+/g;

            function Utf7Encoder(options, codec) {
                this.iconv = codec.iconv;
            }

            Utf7Encoder.prototype.write = function(str) {
                // Naive implementation.
                // Non-direct chars are encoded as "+<base64>-"; single "+" char is encoded as "+-".
                return new Buffer(str.replace(nonDirectChars, function(chunk) {
                    return "+" + (chunk === '+' ? '' :
                            this.iconv.encode(chunk, 'utf16-be').toString('base64').replace(/=+$/, ''))
                        + "-";
                }.bind(this)));
            }

            Utf7Encoder.prototype.end = function() {
            }


            // -- Decoding

            function Utf7Decoder(options, codec) {
                this.iconv = codec.iconv;
                this.inBase64 = false;
                this.base64Accum = '';
            }

            var base64Regex = /[A-Za-z0-9\/+]/;
            var base64Chars = [];
            for (var i = 0; i < 256; i++)
                base64Chars[i] = base64Regex.test(String.fromCharCode(i));

            var plusChar = '+'.charCodeAt(0),
                minusChar = '-'.charCodeAt(0),
                andChar = '&'.charCodeAt(0);

            Utf7Decoder.prototype.write = function(buf) {
                var res = "", lastI = 0,
                    inBase64 = this.inBase64,
                    base64Accum = this.base64Accum;

                // The decoder is more involved as we must handle chunks in stream.

                for (var i = 0; i < buf.length; i++) {
                    if (!inBase64) { // We're in direct mode.
                        // Write direct chars until '+'
                        if (buf[i] == plusChar) {
                            res += this.iconv.decode(buf.slice(lastI, i), "ascii"); // Write direct chars.
                            lastI = i+1;
                            inBase64 = true;
                        }
                    } else { // We decode base64.
                        if (!base64Chars[buf[i]]) { // Base64 ended.
                            if (i == lastI && buf[i] == minusChar) {// "+-" -> "+"
                                res += "+";
                            } else {
                                var b64str = base64Accum + buf.slice(lastI, i).toString();
                                res += this.iconv.decode(new Buffer(b64str, 'base64'), "utf16-be");
                            }

                            if (buf[i] != minusChar) // Minus is absorbed after base64.
                                i--;

                            lastI = i+1;
                            inBase64 = false;
                            base64Accum = '';
                        }
                    }
                }

                if (!inBase64) {
                    res += this.iconv.decode(buf.slice(lastI), "ascii"); // Write direct chars.
                } else {
                    var b64str = base64Accum + buf.slice(lastI).toString();

                    var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.
                    base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.
                    b64str = b64str.slice(0, canBeDecoded);

                    res += this.iconv.decode(new Buffer(b64str, 'base64'), "utf16-be");
                }

                this.inBase64 = inBase64;
                this.base64Accum = base64Accum;

                return res;
            }

            Utf7Decoder.prototype.end = function() {
                var res = "";
                if (this.inBase64 && this.base64Accum.length > 0)
                    res = this.iconv.decode(new Buffer(this.base64Accum, 'base64'), "utf16-be");

                this.inBase64 = false;
                this.base64Accum = '';
                return res;
            }


            // UTF-7-IMAP codec.
            // RFC3501 Sec. 5.1.3 Modified UTF-7 (http://tools.ietf.org/html/rfc3501#section-5.1.3)
            // Differences:
            //  * Base64 part is started by "&" instead of "+"
            //  * Direct characters are 0x20-0x7E, except "&" (0x26)
            //  * In Base64, "," is used instead of "/"
            //  * Base64 must not be used to represent direct characters.
            //  * No implicit shift back from Base64 (should always end with '-')
            //  * String must end in non-shifted position.
            //  * "-&" while in base64 is not allowed.


            exports.utf7imap = Utf7IMAPCodec;
            function Utf7IMAPCodec(codecOptions, iconv) {
                this.iconv = iconv;
            };

            Utf7IMAPCodec.prototype.encoder = Utf7IMAPEncoder;
            Utf7IMAPCodec.prototype.decoder = Utf7IMAPDecoder;
            Utf7IMAPCodec.prototype.bomAware = true;


            // -- Encoding

            function Utf7IMAPEncoder(options, codec) {
                this.iconv = codec.iconv;
                this.inBase64 = false;
                this.base64Accum = new Buffer(6);
                this.base64AccumIdx = 0;
            }

            Utf7IMAPEncoder.prototype.write = function(str) {
                var inBase64 = this.inBase64,
                    base64Accum = this.base64Accum,
                    base64AccumIdx = this.base64AccumIdx,
                    buf = new Buffer(str.length*5 + 10), bufIdx = 0;

                for (var i = 0; i < str.length; i++) {
                    var uChar = str.charCodeAt(i);
                    if (0x20 <= uChar && uChar <= 0x7E) { // Direct character or '&'.
                        if (inBase64) {
                            if (base64AccumIdx > 0) {
                                bufIdx += buf.write(base64Accum.slice(0, base64AccumIdx).toString('base64').replace(/\//g, ',').replace(/=+$/, ''), bufIdx);
                                base64AccumIdx = 0;
                            }

                            buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.
                            inBase64 = false;
                        }

                        if (!inBase64) {
                            buf[bufIdx++] = uChar; // Write direct character

                            if (uChar === andChar)  // Ampersand -> '&-'
                                buf[bufIdx++] = minusChar;
                        }

                    } else { // Non-direct character
                        if (!inBase64) {
                            buf[bufIdx++] = andChar; // Write '&', then go to base64 mode.
                            inBase64 = true;
                        }
                        if (inBase64) {
                            base64Accum[base64AccumIdx++] = uChar >> 8;
                            base64Accum[base64AccumIdx++] = uChar & 0xFF;

                            if (base64AccumIdx == base64Accum.length) {
                                bufIdx += buf.write(base64Accum.toString('base64').replace(/\//g, ','), bufIdx);
                                base64AccumIdx = 0;
                            }
                        }
                    }
                }

                this.inBase64 = inBase64;
                this.base64AccumIdx = base64AccumIdx;

                return buf.slice(0, bufIdx);
            }

            Utf7IMAPEncoder.prototype.end = function() {
                var buf = new Buffer(10), bufIdx = 0;
                if (this.inBase64) {
                    if (this.base64AccumIdx > 0) {
                        bufIdx += buf.write(this.base64Accum.slice(0, this.base64AccumIdx).toString('base64').replace(/\//g, ',').replace(/=+$/, ''), bufIdx);
                        this.base64AccumIdx = 0;
                    }

                    buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.
                    this.inBase64 = false;
                }

                return buf.slice(0, bufIdx);
            }


            // -- Decoding

            function Utf7IMAPDecoder(options, codec) {
                this.iconv = codec.iconv;
                this.inBase64 = false;
                this.base64Accum = '';
            }

            var base64IMAPChars = base64Chars.slice();
            base64IMAPChars[','.charCodeAt(0)] = true;

            Utf7IMAPDecoder.prototype.write = function(buf) {
                var res = "", lastI = 0,
                    inBase64 = this.inBase64,
                    base64Accum = this.base64Accum;

                // The decoder is more involved as we must handle chunks in stream.
                // It is forgiving, closer to standard UTF-7 (for example, '-' is optional at the end).

                for (var i = 0; i < buf.length; i++) {
                    if (!inBase64) { // We're in direct mode.
                        // Write direct chars until '&'
                        if (buf[i] == andChar) {
                            res += this.iconv.decode(buf.slice(lastI, i), "ascii"); // Write direct chars.
                            lastI = i+1;
                            inBase64 = true;
                        }
                    } else { // We decode base64.
                        if (!base64IMAPChars[buf[i]]) { // Base64 ended.
                            if (i == lastI && buf[i] == minusChar) { // "&-" -> "&"
                                res += "&";
                            } else {
                                var b64str = base64Accum + buf.slice(lastI, i).toString().replace(/,/g, '/');
                                res += this.iconv.decode(new Buffer(b64str, 'base64'), "utf16-be");
                            }

                            if (buf[i] != minusChar) // Minus may be absorbed after base64.
                                i--;

                            lastI = i+1;
                            inBase64 = false;
                            base64Accum = '';
                        }
                    }
                }

                if (!inBase64) {
                    res += this.iconv.decode(buf.slice(lastI), "ascii"); // Write direct chars.
                } else {
                    var b64str = base64Accum + buf.slice(lastI).toString().replace(/,/g, '/');

                    var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.
                    base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.
                    b64str = b64str.slice(0, canBeDecoded);

                    res += this.iconv.decode(new Buffer(b64str, 'base64'), "utf16-be");
                }

                this.inBase64 = inBase64;
                this.base64Accum = base64Accum;

                return res;
            }

            Utf7IMAPDecoder.prototype.end = function() {
                var res = "";
                if (this.inBase64 && this.base64Accum.length > 0)
                    res = this.iconv.decode(new Buffer(this.base64Accum, 'base64'), "utf16-be");

                this.inBase64 = false;
                this.base64Accum = '';
                return res;
            }




            /***/ }),
        /* 93 */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";
            var Buffer = __webpack_require__(2).Buffer;

            // Single-byte codec. Needs a 'chars' string parameter that contains 256 or 128 chars that
            // correspond to encoded bytes (if 128 - then lower half is ASCII).

            exports._sbcs = SBCSCodec;
            function SBCSCodec(codecOptions, iconv) {
                if (!codecOptions)
                    throw new Error("SBCS codec is called without the data.")

                // Prepare char buffer for decoding.
                if (!codecOptions.chars || (codecOptions.chars.length !== 128 && codecOptions.chars.length !== 256))
                    throw new Error("Encoding '"+codecOptions.type+"' has incorrect 'chars' (must be of len 128 or 256)");

                if (codecOptions.chars.length === 128) {
                    var asciiString = "";
                    for (var i = 0; i < 128; i++)
                        asciiString += String.fromCharCode(i);
                    codecOptions.chars = asciiString + codecOptions.chars;
                }

                this.decodeBuf = new Buffer(codecOptions.chars, 'ucs2');

                // Encoding buffer.
                var encodeBuf = new Buffer(65536);
                encodeBuf.fill(iconv.defaultCharSingleByte.charCodeAt(0));

                for (var i = 0; i < codecOptions.chars.length; i++)
                    encodeBuf[codecOptions.chars.charCodeAt(i)] = i;

                this.encodeBuf = encodeBuf;
            }

            SBCSCodec.prototype.encoder = SBCSEncoder;
            SBCSCodec.prototype.decoder = SBCSDecoder;


            function SBCSEncoder(options, codec) {
                this.encodeBuf = codec.encodeBuf;
            }

            SBCSEncoder.prototype.write = function(str) {
                var buf = new Buffer(str.length);
                for (var i = 0; i < str.length; i++)
                    buf[i] = this.encodeBuf[str.charCodeAt(i)];

                return buf;
            }

            SBCSEncoder.prototype.end = function() {
            }


            function SBCSDecoder(options, codec) {
                this.decodeBuf = codec.decodeBuf;
            }

            SBCSDecoder.prototype.write = function(buf) {
                // Strings are immutable in JS -> we use ucs2 buffer to speed up computations.
                var decodeBuf = this.decodeBuf;
                var newBuf = new Buffer(buf.length*2);
                var idx1 = 0, idx2 = 0;
                for (var i = 0; i < buf.length; i++) {
                    idx1 = buf[i]*2; idx2 = i*2;
                    newBuf[idx2] = decodeBuf[idx1];
                    newBuf[idx2+1] = decodeBuf[idx1+1];
                }
                return newBuf.toString('ucs2');
            }

            SBCSDecoder.prototype.end = function() {
            }


            /***/ }),
        /* 94 */
        /***/ (function(module, exports) {

            "use strict";

            // Manually added data to be used by sbcs codec in addition to generated one.

            module.exports = {
                // Not supported by iconv, not sure why.
                "10029": "maccenteuro",
                "maccenteuro": {
                    "type": "_sbcs",
                    "chars": "è„›è†§è†©è„¡è†­è„°è„ºè°©è†®è†¶ç›²è†·è†¯è†°èŒ…æ®´è—•è†¸é“†è†¹è†¾è†¿è‡‡è´¸è‡ˆä¹ˆæžšçŽ«ç…¤è‡è‡Žçœ‰éˆ¥çŠ…æ¾³æ¨Žï¼¢Ñ€â‚¬â’™ç¹ç†‰î†™â”¾åŠ‰è‡‹ç¯“éˆ®çŠ‡ï¼¤î†›î‡¹îå¢¹éˆ®ãƒ„î‚åž›åžˆéˆ­æ‡ªå°è’å¯„ä¾¥ç¸é¼“å·åªå–¤å…Ÿîƒ½åž°è‰…è‰Šéˆ­å–¡î¿çƒ©â‚¬Î²çŠˆåŸ®æƒ·æš¸æ‡ªå±¸â‚¬æ’¯â‚¬æ–ºâ‚¬æº¾â‚¬æ¿ƒâ‚¬æ¨·â‚¬æ«­å°æ£…è‰’è‰›è‰œè‰ éˆ¥å…‰â‚¬å·æ«¯æŸµæ¤—çŠ«â‚¬æ°£â‚¬ç‚âˆ¨æ¯°æµ¢ä¼µã¥ãƒƒåµŸè„šä¹î€¢æ’æ–‰î‚‚î†šæ¯°î‡ºèŠ­è¿¸æ‰è¶æ¾ä¾¥æ”¾æ…Œä¼µå¯„â‘ºï¿½"
                },

                "808": "cp808",
                "ibm808": "cp808",
                "cp808": {
                    "type": "_sbcs",
                    "chars": "è¢—è¢˜è¢™è¢šè¢›è¢è¢žè¢Ÿè¢ è¢¡è¢£è¢¥è¢¦è¢§è¢¨è¢©è¢ªå°å­æ ¡è‚–å•¸ç¬‘æ•ˆæ¥”äº›æ­‡èŽéž‹åæŒŸæºé‚ªæ–œèƒè°å†™æ¢°å¸èŸ¹æ‡ˆæ³„æ³»è°¢å±‘è–ªèŠ¯é”Œéˆ»æˆ”æž“éˆ»æ’¯æ”¤éˆ¹ã‚‚æš‹éˆºâ‘©æ™¼éˆºæ›—æšŽéˆºæˆ”æ™½éˆºæ¿ƒæš…éˆºæ¶’æ”¼éˆ¹æ–ºæ•¶éˆ¹îƒ½æ•Žéˆ¹â‚¬éˆ¹å°–æšˆéˆºç†²æšéˆºæ–ºæš•éˆºï¸¹æšŠéˆºæ„¨æššéˆºÑ€æš”éˆºã‚‚æšéˆºæ¬Œæ™¿éˆºæŽ†æ™¸éˆºî‚Ÿæš˜éˆ¹æ¨·æ”²éˆ»å šæ½éˆ»å±¸æž‘éˆ»â‚¬è¤‰è¤‹è¤Œè¤è¤Žè¤è¤‘è¤”è¤•è¤–è¤—è¤˜è¤œè¤è¤žè¤Ÿè¡¼è¤¢è¢†è¤¦è¢Šè¤©è¢”è¤³æŽ³éˆ­æ«¬å°åž°éˆ©æ ¤å“éˆ»çŠ…ï¿½"
                },

                // Aliases of generated encodings.
                "ascii8bit": "ascii",
                "usascii": "ascii",
                "ansix34": "ascii",
                "ansix341968": "ascii",
                "ansix341986": "ascii",
                "csascii": "ascii",
                "cp367": "ascii",
                "ibm367": "ascii",
                "isoir6": "ascii",
                "iso646us": "ascii",
                "iso646irv": "ascii",
                "us": "ascii",

                "latin1": "iso88591",
                "latin2": "iso88592",
                "latin3": "iso88593",
                "latin4": "iso88594",
                "latin5": "iso88599",
                "latin6": "iso885910",
                "latin7": "iso885913",
                "latin8": "iso885914",
                "latin9": "iso885915",
                "latin10": "iso885916",

                "csisolatin1": "iso88591",
                "csisolatin2": "iso88592",
                "csisolatin3": "iso88593",
                "csisolatin4": "iso88594",
                "csisolatincyrillic": "iso88595",
                "csisolatinarabic": "iso88596",
                "csisolatingreek" : "iso88597",
                "csisolatinhebrew": "iso88598",
                "csisolatin5": "iso88599",
                "csisolatin6": "iso885910",

                "l1": "iso88591",
                "l2": "iso88592",
                "l3": "iso88593",
                "l4": "iso88594",
                "l5": "iso88599",
                "l6": "iso885910",
                "l7": "iso885913",
                "l8": "iso885914",
                "l9": "iso885915",
                "l10": "iso885916",

                "isoir14": "iso646jp",
                "isoir57": "iso646cn",
                "isoir100": "iso88591",
                "isoir101": "iso88592",
                "isoir109": "iso88593",
                "isoir110": "iso88594",
                "isoir144": "iso88595",
                "isoir127": "iso88596",
                "isoir126": "iso88597",
                "isoir138": "iso88598",
                "isoir148": "iso88599",
                "isoir157": "iso885910",
                "isoir166": "tis620",
                "isoir179": "iso885913",
                "isoir199": "iso885914",
                "isoir203": "iso885915",
                "isoir226": "iso885916",

                "cp819": "iso88591",
                "ibm819": "iso88591",
                "cp28591": "iso88591",
                "28591": "iso88591",

                "cyrillic": "iso88595",

                "arabic": "iso88596",
                "arabic8": "iso88596",
                "ecma114": "iso88596",
                "asmo708": "iso88596",

                "greek" : "iso88597",
                "greek8" : "iso88597",
                "ecma118" : "iso88597",
                "elot928" : "iso88597",

                "hebrew": "iso88598",
                "hebrew8": "iso88598",

                "turkish": "iso88599",
                "turkish8": "iso88599",

                "thai": "iso885911",
                "thai8": "iso885911",

                "celtic": "iso885914",
                "celtic8": "iso885914",
                "isoceltic": "iso885914",

                "tis6200": "tis620",
                "tis62025291": "tis620",
                "tis62025330": "tis620",

                "10000": "macroman",
                "10006": "macgreek",
                "10007": "maccyrillic",
                "10079": "maciceland",
                "10081": "macturkish",

                "cspc8codepage437": "cp437",
                "cspc775baltic": "cp775",
                "cspc850multilingual": "cp850",
                "cspcp852": "cp852",
                "cspc862latinhebrew": "cp862",
                "cpgr": "cp869",

                "msee": "cp1250",
                "mscyrl": "cp1251",
                "msansi": "cp1252",
                "msgreek": "cp1253",
                "msturk": "cp1254",
                "mshebr": "cp1255",
                "msarab": "cp1256",
                "winbaltrim": "cp1257",

                "cp20866": "koi8r",
                "20866": "koi8r",
                "ibm878": "koi8r",
                "cskoi8r": "koi8r",

                "cp21866": "koi8u",
                "21866": "koi8u",
                "ibm1168": "koi8u",

                "strk10482002": "rk1048",

                "tcvn5712": "tcvn",
                "tcvn57121": "tcvn",

                "gb198880": "iso646cn",
                "cn": "iso646cn",

                "csiso14jisc6220ro": "iso646jp",
                "jisc62201969ro": "iso646jp",
                "jp": "iso646jp",

                "cshproman8": "hproman8",
                "r8": "hproman8",
                "roman8": "hproman8",
                "xroman8": "hproman8",
                "ibm1051": "hproman8",

                "mac": "macintosh",
                "csmacintosh": "macintosh",
            };



            /***/ }),
        /* 95 */
        /***/ (function(module, exports) {

            "use strict";

            // Generated data for sbcs codec. Don't edit manually. Regenerate using generation/gen-sbcs.js script.
            module.exports = {
                "437": "cp437",
                "737": "cp737",
                "775": "cp775",
                "850": "cp850",
                "852": "cp852",
                "855": "cp855",
                "856": "cp856",
                "857": "cp857",
                "858": "cp858",
                "860": "cp860",
                "861": "cp861",
                "862": "cp862",
                "863": "cp863",
                "864": "cp864",
                "865": "cp865",
                "866": "cp866",
                "869": "cp869",
                "874": "windows874",
                "922": "cp922",
                "1046": "cp1046",
                "1124": "cp1124",
                "1125": "cp1125",
                "1129": "cp1129",
                "1133": "cp1133",
                "1161": "cp1161",
                "1162": "cp1162",
                "1163": "cp1163",
                "1250": "windows1250",
                "1251": "windows1251",
                "1252": "windows1252",
                "1253": "windows1253",
                "1254": "windows1254",
                "1255": "windows1255",
                "1256": "windows1256",
                "1257": "windows1257",
                "1258": "windows1258",
                "28592": "iso88592",
                "28593": "iso88593",
                "28594": "iso88594",
                "28595": "iso88595",
                "28596": "iso88596",
                "28597": "iso88597",
                "28598": "iso88598",
                "28599": "iso88599",
                "28600": "iso885910",
                "28601": "iso885911",
                "28603": "iso885913",
                "28604": "iso885914",
                "28605": "iso885915",
                "28606": "iso885916",
                "windows874": {
                    "type": "_sbcs",
                    "chars": "éˆ§î„Šæ‹·é”Ÿæ–¤æ‹·é”Ÿè§£â‚¬ï¸¼æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·éˆ¥æ¨·â‚¬æ¬Œâ‚¬æº¾â‚¬æ¿ƒâ‚¬â‘©â‚¬æ’¯â‚¬æ—“æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿé“°çŠ©ç«µå–”å‚•ç«·å–”å‹¦ç«»å–”å—‹ç«¾å–”å —ç¬å–”å¨»ç¬…å–”å±¶ç¬‰å–”åºŽç¬å–”æ„¢ç¬å–”æŽ„ç¬“å–”æ–·ç¬—å–”æ ¢ç¬šå–”æ¨´ç¬å–”æ°žç¬¡å–”æº¹ç¬£å–”ç‚§ç¬©å–”çŠ©æµ®å–”â‘§ç¦å–”ã‚€å¼—å–”ï¸µæŠšå–”ã„ ä¿¯å–”î€¿æ–§å–”îƒ»è…‘å–”î†·è…å–”ç­å‰¯å–”ä¾§èµ‹å–”è„†å‚…å–”å¤šé˜œå–”è†è…¹å–”çŒ´æ‹·é”Ÿæ–¤æ‹·é”Ÿæ´ç¼šå–™â‚¬å–™ä½®ç®“å–™å†Ÿç®˜å–™å‘§ç®šå–™å›™ç®žå–™å¤ƒç® å–™å¬¥ç®¤å–™åµ¿ç®®å–™å¿‡ç®°å–™æˆ‰ç®³å–™æ’ªç®¶å–™æ›•ç®¹å–™æ¤¸ç®»å–™æ¬Šç®½å–™æ¶³æ‹·é”Ÿæ–¤æ‹·é”Ÿï¿½"
                },
                "win874": "windows874",
                "cp874": "windows874",
                "windows1250": {
                    "type": "_sbcs",
                    "chars": "éˆ§î„Šæ‹·éˆ¥æ°¾æ‹·éˆ¥ç‚©â‚¬ï¸¹â‚¬çŠ«â‚¬â˜…æ‹·éˆ¥èŠ­çŠ«â‚¬å¤æ¯°ã¥è„šç™¸æ‹·éˆ¥æ¨·â‚¬æ¬Œâ‚¬æº¾â‚¬æ¿ƒâ‚¬â‘©â‚¬æ’¯â‚¬æ—“æ‹·éˆ©â‘´â™€â‚¬å·æµ¥ãƒ…ä¹éƒçŠ“å›æ¨‘ä¼®ã¤åŠ¼Î²îž îŸŠâ”¡çºî¿îƒî„»î†œå®¦å¥¥å½¼æµ¥å®ç»°å¾·å µä»¿æ”¹åªç†‰è’å‰¿æ¾žä¹å¯‚æ–†ä¼±å°å¯å‹€é¼“å–¢åš¹å±†å£žæ¨å¬†æ¯­åµœå¹ å¹ æƒ»å…£åš¸æ’æ–‰æƒ·æŸ®æ¤—æ¨‘î†šæ¯°æ‡Šæºæ¾Ÿâ’šç†æš¶âˆ¶â’›å… ã¤è€—åš¸îž¢åµœâ” æ«­î‚æµ¢î„¼î†›å¾žæ‡ªå‹åŸ«è¶ç£æ‡¨ç¹æ”¾æ«¯î‡¸å·æ³µæµŽè„šï¼«ï¿½"
                },
                "win1250": "windows1250",
                "cp1250": "windows1250",
                "windows1251": {
                    "type": "_sbcs",
                    "chars": "è¢€è¢ƒéˆ¥æ°€æ’¯â‚¬ç‚©â‚¬ï¸¹â‚¬çŠ«â‚¬â™€å“éˆ¥é¶å¤†â‚¬å‰å¨¦å±å¬“å¾°æŽ†â‚¬æ¨·â‚¬æ¬Œâ‚¬æº¾â‚¬æ¿ƒâ‚¬â‘©â‚¬æ’¯â‚¬æ—“æ‹·éˆ©â’€æ¬Œâ‚¬è²‰æ°€æº æµ¹ç†‰çŠ˜å¹¯ç‚åŸªã²æƒµÎ²îž®ä¼®â”¬åŠ¼î¿îƒî„»î†§åš¶å¥¥æ¯™å–²æ †æ‡§å¾·å µè´¹æˆ”å‰¸è¤¦ç¦„è¤¬è¢‡è¤§è¤©è¢—è¢˜è¢™è¢šè¢›è¢è¢žè¢Ÿè¢ è¢¡è¢£è¢¥è¢¦è¢§è¢¨è¢©è¢ªå°å­æ ¡è‚–å•¸ç¬‘æ•ˆæ¥”äº›æ­‡èŽéž‹åæŒŸæºé‚ªæ–œèƒè°å†™æ¢°å¸èŸ¹æ‡ˆæ³„æ³»è°¢å±‘è–ªèŠ¯é”Œè¤‰è¤‹è¤Œè¤è¤Žè¤è¤‘è¤”è¤•è¤–è¤—è¤˜è¤œè¤è¤žè¤Ÿ"
                },
                "win1251": "windows1251",
                "cp1251": "windows1251",
                "windows1252": {
                    "type": "_sbcs",
                    "chars": "éˆ§î„Šæ‹·éˆ¥æ¯±æŽ†â‚¬ç‚©â‚¬ï¸¹â‚¬çŠ«â‚¬âˆ·å—â‚¬èŠ­çŠ«â‚¬å¤æŽžæ‹·æ²¤é”Ÿæ–¤æ‹·éˆ¥æ¨·â‚¬æ¬Œâ‚¬æº¾â‚¬æ¿ƒâ‚¬â‘©â‚¬æ’¯â‚¬æ–”æº¾åŠ‰æ‹§éˆ¥å·æ“„æ‹·å•ªé¸¥è½éš†åž„æ‹¢é™‡æ¥¼å¨„æ‚ç¯“æ¼é™‹èŠ¦å¢é¢…åºç‚‰æŽ³å¤è™é²éº“ç¢Œéœ²è·¯èµ‚é¹¿æ½žç¦„å½•é™†æˆ®é©´è„Œè„•è„—è„™è„›è„œè„è„Ÿè„ è„¡è„¢è„£è„¤è„¥è„¦è„§è„¨è„©è„ªè„«è„­è„®è„°è„³è„´è„µè„·è„¹è„ºè„»è„¼è„½è„¿è°©èŠ’èŒ«ç›²æ°“å¿™èŽ½çŒ«èŒ…é”šæ¯›çŸ›é“†å¯èŒ‚å†’å¸½è²Œè´¸ä¹ˆçŽ«æžšæ¢…é…¶éœ‰ç…¤æ²¡çœ‰åª’é•æ¯"
                },
                "win1252": "windows1252",
                "cp1252": "windows1252",
                "windows1253": {
                    "type": "_sbcs",
                    "chars": "éˆ§î„Šæ‹·éˆ¥æ¯±æŽ†â‚¬ç‚©â‚¬ï¸¹â‚¬çŠ«â‚¬â˜…æ‹·éˆ¥å¸®æ‹·éˆ¥ç™¸æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·éˆ¥æ¨·â‚¬æ¬Œâ‚¬æº¾â‚¬æ¿ƒâ‚¬â‘©â‚¬æ’¯â‚¬æ—“æ‹·éˆ©î®æ‹·éˆ¥çŒ´æ‹·é”Ÿæ–¤æ‹·é”Ÿé“°çŠ–å‘‚å–¡ï¼¢ã¢ãƒ‚Î²îž îŸŠâ•‹æ‹·èŠ¦å¢é¢…åºéˆ¥æšµå¥¥ç”­çŒœæ¾„åŠ¼å¾·å µè‚ºåŸ¼å£©å¨æ™ƒå±„è½¿å¹¬å¾«æ„‡æ‡³æ¨æ’æ–˜æ›ƒæ æ¤¢æ¨œæ«¸æ¯¼æµ³æº›æ¾ªç‚ç†šçŠ–â˜…æ‹·å±éŸ¦è¿æ¡…å›´å”¯æƒŸä¸ºæ½ç»´è‹‡èŽå§”ä¼Ÿä¼ªå°¾çº¬æœªè”šå‘³ç•èƒƒå–‚é­ä½æ¸­è°“å°‰æ…°èŸºèŸ»èŸ¼èŸ½èŸ¿è €è è ‚è „è …è †è ‡è ˆè ‰è ‹é”Ÿï¿½"
                },
                "win1253": "windows1253",
                "cp1253": "windows1253",
                "windows1254": {
                    "type": "_sbcs",
                    "chars": "éˆ§î„Šæ‹·éˆ¥æ¯±æŽ†â‚¬ç‚©â‚¬ï¸¹â‚¬çŠ«â‚¬âˆ·å—â‚¬èŠ­çŠ«â‚¬å¤æŽžæ‹·é”Ÿæ–¤æ‹·é”Ÿè§£â‚¬æ¨·â‚¬æ¬Œâ‚¬æº¾â‚¬æ¿ƒâ‚¬â‘©â‚¬æ’¯â‚¬æ–”æº¾åŠ‰æ‹§éˆ¥å·æ“„æ‹·é”Ÿè„šå˜ŽçŠ…Ã·â’™ï¼¢ã¢ãƒ‚Î²îž îŸŠâ”žî€¡î¿îƒî„»î†™î‡·å¥¥ç”­çŒœé™ˆç»°å¾·å µä»¿å˜Žå­¤éƒå®¦æ‚¸é“°éŸ­æ£µâ‚¬è„•è„—è„™è„›è„œè„è„Ÿè„ è„¡è„¢è„£è„¤è„¥è„¦è„§è‡‘è„©è„ªè„«è„­è„®è„°è„³è„´è„µè„·è„¹è„ºé™Œè‰¦è„½è„¿è°©èŠ’èŒ«ç›²æ°“å¿™èŽ½çŒ«èŒ…é”šæ¯›çŸ›é“†å¯èŒ‚è‡’å¸½è²Œè´¸ä¹ˆçŽ«æžšæ¢…é…¶éœ‰ç…¤æ²¡çœ‰è°‹è‰§æ¯"
                },
                "win1254": "windows1254",
                "cp1254": "windows1254",
                "windows1255": {
                    "type": "_sbcs",
                    "chars": "éˆ§î„Šæ‹·éˆ¥æ¯±æŽ†â‚¬ç‚©â‚¬ï¸¹â‚¬çŠ«â‚¬âˆ·å—â‚¬å¸®æ‹·éˆ¥ç™¸æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·éˆ¥æ¨·â‚¬æ¬Œâ‚¬æº¾â‚¬æ¿ƒâ‚¬â‘©â‚¬æ’¯â‚¬æ–”æº¾åŠ‰é”Ÿè§£â‚¬çŒ´æ‹·é”Ÿæ–¤æ‹·é”Ÿé“°çŠ…Ã·â’™ï½‚å‘æ¥¼å¨„æ‚ç¯“æ¼è„³èŠ¦å¢é¢…åºç‚‰æŽ³å¤è™é²éº“ç¢Œéœ²è·¯èµ‚é¹¿æ¢…ç¦„å½•é™†æˆ®é©´èŒç›´æ¤æ®–æ‰§å€¼ä¾„å€æŒ‡æ­¢é”Ÿè¡—æ¢è´¾è¡—å±€å­”â‚¬è®ˆè®‰è®Šè£…å¦†æ’žå£®çŠ¶é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿé˜¶æ„–æ‡½æµæ’Ÿæ–ªæ›Œæ •æ¤¬æ¨§æ¬æ°‰æ¶€æº©æ¾´ç‚žç†¥çŠ âˆ½â’†ï¼·ã·ãƒ—ÏˆÑ‘ã„—â”³îŽæ‹·é”Ÿè§£â‚¬åº˜â‚¬å¿¥æ‹·"
                },
                "win1255": "windows1255",
                "cp1255": "windows1255",
                "windows1256": {
                    "type": "_sbcs",
                    "chars": "éˆ§îƒ´é”¯â‚¬æ¯±æŽ†â‚¬ç‚©â‚¬ï¸¹â‚¬çŠ«â‚¬âˆ·å—â‚¬ç™¾å…‰â‚¬å¤æ¼å—‚æ¨¬å îˆ—â‚¬æ¨·â‚¬æ¬Œâ‚¬æº¾â‚¬æ¿ƒâ‚¬â‘©â‚¬æ’¯â‚¬æ–±â”¾åŠ‰è¶¹éˆ¥å·æ’¯â‚¬å±¸â‚¬åµ¹éƒçŠ¡å±„â’™ï¼¢ã¢ãƒ‚Î²îž îŸŠâ”¶éŸ­î¿îƒî„»î†™î‡·å¥¥ç”­çŒœé™ˆç»°å¾·å µä»¿å˜Žå…³æµ¡å®¦æ‚¸é“°çŸ©ç†ªä½–âˆâ’‡ï¼¸ã¸ãƒ˜Ï‰Ð¶ã„˜â”´î€·î‚•îƒ³î…‘î†¯îˆæŸå¿…è—æ± ç°‡åœ°ç¹æ¤®åŸè‚›å…³å˜¿â‚¬è³®è³¯è³°è„¿è³±èŠ’è³²è³³è³´è³µèŽ½çŒ«èŒ…é”šæ¯›è³¶è³·å¯èŒ‚è³¸è³¹è³ºè³»ä¹ˆè³¼è³½æ¢…è³¾éœ‰è³¿æ²¡çœ‰éˆ¥åº˜â‚¬å¾¾ï¿½"
                },
                "win1256": "windows1256",
                "cp1256": "windows1256",
                "windows1257": {
                    "type": "_sbcs",
                    "chars": "éˆ§î„Šæ‹·éˆ¥æ°¾æ‹·éˆ¥ç‚©â‚¬ï¸¹â‚¬çŠ«â‚¬â˜…æ‹·éˆ¥å¸®æ‹·éˆ¥ç™¸æ‹·ç¯“è—èµ‚é”Ÿè§£â‚¬æ¨·â‚¬æ¬Œâ‚¬æº¾â‚¬æ¿ƒâ‚¬â‘©â‚¬æ’¯â‚¬æ—“æ‹·éˆ©î®æ‹·éˆ¥çŒ´æ‹·ç‚‰è—³é”Ÿé“°ç‹…æ‹·åž„æ‹¢é™‡é”Ÿé“°Î²îž¡æ¨Žâ”¡æŸ­î¿îƒî„»î†šå–¡å¥¥ç”­çŒœé™ˆç»°å¾·å µè®¿å˜Žå¤æ¤”å®¦æ‚¸é“°ä¹…Î´å‹€î†›â‚¬è†¯è„›è„œè‡‰è†¾è†¶è„¡æ®´è‡‡è˜‘äº©èŽ«å¹•è‰©è‰ƒè‰†è„«è‰‘è„®è„°è„³æŒªè‰è‰¢å¼„è„ºå‘•æ²¤è„½è†®å¯žè†©è†°ç›²æ°“è‡‹è†¿è†·èŒ…è—•è‡ˆæ¨¡å§†å¢¨å‹Ÿæ‹§è‰…è‰ˆè´¸è‰’çŽ«æžšæ¢…æ‡¦è‰‚è‰£å¥´çœ‰å¶å•ªè—±"
                },
                "win1257": "windows1257",
                "cp1257": "windows1257",
                "windows1258": {
                    "type": "_sbcs",
                    "chars": "éˆ§î„Šæ‹·éˆ¥æ¯±æŽ†â‚¬ç‚©â‚¬ï¸¹â‚¬çŠ«â‚¬âˆ·å—â‚¬å¸®æ‹·éˆ¥å¤æŽžæ‹·é”Ÿæ–¤æ‹·é”Ÿè§£â‚¬æ¨·â‚¬æ¬Œâ‚¬æº¾â‚¬æ¿ƒâ‚¬â‘©â‚¬æ’¯â‚¬æ–”æº¾åŠ‰é”Ÿè§£â‚¬å·æ“„æ‹·é”Ÿè„šå˜ŽçŠ…Ã·â’™ï¼¢ã¢ãƒ‚Î²îž îŸŠâ”žî€¡î¿îƒî„»î†™î‡·å¥¥ç”­çŒœé™ˆç»°å¾·å µä»¿å˜Žå­¤éƒå®¦æ‚¸é“°éŸ­æ£µâ‚¬è„•è„—è†«è„›è„œè„è„Ÿè„ è„¡è„¢è„£è™è„¥è„¦è„§è†¼è„©è™Šè„«è„­èŒ½è„°è„³è„´è„µè„·è„¹è„ºæ¼‚è™„è„½è„¿è°©èŠ’è†¬ç›²æ°“å¿™èŽ½çŒ«èŒ…é”šæ¯›è™‚é“†å¯èŒ‚è†½å¸½è¹‹è´¸ä¹ˆå•¤æžšæ¢…é…¶éœ‰ç…¤æ²¡çœ‰ç“¢éˆ§î‚€ï¿½"
                },
                "win1258": "windows1258",
                "cp1258": "windows1258",
                "iso88592": {
                    "type": "_sbcs",
                    "chars": "è™è›èœèèžèŸè è¡è¢è£è¤è¥è¦è§è¨è«è¬è­è®è¯è°è²è³è´èµè¶è·è¸è¹èºè»è¼è½è†­è—°è‰é™‡æ…•è‰¢æ‚ç¯“è‰©è‰¦æ‰­æ®´é¢…æ²¤å‘•æŽ³è†®è—³è‰‚éº“æœ¨è‰£è—èµ‚æ‹§è‰§é’®è—•è—µå•ªå¶è‰›è„•è„—è†«è„›å¢“è†¯è„Ÿè†¶è„¡è‡‰è„£è‡è„¥è„¦è†¸è†¼è‰ƒè‰Šè„«è„­è‰•è„°è„³è‰ å¥³è„·è™è„ºè„»æ³žè„½è‰œè°©èŠ’è†¬ç›²æš®è†°èŽ½è†·èŒ…è‡‹æ¯›è‡Žé“†å¯è†¹è†½è‰…è‰Œè´¸ä¹ˆè‰–æžšæ¢…è‰¡æš–ç…¤ç–Ÿçœ‰åª’ç‰›è—±"
                },
                "cp28592": "iso88592",
                "iso88593": {
                    "type": "_sbcs",
                    "chars": "è™è›èœèèžèŸè è¡è¢è£è¤è¥è¦è§è¨è«è¬è­è®è¯è°è²è³è´èµè¶è·è¸è¹èºè»è¼è½æ‘©è—°æ‹¢é™‡é”Ÿä¾¥ã¢îž îŸŒèŠ­ç½ç½ç»°î…¨æ‹·å‘•æŽ³é­”è™é²éº“ç¢Œç£¨è·¯èµ‚è°‹è‰§è‡’ç‰¡é™†é”Ÿè„šæµŽâ‚¬è„•è„—é”ŸçŸ«å‹€å¨”åŸ«åš¸åŸ«å£å¨’å¬…å±†åµœå¹Ÿå¿¥æ‹·è„©è„ªè„«è„­è‡“è„°è„³è‡è„µè„·è„¹è„ºåŠªè‰¤è„½è„¿è°©èŠ’é”ŸçŸ«ã¤å¬†å£îž¡îŸ‹â”Ÿî€¢î‚€îƒžî„¼î†šîˆ¤æ‹·å¸½è²Œè´¸ä¹ˆæ‘¹æžšæ¢…è‡éœ‰ç…¤æ²¡çœ‰æ€’è‰¥è—±"
                },
                "cp28593": "iso88593",
                "iso88594": {
                    "type": "_sbcs",
                    "chars": "è™è›èœèèžèŸè è¡è¢è£è¤è¥è¦è§è¨è«è¬è­è®è¯è°è²è³è´èµè¶è·è¸è¹èºè»è¼è½è†­æ¯è‰é™‡æŠ¹å¹•æ‚ç¯“è‰©è†¾è˜‘çº½é¢…æ²¤ç‚‰æŽ³è†®è—³è‰žéº“æœ«å‹Ÿè—èµ‚æ‹§è†¿æ¨¡è„“è‰Žå•ªè‰è†§è„•è„—è„™è„›è„œè„æ¼ è†¶è„¡è‡‰è„£è‡‡è„¥è„¦èŽ«è†¼è‰†è‰‘äº©è„­è„®è„°è„³è„´æŒªè„·è„¹è„ºæµ“å¼„è„½è†©è°©èŠ’èŒ«ç›²æ°“å¿™å¯žè†·èŒ…è‡‹æ¯›è‡ˆé“†å¯å¢¨è†½è‰ˆè‰’å§†ä¹ˆçŽ«æžšæ¢…é…¶æ‡¦ç…¤æ²¡çœ‰å†œå¥´è—±"
                },
                "cp28594": "iso88594",
                "iso88595": {
                    "type": "_sbcs",
                    "chars": "è™è›èœèèžèŸè è¡è¢è£è¤è¥è¦è§è¨è«è¬è­è®è¯è°è²è³è´èµè¶è·è¸è¹èºè»è¼è½è¡¼è¢€è¢ƒè¢†è¢‡è¢‰è¢Šè¢Œè¢Žè¢è¢è¢‘é¢…è¢”è¢•è¢—è¢˜è¢™è¢šè¢›è¢è¢žè¢Ÿè¢ è¢¡è¢£è¢¥è¢¦è¢§è¢¨è¢©è¢ªå°å­æ ¡è‚–å•¸ç¬‘æ•ˆæ¥”äº›æ­‡èŽéž‹åæŒŸæºé‚ªæ–œèƒè°å†™æ¢°å¸èŸ¹æ‡ˆæ³„æ³»è°¢å±‘è–ªèŠ¯é”Œè¤‰è¤‹è¤Œè¤è¤Žè¤è¤‘è¤”è¤•è¤–è¤—è¤˜è¤œè¤è¤žè¤Ÿéˆ©æ „æ‡·æ¬æ’—æ–žæ›†æ „æ¤¦æ¨ æ«»æ°€æµ¹æºŒÐ°ç‚‘ï¿½"
                },
                "cp28595": "iso88595",
                "iso88596": {
                    "type": "_sbcs",
                    "chars": "è™è›èœèèžèŸè è¡è¢è£è¤è¥è¦è§è¨è«è¬è­è®è¯è°è²è³è´èµè¶è·è¸è¹èºè»è¼è½é”Ÿæ–¤æ‹·é”Ÿé“°ã‚æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·è²™é¢…é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæˆªæ¶³æ‹·é”Ÿæ–¤æ‹·è²¬é”Ÿæˆªâˆâ’‡ï¼¸ã¸ãƒ˜Ï‰Ð¶ã„˜â”´î€·î‚•îƒ³î…‘î†¯îˆæŸå¿…è—æ± ç°‡åœ°æ•¦åŸè‚›å…³çŒ´æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·è³­è³®è³¯è³°è³±è³²è³³è³´è³µè³¶è³·è³¸è³¹è³ºè³»è³¼è³½è³¾è³¿é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿï¿½"
                },
                "cp28596": "iso88596",
                "iso88597": {
                    "type": "_sbcs",
                    "chars": "è™è›èœèèžèŸè è¡è¢è£è¤è¥è¦è§è¨è«è¬è­è®è¯è°è²è³è´èµè¶è·è¸è¹èºè»è¼è½éˆ¥æ¨·â‚¬æ«¬ï½‚å“éˆ§î‡·Î²îž îŸŠâ”©éƒî¿îƒî…¨æ‹·éˆ¥æšµå¥¥ç”­çŒœæ¾„å‹Žå‘‚å–¡è‚ºåŸ¼å£©å¨æ™ƒå±„è½¿å¹¬å¾«æ„‡æ‡³æ¨æ’æ–˜æ›ƒæ æ¤¢æ¨œæ«¸æ¯¼æµ³æº›æ¾ªç‚ç†šçŠ–â˜…æ‹·å±éŸ¦è¿æ¡…å›´å”¯æƒŸä¸ºæ½ç»´è‹‡èŽå§”ä¼Ÿä¼ªå°¾çº¬æœªè”šå‘³ç•èƒƒå–‚é­ä½æ¸­è°“å°‰æ…°èŸºèŸ»èŸ¼èŸ½èŸ¿è €è è ‚è „è …è †è ‡è ˆè ‰è ‹é”Ÿï¿½"
                },
                "cp28597": "iso88597",
                "iso88598": {
                    "type": "_sbcs",
                    "chars": "è™è›èœèèžèŸè è¡è¢è£è¤è¥è¦è§è¨è«è¬è­è®è¯è°è²è³è´èµè¶è·è¸è¹èºè»è¼è½é”Ÿé“°â’™ï¼¢ã¢ãƒ‚Î²îž îŸŠâ”Ÿæ¤”î¿îƒî„»î†™î‡·å¥¥ç”­çŒœé™ˆç»°å¾·å µä»¿å˜Žå§‘ä»¿å®¦æ‚¸é“°æ’…æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿè§£â‚¬æ¤¬æ„–æ‡½æµæ’Ÿæ–ªæ›Œæ •æ¤¬æ¨§æ¬æ°‰æ¶€æº©æ¾´ç‚žç†¥çŠ âˆ½â’†ï¼·ã·ãƒ—ÏˆÑ‘ã„—â”³îŽæ‹·é”Ÿè§£â‚¬åº˜â‚¬å¿¥æ‹·"
                },
                "cp28598": "iso88598",
                "iso88599": {
                    "type": "_sbcs",
                    "chars": "è™è›èœèèžèŸè è¡è¢è£è¤è¥è¦è§è¨è«è¬è­è®è¯è°è²è³è´èµè¶è·è¸è¹èºè»è¼è½éš†åž„æ‹¢é™‡æ¥¼å¨„æ‚ç¯“æ¼é™‹èŠ¦å¢é¢…åºç‚‰æŽ³å¤è™é²éº“ç¢Œéœ²è·¯èµ‚é¹¿æ½žç¦„å½•é™†æˆ®é©´è„Œè„•è„—è„™è„›è„œè„è„Ÿè„ è„¡è„¢è„£è„¤è„¥è„¦è„§è‡‘è„©è„ªè„«è„­è„®è„°è„³è„´è„µè„·è„¹è„ºé™Œè‰¦è„½è„¿è°©èŠ’èŒ«ç›²æ°“å¿™èŽ½çŒ«èŒ…é”šæ¯›çŸ›é“†å¯èŒ‚è‡’å¸½è²Œè´¸ä¹ˆçŽ«æžšæ¢…é…¶éœ‰ç…¤æ²¡çœ‰è°‹è‰§æ¯"
                },
                "cp28599": "iso88599",
                "iso885910": {
                    "type": "_sbcs",
                    "chars": "è™è›èœèèžèŸè è¡è¢è£è¤è¥è¦è§è¨è«è¬è­è®è¯è°è²è³è´èµè¶è·è¸è¹èºè»è¼è½è†­è†¾è˜‘èŽ«æŠ¹äº©æ‚å¹•è†¼è‰©çº½æ²¤é¢…å¼„è‰ŽæŽ³è†®è†¿æ¨¡å¢¨æœ«å§†è·¯å‹Ÿè†½æ‹§è„“å•ªéˆ¥æš¸î‚‚å¬†â‚¬è„•è„—è„™è„›è„œè„æ¼ è†¶è„¡è‡‰è„£è‡‡è„¥è„¦è„§è„¨è‰†è‰‘è„«è„­è„®è„°æµ“è„´æŒªè„·è„¹è„ºè„»è„¼è„½è†©è°©èŠ’èŒ«ç›²æ°“å¿™å¯žè†·èŒ…è‡‹æ¯›è‡ˆé“†å¯èŒ‚å†’è‰ˆè‰’è´¸ä¹ˆçŽ«æžšå†œé…¶æ‡¦ç…¤æ²¡çœ‰åª’é•æ¯"
                },
                "cp28600": "iso885910",
                "iso885911": {
                    "type": "_sbcs",
                    "chars": "è™è›èœèèžèŸè è¡è¢è£è¤è¥è¦è§è¨è«è¬è­è®è¯è°è²è³è´èµè¶è·è¸è¹èºè»è¼è½å–”ä½®ç«¶å–”å†Ÿç«¸å–”å‘§ç«¼å–”å›™ç¬€å–”å¤ƒç¬‚å–”å¬¥ç¬‡å–”åµ¿ç¬Œå–”å¿‡ç¬Žå–”æˆ‰ç¬’å–”æ’ªç¬–å–”æ›•ç¬˜å–”æ¤¸ç¬œå–”æ¬Šç¬Ÿå–”æ¶ç¬¢å–”æ¾¿ç¬§å–”ç†°ç¬­å–”âˆ´æ¶ªå–”ï½€è¢±å–”ãƒ ç”«å–”Ð¾è¾…å–”â”¼é‡œå–”î‚è„¯å–”î…™åºœå–”îˆ•èµ´å–”ç¼–è¦†å–”èµ¤å¤å–”æŽ‚ä»˜å–”ç²ªçˆ¶å–”çŒè´Ÿé”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·å–”è‹¦ç®‘å–™ä½®ç®“å–™å†Ÿç®˜å–™å‘§ç®šå–™å›™ç®žå–™å¤ƒç® å–™å¬¥ç®¤å–™åµ¿ç®®å–™å¿‡ç®°å–™æˆ‰ç®³å–™æ’ªç®¶å–™æ›•ç®¹å–™æ¤¸ç®»å–™æ¬Šç®½å–™æ¶³æ‹·é”Ÿæ–¤æ‹·é”Ÿï¿½"
                },
                "cp28601": "iso885911",
                "iso885913": {
                    "type": "_sbcs",
                    "chars": "è™è›èœèèžèŸè è¡è¢è£è¤è¥è¦è§è¨è«è¬è­è®è¯è°è²è³è´èµè¶è·è¸è¹èºè»è¼è½éˆ¥æ¾›â’™ï¼¢ã‚‚â‚¬çºÎ²îž¡æ¨Žâ”¡æŸ­î¿îƒî„»î†šå–¡å¥¥ç”­çŒœæ–¥â‚¬æºŒå¾·å µè®¿å˜Žå¤æ¤”å®¦æ‚¸é“°ä¹…Î´å‹€î†›â‚¬è†¯è„›è„œè‡‰è†¾è†¶è„¡æ®´è‡‡è˜‘äº©èŽ«å¹•è‰©è‰ƒè‰†è„«è‰‘è„®è„°è„³æŒªè‰è‰¢å¼„è„ºå‘•æ²¤è„½è†®å¯žè†©è†°ç›²æ°“è‡‹è†¿è†·èŒ…è—•è‡ˆæ¨¡å§†å¢¨å‹Ÿæ‹§è‰…è‰ˆè´¸è‰’çŽ«æžšæ¢…æ‡¦è‰‚è‰£å¥´çœ‰å¶å•ªéˆ¥ï¿½"
                },
                "cp28603": "iso885913",
                "iso885914": {
                    "type": "_sbcs",
                    "chars": "è™è›èœèèžèŸè è¡è¢è£è¤è¥è¦è§è¨è«è¬è­è®è¯è°è²è³è´èµè¶è·è¸è¹èºè»è¼è½å²£å‚–ç«·æ‹¢è†´è†µå²£å¨Ð¿ç°šæ¼å²·å‚–ç¬…å³„çŒœî„»î†œç¾”ç¬§å²£ç†ŒçŠ‡â™‚ç®‘å³ä¼®å¤ºç®¹å²·ä½±ç®ºå²·å†¡ç¯„å³„ç¿…ç°žå²·å‘©åŸ‚è„Œè„•è„—è„™è„›è„œè„è„Ÿè„ è„¡è„¢è„£è„¤è„¥è„¦è„§ç³¯è„©è„ªè„«è„­è„®è„°å³î€¢æ¨æ«­æ¯­æµ¢æºæ¾Ÿç¹ç†‹çŠ†âˆ¶â’šï¼£ã£ãƒƒÎ³îž¡îŸ‹â”Ÿî€¢î‚€îƒžî„¼î†šî‡ºå¾—æ³µè£è¶ç–µå¾—å¤ºå…¬é…¶éœ‰ç…¤æ²¡çœ‰åª’æ¬§æ¯"
                },
                "cp28604": "iso885914",
                "iso885915": {
                    "type": "_sbcs",
                    "chars": "è™è›èœèèžèŸè è¡è¢è£è¤è¥è¦è§è¨è«è¬è­è®è¯è°è²è³è´èµè¶è·è¸è¹èºè»è¼è½éš†åž„æ‹¢éˆ§îƒãƒ…çŠ…îž£Ã·â”žî€¡î¿îƒî„»î†™î‡·å¥¥ç”­çŒœæ’‘é“°å¾·å µæ”¾éŸ­å­¤éƒæ…Œæ™æ’†å˜Žæ£µâ‚¬è„•è„—è„™è„›è„œè„è„Ÿè„ è„¡è„¢è„£è„¤è„¥è„¦è„§è„¨è„©è„ªè„«è„­è„®è„°è„³è„´è„µè„·è„¹è„ºè„»è„¼è„½è„¿è°©èŠ’èŒ«ç›²æ°“å¿™èŽ½çŒ«èŒ…é”šæ¯›çŸ›é“†å¯èŒ‚å†’å¸½è²Œè´¸ä¹ˆçŽ«æžšæ¢…é…¶éœ‰ç…¤æ²¡çœ‰åª’é•æ¯"
                },
                "cp28605": "iso885915",
                "iso885916": {
                    "type": "_sbcs",
                    "chars": "è™è›èœèèžèŸè è¡è¢è£è¤è¥è¦è§è¨è«è¬è­è®è¯è°è²è³è´èµè¶è·è¸è¹èºè»è¼è½è†­è†®è‰éˆ§îƒ½â‚¬ç‚çŠ…îž£Ã·â”¤æ¨Žî‚‚å­¤î„¾å·å®¦å¥¥è¹¦å±Œå±è§£â‚¬æ¾›å µæ”¾ç¸åµ¢æ«¬æ…Œæ™æ’†æ¦‚æµŽâ‚¬è„•è„—è†«è„›è†¯è„è„Ÿè„ è„¡è„¢è„£è„¤è„¥è„¦è„§è†¼è‰ƒè„ªè„«è„­è‰•è„°è‰¢è™è„µè„·è„¹è„ºè‡‰è‘°è„½è„¿è°©èŠ’è†¬ç›²è†°å¿™èŽ½çŒ«èŒ…é”šæ¯›çŸ›é“†å¯èŒ‚è†½è‰…è²Œè´¸ä¹ˆè‰–æžšè‰£ç–Ÿéœ‰ç…¤æ²¡çœ‰è‡‹è‘²æ¯"
                },
                "cp28606": "iso885916",
                "cp437": {
                    "type": "_sbcs",
                    "chars": "è„Ÿçœ‰èŒ…èŠ’ç›²è„¿æ°“èŽ½é”šæ¯›çŒ«èŒ‚å¯çŸ›è„›è„œè„¡å¿™è„ä¹ˆæžšè²Œæ²¡éœ‰æ¯è„°è„ºåž„æ‹¢æ¥¼éˆ§îž¤æ—âˆ¶î„¼è¶å¥½æ³µæ‡§î€¡éƒåº“å¯ªå¢é™†å½•éš†èŠ¦ç¦„éˆ»æˆ”æž“éˆ»æ’¯æ”¤éˆ¹ã‚‚æš‹éˆºâ‘©æ™¼éˆºæ›—æšŽéˆºæˆ”æ™½éˆºæ¿ƒæš…éˆºæ¶’æ”¼éˆ¹æ–ºæ•¶éˆ¹îƒ½æ•Žéˆ¹â‚¬éˆ¹å°–æšˆéˆºç†²æšéˆºæ–ºæš•éˆºï¸¹æšŠéˆºæ„¨æššéˆºÑ€æš”éˆºã‚‚æšéˆºæ¬Œæ™¿éˆºæŽ†æ™¸éˆºî‚Ÿæš˜éˆ¹æ¨·æ”²éˆ»å šæ½éˆ»å±¸æž‘éˆ»â‚¬ä¼ªè„½èž•èŸºå±èŸ½ç¢ŒèŸ¿æ¡…èž›æƒŸæœªéˆ­ç‚å–®ç¢˜åŸ„éˆ®Ã·æ‰å¢ºéˆ®ã‚‚å°ƒéˆ±âˆ¶å°å¢—æŽ³éˆ­æ«¬å°åž°éˆ¦æŸ¯æµ‹æž²è½"
                },
                "ibm437": "cp437",
                "csibm437": "cp437",
                "cp737": {
                    "type": "_sbcs",
                    "chars": "èž’èž”èž•èž–èž˜èž™èžšèž›èžœèžèžžèž èž¡èž¢èž£èž¤å·å±éŸ¦è¿æ¡…å›´å”¯æƒŸä¼ªå°¾çº¬æœªè”šå‘³ç•èƒƒå–‚é­ä½æ¸­è°“å°‰æ…°èŸºèŸ»èŸ½èŸ¼èŸ¿è €è è ‚è „éˆ»æˆ”æž“éˆ»æ’¯æ”¤éˆ¹ã‚‚æš‹éˆºâ‘©æ™¼éˆºæ›—æšŽéˆºæˆ”æ™½éˆºæ¿ƒæš…éˆºæ¶’æ”¼éˆ¹æ–ºæ•¶éˆ¹îƒ½æ•Žéˆ¹â‚¬éˆ¹å°–æšˆéˆºç†²æšéˆºæ–ºæš•éˆºï¸¹æšŠéˆºæ„¨æššéˆºÑ€æš”éˆºã‚‚æšéˆºæ¬Œæ™¿éˆºæŽ†æ™¸éˆºî‚Ÿæš˜éˆ¹æ¨·æ”²éˆ»å šæ½éˆ»å±¸æž‘éˆ»â‚¬è …ç»´è‹‡èŽè †å§”è ˆè ‰è ‡è ‹èžèž†èž‡èž‰èžŒèžèžå¤éˆ®ãƒ¢å¢¹ä¸ºæ½æ¢…éˆ®åŸªæ‰³åž¯è·¯éˆ­æ°£ä¼©è™éˆ»çŠ…ï¿½"
                },
                "ibm737": "cp737",
                "csibm737": "cp737",
                "cp775": {
                    "type": "_sbcs",
                    "chars": "è†¯çœ‰èŒ…è†©ç›²æ¨¡æ°“è†°è‰‚è†¿è‰è‰žå¢¨æ®´è„›è„œè„¡å¿™è„è‰’æžšè˜‘åž„è‰¢è‰£è„°è„ºé…¶æ‹¢è„´è„³é™‡è†§èŽ«è´¸å‘•å¶è—•éˆ¥æ¾›Î²â”žî†™îƒé“°å¯‚ä¼®î¿çƒ©æž’éˆ»æŽ†æž”éˆ¹å‚—æ•œè†­è†¶è‡‰è‡‡éˆºï½‚æ™³éˆºæ¤»æš†æ¼ è‰©éˆ¹æ„¨æ•‚éˆ¹ç²¹æ•©éˆ¹æº¾æ”¢éˆ¹å¯‚æ‰îæšéˆºæ–ºæš•éˆºï¸¹æšŠéˆºæ„¨æššæ²¤è†®è†·è‡‹è‡ˆå¯žæ‹§æ‡¦å¥´å•ªéˆ¹æ¨·æ”²éˆ»å šæ½éˆ»å±¸æž‘éˆ»â‚¬è„«è„½è‰‘è‰ƒçŽ«è„®ç¢Œè‰…äº©å§†å¹•å‹Ÿè‰ˆè†¾è‰†éˆ¥æ«¬î„»æ‰â‚¬æºŒéŸ­å µîž¡å°â‚¬çºæ‰³åž¯è·¯é¹¿é²è™éˆ»çŠ…ï¿½"
                },
                "ibm775": "cp775",
                "csibm775": "cp775",
                "cp850": {
                    "type": "_sbcs",
                    "chars": "è„Ÿçœ‰èŒ…èŠ’ç›²è„¿æ°“èŽ½é”šæ¯›çŒ«èŒ‚å¯çŸ›è„›è„œè„¡å¿™è„ä¹ˆæžšè²Œæ²¡éœ‰æ¯è„°è„ºé…¶æ‹¢è„´è„³èŒ è°©é“†è´¸ç…¤å¸½è„©é™‹æ½žé©´åºå¢é™†å½•éš†èŠ¦ç¦„éˆ»æˆ”æž“éˆ»æ’¯æ”¤éˆ¹ã£ä¼±å¯â‚¬æ¼éˆºï½‚æ™³éˆºæ¤»æš†åž„æ¥¼éˆ¹æ„¨æ•‚éˆ¹ç²¹æ•©éˆ¹æº¾æ”¢éˆ¹æµŽï¼£å†£æšéˆºæ–ºæš•éˆºï¸¹æšŠéˆºæ„¨æššé™‡å†’è„¨è„¢è„£è„ è°‹è„¥è„¦è„§éˆ¹æ¨·æ”²éˆ»å šæ½å¨„è„¤éˆ»â‚¬è„«è„½è„­è„ªçŽ«è„®ç¢Œé•è„¼è„·è„¹è„µåª’è„»ç‚‰éº“é¢…å¤éˆ¥æ¤”éŸ­å µîž¡ä»¿å˜Žå¥¥îŸŠä»¿å­¤é™ˆæµ‹æž²è½"
                },
                "ibm850": "cp850",
                "csibm850": "cp850",
                "cp852": {
                    "type": "_sbcs",
                    "chars": "è„Ÿçœ‰èŒ…èŠ’ç›²æš–è†°èŽ½è‰‚æ¯›è‰•è‰–å¯æ®´è„›è†¯è„¡å¢“æš®ä¹ˆæžšæ…•æœ¨è‰¢è‰£è„°è„ºæ‰­é’®è‰è„³è†·è°©é“†è´¸ç…¤è†­è†®æ²¤å•ªè‡‰è‡‹å¢è—•è†¶è‰§èŠ¦ç¦„éˆ»æˆ”æž“éˆ»æ’¯æ”¤éˆ¹ã£ä¼±å°æ¯°ç‚©æšŽéˆºæˆ”æ™½éˆºæ¾Ÿæ…Œå°–æ”¼éˆ¹æ–ºæ•¶éˆ¹îƒ½æ•Žéˆ¹â‚¬éˆ¹å¯„å°å†£æšéˆºæ–ºæš•éˆºï¸¹æšŠéˆºæ„¨æššé™‡è†½è†¼è†¸è„£è†¹è‰Šè„¥è„¦è‡Žéˆ¹æ¨·æ”²éˆ»å šæ½æ³žå¥³éˆ»â‚¬è„«è„½è„­è‰ƒè‰…è‰Œè‰©æ‹§è‰›è„·è‰œè™åª’è„»ç‰›éº“é¢…è—µè—³è—è—°æ‚æ¢…èµ‚æŽ³ç¯“è—±ç–Ÿè‰ è‰¡éˆ»çŠ…ï¿½"
                },
                "ibm852": "cp852",
                "csibm852": "cp852",
                "cp855": {
                    "type": "_sbcs",
                    "chars": "è¤£è¢€è¤¤è¢ƒè¤¢è¡¼è¤¦è¢†è¤§è¢‡è¤¨è¢‰è¤©è¢Šè¤¬è¢Œè¤­è¢Žè¤®è¢è¤¯è¢è¤±è¢‘è¤³è¢”è¤µè¢•è¤žæŒŸè¤—æ­‡é‚ªè¢—æ–œè¢˜è¤‘ç¬‘å†™è¢›æ¢°è¢è¤Žè‚–è°è¢šèŠ¦ç¦„éˆ»æˆ”æž“éˆ»æ’¯æ”¤éˆ¹ã±å‘…ãƒæ„Ÿæ¨·æšŽéˆºæˆ”æ™½éˆºæ¾¬å‰æ¬Œæ”¼éˆ¹æ–ºæ•¶éˆ¹îƒ½æ•Žéˆ¹â‚¬éˆ¹å¤¹ç›’æ°£æšéˆºæ–ºæš•éˆºï¸¹æšŠéˆºæ„¨æššé™‡è°¢è¢¥å±‘è¢¦è–ªè¢§èŠ¯è¢¨é”Œéˆ¹æ¨·æ”²éˆ»å šæ½è¢©è¤Ÿéˆ»â‚¬æºè¤‰è¢ªè¤‹å°è¤Œå­è¤æ ¡å¸è¢žèƒè¢™è¤œéž‹éˆ©æŸ­î…Šå¬“î‚æ²¸æ¤¦åŸ¿ã„‘åµ­î…Šå£­â”­å›†îž Ñ€æž²è½"
                },
                "ibm855": "cp855",
                "csibm855": "cp855",
                "cp856": {
                    "type": "_sbcs",
                    "chars": "è®—è®˜è®™è®šè®›è®œè®è®žè®Ÿè®¬è®±è®»è¯‡è¯è¯ªè°‰è°žä½æ³¨ç¥é©»æŠ“çˆªæ‹½ä¸“ç –è½¬é”Ÿé“°ï½æ‹·è„³é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·åºå¢é™†å½•é”Ÿé“°î¿çƒ©æž’éˆ»æŽ†æž”éˆ¹å‚—æ•œé”Ÿæ–¤æ‹·é”Ÿé“°â”¾æšŽéˆºæˆ”æ™½éˆºæ¾›â’™ãƒ¢æ”¼éˆ¹æ–ºæ•¶éˆ¹îƒ½æ•Žéˆ¹â‚¬éˆ¹ç¡·æ‹·é”Ÿè§£æšéˆºæ–ºæš•éˆºï¸¹æšŠéˆºæ„¨æššé™‡é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿè§£æ•‡éˆ¹å±¸æž…éˆ»åŠ¼ï¸¼æ‹·éˆ»â‚¬é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·ç¢Œé”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿé“°î‡·ç»°î„»æ‰â‚¬æ¤”éŸ­å µîž¡ä»¿å˜Žå¥¥îŸŠä»¿å­¤é™ˆæµ‹æž²è½"
                },
                "ibm856": "cp856",
                "csibm856": "cp856",
                "cp857": {
                    "type": "_sbcs",
                    "chars": "è„Ÿçœ‰èŒ…èŠ’ç›²è„¿æ°“èŽ½é”šæ¯›çŒ«èŒ‚å¯è°‹è„›è„œè„¡å¿™è„ä¹ˆæžšè²Œæ²¡éœ‰é™Œè„°è„ºé…¶æ‹¢è„´è‰¦è‰§è°©é“†è´¸ç…¤å¸½è„©è‡‘è‡’é©´åºå¢é™†å½•éš†èŠ¦ç¦„éˆ»æˆ”æž“éˆ»æ’¯æ”¤éˆ¹ã£ä¼±å¯â‚¬æ¼éˆºï½‚æ™³éˆºæ¤»æš†åž„æ¥¼éˆ¹æ„¨æ•‚éˆ¹ç²¹æ•©éˆ¹æº¾æ”¢éˆ¹æµŽï¼£å†£æšéˆºæ–ºæš•éˆºï¸¹æšŠéˆºæ„¨æššé™‡æ½žé™‹è„¢è„£è„ é”ŸçŸ«åµœå¹Ÿå¿Šæ•‡éˆ¹å±¸æž…éˆ»åŠ¼Î³å±¸æ¸è„«è„½è„­è„ªçŽ«è„®ç¢Œé”ŸçŸ«æ¤•æ¯­æµ¢æ«­îƒžæŸ¯î‡·ç»°î„»æ†‹æ‹·æˆ®éœ²æ‚æ¢…èµ‚æŽ³ç¯“è·¯é¹¿é²è™éˆ»çŠ…ï¿½"
                },
                "ibm857": "cp857",
                "csibm857": "cp857",
                "cp858": {
                    "type": "_sbcs",
                    "chars": "è„Ÿçœ‰èŒ…èŠ’ç›²è„¿æ°“èŽ½é”šæ¯›çŒ«èŒ‚å¯çŸ›è„›è„œè„¡å¿™è„ä¹ˆæžšè²Œæ²¡éœ‰æ¯è„°è„ºé…¶æ‹¢è„´è„³èŒ è°©é“†è´¸ç…¤å¸½è„©é™‹æ½žé©´åºå¢é™†å½•éš†èŠ¦ç¦„éˆ»æˆ”æž“éˆ»æ’¯æ”¤éˆ¹ã£ä¼±å¯â‚¬æ¼éˆºï½‚æ™³éˆºæ¤»æš†åž„æ¥¼éˆ¹æ„¨æ•‚éˆ¹ç²¹æ•©éˆ¹æº¾æ”¢éˆ¹æµŽï¼£å†£æšéˆºæ–ºæš•éˆºï¸¹æšŠéˆºæ„¨æššé™‡å†’è„¨è„¢è„£è„ éˆ§îƒžåµœå¹Ÿå¿Šæ•‡éˆ¹å±¸æž…éˆ»åŠ¼Î³å±¸æ¸è„«è„½è„­è„ªçŽ«è„®ç¢Œé•è„¼è„·è„¹è„µåª’è„»ç‚‰éº“é¢…å¤éˆ¥æ¤”éŸ­å µîž¡ä»¿å˜Žå¥¥îŸŠä»¿å­¤é™ˆæµ‹æž²è½"
                },
                "ibm858": "cp858",
                "csibm858": "cp858",
                "cp860": {
                    "type": "_sbcs",
                    "chars": "è„Ÿçœ‰èŒ…èŠ’èŒ«è„¿è„•èŽ½é”šè„¢çŒ«è„¥è„­çŸ›è„™è„—è„¡è„Œè„ ä¹ˆçŽ«è²Œè„·éœ‰è„¤è„®è„ºåž„æ‹¢è„µéˆ§îž¡æ’âˆ¶î„¼è¶å¥½æ³µæ‡§î€¡éƒæ£µæ–îƒé“°æ‚¸Ã·î¿çƒ©æž’éˆ»æŽ†æž”éˆ¹å‚—æ•œéˆºâ™€æšéˆºæ ¤æ™»éˆºï½‚æ™³éˆºæ¤»æš†éˆºæº¾æšƒéˆ¹æ„¨æ•‚éˆ¹ç²¹æ•©éˆ¹æº¾æ”¢éˆ¹å°–æšˆéˆºç†²æšéˆºæ–ºæš•éˆºï¸¹æšŠéˆºæ„¨æššéˆºÑ€æš”éˆºã‚‚æšéˆºæ¬Œæ™¿éˆºæŽ†æ™¸éˆºî‚Ÿæš˜éˆ¹æ¨·æ”²éˆ»å šæ½éˆ»å±¸æž‘éˆ»â‚¬ä¼ªè„½èž•èŸºå±èŸ½ç¢ŒèŸ¿æ¡…èž›æƒŸæœªéˆ­ç‚å–®ç¢˜åŸ„éˆ®Ã·æ‰å¢ºéˆ®ã‚‚å°ƒéˆ±âˆ¶å°å¢—æŽ³éˆ­æ«¬å°åž°éˆ¦æŸ¯æµ‹æž²è½"
                },
                "ibm860": "cp860",
                "csibm860": "cp860",
                "cp861": {
                    "type": "_sbcs",
                    "chars": "è„Ÿçœ‰èŒ…èŠ’ç›²è„¿æ°“èŽ½é”šæ¯›çŒ«è„¨å†’è„¼è„›è„œè„¡å¿™è„ä¹ˆæžšé•æ²¡è„»åª’è„°è„ºé…¶æ‹¢è„´éˆ§îž¤æ—âˆ¶î„¼è¶å¥½ä¼±åµœæ’æ¯¬åº“å¯ªå¢é™†å½•éš†èŠ¦ç¦„éˆ»æˆ”æž“éˆ»æ’¯æ”¤éˆ¹ã‚‚æš‹éˆºâ‘©æ™¼éˆºæ›—æšŽéˆºæˆ”æ™½éˆºæ¿ƒæš…éˆºæ¶’æ”¼éˆ¹æ–ºæ•¶éˆ¹îƒ½æ•Žéˆ¹â‚¬éˆ¹å°–æšˆéˆºç†²æšéˆºæ–ºæš•éˆºï¸¹æšŠéˆºæ„¨æššéˆºÑ€æš”éˆºã‚‚æšéˆºæ¬Œæ™¿éˆºæŽ†æ™¸éˆºî‚Ÿæš˜éˆ¹æ¨·æ”²éˆ»å šæ½éˆ»å±¸æž‘éˆ»â‚¬ä¼ªè„½èž•èŸºå±èŸ½ç¢ŒèŸ¿æ¡…èž›æƒŸæœªéˆ­ç‚å–®ç¢˜åŸ„éˆ®Ã·æ‰å¢ºéˆ®ã‚‚å°ƒéˆ±âˆ¶å°å¢—æŽ³éˆ­æ«¬å°åž°éˆ¦æŸ¯æµ‹æž²è½"
                },
                "ibm861": "cp861",
                "csibm861": "cp861",
                "cp862": {
                    "type": "_sbcs",
                    "chars": "è®—è®˜è®™è®šè®›è®œè®è®žè®Ÿè®¬è®±è®»è¯‡è¯è¯ªè°‰è°žä½æ³¨ç¥é©»æŠ“çˆªæ‹½ä¸“ç –è½¬åž„æ‹¢æ¥¼éˆ§îž¤æ—âˆ¶î„¼è¶å¥½æ³µæ‡§î€¡éƒåº“å¯ªå¢é™†å½•éš†èŠ¦ç¦„éˆ»æˆ”æž“éˆ»æ’¯æ”¤éˆ¹ã‚‚æš‹éˆºâ‘©æ™¼éˆºæ›—æšŽéˆºæˆ”æ™½éˆºæ¿ƒæš…éˆºæ¶’æ”¼éˆ¹æ–ºæ•¶éˆ¹îƒ½æ•Žéˆ¹â‚¬éˆ¹å°–æšˆéˆºç†²æšéˆºæ–ºæš•éˆºï¸¹æšŠéˆºæ„¨æššéˆºÑ€æš”éˆºã‚‚æšéˆºæ¬Œæ™¿éˆºæŽ†æ™¸éˆºî‚Ÿæš˜éˆ¹æ¨·æ”²éˆ»å šæ½éˆ»å±¸æž‘éˆ»â‚¬ä¼ªè„½èž•èŸºå±èŸ½ç¢ŒèŸ¿æ¡…èž›æƒŸæœªéˆ­ç‚å–®ç¢˜åŸ„éˆ®Ã·æ‰å¢ºéˆ®ã‚‚å°ƒéˆ±âˆ¶å°å¢—æŽ³éˆ­æ«¬å°åž°éˆ¦æŸ¯æµ‹æž²è½"
                },
                "ibm862": "cp862",
                "csibm862": "cp862",
                "cp863": {
                    "type": "_sbcs",
                    "chars": "è„Ÿçœ‰èŒ…èŠ’è„—è„¿éœ²èŽ½é”šæ¯›çŒ«èŒ‚å¯éˆ¥æ¤•â‚¬æ‚è„¡è„ è„¢ä¹ˆè„£è„§æ²¡éœ‰é™‡è„­è„ºåž„æ‹¢è„µè„¹èŒ å¨„éº“è´¸ç…¤ç¯“èµ‚é²ç‚‰è„¦éˆ±æƒµîƒé“°æ‚¸éŸ­î¿çƒ©æž’éˆ»æŽ†æž”éˆ¹å‚—æ•œéˆºâ™€æšéˆºæ ¤æ™»éˆºï½‚æ™³éˆºæ¤»æš†éˆºæº¾æšƒéˆ¹æ„¨æ•‚éˆ¹ç²¹æ•©éˆ¹æº¾æ”¢éˆ¹å°–æšˆéˆºç†²æšéˆºæ–ºæš•éˆºï¸¹æšŠéˆºæ„¨æššéˆºÑ€æš”éˆºã‚‚æšéˆºæ¬Œæ™¿éˆºæŽ†æ™¸éˆºî‚Ÿæš˜éˆ¹æ¨·æ”²éˆ»å šæ½éˆ»å±¸æž‘éˆ»â‚¬ä¼ªè„½èž•èŸºå±èŸ½ç¢ŒèŸ¿æ¡…èž›æƒŸæœªéˆ­ç‚å–®ç¢˜åŸ„éˆ®Ã·æ‰å¢ºéˆ®ã‚‚å°ƒéˆ±âˆ¶å°å¢—æŽ³éˆ­æ«¬å°åž°éˆ¦æŸ¯æµ‹æž²è½"
                },
                "ibm863": "cp863",
                "csibm863": "cp863",
                "cp864": {
                    "type": "_sbcs",
                    "chars": "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$ä¾&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~æŽ³è·¯éˆ­æ¬Œåž°éˆ»æŽ†æ”¢éˆ¹å‚—æ•¿éˆ¹ã‚‚æ•©éˆ¹æº¾æ•¶éˆ¹æ„¨æ”²éˆ¹æ–ºæ•‡å°¾éˆ­ç‚å–¡ç”­é“°å°–å¢—èŠ¦ç¦„é”˜å‡¤æ¡“é”Ÿæ–¤æ‹·é”˜ä¼™æ‚£é”Ÿé“°çŠ…î…¨ç°œæ‹¢é™‡é”–å‹¶æ‹·é”Ÿæ–¤ç°¬é”–å¿¥ç°³é”–æ¬‚å²‹ç°¼é”–â˜…äº¥è´ä½Ÿä½—ä¼²ä¼½ä½¶ä½´ä¾‘ä¾‰ä¾ƒé”˜æ‡¾æ¶³ç½•é”–ç¢‰æ±—è²¬åž„é”–â‚¬é”–ä¾Šç°é”–å’ƒç²–é”–å¬¶ç°«é”–æˆ¯ç°±é”–æ¥‹ç°ºé”–ç‡‚æµ·é”–Ñæ†¨é”–î‚¬æ¶µé”–îˆ¤æ’¼é”–å‡¤å¤¯é”–åŒ¡ç²Šé”˜å’ƒç²™é”˜å¾›Î²îƒžè®¿æ¥‹ç²”è³­é”˜æ“„ç²­é”˜æ¶³ç²ºé”˜ï½æˆ·é”˜î‚¬ç”»é”˜îˆ¤æ€€é”–æ–¤ç²šé”˜åº¯ç²›é”˜â˜…è‡è³¾é”˜ãƒ¯å“—é”˜î„Šè¯é”˜è¯§ç²£é”˜æ›ªåé”˜è®¹ç²·é”˜æ¬™æ§éˆ»ç‹…æ‹·"
                },
                "ibm864": "cp864",
                "csibm864": "cp864",
                "cp865": {
                    "type": "_sbcs",
                    "chars": "è„Ÿçœ‰èŒ…èŠ’ç›²è„¿æ°“èŽ½é”šæ¯›çŒ«èŒ‚å¯çŸ›è„›è„œè„¡å¿™è„ä¹ˆæžšè²Œæ²¡éœ‰æ¯è„°è„ºé…¶æ‹¢è„´éˆ§îž¤æ—âˆ¶î„¼è¶å¥½æ³µæ‡§î€¡éƒåº“å¯ªå¢é™†å½•éš†èŠ¦é™‡éˆ»æˆ”æž“éˆ»æ’¯æ”¤éˆ¹ã‚‚æš‹éˆºâ‘©æ™¼éˆºæ›—æšŽéˆºæˆ”æ™½éˆºæ¿ƒæš…éˆºæ¶’æ”¼éˆ¹æ–ºæ•¶éˆ¹îƒ½æ•Žéˆ¹â‚¬éˆ¹å°–æšˆéˆºç†²æšéˆºæ–ºæš•éˆºï¸¹æšŠéˆºæ„¨æššéˆºÑ€æš”éˆºã‚‚æšéˆºæ¬Œæ™¿éˆºæŽ†æ™¸éˆºî‚Ÿæš˜éˆ¹æ¨·æ”²éˆ»å šæ½éˆ»å±¸æž‘éˆ»â‚¬ä¼ªè„½èž•èŸºå±èŸ½ç¢ŒèŸ¿æ¡…èž›æƒŸæœªéˆ­ç‚å–®ç¢˜åŸ„éˆ®Ã·æ‰å¢ºéˆ®ã‚‚å°ƒéˆ±âˆ¶å°å¢—æŽ³éˆ­æ«¬å°åž°éˆ¦æŸ¯æµ‹æž²è½"
                },
                "ibm865": "cp865",
                "csibm865": "cp865",
                "cp866": {
                    "type": "_sbcs",
                    "chars": "è¢—è¢˜è¢™è¢šè¢›è¢è¢žè¢Ÿè¢ è¢¡è¢£è¢¥è¢¦è¢§è¢¨è¢©è¢ªå°å­æ ¡è‚–å•¸ç¬‘æ•ˆæ¥”äº›æ­‡èŽéž‹åæŒŸæºé‚ªæ–œèƒè°å†™æ¢°å¸èŸ¹æ‡ˆæ³„æ³»è°¢å±‘è–ªèŠ¯é”Œéˆ»æˆ”æž“éˆ»æ’¯æ”¤éˆ¹ã‚‚æš‹éˆºâ‘©æ™¼éˆºæ›—æšŽéˆºæˆ”æ™½éˆºæ¿ƒæš…éˆºæ¶’æ”¼éˆ¹æ–ºæ•¶éˆ¹îƒ½æ•Žéˆ¹â‚¬éˆ¹å°–æšˆéˆºç†²æšéˆºæ–ºæš•éˆºï¸¹æšŠéˆºæ„¨æššéˆºÑ€æš”éˆºã‚‚æšéˆºæ¬Œæ™¿éˆºæŽ†æ™¸éˆºî‚Ÿæš˜éˆ¹æ¨·æ”²éˆ»å šæ½éˆ»å±¸æž‘éˆ»â‚¬è¤‰è¤‹è¤Œè¤è¤Žè¤è¤‘è¤”è¤•è¤–è¤—è¤˜è¤œè¤è¤žè¤Ÿè¡¼è¤¢è¢†è¤¦è¢Šè¤©è¢”è¤³æŽ³éˆ­æ«¬å°åž°éˆ©æŸ­ã‚‚æž²è½"
                },
                "ibm866": "cp866",
                "csibm866": "cp866",
                "cp869": {
                    "type": "_sbcs",
                    "chars": "é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·èžé”Ÿé“°ä»¿îƒï¸¹â‚¬æ¨·â‚¬æ«¸å šâ‚¬æ›ƒå£©å¨¢î€­å²‹æ‹·é”Ÿè½¿å¹¬î¿â”ªå¾›çŒœæ¾„îƒï¼®î…‡î†¥îˆ„å¨¢æ„Šå±œåµ¨æ‡³æ¨æ’æ–˜æ›ƒæ æ¤”è½¿æ¨œæ«¬î¿çƒ©æž’éˆ»æŽ†æž”éˆ¹å‚—æ•œèžèžžèž èž¡éˆºï½‚æ™³éˆºæ¤»æš†èž¢èž£éˆ¹æ„¨æ•‚éˆ¹ç²¹æ•©éˆ¹æº¾æ”¢éˆ¹å˜‰çŠ–â™€æšéˆºæ–ºæš•éˆºï¸¹æšŠéˆºæ„¨æššå±éŸ¦è¿æ¡…å›´å”¯æƒŸä¼ªå°¾çº¬éˆ¹æ¨·æ”²éˆ»å šæ½æœªè”šéˆ»â‚¬å‘³ç•èƒƒå–‚é­ä½æ¸­è°“å°‰æ…°èŸºèŸ»èŸ½èŸ¼èŸ¿è¿é¢…å¤è €è è ‚æ‚è „èž€æŽ³ç¯“è …è ‡ä¼Ÿè ‹éˆ»çŠ…ï¿½"
                },
                "ibm869": "cp869",
                "csibm869": "cp869",
                "cp922": {
                    "type": "_sbcs",
                    "chars": "è™è›èœèèžèŸè è¡è¢è£è¤è¥è¦è§è¨è«è¬è­è®è¯è°è²è³è´èµè¶è·è¸è¹èºè»è¼è½éš†åž„æ‹¢é™‡æ¥¼å¨„æ‚ç¯“æ¼é™‹èŠ¦å¢é¢…åºéˆ¥éŸ­å¥¥ç”­çŒœé™ˆç»°å¾·å µä»¿å˜Žå­¤éƒå®¦æ‚¸é“°éŸ­æ£µâ‚¬è„•è„—è„™è„›è„œè„è„Ÿè„ è„¡è„¢è„£è„¤è„¥è„¦è„§è‰©è„©è„ªè„«è„­è„®è„°è„³è„´è„µè„·è„¹è„ºè„»æ²¤è„½è„¿è°©èŠ’èŒ«ç›²æ°“å¿™èŽ½çŒ«èŒ…é”šæ¯›çŸ›é“†å¯èŒ‚æ‹§å¸½è²Œè´¸ä¹ˆçŽ«æžšæ¢…é…¶éœ‰ç…¤æ²¡çœ‰åª’å•ªæ¯"
                },
                "ibm922": "cp922",
                "csibm922": "cp922",
                "cp1046": {
                    "type": "_sbcs",
                    "chars": "é”–åŸ«æ¤•å‡¤ï¼–é“®ç¢‰ï¼”é“®å‡¤è´¡è¢éˆ»çŠ«æ”¤éˆ¹â‚¬éˆ¹æ„¨æ”²éˆ¹æ–ºæ•‡é”•ç™¸å¤Ÿé”•æ–¤ç®é”•å‡¤ç°¥é”˜å¸®æ€€é”˜è¯§ç² é”˜å¿¥ç²£é”˜è®¹æ¡“é”˜çŒ´æ‚£è½é“®çŒ´ï¼™é“®å˜Žã‚ï¼›é”–å¬¶ç°¯é”–æ¥‹ç°ºé”–ç‡‚æµ·è²™é¢…é”–Ñæ’¼è´ä½Ÿä½—ä¼²ä¼½ä½¶ä½´ä¾‘ä¾‰ä¾ƒé”–åŸæ¶³å¤¯é”–åŒ¡ç²–è²¬é”˜å¬âˆâ’‡ï¼¸ã¸ãƒ˜Ï‰Ð¶ã„˜â”´î€·î‚•îƒ³î…‘î†¯îˆæŸå¿…è—æ± ç°‡åœ°æ•¦å‡¤ç²æ¯“ç¾é”˜å²‹ç°œé”–å‹¶ç°¬é”˜æ’¡â‚¬è³®è³¯è³°è³±è³²è³³è³´è³µè³¶è³·è³¸è³¹è³ºè³»è³¼è³½è³¾è³¿é”˜æ¥‹ç²µé”˜ç‡‚ï¼œé”˜ç¢‰çŽ¯é”˜ç™¸æ¢é”˜ï½æˆ·é”˜î„Šå“—é”Ÿï¿½"
                },
                "ibm1046": "cp1046",
                "csibm1046": "cp1046",
                "cp1124": {
                    "type": "_sbcs",
                    "chars": "è™è›èœèèžèŸè è¡è¢è£è¤è¥è¦è§è¨è«è¬è­è®è¯è°è²è³è´èµè¶è·è¸è¹èºè»è¼è½è¡¼è¢€è¦‘è¢†è¢‡è¢‰è¢Šè¢Œè¢Žè¢è¢è¢‘é¢…è¢”è¢•è¢—è¢˜è¢™è¢šè¢›è¢è¢žè¢Ÿè¢ è¢¡è¢£è¢¥è¢¦è¢§è¢¨è¢©è¢ªå°å­æ ¡è‚–å•¸ç¬‘æ•ˆæ¥”äº›æ­‡èŽéž‹åæŒŸæºé‚ªæ–œèƒè°å†™æ¢°å¸èŸ¹æ‡ˆæ³„æ³»è°¢å±‘è–ªèŠ¯é”Œè¤‰è¤‹è¤Œè¤è¤Žè¤è¤‘è¤”è¤•è¤–è¤—è¤˜è¤œè¤è¤žè¤Ÿéˆ©æ „æ‡·æ¯æ‡·æ–žæ›†æ „æ¤¦æ¨ æ«»æ°€æµ¹æºŒÐ°ç‚‘ï¿½"
                },
                "ibm1124": "cp1124",
                "csibm1124": "cp1124",
                "cp1125": {
                    "type": "_sbcs",
                    "chars": "è¢—è¢˜è¢™è¢šè¢›è¢è¢žè¢Ÿè¢ è¢¡è¢£è¢¥è¢¦è¢§è¢¨è¢©è¢ªå°å­æ ¡è‚–å•¸ç¬‘æ•ˆæ¥”äº›æ­‡èŽéž‹åæŒŸæºé‚ªæ–œèƒè°å†™æ¢°å¸èŸ¹æ‡ˆæ³„æ³»è°¢å±‘è–ªèŠ¯é”Œéˆ»æˆ”æž“éˆ»æ’¯æ”¤éˆ¹ã‚‚æš‹éˆºâ‘©æ™¼éˆºæ›—æšŽéˆºæˆ”æ™½éˆºæ¿ƒæš…éˆºæ¶’æ”¼éˆ¹æ–ºæ•¶éˆ¹îƒ½æ•Žéˆ¹â‚¬éˆ¹å°–æšˆéˆºç†²æšéˆºæ–ºæš•éˆºï¸¹æšŠéˆºæ„¨æššéˆºÑ€æš”éˆºã‚‚æšéˆºæ¬Œæ™¿éˆºæŽ†æ™¸éˆºî‚Ÿæš˜éˆ¹æ¨·æ”²éˆ»å šæ½éˆ»å±¸æž‘éˆ»â‚¬è¤‰è¤‹è¤Œè¤è¤Žè¤è¤‘è¤”è¤•è¤–è¤—è¤˜è¤œè¤è¤žè¤Ÿè¡¼è¤¢è¦‘è¦’è¢†è¤¦è¢‰è¤¨è¢Šè¤©è·¯éˆ­æ°£å‰¸é™‡éˆ»çŠ…ï¿½"
                },
                "ibm1125": "cp1125",
                "csibm1125": "cp1125",
                "cp1129": {
                    "type": "_sbcs",
                    "chars": "è™è›èœèèžèŸè è¡è¢è£è¤è¥è¦è§è¨è«è¬è­è®è¯è°è²è³è´èµè¶è·è¸è¹èºè»è¼è½éš†åž„æ‹¢é™‡æ¥¼å¨„æ‚è‰™æ¼é™‹èŠ¦å¢é¢…åºç‚‰æŽ³å¤è™é²é¸¥ç¢Œéœ²è·¯è‰—é¹¿æ½žç¦„å½•é™†æˆ®é©´è„Œè„•è„—è†«è„›è„œè„è„Ÿè„ è„¡è„¢è„£è™è„¥è„¦è„§è†¼è„©è™Šè„«è„­èŒ½è„°è„³è„´è„µè„·è„¹è„ºæ¼‚è™„è„½è„¿è°©èŠ’è†¬ç›²æ°“å¿™èŽ½çŒ«èŒ…é”šæ¯›è™‚é“†å¯èŒ‚è†½å¸½è¹‹è´¸ä¹ˆå•¤æžšæ¢…é…¶éœ‰ç…¤æ²¡çœ‰ç“¢éˆ§î‚€ï¿½"
                },
                "ibm1129": "cp1129",
                "csibm1129": "cp1129",
                "cp1133": {
                    "type": "_sbcs",
                    "chars": "è™è›èœèèžèŸè è¡è¢è£è¤è¥è¦è§è¨è«è¬è­è®è¯è°è²è³è´èµè¶è·è¸è¹èºè»è¼è½å—ªä½®ç°œå—ªå‹¦ç°¢å—ªå —é‚¯å—ªå¨»ç°«å—ªæ–·ç°³å—ªæ ¢ç°µå—ªæ¬Šç°¹å—ªæ¶ç°»å—ªæ¾¿ç°½å—ªç†°éª¸å—ªâ‘§æµ·å—ªãƒ éª‡å—ªî‚æ¶µå—ªî‡†æ‹·é”Ÿæ–¤æ‹·å—ªîˆ•å–Šå—ªä¾§æ’¼å—ªè„†æ—±å—ªå¤šæ‚å—ªè†æ±—å—ªç›‘ç½•å—ªç§½èˆªé”Ÿæ–¤æ‹·é”Ÿæ´ç²ˆå—·ä½®ç²‹å—·å†Ÿç²å—·å —ç²”å—·å¨»ç²™å—·å±¶ç²›å—·å—­æ‹·å—·æº¹ç²·éˆ§î…¨æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ´ç²£å—·æˆ‰ç²§å—·æ’ªç²©å—·æ›•ç²¬å—·æ¤¸ç²¯å—·æ¬™æ‹·é”Ÿé“°â’™îƒï¸¼æ‹·"
                },
                "ibm1133": "cp1133",
                "csibm1133": "cp1133",
                "cp1161": {
                    "type": "_sbcs",
                    "chars": "é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·å–™å —ç«µå–”å‚•ç«·å–”å‹¦ç«»å–”å—‹ç«¾å–”å —ç¬å–”å¨»ç¬…å–”å±¶ç¬‰å–”åºŽç¬å–”æ„¢ç¬å–”æŽ„ç¬“å–”æ–·ç¬—å–”æ ¢ç¬šå–”æ¨´ç¬å–”æ°žç¬¡å–”æº¹ç¬£å–”ç‚§ç¬©å–”çŠ©æµ®å–”â‘§ç¦å–”ã‚€å¼—å–”ï¸µæŠšå–”ã„ ä¿¯å–”î€¿æ–§å–”îƒ»è…‘å–”î†·è…å–”ç­å‰¯å–”ä¾§èµ‹å–”è„†å‚…å–”å¤šé˜œå–”è†è…¹å–”äº¨ç®Ÿå–™å¨»ç®£éˆ§îƒ»ç¼šå–™â‚¬å–™ä½®ç®“å–™å†Ÿç®˜å–™å‘§ç®šå–™å›™ç®žå–™å¤ƒç® å–™å¬¥ç®¤å–™åµ¿ç®®å–™å¿‡ç®°å–™æˆ‰ç®³å–™æ’ªç®¶å–™æ›•ç®¹å–™æ¤¸ç®»å–™æ¬Šç®½å–™æµ¡â’™îƒÎ²ï¿½"
                },
                "ibm1161": "cp1161",
                "csibm1161": "cp1161",
                "cp1162": {
                    "type": "_sbcs",
                    "chars": "éˆ§îƒä¼®å®å…Ÿå‹¨â‚¬Î²å–¡åš¶åŸªå£œå¨å¬„å±„åµšå¹å¾›æ„¨â‚¬æ¨·â‚¬æ¬Œâ‚¬æº¾â‚¬æ¿ƒâ‚¬â‘©â‚¬æ’¯â‚¬æ–…æ¨Žæ«¬æ¯¬æµ¡æºŒæ¾›çºç†‰çŠ©ç«µå–”å‚•ç«·å–”å‹¦ç«»å–”å—‹ç«¾å–”å —ç¬å–”å¨»ç¬…å–”å±¶ç¬‰å–”åºŽç¬å–”æ„¢ç¬å–”æŽ„ç¬“å–”æ–·ç¬—å–”æ ¢ç¬šå–”æ¨´ç¬å–”æ°žç¬¡å–”æº¹ç¬£å–”ç‚§ç¬©å–”çŠ©æµ®å–”â‘§ç¦å–”ã‚€å¼—å–”ï¸µæŠšå–”ã„ ä¿¯å–”î€¿æ–§å–”îƒ»è…‘å–”î†·è…å–”ç­å‰¯å–”ä¾§èµ‹å–”è„†å‚…å–”å¤šé˜œå–”è†è…¹å–”çŒ´æ‹·é”Ÿæ–¤æ‹·é”Ÿæ´ç¼šå–™â‚¬å–™ä½®ç®“å–™å†Ÿç®˜å–™å‘§ç®šå–™å›™ç®žå–™å¤ƒç® å–™å¬¥ç®¤å–™åµ¿ç®®å–™å¿‡ç®°å–™æˆ‰ç®³å–™æ’ªç®¶å–™æ›•ç®¹å–™æ¤¸ç®»å–™æ¬Šç®½å–™æ¶³æ‹·é”Ÿæ–¤æ‹·é”Ÿï¿½"
                },
                "ibm1162": "cp1162",
                "csibm1162": "cp1162",
                "cp1163": {
                    "type": "_sbcs",
                    "chars": "è™è›èœèèžèŸè è¡è¢è£è¤è¥è¦è§è¨è«è¬è­è®è¯è°è²è³è´èµè¶è·è¸è¹èºè»è¼è½éš†åž„æ‹¢éˆ§îƒãƒ‚Î²îž£æ’€â”žî€¡î¿îƒî„»î†™î‡·å¥¥ç”­çŒœæ’‘å˜Žå¾·å µæ”¾æ–å­¤éƒå®¦æ‚¸é“°éŸ­æ£µâ‚¬è„•è„—è†«è„›è„œè„è„Ÿè„ è„¡è„¢è„£è™è„¥è„¦è„§è†¼è„©è™Šè„«è„­èŒ½è„°è„³è„´è„µè„·è„¹è„ºæ¼‚è™„è„½è„¿è°©èŠ’è†¬ç›²æ°“å¿™èŽ½çŒ«èŒ…é”šæ¯›è™‚é“†å¯èŒ‚è†½å¸½è¹‹è´¸ä¹ˆå•¤æžšæ¢…é…¶éœ‰ç…¤æ²¡çœ‰ç“¢éˆ§î‚€ï¿½"
                },
                "ibm1163": "cp1163",
                "csibm1163": "cp1163",
                "maccroatian": {
                    "type": "_sbcs",
                    "chars": "è„›è„œè„Ÿè„¡è„©è„°è„ºè°©è„¿èŠ’ç›²èŒ«æ°“èŽ½èŒ…çŒ«é”šæ¯›é“†çŸ›å¯èŒ‚å¸½è´¸è²Œä¹ˆæžšçŽ«ç…¤éœ‰æ²¡çœ‰éˆ¥çŠ…å¥¥â’™ï¼¢Ñ€â‚¬â’™ç¹ç†‰î†œçŠ«åŠ‰éº“ç¯“éˆ®çŠˆçŸ«æ¨·åž¶å¤éˆ®ã‚‚å¢ºéˆ­å–¡ç¢˜åžˆéˆ­æˆ”åž™æ‹§éˆ­î¿î€¡è¡¡åŠå•ªé…¶é©´éš†å¢éˆ­æ¯±æŽ†å¢—è†¯èŠ¦è†¶éˆ¥Î²çŠ†â‚¬è„™è„®è‰—è‰™è†¼éˆ¥æ–ºâ‚¬æº¾â‚¬æ¿ƒâ‚¬æ¨·â‚¬æ«­å°æ£…é”Ÿé“°â”¾äºœé™‡éˆ¥å…‰â‚¬å¥½å–¡çƒ©â‚¬æ’€å°â‚¬æ°£â‚¬ç‚©â‚¬æ‡Šå°åš¸ä¼³åµœåŸ«åµœå¹Ÿå¾å±†æ’æ–ˆæ‡¨æ—æ¯­æµ¢æ«®å½¼å–«æºŒîˆ„â‚¬è„£è—²èµ‚è„¢å¿™è—"
                },
                "maccyrillic": {
                    "type": "_sbcs",
                    "chars": "è¢—è¢˜è¢™è¢šè¢›è¢è¢žè¢Ÿè¢ è¢¡è¢£è¢¥è¢¦è¢§è¢¨è¢©è¢ªå°å­æ ¡è‚–å•¸ç¬‘æ•ˆæ¥”äº›æ­‡èŽéž‹åæŒŸæºéˆ¥çŠ…å¥¥â’™ï¼¢Ñ€â‚¬â’™ç¼Žå–¡î†™â”¾åŠ‰è¢€è¤£éˆ®çŠ˜å†„æ’¯åž¶å¤éˆ®ã‚‚å¢ºè¤¨ç¢Œéˆ­å‚‚åŸ¿å‹“æ–å›‡æ¤¥å£¯æ«ºå¨§æ°€æ¨žå¢îƒ½åž°èŒ éˆ®å šåžŽèŠ¦ç¦„éˆ¥Î²çŠ˜å¬”æµ¶å±Ÿæº æ›—â‚¬æ’¯â‚¬æ–ºâ‚¬æº¾â‚¬æ¿ƒâ‚¬æ¨·â‚¬æ«­å°â‚¬ç‚å¹¯ç‚å¾°ç†²å‰¸è¡¼è¤¢è¤Ÿé‚ªæ–œèƒè°å†™æ¢°å¸èŸ¹æ‡ˆæ³„æ³»è°¢å±‘è–ªèŠ¯é”Œè¤‰è¤‹è¤Œè¤è¤Žè¤è¤‘è¤”è¤•è¤–è¤—è¤˜è¤œè¤è¤žé™‡"
                },
                "macgreek": {
                    "type": "_sbcs",
                    "chars": "è„›é¹¿è™è„¡é²è„°è„ºèž€è„¿èŠ’ç›²è¿ç¯“èŽ½èŒ…çŒ«é”šæ¯›æ‹¢éˆ©â’šî†šîˆ—â‚¬â’™è§£â‚¬æ‡Šç–µå µÎ²î„¼å§‘å¹»å°–â‚¬çŠ–æ’æ–˜æ¨œæµ³ç‚çŠ†ç†‰î†™â”ªï¼®î€¡Ñ€å¢µæŽ³èž„èž’å¤éˆ®ã‚‚å¢ºæ¥¼èž”èž˜èž™èžšèžœèžèž æ¡…æ½å”¯æƒŸç»´èž¡å¢èž£å·éˆ®åŸ¼ã¢î¿çƒ©â‚¬Î²çŠ–ãƒŽîž¬å–®åŸ®æ’¯â‚¬æ’¯â‚¬æ›—â‚¬æº¾â‚¬æ¿ƒâ‚¬æ¨·â‚¬æ«­è‚ºå£©å¨¢å±›å¹¬î…‡î†¥îˆ„å±›å¾¬åµ¨è”½èš•åŸ¼æ¬¡è¿ªå–®æ¾„è‚ºåˆ®ç–šä½•æ™ƒå˜‰è½¿è‚¯â‚¬è ‹èŸ»èŸ½èŸ¿èƒƒè …èŸ¼è ‚è €å‘³è †è ‡èž‘ä¼Ÿé”Ÿï¿½"
                },
                "maciceland": {
                    "type": "_sbcs",
                    "chars": "è„›è„œè„Ÿè„¡è„©è„°è„ºè°©è„¿èŠ’ç›²èŒ«æ°“èŽ½èŒ…çŒ«é”šæ¯›é“†çŸ›å¯èŒ‚å¸½è´¸è²Œä¹ˆæžšçŽ«ç…¤éœ‰æ²¡çœ‰è„»æŽ³åž„æ‹¢æ‚éˆ¥â’™ç¹ç†‰î†™â”¾åŠ‰éº“ç¯“éˆ®çŠ†å–¢æ¨·åž¶å¤éˆ®ã‚‚å¢ºæ¥¼ç¢Œéˆ­å‚—åžœéˆ­å¾¬â‚¬éˆ­î¿î€¡è¡¡åŠå¿™é…¶é©´éš†å¢éˆ­æ¯±æŽ†å¢—éˆ­å–¡î¿çƒ©â‚¬Î²çŠ†â‚¬è„™è„®è‰—è‰™éˆ¥æ’¯â‚¬æ–ºâ‚¬æº¾â‚¬æ¿ƒâ‚¬æ¨·â‚¬æ«­å°æ£…æ¯é¸¥éˆ¦åŠ¼ã£æƒ·æ‡Šç»ä¹…é“°å°â‚¬æ°£â‚¬ç‚©â‚¬æ‡Šå¯å¨’ä¼±å¬…åŸ«åµœå¹Ÿå¾å±†æ’æ—“æ‹·è„ªè„·è„¹è„µè°‹è—›è—´ç‚‰è—°è—±è—²èµ‚è—µè—³è—"
                },
                "macroman": {
                    "type": "_sbcs",
                    "chars": "è„›è„œè„Ÿè„¡è„©è„°è„ºè°©è„¿èŠ’ç›²èŒ«æ°“èŽ½èŒ…çŒ«é”šæ¯›é“†çŸ›å¯èŒ‚å¸½è´¸è²Œä¹ˆæžšçŽ«ç…¤éœ‰æ²¡çœ‰éˆ¥çŠ…å¥¥â’™ï¼¢Ñ€â‚¬â’™ç¹ç†‰î†™â”¾åŠ‰éº“ç¯“éˆ®çŠ†å–¢æ¨·åž¶å¤éˆ®ã‚‚å¢ºæ¥¼ç¢Œéˆ­å‚—åžœéˆ­å¾¬â‚¬éˆ­î¿î€¡è¡¡åŠå¿™é…¶é©´éš†å¢éˆ­æ¯±æŽ†å¢—éˆ­å–¡î¿çƒ©â‚¬Î²çŠ†â‚¬è„™è„®è‰—è‰™éˆ¥æ’¯â‚¬æ–ºâ‚¬æº¾â‚¬æ¿ƒâ‚¬æ¨·â‚¬æ«­å°æ£…æ¯é¸¥éˆ¦åŠ¼ã‚‚â‚¬å…‰â‚¬çŒ´ç‘é“¿å‚—â‚¬Ã·å°â‚¬æ°£â‚¬ç‚©â‚¬æ‡Šå¯å¨’ä¼±å¬…åŸ«åµœå¹Ÿå¾å±†æ’æ—“æ‹·è„ªè„·è„¹è„µè°‹è—›è—´ç‚‰è—°è—±è—²èµ‚è—µè—³è—"
                },
                "macromania": {
                    "type": "_sbcs",
                    "chars": "è„›è„œè„Ÿè„¡è„©è„°è„ºè°©è„¿èŠ’ç›²èŒ«æ°“èŽ½èŒ…çŒ«é”šæ¯›é“†çŸ›å¯èŒ‚å¸½è´¸è²Œä¹ˆæžšçŽ«ç…¤éœ‰æ²¡çœ‰éˆ¥çŠ…å¥¥â’™ï¼¢Ñ€â‚¬â’™ç¹ç†‰î†™â”¾åŠ‰éº“ç¯“éˆ®çŠ‡å±ç‚©åž¶å¤éˆ®ã‚‚å¢ºæ¥¼ç¢Œéˆ­å‚—åžœéˆ­å¾¬â‚¬éˆ­î¿î€¡è¡¡åŠè†¬è‰§é©´éš†å¢éˆ­æ¯±æŽ†å¢—éˆ­å–¡î¿çƒ©â‚¬Î²çŠ†â‚¬è„™è„®è‰—è‰™éˆ¥æ’¯â‚¬æ–ºâ‚¬æº¾â‚¬æ¿ƒâ‚¬æ¨·â‚¬æ«­å°æ£…æ¯é¸¥éˆ¦åŠ¼ã‚‚â‚¬å…‰â‚¬å·â‘´ï½‚â‚¬Ã·å°â‚¬æ°£â‚¬ç‚©â‚¬æ‡Šå¯å¨’ä¼±å¬…åŸ«åµœå¹Ÿå¾å±†æ’æ—“æ‹·è„ªè„·è„¹è„µè°‹è—›è—´ç‚‰è—°è—±è—²èµ‚è—µè—³è—"
                },
                "macthai": {
                    "type": "_sbcs",
                    "chars": "èŠ¦ç¦„éˆ¥ï¸¼î•±é“«å¿¥î•·é“«æ›ªî•½é“«å¬¶î•³é“«æˆ¯î•¹é“«æ¤»â‚¬æº¾â‚¬æ¿“î•¾é”Ÿè§£â‚¬î®î•©é“«å¤›î•ªé“«å—­î•¬é“«å ¬î•¯é“«å¶î•µé“«æ“„î•»éˆ¥æ¨·â‚¬æ¬™æ‹·è½å–”ä½®ç«¶å–”å†Ÿç«¸å–”å‘§ç«¼å–”å›™ç¬€å–”å¤ƒç¬‚å–”å¬¥ç¬‡å–”åµ¿ç¬Œå–”å¿‡ç¬Žå–”æˆ‰ç¬’å–”æ’ªç¬–å–”æ›•ç¬˜å–”æ¤¸ç¬œå–”æ¬Šç¬Ÿå–”æ¶ç¬¢å–”æ¾¿ç¬§å–”ç†°ç¬­å–”âˆ´æ¶ªå–”ï½€è¢±å–”ãƒ ç”«å–”Ð¾è¾…å–”â”¼é‡œå–”î‚è„¯å–”î…™åºœå–”îˆ•èµ´å–”ç¼–è¦†å–”èµ¤å¤å–”æŽ‚ä»˜å–”ç²ªçˆ¶å–”çŒè´Ÿé”˜åº“â‚¬å¬§â‚¬æ’¯â‚¬æ–·ç¼šå–™â‚¬å–™ä½®ç®“å–™å†Ÿç®˜å–™å‘§ç®šå–™å›™ç®žå–™å¤ƒç® å–™å¬¥ç®¤å–™å¶åŠ‰å–™å¿‡ç®°å–™æˆ‰ç®³å–™æ’ªç®¶å–™æ›•ç®¹å–™æ¤¸ç®»å–™æ«¬î†™â•‹æ‹·é”Ÿæ–¤æ‹·é”Ÿï¿½"
                },
                "macturkish": {
                    "type": "_sbcs",
                    "chars": "è„›è„œè„Ÿè„¡è„©è„°è„ºè°©è„¿èŠ’ç›²èŒ«æ°“èŽ½èŒ…çŒ«é”šæ¯›é“†çŸ›å¯èŒ‚å¸½è´¸è²Œä¹ˆæžšçŽ«ç…¤éœ‰æ²¡çœ‰éˆ¥çŠ…å¥¥â’™ï¼¢Ñ€â‚¬â’™ç¹ç†‰î†™â”¾åŠ‰éº“ç¯“éˆ®çŠ†å–¢æ¨·åž¶å¤éˆ®ã‚‚å¢ºæ¥¼ç¢Œéˆ­å‚—åžœéˆ­å¾¬â‚¬éˆ­î¿î€¡è¡¡åŠå¿™é…¶é©´éš†å¢éˆ­æ¯±æŽ†å¢—éˆ­å–¡î¿çƒ©â‚¬Î²çŠ†â‚¬è„™è„®è‰—è‰™éˆ¥æ’¯â‚¬æ–ºâ‚¬æº¾â‚¬æ¿ƒâ‚¬æ¨·â‚¬æ«­å°æ£…æ¯é¸¥è‡‘è‡’é™Œè°‹è‰¦è‰§éˆ¥Ã·å°â‚¬æ°£â‚¬ç‚©â‚¬æ‡Šå¯å¨’ä¼±å¬…åŸ«åµœå¹Ÿå¾å±†æ’æ—“æ‹·è„ªè„·è„¹è„µé”Ÿå‰¿å–«æºŒîˆ€æ¨™æ«µæ¯¬æ†æ¾¦æµ°ï¿½"
                },
                "macukraine": {
                    "type": "_sbcs",
                    "chars": "è¢—è¢˜è¢™è¢šè¢›è¢è¢žè¢Ÿè¢ è¢¡è¢£è¢¥è¢¦è¢§è¢¨è¢©è¢ªå°å­æ ¡è‚–å•¸ç¬‘æ•ˆæ¥”äº›æ­‡èŽéž‹åæŒŸæºéˆ¥çŠ…è€™æƒµï¼¢Ñ€â‚¬â’™ç¼Žå–¡î†™â”¾åŠ‰è¢€è¤£éˆ®çŠ˜å†„æ’¯åž¶å¤éˆ®ã‚‚å¢ºè¤¨ç¢Œè¦’è¢Œè¢†è¤¦è¢Šè¤©è¢Žè¤­è¢è¤®è¤¬è¢‡å¢éˆ­æ¯±æŽ†å¢—éˆ­å–¡î¿çƒ©â‚¬Î²çŠ˜å¬”æµ¶å±Ÿæº æ›—â‚¬æ’¯â‚¬æ–ºâ‚¬æº¾â‚¬æ¿ƒâ‚¬æ¨·â‚¬æ«­å°â‚¬ç‚å¹¯ç‚å¾°ç†²å‰¸è¡¼è¤¢è¤Ÿé‚ªæ–œèƒè°å†™æ¢°å¸èŸ¹æ‡ˆæ³„æ³»è°¢å±‘è–ªèŠ¯é”Œè¤‰è¤‹è¤Œè¤è¤Žè¤è¤‘è¤”è¤•è¤–è¤—è¤˜è¤œè¤è¤žé™‡"
                },
                "koi8r": {
                    "type": "_sbcs",
                    "chars": "éˆ¹â‚¬éˆ¹å‚—æ”²éˆ¹æ„¨æ•‚éˆ¹æ¨·æ•Žéˆ¹ã‚‚æ•©éˆ¹ç²¹æ•¿éˆ»â‚¬éˆ»å‹¨æž…éˆ»å±¸æž‘éˆ»æˆ”æž“éˆ»æ’¯å°ƒéˆ»çŠ«åž¯éˆ­æ°£å¢—éˆ®ã‚‚å¢ºè½éˆ±Ã·å¥¥çŒœè®¿å°æ™²éˆºæˆ”æ™µè¤¢éˆºæ’¯æ™¹éˆºæ›—æ™¼éˆºæ¤»æ™¿éˆºæ¬Œæšéˆºæ¶’æš…éˆºæ¿ƒæšˆéˆºç†²æšŠéˆºâŒ’ä½²æšéˆºï½‚æšéˆºãƒ¢æš’éˆºÑ€æš”éˆºâ”¾æš˜éˆºî‚Ÿæššæ¼è¤žé‚ªæ–œè¤‘å†™æ¢°è¤Žè°è¤æ‡ˆæ³„æ³»è°¢å±‘è–ªèŠ¯é”Œè¤Ÿè¤‰è¤‹è¤Œè¤å¸èƒè¤œè¤˜èŸ¹è¤•è¤è¤–è¤”è¤—æŒŸè¢—è¢˜ç¬‘è¢›è¢è‚–è¢šå•¸è¢ è¢¡è¢£è¢¥è¢¦è¢§è¢¨è¢©æºè¢ªå°å­æ ¡è¢žè¢™éž‹èŽè¢Ÿæ¥”åäº›æ•ˆæ­‡"
                },
                "koi8u": {
                    "type": "_sbcs",
                    "chars": "éˆ¹â‚¬éˆ¹å‚—æ”²éˆ¹æ„¨æ•‚éˆ¹æ¨·æ•Žéˆ¹ã‚‚æ•©éˆ¹ç²¹æ•¿éˆ»â‚¬éˆ»å‹¨æž…éˆ»å±¸æž‘éˆ»æˆ”æž“éˆ»æ’¯å°ƒéˆ»çŠ«åž¯éˆ­æ°£å¢—éˆ®ã‚‚å¢ºè½éˆ±Ã·å¥¥çŒœè®¿å°æ™²éˆºæˆ”æ™µè¤¢è¤¦éˆºæ–žæ „æ¤»æ™½éˆºæ¨·æš€éˆºæ°£æšƒè¦’éˆºæ¿ƒæšˆéˆºç†²æšŠéˆºâŒ’ä½‡å‹¨æšŽè¢‰è¢Šéˆºï¸¹æš“éˆºã„¢æš•éˆºî€±æ„¨æššæ¼è¤žé‚ªæ–œè¤‘å†™æ¢°è¤Žè°è¤æ‡ˆæ³„æ³»è°¢å±‘è–ªèŠ¯é”Œè¤Ÿè¤‰è¤‹è¤Œè¤å¸èƒè¤œè¤˜èŸ¹è¤•è¤è¤–è¤”è¤—æŒŸè¢—è¢˜ç¬‘è¢›è¢è‚–è¢šå•¸è¢ è¢¡è¢£è¢¥è¢¦è¢§è¢¨è¢©æºè¢ªå°å­æ ¡è¢žè¢™éž‹èŽè¢Ÿæ¥”åäº›æ•ˆæ­‡"
                },
                "koi8ru": {
                    "type": "_sbcs",
                    "chars": "éˆ¹â‚¬éˆ¹å‚—æ”²éˆ¹æ„¨æ•‚éˆ¹æ¨·æ•Žéˆ¹ã‚‚æ•©éˆ¹ç²¹æ•¿éˆ»â‚¬éˆ»å‹¨æž…éˆ»å±¸æž‘éˆ»æˆ”æž“éˆ»æ’¯å°ƒéˆ»çŠ«åž¯éˆ­æ°£å¢—éˆ®ã‚‚å¢ºè½éˆ±Ã·å¥¥çŒœè®¿å°æ™²éˆºæˆ”æ™µè¤¢è¤¦éˆºæ–žæ „æ¤»æ™½éˆºæ¨·æš€éˆºæ°£æšƒè¦’è¤³éˆºç‚©æš‰éˆºçŠ«æš‹è¡¼è¢†éˆºï¼°å–°å›£æš’éˆºÑ€æš”éˆºâ”¾æš˜è¦‘è¢”æ¼è¤žé‚ªæ–œè¤‘å†™æ¢°è¤Žè°è¤æ‡ˆæ³„æ³»è°¢å±‘è–ªèŠ¯é”Œè¤Ÿè¤‰è¤‹è¤Œè¤å¸èƒè¤œè¤˜èŸ¹è¤•è¤è¤–è¤”è¤—æŒŸè¢—è¢˜ç¬‘è¢›è¢è‚–è¢šå•¸è¢ è¢¡è¢£è¢¥è¢¦è¢§è¢¨è¢©æºè¢ªå°å­æ ¡è¢žè¢™éž‹èŽè¢Ÿæ¥”åäº›æ•ˆæ­‡"
                },
                "koi8t": {
                    "type": "_sbcs",
                    "chars": "è¦œè¦”éˆ¥æ°æŽ†â‚¬ç‚©â‚¬ï¸¹â‚¬çŠ«â‚¬â˜…æ‹·éˆ¥è€™æ–¥â‚¬æŒ‚æƒ¨èŠ¬è®¹æ‹·è¦›éˆ¥æ¨·â‚¬æ¬Œâ‚¬æº¾â‚¬æ¿ƒâ‚¬â‘©â‚¬æ’¯â‚¬æ—“æ‹·éˆ©î®æ‹·éˆ¥çŒ´æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·ç›ˆèµ¢è¤¢é™‡æ¨±å¨„æ‚é”Ÿæ–¤æ‹·é”Ÿé“°î¿îƒî„»î‡†æ‹·æŽ³å¤è™è¡¼é”ŸæŽ¥â’™å µå‡¤æ‹·éˆ©æ µæ‹·ç¦„é”Ÿæ–¤æ‹·é”Ÿé“°â”­å¹®é¶æ¯–å–°è‘±ç¬›å‹‘é€žå‘…æ„Ÿå‰ç›’æå¤¹å«æ‹˜åž¦å¾°â‚¬è¤‹è¤Œè¤å¸èƒè¤œè¤˜èŸ¹è¤•è¤è¤–è¤”è¤—æŒŸè¢—è¢˜ç¬‘è¢›è¢è‚–è¢šå•¸è¢ è¢¡è¢£è¢¥è¢¦è¢§è¢¨è¢©æºè¢ªå°å­æ ¡è¢žè¢™éž‹èŽè¢Ÿæ¥”åäº›æ•ˆæ­‡"
                },
                "armscii8": {
                    "type": "_sbcs",
                    "chars": "è™è›èœèèžèŸè è¡è¢è£è¤è¥è¦è§è¨è«è¬è­è®è¯è°è²è³è´èµè¶è·è¸è¹èºè»è¼è½é”Ÿè¡—å›ï¿½)(ç¦„èŠ¦éˆ¥ï¿½.è« ,-è¬¯éˆ¥Ï†æº¦æµ¾ç‚˜é—­â‰¡èˆ±â’ƒç—´ï¼´å‡‘ã´å«¡ãƒ”å¢©Ï…æ°›Ð³åˆšã„”æ‹â”°èµ«î€³å¾½î‚‘é¢Šîƒ¯ç§¸î…èŠî†«ç©ºîˆŠâ‚¬çž»è«„æ¯¡è«…è©¹è«†ç²˜è«‡æ²¾è«ˆç›è«‰æ–©è«Šè¾—è«‹å´­è«Œå±•è«è˜¸è«Žæ ˆè«å è«æˆ˜è«‘ç«™è«’æ¹›è«“è¬¤è«”è¬¥è«•è¬§è«–è¬¨è«—è¬©è«˜è¬ªè«™è¬«è«é”Ÿï¿½"
                },
                "rk1048": {
                    "type": "_sbcs",
                    "chars": "è¢€è¢ƒéˆ¥æ°€æ’¯â‚¬ç‚©â‚¬ï¸¹â‚¬çŠ«â‚¬â™€å“éˆ¥é¶å¤†â‚¬å‰å¨¨æ°ç›’å¾°æŽ†â‚¬æ¨·â‚¬æ¬Œâ‚¬æº¾â‚¬æ¿ƒâ‚¬â‘©â‚¬æ’¯â‚¬æ—“æ‹·éˆ©â’€æ¬Œâ‚¬è²‰æ°æµºè°Žç†‰çŠšè€™åº‡æ¨Žã³îŸŠÎ²îž®ä¼®â”®æ–î¿îƒî„»î†©î†™å¥¥æ¯™å–²æ â”žå¾·å µè´¹æˆ”å‰¸è¦”ç¦„è¨–å°§é¥çˆ·è¢—è¢˜è¢™è¢šè¢›è¢è¢žè¢Ÿè¢ è¢¡è¢£è¢¥è¢¦è¢§è¢¨è¢©è¢ªå°å­æ ¡è‚–å•¸ç¬‘æ•ˆæ¥”äº›æ­‡èŽéž‹åæŒŸæºé‚ªæ–œèƒè°å†™æ¢°å¸èŸ¹æ‡ˆæ³„æ³»è°¢å±‘è–ªèŠ¯é”Œè¤‰è¤‹è¤Œè¤è¤Žè¤è¤‘è¤”è¤•è¤–è¤—è¤˜è¤œè¤è¤žè¤Ÿ"
                },
                "tcvn": {
                    "type": "_sbcs",
                    "chars": "\u0000è„·å³„î˜‚u0003å³„î€æ»‘å³„ç”›u0007\b\t\n\u000b\f\r\u000e\u000f\u0010å³„ã„¡è¯å³„å†Œæ¬¢å³„è¯¥æ¿æ·®\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~è„Œå²·â’šå… ä½±ç±‚å²·å¤ºå«è„ å²·æ¨ªæ­è„¡å²·ç¾”ç²è„¤å³„åŸ¬îŸ‹å¶€ç²–è„ªå³„å¹Ÿæš¶æ’«ç²šå³„æ¨¶ç²¶å³„ç‚¨ç²»å³„æ° è™Žè„µå³„ÎµîŸŠçŠ‡å¯å¯å¨’æ–ŠçŠ‰î‡¹æƒ¸å… â’šî€¢é›Œâˆ‘æ¾³æˆ“å–Šè™è™Šè™„è™‚è¹‹è„¿å²·ï¼£ï¼£â™‚éª¸å²·å†Œç½•å²·ç¿…æ—±å²·îˆ–æå²·î†¸å®³å²·ã„¡é‚¯å²·ã‚ç²ˆå²·ä¸°éª‡å²·â”½éŸ©å²·ãƒ¡æ¶µçŒ«å³„å‚–å¤¯å²·çŸ«â”½æ±—å³„ä½±ç²Œå³„å‘©åšŽå³„åš¸îƒ¼ç²”å³„å‹§å£•å³„æ˜â”Ÿî…šç²™è²Œå³„æ–¸ç²¡çŽ«è´¸å³„å¶€ç²¨å³„æ›–ç²­å³„æˆ“ç²°å³„æ¿ç²ºå³„â™‚ç²µå³„ï¼£è´¯ç²¬å³„îž£â”Ÿæ¨ªäº’å³„î‚žç”»å³„îˆ–å“—å³„è´¬æ€€å³„ä¸°è¿˜åª’å³„æ»‡ç²£"
                },
                "georgianacademy": {
                    "type": "_sbcs",
                    "chars": "è™è›éˆ¥æ¯±æŽ†â‚¬ç‚©â‚¬ï¸¹â‚¬çŠ«â‚¬âˆ·å—â‚¬èŠ­çŠ«â‚¬å¤æ–åµšå¹å¾›æ„¨â‚¬æ¨·â‚¬æ¬Œâ‚¬æº¾â‚¬æ¿ƒâ‚¬â‘©â‚¬æ’¯â‚¬æ–”æº¾åŠ‰æ‹§éˆ¥å·æ’€æ¾›ç‚å˜ŽçŠ…Ã·â’™ï¼¢ã¢ãƒ‚Î²îž îŸŠâ”žî€¡î¿îƒî„»î†™î‡·å¥¥ç”­çŒœé™ˆç»°å¾·å µä»¿å˜Žå­¤éƒå®¦æ‚¸é“°éŸ­é…·å„›é†¿æˆ“å„é†¿æ’«å„Ÿé†¿æ›–å„¢é†¿æ¤ºå„¤é†¿æ¬‹å„¦é†¿æ¶å„¨é†¿æ¿å„ªé†¿ç†±å„¬é†¿â™‚å„®é†¿ï½å„°é†¿ãƒ¡å„²é†¿Ð¿å„´é†¿â”½å„¶é†¿î‚žå„¸é†¿î…šå„ºé†¿îˆ–å„¼é†¿è´¬å„¾é†¿ç¿…å…‡é†¿æ»‡å…ŒèŽ½çŒ«èŒ…é”šæ¯›çŸ›é“†å¯èŒ‚å†’å¸½è²Œè´¸ä¹ˆçŽ«æžšæ¢…é…¶éœ‰ç…¤æ²¡çœ‰åª’é•æ¯"
                },
                "georgianps": {
                    "type": "_sbcs",
                    "chars": "è™è›éˆ¥æ¯±æŽ†â‚¬ç‚©â‚¬ï¸¹â‚¬çŠ«â‚¬âˆ·å—â‚¬èŠ­çŠ«â‚¬å¤æ–åµšå¹å¾›æ„¨â‚¬æ¨·â‚¬æ¬Œâ‚¬æº¾â‚¬æ¿ƒâ‚¬â‘©â‚¬æ’¯â‚¬æ–”æº¾åŠ‰æ‹§éˆ¥å·æ’€æ¾›ç‚å˜ŽçŠ…Ã·â’™ï¼¢ã¢ãƒ‚Î²îž îŸŠâ”žî€¡î¿îƒî„»î†™î‡·å¥¥ç”­çŒœé™ˆç»°å¾·å µä»¿å˜Žå­¤éƒå®¦æ‚¸é“°éŸ­é…·å„›é†¿æˆ“å„é†¿æ’«å„Ÿé†¿æ›–å„¢é†¿è´¬å„£é†¿æ¨¶å„¥é†¿æ° å„§é†¿æº¼å„¾é†¿æ¿å„ªé†¿ç†±å„¬é†¿â™‚å„®é†¿ç¿…å„¯é†¿ã‚å„±é†¿ï¸¶å„³é†¿ã„¡å„µé†¿î€å„·é†¿îƒ¼å„¹é†¿î†¸å…‡é†¿îˆ–å„¼é†¿å¾—Î³îž¡îŸ‹â”Ÿî€¢î‚€îƒžî„¼î†šî‡¸æ‡Šæ³µè£è¶ç–µå¾—ç¹è®¿è¯¥å§‘å¥½å¹»æµŽçŸ«ä¹…ï¿½"
                },
                "pt154": {
                    "type": "_sbcs",
                    "chars": "è¦—è¦“èµ¢è¦”éˆ¥ç‚©â‚¬Ïƒå…‘î†©æƒ¨îˆ‡çŠ›â’â’æ°é˜‚æ•¢æ¤»â‚¬æ¨·â‚¬æ¬Œâ‚¬æº¾â‚¬æ¿ƒâ‚¬â‘©â‚¬æ’¯â‚¬æ– éª‹èŠ¬âˆ®ï¼²ï¼²æµºç°å­¤çŠ˜å¹¯ç‚å „ã„’æ¨¢å¥¥îž®ä¼®â”¯æ¨Žî¿îƒ®î‡·î†©æºŒè€™æ¯™å–²æ †æ«½â”žå µè´¹æˆ”å‰¸è¨–ç¦„è¤¬è¦è€€è¦žè¢—è¢˜è¢™è¢šè¢›è¢è¢žè¢Ÿè¢ è¢¡è¢£è¢¥è¢¦è¢§è¢¨è¢©è¢ªå°å­æ ¡è‚–å•¸ç¬‘æ•ˆæ¥”äº›æ­‡èŽéž‹åæŒŸæºé‚ªæ–œèƒè°å†™æ¢°å¸èŸ¹æ‡ˆæ³„æ³»è°¢å±‘è–ªèŠ¯é”Œè¤‰è¤‹è¤Œè¤è¤Žè¤è¤‘è¤”è¤•è¤–è¤—è¤˜è¤œè¤è¤žè¤Ÿ"
                },
                "viscii": {
                    "type": "_sbcs",
                    "chars": "\u0000\u0001å²·çžˆu0003\u0004å²·ç˜é‚¯\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013å³„ç¦±u0015\u0016\u0017\u0018å³„ç«†u001a\u001b\u001c\u001då³„ç¢¶u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~å²·çŠªå¯’å²·æ¬æ†¾å²·ã‚å®³å²·ã„¡å«å²·åšç„Šå²·è¸žç²ˆå³„å‚–ç²å³„å—Žç²£å³„æŽ…ç²©å³„æ £ç²¯å³„â‘¨ç²´å³„æº¼ç²¸å³„å¨½ç² å³„å±·ç²“å³„Îµã„¡æŠ¤å³„è£æ›–å‡½å²·è´¬æ‚å²·ãƒ¡éª‡å²·â”½æ¶µå²·ç»“æ±—å²·é…·ç²Šå³„å†¡ç²Žå³„å›œç²¦å³„æ’«ç²«å³„æ¤ºç²»èŒ½å³„æ¬‹ç²·å³„ç†±ç²™å³„æ¬èŠ±å³„î€æ»‘å•¤å³„æµ§î‡¸â‚¬è„•è„—è„™å²·â’›å‚–æ’¼å²·å¾—åŸ«å£å¨½æ±‰è„¤è„¥æŠ¹å³„è¡¬æ„¥å“—è„ªè„«è„­å²·â™‚çŽ¯å³„î‚žç”»è„µè„·å³„è´¯åè„»å³„âˆ‘æ‡ŠçŠ†âˆ¶â’šï½æµ·è†¬å³„îˆ–éŸ©çŒ«èŒ…é”šå²·å¹»îƒžî„½â”½ç²”è†½å³„æ³µè£è¶ç–µæ»‡ç²¡å³„å¶€äº’éœ‰ç…¤å†œå³„îž¡ç»“å”¬å³„ï¿½"
                },
                "iso646cn": {
                    "type": "_sbcs",
                    "chars": "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#æ¥¼%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}éˆ¥ï¿½é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·"
                },
                "iso646jp": {
                    "type": "_sbcs",
                    "chars": "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[æ¥¼]^_`abcdefghijklmnopqrstuvwxyz{|}éˆ¥ï¿½é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·"
                },
                "hproman8": {
                    "type": "_sbcs",
                    "chars": "è™è›èœèèžèŸè è¡è¢è£è¤è¥è¦è§è¨è«è¬è­è®è¯è°è²è³è´èµè¶è·è¸è¹èºè»è¼è½è„Œè„—è„ è„¢è„£è„¦è„§éº“è—¡è—›ç¯“è—´è„µè„¹éˆ§ã¢î‡¸æ¾é“°æ‡Šåš¸îž¡æ‡¨ç”­Ã·æŸ¯ã¢ï¼¢ãƒ‚îž¤æ–â’šâ’šî€¢ç–µå¹»âˆ¶â”Ÿè¶å¥½çŠ†îŸ‹è£å§‘ã£î‚€ç¹æµŽå¤î†šæ¨å–¢ãƒƒî„¼è¯¥Î³åŠ½îƒžæŸ®æºå£î‡¸ç†‹æ–†ä¼±å… ï¼£æƒ·æ‡Šåµœå±†æ’æ—æš¶è¹¬çŠˆâˆ¶æ¯°è¯¥æ£µç»éŸ­ä»¿å¾·å µé”¯â‚¬æ–…æ‚¸é“°î€¡éƒî‚Ÿæž²ç¦„å¤é”Ÿï¿½"
                },
                "macintosh": {
                    "type": "_sbcs",
                    "chars": "è„›è„œè„Ÿè„¡è„©è„°è„ºè°©è„¿èŠ’ç›²èŒ«æ°“èŽ½èŒ…çŒ«é”šæ¯›é“†çŸ›å¯èŒ‚å¸½è´¸è²Œä¹ˆæžšçŽ«ç…¤éœ‰æ²¡çœ‰éˆ¥çŠ…å¥¥â’™ï¼¢Ñ€â‚¬â’™ç¹ç†‰î†™â”¾åŠ‰éº“ç¯“éˆ®çŠ†å–¢æ¨·åž¶å¤éˆ®ã‚‚å¢ºæ¥¼ç¢Œéˆ­å‚—åžœéˆ­å¾¬â‚¬éˆ­î¿î€¡è¡¡åŠå¿™é…¶é©´éš†å¢éˆ­æ¯±æŽ†å¢—éˆ­å–¡î¿çƒ©â‚¬Î²çŠ†â‚¬è„™è„®è‰—è‰™éˆ¥æ’¯â‚¬æ–ºâ‚¬æº¾â‚¬æ¿ƒâ‚¬æ¨·â‚¬æ«­å°æ£…æ¯é¸¥éˆ¦åŠ¼ã‚‚â‚¬å…‰â‚¬çŒ´ç‘é“¿å‚—â‚¬Ã·å°â‚¬æ°£â‚¬ç‚©â‚¬æ‡Šå¯å¨’ä¼±å¬…åŸ«åµœå¹Ÿå¾å±†æ’æ—“æ‹·è„ªè„·è„¹è„µè°‹è—›è—´ç‚‰è—°è—±è—²èµ‚è—µè—³è—"
                },
                "ascii": {
                    "type": "_sbcs",
                    "chars": "é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·"
                },
                "tis620": {
                    "type": "_sbcs",
                    "chars": "é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ–¤æ‹·é”Ÿæ´ç«µå–”å‚•ç«·å–”å‹¦ç«»å–”å—‹ç«¾å–”å —ç¬å–”å¨»ç¬…å–”å±¶ç¬‰å–”åºŽç¬å–”æ„¢ç¬å–”æŽ„ç¬“å–”æ–·ç¬—å–”æ ¢ç¬šå–”æ¨´ç¬å–”æ°žç¬¡å–”æº¹ç¬£å–”ç‚§ç¬©å–”çŠ©æµ®å–”â‘§ç¦å–”ã‚€å¼—å–”ï¸µæŠšå–”ã„ ä¿¯å–”î€¿æ–§å–”îƒ»è…‘å–”î†·è…å–”ç­å‰¯å–”ä¾§èµ‹å–”è„†å‚…å–”å¤šé˜œå–”è†è…¹å–”çŒ´æ‹·é”Ÿæ–¤æ‹·é”Ÿæ´ç¼šå–™â‚¬å–™ä½®ç®“å–™å†Ÿç®˜å–™å‘§ç®šå–™å›™ç®žå–™å¤ƒç® å–™å¬¥ç®¤å–™åµ¿ç®®å–™å¿‡ç®°å–™æˆ‰ç®³å–™æ’ªç®¶å–™æ›•ç®¹å–™æ¤¸ç®»å–™æ¬Šç®½å–™æ¶³æ‹·é”Ÿæ–¤æ‹·é”Ÿï¿½"
                }
            }

            /***/ }),
        /* 96 */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";
            var Buffer = __webpack_require__(2).Buffer;

            // Multibyte codec. In this scheme, a character is represented by 1 or more bytes.
            // Our codec supports UTF-16 surrogates, extensions for GB18030 and unicode sequences.
            // To save memory and loading time, we read table files only when requested.

            exports._dbcs = DBCSCodec;

            var UNASSIGNED = -1,
                GB18030_CODE = -2,
                SEQ_START  = -10,
                NODE_START = -1000,
                UNASSIGNED_NODE = new Array(0x100),
                DEF_CHAR = -1;

            for (var i = 0; i < 0x100; i++)
                UNASSIGNED_NODE[i] = UNASSIGNED;


            // Class DBCSCodec reads and initializes mapping tables.
            function DBCSCodec(codecOptions, iconv) {
                this.encodingName = codecOptions.encodingName;
                if (!codecOptions)
                    throw new Error("DBCS codec is called without the data.")
                if (!codecOptions.table)
                    throw new Error("Encoding '" + this.encodingName + "' has no data.");

                // Load tables.
                var mappingTable = codecOptions.table();


                // Decode tables: MBCS -> Unicode.

                // decodeTables is a trie, encoded as an array of arrays of integers. Internal arrays are trie nodes and all have len = 256.
                // Trie root is decodeTables[0].
                // Values: >=  0 -> unicode character code. can be > 0xFFFF
                //         == UNASSIGNED -> unknown/unassigned sequence.
                //         == GB18030_CODE -> this is the end of a GB18030 4-byte sequence.
                //         <= NODE_START -> index of the next node in our trie to process next byte.
                //         <= SEQ_START  -> index of the start of a character code sequence, in decodeTableSeq.
                this.decodeTables = [];
                this.decodeTables[0] = UNASSIGNED_NODE.slice(0); // Create root node.

                // Sometimes a MBCS char corresponds to a sequence of unicode chars. We store them as arrays of integers here.
                this.decodeTableSeq = [];

                // Actual mapping tables consist of chunks. Use them to fill up decode tables.
                for (var i = 0; i < mappingTable.length; i++)
                    this._addDecodeChunk(mappingTable[i]);

                this.defaultCharUnicode = iconv.defaultCharUnicode;


                // Encode tables: Unicode -> DBCS.

                // `encodeTable` is array mapping from unicode char to encoded char. All its values are integers for performance.
                // Because it can be sparse, it is represented as array of buckets by 256 chars each. Bucket can be null.
                // Values: >=  0 -> it is a normal char. Write the value (if <=256 then 1 byte, if <=65536 then 2 bytes, etc.).
                //         == UNASSIGNED -> no conversion found. Output a default char.
                //         <= SEQ_START  -> it's an index in encodeTableSeq, see below. The character starts a sequence.
                this.encodeTable = [];

                // `encodeTableSeq` is used when a sequence of unicode characters is encoded as a single code. We use a tree of
                // objects where keys correspond to characters in sequence and leafs are the encoded dbcs values. A special DEF_CHAR key
                // means end of sequence (needed when one sequence is a strict subsequence of another).
                // Objects are kept separately from encodeTable to increase performance.
                this.encodeTableSeq = [];

                // Some chars can be decoded, but need not be encoded.
                var skipEncodeChars = {};
                if (codecOptions.encodeSkipVals)
                    for (var i = 0; i < codecOptions.encodeSkipVals.length; i++) {
                        var val = codecOptions.encodeSkipVals[i];
                        if (typeof val === 'number')
                            skipEncodeChars[val] = true;
                        else
                            for (var j = val.from; j <= val.to; j++)
                                skipEncodeChars[j] = true;
                    }

                // Use decode trie to recursively fill out encode tables.
                this._fillEncodeTable(0, 0, skipEncodeChars);

                // Add more encoding pairs when needed.
                if (codecOptions.encodeAdd) {
                    for (var uChar in codecOptions.encodeAdd)
                        if (Object.prototype.hasOwnProperty.call(codecOptions.encodeAdd, uChar))
                            this._setEncodeChar(uChar.charCodeAt(0), codecOptions.encodeAdd[uChar]);
                }

                this.defCharSB  = this.encodeTable[0][iconv.defaultCharSingleByte.charCodeAt(0)];
                if (this.defCharSB === UNASSIGNED) this.defCharSB = this.encodeTable[0]['?'];
                if (this.defCharSB === UNASSIGNED) this.defCharSB = "?".charCodeAt(0);


                // Load & create GB18030 tables when needed.
                if (typeof codecOptions.gb18030 === 'function') {
                    this.gb18030 = codecOptions.gb18030(); // Load GB18030 ranges.

                    // Add GB18030 decode tables.
                    var thirdByteNodeIdx = this.decodeTables.length;
                    var thirdByteNode = this.decodeTables[thirdByteNodeIdx] = UNASSIGNED_NODE.slice(0);

                    var fourthByteNodeIdx = this.decodeTables.length;
                    var fourthByteNode = this.decodeTables[fourthByteNodeIdx] = UNASSIGNED_NODE.slice(0);

                    for (var i = 0x81; i <= 0xFE; i++) {
                        var secondByteNodeIdx = NODE_START - this.decodeTables[0][i];
                        var secondByteNode = this.decodeTables[secondByteNodeIdx];
                        for (var j = 0x30; j <= 0x39; j++)
                            secondByteNode[j] = NODE_START - thirdByteNodeIdx;
                    }
                    for (var i = 0x81; i <= 0xFE; i++)
                        thirdByteNode[i] = NODE_START - fourthByteNodeIdx;
                    for (var i = 0x30; i <= 0x39; i++)
                        fourthByteNode[i] = GB18030_CODE
                }
            }

            DBCSCodec.prototype.encoder = DBCSEncoder;
            DBCSCodec.prototype.decoder = DBCSDecoder;

            // Decoder helpers
            DBCSCodec.prototype._getDecodeTrieNode = function(addr) {
                var bytes = [];
                for (; addr > 0; addr >>= 8)
                    bytes.push(addr & 0xFF);
                if (bytes.length == 0)
                    bytes.push(0);

                var node = this.decodeTables[0];
                for (var i = bytes.length-1; i > 0; i--) { // Traverse nodes deeper into the trie.
                    var val = node[bytes[i]];

                    if (val == UNASSIGNED) { // Create new node.
                        node[bytes[i]] = NODE_START - this.decodeTables.length;
                        this.decodeTables.push(node = UNASSIGNED_NODE.slice(0));
                    }
                    else if (val <= NODE_START) { // Existing node.
                        node = this.decodeTables[NODE_START - val];
                    }
                    else
                        throw new Error("Overwrite byte in " + this.encodingName + ", addr: " + addr.toString(16));
                }
                return node;
            }


            DBCSCodec.prototype._addDecodeChunk = function(chunk) {
                // First element of chunk is the hex mbcs code where we start.
                var curAddr = parseInt(chunk[0], 16);

                // Choose the decoding node where we'll write our chars.
                var writeTable = this._getDecodeTrieNode(curAddr);
                curAddr = curAddr & 0xFF;

                // Write all other elements of the chunk to the table.
                for (var k = 1; k < chunk.length; k++) {
                    var part = chunk[k];
                    if (typeof part === "string") { // String, write as-is.
                        for (var l = 0; l < part.length;) {
                            var code = part.charCodeAt(l++);
                            if (0xD800 <= code && code < 0xDC00) { // Decode surrogate
                                var codeTrail = part.charCodeAt(l++);
                                if (0xDC00 <= codeTrail && codeTrail < 0xE000)
                                    writeTable[curAddr++] = 0x10000 + (code - 0xD800) * 0x400 + (codeTrail - 0xDC00);
                                else
                                    throw new Error("Incorrect surrogate pair in "  + this.encodingName + " at chunk " + chunk[0]);
                            }
                            else if (0x0FF0 < code && code <= 0x0FFF) { // Character sequence (our own encoding used)
                                var len = 0xFFF - code + 2;
                                var seq = [];
                                for (var m = 0; m < len; m++)
                                    seq.push(part.charCodeAt(l++)); // Simple variation: don't support surrogates or subsequences in seq.

                                writeTable[curAddr++] = SEQ_START - this.decodeTableSeq.length;
                                this.decodeTableSeq.push(seq);
                            }
                            else
                                writeTable[curAddr++] = code; // Basic char
                        }
                    }
                    else if (typeof part === "number") { // Integer, meaning increasing sequence starting with prev character.
                        var charCode = writeTable[curAddr - 1] + 1;
                        for (var l = 0; l < part; l++)
                            writeTable[curAddr++] = charCode++;
                    }
                    else
                        throw new Error("Incorrect type '" + typeof part + "' given in "  + this.encodingName + " at chunk " + chunk[0]);
                }
                if (curAddr > 0xFF)
                    throw new Error("Incorrect chunk in "  + this.encodingName + " at addr " + chunk[0] + ": too long" + curAddr);
            }

            // Encoder helpers
            DBCSCodec.prototype._getEncodeBucket = function(uCode) {
                var high = uCode >> 8; // This could be > 0xFF because of astral characters.
                if (this.encodeTable[high] === undefined)
                    this.encodeTable[high] = UNASSIGNED_NODE.slice(0); // Create bucket on demand.
                return this.encodeTable[high];
            }

            DBCSCodec.prototype._setEncodeChar = function(uCode, dbcsCode) {
                var bucket = this._getEncodeBucket(uCode);
                var low = uCode & 0xFF;
                if (bucket[low] <= SEQ_START)
                    this.encodeTableSeq[SEQ_START-bucket[low]][DEF_CHAR] = dbcsCode; // There's already a sequence, set a single-char subsequence of it.
                else if (bucket[low] == UNASSIGNED)
                    bucket[low] = dbcsCode;
            }

            DBCSCodec.prototype._setEncodeSequence = function(seq, dbcsCode) {

                // Get the root of character tree according to first character of the sequence.
                var uCode = seq[0];
                var bucket = this._getEncodeBucket(uCode);
                var low = uCode & 0xFF;

                var node;
                if (bucket[low] <= SEQ_START) {
                    // There's already a sequence with  - use it.
                    node = this.encodeTableSeq[SEQ_START-bucket[low]];
                }
                else {
                    // There was no sequence object - allocate a new one.
                    node = {};
                    if (bucket[low] !== UNASSIGNED) node[DEF_CHAR] = bucket[low]; // If a char was set before - make it a single-char subsequence.
                    bucket[low] = SEQ_START - this.encodeTableSeq.length;
                    this.encodeTableSeq.push(node);
                }

                // Traverse the character tree, allocating new nodes as needed.
                for (var j = 1; j < seq.length-1; j++) {
                    var oldVal = node[uCode];
                    if (typeof oldVal === 'object')
                        node = oldVal;
                    else {
                        node = node[uCode] = {}
                        if (oldVal !== undefined)
                            node[DEF_CHAR] = oldVal
                    }
                }

                // Set the leaf to given dbcsCode.
                uCode = seq[seq.length-1];
                node[uCode] = dbcsCode;
            }

            DBCSCodec.prototype._fillEncodeTable = function(nodeIdx, prefix, skipEncodeChars) {
                var node = this.decodeTables[nodeIdx];
                for (var i = 0; i < 0x100; i++) {
                    var uCode = node[i];
                    var mbCode = prefix + i;
                    if (skipEncodeChars[mbCode])
                        continue;

                    if (uCode >= 0)
                        this._setEncodeChar(uCode, mbCode);
                    else if (uCode <= NODE_START)
                        this._fillEncodeTable(NODE_START - uCode, mbCode << 8, skipEncodeChars);
                    else if (uCode <= SEQ_START)
                        this._setEncodeSequence(this.decodeTableSeq[SEQ_START - uCode], mbCode);
                }
            }



            // == Encoder ==================================================================

            function DBCSEncoder(options, codec) {
                // Encoder state
                this.leadSurrogate = -1;
                this.seqObj = undefined;

                // Static data
                this.encodeTable = codec.encodeTable;
                this.encodeTableSeq = codec.encodeTableSeq;
                this.defaultCharSingleByte = codec.defCharSB;
                this.gb18030 = codec.gb18030;
            }

            DBCSEncoder.prototype.write = function(str) {
                var newBuf = new Buffer(str.length * (this.gb18030 ? 4 : 3)),
                    leadSurrogate = this.leadSurrogate,
                    seqObj = this.seqObj, nextChar = -1,
                    i = 0, j = 0;

                while (true) {
                    // 0. Get next character.
                    if (nextChar === -1) {
                        if (i == str.length) break;
                        var uCode = str.charCodeAt(i++);
                    }
                    else {
                        var uCode = nextChar;
                        nextChar = -1;
                    }

                    // 1. Handle surrogates.
                    if (0xD800 <= uCode && uCode < 0xE000) { // Char is one of surrogates.
                        if (uCode < 0xDC00) { // We've got lead surrogate.
                            if (leadSurrogate === -1) {
                                leadSurrogate = uCode;
                                continue;
                            } else {
                                leadSurrogate = uCode;
                                // Double lead surrogate found.
                                uCode = UNASSIGNED;
                            }
                        } else { // We've got trail surrogate.
                            if (leadSurrogate !== -1) {
                                uCode = 0x10000 + (leadSurrogate - 0xD800) * 0x400 + (uCode - 0xDC00);
                                leadSurrogate = -1;
                            } else {
                                // Incomplete surrogate pair - only trail surrogate found.
                                uCode = UNASSIGNED;
                            }

                        }
                    }
                    else if (leadSurrogate !== -1) {
                        // Incomplete surrogate pair - only lead surrogate found.
                        nextChar = uCode; uCode = UNASSIGNED; // Write an error, then current char.
                        leadSurrogate = -1;
                    }

                    // 2. Convert uCode character.
                    var dbcsCode = UNASSIGNED;
                    if (seqObj !== undefined && uCode != UNASSIGNED) { // We are in the middle of the sequence
                        var resCode = seqObj[uCode];
                        if (typeof resCode === 'object') { // Sequence continues.
                            seqObj = resCode;
                            continue;

                        } else if (typeof resCode == 'number') { // Sequence finished. Write it.
                            dbcsCode = resCode;

                        } else if (resCode == undefined) { // Current character is not part of the sequence.

                            // Try default character for this sequence
                            resCode = seqObj[DEF_CHAR];
                            if (resCode !== undefined) {
                                dbcsCode = resCode; // Found. Write it.
                                nextChar = uCode; // Current character will be written too in the next iteration.

                            } else {
                                // TODO: What if we have no default? (resCode == undefined)
                                // Then, we should write first char of the sequence as-is and try the rest recursively.
                                // Didn't do it for now because no encoding has this situation yet.
                                // Currently, just skip the sequence and write current char.
                            }
                        }
                        seqObj = undefined;
                    }
                    else if (uCode >= 0) {  // Regular character
                        var subtable = this.encodeTable[uCode >> 8];
                        if (subtable !== undefined)
                            dbcsCode = subtable[uCode & 0xFF];

                        if (dbcsCode <= SEQ_START) { // Sequence start
                            seqObj = this.encodeTableSeq[SEQ_START-dbcsCode];
                            continue;
                        }

                        if (dbcsCode == UNASSIGNED && this.gb18030) {
                            // Use GB18030 algorithm to find character(s) to write.
                            var idx = findIdx(this.gb18030.uChars, uCode);
                            if (idx != -1) {
                                var dbcsCode = this.gb18030.gbChars[idx] + (uCode - this.gb18030.uChars[idx]);
                                newBuf[j++] = 0x81 + Math.floor(dbcsCode / 12600); dbcsCode = dbcsCode % 12600;
                                newBuf[j++] = 0x30 + Math.floor(dbcsCode / 1260); dbcsCode = dbcsCode % 1260;
                                newBuf[j++] = 0x81 + Math.floor(dbcsCode / 10); dbcsCode = dbcsCode % 10;
                                newBuf[j++] = 0x30 + dbcsCode;
                                continue;
                            }
                        }
                    }

                    // 3. Write dbcsCode character.
                    if (dbcsCode === UNASSIGNED)
                        dbcsCode = this.defaultCharSingleByte;

                    if (dbcsCode < 0x100) {
                        newBuf[j++] = dbcsCode;
                    }
                    else if (dbcsCode < 0x10000) {
                        newBuf[j++] = dbcsCode >> 8;   // high byte
                        newBuf[j++] = dbcsCode & 0xFF; // low byte
                    }
                    else {
                        newBuf[j++] = dbcsCode >> 16;
                        newBuf[j++] = (dbcsCode >> 8) & 0xFF;
                        newBuf[j++] = dbcsCode & 0xFF;
                    }
                }

                this.seqObj = seqObj;
                this.leadSurrogate = leadSurrogate;
                return newBuf.slice(0, j);
            }

            DBCSEncoder.prototype.end = function() {
                if (this.leadSurrogate === -1 && this.seqObj === undefined)
                    return; // All clean. Most often case.

                var newBuf = new Buffer(10), j = 0;

                if (this.seqObj) { // We're in the sequence.
                    var dbcsCode = this.seqObj[DEF_CHAR];
                    if (dbcsCode !== undefined) { // Write beginning of the sequence.
                        if (dbcsCode < 0x100) {
                            newBuf[j++] = dbcsCode;
                        }
                        else {
                            newBuf[j++] = dbcsCode >> 8;   // high byte
                            newBuf[j++] = dbcsCode & 0xFF; // low byte
                        }
                    } else {
                        // See todo above.
                    }
                    this.seqObj = undefined;
                }

                if (this.leadSurrogate !== -1) {
                    // Incomplete surrogate pair - only lead surrogate found.
                    newBuf[j++] = this.defaultCharSingleByte;
                    this.leadSurrogate = -1;
                }

                return newBuf.slice(0, j);
            }

            // Export for testing
            DBCSEncoder.prototype.findIdx = findIdx;


            // == Decoder ==================================================================

            function DBCSDecoder(options, codec) {
                // Decoder state
                this.nodeIdx = 0;
                this.prevBuf = new Buffer(0);

                // Static data
                this.decodeTables = codec.decodeTables;
                this.decodeTableSeq = codec.decodeTableSeq;
                this.defaultCharUnicode = codec.defaultCharUnicode;
                this.gb18030 = codec.gb18030;
            }

            DBCSDecoder.prototype.write = function(buf) {
                var newBuf = new Buffer(buf.length*2),
                    nodeIdx = this.nodeIdx,
                    prevBuf = this.prevBuf, prevBufOffset = this.prevBuf.length,
                    seqStart = -this.prevBuf.length, // idx of the start of current parsed sequence.
                    uCode;

                if (prevBufOffset > 0) // Make prev buf overlap a little to make it easier to slice later.
                    prevBuf = Buffer.concat([prevBuf, buf.slice(0, 10)]);

                for (var i = 0, j = 0; i < buf.length; i++) {
                    var curByte = (i >= 0) ? buf[i] : prevBuf[i + prevBufOffset];

                    // Lookup in current trie node.
                    var uCode = this.decodeTables[nodeIdx][curByte];

                    if (uCode >= 0) {
                        // Normal character, just use it.
                    }
                    else if (uCode === UNASSIGNED) { // Unknown char.
                        // TODO: Callback with seq.
                        //var curSeq = (seqStart >= 0) ? buf.slice(seqStart, i+1) : prevBuf.slice(seqStart + prevBufOffset, i+1 + prevBufOffset);
                        i = seqStart; // Try to parse again, after skipping first byte of the sequence ('i' will be incremented by 'for' cycle).
                        uCode = this.defaultCharUnicode.charCodeAt(0);
                    }
                    else if (uCode === GB18030_CODE) {
                        var curSeq = (seqStart >= 0) ? buf.slice(seqStart, i+1) : prevBuf.slice(seqStart + prevBufOffset, i+1 + prevBufOffset);
                        var ptr = (curSeq[0]-0x81)*12600 + (curSeq[1]-0x30)*1260 + (curSeq[2]-0x81)*10 + (curSeq[3]-0x30);
                        var idx = findIdx(this.gb18030.gbChars, ptr);
                        uCode = this.gb18030.uChars[idx] + ptr - this.gb18030.gbChars[idx];
                    }
                    else if (uCode <= NODE_START) { // Go to next trie node.
                        nodeIdx = NODE_START - uCode;
                        continue;
                    }
                    else if (uCode <= SEQ_START) { // Output a sequence of chars.
                        var seq = this.decodeTableSeq[SEQ_START - uCode];
                        for (var k = 0; k < seq.length - 1; k++) {
                            uCode = seq[k];
                            newBuf[j++] = uCode & 0xFF;
                            newBuf[j++] = uCode >> 8;
                        }
                        uCode = seq[seq.length-1];
                    }
                    else
                        throw new Error("iconv-lite internal error: invalid decoding table value " + uCode + " at " + nodeIdx + "/" + curByte);

                    // Write the character to buffer, handling higher planes using surrogate pair.
                    if (uCode > 0xFFFF) {
                        uCode -= 0x10000;
                        var uCodeLead = 0xD800 + Math.floor(uCode / 0x400);
                        newBuf[j++] = uCodeLead & 0xFF;
                        newBuf[j++] = uCodeLead >> 8;

                        uCode = 0xDC00 + uCode % 0x400;
                    }
                    newBuf[j++] = uCode & 0xFF;
                    newBuf[j++] = uCode >> 8;

                    // Reset trie node.
                    nodeIdx = 0; seqStart = i+1;
                }

                this.nodeIdx = nodeIdx;
                this.prevBuf = (seqStart >= 0) ? buf.slice(seqStart) : prevBuf.slice(seqStart + prevBufOffset);
                return newBuf.slice(0, j).toString('ucs2');
            }

            DBCSDecoder.prototype.end = function() {
                var ret = '';

                // Try to parse all remaining chars.
                while (this.prevBuf.length > 0) {
                    // Skip 1 character in the buffer.
                    ret += this.defaultCharUnicode;
                    var buf = this.prevBuf.slice(1);

                    // Parse remaining as usual.
                    this.prevBuf = new Buffer(0);
                    this.nodeIdx = 0;
                    if (buf.length > 0)
                        ret += this.write(buf);
                }

                this.nodeIdx = 0;
                return ret;
            }

            // Binary search for GB18030. Returns largest i such that table[i] <= val.
            function findIdx(table, val) {
                if (table[0] > val)
                    return -1;

                var l = 0, r = table.length;
                while (l < r-1) { // always table[l] <= val < table[r]
                    var mid = l + Math.floor((r-l+1)/2);
                    if (table[mid] <= val)
                        l = mid;
                    else
                        r = mid;
                }
                return l;
            }



            /***/ }),
        /* 97 */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            // Description of supported double byte encodings and aliases.
            // Tables are not require()-d until they are needed to speed up library load.
            // require()-s are direct to support Browserify.

            module.exports = {

                // == Japanese/ShiftJIS ====================================================
                // All japanese encodings are based on JIS X set of standards:
                // JIS X 0201 - Single-byte encoding of ASCII + æ¥¼ + Kana chars at 0xA1-0xDF.
                // JIS X 0208 - Main set of 6879 characters, placed in 94x94 plane, to be encoded by 2 bytes.
                //              Has several variations in 1978, 1983, 1990 and 1997.
                // JIS X 0212 - Supplementary plane of 6067 chars in 94x94 plane. 1990. Effectively dead.
                // JIS X 0213 - Extension and modern replacement of 0208 and 0212. Total chars: 11233.
                //              2 planes, first is superset of 0208, second - revised 0212.
                //              Introduced in 2000, revised 2004. Some characters are in Unicode Plane 2 (0x2xxxx)

                // Byte encodings are:
                //  * Shift_JIS: Compatible with 0201, uses not defined chars in top half as lead bytes for double-byte
                //               encoding of 0208. Lead byte ranges: 0x81-0x9F, 0xE0-0xEF; Trail byte ranges: 0x40-0x7E, 0x80-0x9E, 0x9F-0xFC.
                //               Windows CP932 is a superset of Shift_JIS. Some companies added more chars, notably KDDI.
                //  * EUC-JP:    Up to 3 bytes per character. Used mostly on *nixes.
                //               0x00-0x7F       - lower part of 0201
                //               0x8E, 0xA1-0xDF - upper part of 0201
                //               (0xA1-0xFE)x2   - 0208 plane (94x94).
                //               0x8F, (0xA1-0xFE)x2 - 0212 plane (94x94).
                //  * JIS X 208: 7-bit, direct encoding of 0208. Byte ranges: 0x21-0x7E (94 values). Uncommon.
                //               Used as-is in ISO2022 family.
                //  * ISO2022-JP: Stateful encoding, with escape sequences to switch between ASCII,
                //                0201-1976 Roman, 0208-1978, 0208-1983.
                //  * ISO2022-JP-1: Adds esc seq for 0212-1990.
                //  * ISO2022-JP-2: Adds esc seq for GB2313-1980, KSX1001-1992, ISO8859-1, ISO8859-7.
                //  * ISO2022-JP-3: Adds esc seq for 0201-1976 Kana set, 0213-2000 Planes 1, 2.
                //  * ISO2022-JP-2004: Adds 0213-2004 Plane 1.
                //
                // After JIS X 0213 appeared, Shift_JIS-2004, EUC-JISX0213 and ISO2022-JP-2004 followed, with just changing the planes.
                //
                // Overall, it seems that it's a mess :( http://www8.plala.or.jp/tkubota1/unicode-symbols-map2.html

                'shiftjis': {
                    type: '_dbcs',
                    table: function() { return __webpack_require__(98) },
                    encodeAdd: {'\u00a5': 0x5C, '\u203E': 0x7E},
                    encodeSkipVals: [{from: 0xED40, to: 0xF940}],
                },
                'csshiftjis': 'shiftjis',
                'mskanji': 'shiftjis',
                'sjis': 'shiftjis',
                'windows31j': 'shiftjis',
                'ms31j': 'shiftjis',
                'xsjis': 'shiftjis',
                'windows932': 'shiftjis',
                'ms932': 'shiftjis',
                '932': 'shiftjis',
                'cp932': 'shiftjis',

                'eucjp': {
                    type: '_dbcs',
                    table: function() { return __webpack_require__(99) },
                    encodeAdd: {'\u00a5': 0x5C, '\u203E': 0x7E},
                },

                // TODO: KDDI extension to Shift_JIS
                // TODO: IBM CCSID 942 = CP932, but F0-F9 custom chars and other char changes.
                // TODO: IBM CCSID 943 = Shift_JIS = CP932 with original Shift_JIS lower 128 chars.


                // == Chinese/GBK ==========================================================
                // http://en.wikipedia.org/wiki/GBK
                // We mostly implement W3C recommendation: https://www.w3.org/TR/encoding/#gbk-encoder

                // Oldest GB2312 (1981, ~7600 chars) is a subset of CP936
                'gb2312': 'cp936',
                'gb231280': 'cp936',
                'gb23121980': 'cp936',
                'csgb2312': 'cp936',
                'csiso58gb231280': 'cp936',
                'euccn': 'cp936',

                // Microsoft's CP936 is a subset and approximation of GBK.
                'windows936': 'cp936',
                'ms936': 'cp936',
                '936': 'cp936',
                'cp936': {
                    type: '_dbcs',
                    table: function() { return __webpack_require__(100) },
                },

                // GBK (~22000 chars) is an extension of CP936 that added user-mapped chars and some other.
                'gbk': {
                    type: '_dbcs',
                    table: function() { return __webpack_require__(100).concat(__webpack_require__(101)) },
                },
                'xgbk': 'gbk',
                'isoir58': 'gbk',

                // GB18030 is an algorithmic extension of GBK.
                // Main source: https://www.w3.org/TR/encoding/#gbk-encoder
                // http://icu-project.org/docs/papers/gb18030.html
                // http://source.icu-project.org/repos/icu/data/trunk/charset/data/xml/gb-18030-2000.xml
                // http://www.khngai.com/chinese/charmap/tblgbk.php?page=0
                'gb18030': {
                    type: '_dbcs',
                    table: function() { return __webpack_require__(100).concat(__webpack_require__(101)) },
                    gb18030: function() { return __webpack_require__(102) },
                    encodeSkipVals: [0x80],
                    encodeAdd: {'éˆ§ï¿½': 0xA2E3},
                },

                'chinese': 'gb18030',


                // == Korean ===============================================================
                // EUC-KR, KS_C_5601 and KS X 1001 are exactly the same.
                'windows949': 'cp949',
                'ms949': 'cp949',
                '949': 'cp949',
                'cp949': {
                    type: '_dbcs',
                    table: function() { return __webpack_require__(103) },
                },

                'cseuckr': 'cp949',
                'csksc56011987': 'cp949',
                'euckr': 'cp949',
                'isoir149': 'cp949',
                'korean': 'cp949',
                'ksc56011987': 'cp949',
                'ksc56011989': 'cp949',
                'ksc5601': 'cp949',


                // == Big5/Taiwan/Hong Kong ================================================
                // There are lots of tables for Big5 and cp950. Please see the following links for history:
                // http://moztw.org/docs/big5/  http://www.haible.de/bruno/charsets/conversion-tables/Big5.html
                // Variations, in roughly number of defined chars:
                //  * Windows CP 950: Microsoft variant of Big5. Canonical: http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP950.TXT
                //  * Windows CP 951: Microsoft variant of Big5-HKSCS-2001. Seems to be never public. http://me.abelcheung.org/articles/research/what-is-cp951/
                //  * Big5-2003 (Taiwan standard) almost superset of cp950.
                //  * Unicode-at-on (UAO) / Mozilla 1.8. Falling out of use on the Web. Not supported by other browsers.
                //  * Big5-HKSCS (-2001, -2004, -2008). Hong Kong standard.
                //    many unicode code points moved from PUA to Supplementary plane (U+2XXXX) over the years.
                //    Plus, it has 4 combining sequences.
                //    Seems that Mozilla refused to support it for 10 yrs. https://bugzilla.mozilla.org/show_bug.cgi?id=162431 https://bugzilla.mozilla.org/show_bug.cgi?id=310299
                //    because big5-hkscs is the only encoding to include astral characters in non-algorithmic way.
                //    Implementations are not consistent within browsers; sometimes labeled as just big5.
                //    MS Internet Explorer switches from big5 to big5-hkscs when a patch applied.
                //    Great discussion & recap of what's going on https://bugzilla.mozilla.org/show_bug.cgi?id=912470#c31
                //    In the encoder, it might make sense to support encoding old PUA mappings to Big5 bytes seq-s.
                //    Official spec: http://www.ogcio.gov.hk/en/business/tech_promotion/ccli/terms/doc/2003cmp_2008.txt
                //                   http://www.ogcio.gov.hk/tc/business/tech_promotion/ccli/terms/doc/hkscs-2008-big5-iso.txt
                //
                // Current understanding of how to deal with Big5(-HKSCS) is in the Encoding Standard, http://encoding.spec.whatwg.org/#big5-encoder
                // Unicode mapping (http://www.unicode.org/Public/MAPPINGS/OBSOLETE/EASTASIA/OTHER/BIG5.TXT) is said to be wrong.

                'windows950': 'cp950',
                'ms950': 'cp950',
                '950': 'cp950',
                'cp950': {
                    type: '_dbcs',
                    table: function() { return __webpack_require__(104) },
                },

                // Big5 has many variations and is an extension of cp950. We use Encoding Standard's as a consensus.
                'big5': 'big5hkscs',
                'big5hkscs': {
                    type: '_dbcs',
                    table: function() { return __webpack_require__(104).concat(__webpack_require__(105)) },
                    encodeSkipVals: [0xa2cc],
                },

                'cnbig5': 'big5hkscs',
                'csbig5': 'big5hkscs',
                'xxbig5': 'big5hkscs',
            };


            /***/ }),
        /* 98 */
        /***/ (function(module, exports) {

            module.exports = [["0","\u0000",128],["a1","é”ï¿½",62],["8140","éŠ†â‚¬éŠ†ä½µâ‚¬å‚¦ç´é”›åº›å…“é”›æ°¾ç´±é”›ç‡‚ç´’éŠˆæ¶–å€»éº“é”â‚¬ç¯“é”›æ’…æµšé”›è£¤å…˜éŠ‰ä¿±å€½éŠˆç‚ªâ‚¬å†§ç²·éŠ†å‘«â‚¬å—â‚¬å›¥å…—éˆ¥æ›—â‚¬æ„¶ç´¡é”›ç¡·ç¶–éˆ­ãƒ¯ç¶”éˆ¥ï¸¹â‚¬ãƒ¢â‚¬æ¨·â‚¬æ¬Œâ‚¬æº¾â‚¬æ¿“ç´™é”›å¤ˆâ‚¬æ–»â‚¬æ›ªè“Ÿé”›æ–¤ç¶“é”æ¿„â‚¬ï¿½",9,"é”›å¬¶ç´žå¤è„³"],["8180","æ¢…é”›æ¿ƒå¢µé”›æ»ç´´éˆ®ï¸¹å¢½éˆ­ç‚©åŸ“éˆ¾å‚—æª§æŽ³éˆ¥æµ‹â‚¬æ–¥å‰é”Ÿãƒ¯ç´•é”Ÿç‹…ä¿Šé”›å’ƒç´”é”›å—­ç´›é”›çŠ…Ñ€æ§…éˆ½å‘ªæ£†éˆ¼å¿Šæ£Šéˆ¼å›£æ¢¿éˆ»â™€æž²éˆ»æ–¥æŸŒéˆ»è§£æŸ¤éˆ¥æ±‡â‚¬æŽ†å•‹éˆ«æ„¨å•ˆéˆ«æ’±â‚¬ï¿½"],["81b8","éˆ­å šåž•éˆ¯å—å¦µéˆ¯å‚—å¦°éˆ­îåŸ„"],["81c8","éˆ­Ñ€åŸé”Ÿâ‘©å™¿éˆ¬æ–ºåžéˆ­ï¿½"],["81da","éˆ­çŠ«å§¤éˆ±æŽ†åžˆéˆ­å›£å¢¶éˆ®æŽ†å£€éˆ®î‚Ÿåž°éˆ­è§£åžµéˆ­ç¢˜åŸ†éˆ­ï¿½"],["81f0","éˆ©î‚Ÿâ‚¬æ‰³æ«™éˆ¾î…›æ«”éˆ¥çŠ«â‚¬Ã·ï¿½"],["81fc","éˆ¼ï¿½"],["824f","é”›ï¿½",9],["8260","é”›ï¿½",25],["8281","é”ï¿½",25],["829f","éŠ‡ï¿½",82],["8340","éŠˆï¿½",62],["8380","éŠ‰ï¿½",22],["839f","èž’",16,"å±",6],["83bf","ä¼ª",16,"èŸ½",6],["8440","è¢—",5,"è¡¼è¢ž",25],["8470","é‚ª",5,"è¤¢å¸",7],["8480","èŠ¯",17],["849f","éˆ¹â‚¬éˆ¹å‚—æ”²éˆ¹æ„¨æ•‡éˆ¹æ–ºæ•Žéˆ¹îƒ½æ•œéˆ¹ç²¹æ•¿éˆ¹ä½²æ”¦éˆ¹å¿Šæ•éˆ¹æ¶’æ•†éˆ¹ï½‚æ•µéˆ¹î‚Ÿæ•¾éˆºå¬§æ•”éˆ¹îˆ—æ•¤éˆ¹å°æ–‚éˆ¹æ¿ƒæ•¯éˆ¹ãƒ¢æ•»éˆºï¿½"],["8740","éˆ¶ï¿½",19,"éˆªï¿½",9],["875f","éŠ”å¤ˆå¯¯éŠ“î¬å´“éŠ“æ¨¸å°ŽéŠ“å†¦å°ªéŠ”æˆ™å´¡éŠ“å¶ƒå°éŠ“ï½ƒå°—éŠ”å¨¿å°°éŠ•æº¿å¸©éŠ•ç‚ªå¸‹éŠ•å¿‹å¼°éŠ•ï¿½"],["877e","éŠ”ï¿½"],["8780","éŠ†æ¿„â‚¬ç†²å‰¸éŠ–å¶åŠ‡éŠ‘ï¿½",4,"éŠä¾¿åŸéŠå¹¿åµ•éŠ”å§åµ“éˆ®æŽ†å¢¶éˆ­î‚ŸåŸ‰éˆ­æˆ”åž°éˆ¯ãƒ¢åž¹éˆ­ç†²å¨éˆ­ç¢˜åŸ„éˆ­ï¿½"],["889f","æµœæ»ƒæ•„æ¿žå†®æ¨‹éâ‚¬éŽ°æ¶™å°æ¿®å •â‚¬ãˆ£æ‡™é‘¼æ»…îŸ®éŽ®î…å½™å¨“ãƒ¦æ£´é’ï¹å§¦æ¦€åž«î•¸é¦Ñ„æž´éŽµåžç–€æ¿®æ„¯æ«¥æ¤‹å¯¸è€½ç¼é¹ƒç•®éŽ´æ «çŸ¡çšå³°ç•¨æ´åž«å¯œé†æ¥î”é—‚å›¬ç€ºé‰å¿Žäº’æµ¼å©ç¶…æ¸šæ¿†äº¯é¥æ’ã—æ¿®æ–¿â–‰çå¤‹å„«éŽ°å¿”åžé„æ’´î˜ªéè™¹æ™±é£æ‰®Ð©ç¼î… çŸ¾é‘³å†­æ‚—ç›ï½ˆç‘é–¬æ›¢ä¼œé–è®³ç°³æµœãƒ¥ç…™é‘²æŸ¥å„Šçº¾îˆ™ç«´æ¾¹è¾¨å­©é–«å“¥Ãºé‘¼ã„¨å¦ºæ¦˜îˆšåŽ‘é—æ¿æŠéâ€³æ´œæ¿®è¯²ç´©æ¤‹å‰å¸†é‘³ã‚ˆæ•ª"],["8940","é—„ãˆ¤æ«šé—…çŠ»ç†éšå¬ªå½¸ç€¹å›©å„šç¼‡å€Ÿç¸½é—†ã„¥åµ‚æ¦ˆæ»…î€™æ¶“æˆ î•¸é‘·å…¼ç”«é¢æ¨ºæ”§å¨†æ¿Šæ•‹æ¦˜è¯²Ð”é˜â•‚éƒ¸é¡æ»ˆæžé£å‚™ç°¯é–¬å¬®æ´¸é‘½å¿›î˜±é™â€³æŸ–ç€£æ¿å¥–é„çŠ³æ´ºéå‹¬æ¡ˆå¨‰è™«ç©¿éŸæ¶šæ³©ç»Œåº¨ç‰¬é‘»è¾«î” ç‘­çŠ»å«®å¨‘èŒ¬æŸ…é©å©‡îŠéŽ®ï¹ç‘ç“’å©‡æŸŒå§’åº¡å¹éï¿½"],["8980","é¦æŽ‘ç‰¥æ¿‚å‹«î†‹å¯¤èˆµâ‚¬ã„¦å¸ºéŽ»å­˜éƒ¨å©•æ—‚å€¤é’æ—‚åŽµé•æ› å°¶ç»ºä½½å£Žé‘»æˆ£æžŸé–¬çŠ»å¢°æ¦‡æ¶˜ã€…é‚å…¼ç”é¢ãƒ¥åš¬æ¾¶î†¼ã‚¥å¯°â‚¬è¹‡æ»„å¨‚éƒçƒ˜Ã­å¨†Ñ„î†‹éœå¬¬ç¸¼ç‘—æ ­èˆ¹æ¦‡åº¨ç²å®€â„ƒçŸ•é‘½è¯²å‰Ÿçžå¬«å–é‘·å—˜ã€Šé—â€²ç®¼æ·‡å“„åµéŽ­â•‚ä¿¯ç»Œå¿›ç…¶æ¶“å¬ªå¯²æµ î†»ç¶æµ¼æˆ’å°½æµ£å†²å§žé™îˆšæ§ˆæ¾¶å¿“çŒç€¹è·ºî‡–ç»‰æˆžæ®—é‹æ»„ç¦å§å±¾æ¸¤éî‚¤å¼¬ç»‚å¶‡îžŠç»‹è‚©ç•¤é‘ºè¾«å«‘é‘¼å‹®åµŽé‘¿îˆå½„é“¦ï¹î€‘é¢â•„æ³¢æ©ï¹‚äº·é—‡ç‚¶æ®œæ·‡å‹«æ•žéŽ´æˆ å¢®é¢æ˜åš—é‘ºå€Ÿæµ˜ç’©â‚¬é—†å‘´î˜¸æ¤æ›šç²™æµ¼æ°³Ð’é¥ç‚²î”æ¾¹å©‚æ¢è¹‡î‚£â‚¬î…å€²éŽ­ãˆ¡å™½éŽ´æŽ“å«„é€ï¿½"],["8a40","æ¦„ä½¹æ«å§Šç‰ˆæ£éæ‰®æ™«é¨å—™æ¡£é‘ºãƒ¨ç…¿é—å¬®æ® ç’¨æ¿†åš¤é”æƒ§î˜»éœå†²î†Šå®•æ ¨åå§’å‚›åŠ¨çº°å¶ˆæµç›æ¥„â”Žé–¹Ñ‡î€—å¨´î„„Î˜é“”æ¬ç’éŒèƒ¯æ³¿é–³åº¡å¦°é¤å›§æ‚‡å¯¤æ’´å«›éŽ¾è§„ç‰¸éå‘Šî†’é›èŒ¬â’‘ç»Œî‚¥î›¿ç‘™æŽ•ä½†æ“å†®å„¹é—ï½‰æ®§é—ˆâ•î„Ÿå®€è™«ã‚½æ¤¤å¶‰î”“éŽºæ¶šç‘ºå¦¯ï¿½"],["8a80","å§—æŒŽâ’æ¦˜å¶†ç¶—é“æ’æž¬éŽ­ç‰ˆå«­å¨²ç»˜ç«¾å©Šæˆ£æ†¶ç‘œæ„¯çµ¼æ¶“æ—ˆè‚®é™èˆµî™€å¦¯æ´ªç€¯éî„åŽ¹ç»”å†­æŒ·é–²æ»ˆå¸‰é£æ¶¢å·éãˆ£å¯˜é’€è¾©æ’­é’å £åª´é¡ï¸¿å’•æ¸šå†¨å•ç€µæŽ‘åž”é•æ¨ºå«¥å®¸è¯²æž¤é«î„Ð•ç€¹å±½ç•¼ç€µæ¶˜å…±éªžè§„å…éŽ°ç†¸å„éŽ²ç‚¬å½Œéãˆ¡ç…ˆå¦—æ’´ï¼šå¨†ç‚¬ç“å§¹æ¥é¥¥å©¢æ¥çµ½é æ‰®æ•‡é©ï½‡æ¹…ç»”è·¨î…¸ç»¨ï¼„çç¼‚å‰å ªé‘²æ¿Šå¢»é‘¾ç‚¶Î¤ç’œå²ƒæé–­å‹¯æ†«é—æ’»æž’é—ãˆ¤æ«é—Šæ’»ãˆé‘¸æ¨¹çˆ¶éšî‚¢å“ºå®¸å²€å¸ºé§å²€æº‚å®€â•ƒæ©ç’å¬®æ³šé—‹æˆ¦î”™æ¤¤æ¨¹ç´’æµ¼åº¡åµ„é æ»ƒæ«’é©å“„îšŒç€£å¤Šç˜Žå®€æ„¬ç¬‡éªžæƒ§ç¹‰éŽ»î†½æº€éƒæ¥æ£¦éˆç†¸î—å¦«ï¿½"],["8b40","å§—ç†·èµ´å§£å‘®çš¸å§¹ç•Œæš±ç»å î„œç»‹â‚¬ç»±â‚¬å¯°å€Ÿî›´ç‘·æ¨¿æ³Šç’§ç–¯ç²šæ“æ¿‹ï¼‚æ¥±åº¨îƒ—æµœâ‚¬é‹è—‰å‰™æ¿¡æ’³ç–éŽ´îˆ›å¦§éŽ¿î„îƒ•é˜çŠµæž’ç»å›©äº¬é”œæ˜î€›ç’€ç‰ˆå¹€é‘¿å©‡çŽéšå¤Šæ‚†é î‚£î”™å§—æ¨¿â”Œé®Ñ„æ¾‹æ¦›å¶…åµˆç€¹ãˆ£å‰¼é“æ„°â‚¬å—•ç¬œæ¶”å‘¬ç²æµ¼æˆå¼·éšç¨¿î†…å¯®æ’´â‚¬ãƒ¦æ™³"],["8b80","éˆèŠ¥çœ°å§¹å‰å¸¸éå“¥æ‚†ç»Œå‰î€ç»—å ¢ç¤†ç»¯å‰§éƒ¸éƒÑ…å¢°é˜è¯²çœ³å®¸ã„¦å«†éŽ·çŠ³å¯µå¨“çŠºæ«„ç‘·è¾«çª›é–¶å‘Šç´’ç»‚ï¹‚ç“ªæµœã„¤éŸ©æµœîƒ¿ç·µæ¸šçŠ²å„œéå›©î³éåžåš©é—æ–¿å°…é—åž®å½¨é î„€î•¨å®„â€³æŒ¤è¤°å©ƒâ‚¬îˆ›äº¹éŽ­î…Ÿå°‚éæ¬îŸ©å¨‰ä½ºåª¯é™î… ç…°é‘³æ­Œå‰ é‘¸å £æ™­é–®çƒ½å½™é—Šå—îšœæ¤¹æ°«è¯é‘æ¿†ç¢é†ä½¹ã‚­çžâ‚¬é‡å‰ã‚µéœå¤‹î”•ç»®ä½¸å„é•ã‚…æ½Žå®¸é¹ƒå°é‚ã‚†î‚¾å¨†ç•Œæƒ”ç»‚ä½ºîž‰ç»›å¬¬ç©µé‘ºç¡…å¼»ç›èƒ¯îš¤ç’Žç¡…ç¹Žé–²æˆæ‚·é–µâ‚¬æ¶”æ¿†â‚¬è·ºå½žé–è™¹å«éœæ «ç…©é‘»ï¹å‡½æ¤å—›îæ¤æŽ‘å¿éŽ°æ°³æ«ˆé æ‰®â”–é‹è·ºç˜¬é–¬å›¬æ®”æ¶“å‰ç±é–²Ñƒç‰çžï¿½"],["8c40","éŽºæ¨¼ç°å¨Œæ’»æ¾Šæžï¼„î€‰é”å©‡æ®˜ç»®å‚›ç‰€ç»»ç‰ˆî”–é–¸î„€å«´éšæ¶œæŸ…ç‘·æ’¶å…¢æŒå¶‰å„­é—ï¹î•­ç»ä½·ç¸½éŒæƒ§åžœéå‹«æ™¸é¦î… å½§é¨å¬ªîš–è¤°ãˆ ç·žéŽ­åž«å¾éŽ±Ñ„å•¯éŽºå‰æƒ¡éî„æ«™å¦—å‚›ç¬“é£ï¸¾Å„ç»¯è¤ç¥µç¼æ¬‘ç®£ç¼ƒî‚¥å¯§é‘½å©…æ³¹ç‘·å £î €ç’€ï¹å”¤é—‹æ°¶ç¨„é‘ºæ­Œç¹‹æ¦€ï¿½"],["8c80","é”å›¨åž·éŽ¾å†©ç¸ºé—…æ¬î”†éŒæˆžç‘ºå§¹çƒ˜ç¶Œç»Œå¯¸ç¥¼ç›â‚¬ç‘·ï½†æ¹€æµ è·ºâ‚¬ç‘°â‚¬ï¹€ä»´éç…ŽåŸœé“ï½…æž¾é¦å¿“çˆ¡ç€šå±½ç¼“éŽ²å‰åš«éŽ·è™«åµ…å¦žæ»„Ä«é—ç•Œå§®éšî†¾çˆºçº­îˆœå€’éªå²ƒåç‘•å¬­ç‘±ç’©ãˆ£ç²§é–¬ï½‰åµ‰é—„æ´ªî”šæ¥±æ’»åž¢éå†¨å¸«é˜å†²å¤Ÿå¯®ï¸½ç¬¡å©§æ„®å·¹éå‰§ç¥ªé‘¸ç–¯â–ˆç’œæ´ªæªºæ¶”åº¡â‚¬å¬ªå½œé›ç…Žæµæ¿®æˆî„å®¸åžéŸ©å¯®Ñ„åŸœéå‘®çŸå©€æ «å«„ç»¯å©…â’‹é‘²Â¤å„­é‘¿æ‹Œæª¸ç‘¾å›ªæ³•é–³çƒ½æ³§æ¤¤Ñ‡ç´¦æµœæ–¾ç°°æµ¼å¶…å´é›å¤Šæƒ¥æ¿žîˆšç·¦å¯°â„ƒå€å§ŠÑ„ç›éŸæ°±î•¦ç‘¾ç‚¶î€ƒç’€çƒ½å•‡æ¶”ç‚ºç˜”æµœã‚„éƒŠæ¸šîˆšâ‚¬æ¬â‚¬æ §åŽœéî„€å§›é”ç‘°å¬€é˜æ°¬å½›éšï¿½"],["8d40","éšåº¡æž†é§æˆç‘æ¿‚è—‰ç“Ÿç€›æ¿†ç•¯å®¸ãƒ¥é˜€å®¸å³°åž¢æ´å†¨ç°¹æ´å³°ç´­éŽ­æŽ“åŽ¡éŽ¶æ¥å«ŽéŽºÑ„æ•¾é„å‚›æª­é‡å­˜æ¾€éâ„ƒî•¼å¦²å¬«ç™å¨²î…æ—¦å¨“îˆ›ç°¼é¢èŒ¬æ®—çº­î„‚Ç¹ç»¯çŠµç£ªç»±æ¨¼ç¦ç¼è¾«â‚¬æ›¡â‚¬å†­å—é‘²è¾«åŽ°é‘¶å¿šåŸ…é‘½æŽ•î”‘ç›Â¤ç‘³ç’¨ãˆ£è‡£é–®å©‡åºé–´è¾©ç‰½é–¶å¥¸æž»é—„ï¿½"],["8d80","é—‹å‘´î›¾æ¥‚æ©€æ¤¿é“æ¶˜å§­é™å³°æ‚Žæ¾¹æ›Ÿå«¹å©µçŠºè±¹æžç†¼æ±—éå¬ªåŸ¢é›å©‚æµ—ç»Œâ‚¬é–°çƒ½ç¦’æ¦›æŽ”å´‰å©•å¤Žåžé¢æˆæ‹·éŽ¯æ°¶î€‡é™æ¶œç‚¯å§ã‚‰çˆŸæµ å©‚æ´¶é§ã‚…â’•æ¿ æ°­ä»ºéŽ³å›¨æ§’é„å—˜ç‰´å§Šè¾¨è´©é¥æ› æ˜¥é‘¹î‡€ç“Šæµœæ¶—ç¶ˆé™å¤Šæ”©å®“îˆšä¹å®¸î†½ç†å¨Œæ¬‘æ‡—é®å‚îŸ®é–¹æ ¬î—¤é§æ„¬éª‡éŽ¸î‚¢åŸéŒî„€å•€éˆâ‚¬éå¤Šî”£æ¿¡è¯²î†‡è¤°â•‚å¢ éŽºâ„ƒç‰»å§è™«ç¬€éä»‹å™°é˜â‚¬é®æ› ç‰”ç»î…ŸæžŽç»±æ‹Œå½ç‘ä½½ç´šé—…æ¶˜å¢¹é¦ã„¦æ½—ç¼ƒî‡ç—…éæ‘æ½…é—ƒî„ç‰¶å§’å©…åžéœæ’ç£¶é©è‚©î•ºæ¦‰è½°ç¶”é“å©‚æ‹«éŽ¼ç‚¬æ§°éˆæ—€ç…¹ç»å‹­ç“¥ç»±ãˆ¤å°Ÿå¦—æ»ˆî†„ç»—ç‘°å¯µéå©‚åŸ›"],["8e40","ç€µç†¸å«¸éŽ¾î†½æ‘éˆî…Ÿî†‘é’–â•…æ´ƒé¨æ„°ç˜±éŽ¹å²„å¯™æ¥«î‚¤æ¯§é…æŽç¬éŒæ¨ºå¼¬çžè¾¨å„´éŽ¾æŽ“æšŽå¦—ç†ºåš˜éå©„æ•šç» æ¥ƒç°œé““æ›¡ç• ç’©æ¶¢å€æ¤æ„­æŸ†é†î‚£ç•«æµ æ›šç²©æµ¼è½°å¨‡é’å“„å¾ƒé™æ’æ£§é¥æ¶˜ï¼‹æ¿®å¬ªîŽæ¿®åž®ç“™çžå¶…ç«¶ç”¯î‚¢ç¹”éŽ¬æ¿‡å¯šé€îˆšç“¬é‚îˆ›æŸ¦éƒã„¦çŠå§ï¿½"],["8e80","å§ç»˜çš¬é›å‘¯îšŽç»‰ä½ºæŽ£ç»±æ¬‘ä¼ é‘²ãˆ£å‰›é‘·å® î›»ç‘­ç‚¶â”…ç‘­ï¹ç™ç’œî†¿ç¡£ç’©æ»ˆæ³´æ¤‹å…¼î„¨æµœå¬©æŠ€æ¸šå¶…åŽ«ç€›æ¥€î‡¯éŽ±å Ÿå¯”é…å‚›î‚¼å©Šå¬«ä¸é–å‰§æŠé¥æ—‚î—†ç»€é¸¿â‚¬å²ƒâ‚¬å® åšœé’‚æ—‡ç·¸å§¹æ„°ç®å¯®å¿šç“¨æ¦‡î‚¤î·æŒç¨¿ç•­é—†î‚¡ç«·é™åžç…¼æ¾¶åžç˜ç€¹ã‚†å€å©€æŒŽç´—é¤æå”±ç€¹ç†»æ”¢ç»¡çŠ²ä¼ˆéŒç£‹å§–çžÂ¤æ™©ç»ºç‚¶åž˜éæ¬çš éŽ¹ã„¨éƒ¸é‚æ»…åœç»€å‰§ç¤‚é‘°å‘°ç‘µæŒå©‡ä¼„é“”å›¬å‘éŠç†·å«¼ççƒ˜æ½›éè‚©åŸ–é–°å²„å™²é–·î‚¥å«¢ç€µå‚šæ€¥éŽ¯é€›å¯Œé™æ §ç•§éŽµå¬«æ¹µå¨ˆå©„å«¨éçŠµÃ³é‘µî‚¥å®é–°æŽ—î›»éŽæŽ‘å½ˆé›î„î‡´éŽºå ŸÃ¼ç¼î„„æ¸¶é¥æ°¬å¼¾é›ï¿½"],["8f40","ç€¹æ¥€æ°¨å®¸ç‚°æ…¨éŽ°ä½¹å¬€å¨²èŒ¬î…ç»‰å¬¬ç¥©ç»»å¶‡ç¹é‘·î…¡åž·é’‚æ„¯î”‹ç‘—èŒ¶ç•°éŸ«ç£‹é›†é–«éåŽ é–°î„„æ³¦é–±æ»€ç²ˆæµ£å¿“åŽ–é—ä½¸ç·­éŽ´åº¢ç…å§¹ä½¹ç¬…é›ï½‡ç”«é–²å¶‰å¦°é™æ–¿î˜¾ç€¹æŒŽçª‡ç»æ¿ˆåºœç»®æ¶˜ã€é”ç†·åš­ç›æ’¹å ªæ·‡å©‚éƒ´é„ãƒ§ç›ç»”ï½ˆåž³æ¤åž®å™¯å¯°î…æ£³å¦¤îˆ›ç•¨å¨£ï¿½"],["8f80","å©§æ ¨é¥¯é©å‰§ç£¾å®¸ï¿ ä¼’é–±å›¬çˆ¢é‘ï¹€åžµéŽµâ‚¬é†æˆžæ´å¨“æ°¬æ†¾ç»¶æŽ”è®²é‡æ­ŒæŸ‰é’˜ç–¯îµé”â•å½Šæ¿‚å†²ç°­å¯°æ„­ä»Œé–¶ã‚‰æ«ŽéŒå³°åŠ…é•æ¿†å°ƒé—å›§å½«éã„¥æ™¢éžåžæ§œæ¿‚ã„¥îžŠæ¿žç…Žî†Œçå——çš¬çæˆçš»æ´å‹«ç°¥å¯¤çŠ²æ¡¨éŽµæŒŽå¦±éŽ·æ¶™å¸‰éŽ¹é”‹æ§†é„å±¾æ§¶é…èˆµæ¾—å§Šãˆ¡îŸ…å¦¯åž«å¸ƒå¨‘å Ÿç¬å©€æ¨¼åŠ¶é’ï¸¾åŽé¥å›©æ¸·çº­æ¿ˆî˜¦ç»ãƒ§Ðžç»”çŠµç‘§ç»®Ñ…åž‚é‘²æ ¬å½‡é’‚å¬­æ™§ç›æ¿Šï¼“ç‘·ç†»îŸ‡ç‘­æ—‡â”ç’žÂ¤ç¢é–±ã‚‰å¢»é–¸é¹ƒæ‚©é—…æ»ˆç…æ¶“å©ç¬€æ¶“ç‚°ç®ºéæ¥€å£ˆé©åº¡ç‰¬æ¾¹å±½î‚½ç”¯å‘Šå„éŽ¿ç‚¬æ½¯é‰æ ¨ç¥«é˜å‰æš¢ç»Œï½ˆæ€ç’€æŸ¥å–é–·çŠ²æ§ºé©æ’®ï¼ž"],["9040","éŽ·î…Ÿî˜²å¨ˆæ «åšŸç»»æ—‡ä¼”é‘¹èŒ¶Ð•æ¤‹ç†»æ½Ÿæˆåžç›Žæµ¼é•ä¿Šæ¸šé›æ”ªæ¿žçŠ²ç˜½ç€µâ•ç¸¾éŽ±åº¢å°Ÿé‚ç‰ˆæªµå¦«î†½îœ€å¨´å‘Šç¹é¢å´‡æŸŸéªç†ºîš£ç»‰ï¸¾é—¯é‘·ï½ˆå§±é’–î‡Îšç‘·é¸¿éŸ©æˆæ¶¢â‚¬æŸ¥åšŒé—‡å›¦æ±‰æµ ä½¸åž‰æ¿‰é›ï¼Œçå¬¬æ•‹çå€ŸåŽ§ç‘·å©…ç¹€é—„ï½‰æ¾€ç»—ãƒ¨ç¡é—‹å ¥åƒé¥å†²å¸¹"],["9080","é–«æ¥€æƒžé¨å‚šå¼—éŽºã„¦æŒ‰éå©„æ½¯ç»®å¬¬ç¹ç›ä¼´äº—é–°æ—ˆå¯ªé–·æ©€æ®¢éŸç‚ºç“å®•å›§æ—¦éç‰ˆç‘ç“’ã„©æ´“éŽ¹î†½æ½å¦žæ¬’å¼²é—‹æ¥…æ³™ç‘ç‚¬ç·žéŽ½å“„î‡­æ¶“æ «â‚¬î„‚æš†é„îˆšå™­é’è·ºå«æ¿®æ’³ç·›éŽ¬Ñ„åžšé€æŒŽæš£é„ç†¸æ«žå¦«å‰çˆ¾å§ï½†ç«»é—èŒ¬æ•“é©æ¶šç°¿é‘±æ §ï¼ç‘å€Ÿã‚¿ç‘¾çŠºç¡ç’œå¬®â‚¬æ¿‹å•‹é—ˆæŽ—æ½¤é‚å¤Œâ—£é‘´å—›æ¯£ç”¯î…Ÿå„¨éŽ´æ°­æž¼é„æ—€ç€½é­å´‡îŸ«ç»«å¶‡å¦‡é‘´å©…é“‚ç’§ã‚ˆè´°éŸ«ç†ºâ…¸é’å›¨å«éŽºãƒ¦æ†˜éŽ¶æ¨¿Åç»å†ªç˜ˆç‘¾î„„æ´©ç»²æƒ°åž–é“¦å¤‰ç²°éå å´ˆé—çŠ²î…ºçå‚šçš·å®¸æ¿‡åž¿éŽµå›¨æŒµéæ’´ç‰¬å¨‰å¤‹ç¥¬å¨²æ¥ç…‹å¨¼æ»…åŽ§é“èŠ¥æ£†ç»Œè·¨î†„ç»¶ï¿½"],["9140","ç»»å©„é²¸é‘µé¸¿åž±é‘¸ç¡…æž½ç‘­î†¿ç¡¯ç’ºç”¸ä¼•é–¬çƒ½å§¯é–µæˆ¦æ»æ¥«î†¼å¢ é å‹¬å‡ é’è·ºåç»‚å‘¯ç®·é‘¶å´‡ç¡¯é£å±½î”–å®€ã„¦å¸¾é‡ç‚¬æµ—å¦¤æ°±å«é¤å¿•æžŽç»€åº£îš›ç»‰ç†ºçŸ–ç»±çŠµç¥«é“‡å›ªÃ¹é—ƒå©šä»­æ¦§çŠ²å„³é“é›å¼»é™ãˆ â‚¬å¤ŠæŸ‚æ¾¹î†¼îš”é–è—‰ç•«çžã‚…å¯¾éŽ¯ï½†å…‚éŽ¹æ»„å·¸éŽ¸æŒŽå¹“"],["9180","éŽ¿å¶†æ£­é‡ç‘°ç½šå¦²å¶†Ð«å©•æ› åš—æµœå¤Œæ£­é©å“¥ç¡ç»¯ç†ºçª‚ç¼æ»†ä»­é‘½å¤Žå´¢é’î„ƒæˆé’˜æ˜î—Šç’§ä¼´â‚¬ä¾€ä¼ƒé–¹æ¥…æ¹æ¥±æŽ‘å„šæ¾§æ¥å•‚é‘·æ’¹æ•¸ç’å ¥â‚¬çŠ±ç¸¾é‹æ‘å¢–é—è™«ä¼…éŽ¹å¤‹æ½«å¨“î„ƒå†»é–«ç†¶ç¹”çžç‚¶ç¡¦éƒå¿•ç¨“é—æŽ•î•»éèˆµå¼®ç€›æ¨ºî„¤çå©ƒæ‚•é‰æˆ¦ä» æµ æ §î˜¿æ¾¶î…å‘ç‘­æˆæ–é«æ›žÎ•éŽ¯ç‰ˆå¢¦éŒä½½åŸ–å¦¤æ›¢æª§æ¤å‹¯Ã¨æµ£æ’³çˆ¢ç€µæâ‚¬æ„¬è„–ç”¯îˆšç·ŸéŽ¬çŠ³åŽ éŽ´å­˜æµ›å¨‰ç‰ˆç²¸é‘³åº¤å™é‘»æ—‡î•°ç’¨æâ‚¬â‚¬é–«î‡€æ®œæ¦›æ¶¢ç˜ºæµ ï½…å½´æ¾¶Ñ…îƒ‡é–±å¶‰î”‘æ¦‰è§„ç²·éŽÑƒå´œéŸå‹«ç•¢éŽµæ¨»å§™éŽ·æ’´å¹¶å©µîˆœæ‚½ç‘·æ¥…æƒ›å©µä½½î»é‘¼ç¨¿åš™é“”ç¨¿å½§"],["9240","é™â•€çµ¾é–¬æ—‡æ™¯æ¿‚î‡åŠšå®¸ç•Œî§æˆæŒŽî—Ÿç’‹é£Žå«ºæ¥¸å ŸÅ„ç‘¾é¢è…¹é—æ¨ºæ§…é§ï¸½åª´éŽºãˆ¡æ£ªå§åº¢è´°å©€æ¶šå”é­î… î¬ç» î†ç—˜é‘°å€Ÿå„é“”å¬­ç£é–¸æ¶˜æ´ æ¾¹å›§å­£é‚î…Ÿæ®©å¦¾â‚¬å¨ˆç”µæ•ºç’œå›§â‚¬ã‚‡ç…¡é¦æ¿ç´±éŽ­ãƒ¦æ«¤å§¹çŠµæ£¿ç»‹æ°±ç–†é‘·ç£‹æ¹—é–¬å‘´Î¤ç»¡å¤Œæš…ç»”åœ­ç“šé’ƒï¿½"],["9280","é–«æ„®Ð—ç»æŽ•å°ªç€šï¼„æ½ƒæ¶“î…å¾Šç€¹æ¬ç¹éŽ¶èŠ¥æ¨‡éŒè¾¨æ•žé“î‚¥ã€‹ç‘·å©šåŽ§é–¶æŠ½î•å¦¯æ¥ƒâ‚¬ï¸¾å°“é‘»Ñ†æ†²ç’¨îˆ™ç«µéå——å™µé å¬ªî‡ªç”¯æ §èµ‹æ´ä½¸ç´¨å¯®é›å°†å¯°å­˜åš¥éŽ¸æˆžæ®ºéˆæ¿‡ç–†é—æŽ”æ•½éªé¸¿ä¼Œé‘´ç¡…å€é“¦æƒ°î€žç’œæ»†ç§´ç’ºæŠ½å§Žé—€çƒ½çˆžæ§Œãƒ¥åª´éŽ¹æ¥ƒæ´¿éˆæ›ŸçŸ†éå¶ˆç¡Ÿé–¹î‡€æ«å¨²ãƒ¥î–å¦žåº¢î‘æ©ä»‹å¸¤é¥æ¶¢â‚¬æ°¬î”Ÿéå‚›å¹‹å¦²è®³çµ»å©•î„ç…’æˆæ˜æ• ç¼æ’®å´å¦žæŒŽæ¡¨é§î„ï¼—ç€£î„‚èˆ¹é–î„æ‚é–²ï½‰æ´žæµœî…ç¶†é‹æ»ƒä¼’é“å†­çŸ é›å ç‰‘ç€¹æ°¬ç¬£æ´æ›žæ¶µå¯¤å³°ç´µéŽ®å±¾å§·éŽ¸çƒ˜å½å§Šîˆ›çœ¬çº°å›©î›³ç»‹å¬¬çª¢é‘¹å›ªâ–Šç’œï¹ç®˜é–«ï¿½"],["9340","é–­æåŠ–é–²æ©€ç´Ÿå¨‰ãƒ¦æ†³éŽ¿ãˆ¡æš¤å©Šå¯¸æ®‘ç»—æ¶¢ä»¼é–ºæˆžæ±‰éæ’ç«ŸéŽ¾ã‚ˆç¶…æ©î…¢å¢‘éç¨¿ï½žæ¾¶â•çæ´æ¥åŠç»¾å¿•æ•Žç’¨è‰°è™Žæ¤¤æ¶šå£æµ¼æ¿‡î†–å©¢è¾©æ•¯é—†è¯²åŽ§éšæ„¬ç‰­æ¿‰æ¥€ÎœçžçŠ²ç·¬é‚æ¥æ½¨å¨“ï¼„æ«¥é‘¿ç†»æŠ„é–«æ—ˆå…˜é–¸å¶‡ç‰“é®å“„å§«æ´ï¹€æ¹¡æ¿‚å­˜â‚¬æŽ‘â‚¬æŽ‘åŽ·éï¿½"],["9380","é‘å¶…åžéžæ„¬î”™æ¿‰æ¨ºîšœç€¹æ›žæ‰¯å®¥å¬«å§éŽ¶æ›ŸæƒŒé‰è¾¨î”ˆå§Šå…¼î—¤é©æ¥çªå©€îˆ›ç¨•éîˆœå™²è¤°æ’¶æ£™ç»é£Žç“‘ç»›æ—‚ç“›ç»¯æ «å½“é’æ‹Œæ‡€é’‘â•„æ£¨ç‘·åº¤ç‘’ç’žå—šç¬é–«å†®â‚¬å¿›æ‚ªé—„å •ç‰ æ¥±ä¼´æ£™éå¶…å«Šéšå±½çˆžçåº¢å•©éŽ¾ç‚´ç¤Šé¬å´‡î¢é‘³ç£‹æ‚‡é–¬æ’»å¦³å®„çŠ»ç£­é–åž®ç·±å¯°è™«ç¨–é—åœ­æ½±ç»‚è·¨î‡™å§£æŽ”å«­ç‘¾î…ŸçˆŸå§—â€³åš«ç»ä½¹ã”çžå©‡æ‰¯é‘»î‚¢ç˜é–°å¤Œâ‚¬ç‚²æ«¢çžîˆ›å„‘éï¸½çŸŠç’žæ°¶äº–é—‹æ’³æ†«é‡å›¬åž—æ¿‚å ¥å…éå‘¬ç®¥é‘î‡æž¡ç’Žåº£ä»’éŽ¹æ´ªå´‘å¦¤ãˆ¤Î¥ç»ºå‹­æš¦é—æ¥îš¥æŒç†¼æ´ å§¹æ¿…ç°©çç…Žç´£æ©â•å¯•ç’©æˆ£å€é“ç‘°è±¢éƒãƒ¤é’©éï¿½"],["9440","æ¿¡å‚šç¿±é—Šî†»æ¢æ¿¡å©‚ç¹Šç‘¾å¶†ä¿Šç»‚æ‰®ã‚¢ç€µÑ†æ‡•éšî‚¤å•½éªžæ‘åº·éŽ¹ç»˜æŒŒé•å†ªçŸ˜æ¶”å†¨æ‚£æ¶”å¬ªç…–é¤ãˆ¡åå©µå†ªç£µé‘³å€ŸåŠ¤é‘¶èƒ¯é™ç‘•æ¥„æ®¼å®¸å­˜å¦¸éŽ¾î…¡î›¬é‰é”‹å°å¨²å‰§æƒ—é®æ‘ï¹©ç¼ƒä½ƒå§¯æ££îƒ¿ç å¯¤å†©å«•éŽºæŽ“æ™½é‰îˆœæ³é—å²ƒå„—é‘²é¸¿ç¼‰é–°å¶…â‚¬å¶…ç…¿æ¿¯æŽ“î•ª"],["9480","å¦¤å´‡å…é™å€Ÿåœæ¾¹èŒ¶ç¢ƒé—„îˆâ‚¬æ¬’æ¾˜ç»‰ã‚‡ç…£é’€â•€é›†é“ãƒ¥å´¥éŽ·å¶†ç…†å¨‰å©„æ«§ç» æ—‚çŸ”é‘¸æƒ°æ½æ©î‚£æ´•å©•çŠµåžŽç»ºæ¶œå¸¿æ¤ä¾€å®³é‘ç•Œî†ˆçº­èŒ¬î†é‘²å›©ç“å¨…ã„¥åŸ‚é‘²å²€æ™³é£çŠ²å“é–´ãˆ¡ç°©é§æ´ªå•‘æ¥‚îƒç´£ç¼ƒç‰ˆå§•ç»›å¿›æž¼æ§Œâ•æ«¤æ¿‰æ¬’æ´¡é—…é—´å³é’ã‚…å´é™å¶…å½Œç”¯å—˜æƒ‰é‚æˆžæ¾˜å§˜ç‚¬ç…é—å ¢å§±éî… æ™¹ç»»ä½½åŸ‡é’˜â•„åšç»¡å‹¯å™¯é“â•…çˆ³æ¤‹îˆ›å°³é…â•ƒæš˜é©ã‚‡î—•é’‘å†­æ´°é–î„å´™éšï¹€î›¨æ´å›§éƒŠéŽ®å‰å¢˜éŽµè§„å§­é‚æ„­ç˜®å¨‰å²€æŸŒé¨î†¾î•¶ç»‰æ¨¼ç©»ç¼ƒç–¯å‰çšî‚¥î€˜ç’¨å©šä¼©é—ˆç‚ºî— å¦¯å¬¬æ¡ˆéŒæ¬ç†¬å¯°î†½ç€²å§£æ¨¼æƒ–éªå¤Œç·¨"],["9540","æ¦§ç»˜ç…€ç»‹æ¥€å°®é¤å¬®îªè¤°ï¹å•™é‘¿è¾«å€¶å¯®ç…Žç¹€é£ãˆ¢ç“Žé–«å…¼Â¨æ¿®î‚¢ç©ç»±æ„®æ«¨ç’Žîƒ¿åº·è¤°î…îž¿å§˜é”‹ç´“é¡ãˆ¢ã‚¨ç›ã„¨îŸ³ç’žç‘°ç²ºéŽ»å¿•æ¢¾ç»‰æŽ•å«é–·ã„©å«´é’‚æ»†æ´¯æ¦˜î…žæ§è¤°î„æžŒå¨´æ»…â‚¬æ›¡é’µç’©æ’»ç‰·éå¿•æ‘±æ¶“å¶„ç²¯é©çŠ²ã‹æ¿ ï¹€ç˜œéã„¥ç«·æ´æ»„â‚¬æ ¨å£Žéï¿½"],["9580","é‚Ñ„æ«˜å¨´î†¾åŸ—ç»—ï¹åŽ«é‘¶æ°³å§ç’€æ»†çŸ¤ç’©ï¹è¡é—ƒæ»ˆæª®æ¸šî†½æŒ®å§ï¹åž¶é’Â¤æš˜é–®ã„¥çšå¦¤æ’»â…·é’é¸¿æ™½æµ¼å¿“å£‡å¯°â•ç®™éˆå¶‡î›´é‘µç¡…î˜¬ç‘•å—˜è¿”å¯®æ¥å¢ªå¨Œé•ç²¡é—â•…ç•³é’å——æƒ¢é£æ‘â’ŠéŽ²ã‚†å£†é’æ°¬ã‚®ç»®å¤Œç¢ç»±æ¶¢æ´¶é‚å›ªä»¦æ¶“æ¬Žé™éé›î”…éªžï½…é’©å¯®å©ƒç„ºæ¶“ï¹æ–€é—å¤æ«…ç»«æŠ½çˆœéè¯²î—†é§æ «â…¶é’ãƒ§ç”é’„æˆ ç•£é‹å¿“î˜®é—å›©ç˜’ç»¶ã„¨ç«žæ©æ—ˆäº¶æ¸šåž®åªºæ¿žâ•ç´’é—‰î…ç¹šé‘¸æ¥…å«ªé¦å†©å´Ÿå§â•ƒæ•¨ç‘æ»†ç´¨ç»Œå‚šå«™æ¾§æ’´åŽ±éŽ´å©ƒæ¯Šå§£å¶‡ç¿±é‘¿â•â‚¬ï½„æ‰›é–å‘­æ†œé«åžîšŽç€¹æ¿†å˜²å®„îˆšç©¿æ´æ ¨å§³éŽ¹Ñ„æ–é‚è§„æ¹…"],["9640","å¨‰æ›Ÿåœºé‘åœ­ç‰ªç»ºî‚¥å„ªé‘ºå® æ‚“é’ƒî„ƒæ¸¹ç‘œæŽ•Ã­ç’žå©‡åŠé–¶æŽ—ï¼æ§ŒæŠ½æƒ®æ¶”å¿Žéª¸éŒå¶…å¢«é§å©‚Î˜ç”¯è—‰ç¹•è¹‡æ¬åŸ§é†å­˜æ¹œéŒæ„­î——éæŽ”ç¡€é‘²î‡å•«ç’Žâ‚¬ç’¨å²ƒéƒ¨é–´é¹ƒæ§»éšçŠ»ç‰žé–æ¥€å„ é—æ»ƒâ…·éŽ¾å‰æ¹¸é—Ñ…æ½¶ç»Œå—›åš˜é•å†©ç—…å¨ˆå——çˆ›éªžå±½îš™éˆî„‚ç‚•é‘ï¼„æ³¦"],["9680","éŽ½â•ƒï¼ˆæ¦„æ—ˆå¤¯é©å¬ªîž…é„Ñ„ç‡å§£åº¡æ‘¡å¦²æ¬ç®·é‘¶æ»„ç‚æ¥«î…ç†…æ¥¸æŽ“î”¢æµœï¸¿æµšé™å Ÿå§½éˆî‚£ææ©å‹ªç»ç»»î…¢åšŽæ¶“å›¨åƒå©§â‚¬å©•î‚¥æ•é›è™«æ¹­æ¦„å‘­çƒ¦ç» æ›žé“‚ç€µå—šæ¹å©€å©…æ¼ç»‹æ—‡å‰¤æ¿¡æ¬‘çŸ‹å§˜æˆ æ¹¢é•æ¬ã‚é’ï¼„å¢´é­æ¶¢æ¹©æ¦ˆâ„ƒî˜°æ¿ åž®îž¾éãƒ¥æ‚•é›èŠ¥æ§‘é©ç†»ç³ é–µæ©€ç‚’æ¿®î†å¢²å©Šå‘­åŽ¤å¦«å¤ŒçŠŠç»¶î„„æ½°æ¥¹çƒ˜æ‡œå¦¯Â¤å¯•æ¿¡å‹«ç“±å§£æ¶šå¯·é©èŒ¬æ«é‘°æ¥„æŒ‹éŽå‰æ¹ªæ¦›æ¬‘æ´°é‰ãˆ å¬æ¤å‘­æŒ¨éŽ´è¤æœ¬ç’¨æ¿æ™±éŽ®å‰ç£±é—â‚¬é–ä½·ç¯ƒéè·ºî™é–é¸¿â‚¬å •å™¹å¯®ãƒ§ç…é˜å‹«ç„¦ç»±å‹®æŸ†ç‘·å® ç°«é—ˆæ ¨ç…¶é’–î‡€æ†®éŽ°å¤‹å‰¤å¨Œåœ­æª¼"],["9740","ç’œî…¡å‡ éžîˆ™ç¶‰éŽî„åª·é™å¬ªî…¼éªžèŠ¥åéŽ²å‚›å½‡éˆå¤‹ç…”å©€Ñ„ç§¾éšå‰å°«é¢è¾©îš•ç‘æ›¡ç¦é–¬å©‡å€¯é–®ç”¸æ³Ÿé“»å¶…î˜ºæµœå œç¶‘æ¶“åº¤ç•æ“å—çˆ¯éŒî…žè¾œæ¿¡æ §î†æ´å‘Šå½‹éŽ»çƒ˜æ§é‡æ»„îšå¦²æ¨»ç£±å©§å‰å•é¢ã„§î€Žç¼‡å©…â‚¬â‚¬é’å¤Žæ²ç‘•ä½½î‚¼éŸªå©‡ä»´é—„ä»‹î˜¯éŽ±ç‚¬å§‚å¨†ï¿½"],["9780","å¨Œå†©è¡ç¼ˆå²€è€ƒå¨£â‚¬ç¼‡å‘°çªç‘å‘Šæ½µé‘¾éç‰¸é—†é”‹ç¤‡ç»²Â¤æƒ¤é–°îƒè´¡é—é›ç¥¼å¨†å‹¬æ©é’˜å¶ˆæ§¶ç‘•ÑƒåŸ„éšå¿“é¥±é‰åº¢â…·éžå—™æ‹‘é¥ãˆ£î—”ç‘ï¿ å™·é—†ãˆ¤æ«¢å¯°å¬¬å·¼ç»”å¬­æ†¥éŽºçŠµæšé”å¤‹ç¥¦å©§æ»…æ‚é£æ¬‘ï½žç»®æŽ—æ®•ç»”æ»ˆç·§æ¸šèˆµåœéƒå‘°æ«†æµœå—•å¯’éæ°«æµ®é‘å±½î‡£é‚æ¬î•¦å¨‘è‚©å°‚é§å‚œçœç»‹æ»…åŽ‚é‘¹îˆç¤é–¬å¥¸å™ºé—„ç”¸ç‰é”æ¶šçª‡éŠî‚¢å¸¢é‹æ¥ç©»é•æ„®æƒ“é‘·ã„¨å‰é—…ï½‰çæ¥¹ç†ºæ†¼æ¿‰ä½¹ç¨’ç»±îˆžî”£æµ ã‚„çº§æ¸šå¬ªå–Žé”åžé€—éŽ¬æ»…å¹‰ç»€è‰°å«‡é–³æ’®æ¯žé—†å •æ¹‚æ¥¹æ¥…èˆ°é†ï¸½î„­é’æ¥€å§¡é‘å £î—‡å¯¤å¤‹äº±éŽ²æ„­è¿¹é“å¤Œç†¬ç»¶ç£‹ä¼…"],["9840","é’ƒî‡€â‚¬ï½‰å°™é›å‚žî„¨å¨…æ’¶å€ç’©å‚çŸ¾é—‡æ’å§¶æ¿ ä½¸ç²–å¯®å‹¬æ¹•å¦¤å…¼î›¹å¨´î…ç´¡é—ãˆ¢å«¾ç»¡î…¡â‚¬ä½½ä¼¨é“¦å¬®å„™éî…¢ç°±ç»‚å‹®å€ é–·èŒ¶ç«éŠî…žæ‹°ç‘­è¾¨î„£ç’©å‹®å‰£éŽ¯æˆžçŽæ¦‰è¹­ç°·æµœæ©€çš­ç‘­î‚¥æ¢ºé’‘ã„¦î˜¥å©€å‰§î•¼é‘µï¿½"],["989f","å¯®å±¼ç¬Žæ¶“æ›šé‡œæ¶“å˜ä»˜æ¶“é—´ç¼šæ¶”å‚™ç®¹æ¶”æ¨¹ç°œæµœå‘°é²æµœå©…åžå¯®å¶„ç°¬æµœç‚°ç°¾æµœçŠ±å­©æµœé¢æ’¼æµœæœµç² æµ å¶„ç²æµ å—•ç²‹æµ æ¤¾ç²¸æµ î…ç²ºæµ èœ‚ç´šæµ£æ°«åŠæµ£æ¶—ç¶•æµ£æ¤¾çµ¿æµ£æœµç·¢æ¸šå¿Žç·²æµ£è®³åƒµæµ£é¢ç·«æµ£îˆ™ç· æ¸šæ §å‰ºæ·‡æ–¾ç¹œæ·‡åºç¹•æ·‡æ¶—ç¹Žæ·‡æ°«ç¹æ·‡ã‚„éªéŠæ°¬â‚¬ã„¥â‚¬æ–¿â‚¬î„â‚¬ãƒ¥â‚¬å‘¬ç´²æ·‡è·ºâ‚¬â€³â‚¬â•â‚¬îƒ¿çƒ¤æ·‡îˆšâ‚¬æˆâ‚¬å——äº™é‹å›¨æ¸»é‹æ›žäº¹é‹å ä»›é‹æ §ä¼‚é‹ç¨¿å€‹éŒæ°¬å€•éŒæ‘å›"],["9940","éå¤Šå„•éŒå†²å„Œéæ §å„ªéãƒ¥å„¹éï½…å„ºéç‘°å…ŠéŽå¤Šå‰šéŽå‚šå‰¸éŽæ›žå‰¶éŽæ°¬åŠ‡éŽå“„åŠ®éŽç…ŽåŠµéŽåž®åŽéæŽ‘åŽ¡éæ–¿åƒç»”ç¨¿åéî„åœéâ‚¬éå‚šæ´éå±½å”¹éå¿“å•ˆéæ’³å•Žéæ §å•¢éï¹€å•Ÿéâ•å•°éî‚¢å–…éåžå•¿éæ¿å–Œéè—‰å™®é‘å¤ŠåšŠé‘çŠºæª¿é‘â•åšŸ"],["9980","é‘æ¿åš¨é‘æƒ§åžŠé’å¬ªåžŸé’åº¡åŸ€é’î„åŸ‰é’å†²åŸžé“å¿“å¢‘é“å¬ªå¢é“ç‚²å¢§é“î„å£Œé“â•å£‹é“åž®å£—é”å¶…å§…é”æŽ‘å£‰é”å å§‚æˆã„¨æ™¶é”î„€å§¯é”ç…Žå§·é•ä½¸åª¿é•æ¥€å«—é•ï½…å«¤æ¤‹î…žå«šé•å†²å«·é•ç¨¿å«»é–å——å¯›é¢ç¨¿å¯¦é–æ„¬å¯©é–æ›žå¯¶é–ï½…å°Ÿé–åžå°¦é–ç¨¿å´é—å——å´Šæ¶“æ¥€å´é—å¶…åšƒé—ç‚²å´ºé—î†¼î˜½é—è¯²åµŽé˜å‚šå¸ é˜çŠ²å¸µé˜ãƒ¥å¹ƒé˜æ¿å¹Žé™å†ªçš°é—†æ¬å½‘é‡è‚©åš é™î†¼å½£é™î…žå¾éšä½¸æƒ¤é›â‚¬éšî„€æƒŒéšç…Žæƒéšè·ºæƒ„éšæ¿†æ†¥éœå¿“æ‡™éœåº¡æ†»é›åžæ‡›é›æ¿æ‹»é›è¯²æ‹ƒé›è·ºæ‹•éœæ„¬æ‹žéå›§æŒ—éœç¨¿æŒœéœî„€æ«éå æŒ©"],["9a40","éœî‚¢æ¨éœã‚…æ‘éœç…Žæ‘Œéãƒ¥æ‘éžå¿“æ•‚éè—‰æ‘¦éî…žæ‘µéãˆ æ•¼éŸâ‚¬éŸï½…æ™«éžî†¼æš…éŸå‘­æ™¼éŸæ¥€æ•»éžå†²æš†é æ¬æ¸éœîˆšæžˆé ç†·æš¬éŸæƒ§æž é ç‚²æŸˆéŸç…Žæ»é â•æžƒé ã„¥æ£œé¡å‘­æ£¢é¡å‹«æ£žé¡ã‚…æ£“é¢æ–¿æ¤ƒé¢æ §æ¤Œé¡è—‰æ§¢é¡ç‘°æª¸é£æ„®åšé¢æ‘æ¨é¢æ’æ¨ƒ"],["9a80","é£î‚¢æ«Žé¢îˆšæ«–é£î„æ®•é¤â‚¬é¤å©‚æ®¸é¤æ–¿æ®¢é¤ãƒ¥æ¯Šé¤è·ºæ¯šé¥å‚šæ¯¤é¥ä½¸æ³é¥â‚¬é¥å æ³¿é¥æˆæ´†é¥æ¥€æ´°é¥ç‘°æ¸¶é¥åž®æ¸¼é¦å¤Šæ¹€é¦å¬ªæ¹‡é¦æ’³æ¹—é¦æ §æ£é¦æ»ƒæ¹¨é¦å³°æ¹¼é§åº¡æºé§â‚¬é§å¿“æ½»é©â‚¬é¨å æ½¯é§åž®ç€´é¨æ’³çŽé¨å†²ç“é¨î„ç é©å†¨ç„¼é©æ–¿ç…‰é©æ’³çˆ¦é©æ §ç…Ÿé«å¬ªç‰‚é«æ¿†ã€”é«â€³ã€æ¿‰å¬ªâ€œå§£â‚¬æ¿‰æŽ‘ç‰»æ¿‰ç‘°î•ªæ¾§ç‘°î–„æ¾§î‚¢â’‘æ¾¹ç‚²â’’æ¾§ç¨¿î©æ¾¹å‘­î—˜æ¾¹æˆî—œæ¾¹æ¬î—æ¾¹ãƒ¥î—¡æ¾¹ã‚…î—¤æ¾¹îˆšï¼šæ¾¹ç‘°ï¼›æ¾¹ç…Žï¼æ¾¶å‚šî˜¯æ¾¶æ„¬î™€å§Šï¹€ã…æ¾¶î„€ãæ¾¶æ’ã˜æ¾¶å‰§ç¤æ¿‚æ›žîš•æ¿‚åº¡îšŸæ¿‚æ¨ºã‚¢æ¿‚çŠ²ã‚§æ¿‚î„€ã‚©"],["9b40","æ¿‚ç¨¿î›¦æ¿¡æ¿…ç¶–æ¸šî‚¢Î“æ¿¡æ’î‹æ¿®ã„¥î¡æ¿¡å¶…îžæ¿®æ°¬Ä“æ¿žç†·â˜‰æ¿žæ»ƒâ–”æ¿žæ°¬ï¹¢æ¿ î„€îŸ§æ¿žé›Ç˜æ¿ ãˆ â”†æ¿¯æ°¬î€›æ¿¯æƒ§ç›ç€šå‚šî€œç€šï½…ç¬ç€šï¹€î¦ç€šæ §î·ç€šè¯²ç‘¢ç€£å¬ªç‘¬ç€£æ’ç¢ç€£î„îƒ‘ç€£æƒ§ç“‹ç€›å‘­ç“ˆç€›æˆç“¡ç€›æ°¬ç“«ç€›ãƒ¥î„¢ç€›æ¿î„¬ç€›é›î„±é‚å î„³ç€¹â‚¬"],["9b80","ç€¹å†¨î…½ç€¹ç¨¿ç˜ç€µå›§ç˜”ç€µæ–¿ç˜£ç€µã‚…î‡›ç€µãˆ ç™ç€µãƒ¥î‡ ç€µæ¿î‡«ç€µå†²çš¡çå›§çš¥çå¶…çš³ççŠ²é˜¿çã„¥æ¡ˆçç‘°çœ®çžå——ç…çžæ’³çˆçžå¿“î„ªçžî„€ç¢‘æ¶”ãˆ å€çžç‘°çŸŠå®€æˆçŸ“æ¿¡æ¶˜æå®€è¯²æ•å®€ç…Žåœå®„å‘­ç°¿å®„å›§ç¡»å®„â•è¾°å®„å“„æŠ„å®¥å±½å”±å®•å¬ªç£¿å®•æ¥€ç¦å®•ç†·ç¤‡å®•æˆç£¾å®•ãˆ ç¤†å®•æ¬ç¤ƒå®“å±½ç¥¾å®“åº¡ç¥´å®“î„€å…šå®“è·ºç§¶å®¥å‹«ç§±å®¥ãˆ ç¨˜å®¥î„€æ‡‚å®¥è—‰ç¨…å®¥å³°éƒ½å®¸å¤Šç©½å®¸æ’³çª‰å®¸æ §çª™å®¸î‚¢å‡¡å®¸é›ç¬…ç”¯æ°¬ç¬ç”¯æˆç¬¡ç”¯è·ºé˜œéªžå‹«ç®–éªžâ‚¬éªžåº¡ç®ºéªžæ–¿ç¯ƒéªžãˆ å·¥éªžå›§æ²Ÿéªžè·ºè´­æ¥¹ç…Žç®æ´çŠ²ç²Šå¯¤å‚šç²“å¯¤æ„¬ç²¡"],["9c40","å¯¤æ §å”¬å¯¤æ¿†ç²´å¯¤æ¶˜è™Žå¯¤â€³èŠ±å¯¤â•æ»‘å¯¤åžæ€€å¯¤æ¿æ·®å¯¤ç¨¿ç—ªå¯®å†¨ç´šè¤°æ¿†ç¶”å¯®å¬ªç´¤å¯®æ §ç¼‰å¯®î…žå‡ è¤°ä½¸ç¶€è¤°å±½ç¶†å¯®îˆšç¶‰è¤°æ §ç¶è¤°æ¬å¥è¤°î…žåŒ è¤°å³°ç·å¯°å‚šå¨‡å¯°å©‚ç·¢å¯°æˆç·¡å¯°ç‚²ç·³å¯°æ¨ºç·ºå¯°ã„¥ç»å¯°ç…Žç¹“è¹‡è¯²éƒ¡è¹‡ç¨¿å‹˜è¹‡æ¿‡åè¹‡æŒŽâ‚¬â„ƒä»©"],["9c80","éŽ¬æ¬â‚¬æ„­â‚¬â•‚â‚¬åº¢â‚¬è¾¨â‚¬æ¶™â‚¬æ›Ÿâ‚¬î‚£â‚¬ï¸½â‚¬å¿”â‚¬çƒ˜ä»›éŽ­ä½¹ä»¾éŽ­é”‹ä»§éŽ­å©ƒäºžéŽ­å¶†ä»¯éŽ­å†©ä»±éŽ­å‚›ä¼‚éŽ­î‚£ä»šéŽ®ä½¹å€£éŽ¯Ñ„å€‘éŽ®æ°­å€“éŽ®æ¶™å€´éŽ®æ¥å€°éŽ®Ñ„å€ éŽ¯â„ƒå¢éŽ¯çŠ³å„žéŽ®æ‘å ªéŽ®èŠ¥å„éŽ®åž«å„¤éŽ±å¶†å‰·éŽ°å—˜å…ŒéŽ¯é”‹å‰™éŽ¯å­˜å…’éŽ°å†©åŠ‡éŽ¯ç»˜å„½éŽ°å¶†å‰®éŽ±å›¨åŠ¸éŽ°ã„¦åŠŽéŽ±å©ƒåŠ¹éŽ°å…¼åŠ•éŽ°å­˜åŠ·éŽ±å‚›åŽ”éŽ±è™«å¿éŽ±æ¨»åŽµéŽ±æ°­å“éŽ±å­˜åéŽ±ãƒ¦å¡éŽ±ç†¸åŽºéŽ±æ’´åºéŽ²æ¬å•éŽ²å›¨å•²éŽ²æ—€å•”éŽ²å©ƒå•ˆéŽ²î‚£å•´éŽ³å±¾å™´éŽ³å¤‹åšªéŽ³å Ÿå™§éŽ³å—˜å–“éŽ³å¬¬ç„¦éŽ³å¶†åš˜éŽ³ï½†åš©éŽ³çƒ˜åš§éŽ³æŒŽåš±éŽ³å…¼åš²éŽ´â‚¬éŽ´å Ÿåž‘éŽ´å¶†åž–éŽ´æ—€åž±"],["9d40","éŽ´ç‚´åžºéŽ´î…åŸ‰éŽ´ç‰ˆåŸéŽ´è™«å¢ŽéŽµåº¢å¢³éŽµï½†å¢°éŽµçŠ³å¢¾éŽµå…¼å¦­éŽ¶å¤‹å£˜éŽ¶æŽ“å§„éŽ¶æ ¨å«ˆéŽ¶å†©å§…éŽ·æ¥å«…éŽ¶ç»˜å«ƒéŽ·æŒŽåª¶éŽ¿æ—€åª¹éŽ·æ»„åª½éŽ·å©ƒåª¯éŽ·å›¨å§éŽ·å¤‹å¯£éŽ·î†½å«³éŽ¸Ñ„å¯•éŽ¸å Ÿå«°éŽ·åž«å´˜éŽ¸ç‚¬å´“éŽ¼æ»„å´—éŽºæ ¨å¸‹éŽºâ‚¬éŽºî‚£åµéŽºï½†å¸éŽºå¤‹å¸«éŽºåž«å´¼"],["9d80","éŽ¹â•‚å¹˜éŽ»â•‚å¼¨éŽ»å—˜å½›éŽ»å¤‹å½ƒéŽ»èˆµå¼°éŽ¼æ ¨æƒ”éŽ¼å—˜æ‚¡éŽ¼ï¸½æƒ—é€æ¿‡æ‚§éŽ¼ã„¦æ‚˜éŽ½Ñ„æ‡éŽ½èˆµæ†¥é€î…æŒ„éŽ¾æ’´æŒœéŽ¾â•‚æ‹¡éŽ¾å…¼æ‘ŽéŽ¿æŽ“æ®éŽ¿å›¨æ‡éŽ¿æ¨»æ¨éŽ¿è¾¨æ‘Ÿé‘¸å¤‹æ‘–éŽ¿â„ƒå§®éŽ¿ï½†æ‘¨é€î„æ‘±éŽ¿å­˜æ‘¬éŽ¿çƒ˜æ”¢éŽ¿èŠ¥æ•‡é€æ»„æ”¨é€ã‚†æ•šé€î‚£æ•¶é€åž«æ•ºé€èˆµæ•»é£å¬«æ™¥éæ ¨æ™»éå¶†æ™¿éç‚´æš†éå‰æš©é‚å‚›æ»ç’å©ƒæž¦é‚ç†¸æŸ…é‚é”‹æ¢¼éƒå—˜æ¢ºéƒå‹¬æ£‡éƒæŽ“æ£éƒæ¬æ£¤éƒâ„ƒæ£»é‰å‰æ§‰é„å†©æ¤ˆé‰è™«æ¨€é„èˆµæ§¾é„æ»„æª¹é…å‹¬æª³é…ä½¹æ«ˆé…æ¿‡æ«Žé…Ñ„æ«’é…ç†¸æ«Œé…ç‰ˆæ®é†å Ÿæ® é†å¤‹æ®‘é†æ¨»æ®±é‡ä½¹æ¯ é‡å¤‹æ¯¦é†ï¿½"],["9e40","é‡å‹¬æ¯Ÿé‡æ ¨æ´‘é‡çŠ³æ¨‹é‡ï¸½æ´¨é‡ç‰ˆæµ€é‡é”‹æ¹‰éˆæ ¨æ¹ éˆï¸½æ¹©é—‡å‘Šæ¹²éˆæŒŽæ¹ºé‰ä½¹æ¹¼éˆé”‹æ½Œé‰ç‚´æ½¬é‰æ¬æ½±é‰ã‚†ç€´é‰ç‰ˆç˜é‰å…¼æ½½é‹å±¾ç€·é‹ï¸½çé‹å‘®ç§éŒîˆ›ç¤éŒî„ç£éŒâ•‚ç¨éŒã‚†ç…˜éŒæ¿‡ç…éŒî†½ç©éŒåº¢ç„¼éŒÑ„çªéç‚´î”‹éâ•‚î”…å¦—å¶†ç‰ªå¦—ï¿½"],["9e80","å§Šè™«ç‰œå¦—æ¬ã€‚å¦—é”‹ã€‘å§Šç†¸î•´å§Šî…Ÿî•¹å§Šæ¿‡î–€å§Šå†©î€å§Šè§„ã€ˆå§Šåž«î–…å§Šçƒ˜î˜´å§Šå¶†ã€å¦žä½¹î—å¦žå Ÿî—å¦žãˆ¡ã†å¦«â„ƒî˜±å¦«å¶†î—™å¦«Ñ„î—šå¦žèˆµî˜·å¦žå‹¬î—œå¦«ï½†ã…å¦«è§„ã€€å¦«îˆ›ãˆå¦žî…î˜¿å¦žï½†ãå¦«å—˜ã‚¹å¦¤é”‹îš¡å¦¤å‘Šã‚«å¦¤æ—€ã‚¾å¦¤î†½ã™å¦¤å­˜ãå¦¤æ¬ãå¦¤â„ƒîš£å¦¤æ¿‡î›¦å¦¤î…Î£å§’î†½î•å§’æŒŽî†å¦²æ’´îžŠå¦²åº¡î‡å¦²å©ƒî¢å§’ç»˜îˆå§’Ñ„Ã³å§’æˆžîœ…å§’æ»„î›ºå§’å­˜î£å¦²ã„¦â–Šå¦¯æ¶™Ð­å¨†å©ƒÐ§å¦²å‰Ðå¦¯å‘®Î¡å¦¯ç‚´Ð›å¦¯æ—€Ð™å¦¯å©ƒâŠ•å¨…ä½¹ÇŽå¦¯æ’´ï¹¦å¦¯å±¾â”Žå¦¯èˆµâ””å§—å›¨îŸ¿å§—æ¬â”‚å§—å ŸÇœå¦¯ãˆ¡çå¦¾å¶†ç±å¦¾å‹¬î€å¦¾ï¿½"],["9f40","å¦¾æ¥„æ§œå¦¾ç»˜ç’å¨…å‚›î€—å¦¾è™«î€‹å¨…ç‚´ç£å¨…ç†¸î€‰å¨…æ°­î§å¨…ç»˜ç‘“é“‡æ ¨î·å¨†æŽ“ç‘¬æ¥è¾¨ç‘¹å¨†å‘Šîƒ’é©æ»„îƒ”æ¤‹î†½ç“å§å†©ç“‘å§æ„­ç“©å§æ—€ç“«å§ç†¸î„šå§å‘Šî„²å§æŒŽç•å¨ˆå‹¬ç• å¨ˆå¶†ç•¼å¨ˆæ›Ÿç–„å¨ˆã‚†î†å¨ˆî‚£î††å¨ˆå‰î†ˆå¨ˆè™«î†Žå¨ˆå…¼ç˜‘å§£å¬«ç˜¬å§£ç†¸î‡¡å§£î‚£î‡¨å§£ï¿½"],["9f80","æ¥¹ç‚¬çš¥å§˜æ’´çšµå§˜æ¶™æŒ¨å§˜ï½†ç˜å§¹æ›Ÿé›¹å§¹î…çŸ€å¨Œå¶†çŸšå¨Œä½¹çŸå§¹ç‚¬æŠ¥å§¹è™«çŸ‘å¨Œæ„­ç¡ å¨‰è¾¨ç¡´å¨ŒèŠ¥ç¡¹å¨‰å‘®ç¢€å¨Œî†½è„–å¨Œç‚¬åŸ å¨‰æ¶™æœå¨‰æ¬å”±å¨²ç†»î”’å¨²èˆµä¼ å¨²èŠ¥é”¤å¨²æ¬å¹å¨²è™«ç£¼å¨²å±¾æ‹…å¨‘æ’´ä¸¹å¨´æ°­å€’å¨´æ¬ç¨å¨‘æ›Ÿéƒ¡å¨‘å‘®é¥­å¨“æ›Ÿç¬‚å¨‘åž«ç©±å¨£ï¸½é™¡å¨£å—˜ç•ªå¨£ç‚´ç©¼å¨£ã„¦çª‰å¨£å‘®æ³›å¨£æ¬ç­å¨£æ›Ÿè—©å¨£î†½è…‘å©€î†½åºœå¨“æ¬å…±å©€ç†¸å¦‡å¨“ï½†å…¬å¨“î‚£è‹Ÿå©€å¶†ç¬©å©€å†©è´Ÿå©€åº¢è¢±å©ŠæŒŽç¬£å¨“å‘Šç°œå©§î…ç°¶å©Šå¤‹æ‚å©Šæ’´èˆªå©§îˆ›ç²å©§å‰ç²©å©Šæ›Ÿç°­å©§ãƒ¦ç²‹å©§ç†¸çµ¹å©•æˆ äº´å©Šî„æ¡“å©Šç‚¬ä¼Žå©Šå‰æ€¥å©Šîˆ›ç–¾å©Šï¿½"],["e040","å©•ç‚¬ç´¦å©Šé”‹ç· å¨¼çƒ˜ç¤å©¢ä½¹ç·šå¨¼îˆ›ç¶“å©µè™«æ±Ÿå©¢å‚›éƒŠå¨¼æ¨»ç·¨å©¢æˆžç¸½å¨¼ï¸½å¢ƒå©¢ï½†å°½å©¢ã‚†ç«Ÿå©µå—˜æƒŠå©µç†¸ç¹’å©µî„ç¹‘å©µæ¨»å‹˜å©µî†½ç¹˜éŽå¤Œâ‚¬å¬«äº¢éŽæˆ â‚¬ä½ºâ‚¬å¿”çƒ¤éŽæ¶šâ‚¬æ°­é…±éŽæ¿ˆâ‚¬æ¨¼â‚¬ç†ºâ‚¬æ‰®â‚¬å‰§â‚¬èŒ¬äº¼éï½‡å€·éæŽ”å—é‘è¾©å“éå“¥åéî†¾å„«é‘å¬¬å„©"],["e080","é‘æ¬‘å‰¦é‘ç•ŒåŠ€é’æ¬‘å†é“æ› å”¸é“ï¸¾åƒé“å²€åŽ²é“î„‚å•…é•è¤å”²é”æ› å•«é”î„‚åš„é”åœ­å–šé•æŽ”å™³é•æ—‚å™¹é•çŠµåšžé•Ñ…åš¨é•è‚©åš¬é•è·¨åž—é–æ„®åž±é–ã„§åŸˆé–î„‚åŸŒé–èŒ¬åŸ¢é–è‚©åŸ§é—â‚¬é—å—™å¢œé—æ¨¼å£Œé—å‰§å¦­é˜ä½ºå¦µé˜æŽ”å§ˆé˜ãˆ¢å§§é˜åœ­å§´é™å†ªåª¶é™å‹­å«€é™æŽ”å«é™çŠµå«›é™åœ­å«¹éŠå¿•å¯³éšå©„å¯½éšæ «å¯¾éšå¯¸å°Ÿéšâ•ƒå°Œéšå‰§å´•é›å¿›ç²¯é›æ¥ƒå´»é›ã„§åµƒé›å“¥åµ‰é›è¤åµ‘éå ¢å¹Šéåº£å¹“éâ‚¬éãƒ§å½¯éç‚µæŒ—éžå‘¯æ‡éžãƒ§å¾ƒéžèŒ¬æƒ¡éŸæ› æƒªéŸç†ºæ†´éŸä½ºæ†¸éŸâ•ƒæ‡“éŸï½‡æ‡‰éŸå‰æ‡¢é å¬¬æŒ’é Ñ…æ³é¡å¿•æ‘‚éï¿½"],["e140","é¡çŠµæ‘šé¡Ñ…æ‘¡é¡î†¾æ‘¬é¡æ‰®æ‘«é¡å“¥æ‘²é¢å‹­æ”¦é¢å‘¯æ”²é¢åº£æ”³é¢æ› æ•é¢ç‚µæ• é¢î„‚æ•¿é£å‹­æ™¬é£å©„æ™§é£æ¶šæ™¢é£æ°±æš•é£ã‚‡æš“é£î‚¤æš›é£å“¥æš¥é¤å—™æžƒé£å¯¸æžˆé¤å¤Œæºé¤æ—‚æž¤é¤æ¿ˆæž¼é¤ï½‡æ¢»é¤å´‡æ¢¼é¤ç”µæŸ¦é¤å“¥æŸ¤é¤è¾©æ£ˆé¥å©„æ£é¥æ¬‘æ£§é¥ç‚µæ¤Œé¥ï¿½"],["e180","é¥è‚©æ¦¿é¥æ‰®æ¤‡é¥èŒ¬æ£¾é¦å¬¬æ§é¦å¤Œæ§¦é¦Ñ…æ§§é¦ï¼„æ§©é¦ã‚‡æ§¾é¦æ‰®æ¨†é§å›©æª²é§å—™æ«†é§æ¨¼æ«‹é§ãˆ¢æ«’é§â•ƒæ«”é§Ñ…æ«–é§æ‰®æ«œé§å‰æ«¢é§è‚©æ®Œé¨å†ªæ®˜é¨å¬¬æ® é¨æ «æ®¦é¨æ¬‘æ®®é¨æ‰®æ¯šé¨å“¥æ¯ é¨è™¹æ³œé©å¶‡æ´Šé©æŽ”æ´–é©ï¼„æ´¢é©Ñ…æ´©é“‡îˆœæµ•éªå ¢æ¸¿éªå‹­æ¹¬éªã‚‡æ¹ éªãƒ§æ¹¨éªæ¶šæ¹»éªå“¥æ½Žé«æ°±æ½¹é«î‚¤æ½§é«ãƒ§æ¾˜é«å‰§æ¾’é¬åº£ç€·é¬æˆ çŽé¬ç‚µç é¬å‰ç©é¬è·¨ç±é¬ç•Œç®é­å›©ç…ƒé­æ¥ƒç…”é­æ»…ç…Ÿé­î†¾ç†‚é®å²€çˆ³ç»€ï¸¾ç‰‹ç»€î†î”Šçº°åº£ã€ˆçº°å—™ã€–çº°æ°±î•±çº°ï½‡â’Œçº°î†îªçº¾æˆ î—‹çº¾å¬¬î—™çº°å‰§â’“çº¾å‘¯î—çº¾ï¿½"],["e240","çº¾Ñ…î—Ÿçº¾ç•Œï¼”ç»€å›©î˜·ç»€æˆ î˜¾ç»€î„‚ã‹ç»â‚¬ç»çŠµîšœç»ç†ºîšŸç»æ› îš˜ç»è™¹ã‚¿ç»‚å©„îœ‚ç»‚Ñ‡ç¶ƒç»‚î†Îžç»‚å´‡îž…ç»‚è™¹îŽç»‰æ› Ðç»‰î„‚Ðç»‰ï½‡â–“ç»‹å¶‡îž¾ç»‹æ¬‘îŸ†ç»‹ç†ºî›¥ç»‹è¾©É‘ç»‹å‰§Çšç»Œå†ªîŸ´ç»Œå¤ŒîŸ¾ç»Œãˆ¢â”…æ¦«æ¿ˆâ”Œç»Œåœ­â”™ç»å ¢ç¥ç»æ› ç¦ç»æ «î€ˆç»”å ¢î€"],["e280","ç»å‰ç”ç»”å‹­î€žé–­å†ªç–ç»”å©„çç»”å¿•çªç»”æ’¶ç¯ç»”æ°±ç´ç»”ï¼„îŸç»”ï¸¾îªç»”æ‰®ç‘ç»—å¿•ç‘ ç»—å—™îƒŽç»—æ¨¼ç‘±ç»—ç‚µîƒç»—ã„§îƒ‘ç»›æ„®î„³ç»—å‹­ç“–ç»—å¬¬ç“•ç»›å‘¯î„®ç»›ãƒ§î„­ç»›Ñ…î„©ç»›è¾©î„¥ç»›î†¾ç–‚ç» æ¨¼ç–…ç» å¶‡ç–ç» æ°±ç•«ç» æŽ”ç•¯ç»›æ¿ˆç•½ç»¡å¬¬ç˜‰ç»¡å²€ç˜¡ç» å¯¸ç˜‘ç»¡æ¿ˆî‡žç»¨æˆ çšµç»¡ï¸¾î‡šç»«çŠµçšœç»¨å›©çš³ç»¡å´‡î‡¬ç»¨æ¥ƒçšªç»¡å‰åŸƒç»¨Ñ…è”¼ç»¨ç†ºèƒºç»¨î‚¤æ•–ç»«å²€çœ±ç»«æ—‚ç†ç»«â‚¬ç»«æ„®ç’ç»«ç†ºå ¡ç»«æ «é¥±ç»«î„‚é’¡ç»®å†ªçŸç»®ã‚‡ç®”ç»®ãˆ¢æç»®ï¼„æ³¢ç»®å´‡è†Šç»®è¾©ä¼¯ç»®åœ­æ­¥ç»¯â‚¬ç»¯å‘¯ç¡žç»¯æ¨¼ç¡³ç»¯æ»…å°æ¥è¤æœç»¯èŒ¬ç‚’ç»¯å‰æ¾ˆç»±ï¿½"],["e340","ç»±å‚œç¤ˆç»±æ› ç£°ç»²å‘¯ç¥´ç»±î†¾åºŠç»±è·¨å¹ç»²å—™å…šç»²æ «ç¥¹ç»²èŒ¬èƒ†ç»²î†¾ç¥»ç»²ï½‡ç¨‰ç¼å¤Œç¦Œç¼å¿•åˆ°ç¼æ¶šé€—ç¼î†¾å®ç¼ç”µç©±ç¼ç•Œä¸œç»ºç•Œç›¯ç¼îˆœçªšç¼å“¥ç¨›ç¼æ‰®çªç»¶æ¿ˆç­ç»¶ç‚µåŠç»¶èŒ¬è´°ç»ºå‘¯ç¬‚ç»ºï½‡æµ®ç»ºæŽ”å‰¯ç»ºç†ºç¬ç»ºå¬¬æ¶ªç»»å—™åŠŸç»ºè¤å‚…ç»ºåœ­ç®–ç»ºï¿½"],["e380","ç»ºèŒ¬è´Ÿç»»Ñ…ç¯€ç»»æ «ç¯‚ç»»æ¬‘ç®½ç»»åœ­èº¬ç»»â•ƒè¾œç»»è¤ç°ç»¶æ› è‡æˆî†¾ç®ç»¾å ¢ç°¤ç»¾å²€ç°°ç»¾æ„®ç°±ç»¾æ—‚ç°´ç»¾åº£ç°ºç»¾æ»…å‡ ç¼‚è™¹çµ½ç¼ƒå²€ç¶…ç¼ƒåº£ç¶ˆç¼ƒæˆ ç¶ç¼ƒæ—‚ç¶ç¼ƒç†ºç¶˜ç¼ƒã„§åƒµç¼ƒÑ…ç¤ç¼‡å‚œç· ç¼‡å†ªç·¢ç¼‡å›©ç·¦ç¼‡æ—‚ç·¸ç¼‡æ¿ˆç·´ç¼‡ï½‡è­¦ç¼‡èŒ¬ç«Ÿç¼‡î†¾å¾„ç¼‡æ­Œî„ªç¼ˆå‘¯ç¹‚ç¼ˆå©„ç¹’ç¼ˆæ—‚ä¿Šç¼ˆï¸¾å’¯ç¼ˆå´‡æŠ—æ¤‹æ»†â‚¬å—šâ‚¬å‹®â‚¬å¬­â‚¬æŽ•â‚¬æ¨¿â‚¬æ¬’â‚¬æ»†â‚¬Â¤â‚¬ã„¨â‚¬èƒ¯â‚¬æ˜äº°é‘±å—šäº½é‘±æ¨¿ä»›é‘±ç†»ä»®é‘±ã„¨ä¼‹é‘±èŒ¶ä¼†é‘±æƒ°ä¼–é‘±å€Ÿä¼©é‘²å‹®å€–é‘²å‘°å€¹é‘²æ’¹å€¸é‘²î…žå•‡é‘²î„ƒå„§é‘³ãƒ¨å„¥é‘³æ¿Šå„Žé‘³æ°³å„¢é‘´å¤Žå„»é‘³è¾«å‰¾é‘´â•„åŠŠé‘´îˆåŽ "],["e440","é—…å¬­åŽ—é‘´æåŽ¯é‘µæˆ£å…—é‘µè¾«åœé‘µãƒ¨å‡é‘µç£‹å”­é‘¶å £å”ºé‘¶â‚¬é‘¶å‚å•é‘¶æ›¡å•¢é‘¶ï½ˆåŽ½é‘¶æ’¹å•¯é‘¶æ‹Œå–Œé‘¶æå–é‘¶å€Ÿå™£é‘·å‚å–“é‘·å¤Žå™¸é‘·æˆ£åšˆé‘·æ¨¿å™²é‘·æ°³åšé‘·çŠºåš™é‘·é¸¿åš®é‘·æåž‡é‘¸å‚åžé‘¸å›ªåž”é‘¸å¶ˆåžšé‘¸æ ¬åŸ„é‘¸î‚¥åŸœé‘¸å® å¢é‘¹æ¬’å¢­é‘¹æ¿Šå¢¯é‘¹ç†»å¢¹"],["e480","é‘¹ãˆ£å¢¾é‘¹î‡å£‚é‘¸î†¿å£‰é‘¹ç–¯å£é‘¹æå¦½é‘ºæŽ•å§­é‘ºç†»å¨€é‘ºî„ƒå«›é‘»ï½ˆå«™é‘»æŽ•å«¶é‘»å® å«¼é‘¾æ’¹å¯–é‘»æ˜å«»é‘»ç‚¶å¯™é‘»æ»†å¯œé‘»æ¬’å°©é‘¼ç£‹å¯²é‘¼èŒ¶å°¡é‘½â‚¬é‘¼ç¡…å´˜é‘½å‘°å°Ÿé‘¼î‚¥å¯³é‘¼æ¨¿å·ºé‘¾æ°³å¸¾é‘¾ç†»å¸°é‘¾æ ¬å°ˆé‘¾åº¤å·¼é‘¾å©…åµ“é‘¾ä½ƒåµ†é‘½ä½ƒå¸¬é‘¾å¤Žå¸¹é‘¿ç£‹æ‚¡é‘¿î‚¥å¼¾é‘¿å€Ÿæ‚†é‘¿æ¨¿æ‚‘é‘¿ä½½å½¿é’€å›ªå½”é‘¿èŒ¶æ‚•é’€ãˆ£æ‚¹é‘¾å€Ÿæƒ›é’„å—šå¾Žé’î…¡æƒ‡é’€è‰°æšé’‚å‹®æ‡›é’î‚¥æŒ±é’î†¿æ‹é’â•„æ†œé’€î„ƒæ‡é’ç¡…æƒ–é’ƒå©…æ†¿é’‚ç¡…æ’é’‚ç†»æ‘é’ƒå¶ˆæ‡é’ƒæ°³æ»é’ƒä½½æ¯é’ƒæ ¬æŒ•é’„Â¤æ‘½é’ƒç£‹æ•†é’„æ¨¿æ•©é’„ç†»æ•ƒé’„æ—‡æ‘·é’‘â‚¬é’‘ï½ˆæ™¿é’‘ï¿½"],["e540","é’‘ä½½æ§€é’‘å¬­æ™»é’–â‚¬é’–ã‚ˆæž…é’–æˆ£æžˆé’–ã„¨æš›é’–æ—‡æž¦é’˜î‡æžƒé’–æ»†æš¦é’‘ææž‘é’˜å¤ŽæŸ¡é’˜å¿šæŸŸé’˜æ„¯æ£”é’˜æ¿Šæ£©é’˜æ»†æ¤†é“‡å©…æ§—é“‡å¬­æ¤Œé’˜é¸¿æ§…é“‡ãˆ£æ§¡é“‡æ‹Œæ¨‹é“å¶„ç®·é“æ—‡æ«‰é“Ñ†æ«›é““æ’¹æ®»é““â•„æ¯†é““å¬­æ®žé““æƒ°æ¯Œé“”å‹®æ³¦é““æ‹Œæ³¬é” ï½ˆæ¯‡é“”æ—‡æ´–é“”â•„æ´­"],["e580","é“”ç†»æ´“é“”îˆæ¹Œé“šå—šæ¹€é“šâ‚¬é“šå†­æµ•é“šæˆ£æ¹é“šå¶ˆæµŒé“šå©…æ¹¸é“šèƒ¯æ¹»é“šæ˜æ¹§é“šâ•„æ¹šé“¦çŠºæ½«é“¦æ­Œæ½“é“¦åº¤æ¾Šé“¦æ¥„æ½¹é“¦î†¿æ½¤é“¦æ’¹æ½±é“¦î‡çˆ¡é“»ãˆ£çé“»å‚çŸé”œå¬­ç²é”œâ‚¬é”œæ„°æ´Šé“»î‚¥ç„ºé“»å® ç„½é”œå—šç®é”œîˆç…µé”œçŠºçˆ®é” å¶ˆç†…é”œæƒ°ç…¼é” åº¤ç…‰é” æˆ£çˆ¾é” æ›¡ç‰é” Â¤ç‰¨é” æƒ°ç‰´é” Ñ†ç‰·ç›å‹®î”‡ç›æŽ•î”žç›ç‚¶ã€ç›î‚¥î•¦ç›æî–ƒç›ä½ƒã€—çšä½ƒã€”çšå‚î•¼çšæŽ•î©çšæ¬’â…±çšå¶ˆâ…³çšæ‹Œâ’–çšè¾«î—ˆç‘å‹®î—™ç‘æ¨¿î—žç‘æ¿Šï¼™ç‘œå‚ï¼œç‘ç£‹ï¼ˆç‘èŒ¶î˜©ç‘œå²ƒî˜¯ç‘œæ’¹îšˆç‘œç‚¶ã…ç‘œî‡ã‹ç‘—ä½½îš‰ç‘œæ˜ã–ç‘œæ­Œîš‘ç‘œæ¿Šîš¥ç‘—ï¿½"],["e640","ç‘—ï¹ã‚¤ç‘—î…¡ã‚ªç‘—îˆã‚´ç‘—ç–¯ã‚¾ç‘•å†­î›­ç‘•å©…î›¸ç‘•æ¨¿Î‘ç‘•â•„Î–ç‘•î„ƒÎŸç‘•èŒ¶îž†ç‘•å€Ÿîž‹ç‘™â‚¬ç‘™æ°³î¡ç‘™æ¿ŠÐç‘™ç£‹Ð¦ç‘·å†­îž¼ç‘·æ„¯â–½ç‘·æ¶œîŸƒç‘·ãƒ¨Ç˜ç‘­ä½½îŸ¸ç‘­æŽ•ï¹©ç‘­å £â”˜ç‘­î…¡â”ˆç‘­ãˆ£çç‘¾å‚çŽç‘¾ã„¨î€€ç‘¾æˆ£î€„ç‘¾ï¹ç¨ç‘¾ï½ˆç“ç’œå¶ˆçŽç’œæ°³î¨ç’œå® î¤"],["e680","ç’œã‚ˆî®ç’Žæ—‡ç·ç’œãˆ£î´ç’œç‚¶ç±ç’Žå²ƒç‘–ç’Žæ°³îžç’Žæ ¬ç‘¦ç’Žæ¥„ç‘ºç’ŽæŠ½çšç’Žï¹îƒ†ç’Žæîƒƒç’€ä½½ç“•ç’€å¿šç“—ç’€å¤Žç“¥ç’€æ¶œç“ªç’€î‚¥ç“±ç’€î„ƒî„¨ç’€ç£‹î„¶ç’â‚¬ç’å²ƒç•®ç’æŽ•ç•µç’æ ¬ç•½ç’æ°³æ˜‚ç’žä½½ç¿±ç’žå £ç‚ç’žåº¤çˆç’žæ›¡é›¹ç’žî„ƒå¤‡ç’žé¸¿çŸ€ç’¨å¤ŽçŸƒç’¨å©…çŸ‹ç’¨åº¤çŸ“ç’žè‰°çŸ˜éŽ´æ¿Šç®”ç’¨î‡æ­¥ç’¨èŒ¶æ¸¤ç’¨î†¿æ•ç’©å £ç¡œç’©ã‚ˆå¸¸ç’©æ°³è¾°ç’©é¸¿éƒ´ç’å‹®ç£ªç’å©…ç£­ç’å¿šç£µç’æ„°ç¶†ç’æ’¹ç¡©ç’æ—‡ç¤€ç’§Ñ†æ·¡ç’§è¾«å…šç“’ä½½ç¨’ç’ºå‚æ¯’ç“’é¸¿çª‚ç’ºæ°³çªŽç’ºå²ƒçª™ç’ºå¬­è—©ç’ºî‚¥çª¡ç’ºï½ˆèŠ³éŸªå £ç¬ç’ºèƒ¯ç¬£éŸªç‚¶ç¬ŽéŸªç†»ç®“éŸªä½ƒèµ´éŸªç£‹ç® "],["e740","éŸ«å›ªç®ŸéŸ«å²ƒç®°éŸ«å £ç®¼éŸ«ã‚ˆç¯„éŸªî‡æ¢—éŸ«æ›¡è‹ŸéŸ«èŒ¶è¾œéŸ¬ä½½ç°¢éŸ¬å‘°ç°žéŸ¬å¬­ç°¥éŸ¬æ’¹ç°¯éŸ¬æ—‡ç°·éŸ¬î‡éª¸éŸ¬î„ƒå–ŠæŒå—šç½•éŸ¬æç²ŽæŒå £ç²™æŒæ¶œå”¬æŒè‰°æ¢æŒî‚¥ç—ªæ“å©…ç´–æ“æ›¡ç´¥æ“æ¬’ç´¦æ“æ»†ç´µæ“æ¶œç´æ“ï¹æ±²æ“æ˜è„Šæžå‘°çµºæ“æç¶„æžå¤Žçµ¾æžåº¤ç¶æžï¿½"],["e780","æžãˆ£å‰‘æžã‚ˆç·¶æˆç†»è†æˆî…¡è­¦æˆç–¯ç¹—æ©ãƒ¨ç«£æ©î‡åˆŠé–­å›ªçœ‹é–«å‘°æŠ—æ©æ´ªâ‚¬æˆ¦â‚¬æ›¢â‚¬ï¿ â‚¬å¶‰â‚¬ç‚ºâ‚¬æ ­â‚¬å¬®â‚¬Ñ‡â‚¬å •â‚¬ç”¸â‚¬ç¡…æ‰›é–¬å¿›äº¹é–¬æˆ¦äº½é–«åº¨äº¯é–«é¹ƒä»é–¬æ©€ä»¦é–¬ã„©ä¼…é–¬å •æ¯ƒé–¬æŸ¥å€é–¬ä»‹å€Žé–­â‚¬é–­å©‡å€é–­å¿›åé–­îˆžå™é–­ç”¸å„®é–®ã‚†å¢—é–®æ¶¢å‰›é–¯æŽ—å‰»é–¯æŸ¥åŠ™é–°å©‡åŽ²é–°æ©€å„é–°ãƒ©åé–°æŠ½å¢é–±å¬®å”¹é–±å‚žå•Ÿé–±î‚¦å•¹é–±îˆå–Œé–±æ’®å–“é–²â‚¬é–²ä¾€å™³é–²å¬®å™½é–²æ ­åšé–²ï¿ åšŠé–²å¥¸åš¨é–²å •åž¶é–²å—åžŸé–³î„„åž¥é–³æˆ¦å¢³é–´æ¥…å¢”é–´å¤å¢¹é–´å ¥å§‡é–³å—å¢œé–´æ„°å§•é–µæ ­å§„é–µæ¶¢å¢¯é–¶å¿›å§½é–µçƒ½å«¨é–·å¿›å«¼é–¸å‹¯å°ž"],["e840","é–·æ¬“å°‡é–·æ°¶å°ˆé–·æ´ªå°©é–·å©šå´ªé–¸çŠ»åµ“é–¸î‡€å´ é–¹ä¼´å¹€é–¹î…¢å¸žé–¹å½’å½‡é–ºæ¥…å½£é–ºãƒ©å½‰é–ºå†®å½Žé–ºæ„°å¼µé–ºã‚‰æ‚®é–»æ—ˆæ‚¡é–»å†®æ‚‹é–»æ„°æƒ—é–»î‚¦æƒ–é–»ï¿ æƒ¡é–¼ä¾€æ†­é–¼å‹¯æ†¶é–¼çŠ»æ†¿é–¼ç‚ºæ‡‰é–³â•…æ‡“é–¼ç”¸æ‡›é–¼ä»‹æ†µé–¼å¥¸æ‡¢é–½ä¾€æ‡£é—å‚žæžƒé—å©‡æž–é—æ ­æž é—ï¿½"],["e880","é—çŠ»æž¿é—Ñ‡æŸ‡é—å¥¸æŸ£é—å½’æŸ§é—‚å©ƒæ…·é—‚å†®æ£ˆé—‚å²„æ£”é—‚æ—ˆæ£–é—‚æ»ˆæ£¥é—‚ãƒ©æ£¦é—ƒï¿ æ§°é—ƒî‡€æ§¸é—„å‚žæª¶é—„å¿›æªµé—„çƒ½æ«†é—„ç‚ºæ«‡é—„ç†¼æ«é—„æŸ¥æ«–é—…å¶‰æ®¬é—…æ›¢æ®«é—…îˆæ¯€é—…éæ¯‘é—…ä¼´æ¯šé—…å •æ¯Ÿé—…å½’æ³¿é—†å¬®æ³¬é—†å¶ˆîš’é—†æ»ˆæ¹‡é—†æ›¢æµŒé—‡å‹¯æ¸¾é—‡å ¥æ¹é—‡åº¨æ¹‹é—‡å¿›æ¹’é—‡æ¬“æ¹¦é—‡îˆæ¹´é—‡å½’æº„é—‡é¹ƒæ½‰é—ˆå—›æ½é—ˆå‚žæ½é—ˆæ»ˆæ½¬é—ˆã‚‰æ½¶é—ˆã„¥å«†é—ˆî‚¦æ¾…é—ˆå½’ç€°é—ˆå¥¸ç€¬é—ˆæ´ªç€±é—‰å¬®ç€¼é—‰æ„°ç‰é—‰ã„©ç•é—‰ï½‰ç£é—‰æ’®ç„¹é—Šå—›ç„¾é—Šå¬®ç…–é—Šî…¢ç¶‡é—ŠèŒ¬ç¶é—Šå •ç…¹é—‹å¿›çˆ©é—‹æç‰‘é—‹ï¿ ç‰±é—‹ä»‹î”‹æ¤¤å¿›î”æ¤¤î‚¦â€™æ¤¤ï¿½"],["e940","æ¤¤éã€ˆæ¤¤æŠ½â…¹æ£°îˆžâ’ˆæ£°å •î—‰æ¤‹å†®î—‹æ¤‹â•…ï¼‹æ¤å†®î˜®æ¤æŽ—î˜¹æ¤æ©€ãæ¤æ¿‹î™ƒæ¤ã‚‰î™…æ¤î„„ãŽæ¤ä»‹ãžæ¥—å‚žîšŽæ¥—å‘´îš•æ¥—å¬®îš–æ¥—æŽ—îš‘æ¥—æ›¢î›¼æ££æ©€Î•æ££î…¢Îžæ££å¥¸î¤æ¤æ¶¢î¢æ¤æ©€î–æ¤î…¢Ðœæ¤éÐ æ¤å©šÐ¦æ¥±ä¾€â—¤æ¥±å‘´Ð‘æ¥±æ¬“Çæ¥±çƒ½ï¹¨æ¤¹å‚žï¹¢æ¤¹ï¿½"],["e980","æ¥±é¹ƒîŸ³æ¤¹å¶‰îŸ¸æ¤¹æ¥…îŸ¼æ¤¹ãˆ¤â”æ¤¹ã‚‰â”…æ¤¹î‚¦â”†æ¥ î…¢î€æ¥ å¥¸ç‹æ¥‚å¿›ç£æ¥‚æ’»ç¨æ¥‚ç‚ºç¶æ¥‚ãˆ¤î æ¥‚ï¹‚î¬æ¥‚î‚¦î«æ¥‚æ’®î®æ¥‚çƒ½î¸æ¥å—›ç‘¯æ¥æ°¶ç‘¹æ¥ãˆ¤î‚¾æ¥ãƒ©îƒ‚æ¥ã„©îƒ„æ¥îˆîƒ‰æ¥îˆžîƒæ¦„å‹¯ç“‹æ¦„å¿›ç“–æ¦„åº¨ç“šæ¦„æ©€î„­æ¥«æ’»ç• æ¥«æˆ¦ç•ºæ¥«æ¥…ç–…æ¥«çŠ»î…¿æ¥«æ’®ç˜ˆæ¦€å©‡î†æ¦€å—›ç˜¡æ¦€æˆ¦ç˜¨æ¦€ï½‰î‡—æ¦€ã‚‰ç˜®æ¦€ï¿ æ˜‚æ¦€æŸ¥î‡¦æ¦€ä¼´çš¶æ¦˜æ—ˆçš¦æ¦˜æ’»çš©æ¦˜å—›çš¥æ¦˜æŽ—çš§æ¦˜å‹¯çˆ±æ¦˜æ¶¢å“Žæ¦˜ã‚‰å•Šæ¦˜ä¼´çœ¹æ¦˜æŸ¥çœ´æ¦˜é¹ƒç”æ¥¸çŠ»æŠ±æ¥¸å •å¤‡æ§ŒÑ‡è¶…æ§Œä¼´ç£¯æ¦‡å ¥å€¡æ¦‡å†®ç£«æ¦‡îˆå¤„æ§ŽîˆžçŸ—æ¦‡ç†¼ç¥«æ¦‡æ›¢ç£¼æ¦ˆä¾€çº¯æ¦‡é¹ƒç¥®æ¦ˆï¿½"],["ea40","æ¦ˆæ¿‹ç¦æ¦ˆã‚‰ç¥½æ¦ˆæ„°ç¦‰æ¦ˆæŸ¥ç§¹æ§Žå›¬ä¸œæ¦ˆîˆžå²›æ§Žæ°¶é’‰æ§Žâ•…æ«æ¦‰å‹¯ç©ªæ§Žå©šé™¡æ§Žæ´ªç©¯æ¦‰å¿›ç©«æ¦‰æ¬“çªŠæ¦‰æä¹æ¦‰î…¢çŸ¾æ¦‰ä»‹ç¬Ÿæ¥¦æ¶¢ç¬§æ¥£ç”¸æž„æ¥£ä»‹ç°›æ¥¹å ¥ç°¨æ¥¹å²„ç°°æ¥¹æ›¢ç°¯æ¥¹æ¿‹äº¥æ¥¹â•…ç„Šæ¥¹îˆæ¶µé—ˆï¿ ç²šæ¦›åº¨ç²¡æ¦›æ„°ç²©æ¦›æ»ˆç²¸æ¦›æ¿‹ç²»æ¦›ãƒ©èŠ±æ¦›ï¿½"],["ea80","æ¦›æ’®æ¬¢æ¦›çƒ½è¿˜æ¦›å©šæ‚£æ¦›ä»‹ç´˜æ¦§å ¢æ¯žæ¦§æ›¢è‚Œæ¦§î„„å­£æ¦»å©‡ç¶Šæ¦»æ—ˆå‰‘æ¦»ç†¼ç¶˜æ¦»ï¿ æº…æ¦»Ñ‡æµ†æ¦»îˆæ¤’æ¦»æŸ¥è•‰æ¦«æ›¢ç·¶æ¦«çŠ²ç‰¤å¦²å›¬ä»šéŸã‚…åš‹é”ï¿½"],["ed40","ç»¾å©…î™é–¸å ¥å¦¶é’ƒæ»€ç¹…éç»˜æ§ºå¦«å ¥å«»é‡è¯²çµ½æ¶“ã„¤å¼§æµ é—´ç´‘æµ¼å†§è„Šæµ£æ ¦ç·¬æ¸šå©ç·´æ¸šæ–¾ç¹Šé‹â‚¬éŠî­é éŠç‚²äºžé‹æ¿äº—éŒæ–¿å…‡éæ¨ºåŽžéã‚…å•™éæƒ§åšžé’æ›žå§•é”ï¹€åª­é•æ¶˜å¯‘é–å›§å°‹é—æ’å¸—é˜æ’å½Žé“·åº¡æŒéœå©‚æŒ¬éåž®æž‚é§æ¬æ½µé¨î„€ç„¾é©å›·â—¤"],["ed80","é“·æ„¬î–ƒæ¾§æ’î˜°æ¿‚æ’³îš æ¿‚æ¿†ã‚£æ¿¡ã‚…îž†ç€›æ §ç˜ˆé¢îˆšç˜¶ç€µî„€ç›€å®€ï¹€åŸ å®„é›æ£å®“æ“„â˜‰å®“å‚šæ·¡å®¥ç¨¿è±†å®¸æ„¬è‚Œå¯®æ‘æ¶§å¯°å³°ç¹›éŽ­æ¿‡å€•éŽ®å©ƒå„ªéŽ¯æ›ŸåŠ†éŽ¯å‰å‰³éŽ°é”‹åŠ™éŽ²æ¨»åžžéŽ¶ï¸½å½½éŽ½çŠ³æŒéŽ¿åº¢æ™­é„â‚¬é„æ›Ÿæ¨†é„å¤‹æ§·é„ç‚´æ§«é…ãƒ¦æ«é…æ¬™âŠ•é…è™«æ®­é†çŠ³æ¯‘é†æŒŽæµéˆåº¯ã‰é‰ï¸½ç®å¦—æŽ“ç„µéä½¹î”‰å¦«å¿¥ã€’å¦¤îŸ’ã€å§’æ¨»Ð‘å¦¯ç‰ˆâ”‡å§—å—˜â”å§—ç‚¬îŸå¨…ã‚†ç˜±å§˜æŒŽç–å¨Œå—˜æ‚²å¨‰æ°­ç£©å¨‘å›¨å¼¹å¨‘æ ¨å†¬å¨£å¿”çŠ¯å¨£å‰èŠ³å¨“è§„ç®¿å¨“Ñ„è®£å©§æŒŽç·¢å©¢åž«åº·éŽå‘¯â‚¬å›©â‚¬ã„§å€•éî‚¤å‰°é’å‹­åŽ¹é“å—™åŽ™é“·æ› å™¥é•å‰§å§³"],["ee40","é˜å‰§å°‹é“·æ «åµŽéœç•Œå¼¶éæ «å½›éæŽ”æ‚‹éç”µæƒéžî†æƒ„éžî†¾æ†¿é å¤ŒæŒ“é¢ä½ºæšžé¨å‚œæ®°é¨ç‚µæ®¯é¨ï¸¼îž½é«å——å§±é®ï¼„î”“çº­ã‚‡ã€Žç»€å¸®îž¾é“·æ¬™îŸ€ç»‚æ—“îŸç»‚æ¶šç£ç»”ÑîŸ‚ç»”î‚¤ç–„é“·æ¿ˆç¥±ç»²æ»…æ–—ç¼çŠµçªŽç»»æŽ”çµ¿ç¼‡â˜…îŸ„é‘¼ä½½å´²é‘½èƒ¯å¼´é‘¿æƒ°æ†Ÿé’‚ç£‹æ™¸é’‘ï¿½"],["ee80","é’‘î‚¬îŸ…é’–å¸®îŸ†é“·Â¤çˆ£ç‘ä½ƒâŠ•ç‘·ç–¯â”•ç‘¾Ñ†î€ç’œç‡‚Ã¡ç’œæƒ°ç“ç’€èƒ¯å˜²ç’©ç£‹ç£¼ç’§è®¹ÇŽæŒå¿¥Ã é“·ãƒ©ä»¹é–®çƒ‡Ã©é–¯æ›¢åŠŽé–²æ°¶åš„é–²ç‚ºåšŸé–²î‡€åš–é–²ãƒ©åžŽé–³æ„°åž”é–³æ´ªå¢é–³å¥¸å¢¡é–´æ¬“å¢¤é–³å½’å¢½é–µÑ‡å£é–´æå«¥é–¶æ¥…å«é–¶æ„¶Ä›é–¶æ›¢å«šé–¶æ’»å°Œé–·ï¿ å«½é“·ã„©å°€é–¶å—å¯¾é–·å‚žåµƒé–¸æ¥…å¸³é–ºå—›å½é–ºææƒé–¼å‘´æ†Ÿé—æŽžî¡é“·â•…æ®±é—…îˆžæ¹·é—‡å©šæ½ˆé—ˆå¶‰æ½–é—ˆæˆ¦æ½Ÿæ¤¤æ¥…Ë‰é“·îŽÇæ¤ÑÃ¬æ££ç‚ºîŸ¬æ¥‚æ¬“ç³æ¦„ç”¸î„«æ¥«å¿›î†ˆæ¥«å©šçšœæ¦ˆä¼´ä½†é“·î…¢ç¬æ¦›ï¿½"],["eeef","éˆªï¿½",9,"é”Ÿî®éƒ¡é”›å›·ç´“"],["f040","é¡Žâ‚¬",62],["f080","é¡Žï¿½",124],["f140","é¡ï¿½",62],["f180","é¡‘ï¿½",124],["f240","é¡“ï¿½",62],["f280","é¡”ï¿½",124],["f340","é¡–ï¿½",62],["f380","é¡—ï¿½",124],["f440","é¡™ï¿½",62],["f480","é¡šï¿½",124],["f540","é¡œï¿½",62],["f580","é¡ï¿½",124],["f640","é¡Ÿï¿½",62],["f680","é¡ ï¿½",124],["f740","é¡¢ï¿½",62],["f780","é¡£ï¿½",124],["f840","é¡¥ï¿½",62],["f880","é¡¦ï¿½",124],["f940","é¡¨ï¿½"],["fa40","éˆªï¿½",9,"éˆªï¿½",9,"é”Ÿî®éƒ¡é”›å›·ç´“éŠæ‰å‰¸éˆ©â™€åŸ–ç»¾å©…î™é–¸å ¥å¦¶é’ƒæ»€ç¹…éç»˜æ§ºå¦«å ¥å«»é‡è¯²çµ½æ¶“ã„¤å¼§æµ é—´ç´‘æµ¼å†§è„Šæµ£æ ¦ç·¬æ¸šå©ç·´æ¸šæ–¾ç¹Šé‹â‚¬éŠî­é éŠç‚²äºžé‹æ¿äº—éŒæ–¿å…‡éæ¨ºåŽž"],["fa80","éã‚…å•™éæƒ§åšžé’æ›žå§•é”ï¹€åª­é•æ¶˜å¯‘é–å›§å°‹é—æ’å¸—é˜æ’å½Žé“·åº¡æŒéœå©‚æŒ¬éåž®æž‚é§æ¬æ½µé¨î„€ç„¾é©å›·â—¤é“·æ„¬î–ƒæ¾§æ’î˜°æ¿‚æ’³îš æ¿‚æ¿†ã‚£æ¿¡ã‚…îž†ç€›æ §ç˜ˆé¢îˆšç˜¶ç€µî„€ç›€å®€ï¹€åŸ å®„é›æ£å®“æ“„â˜‰å®“å‚šæ·¡å®¥ç¨¿è±†å®¸æ„¬è‚Œå¯®æ‘æ¶§å¯°å³°ç¹›éŽ­æ¿‡å€•éŽ®å©ƒå„ªéŽ¯æ›ŸåŠ†éŽ¯å‰å‰³éŽ°é”‹åŠ™éŽ²æ¨»åžžéŽ¶ï¸½å½½éŽ½çŠ³æŒéŽ¿åº¢æ™­é„â‚¬é„æ›Ÿæ¨†é„å¤‹æ§·é„ç‚´æ§«é…ãƒ¦æ«é…æ¬™âŠ•é…è™«æ®­é†çŠ³æ¯‘é†æŒŽæµéˆåº¯ã‰é‰ï¸½ç®å¦—æŽ“ç„µéä½¹î”‰å¦«å¿¥ã€’å¦¤îŸ’ã€å§’æ¨»Ð‘å¦¯ç‰ˆâ”‡å§—å—˜â”å§—ç‚¬îŸå¨…ã‚†ç˜±å§˜æŒŽç–å¨Œå—˜æ‚²å¨‰æ°­ç£©å¨‘å›¨å¼¹"],["fb40","å¨‘æ ¨å†¬å¨£å¿”çŠ¯å¨£å‰èŠ³å¨“è§„ç®¿å¨“Ñ„è®£å©§æŒŽç·¢å©¢åž«åº·éŽå‘¯â‚¬å›©â‚¬ã„§å€•éî‚¤å‰°é’å‹­åŽ¹é“å—™åŽ™é“·æ› å™¥é•å‰§å§³é˜å‰§å°‹é“·æ «åµŽéœç•Œå¼¶éæ «å½›éæŽ”æ‚‹éç”µæƒéžî†æƒ„éžî†¾æ†¿é å¤ŒæŒ“é¢ä½ºæšžé¨å‚œæ®°é¨ç‚µæ®¯é¨ï¸¼îž½é«å——å§±é®ï¼„î”“çº­ã‚‡ã€Žç»€å¸®îž¾é“·ï¿½"],["fb80","é“·æ°±î›¹é“·æ¶šîœ€ç»”æˆ î¤é“·æ»…î¨ç» çƒ‡îŸƒç»²å ¢ç¦ç¼é£Žç¨œç»¶æ «ç®³ç¼ƒå›©å°½é“·ç‚¶å¯”é‘½ãˆ£åµ–é‘¿å›ªå½¾é’å £æŒ»é’‘æ’¹æš€é’‘î‚¬îŸ…é’–å¸®îŸ†é“·Â¤çˆ£ç‘ä½ƒâŠ•ç‘·ç–¯â”•ç‘¾Ñ†î€ç’œç‡‚Ã¡ç’œæƒ°ç“ç’€èƒ¯å˜²ç’©ç£‹ç£¼ç’§è®¹ÇŽæŒå¿¥Ã é“·ãƒ©ä»¹é–®çƒ‡Ã©é–¯æ›¢åŠŽé–²æ°¶åš„é–²ç‚ºåšŸé–²î‡€åš–é–²ãƒ©åžŽé–³æ„°åž”é–³æ´ªå¢é–³å¥¸å¢¡é–´æ¬“å¢¤é–³å½’å¢½é–µÑ‡å£é–´æå«¥é–¶æ¥…å«é–¶æ„¶Ä›é–¶æ›¢å«šé–¶æ’»å°Œé–·ï¿ å«½é“·ã„©å°€é–¶å—å¯¾é–·å‚žåµƒé–¸æ¥…å¸³é–ºå—›å½é–ºææƒé–¼å‘´æ†Ÿé—æŽžî¡é“·â•…æ®±é—…îˆžæ¹·é—‡å©šæ½ˆé—ˆå¶‰æ½–é—ˆæˆ¦æ½Ÿæ¤¤æ¥…Ë‰é“·îŽÇæ¤ÑÃ¬æ££ç‚ºîŸ¬æ¥‚ï¿½"],["fc40","æ¥‚æ»ˆî„®æ¦„æŸ¥ç•¯æ¥«éî†’æ¦˜â‚¬æ¦ˆä¼´ä½†é“·î…¢ç¬æ¦›ï¿½"]]

            /***/ }),
        /* 99 */
        /***/ (function(module, exports) {

            module.exports = [["0","\u0000",127],["8ea1","é”ï¿½",62],["a1a1","éŠ†â‚¬éŠ†ä½µâ‚¬å‚¦ç´é”›åº›å…“é”›æ°¾ç´±é”›ç‡‚ç´’éŠˆæ¶–å€»éº“é”â‚¬ç¯“é”›æ’…æµšé”›è£¤å…˜éŠ‰ä¿±å€½éŠˆç‚ªâ‚¬å†§ç²·éŠ†å‘«â‚¬å—â‚¬å›¥å…—éˆ¥æ›—â‚¬æ„¶ç´¡é”›ç¡·ç¶–éˆ­ãƒ¯ç¶”éˆ¥ï¸¹â‚¬ãƒ¢â‚¬æ¨·â‚¬æ¬Œâ‚¬æº¾â‚¬æ¿“ç´™é”›å¤ˆâ‚¬æ–»â‚¬æ›ªè“Ÿé”›æ–¤ç¶“é”æ¿„â‚¬ï¿½",9,"é”›å¬¶ç´žå¤è„³æ¢…é”›æ¿ƒå¢µé”›æ»ç´´éˆ®ï¸¹å¢½éˆ­ç‚©åŸ“éˆ¾å‚—æª§æŽ³éˆ¥æµ‹â‚¬æ–¥å‰é”Ÿãƒ¯ç´•é”Ÿç‹…ä¿Šé”›å’ƒç´”é”›å—­ç´›é”›çŠ…Ñ€æ§…éˆ½å‘ªæ£†éˆ¼å¿Šæ£Šéˆ¼ï¿½"],["a2a1","éˆ¼å—æž´éˆ»çŠ«æŸéˆ»æµ‹æŸ¦éˆ»å°–â‚¬æ±‡â‚¬æŽ†å•‹éˆ«æ„¨å•ˆéˆ«æ’±â‚¬ï¿½"],["a2ba","éˆ­å šåž•éˆ¯å—å¦µéˆ¯å‚—å¦°éˆ­îåŸ„"],["a2ca","éˆ­Ñ€åŸé”Ÿâ‘©å™¿éˆ¬æ–ºåžéˆ­ï¿½"],["a2dc","éˆ­çŠ«å§¤éˆ±æŽ†åžˆéˆ­å›£å¢¶éˆ®æŽ†å£€éˆ®î‚Ÿåž°éˆ­è§£åžµéˆ­ç¢˜åŸ†éˆ­ï¿½"],["a2f2","éˆ©î‚Ÿâ‚¬æ‰³æ«™éˆ¾î…›æ«”éˆ¥çŠ«â‚¬Ã·ï¿½"],["a2fe","éˆ¼ï¿½"],["a3b0","é”›ï¿½",9],["a3c1","é”›ï¿½",25],["a3e1","é”ï¿½",25],["a4a1","éŠ‡ï¿½",82],["a5a1","éŠˆï¿½",85],["a6a1","èž’",16,"å±",6],["a6c1","ä¼ª",16,"èŸ½",6],["a7a1","è¢—",5,"è¡¼è¢ž",25],["a7d1","é‚ª",5,"è¤¢å¸",25],["a8a1","éˆ¹â‚¬éˆ¹å‚—æ”²éˆ¹æ„¨æ•‡éˆ¹æ–ºæ•Žéˆ¹îƒ½æ•œéˆ¹ç²¹æ•¿éˆ¹ä½²æ”¦éˆ¹å¿Šæ•éˆ¹æ¶’æ•†éˆ¹ï½‚æ•µéˆ¹î‚Ÿæ•¾éˆºå¬§æ•”éˆ¹îˆ—æ•¤éˆ¹å°æ–‚éˆ¹æ¿ƒæ•¯éˆ¹ãƒ¢æ•»éˆºï¿½"],["ada1","éˆ¶ï¿½",19,"éˆªï¿½",9],["adc0","éŠ”å¤ˆå¯¯éŠ“î¬å´“éŠ“æ¨¸å°ŽéŠ“å†¦å°ªéŠ”æˆ™å´¡éŠ“å¶ƒå°éŠ“ï½ƒå°—éŠ”å¨¿å°°éŠ•æº¿å¸©éŠ•ç‚ªå¸‹éŠ•å¿‹å¼°éŠ•ï¿½"],["addf","éŠ”æ±‡â‚¬æ¿„â‚¬ç†²å‰¸éŠ–å¶åŠ‡éŠ‘ï¿½",4,"éŠä¾¿åŸéŠå¹¿åµ•éŠ”å§åµ“éˆ®æŽ†å¢¶éˆ­î‚ŸåŸ‰éˆ­æˆ”åž°éˆ¯ãƒ¢åž¹éˆ­ç†²å¨éˆ­ç¢˜åŸ„éˆ­ï¿½"],["b0a1","æµœæ»ƒæ•„æ¿žå†®æ¨‹éâ‚¬éŽ°æ¶™å°æ¿®å •â‚¬ãˆ£æ‡™é‘¼æ»…îŸ®éŽ®î…å½™å¨“ãƒ¦æ£´é’ï¹å§¦æ¦€åž«î•¸é¦Ñ„æž´éŽµåžç–€æ¿®æ„¯æ«¥æ¤‹å¯¸è€½ç¼é¹ƒç•®éŽ´æ «çŸ¡çšå³°ç•¨æ´åž«å¯œé†æ¥î”é—‚å›¬ç€ºé‰å¿Žäº’æµ¼å©ç¶…æ¸šæ¿†äº¯é¥æ’ã—æ¿®æ–¿â–‰çå¤‹å„«éŽ°å¿”åžé„æ’´î˜ªéè™¹æ™±é£æ‰®Ð©ç¼î… çŸ¾é‘³å†­æ‚—ç›ï½ˆç‘é–¬æ›¢ä¼œé–è®³ç°³æµœãƒ¥ç…™é‘²æŸ¥å„Šçº¾îˆ™ç«´æ¾¹è¾¨å­©é–«å“¥Ãºé‘¼ã„¨å¦ºæ¦˜îˆšåŽ‘é—æ¿æŠéâ€³æ´œæ¿®è¯²ç´©æ¤‹å‰å¸†é‘³ã‚ˆæ•ª"],["b1a1","é—„ãˆ¤æ«šé—…çŠ»ç†éšå¬ªå½¸ç€¹å›©å„šç¼‡å€Ÿç¸½é—†ã„¥åµ‚æ¦ˆæ»…î€™æ¶“æˆ î•¸é‘·å…¼ç”«é¢æ¨ºæ”§å¨†æ¿Šæ•‹æ¦˜è¯²Ð”é˜â•‚éƒ¸é¡æ»ˆæžé£å‚™ç°¯é–¬å¬®æ´¸é‘½å¿›î˜±é™â€³æŸ–ç€£æ¿å¥–é„çŠ³æ´ºéå‹¬æ¡ˆå¨‰è™«ç©¿éŸæ¶šæ³©ç»Œåº¨ç‰¬é‘»è¾«î” ç‘­çŠ»å«®å¨‘èŒ¬æŸ…é©å©‡îŠéŽ®ï¹ç‘ç“’å©‡æŸŒå§’åº¡å¹éå——æ¹Œé«æ¿îš‰ç€¹æ‘æ¬¢éŽ¬ã„¦å¸ºéŽ»å­˜éƒ¨å©•æ—‚å€¤é’æ—‚åŽµé•æ› å°¶ç»ºä½½å£Žé‘»æˆ£æžŸé–¬çŠ»å¢°æ¦‡æ¶˜ã€…é‚å…¼ç”é¢ãƒ¥åš¬æ¾¶î†¼ã‚¥å¯°â‚¬è¹‡ï¿½"],["b2a1","éŽ¶å…¼æ¤‡å¦¯î…îƒ‚å¨ˆå¯¸å¸‡ç¼ˆä½½îš›æ¦‡î„„ç£¶æ¦›å‹«ç—…å¨Œæ ¬åµ’éŽå‹«çœ¿éŽ²æƒ°å™¯å¦—å‰å¢¶æ¶”æ¬Žäº¢é—å‘Šä»¼å¨“â•ƒîŸ­é—Šå……ç¬…é–æ ¦åˆ’æµ£æ›šå†€æ¸šâ€²åŒ é”çŠ²å½²é¢å¤Šî˜´ç€šä½¸î†ç€µï¼„î–é†å›¨ç‰é‹èˆµç“•å¨Œå´‡ä¼€éå‚œî›²ç»‚å‰§îŸ‡ç» å›ªå§³é‘»æ¶œå¯—é‘½ç–¯å½²é‘¿æ’¹æ½¶ç‘¾æ’æ§±ç’¨ã„¨å–€é–¬åº¨æ¹ é““å©ç¸¿å®„ã„¦åžœé—æ¬‘æ•¾é‘·ãƒ¨å¨Šé“”æç¡›é—†å‘´î˜¸æ¤æ›šç²™æµ¼æ°³Ð’é¥ç‚²î”æ¾¹å©‚æ¢è¹‡î‚£â‚¬î…å€²éŽ­ãˆ¡å™½éŽ´æŽ“å«„é€ï¿½"],["b3a1","æ¦„ä½¹æ«å§Šç‰ˆæ£éæ‰®æ™«é¨å—™æ¡£é‘ºãƒ¨ç…¿é—å¬®æ® ç’¨æ¿†åš¤é”æƒ§î˜»éœå†²î†Šå®•æ ¨åå§’å‚›åŠ¨çº°å¶ˆæµç›æ¥„â”Žé–¹Ñ‡î€—å¨´î„„Î˜é“”æ¬ç’éŒèƒ¯æ³¿é–³åº¡å¦°é¤å›§æ‚‡å¯¤æ’´å«›éŽ¾è§„ç‰¸éå‘Šî†’é›èŒ¬â’‘ç»Œî‚¥î›¿ç‘™æŽ•ä½†æ“å†®å„¹é—ï½‰æ®§é—ˆâ•î„Ÿå®€è™«ã‚½æ¤¤å¶‰î”“éŽºæ¶šç‘ºå¦¯î‚£â”›å§Šå •çšªå¨¼ç†·å£Šé æ¿‡ä¼†éŽ·î„æ¤¿å¨“å›¨ç²¦é’æ¶œî˜µæžå‹ªç¬–æ¦˜ç‘°å½¾å¦žæ¶™Ãªé—‰å‹¬ç‰šéæ»…ç’é’‚æŸ¥åš‹é–¹å±½æ«…æ¦‡ã„¦ç‰é‘¼å‘°æƒ"],["b4a1","ç»®ãƒ¥åžé‘»å‘¯æ‘æ¶”å¥ç·éçŠ²ç˜¨é’å©‚å«Žé•ÑƒåŠé æ°¬ç‰šæ¿®ï¹€ç•¬ç€¹æ¨ºç˜ºéªžæ’æž„éŽ®ï½†åŠ…éŽ±ï½†å–šéŽ»æ¶™æšéŒæˆžî”˜å¦«çƒ˜îƒ™å§æ’´çå©•ãˆ¡ç·±å¨¼å‘¯æŒµé¢æ¨¼æ´ éªå¬¬î¼ç» ï¼„å•Šç»¶â•ƒçº§ç¼ˆæ‹Œå€½é‘¹ï¹å¸ªç‘•å® çœç’¨î‚¦å€“é–¼æˆ¦æž”é—æˆ¦æž¹é—„ãƒ©ç…‹æ¤ã„¨åž¬æ¶“ç¨¿æƒˆå®€ç¨¿ç©¼éœâ•ƒæª¶éªç…Žåšç¼ˆî‚¥ç£±é—†ä¾€çˆ²æ¤¤æ—ˆî”æµ¼ä½·ç´Ÿé—åžæž©é£ã„¥ç†€æ¿‚å›§ç‘ç€µå‹«çŸç”¯å±½å’•è¹‡å±¾å½¯éˆçƒ˜æ£—éƒãˆ¡æ¹¡å¦«å¬«î—‰"],["b5a1","å§—ç†·èµ´å§£å‘®çš¸å§¹ç•Œæš±ç»å î„œç»‹â‚¬ç»±â‚¬å¯°å€Ÿî›´ç‘·æ¨¿æ³Šç’§ç–¯ç²šæ“æ¿‹ï¼‚æ¥±åº¨îƒ—æµœâ‚¬é‹è—‰å‰™æ¿¡æ’³ç–éŽ´îˆ›å¦§éŽ¿î„îƒ•é˜çŠµæž’ç»å›©äº¬é”œæ˜î€›ç’€ç‰ˆå¹€é‘¿å©‡çŽéšå¤Šæ‚†é î‚£î”™å§—æ¨¿â”Œé®Ñ„æ¾‹æ¦›å¶…åµˆç€¹ãˆ£å‰¼é“æ„°â‚¬å—•ç¬œæ¶”å‘¬ç²æµ¼æˆå¼·éšç¨¿î†…å¯®æ’´â‚¬ãƒ¦æ™³éˆèŠ¥çœ°å§¹å‰å¸¸éå“¥æ‚†ç»Œå‰î€ç»—å ¢ç¤†ç»¯å‰§éƒ¸éƒÑ…å¢°é˜è¯²çœ³å®¸ã„¦å«†éŽ·çŠ³å¯µå¨“çŠºæ«„ç‘·è¾«çª›é–¶å‘Šç´’ç»‚ï¹‚ç“ªæµœã„¤éŸ©æµœï¿½"],["b6a1","æ¸šæ¶—ç·ºéæˆåŽ™ç»”è·ºå¡é‘è·ºå´é–â€³åµ–é™î‚¢æŸ†æ¾§å†¨åœºå¯®å³°ç¶‚éŽ¬îˆ›äº¹éŽ­î…Ÿå°‚éæ¬îŸ©å¨‰ä½ºåª¯é™î… ç…°é‘³æ­Œå‰ é‘¸å £æ™­é–®çƒ½å½™é—Šå—îšœæ¤¹æ°«è¯é‘æ¿†ç¢é†ä½¹ã‚­çžâ‚¬é‡å‰ã‚µéœå¤‹î”•ç»®ä½¸å„é•ã‚…æ½Žå®¸é¹ƒå°é‚ã‚†î‚¾å¨†ç•Œæƒ”ç»‚ä½ºîž‰ç»›å¬¬ç©µé‘ºç¡…å¼»ç›èƒ¯îš¤ç’Žç¡…ç¹Žé–²æˆæ‚·é–µâ‚¬æ¶”æ¿†â‚¬è·ºå½žé–è™¹å«éœæ «ç…©é‘»ï¹å‡½æ¤å—›îæ¤æŽ‘å¿éŽ°æ°³æ«ˆé æ‰®â”–é‹è·ºç˜¬é–¬å›¬æ®”æ¶“å‰ç±é–²Ñƒç‰çžï¿½"],["b7a1","éŽºæ¨¼ç°å¨Œæ’»æ¾Šæžï¼„î€‰é”å©‡æ®˜ç»®å‚›ç‰€ç»»ç‰ˆî”–é–¸î„€å«´éšæ¶œæŸ…ç‘·æ’¶å…¢æŒå¶‰å„­é—ï¹î•­ç»ä½·ç¸½éŒæƒ§åžœéå‹«æ™¸é¦î… å½§é¨å¬ªîš–è¤°ãˆ ç·žéŽ­åž«å¾éŽ±Ñ„å•¯éŽºå‰æƒ¡éî„æ«™å¦—å‚›ç¬“é£ï¸¾Å„ç»¯è¤ç¥µç¼æ¬‘ç®£ç¼ƒî‚¥å¯§é‘½å©…æ³¹ç‘·å £î €ç’€ï¹å”¤é—‹æ°¶ç¨„é‘ºæ­Œç¹‹æ¦€ã„¥å¦µéŽ´ç†¸æ‹‘å©µâ‚¬é—…æ¬î”†éŒæˆžç‘ºå§¹çƒ˜ç¶Œç»Œå¯¸ç¥¼ç›â‚¬ç‘·ï½†æ¹€æµ è·ºâ‚¬ç‘°â‚¬ï¹€ä»´éç…ŽåŸœé“ï½…æž¾é¦å¿“çˆ¡ç€šå±½ç¼“éŽ²å‰åš«éŽ·è™«åµ…"],["b8a1","å¦žæ»„Ä«é—ç•Œå§®éšî†¾çˆºçº­îˆœå€’éªå²ƒåç‘•å¬­ç‘±ç’©ãˆ£ç²§é–¬ï½‰åµ‰é—„æ´ªî”šæ¥±æ’»åž¢éå†¨å¸«é˜å†²å¤Ÿå¯®ï¸½ç¬¡å©§æ„®å·¹éå‰§ç¥ªé‘¸ç–¯â–ˆç’œæ´ªæªºæ¶”åº¡â‚¬å¬ªå½œé›ç…Žæµæ¿®æˆî„å®¸åžéŸ©å¯®Ñ„åŸœéå‘®çŸå©€æ «å«„ç»¯å©…â’‹é‘²Â¤å„­é‘¿æ‹Œæª¸ç‘¾å›ªæ³•é–³çƒ½æ³§æ¤¤Ñ‡ç´¦æµœæ–¾ç°°æµ¼å¶…å´é›å¤Šæƒ¥æ¿žîˆšç·¦å¯°â„ƒå€å§ŠÑ„ç›éŸæ°±î•¦ç‘¾ç‚¶î€ƒç’€çƒ½å•‡æ¶”ç‚ºç˜”æµœã‚„éƒŠæ¸šîˆšâ‚¬æ¬â‚¬æ §åŽœéî„€å§›é”ç‘°å¬€é˜æ°¬å½›éšï¿½"],["b9a1","éšåº¡æž†é§æˆç‘æ¿‚è—‰ç“Ÿç€›æ¿†ç•¯å®¸ãƒ¥é˜€å®¸å³°åž¢æ´å†¨ç°¹æ´å³°ç´­éŽ­æŽ“åŽ¡éŽ¶æ¥å«ŽéŽºÑ„æ•¾é„å‚›æª­é‡å­˜æ¾€éâ„ƒî•¼å¦²å¬«ç™å¨²î…æ—¦å¨“îˆ›ç°¼é¢èŒ¬æ®—çº­î„‚Ç¹ç»¯çŠµç£ªç»±æ¨¼ç¦ç¼è¾«â‚¬æ›¡â‚¬å†­å—é‘²è¾«åŽ°é‘¶å¿šåŸ…é‘½æŽ•î”‘ç›Â¤ç‘³ç’¨ãˆ£è‡£é–®å©‡åºé–´è¾©ç‰½é–¶å¥¸æž»é—„å¶‰çˆ¡æ££æ¬“ç®æ¦‡è¯²å¢°é”î‚¢å½¿éšå î—šéŽ·é”‹ç¹ç’žî‡ç¶—æ¥¹ç‘°åŽ é’è¯²æ†¡é¥ç•Œï¹¢é–°çƒ½ç¦’æ¦›æŽ”å´‰å©•å¤Žåžé¢æˆæ‹·éŽ¯æ°¶î€‡é™æ¶œç‚¯"],["baa1","å§ã‚‰çˆŸæµ å©‚æ´¶é§ã‚…â’•æ¿ æ°­ä»ºéŽ³å›¨æ§’é„å—˜ç‰´å§Šè¾¨è´©é¥æ› æ˜¥é‘¹î‡€ç“Šæµœæ¶—ç¶ˆé™å¤Šæ”©å®“îˆšä¹å®¸î†½ç†å¨Œæ¬‘æ‡—é®å‚îŸ®é–¹æ ¬î—¤é§æ„¬éª‡éŽ¸î‚¢åŸéŒî„€å•€éˆâ‚¬éå¤Šî”£æ¿¡è¯²î†‡è¤°â•‚å¢ éŽºâ„ƒç‰»å§è™«ç¬€éä»‹å™°é˜â‚¬é®æ› ç‰”ç»î…ŸæžŽç»±æ‹Œå½ç‘ä½½ç´šé—…æ¶˜å¢¹é¦ã„¦æ½—ç¼ƒî‡ç—…éæ‘æ½…é—ƒî„ç‰¶å§’å©…åžéœæ’ç£¶é©è‚©î•ºæ¦‰è½°ç¶”é“å©‚æ‹«éŽ¼ç‚¬æ§°éˆæ—€ç…¹ç»å‹­ç“¥ç»±ãˆ¤å°Ÿå¦—æ»ˆî†„ç»—ç‘°å¯µéå©‚åŸ›"],["bba1","ç€µç†¸å«¸éŽ¾î†½æ‘éˆî…Ÿî†‘é’–â•…æ´ƒé¨æ„°ç˜±éŽ¹å²„å¯™æ¥«î‚¤æ¯§é…æŽç¬éŒæ¨ºå¼¬çžè¾¨å„´éŽ¾æŽ“æšŽå¦—ç†ºåš˜éå©„æ•šç» æ¥ƒç°œé““æ›¡ç• ç’©æ¶¢å€æ¤æ„­æŸ†é†î‚£ç•«æµ æ›šç²©æµ¼è½°å¨‡é’å“„å¾ƒé™æ’æ£§é¥æ¶˜ï¼‹æ¿®å¬ªîŽæ¿®åž®ç“™çžå¶…ç«¶ç”¯î‚¢ç¹”éŽ¬æ¿‡å¯šé€îˆšç“¬é‚îˆ›æŸ¦éƒã„¦çŠå§ãˆ¡î„´å§˜å¿•å´Šç»å¤Œî†ç»¯å“¥ç¤„ç»±î‚¥å„é‘´å‚åš¦ç‘•æ ¬îŸ»ç‘­â•„â”‚ç‘¾å²ƒî«ç’©å›ªç¡¿é—†å²„ï¼œå§îˆ™ç°¨æµ¼é—´ç·§éæ„¬ç“§ç€µçƒ˜åŽ›éŽ¸ä½¹æªª"],["bca1","å¨†â„ƒç²™å¨Œè¤åŸ¦é ç•Œæ£“çº¾ä½ºãšé‘°å²ƒâ‚¬å® åšœé’‚æ—‡ç·¸å§¹æ„°ç®å¯®å¿šç“¨æ¦‡î‚¤î·æŒç¨¿ç•­é—†î‚¡ç«·é™åžç…¼æ¾¶åžç˜ç€¹ã‚†å€å©€æŒŽç´—é¤æå”±ç€¹ç†»æ”¢ç»¡çŠ²ä¼ˆéŒç£‹å§–çžÂ¤æ™©ç»ºç‚¶åž˜éæ¬çš éŽ¹ã„¨éƒ¸é‚æ»…åœç»€å‰§ç¤‚é‘°å‘°ç‘µæŒå©‡ä¼„é“”å›¬å‘éŠç†·å«¼ççƒ˜æ½›éè‚©åŸ–é–°å²„å™²é–·î‚¥å«¢ç€µå‚šæ€¥éŽ¯é€›å¯Œé™æ §ç•§éŽµå¬«æ¹µå¨ˆå©„å«¨éçŠµÃ³é‘µî‚¥å®é–°æŽ—î›»éŽæŽ‘å½ˆé›î„î‡´éŽºå ŸÃ¼ç¼î„„æ¸¶é¥æ°¬å¼¾é›ï¿½"],["bda1","ç€¹æ¥€æ°¨å®¸ç‚°æ…¨éŽ°ä½¹å¬€å¨²èŒ¬î…ç»‰å¬¬ç¥©ç»»å¶‡ç¹é‘·î…¡åž·é’‚æ„¯î”‹ç‘—èŒ¶ç•°éŸ«ç£‹é›†é–«éåŽ é–°î„„æ³¦é–±æ»€ç²ˆæµ£å¿“åŽ–é—ä½¸ç·­éŽ´åº¢ç…å§¹ä½¹ç¬…é›ï½‡ç”«é–²å¶‰å¦°é™æ–¿î˜¾ç€¹æŒŽçª‡ç»æ¿ˆåºœç»®æ¶˜ã€é”ç†·åš­ç›æ’¹å ªæ·‡å©‚éƒ´é„ãƒ§ç›ç»”ï½ˆåž³æ¤åž®å™¯å¯°î…æ£³å¦¤îˆ›ç•¨å¨£è™«ç°´å¨¼ã‚‡æµ˜ç»±æ–¿è´°é–¬ç”¸å”¶é—‹å——åš˜é’æ¿‡å¢é†æˆžæ´å¨“æ°¬æ†¾ç»¶æŽ”è®²é‡æ­ŒæŸ‰é’˜ç–¯îµé”â•å½Šæ¿‚å†²ç°­å¯°æ„­ä»Œé–¶ã‚‰æ«ŽéŒå³°åŠ…"],["bea1","é•æ¿†å°ƒé—å›§å½«éã„¥æ™¢éžåžæ§œæ¿‚ã„¥îžŠæ¿žç…Žî†Œçå——çš¬çæˆçš»æ´å‹«ç°¥å¯¤çŠ²æ¡¨éŽµæŒŽå¦±éŽ·æ¶™å¸‰éŽ¹é”‹æ§†é„å±¾æ§¶é…èˆµæ¾—å§Šãˆ¡îŸ…å¦¯åž«å¸ƒå¨‘å Ÿç¬å©€æ¨¼åŠ¶é’ï¸¾åŽé¥å›©æ¸·çº­æ¿ˆî˜¦ç»ãƒ§Ðžç»”çŠµç‘§ç»®Ñ…åž‚é‘²æ ¬å½‡é’‚å¬­æ™§ç›æ¿Šï¼“ç‘·ç†»îŸ‡ç‘­æ—‡â”ç’žÂ¤ç¢é–±ã‚‰å¢»é–¸é¹ƒæ‚©é—…æ»ˆç…æ¶“å©ç¬€æ¶“ç‚°ç®ºéæ¥€å£ˆé©åº¡ç‰¬æ¾¹å±½î‚½ç”¯å‘Šå„éŽ¿ç‚¬æ½¯é‰æ ¨ç¥«é˜å‰æš¢ç»Œï½ˆæ€ç’€æŸ¥å–é–·çŠ²æ§ºé©æ’®ï¼ž"],["bfa1","éŽ·î…Ÿî˜²å¨ˆæ «åšŸç»»æ—‡ä¼”é‘¹èŒ¶Ð•æ¤‹ç†»æ½Ÿæˆåžç›Žæµ¼é•ä¿Šæ¸šé›æ”ªæ¿žçŠ²ç˜½ç€µâ•ç¸¾éŽ±åº¢å°Ÿé‚ç‰ˆæªµå¦«î†½îœ€å¨´å‘Šç¹é¢å´‡æŸŸéªç†ºîš£ç»‰ï¸¾é—¯é‘·ï½ˆå§±é’–î‡Îšç‘·é¸¿éŸ©æˆæ¶¢â‚¬æŸ¥åšŒé—‡å›¦æ±‰æµ ä½¸åž‰æ¿‰é›ï¼Œçå¬¬æ•‹çå€ŸåŽ§ç‘·å©…ç¹€é—„ï½‰æ¾€ç»—ãƒ¨ç¡é—‹å ¥åƒé¥å†²å¸¹é–«æ¥€æƒžé¨å‚šå¼—éŽºã„¦æŒ‰éå©„æ½¯ç»®å¬¬ç¹ç›ä¼´äº—é–°æ—ˆå¯ªé–·æ©€æ®¢éŸç‚ºç“å®•å›§æ—¦éç‰ˆç‘ç“’ã„©æ´“éŽ¹î†½æ½å¦žæ¬’å¼²é—‹æ¥…æ³™ç‘ï¿½"],["c0a1","å©¢å‹¬æ‡žç€µé•ç¬˜éŽî„‚æš†é„îˆšå™­é’è·ºå«æ¿®æ’³ç·›éŽ¬Ñ„åžšé€æŒŽæš£é„ç†¸æ«žå¦«å‰çˆ¾å§ï½†ç«»é—èŒ¬æ•“é©æ¶šç°¿é‘±æ §ï¼ç‘å€Ÿã‚¿ç‘¾çŠºç¡ç’œå¬®â‚¬æ¿‹å•‹é—ˆæŽ—æ½¤é‚å¤Œâ—£é‘´å—›æ¯£ç”¯î…Ÿå„¨éŽ´æ°­æž¼é„æ—€ç€½é­å´‡îŸ«ç»«å¶‡å¦‡é‘´å©…é“‚ç’§ã‚ˆè´°éŸ«ç†ºâ…¸é’å›¨å«éŽºãƒ¦æ†˜éŽ¶æ¨¿Åç»å†ªç˜ˆç‘¾î„„æ´©ç»²æƒ°åž–é“¦å¤‰ç²°éå å´ˆé—çŠ²î…ºçå‚šçš·å®¸æ¿‡åž¿éŽµå›¨æŒµéæ’´ç‰¬å¨‰å¤‹ç¥¬å¨²æ¥ç…‹å¨¼æ»…åŽ§é“èŠ¥æ£†ç»Œè·¨î†„ç»¶ï¿½"],["c1a1","ç»»å©„é²¸é‘µé¸¿åž±é‘¸ç¡…æž½ç‘­î†¿ç¡¯ç’ºç”¸ä¼•é–¬çƒ½å§¯é–µæˆ¦æ»æ¥«î†¼å¢ é å‹¬å‡ é’è·ºåç»‚å‘¯ç®·é‘¶å´‡ç¡¯é£å±½î”–å®€ã„¦å¸¾é‡ç‚¬æµ—å¦¤æ°±å«é¤å¿•æžŽç»€åº£îš›ç»‰ç†ºçŸ–ç»±çŠµç¥«é“‡å›ªÃ¹é—ƒå©šä»­æ¦§çŠ²å„³é“é›å¼»é™ãˆ â‚¬å¤ŠæŸ‚æ¾¹î†¼îš”é–è—‰ç•«çžã‚…å¯¾éŽ¯ï½†å…‚éŽ¹æ»„å·¸éŽ¸æŒŽå¹“éŽ¿å¶†æ£­é‡ç‘°ç½šå¦²å¶†Ð«å©•æ› åš—æµœå¤Œæ£­é©å“¥ç¡ç»¯ç†ºçª‚ç¼æ»†ä»­é‘½å¤Žå´¢é’î„ƒæˆé’˜æ˜î—Šç’§ä¼´â‚¬ä¾€ä¼ƒé–¹æ¥…æ¹æ¥±æŽ‘å„šæ¾§æ¥å•‚"],["c2a1","é‘·æ’¹æ•¸ç’å ¥â‚¬çŠ±ç¸¾é‹æ‘å¢–é—è™«ä¼…éŽ¹å¤‹æ½«å¨“î„ƒå†»é–«ç†¶ç¹”çžç‚¶ç¡¦éƒå¿•ç¨“é—æŽ•î•»éèˆµå¼®ç€›æ¨ºî„¤çå©ƒæ‚•é‰æˆ¦ä» æµ æ §î˜¿æ¾¶î…å‘ç‘­æˆæ–é«æ›žÎ•éŽ¯ç‰ˆå¢¦éŒä½½åŸ–å¦¤æ›¢æª§æ¤å‹¯Ã¨æµ£æ’³çˆ¢ç€µæâ‚¬æ„¬è„–ç”¯îˆšç·ŸéŽ¬çŠ³åŽ éŽ´å­˜æµ›å¨‰ç‰ˆç²¸é‘³åº¤å™é‘»æ—‡î•°ç’¨æâ‚¬â‚¬é–«î‡€æ®œæ¦›æ¶¢ç˜ºæµ ï½…å½´æ¾¶Ñ…îƒ‡é–±å¶‰î”‘æ¦‰è§„ç²·éŽÑƒå´œéŸå‹«ç•¢éŽµæ¨»å§™éŽ·æ’´å¹¶å©µîˆœæ‚½ç‘·æ¥…æƒ›å©µä½½î»é‘¼ç¨¿åš™é“”ç¨¿å½§"],["c3a1","é™â•€çµ¾é–¬æ—‡æ™¯æ¿‚î‡åŠšå®¸ç•Œî§æˆæŒŽî—Ÿç’‹é£Žå«ºæ¥¸å ŸÅ„ç‘¾é¢è…¹é—æ¨ºæ§…é§ï¸½åª´éŽºãˆ¡æ£ªå§åº¢è´°å©€æ¶šå”é­î… î¬ç» î†ç—˜é‘°å€Ÿå„é“”å¬­ç£é–¸æ¶˜æ´ æ¾¹å›§å­£é‚î…Ÿæ®©å¦¾â‚¬å¨ˆç”µæ•ºç’œå›§â‚¬ã‚‡ç…¡é¦æ¿ç´±éŽ­ãƒ¦æ«¤å§¹çŠµæ£¿ç»‹æ°±ç–†é‘·ç£‹æ¹—é–¬å‘´Î¤ç»¡å¤Œæš…ç»”åœ­ç“šé’ƒå‹¯â‚¬æ„®Ð—ç»æŽ•å°ªç€šï¼„æ½ƒæ¶“î…å¾Šç€¹æ¬ç¹éŽ¶èŠ¥æ¨‡éŒè¾¨æ•žé“î‚¥ã€‹ç‘·å©šåŽ§é–¶æŠ½î•å¦¯æ¥ƒâ‚¬ï¸¾å°“é‘»Ñ†æ†²ç’¨îˆ™ç«µéå——å™µé å¬ªî‡ª"],["c4a1","ç”¯æ §èµ‹æ´ä½¸ç´¨å¯®é›å°†å¯°å­˜åš¥éŽ¸æˆžæ®ºéˆæ¿‡ç–†é—æŽ”æ•½éªé¸¿ä¼Œé‘´ç¡…å€é“¦æƒ°î€žç’œæ»†ç§´ç’ºæŠ½å§Žé—€çƒ½çˆžæ§Œãƒ¥åª´éŽ¹æ¥ƒæ´¿éˆæ›ŸçŸ†éå¶ˆç¡Ÿé–¹î‡€æ«å¨²ãƒ¥î–å¦žåº¢î‘æ©ä»‹å¸¤é¥æ¶¢â‚¬æ°¬î”Ÿéå‚›å¹‹å¦²è®³çµ»å©•î„ç…’æˆæ˜æ• ç¼æ’®å´å¦žæŒŽæ¡¨é§î„ï¼—ç€£î„‚èˆ¹é–î„æ‚é–²ï½‰æ´žæµœî…ç¶†é‹æ»ƒä¼’é“å†­çŸ é›å ç‰‘ç€¹æ°¬ç¬£æ´æ›žæ¶µå¯¤å³°ç´µéŽ®å±¾å§·éŽ¸çƒ˜å½å§Šîˆ›çœ¬çº°å›©î›³ç»‹å¬¬çª¢é‘¹å›ªâ–Šç’œï¹ç®˜é–«ï¿½"],["c5a1","é–­æåŠ–é–²æ©€ç´Ÿå¨‰ãƒ¦æ†³éŽ¿ãˆ¡æš¤å©Šå¯¸æ®‘ç»—æ¶¢ä»¼é–ºæˆžæ±‰éæ’ç«ŸéŽ¾ã‚ˆç¶…æ©î…¢å¢‘éç¨¿ï½žæ¾¶â•çæ´æ¥åŠç»¾å¿•æ•Žç’¨è‰°è™Žæ¤¤æ¶šå£æµ¼æ¿‡î†–å©¢è¾©æ•¯é—†è¯²åŽ§éšæ„¬ç‰­æ¿‰æ¥€ÎœçžçŠ²ç·¬é‚æ¥æ½¨å¨“ï¼„æ«¥é‘¿ç†»æŠ„é–«æ—ˆå…˜é–¸å¶‡ç‰“é®å“„å§«æ´ï¹€æ¹¡æ¿‚å­˜â‚¬æŽ‘â‚¬æŽ‘åŽ·éî„€å™¸é’â‚¬éžæ„¬î”™æ¿‰æ¨ºîšœç€¹æ›žæ‰¯å®¥å¬«å§éŽ¶æ›ŸæƒŒé‰è¾¨î”ˆå§Šå…¼î—¤é©æ¥çªå©€îˆ›ç¨•éîˆœå™²è¤°æ’¶æ£™ç»é£Žç“‘ç»›æ—‚ç“›ç»¯æ «å½“é’ï¿½"],["c6a1","é’ï½ˆæš•é’˜ã‚ˆâ—£ç’Žå‹®çœ´éŸªå¿›â‚¬å†®â‚¬å¿›æ‚ªé—„å •ç‰ æ¥±ä¼´æ£™éå¶…å«Šéšå±½çˆžçåº¢å•©éŽ¾ç‚´ç¤Šé¬å´‡î¢é‘³ç£‹æ‚‡é–¬æ’»å¦³å®„çŠ»ç£­é–åž®ç·±å¯°è™«ç¨–é—åœ­æ½±ç»‚è·¨î‡™å§£æŽ”å«­ç‘¾î…ŸçˆŸå§—â€³åš«ç»ä½¹ã”çžå©‡æ‰¯é‘»î‚¢ç˜é–°å¤Œâ‚¬ç‚²æ«¢çžîˆ›å„‘éï¸½çŸŠç’žæ°¶äº–é—‹æ’³æ†«é‡å›¬åž—æ¿‚å ¥å…éå‘¬ç®¥é‘î‡æž¡ç’Žåº£ä»’éŽ¹æ´ªå´‘å¦¤ãˆ¤Î¥ç»ºå‹­æš¦é—æ¥îš¥æŒç†¼æ´ å§¹æ¿…ç°©çç…Žç´£æ©â•å¯•ç’©æˆ£å€é“ç‘°è±¢éƒãƒ¤é’©éï¿½"],["c7a1","æ¿¡å‚šç¿±é—Šî†»æ¢æ¿¡å©‚ç¹Šç‘¾å¶†ä¿Šç»‚æ‰®ã‚¢ç€µÑ†æ‡•éšî‚¤å•½éªžæ‘åº·éŽ¹ç»˜æŒŒé•å†ªçŸ˜æ¶”å†¨æ‚£æ¶”å¬ªç…–é¤ãˆ¡åå©µå†ªç£µé‘³å€ŸåŠ¤é‘¶èƒ¯é™ç‘•æ¥„æ®¼å®¸å­˜å¦¸éŽ¾î…¡î›¬é‰é”‹å°å¨²å‰§æƒ—é®æ‘ï¹©ç¼ƒä½ƒå§¯æ££îƒ¿ç å¯¤å†©å«•éŽºæŽ“æ™½é‰îˆœæ³é—å²ƒå„—é‘²é¸¿ç¼‰é–°å¶…â‚¬å¶…ç…¿æ¿¯æŽ“î•ªå¦¤å´‡å…é™å€Ÿåœæ¾¹èŒ¶ç¢ƒé—„îˆâ‚¬æ¬’æ¾˜ç»‰ã‚‡ç…£é’€â•€é›†é“ãƒ¥å´¥éŽ·å¶†ç…†å¨‰å©„æ«§ç» æ—‚çŸ”é‘¸æƒ°æ½æ©î‚£æ´•å©•çŠµåžŽç»ºæ¶œå¸¿æ¤ä¾€å®³"],["c8a1","é‘ç•Œî†ˆçº­èŒ¬î†é‘²å›©ç“å¨…ã„¥åŸ‚é‘²å²€æ™³é£çŠ²å“é–´ãˆ¡ç°©é§æ´ªå•‘æ¥‚îƒç´£ç¼ƒç‰ˆå§•ç»›å¿›æž¼æ§Œâ•æ«¤æ¿‰æ¬’æ´¡é—…é—´å³é’ã‚…å´é™å¶…å½Œç”¯å—˜æƒ‰é‚æˆžæ¾˜å§˜ç‚¬ç…é—å ¢å§±éî… æ™¹ç»»ä½½åŸ‡é’˜â•„åšç»¡å‹¯å™¯é“â•…çˆ³æ¤‹îˆ›å°³é…â•ƒæš˜é©ã‚‡î—•é’‘å†­æ´°é–î„å´™éšï¹€î›¨æ´å›§éƒŠéŽ®å‰å¢˜éŽµè§„å§­é‚æ„­ç˜®å¨‰å²€æŸŒé¨î†¾î•¶ç»‰æ¨¼ç©»ç¼ƒç–¯å‰çšî‚¥î€˜ç’¨å©šä¼©é—ˆç‚ºî— å¦¯å¬¬æ¡ˆéŒæ¬ç†¬å¯°î†½ç€²å§£æ¨¼æƒ–éªå¤Œç·¨"],["c9a1","æ¦§ç»˜ç…€ç»‹æ¥€å°®é¤å¬®îªè¤°ï¹å•™é‘¿è¾«å€¶å¯®ç…Žç¹€é£ãˆ¢ç“Žé–«å…¼Â¨æ¿®î‚¢ç©ç»±æ„®æ«¨ç’Žîƒ¿åº·è¤°î…îž¿å§˜é”‹ç´“é¡ãˆ¢ã‚¨ç›ã„¨îŸ³ç’žç‘°ç²ºéŽ»å¿•æ¢¾ç»‰æŽ•å«é–·ã„©å«´é’‚æ»†æ´¯æ¦˜î…žæ§è¤°î„æžŒå¨´æ»…â‚¬æ›¡é’µç’©æ’»ç‰·éå¿•æ‘±æ¶“å¶„ç²¯é©çŠ²ã‹æ¿ ï¹€ç˜œéã„¥ç«·æ´æ»„â‚¬æ ¨å£Žéé”‹æž¾é…î†½è¯žé–å‰îƒé‘µæ„¯å•”é‘ºæ¬’ç“¬ç’¨çŠºè‚ ç’§æ’®æ§£é—„å‹ªäº•éŽ¾î‚£î„Ÿé‘¸ç‚¶æ†½é’‘îˆå„´çä½¹îš˜æ£°ã„¨æ‡žé’‘æ¤¾ç´¡é“îˆšäº¬éªžå‘®æ¹‡"],["caa1","ç»‚å¿šå‚ç‘œå›ªî›«å¨£é›ç´¬éŽµæ›Ÿå“ºæµ å¿•å¢¿æ¥«æŽ‘åžŽéšè¯²æ«žæ¾§è™«å•¢éŽµî†¾å‰¼æ¿‚î†¾çŸ‡ç»¯ç‚µç¤‡é—†ç‰ˆæžƒé‘±ç‚°ç¬æµ£é›åºæ¿‰â‚¬éªžï½…é’©å¯®å©ƒç„ºæ¶“ï¹æ–€é—å¤æ«…ç»«æŠ½çˆœéè¯²î—†é§æ «â…¶é’ãƒ§ç”é’„æˆ ç•£é‹å¿“î˜®é—å›©ç˜’ç»¶ã„¨ç«žæ©æ—ˆäº¶æ¸šåž®åªºæ¿žâ•ç´’é—‰î…ç¹šé‘¸æ¥…å«ªé¦å†©å´Ÿå§â•ƒæ•¨ç‘æ»†ç´¨ç»Œå‚šå«™æ¾§æ’´åŽ±éŽ´å©ƒæ¯Šå§£å¶‡ç¿±é‘¿â•â‚¬ï½„æ‰›é–å‘­æ†œé«åžîšŽç€¹æ¿†å˜²å®„îˆšç©¿æ´æ ¨å§³éŽ¹Ñ„æ–é‚è§„æ¹…"],["cba1","å¨‰æ›Ÿåœºé‘åœ­ç‰ªç»ºî‚¥å„ªé‘ºå® æ‚“é’ƒî„ƒæ¸¹ç‘œæŽ•Ã­ç’žå©‡åŠé–¶æŽ—ï¼æ§ŒæŠ½æƒ®æ¶”å¿Žéª¸éŒå¶…å¢«é§å©‚Î˜ç”¯è—‰ç¹•è¹‡æ¬åŸ§é†å­˜æ¹œéŒæ„­î——éæŽ”ç¡€é‘²î‡å•«ç’Žâ‚¬ç’¨å²ƒéƒ¨é–´é¹ƒæ§»éšçŠ»ç‰žé–æ¥€å„ é—æ»ƒâ…·éŽ¾å‰æ¹¸é—Ñ…æ½¶ç»Œå—›åš˜é•å†©ç—…å¨ˆå——çˆ›éªžå±½îš™éˆî„‚ç‚•é‘ï¼„æ³¦éŽ½â•ƒï¼ˆæ¦„æ—ˆå¤¯é©å¬ªîž…é„Ñ„ç‡å§£åº¡æ‘¡å¦²æ¬ç®·é‘¶æ»„ç‚æ¥«î…ç†…æ¥¸æŽ“î”¢æµœï¸¿æµšé™å Ÿå§½éˆî‚£ææ©å‹ªç»ç»»î…¢åšŽæ¶“å›¨åƒå©§â‚¬"],["cca1","å©•î‚¥æ•é›è™«æ¹­æ¦„å‘­çƒ¦ç» æ›žé“‚ç€µå—šæ¹å©€å©…æ¼ç»‹æ—‡å‰¤æ¿¡æ¬‘çŸ‹å§˜æˆ æ¹¢é•æ¬ã‚é’ï¼„å¢´é­æ¶¢æ¹©æ¦ˆâ„ƒî˜°æ¿ åž®îž¾éãƒ¥æ‚•é›èŠ¥æ§‘é©ç†»ç³ é–µæ©€ç‚’æ¿®î†å¢²å©Šå‘­åŽ¤å¦«å¤ŒçŠŠç»¶î„„æ½°æ¥¹çƒ˜æ‡œå¦¯Â¤å¯•æ¿¡å‹«ç“±å§£æ¶šå¯·é©èŒ¬æ«é‘°æ¥„æŒ‹éŽå‰æ¹ªæ¦›æ¬‘æ´°é‰ãˆ å¬æ¤å‘­æŒ¨éŽ´è¤æœ¬ç’¨æ¿æ™±éŽ®å‰ç£±é—â‚¬é–ä½·ç¯ƒéè·ºî™é–é¸¿â‚¬å •å™¹å¯®ãƒ§ç…é˜å‹«ç„¦ç»±å‹®æŸ†ç‘·å® ç°«é—ˆæ ¨ç…¶é’–î‡€æ†®éŽ°å¤‹å‰¤å¨Œåœ­æª¼"],["cda1","ç’œî…¡å‡ éžîˆ™ç¶‰éŽî„åª·é™å¬ªî…¼éªžèŠ¥åéŽ²å‚›å½‡éˆå¤‹ç…”å©€Ñ„ç§¾éšå‰å°«é¢è¾©îš•ç‘æ›¡ç¦é–¬å©‡å€¯é–®ç”¸æ³Ÿé“»å¶…î˜ºæµœå œç¶‘æ¶“åº¤ç•æ“å—çˆ¯éŒî…žè¾œæ¿¡æ §î†æ´å‘Šå½‹éŽ»çƒ˜æ§é‡æ»„îšå¦²æ¨»ç£±å©§å‰å•é¢ã„§î€Žç¼‡å©…â‚¬â‚¬é’å¤Žæ²ç‘•ä½½î‚¼éŸªå©‡ä»´é—„ä»‹î˜¯éŽ±ç‚¬å§‚å¨†å‰çŸå¨´å¯¸ç¹‰ç¼ˆå…¼ç©©ç¼‡å‘°çªç‘å‘Šæ½µé‘¾éç‰¸é—†é”‹ç¤‡ç»²Â¤æƒ¤é–°îƒè´¡é—é›ç¥¼å¨†å‹¬æ©é’˜å¶ˆæ§¶ç‘•ÑƒåŸ„éšå¿“é¥±é‰åº¢â…·éžå—™æ‹‘"],["cea1","é¥ãˆ£î—”ç‘ï¿ å™·é—†ãˆ¤æ«¢å¯°å¬¬å·¼ç»”å¬­æ†¥éŽºçŠµæšé”å¤‹ç¥¦å©§æ»…æ‚é£æ¬‘ï½žç»®æŽ—æ®•ç»”æ»ˆç·§æ¸šèˆµåœéƒå‘°æ«†æµœå—•å¯’éæ°«æµ®é‘å±½î‡£é‚æ¬î•¦å¨‘è‚©å°‚é§å‚œçœç»‹æ»…åŽ‚é‘¹îˆç¤é–¬å¥¸å™ºé—„ç”¸ç‰é”æ¶šçª‡éŠî‚¢å¸¢é‹æ¥ç©»é•æ„®æƒ“é‘·ã„¨å‰é—…ï½‰çæ¥¹ç†ºæ†¼æ¿‰ä½¹ç¨’ç»±îˆžî”£æµ ã‚„çº§æ¸šå¬ªå–Žé”åžé€—éŽ¬æ»…å¹‰ç»€è‰°å«‡é–³æ’®æ¯žé—†å •æ¹‚æ¥¹æ¥…èˆ°é†ï¸½î„­é’æ¥€å§¡é‘å £î—‡å¯¤å¤‹äº±éŽ²æ„­è¿¹é“å¤Œç†¬ç»¶ç£‹ä¼…"],["cfa1","é’ƒî‡€â‚¬ï½‰å°™é›å‚žî„¨å¨…æ’¶å€ç’©å‚çŸ¾é—‡æ’å§¶æ¿ ä½¸ç²–å¯®å‹¬æ¹•å¦¤å…¼î›¹å¨´î…ç´¡é—ãˆ¢å«¾ç»¡î…¡â‚¬ä½½ä¼¨é“¦å¬®å„™éî…¢ç°±ç»‚å‹®å€ é–·èŒ¶ç«éŠî…žæ‹°ç‘­è¾¨î„£ç’©å‹®å‰£éŽ¯æˆžçŽæ¦‰è¹­ç°·æµœæ©€çš­ç‘­î‚¥æ¢ºé’‘ã„¦î˜¥å©€å‰§î•¼é‘µï¿½"],["d0a1","å¯®å±¼ç¬Žæ¶“æ›šé‡œæ¶“å˜ä»˜æ¶“é—´ç¼šæ¶”å‚™ç®¹æ¶”æ¨¹ç°œæµœå‘°é²æµœå©…åžå¯®å¶„ç°¬æµœç‚°ç°¾æµœçŠ±å­©æµœé¢æ’¼æµœæœµç² æµ å¶„ç²æµ å—•ç²‹æµ æ¤¾ç²¸æµ î…ç²ºæµ èœ‚ç´šæµ£æ°«åŠæµ£æ¶—ç¶•æµ£æ¤¾çµ¿æµ£æœµç·¢æ¸šå¿Žç·²æµ£è®³åƒµæµ£é¢ç·«æµ£îˆ™ç· æ¸šæ §å‰ºæ·‡æ–¾ç¹œæ·‡åºç¹•æ·‡æ¶—ç¹Žæ·‡æ°«ç¹æ·‡ã‚„éªéŠæ°¬â‚¬ã„¥â‚¬æ–¿â‚¬î„â‚¬ãƒ¥â‚¬å‘¬ç´²æ·‡è·ºâ‚¬â€³â‚¬â•â‚¬îƒ¿çƒ¤æ·‡îˆšâ‚¬æˆâ‚¬å——äº™é‹å›¨æ¸»é‹æ›žäº¹é‹å ä»›é‹æ §ä¼‚é‹ç¨¿å€‹éŒæ°¬å€•éŒæ‘å›"],["d1a1","éå¤Šå„•éŒå†²å„Œéæ §å„ªéãƒ¥å„¹éï½…å„ºéç‘°å…ŠéŽå¤Šå‰šéŽå‚šå‰¸éŽæ›žå‰¶éŽæ°¬åŠ‡éŽå“„åŠ®éŽç…ŽåŠµéŽåž®åŽéæŽ‘åŽ¡éæ–¿åƒç»”ç¨¿åéî„åœéâ‚¬éå‚šæ´éå±½å”¹éå¿“å•ˆéæ’³å•Žéæ §å•¢éï¹€å•Ÿéâ•å•°éî‚¢å–…éåžå•¿éæ¿å–Œéè—‰å™®é‘å¤ŠåšŠé‘çŠºæª¿é‘â•åšŸé‘æ¿åš¨é‘æƒ§åžŠé’å¬ªåžŸé’åº¡åŸ€é’î„åŸ‰é’å†²åŸžé“å¿“å¢‘é“å¬ªå¢é“ç‚²å¢§é“î„å£Œé“â•å£‹é“åž®å£—é”å¶…å§…é”æŽ‘å£‰é”å å§‚æˆï¿½"],["d2a1","æˆÑƒå§®é”î…žå¨‚é”é›åª®é•å¶…å«é•ç‚²å«žé•ï¹‚ï¼é•çŠ²å«µé•é›å«ºé•ç‘°å¯™é–å ¢æ•»é–å¶…å¯ªé–å¿“å¯±é–æ°¬å°ˆé–îˆšå°¡é–å†²å°­é—â‚¬é—å——å´Šæ¶“æ¥€å´é—å¶…åšƒé—ç‚²å´ºé—î†¼î˜½é—è¯²åµŽé˜å‚šå¸ é˜çŠ²å¸µé˜ãƒ¥å¹ƒé˜æ¿å¹Žé™å†ªçš°é—†æ¬å½‘é‡è‚©åš é™î†¼å½£é™î…žå¾éšä½¸æƒ¤é›â‚¬éšî„€æƒŒéšç…Žæƒéšè·ºæƒ„éšæ¿†æ†¥éœå¿“æ‡™éœåº¡æ†»é›åžæ‡›é›æ¿æ‹»é›è¯²æ‹ƒé›è·ºæ‹•éœæ„¬æ‹žéå›§æŒ—éœç¨¿æŒœéœî„€æ«éå æŒ©"],["d3a1","éœî‚¢æ¨éœã‚…æ‘éœç…Žæ‘Œéãƒ¥æ‘éžå¿“æ•‚éè—‰æ‘¦éî…žæ‘µéãˆ æ•¼éŸâ‚¬éŸï½…æ™«éžî†¼æš…éŸå‘­æ™¼éŸæ¥€æ•»éžå†²æš†é æ¬æ¸éœîˆšæžˆé ç†·æš¬éŸæƒ§æž é ç‚²æŸˆéŸç…Žæ»é â•æžƒé ã„¥æ£œé¡å‘­æ£¢é¡å‹«æ£žé¡ã‚…æ£“é¢æ–¿æ¤ƒé¢æ §æ¤Œé¡è—‰æ§¢é¡ç‘°æª¸é£æ„®åšé¢æ‘æ¨é¢æ’æ¨ƒé£î‚¢æ«Žé¢îˆšæ«–é£î„æ®•é¤â‚¬é¤å©‚æ®¸é¤æ–¿æ®¢é¤ãƒ¥æ¯Šé¤è·ºæ¯šé¥å‚šæ¯¤é¥ä½¸æ³é¥â‚¬é¥å æ³¿é¥æˆæ´†é¥æ¥€æ´°é¥ç‘°æ¸¶é¥åž®æ¸¼é¦ï¿½"],["d4a1","é¦å æ¹…é¦å¶…æ¹é¦æ¨ºæ¹’é¡å›§æ¹é¦ï¹€æ¹»é¦ç¨¿æ½•é¦è¯²æ½ƒé§å¿“æ½»é©â‚¬é¨å æ½¯é§åž®ç€´é¨æ’³çŽé¨å†²ç“é¨î„ç é©å†¨ç„¼é©æ–¿ç…‰é©æ’³çˆ¦é©æ §ç…Ÿé«å¬ªç‰‚é«æ¿†ã€”é«â€³ã€æ¿‰å¬ªâ€œå§£â‚¬æ¿‰æŽ‘ç‰»æ¿‰ç‘°î•ªæ¾§ç‘°î–„æ¾§î‚¢â’‘æ¾¹ç‚²â’’æ¾§ç¨¿î©æ¾¹å‘­î—˜æ¾¹æˆî—œæ¾¹æ¬î—æ¾¹ãƒ¥î—¡æ¾¹ã‚…î—¤æ¾¹îˆšï¼šæ¾¹ç‘°ï¼›æ¾¹ç…Žï¼æ¾¶å‚šî˜¯æ¾¶æ„¬î™€å§Šï¹€ã…æ¾¶î„€ãæ¾¶æ’ã˜æ¾¶å‰§ç¤æ¿‚æ›žîš•æ¿‚åº¡îšŸæ¿‚æ¨ºã‚¢æ¿‚çŠ²ã‚§æ¿‚î„€ã‚©"],["d5a1","æ¿‚ç¨¿î›¦æ¿¡æ¿…ç¶–æ¸šî‚¢Î“æ¿¡æ’î‹æ¿®ã„¥î¡æ¿¡å¶…îžæ¿®æ°¬Ä“æ¿žç†·â˜‰æ¿žæ»ƒâ–”æ¿žæ°¬ï¹¢æ¿ î„€îŸ§æ¿žé›Ç˜æ¿ ãˆ â”†æ¿¯æ°¬î€›æ¿¯æƒ§ç›ç€šå‚šî€œç€šï½…ç¬ç€šï¹€î¦ç€šæ §î·ç€šè¯²ç‘¢ç€£å¬ªç‘¬ç€£æ’ç¢ç€£î„îƒ‘ç€£æƒ§ç“‹ç€›å‘­ç“ˆç€›æˆç“¡ç€›æ°¬ç“«ç€›ãƒ¥î„¢ç€›æ¿î„¬ç€›é›î„±é‚å î„³ç€¹â‚¬ç€¹å†¨î…½ç€¹ç¨¿ç˜ç€µå›§ç˜”ç€µæ–¿ç˜£ç€µã‚…î‡›ç€µãˆ ç™ç€µãƒ¥î‡ ç€µæ¿î‡«ç€µå†²çš¡çå›§çš¥çå¶…çš³ççŠ²é˜¿çã„¥æ¡ˆçç‘°çœ®çžå——ç…çžï¿½"],["d6a1","çžæ„¬ç†ç€›åžçˆ†çžî†»è€¿çžè·ºæƒ«å®€å±½çŸå®€æ–¿îœ€å®€î‚¢ä¸å®€è·ºå¸ƒå®€å³°ç¡¡å®€æƒ§ç¡£å®„æ¬ç•…å®„è—‰æ¾ˆå®„î…žç§¾å®„î„ç£±å®•æ›žç¤‚å®“æ»ƒç¤‹å®•æ¶˜ç£»å®•æ–¿å‚¨å®•æ°¬ç¤„å®•æ¨ºç¥µå®“æŽ‘ç¥¹å®“å¬ªæƒ®å®“å†²åˆ€å®¥å›§ç§³å®¥å‚šç›¯å®¥æ¿†å†¬å®¥î†¼ç£å®¥æ„¬æ–—å®¥ç…Žç©³å®¸å¶…çªŠå®¸æŽ‘çªŽå®¸æ¶˜å¸†å®¸æ’è¿”ç”¯å¬ªç¬Ÿç”¯æ¬ç¬ç”¯æ¶˜ä»˜ç”¯å³°ç®˜éªžå†¨ç®‘éªžåº¡ç®ºéªžæ–¿ç¯ƒéªžãˆ å·¥éªžå›§æ²Ÿéªžè·ºè´­æ¥¹ç…Žç®æ´çŠ²ç²Šå¯¤å‚šç²“å¯¤æ„¬ç²¡"],["d7a1","å¯¤æ §å”¬å¯¤æ¿†ç²´å¯¤æ¶˜è™Žå¯¤â€³èŠ±å¯¤â•æ»‘å¯¤åžæ€€å¯¤æ¿æ·®å¯¤ç¨¿ç—ªå¯®å†¨ç´šè¤°æ¿†ç¶”å¯®å¬ªç´¤å¯®æ §ç¼‰å¯®î…žå‡ è¤°ä½¸ç¶€è¤°å±½ç¶†å¯®îˆšç¶‰è¤°æ §ç¶è¤°æ¬å¥è¤°î…žåŒ è¤°å³°ç·å¯°å‚šå¨‡å¯°å©‚ç·¢å¯°æˆç·¡å¯°ç‚²ç·³å¯°æ¨ºç·ºå¯°ã„¥ç»å¯°ç…Žç¹“è¹‡è¯²éƒ¡è¹‡ç¨¿å‹˜è¹‡æ¿‡åè¹‡æŒŽâ‚¬â„ƒä»©éŽ¬æ¬â‚¬æ„­â‚¬â•‚â‚¬åº¢â‚¬è¾¨â‚¬æ¶™â‚¬æ›Ÿâ‚¬î‚£â‚¬ï¸½â‚¬å¿”â‚¬çƒ˜ä»›éŽ­ä½¹ä»¾éŽ­é”‹ä»§éŽ­å©ƒäºžéŽ­å¶†ä»¯éŽ­å†©ä»±éŽ­å‚›ä¼‚éŽ­î‚£ä»šéŽ®ä½¹å€£éŽ¯Ñ„å€‘éŽ®ï¿½"],["d8a1","éŽ®å‹¬å€¹éŽ®æ ¨å€µéŽ®æŽ“å‹éŽ®å¬«å„­éŽ®å‘Šå„¬éŽ¯æ’´åžè¹‡ç‰ˆå¨éŽ¯å—˜åŸéŽ¯æ¨»åŽ¤éŽ°æ›Ÿå‰¢éŽ¯èˆµå…ŽéŽ°â‚¬éŽ¯å­˜å…’éŽ°å†©åŠ‡éŽ¯ç»˜å„½éŽ°å¶†å‰®éŽ±å›¨åŠ¸éŽ°ã„¦åŠŽéŽ±å©ƒåŠ¹éŽ°å…¼åŠ•éŽ°å­˜åŠ·éŽ±å‚›åŽ”éŽ±è™«å¿éŽ±æ¨»åŽµéŽ±æ°­å“éŽ±å­˜åéŽ±ãƒ¦å¡éŽ±ç†¸åŽºéŽ±æ’´åºéŽ²æ¬å•éŽ²å›¨å•²éŽ²æ—€å•”éŽ²å©ƒå•ˆéŽ²î‚£å•´éŽ³å±¾å™´éŽ³å¤‹åšªéŽ³å Ÿå™§éŽ³å—˜å–“éŽ³å¬¬ç„¦éŽ³å¶†åš˜éŽ³ï½†åš©éŽ³çƒ˜åš§éŽ³æŒŽåš±éŽ³å…¼åš²éŽ´â‚¬éŽ´å Ÿåž‘éŽ´å¶†åž–éŽ´æ—€åž±"],["d9a1","éŽ´ç‚´åžºéŽ´î…åŸ‰éŽ´ç‰ˆåŸéŽ´è™«å¢ŽéŽµåº¢å¢³éŽµï½†å¢°éŽµçŠ³å¢¾éŽµå…¼å¦­éŽ¶å¤‹å£˜éŽ¶æŽ“å§„éŽ¶æ ¨å«ˆéŽ¶å†©å§…éŽ·æ¥å«…éŽ¶ç»˜å«ƒéŽ·æŒŽåª¶éŽ¿æ—€åª¹éŽ·æ»„åª½éŽ·å©ƒåª¯éŽ·å›¨å§éŽ·å¤‹å¯£éŽ·î†½å«³éŽ¸Ñ„å¯•éŽ¸å Ÿå«°éŽ·åž«å´˜éŽ¸ç‚¬å´“éŽ¼æ»„å´—éŽºæ ¨å¸‹éŽºâ‚¬éŽºî‚£åµéŽºï½†å¸éŽºå¤‹å¸«éŽºåž«å´¼éŽ¹â•‚å¹˜éŽ»â•‚å¼¨éŽ»å—˜å½›éŽ»å¤‹å½ƒéŽ»èˆµå¼°éŽ¼æ ¨æƒ”éŽ¼å—˜æ‚¡éŽ¼ï¸½æƒ—é€æ¿‡æ‚§éŽ¼ã„¦æ‚˜éŽ½Ñ„æ‡éŽ½èˆµæ†¥é€î…æŒ„éŽ¾æ’´æŒœéŽ¾â•‚æ‹¡éŽ¾ï¿½"],["daa1","éŽ¿æ°­æ¾éŽ¿å‘®æ°éŽ¾ç»˜æ‘ŒéŽ¿å‚›æ‘«éŽ¿Ñ†åž‘éŽ¿çŠ³æ‘—éŽ¶î„æ‘šéŽ¿îˆ›æ•©éŽ¿èˆµæ‘¯éŽ¿å‰æ‘µé€â‚¬éŽ¿èŠ¥æ•‡é€æ»„æ”¨é€ã‚†æ•šé€î‚£æ•¶é€åž«æ•ºé€èˆµæ•»é£å¬«æ™¥éæ ¨æ™»éå¶†æ™¿éç‚´æš†éå‰æš©é‚å‚›æ»ç’å©ƒæž¦é‚ç†¸æŸ…é‚é”‹æ¢¼éƒå—˜æ¢ºéƒå‹¬æ£‡éƒæŽ“æ£éƒæ¬æ£¤éƒâ„ƒæ£»é‰å‰æ§‰é„å†©æ¤ˆé‰è™«æ¨€é„èˆµæ§¾é„æ»„æª¹é…å‹¬æª³é…ä½¹æ«ˆé…æ¿‡æ«Žé…Ñ„æ«’é…ç†¸æ«Œé…ç‰ˆæ®é†å Ÿæ® é†å¤‹æ®‘é†æ¨»æ®±é‡ä½¹æ¯ é‡å¤‹æ¯¦é†ï¿½"],["dba1","é‡å‹¬æ¯Ÿé‡æ ¨æ´‘é‡çŠ³æ¨‹é‡ï¸½æ´¨é‡ç‰ˆæµ€é‡é”‹æ¹‰éˆæ ¨æ¹ éˆï¸½æ¹©é—‡å‘Šæ¹²éˆæŒŽæ¹ºé‰ä½¹æ¹¼éˆé”‹æ½Œé‰ç‚´æ½¬é‰æ¬æ½±é‰ã‚†ç€´é‰ç‰ˆç˜é‰å…¼æ½½é‹å±¾ç€·é‹ï¸½çé‹å‘®ç§éŒîˆ›ç¤éŒî„ç£éŒâ•‚ç¨éŒã‚†ç…˜éŒæ¿‡ç…éŒî†½ç©éŒåº¢ç„¼éŒÑ„çªéç‚´î”‹éâ•‚î”…å¦—å¶†ç‰ªå¦—åº¢â’Šéî‚£î”žå¦—ï½†ã€‹å¦—æŒŽî–„å§Šå¿”î¨å§Šæ—€î–‚å§Šæ¶™î•¨å¦¾î†½â’å¦—å­˜â’Œå§ŠçŠ³â’‘å¦žå¿”î•²å¦—ç‚¬î˜¦å¦«å©ƒî˜­å¦«æ¨»ã‚å¦žï¸½ï¼å¦žå±¾î—’"],["dca1","å¦«æ—€ï¼‡å¦«æ›Ÿã–å¦žæŽ“î˜©å¦«æ¥ï¼ƒå¦žãƒ¦ï¼™å¦«çŠ³ï¼å¦žã„¦ãŠå¦žæ°­ãƒå¦žâ„ƒî—‹å¦¤è§„ã‚·å¦¤æ»„ã‚¸å¦¤î‚£îš™å¦¤ç‚¬ã‚®å¦žè§„ã‚´å¦žèŠ¥îšžå¦žç‰ˆã‚¡å¦¤ç‚´îš¢å§’ä½¹ã‚ªå§’å‰Îžå¦²æ„­îž‹å¦²ä½¹î˜å§’ç‚¬î“ç€µã„¦îå¦²æ¿‡îž‡å¦²å†©Î—å¦¯î†½î›¶å§’çŠ³îœå§’æ›ŸÎ¥å¦²ç‚´Ð–å¦¯å‚›îŸå¦²æŒŽç‘ å¦²è§„Ð å¦²Ñ„â–å§’è¾¨îŸ„å¦²î…Ÿã€å¦²î‚£â–•å¦¯æŽ“çŒå¦¯ï½†ã€’å§—å‹¬â–½å§—å‰Ç˜å§—å‘Šï¹ªå§—ãˆ¡îŸ¶å§—ï¸½ï¹«å¦¯å‘ŠÃ¡å¦¾æ„­çšå¦¾çŠ³çŽå¦¾ãˆ¡î€‚"],["dda1","å¦¾æ¥„æ§œå¦¾ç»˜ç’å¨…å‚›î€—å¦¾è™«î€‹å¨…ç‚´ç£å¨…ç†¸î€‰å¨…æ°­î§å¨…ç»˜ç‘“é“‡æ ¨î·å¨†æŽ“ç‘¬æ¥è¾¨ç‘¹å¨†å‘Šîƒ’é©æ»„îƒ”æ¤‹î†½ç“å§å†©ç“‘å§æ„­ç“©å§æ—€ç“«å§ç†¸î„šå§å‘Šî„²å§æŒŽç•å¨ˆå‹¬ç• å¨ˆå¶†ç•¼å¨ˆæ›Ÿç–„å¨ˆã‚†î†å¨ˆî‚£î††å¨ˆå‰î†ˆå¨ˆè™«î†Žå¨ˆå…¼ç˜‘å§£å¬«ç˜¬å§£ç†¸î‡¡å§£î‚£î‡¨å§£îˆžå£•å§˜å Ÿçš³å§˜æ—€çš¼å§˜ã‚†åŸƒå§¹ç‚´çå§¹ãˆ¡è±¹å¨Œå‚›çŸ‹å¨Œæ°­çž¾å¨Œæ¶™æœ¬å§¹ã„¦èƒŒå¨ŒæŽ“çŸå¨‰å‹¬æ½®å¨‰æ’´æ­¥å¨‰æ¥ç¡¡å¨‰æ¿‡ä¼¯å¨Œè¾¨ç°¿"],["dea1","å¨Œçƒ˜ç¡¾å¨‰îˆ›ç¡»å¨‰î…ç¤‹ç›å¶†ç‚Šå¨²î‚£å”‡å¨²å‘Šç¤„å¨²åž«é—¯å¨²æŽ“ç£³å¨´ï½†ç¨‰å¨´ã‚†ç¦‹å¨´è§„ç¦‰å¨‘åº¢ç¨Œå©µã‚†ç§´å¨£è§„ç¬—å¨“å©ƒå…œå¨£å›¨ä¹å¨‘å‘Šç©¯å¨£î„çªžå¨£å±¾æ³•å¨£æŽ“ç©®å¨£çƒ˜çª“å¨£ã‚†çªŒå¨£î…æ¨Šå¨“î…Ÿå·©å¨“î†½ç¬å©€å‰ç¯ƒå¨“ç‚¬ç¦å©€î‚£æ–§å©€èˆµç®¥å¨“ç†¸ç®–å¨“çƒ˜ç®®å¨“ã‚†è±¢å¨“æ¿‡çˆ¶å©§å‚›é‚¯å©§æ¨»ç²”å©§é”‹ç²¨å©§èŠ¥å‡½å©Šå‹¬ç¿°å©Šæ—€ç²«å©§å¿”äº¥å©Šå‚›ç°¾å¨¼ä½¹ç´¤éå±¾æ»‘å©Šå‘Šç—ªå©•æŒŽå¾Šå©•è¾¨åŒ–å©•å‰ç²š"],["dfa1","å©•ç‚¬ç´¦å©Šé”‹ç· å¨¼çƒ˜ç¤å©¢ä½¹ç·šå¨¼îˆ›ç¶“å©µè™«æ±Ÿå©¢å‚›éƒŠå¨¼æ¨»ç·¨å©¢æˆžç¸½å¨¼ï¸½å¢ƒå©¢ï½†å°½å©¢ã‚†ç«Ÿå©µå—˜æƒŠå©µç†¸ç¹’å©µî„ç¹‘å©µæ¨»å‹˜å©µî†½ç¹˜éŽå¤Œâ‚¬å¬«äº¢éŽæˆ â‚¬ä½ºâ‚¬å¿”çƒ¤éŽæ¶šâ‚¬æ°­é…±éŽæ¿ˆâ‚¬æ¨¼â‚¬ç†ºâ‚¬æ‰®â‚¬å‰§â‚¬èŒ¬äº¼éï½‡å€·éæŽ”å—é‘è¾©å“éå“¥åéî†¾å„«é‘å¬¬å„©é‘æ¬‘å‰¦é‘ç•ŒåŠ€é’æ¬‘å†é“æ› å”¸é“ï¸¾åƒé“å²€åŽ²é“î„‚å•…é•è¤å”²é”æ› å•«é”î„‚åš„é”åœ­å–šé•æŽ”å™³é•æ—‚å™¹é•çŠµåšžé•Ñ…åš¨é•ï¿½"],["e0a1","é•åœ­åš³é–å¶‡åžšé–æ¶šåŸé–î… åŸ‡é–æ‰®åŸé–è¤åŸ£é–è·¨å¢é—å—™å¢œé—æ¨¼å£Œé—å‰§å¦­é˜ä½ºå¦µé˜æŽ”å§ˆé˜ãˆ¢å§§é˜åœ­å§´é™å†ªåª¶é™å‹­å«€é™æŽ”å«é™çŠµå«›é™åœ­å«¹éŠå¿•å¯³éšå©„å¯½éšæ «å¯¾éšå¯¸å°Ÿéšâ•ƒå°Œéšå‰§å´•é›å¿›ç²¯é›æ¥ƒå´»é›ã„§åµƒé›å“¥åµ‰é›è¤åµ‘éå ¢å¹Šéåº£å¹“éâ‚¬éãƒ§å½¯éç‚µæŒ—éžå‘¯æ‡éžãƒ§å¾ƒéžèŒ¬æƒ¡éŸæ› æƒªéŸç†ºæ†´éŸä½ºæ†¸éŸâ•ƒæ‡“éŸï½‡æ‡‰éŸå‰æ‡¢é å¬¬æŒ’é Ñ…æ³é¡å¿•æ‘‚éï¿½"],["e1a1","é¡çŠµæ‘šé¡Ñ…æ‘¡é¡î†¾æ‘¬é¡æ‰®æ‘«é¡å“¥æ‘²é¢å‹­æ”¦é¢å‘¯æ”²é¢åº£æ”³é¢æ› æ•é¢ç‚µæ• é¢î„‚æ•¿é£å‹­æ™¬é£å©„æ™§é£æ¶šæ™¢é£æ°±æš•é£ã‚‡æš“é£î‚¤æš›é£å“¥æš¥é¤å—™æžƒé£å¯¸æžˆé¤å¤Œæºé¤æ—‚æž¤é¤æ¿ˆæž¼é¤ï½‡æ¢»é¤å´‡æ¢¼é¤ç”µæŸ¦é¤å“¥æŸ¤é¤è¾©æ£ˆé¥å©„æ£é¥æ¬‘æ£§é¥ç‚µæ¤Œé¥è·¨æ¤‰é¦ä½ºæ£¸é¥è™¹æ£½é¥å´‡æ§‹é¦å¶‡æ§ˆé¦ç†ºæ§¯é¦çŠµæ§¨é¦ãˆ¢æ§«é¦å¯¸æ§¹é¦è¤æª±é§å ¢æª°é§æ»…æ«‚é§ï¼„æ«Œé§ã„§æ«“é§î†æ«‘é§î„‚æ«š"],["e2a1","é§èŒ¬æ« é§å“¥æ«¦é¨â‚¬é¨å†ªæ®˜é¨å¬¬æ® é¨æ «æ®¦é¨æ¬‘æ®®é¨æ‰®æ¯šé¨å“¥æ¯ é¨è™¹æ³œé©å¶‡æ´Šé©æŽ”æ´–é©ï¼„æ´¢é©Ñ…æ´©é“‡îˆœæµ•éªå ¢æ¸¿éªå‹­æ¹¬éªã‚‡æ¹ éªãƒ§æ¹¨éªæ¶šæ¹»éªå“¥æ½Žé«æ°±æ½¹é«î‚¤æ½§é«ãƒ§æ¾˜é«å‰§æ¾’é¬åº£ç€·é¬æˆ çŽé¬ç‚µç é¬å‰ç©é¬è·¨ç±é¬ç•Œç®é­å›©ç…ƒé­æ¥ƒç…”é­æ»…ç…Ÿé­î†¾ç†‚é®å²€çˆ³ç»€ï¸¾ç‰‹ç»€î†î”Šçº°åº£ã€ˆçº°å—™ã€–çº°æ°±î•±çº°ï½‡â’Œçº°î†îªçº¾æˆ î—‹çº¾å¬¬î—™çº°å‰§â’“çº¾å‘¯î—çº¾ï¿½"],["e3a1","çº¾Ñ…î—Ÿçº¾ç•Œï¼”ç»€å›©î˜·ç»€æˆ î˜¾ç»€î„‚ã‹ç»â‚¬ç»çŠµîšœç»ç†ºîšŸç»æ› îš˜ç»è™¹ã‚¿ç»‚å©„îœ‚ç»‚Ñ‡ç¶ƒç»‚î†Îžç»‚å´‡îž…ç»‚è™¹îŽç»‰æ› Ðç»‰î„‚Ðç»‰ï½‡â–“ç»‹å¶‡îž¾ç»‹æ¬‘îŸ†ç»‹ç†ºî›¥ç»‹è¾©É‘ç»‹å‰§Çšç»Œå†ªîŸ´ç»Œå¤ŒîŸ¾ç»Œãˆ¢â”…æ¦«æ¿ˆâ”Œç»Œåœ­â”™ç»å ¢ç¥ç»æ› ç¦ç»æ «î€ˆç»”å ¢î€ç»å‰ç”ç»”å‹­î€žé–­å†ªç–ç»”å©„çç»”å¿•çªç»”æ’¶ç¯ç»”æ°±ç´ç»”ï¼„îŸç»”ï¸¾îªç»”æ‰®ç‘ç»—å¿•ç‘ ç»—å—™îƒŽç»—æ¨¼ç‘±ç»—ç‚µîƒç»—ã„§îƒ‘ç»›ï¿½"],["e4a1","ç»›è™¹ç‘’ç»›å¶‡ç‘¡ç»›å²€ç“ç»›ç”µî„žç»›å¯¸î„ ç»›æ‰®î„ªç»›î„‚î„§ç» æ¿ˆç•¼ç» ç†ºç•­ç» æ»…ç•¾ç» å¬¬ç•³ç» å¿•ç“­ç» æ¬‘ç˜šç»¡ä½ºç˜œç»¡å¿•î†‹ç»¡å—™ç˜½ç»¡â•ƒçš¯ç»¨æ—‚î‡›ç»¡ãƒ§çœç»¨â‚¬ç»¨å›©çš³ç»¡å´‡î‡¬ç»¨æ¥ƒçšªç»¡å‰åŸƒç»¨Ñ…è”¼ç»¨ç†ºèƒºç»¨î‚¤æ•–ç»«å²€çœ±ç»«æ—‚ç†ç»«â‚¬ç»«æ„®ç’ç»«ç†ºå ¡ç»«æ «é¥±ç»«î„‚é’¡ç»®å†ªçŸç»®ã‚‡ç®”ç»®ãˆ¢æç»®ï¼„æ³¢ç»®å´‡è†Šç»®è¾©ä¼¯ç»®åœ­æ­¥ç»¯â‚¬ç»¯å‘¯ç¡žç»¯æ¨¼ç¡³ç»¯æ»…å°æ¥è¤æœç»¯èŒ¬ç‚’ç»¯å‰æ¾ˆç»±ï¿½"],["e5a1","ç»±å‚œç¤ˆç»±æ› ç£°ç»²å‘¯ç¥´ç»±î†¾åºŠç»±è·¨å¹ç»²å—™å…šç»²æ «ç¥¹ç»²èŒ¬èƒ†ç»²î†¾ç¥»ç»²ï½‡ç¨‰ç¼å¤Œç¦Œç¼å¿•åˆ°ç¼æ¶šé€—ç¼î†¾å®ç¼ç”µç©±ç¼ç•Œä¸œç»ºç•Œç›¯ç¼îˆœçªšç¼å“¥ç¨›ç¼æ‰®çªç»¶æ¿ˆç­ç»¶ç‚µåŠç»¶èŒ¬è´°ç»ºå‘¯ç¬‚ç»ºï½‡æµ®ç»ºæŽ”å‰¯ç»ºç†ºç¬ç»ºå¬¬æ¶ªç»»å—™åŠŸç»ºè¤å‚…ç»ºåœ­ç®–ç»ºé£Žè¦†ç»ºè™¹æ­ç»»æ¿ˆç®¹ç»»ç‚µç®¼ç»»æ°±æž„ç»»î†ä¾›ç»»è‚©å¤Ÿç»¾å†ªçªŒç»»å€Ÿäº•ç»»è·¨ç°£ç»¾å¤Œç°©ç»¾æŽ”ç°®ç»¾æ’¶ç°²ç»¾æ «ç°¬ç»¾æ¶šç°»ç¼‚å“¥å·±"],["e6a1","ç¼ƒå‘¯ç¶„ç¼ƒå¶‡ç¶†ç¼ƒæ„®ç¶‰ç¼ƒæ› ç¶Œç¼ƒæ¨¼ç¶—ç¼ƒçŠµå»ºç¼ƒâ•ƒæ¶§ç¼ƒå“¥ç·œç¼‡å—™ç·ç¼‡å ¢ç·¡ç¼‡å²€ç·®ç¼‡ç‚µç··ç¼‡æ°±è†ç¼‡îˆœé™ç¼‡åœ­äº•ç¼‡å‰é–ç’€è¾©ç¹€ç¼ˆå—™ç¹†ç¼ˆæ› ç¹‘ç¼ˆï¼„å–€ç¼ˆâ•ƒç ç¼ˆå½’î—¡é‘°å—šâ‚¬å‹®â‚¬å¬­â‚¬æŽ•â‚¬æ¨¿â‚¬æ¬’â‚¬æ»†â‚¬Â¤â‚¬ã„¨â‚¬èƒ¯â‚¬æ˜äº°é‘±å—šäº½é‘±æ¨¿ä»›é‘±ç†»ä»®é‘±ã„¨ä¼‹é‘±èŒ¶ä¼†é‘±æƒ°ä¼–é‘±å€Ÿä¼©é‘²å‹®å€–é‘²å‘°å€¹é‘²æ’¹å€¸é‘²î…žå•‡é‘²î„ƒå„§é‘³ãƒ¨å„¥é‘³æ¿Šå„Žé‘³æ°³å„¢é‘´å¤Žå„»é‘³è¾«å‰¾é‘´â•„åŠŠé‘´îˆåŽ "],["e7a1","é—…å¬­åŽ—é‘´æåŽ¯é‘µæˆ£å…—é‘µè¾«åœé‘µãƒ¨å‡é‘µç£‹å”­é‘¶å £å”ºé‘¶â‚¬é‘¶å‚å•é‘¶æ›¡å•¢é‘¶ï½ˆåŽ½é‘¶æ’¹å•¯é‘¶æ‹Œå–Œé‘¶æå–é‘¶å€Ÿå™£é‘·å‚å–“é‘·å¤Žå™¸é‘·æˆ£åšˆé‘·æ¨¿å™²é‘·æ°³åšé‘·çŠºåš™é‘·é¸¿åš®é‘·æåž‡é‘¸å‚åžé‘¸å›ªåž”é‘¸å¶ˆåžšé‘¸æ ¬åŸ„é‘¸î‚¥åŸœé‘¸å® å¢é‘¹æ¬’å¢­é‘¹æ¿Šå¢¯é‘¹ç†»å¢¹é‘¹ãˆ£å¢¾é‘¹î‡å£‚é‘¸î†¿å£‰é‘¹ç–¯å£é‘¹æå¦½é‘ºæŽ•å§­é‘ºç†»å¨€é‘ºî„ƒå«›é‘»ï½ˆå«™é‘»æŽ•å«¶é‘»å® å«¼é‘¾æ’¹å¯–é‘»æ˜å«»é‘»ç‚¶å¯™é‘»æ»†å¯œé‘»ï¿½"],["e8a1","é‘¼ä½ƒå°¨é‘¼æ ¬å°£é‘¼è¾«å´é‘¼ç¡…å´˜é‘½å‘°å°Ÿé‘¼î‚¥å¯³é‘¼æ¨¿å·ºé‘¾æ°³å¸¾é‘¾ç†»å¸°é‘¾æ ¬å°ˆé‘¾åº¤å·¼é‘¾å©…åµ“é‘¾ä½ƒåµ†é‘½ä½ƒå¸¬é‘¾å¤Žå¸¹é‘¿ç£‹æ‚¡é‘¿î‚¥å¼¾é‘¿å€Ÿæ‚†é‘¿æ¨¿æ‚‘é‘¿ä½½å½¿é’€å›ªå½”é‘¿èŒ¶æ‚•é’€ãˆ£æ‚¹é‘¾å€Ÿæƒ›é’„å—šå¾Žé’î…¡æƒ‡é’€è‰°æšé’‚å‹®æ‡›é’î‚¥æŒ±é’î†¿æ‹é’â•„æ†œé’€î„ƒæ‡é’ç¡…æƒ–é’ƒå©…æ†¿é’‚ç¡…æ’é’‚ç†»æ‘é’ƒå¶ˆæ‡é’ƒæ°³æ»é’ƒä½½æ¯é’ƒæ ¬æŒ•é’„Â¤æ‘½é’ƒç£‹æ•†é’„æ¨¿æ•©é’„ç†»æ•ƒé’„æ—‡æ‘·é’‘â‚¬é’‘ï½ˆæ™¿é’‘ï¿½"],["e9a1","é’‘ä½½æ§€é’‘å¬­æ™»é’–â‚¬é’–ã‚ˆæž…é’–æˆ£æžˆé’–ã„¨æš›é’–æ—‡æž¦é’˜î‡æžƒé’–æ»†æš¦é’‘ææž‘é’˜å¤ŽæŸ¡é’˜å¿šæŸŸé’˜æ„¯æ£”é’˜æ¿Šæ£©é’˜æ»†æ¤†é“‡å©…æ§—é“‡å¬­æ¤Œé’˜é¸¿æ§…é“‡ãˆ£æ§¡é“‡æ‹Œæ¨‹é“å¶„ç®·é“æ—‡æ«‰é“Ñ†æ«›é““æ’¹æ®»é““â•„æ¯†é““å¬­æ®žé““æƒ°æ¯Œé“”å‹®æ³¦é““æ‹Œæ³¬é” ï½ˆæ¯‡é“”æ—‡æ´–é“”â•„æ´­é“”ç†»æ´“é“”îˆæ¹Œé“šå—šæ¹€é“šâ‚¬é“šå†­æµ•é“šæˆ£æ¹é“šå¶ˆæµŒé“šå©…æ¹¸é“šèƒ¯æ¹»é“šæ˜æ¹§é“šâ•„æ¹šé“¦çŠºæ½«é“¦æ­Œæ½“é“¦åº¤æ¾Šé“¦æ¥„æ½¹é“¦î†¿æ½¤"],["eaa1","é“¦æ’¹æ½±é“¦î‡çˆ¡é“»ãˆ£çé“»å‚çŸé”œå¬­ç²é”œâ‚¬é”œæ„°æ´Šé“»î‚¥ç„ºé“»å® ç„½é”œå—šç®é”œîˆç…µé”œçŠºçˆ®é” å¶ˆç†…é”œæƒ°ç…¼é” åº¤ç…‰é” æˆ£çˆ¾é” æ›¡ç‰é” Â¤ç‰¨é” æƒ°ç‰´é” Ñ†ç‰·ç›å‹®î”‡ç›æŽ•î”žç›ç‚¶ã€ç›î‚¥î•¦ç›æî–ƒç›ä½ƒã€—çšä½ƒã€”çšå‚î•¼çšæŽ•î©çšæ¬’â…±çšå¶ˆâ…³çšæ‹Œâ’–çšè¾«î—ˆç‘å‹®î—™ç‘æ¨¿î—žç‘æ¿Šï¼™ç‘œå‚ï¼œç‘ç£‹ï¼ˆç‘èŒ¶î˜©ç‘œå²ƒî˜¯ç‘œæ’¹îšˆç‘œç‚¶ã…ç‘œî‡ã‹ç‘—ä½½îš‰ç‘œæ˜ã–ç‘œæ­Œîš‘ç‘œæ¿Šîš¥ç‘—ï¿½"],["eba1","ç‘—ï¹ã‚¤ç‘—î…¡ã‚ªç‘—îˆã‚´ç‘—ç–¯ã‚¾ç‘•å†­î›­ç‘•å©…î›¸ç‘•æ¨¿Î‘ç‘•â•„Î–ç‘•î„ƒÎŸç‘•èŒ¶îž†ç‘•å€Ÿîž‹ç‘™â‚¬ç‘™æ°³î¡ç‘™æ¿ŠÐç‘™ç£‹Ð¦ç‘·å†­îž¼ç‘·æ„¯â–½ç‘·æ¶œîŸƒç‘·ãƒ¨Ç˜ç‘­ä½½îŸ¸ç‘­æŽ•ï¹©ç‘­å £â”˜ç‘­î…¡â”ˆç‘­ãˆ£çç‘¾å‚çŽç‘¾ã„¨î€€ç‘¾æˆ£î€„ç‘¾ï¹ç¨ç‘¾ï½ˆç“ç’œå¶ˆçŽç’œæ°³î¨ç’œå® î¤ç’œã‚ˆî®ç’Žæ—‡ç·ç’œãˆ£î´ç’œç‚¶ç±ç’Žå²ƒç‘–ç’Žæ°³îžç’Žæ ¬ç‘¦ç’Žæ¥„ç‘ºç’ŽæŠ½çšç’Žï¹îƒ†ç’Žæîƒƒç’€ä½½ç“•ç’€å¿šç“—ç’€å¤Žç“¥ç’€æ¶œç“ªç’€ï¿½"],["eca1","ç’€ç†»î„¥ç’€îˆî„­ç’€å€Ÿç•ç’å²ƒç•®ç’æŽ•ç•µç’æ ¬ç•½ç’æ°³æ˜‚ç’žä½½ç¿±ç’žå £ç‚ç’žåº¤çˆç’žæ›¡é›¹ç’žî„ƒå¤‡ç’žé¸¿çŸ€ç’¨å¤ŽçŸƒç’¨å©…çŸ‹ç’¨åº¤çŸ“ç’žè‰°çŸ˜éŽ´æ¿Šç®”ç’¨î‡æ­¥ç’¨èŒ¶æ¸¤ç’¨î†¿æ•ç’©å £ç¡œç’©ã‚ˆå¸¸ç’©æ°³è¾°ç’©é¸¿éƒ´ç’å‹®ç£ªç’å©…ç£­ç’å¿šç£µç’æ„°ç¶†ç’æ’¹ç¡©ç’æ—‡ç¤€ç’§Ñ†æ·¡ç’§è¾«å…šç“’ä½½ç¨’ç’ºå‚æ¯’ç“’é¸¿çª‚ç’ºæ°³çªŽç’ºå²ƒçª™ç’ºå¬­è—©ç’ºî‚¥çª¡ç’ºï½ˆèŠ³éŸªå £ç¬ç’ºèƒ¯ç¬£éŸªç‚¶ç¬ŽéŸªç†»ç®“éŸªä½ƒèµ´éŸªç£‹ç® "],["eda1","éŸ«å›ªç®ŸéŸ«å²ƒç®°éŸ«å £ç®¼éŸ«ã‚ˆç¯„éŸªî‡æ¢—éŸ«æ›¡è‹ŸéŸ«èŒ¶è¾œéŸ¬ä½½ç°¢éŸ¬å‘°ç°žéŸ¬å¬­ç°¥éŸ¬æ’¹ç°¯éŸ¬æ—‡ç°·éŸ¬î‡éª¸éŸ¬î„ƒå–ŠæŒå—šç½•éŸ¬æç²ŽæŒå £ç²™æŒæ¶œå”¬æŒè‰°æ¢æŒî‚¥ç—ªæ“å©…ç´–æ“æ›¡ç´¥æ“æ¬’ç´¦æ“æ»†ç´µæ“æ¶œç´æ“ï¹æ±²æ“æ˜è„Šæžå‘°çµºæ“æç¶„æžå¤Žçµ¾æžåº¤ç¶æžæ»†èˆ°æžï½ˆé¥¯æˆæ»†ç·¹æˆï½ˆç»æˆîˆç—‰æ©æ°³éªæ©ãˆ£å¼€æ©îˆžå€—æ©æ’®â‚¬å‘°æŠ—æ©æ´ªâ‚¬æˆ¦â‚¬æ›¢â‚¬ï¿ â‚¬å¶‰â‚¬ç‚ºâ‚¬æ ­â‚¬å¬®â‚¬Ñ‡â‚¬å •â‚¬ç”¸â‚¬ç¡…æ‰›"],["eea1","é–¬å¿›äº¹é–¬æˆ¦äº½é–«åº¨äº¯é–«é¹ƒä»é–¬æ©€ä»¦é–¬ã„©ä¼…é–¬å •æ¯ƒé–¬æŸ¥å€é–¬ä»‹å€Žé–­â‚¬é–­å©‡å€é–­å¿›åé–­îˆžå™é–­ç”¸å„®é–®ã‚†å¢—é–®æ¶¢å‰›é–¯æŽ—å‰»é–¯æŸ¥åŠ™é–°å©‡åŽ²é–°æ©€å„é–°ãƒ©åé–°æŠ½å¢é–±å¬®å”¹é–±å‚žå•Ÿé–±î‚¦å•¹é–±îˆå–Œé–±æ’®å–“é–²â‚¬é–²ä¾€å™³é–²å¬®å™½é–²æ ­åšé–²ï¿ åšŠé–²å¥¸åš¨é–²å •åž¶é–²å—åžŸé–³î„„åž¥é–³æˆ¦å¢³é–´æ¥…å¢”é–´å¤å¢¹é–´å ¥å§‡é–³å—å¢œé–´æ„°å§•é–µæ ­å§„é–µæ¶¢å¢¯é–¶å¿›å§½é–µçƒ½å«¨é–·å¿›å«¼é–¸å‹¯å°ž"],["efa1","é–·æ¬“å°‡é–·æ°¶å°ˆé–·æ´ªå°©é–·å©šå´ªé–¸çŠ»åµ“é–¸î‡€å´ é–¹ä¼´å¹€é–¹î…¢å¸žé–¹å½’å½‡é–ºæ¥…å½£é–ºãƒ©å½‰é–ºå†®å½Žé–ºæ„°å¼µé–ºã‚‰æ‚®é–»æ—ˆæ‚¡é–»å†®æ‚‹é–»æ„°æƒ—é–»î‚¦æƒ–é–»ï¿ æƒ¡é–¼ä¾€æ†­é–¼å‹¯æ†¶é–¼çŠ»æ†¿é–¼ç‚ºæ‡‰é–³â•…æ‡“é–¼ç”¸æ‡›é–¼ä»‹æ†µé–¼å¥¸æ‡¢é–½ä¾€æ‡£é—å‚žæžƒé—å©‡æž–é—æ ­æž é—æ¬“æž²é—ã„©æž¾é—î…¢æŸ¤é—å©šæŸŸé—é¹ƒæ£…å©µå •æ¢¼é—‚å¶‰æ£‡é—‚æ›¢æ£“é—‚æ ­æ£žé—‚ï¿ æ£©é—‚ãˆ¤æ§¨é—ƒã„©æ§·é—ƒîˆžæªªé—„å²„æª¹é—„å¬®æ«¡é—„æ»ˆæ«ˆ"],["f0a1","é—„æ¿‹æ«‰é—„ï¹‚æ«œé—„î„„æ®Ÿé—…æ©€æ®¨é—…æ¥…æ¯†é—…Ñ‡æ¯é—…æŸ¥æ¯Žé—…æ’®æ¯é—…ææ¯ é—†åº¨æ³²é—†å¤æ³¹ç‘—å¶‰æ´”é—‡å¶‰æ´‰é—†å½’æ¸¼é—‡å—›æ¹€é—‡æ’»æ¹ˆé—‡æˆ¦æ¹‰é—‡æ ­æ¹™é—‡ã‚‰æ¹­é—‡ä¼´æ¹½é—‡ä»‹æº‡é—ˆå‹¯æ½Œé—ˆå ¥æ½…é—ˆå¤æ½¨é—ˆçŠ»æ½³é—ˆï¹‚æ½¹é•æŽ—æ½¾é—ˆéæ¾’é—‰å‘´æ¾•é—‰ä¾€æ¾“é—‰å—›ç€·é—‰å¿›ç€½é—‰æ»ˆç—é—‰ï¹‚ç’é—‰æŠ½ç¤é—Šå†®ç„¼é—Šå ¥ç…é—Šæ»ˆç…­æ¦»å¿›ç…µç»”ç†¼ç…»é—Šç”¸çˆ®é—‹å²„ç‰³é—‹ã‚‰ç‰Žé—‹çƒ½ç‰»æ¤¤å—›î””æ¤¤å¬®ï½žæ¤¤îˆžâ€œ"],["f1a1","æ¤¤éã€ˆæ¤¤æŠ½â…¹æ£°îˆžâ’ˆæ£°å •î—‰æ¤‹å†®î—‹æ¤‹â•…ï¼‹æ¤å†®î˜®æ¤æŽ—î˜¹æ¤æ©€ãæ¤æ¿‹î™ƒæ¤ã‚‰î™…æ¤î„„ãŽæ¤ä»‹ãžæ¥—å‚žîšŽæ¥—å‘´îš•æ¥—å¬®îš–æ¥—æŽ—îš‘æ¥—æ›¢î›¼æ££æ©€Î•æ££î…¢Îžæ££å¥¸î¤æ¤æ¶¢î¢æ¤æ©€î–æ¤î…¢Ðœæ¤éÐ æ¤å©šÐ¦æ¥±ä¾€â—¤æ¥±å‘´Ð‘æ¥±æ¬“Çæ¥±çƒ½ï¹¨æ¤¹å‚žï¹¢æ¤¹å†®Åˆæ¤¹æ›¢îŸ«æ¤¹æ¶¢îŸ´æ¤¹ç†¼îŸ¿æ¤¹ãƒ©â”€æ¤¹â•…â”‡æ¤¹îˆî€Œæ¥ ä¼´î€›æ¥‚â‚¬æ¥‚å¿›ç£æ¥‚æ’»ç¨æ¥‚ç‚ºç¶æ¥‚ãˆ¤î æ¥‚ï¹‚î¬æ¥‚î‚¦î«æ¥‚æ’®î®æ¥‚ï¿½"],["f2a1","æ¥‚å©šç‘”æ¥æ©€ç‘²æ¥ç†¼î‚½æ¥ï½‰îƒ€æ¥Ñ‡îƒƒæ¥â•…îƒ…æ¥î‡€îƒŠæ¥æŸ¥ç“Œæ¦„å†®ç“˜æ¦„å¶‰ç“—æ¦„æˆ¦ç“¨æ¦„æ’®ç•µæ¥«å†®ç•±æ¥«æ ­ç•»æ¥«ç†¼ç–‡æ¥«ã„©î†‹æ¦€â‚¬æ¦€å©‡î†æ¦€å—›ç˜¡æ¦€æˆ¦ç˜¨æ¦€ï½‰î‡—æ¦€ã‚‰ç˜®æ¦€ï¿ æ˜‚æ¦€æŸ¥î‡¦æ¦€ä¼´çš¶æ¦˜æ—ˆçš¦æ¦˜æ’»çš©æ¦˜å—›çš¥æ¦˜æŽ—çš§æ¦˜å‹¯çˆ±æ¦˜æ¶¢å“Žæ¦˜ã‚‰å•Šæ¦˜ä¼´çœ¹æ¦˜æŸ¥çœ´æ¦˜é¹ƒç”æ¥¸çŠ»æŠ±æ¥¸å •å¤‡æ§ŒÑ‡è¶…æ§Œä¼´ç£¯æ¦‡å ¥å€¡æ¦‡å†®ç£«æ¦‡îˆå¤„æ§ŽîˆžçŸ—æ¦‡ç†¼ç¥«æ¦‡æ›¢ç£¼æ¦ˆä¾€çº¯æ¦‡é¹ƒç¥®æ¦ˆï¿½"],["f3a1","æ¦ˆæ¿‹ç¦æ¦ˆã‚‰ç¥½æ¦ˆæ„°ç¦‰æ¦ˆæŸ¥ç§¹æ§Žå›¬ä¸œæ¦ˆîˆžå²›æ§Žæ°¶é’‰æ§Žâ•…æ«æ¦‰å‹¯ç©ªæ§Žå©šé™¡æ§Žæ´ªç©¯æ¦‰å¿›ç©«æ¦‰æ¬“çªŠæ¦‰æä¹æ¦‰î…¢çŸ¾æ¦‰ä»‹ç¬Ÿæ¥¦æ¶¢ç¬§æ¥£ç”¸æž„æ¥£ä»‹ç°›æ¥¹å ¥ç°¨æ¥¹å²„ç°°æ¥¹æ›¢ç°¯æ¥¹æ¿‹äº¥æ¥¹â•…ç„Šæ¥¹îˆæ¶µé—ˆï¿ ç²šæ¦›åº¨ç²¡æ¦›æ„°ç²©æ¦›æ»ˆç²¸æ¦›æ¿‹ç²»æ¦›ãƒ©èŠ±æ¦›îˆžæ·®æ¦›å •çŽ¯æ¦›å½’æ¢æ¦›å¥¸å”¤æ¦§å›¬ç´™é¨çƒ½ç´©æ¦§ï¿ æ£˜æ¦§é¹ƒç¶‚æ¦»æŽ—ç¶Œæ¦»ï½‰ç¶—æ¦»çŠ»å¥æ¦»ï¹‚æ¶§æ¦»î„„å§œæ¦»çƒ½è®²æ¦»å •ç·¯æ¦«æ»ˆç·º"],["f4a1","é«îˆ›îŒé–¬æ¬‘æ‡é‘æ»…å•“"],["f9a1","ç»¾å©…î™é–¸å ¥å¦¶é’ƒæ»€ç¹…éç»˜æ§ºå¦«å ¥å«»é‡è¯²çµ½æ¶“ã„¤å¼§æµ é—´ç´‘æµ¼å†§è„Šæµ£æ ¦ç·¬æ¸šå©ç·´æ¸šæ–¾ç¹Šé‹â‚¬éŠî­é éŠç‚²äºžé‹æ¿äº—éŒæ–¿å…‡éæ¨ºåŽžéã‚…å•™éæƒ§åšžé’æ›žå§•é”ï¹€åª­é•æ¶˜å¯‘é–å›§å°‹é—æ’å¸—é˜æ’å½Žé“·åº¡æŒéœå©‚æŒ¬éåž®æž‚é§æ¬æ½µé¨î„€ç„¾é©å›·â—¤é“·æ„¬î–ƒæ¾§æ’î˜°æ¿‚æ’³îš æ¿‚æ¿†ã‚£æ¿¡ã‚…îž†ç€›æ §ç˜ˆé¢îˆšç˜¶ç€µî„€ç›€å®€ï¹€åŸ å®„é›æ£å®“æ“„â˜‰å®“å‚šæ·¡å®¥ç¨¿è±†å®¸æ„¬è‚Œå¯®æ‘æ¶§å¯°ï¿½"],["faa1","è¹‡ç‚´ä»¢éŽ®å‘®å€žéŽ¯ç‚´å„ éŽ°çŠ³å„¾éŽ°æˆžåŠ®éŽ°ç‰ˆå•’éŽ´æ’´å§¦éŽ»åž«æ†¼éŽ¾æ¿‡æ¸éåº¢æ¦¾é„æ›Ÿæ¨†é„å¤‹æ§·é„ç‚´æ§«é…ãƒ¦æ«é…æ¬™âŠ•é…è™«æ®­é†çŠ³æ¯‘é†æŒŽæµéˆåº¯ã‰é‰ï¸½ç®å¦—æŽ“ç„µéä½¹î”‰å¦«å¿¥ã€’å¦¤îŸ’ã€å§’æ¨»Ð‘å¦¯ç‰ˆâ”‡å§—å—˜â”å§—ç‚¬îŸå¨…ã‚†ç˜±å§˜æŒŽç–å¨Œå—˜æ‚²å¨‰æ°­ç£©å¨‘å›¨å¼¹å¨‘æ ¨å†¬å¨£å¿”çŠ¯å¨£å‰èŠ³å¨“è§„ç®¿å¨“Ñ„è®£å©§æŒŽç·¢å©¢åž«åº·éŽå‘¯â‚¬å›©â‚¬ã„§å€•éî‚¤å‰°é’å‹­åŽ¹é“å—™åŽ™é“·æ› å™¥é•å‰§å§³"],["fba1","é˜å‰§å°‹é“·æ «åµŽéœç•Œå¼¶éæ «å½›éæŽ”æ‚‹éç”µæƒéžî†æƒ„éžî†¾æ†¿é å¤ŒæŒ“é¢ä½ºæšžé¨å‚œæ®°é¨ç‚µæ®¯é¨ï¸¼îž½é«å——å§±é®ï¼„î”“çº­ã‚‡ã€Žç»€å¸®îž¾é“·æ¬™îŸ€ç»‚æ—“îŸç»‚æ¶šç£ç»”ÑîŸ‚ç»”î‚¤ç–„é“·æ¿ˆç¥±ç»²æ»…æ–—ç¼çŠµçªŽç»»æŽ”çµ¿ç¼‡â˜…îŸ„é‘¼ä½½å´²é‘½èƒ¯å¼´é‘¿æƒ°æ†Ÿé’‚ç£‹æ™¸é’‘æ¬’æš™é“·ç†»æŸŠé“·ç‹…Äé” å›ªï¼•ç‘·æŽ•Çšç‘­ç¡…î€†ç‘¾æç¶é“·ãˆ£î³ç’€æ’¹î„¸ç’©æ‹Œç‚’ç’æŽ•åˆ€é“·ï½ˆç²¡é“·ã‚Ä“é–¬Ñ‡å„ªé“·ï¹‚å‰·é–¯Ñ‡åš‰"],["fca1","é–²æ¥…åšé–²î…¢åš é–²ã‚‰åš—é–³å—›åžšé–³å©‡åŸ¡é–´â‚¬é–³å¥¸å¢¡é–´æ¬“å¢¤é–³å½’å¢½é–µÑ‡å£é–´æå«¥é–¶æ¥…å«é–¶æ„¶Ä›é–¶æ›¢å«šé–¶æ’»å°Œé–·ï¿ å«½é“·ã„©å°€é–¶å—å¯¾é–·å‚žåµƒé–¸æ¥…å¸³é–ºå—›å½é–ºææƒé–¼å‘´æ†Ÿé—æŽžî¡é“·â•…æ®±é—…îˆžæ¹·é—‡å©šæ½ˆé—ˆå¶‰æ½–é—ˆæˆ¦æ½Ÿæ¤¤æ¥…Ë‰é“·îŽÇæ¤ÑÃ¬æ££ç‚ºîŸ¬æ¥‚æ¬“ç³æ¦„ç”¸î„«æ¥«å¿›î†ˆæ¥«å©šçšœæ¦ˆä¼´ä½†é“·î…¢ç¬æ¦›ï¿½"],["fcf1","éˆªï¿½",9,"é”Ÿî®éƒ¡é”›å›·ç´“"],["8fa2af","è—°è—èµ‚è—±è—µç‚‰è—³è—²é”ç‚å‹Žï¿½"],["8fa2c2","éš†å¨„é©´"],["8fa2eb","æ½žé™‹æ¼åºéˆ©â’™ã‚‚å‰¸"],["8fa6e1","èžèž†èž‡èž‰ä¸º"],["8fa6e7","èžŒ"],["8fa6e9","èžæ½"],["8fa6ec","èž"],["8fa6f1","ç»´è‹‡èŽå§”è †èž‘è ˆèŸ¼è ‰è ‡ä¼Ÿè ‹"],["8fa7c2","è¢€",10,"è¢”è¢•"],["8fa7f2","è¤£",10,"è¤³è¤µ"],["8fa9a1","è„è†¼"],["8fa9a4","æ‘©"],["8fa9a6","ç‰Ÿ"],["8fa9a8","è‰ç›®"],["8fa9ab","è‰Žè„´è‰—"],["8fa9af","çº½è„¼"],["8fa9c1","å¿™è†½å†’é­”è°‹æŸæ¯è‰‚è‰€è‰è‰é…¶è‰™è„½è„“é•"],["8faaa1","è„•è„Œè„›è„—è†«èŽè†§è†­è„œè„™è†¯è†±è†¶è„Ÿè†´è†¸è„¡è„ è„£è„¢è‡è‡‡è†¾è‡‰"],["8faaba","è‡è‡‘è˜‘è‡“è†œè„¥è„¤è„§è„¦è‘é™ŒèŽ«æ¼ æŠ¹æ‹‡äº©å¢“æ…•å¹•è‰ƒè‰Šè‰†è„©è„«è„ªè„°è„­è“è‰•è‰‘è„®è‰›è‰ è‰è‰¢è‰¤è‰©è‰¦æ‰­æ³žè„·è„µè„ºè„¹åŠªè—è™å¼„æŒªå¥³æµ“èžè¦è£èšç³¯è„»é¸¥å“¦æ®´æ²¤å‘•"],["8faba1","è°©è„¿ç›²èŠ’è†¬èè†©è†®æ°“èŒ«è†°è†²è†·èŽ½è†µè†¹èŒ…çŒ«æ¯›é”šè‡Žè‡ˆè†¿è‡‹å ‘è‡è‡’"],["8fabbd","æ‘¹ç£¨é“†çŸ›èŒ‚å¯è’"],["8fabc5","å¢¨å¯žæœ«ç‰¡å§†æš®æœ¨å‹Ÿè‰…è‰Œè‰ˆå¸½è´¸è²Œæžšä¹ˆè•è‰–è‰’çŽ«è‰œè‰¡è‰žè‰£è‰¥æ‹§è‰§é’®ç‰›ç…¤éœ‰çœ‰æ²¡æ€’è™ç–Ÿå¥´æ‡¦æš–å†œè¢è§è¤è›è¯ºåª’æ¯æ¬§è—•å•ªå¶"],["8fb0a1","æ¶“å‚™ç«¸æ¶“å‘¬ç¬‡æ¶“æŽç¬©æ¶“ï½„è¢±æ¶“ã„¤æ–§æ¶“î†»è…æ¶“é¢å‚…æ¶”â‚¬æ¶”ä½·ç®˜æ¶”å›¦ç®²æ¶”æ°«ç®¿æ¶”ï½„é¾šæ¶”â•€å‹¾æ¶”å…¸æž„æ¶”å¤¸ç°«æµœæ ¦ç°µæµœæ¿…å‡½æµœé€›ç²Œæµ æ„ªç²´æµ æ¶—ç²»æµ â€²è™Žæµ ã„¤åŒ–æµ å˜æ€€æµ å…¸å”¤æµ å¥è±¢æµ¼â‚¬æµ¼å‚™ç´”æµ¼å œç´œæµ¼å±¼ç´¥æµ¼æ›šç´ªæµ¼æ¤¾ç´®æµ¼î†»æ€¥æµ£çŠ±æ±²æµ¼å…¸æŒ¤æµ¼é€›è“Ÿæµ¼å¥çµ¸æµ£å‚™ç¶€æµ£å¤‰ç¶ƒæµ£å±¼ç¶Šæµ£æ–¾ç¶Žæµ£æ¨¹ç¶—æµ£ï½„å§œæµ£îƒ¿ç–†æµ£å˜æ¤’æµ£é•ç„¦æµ£è½°æµ‡æµ£å¥ç·›æ¸šå‚™ç·ž"],["8fb1a1","æ¸šå‘¬ç·£æ¸šå©ç·¦æ¸šåºç·ªæ¸šæŽç·­æ¸šæ–¾ç·±æ¸šæ¬Žç·´æ¸šç‚°ç·¹æ¸šè¹­ç—‰æ¸šé€›å‡€æ¸šé—´çª˜æ¸šå¥ç¸ºæ·‡ä½·ç¹€æ·‡å—•ç¹„æ·‡å¤‰ç¹ˆæ·‡å±¼ç¹Šæ·‡å¿Žç¹æ·‡æ»€ç¹æ·‡î­å ªæ·‡è¹­è€ƒæ·‡æˆ’é éŠâ‚¬éŠä½¸â‚¬å‹«â‚¬å›§â‚¬å©‚â‚¬å±½â‚¬åº¡â‚¬æ„¬â‚¬æ’³â‚¬æ¥€â‚¬æ¨ºâ‚¬æ¶˜â‚¬æ»ƒâ‚¬æ¿†â‚¬ç‚²â‚¬ãˆ â‚¬Ñƒâ‚¬î†¼â‚¬æ¿â‚¬æ’â‚¬å†²â‚¬é›äºé‹ä½¸äº—é‹å‘­äºžé‹å©‚äº´é‹åº¡äº¼é‹æŽ‘äº¾é‹æ¥€ä»šé‹ç†·ä»©é‹ãˆ ä»¯é‹ï¹€ä»¹é‹î„ä¼ƒé‹æ¿ä¼‡éŠè¯²å€ŽéŒå†¨å€“éŒå——å€žéŒåº¡å€§éŒï¿½"],["8fb2a1","éŒæŽ‘å€±éŒæ–¿å€´éŒæ¶˜å€»éŒï¿½",4,"éŒî„å—éŒæ¿å£éŒå“„å¨éâ‚¬éå†¨å„Žéå›§å„—éåº¡å„›éæ’³å„Ÿéæ¨ºå„¨éæ¿†å„«éãˆ å„°éï¹€å„´éâ•å„»éåžå…Œéå“„å…™éŽå†¨å‰¢éŽå›§å‰¤éŽå¬ªå‰¬éŽå¶…å‰®éæ’å‰±éŽæ¥€å‰»éŽæ¶˜åŠ€éŽæ¿†åŠ„éŽï½…åŠŽéŽã„¥åŠ•éŽî…žåŠ˜éŽåžåŠ¤éŽæ‘åŠ¦éŽç¨¿åŠ°éå‚šåŽžéå¿“åŽ¯éæ›žåŽ³éæ¨ºåŽ½éã‚…å‡éæƒ§å”­éå‹«å”»éåº¡å•’éæ¿†å•žéï½…å•³éç¨¿å–“éç…Žå–šéåž®å™¦"],["8fb3a1","é‘å å™ºé‘æˆå™¿é‘æ’³åš‚é‘æ¨ºåšé‘ãˆ åš—é‘î†¼åš¥é‘å†²åš§é‘å³°åž‡é’å‚šåžé’æŽ‘åžžé’æ›žåž¨é’æ¨ºåž»é’ã„¥åŸé’æ’åŸ–é’ç…Žå¢”é“å¤Šå¢ªé“æ¥€å¢­é“æ°¬å¢±é“ç†·å¢µé“â€³å¢»é“î†¼å£é“ç¨¿å£’é”â‚¬é”å‚šå¦³é”å©‚å¦¼é”æ’³å§‡é”æ §å§‰é”æ¨ºå§Žé”æ»ƒå§¢é”ãƒ¥å§¦é”Ñƒå§±é”æ¿å§¸é”å³°å§¼é”å“„å¨€é”è—‰åª­é•å‹«åª¶é•å åª½é•å¿“å«…é•æ–¿å«‹é•æ¶˜å«“é•â€³å«¢é•ã„¥å«¨é•î„å«­é•æ¿å«³é•æ‘å«¸é•å³°å¯‘é–å†¨å¯ é–ï¿½"],["8fb4a1","é–å±½å¯«é–æ’³å¯´é–æ¶˜å¯½é–ç‚²å°‚é–ãƒ¥å°Žé–ã„¥å°’é–î‚¢å°™é–î…žå° é–æ’å°©é–ç…Žå°³é–æƒ§å´…é—å±½å´‘é—æ¬å´¨é—â€³å´³é—ãƒ¥å´¿é—î…žåµ…é—ç‘°åµ•é˜å†¨å·¼é˜å å¸‹é˜æ’³å¸žé˜æ¬å¸©é˜â€³å¸³é˜î„å¸¿é˜îˆšå¹‰é˜æ‘å¹é˜å³°å¹é˜å“„å¹—é™â‚¬é™å‘­å¼¿é™æŽ‘å½„é™æ›žå½‹é™æ¿†å½é™çŠ²å½Ÿé™Ñƒå½½éšå‚šæ‚¡éšæ°¬æ‚ºéšÑƒæƒƒéšî„æƒŽéšåžæƒ”éšé›æ†™é›å‹«æ†žé›å¶…æ†¦é›ç‚²æ†¿é›ã‚…æ‡„é›Ñƒæ‡‡é›î‚¢æ‡Žé›î†¼æ‡˜é›ï¿½"],["8fb5a1","éœä½¸æ‹‘éœå‘­æ‹¡éœå¤Šæ‹²éœæˆæŒ„éœæ §æŒéœç†·æŒ•éœï¹€æŒ§éœâ•æŒ­éœî…žæŒ³éœåžæŒ¿éœç‘°æ„éœè¯²æ’éå——æ³éå¶…æ¸éçŠ²æ‘¢éî„€æ‘¨éè·ºæ‘·éæƒ§æ‘½éžâ‚¬éžä½¸æ”¨éžå æ”­éžå±½æ”³éžåº¡æ•ƒéžî„æ•¨éžæ’æ•¸éžè·ºæ•¾éžç…Žæ–€éŸä½¸æ™£éŸå¤Šæ™©éŸå¶…æ™²éŸæˆæ™¿éŸæ°¬æšƒéŸç‚²æšŠéŸâ€³æšéŸï¹€æš±é ä½¸æºé å——æž…é åº¡æžé æˆæž“é æ’³æž–é æ¥€æžºé ã‚…æŸ‡é æ’æŸ¨é¡ä½¸æ¢¼é¡å——æ£„é¡å¬ªæ£‡é¡åº¡æ£é¡ï¿½"],["8fb6a1","é¡æ’³æ£—é¡æ¨ºæ£é¡ç‚²æ£¦é¡â•æ¤‚é¡åž®æ§„é¢å æ§‰é¢ï¿½",5,"é¢æ¬æ§µé¢æ¿æ§¼é¢é›æ¨‚é¢ç‘°æ¨†é¢ç…Žæ¨ˆé¢åž®æª§é£ä½¸æª­é£å‹«æª°é£å¤Šæªµé£å¶…æª¹é£æ–¿æ«ˆé£çŠ²æ«‹é£ãˆ æ«é£ï¹€æ«“é£î…žæ«™é£åžæ«œé£é›æ®‘é¤å‘­æ®˜é¤å¬ªæ®žé¤æ›žæ®­é¤æ°¬æ®±é¤ç‚²æ®¶é¤ï¹€æ¯€é¤ã„¥æ¯„é¤î‚¢æ¯ˆé¤î…žæ¯é¤å†²æ¯žé¤æƒ§æ³¤é¥å¤Šæ³­é¥å¬ªæ´€é¥æ„¬æ³´é¥å¶…æ´é¥æ»ƒæ´•é¥ç†·æ´é¥ï¿½",4,"é¥åžæ´¬é¥ï¿½"],["8fb7a1","é¥è·ºæµ„é¦ä½¸æ¸¹é¦å›§æ¹‚é¦å±½æ¹‹é¦æ›žæ¹šé¦æ¶˜æ¹žé¦çŠ²æ¹¤é¦ï½…æ¹¦é¦ãƒ¥æ¹¬é¦î„æ¹°é¦î†¼æ¹³é¦å†²æ¹¸é¦è—‰æº‡é¦åž®æ½Šé§å——æ½“é§å¶…æ½šé§ãˆ æ½µé§Ñƒæ½¹é§î‚¢æ¾€",4,"é§å†²æ¾Šé§é›æ¾é§ç‘°æ¾“é§è¯²æ¾•é§æƒ§ç€¬é¨å†¨ç€¸é¨æ–¿ç„é¨æ¬ç‡é¨æ»ƒçŠé¨ç‚²çé¨â€³ç‚é¨Ñƒç—é¨â•ç›é¨ç¨¿ç²é©å›§ç„¾é©å±½ç…†é©æ›žç…—é©ç‚²ç… é©ï¹€ç…£é©â•ç…­é©æ¿ç…¹é©è·ºç…¾é©è—‰ç†…é©åž®çˆŸé«å‹«çˆ¤é«å¤Šç…›"],["8fb8a1","é«å±½çˆ«é«æ¶˜ç‰‰é«ç†·ç‰‹é«ï¹€ç‰•é«î…žç‰ªé«ç‘°ç‰½æ¿‰å¤Šî”‘æ¿‰å¶…î””æ¿‰æ„¬î”šæ¿‰ç†·ã€€æ¿‰ã‚…Â¨æ¿‰ã„¥ã€Œæ¿‰ç…Žã€‘æ¾§â‚¬æ¾§ä½¸î•¬æ¾§å î•®æ¾§å©‚î•±æ¾§å¶…î•´æ¾§æ„¬î•¹æ¾§æ §î–‚æ¾§çŠ²â…°æ¾§ãˆ â…µæ¾§â•â’ˆæ¾§æ’î—‰æ¾§ç…Žî—‡æ¾¹å î—’æ¾¹åº¡î—•æ¾¹æŽ‘î—™æ¾¹æ §î—Ÿæ¾¹æ¿†ï¼æ¾¹ãˆ ï¼‰æ¾¹å†²î˜ªæ¾¶å——î˜°æ¾¶å±½î˜·æ¾¶æ’³î˜¹é“ä½¸î™‚æ¾¶â€³ãƒæ¾¶ã‚…ãˆæ¾¶îˆšãæ¾¶å†²ã•æ¾¶è·ºãŸæ¿‚å†¨îš‹æ¿‚æŽ‘îš˜æ¿‚æ¬îš æ¿‚æ¿†îš£æ¿‚ç†·ã‚¡æ¿‚ï½…ã‚«æ¿‚ï¿½"],["8fb9a1","æ¿‚îˆšã‚²æ¿‚é›ã‚¶æ¿‚ç‘°ã‚»æ¿‚ç…Žî›°æ¿¡å±½î›³æ¿¡æŽ‘î›ºæ¿¡æ¥€îœ„æ¿¡ã‚…Î—æ¿¡î…žÎžæ¿¡îˆšÎ æ¿¡å†²Î¨æ¿¡å“„îžˆæ¿®ä½¸îˆæ¿®å‹«îæ¿®å©‚î’æ¿®æŽ‘î¢æ¿®ç‚²î¤æ¿®ï½…Ð“æ¿®ÑƒÐœæ¿®îˆšÐŸæ¿®æ’Ð¢æ¿®å³°â–ˆæ¿žå‹«â–½æ¿žå¶…â—£æ¿žæŽ‘ã€’æ¿žç‚²ÇŽæ¿žã‚…Ä›æ¿žã„¥Ã­æ¿žî…žÃ²æ¿ å‹«ï¹¨æ¿ å›§ï¹«æ¿ å±½îŸ®æ¿ æ›žîŸ»æ¿ ï½…â”æ¿ Ñƒâ”‰æ¿ å³°â”–æ¿ è¯²â”šæ¿¯å¬ªçæ¿¯æ’³ç¤æ¿¯æ¬çªæ¿¯ç‚²ç°æ¿¯çŠ²î€æ¿¯Ñƒî€‹æ¿¯åžî€‘æ¿¯å†²î€”æ¿¯ç¨¿î€™æ¿¯è¯²î€ž"],["8fbaa1","ç€šå‹«ç•ç€šå ç¡ç€šæ°¬ç³ç€šçŠ²î¢ç€šî„î«ç€šé›î³ç€šè—‰ç‘Žç€£ä½¸ç‘˜ç€£æ¥€îƒç€£æ¬ç‘³ç€£æ¿†î‚¼ç€£ãƒ¥îƒˆç€£ç¨¿ç“‰ç€›å¬ªç“•ç€›æŽ‘ç“¥ç€›ç‚²î„¡ç€›î†¼î„¨ç€›ç…Žî„¶ç€›æƒ§î„¸ç€¹ä½¸ç•¡ç€¹å——ç•©ç€¹åº¡ç•°ç€¹æˆç•µç€¹æ–¿ç•ºç€¹ã„¥î†€ç€¹î„€î†„ç€¹îˆšî†ˆç€¹æ’î†Žç€¹å“„î†“ç€µâ‚¬ç€µä½¸ç˜ç€µå¿“ç˜±",4,"ç€µçŠ²î‡¤ç€µåžî‡©ç€µè—‰çš©çæ¥€ç›€çç†·åŸƒçï¹€ç™Œçî‚¢è‰¾çî†¼éžçæ’æš—çè·ºç“çžæ°¬ç–çžãˆ ä¿çžÑƒæŠ¥çžï¿½"],["8fbba1","çžî…žå‘çžæ‘é’¡çžå“„è¢«çžç…Žè‹¯å®€å›§çŸ†å®€å©‚çŸŽå®€æŽ‘çŸŸå®€ç†·çŸ¤å®€ãˆ çŽ»å®€ï¹€å‹ƒå®€æ’æ³Šå®€é›åŸ å®„å¤Šç¡§å®„æŽ‘ç¢€å®„æ¥€é’žå®„åžå·¢å®„æ‘ç£¥å®•å——ç£µå®•æŽ‘ä¼ å®•ï½…æå®•ï¹€æ£å®•åžåˆ›å®•ç‘°å”‡å®•åž®ç¥©å®“å†¨ç¥®å®“å ç¦ƒå®“æˆç¦‰å®“å©‚ç¦‘å®“çŠ²æ€ å®“ãˆ ä¸¹å®“î„æ·¡å®“æ¿å€’å®“å“„ç¨»å®“åž®ç§®å®¥å†¨ç§·å®¥å©‚ç¨ˆå®¥æ’³ç¨Šå®¥æ›žç¨’å®¥æ¶˜ç¨›å®¥çŠ²é”­å®¥î‚¢æ ‹å®¥æ‘é™¡å®¥ç‘°ç©¬å®¸å›§ç©»å®¸æ„¬ç©¾å®¸æ¨ºçª“å®¸çŠ²ç­"],["8fbca1","å®¸â•çŠ¯å®¸ç‘°ç«´ç”¯å›§ç¬‰ç”¯æŽ‘ç¬–ç”¯æ›žç¬œç”¯ç†·ç¬­ç”¯î†¼è¾…ç”¯æ’å‚…ç”¯æƒ§ç®£éªžæ„¬ç®Ÿéªžæˆç®¹éªžæ¨ºç®¾éªžæ»ƒç¯‚éªžã„¥èº¬",4,"éªžæ¿ç°šæ´å¬ªç°¬æ´ãˆ æ°¦æ´ãƒ¥é…£æ´î„å«æ´åžæ’¼æ´è—‰å£•æ´åž®ç²å¯¤å±½ç²™å¯¤åº¡ç²¦å¯¤æŽ‘ç²©å¯¤æ›žç²¶å¯¤ç‚²äº’å¯¤î‚¢ç´“å¯®å——ç´˜å¯®å ç´Ÿå¯®æ¬ç´²å¯®æ¿†è‚Œå¯®ãˆ è¿¹å¯®ã‚…ç»©å¯®î‚¢æ£˜å¯®î†¼åŠå¯®æ‘çº§å¯®è¯²å†€å¯®åž®çµ¸è¤°å‹«çµ½è¤°å›§ç¶…è¤°æ„¬ç¶Œè¤°æ¨ºç¶“è¤°çŠ²å‰‘è¤°ã‚…æ¶§"],["8fbda1","è¤°îˆšè®²è¤°æ‘é™è¤°ç¨¿èƒ¶è¤°è—‰éª„å¯°å¤Šç·§å¯°å¿“ç·°å¯°æ»ƒç··å¯°ãˆ æ™¶å¯°î‚¢å…¢å¯°î„€è­¦å¯°æ¿é¢ˆå¯°ç¨¿ç¸¿è¹‡å›§ç¹„è¹‡å¤Šç¹ˆè¹‡ï¿½",4,"è¹‡ç‚²ä¿Šè¹‡ãˆ å¡è¹‡â•å¼€è¹‡î„€å‡¯è¹‡î†¼åˆŠè¹‡æ’ç è¹‡è·ºäº¢è¹‡å…¼â‚¬å›¨â‚¬å©ƒâ‚¬å¶†â‚¬æ’´â‚¬æ—€â‚¬æ¥â‚¬æ¨»â‚¬æ°­â‚¬ç†¸â‚¬ã‚†â‚¬î…Ÿâ‚¬è™«â‚¬åž«äºéŽ­å›¨äºªéŽ­å¤‹äº´éŽ­æˆžä»ˆéŽ­æ ¨ä»éŽ­æ¿‡ä»­éŽ­Ñ„ä¼‡éŽ­ç‚¬ä¼©éŽ®å‚›å€–éŽ®å Ÿå€žéŽ®åº¢å€¯éŽ®æ’´å€³éŽ®æ¨»å€½éŽ®ç‚´å„éŽ®ã‚†å‰éŽ®ã„¦å˜éŽ®è¾¨å¡"],["8fbea1","éŽ®ç»˜å©éŽ¯å‚›å„ŽéŽ¯å Ÿå„”éŽ¯å©ƒå„–éŽ¯åº¢å„šéŽ¯æ—€å„ éŽ¯æ¬å„§éŽ¯æ¿‡å„ªéŽ¯ãˆ¡å„±éŽ¯å‰å…ŠéŽ¯å‘Šå…—éŽ¯èŠ¥å‰›éŽ°å›¨å‰¨éŽ°å±¾å‰±",4,"éŽ°æ ¨å‰¹éŽ°æ¬åŠ€éŽ°ç‚´åŠ‰éŽ°î…åŠ”éŽ°ç‰ˆåŠšéŽ°åž«åŠ§éŽ°é”‹åŠ°éŽ±ä½¹åŽ–éŽ±å—˜åŽœéŽ±ç‚´åŽ¾éŽ±î„å¢éŽ±å‘Šå‡éŽ±å…¼å™éŽ²â‚¬éŽ²ä½¹å”­éŽ²å‹¬å”»éŽ²å¶†å•‹éŽ²æ’´å•‘éŽ²æ¨»å•˜éŽ²æ¿‡å•›éŽ²çŠ³å•£éŽ²ã„¦å•°éŽ²î…Ÿå–éŽ²è§„å––éŽ³â‚¬éŽ³ä½¹å™¦éŽ³åº¢å™ºéŽ³æ›Ÿåš‹éŽ³æ¿‡åšéŽ³ç†¸åš’éŽ³ãˆ¡åš™éŽ³â•‚åš—"],["8fbfa1","éŽ³î„åšŸéŽ³îˆ›åž‡éŽ´å†©åžŠéŽ´å›¨åžžéŽ´æ›Ÿåž³éŽ´çŠ³åž»éŽ´ï½†åŸ€éŽ´â•‚åŸ†éŽ´è§„åŸ¥éŽµå‚›å¢éŽµå‹¬å¢•éŽµå±¾å¢£éŽµæˆžå¢¥éŽµæ—€å¢«éŽµæ°­å¢±éŽµã‚†å£„éŽµîˆ›å£‹éŽµçƒ˜å£—éŽ¶å¶†å¦¿éŽ¶å¿”å§éŽ¶ï¸½å§©éŽ¶è™«å§¸éŽ¶é”‹å§¾éŽ¶ç‚¬å¨éŽ·å‹¬å«€éŽ·æ›Ÿå«‹éŽ·æ°­å«ªéŽ·å‰å«¶éŽ·å…¼å«¿éŽ¸å†©å¯—éŽ¸å©ƒå¯¢éŽ¸å¶†å¯ªéŽ¸æ’´å¯²éŽ¸æ¨»å°’éŽ¸î…å°›éŽ¸åž«å°ªéŽ¸è§„å°²éŽ¹ä½¹å´…éŽ¹å†©å´‰éŽ¹å—˜å´éŽ¹å¬«å´•éŽ¹æŽ“å´œéŽ¹æ—€å´¢éŽ¹æ¶™å´¶éŽ¹ï¸½å´¿éŽ¹î…Ÿåµ„éŽ¹å­˜åµ‰"],["8fc0a1","éŽ¹å‘Šåµ“éŽ¹èŠ¥åµ–éŽºå‚›å·¹éŽºå›¨å¸„éŽºæ„­å¸žéŽºæ›Ÿå¸£éŽºæ°­å¸ªéŽºã‚†å¸µéŽºî…Ÿå¹ƒéŽºîˆ›å¹—éŽ»ä½¹å¼²éŽ»å Ÿå¼¾éŽ»æˆžå½„éŽ»æ—€å½†éŽ»æ»„å½”éŽ»ãƒ¦å½§éŽ»î„å½¶éŽ»è™«å½½éŽ»å‘Šå¾†éŽ¼å¤‹æ‚éŽ¼æ„­æ‚žéŽ¼æ—€æ‚©éŽ¼ç‚´æ‚¹éŽ¼ãˆ¡æ‚¿éŽ¼ãƒ¦æƒ„éŽ¼î…æƒŽéŽ¼ç‰ˆæƒ–éŽ¼èŠ¥æƒªéŽ½å¬«æ†¦éŽ½æˆžæ†­éŽ½æ’´æ†¯éŽ½æ°­æ†¶éŽ½æ»„æ†¹éŽ½ç†¸æ†¼éŽ½â„ƒæ‡€éŽ½î…Ÿæ‡—éŽ½å­˜æ‡ŸéŽ½èŠ¥æ‹éŽ¾å›¨æ‹¸éŽ¾æ„­æ‹ºéŽ¾æ¨»æŒ‹éŽ¾æ¶™æŒéŽ¾ç†¸æŒ•éŽ¾ï½†æŒ¦éŽ¾ã„¦æŒ°éŽ¾è™«æŠéŽ¾ç‚¬æ’"],["8fc1a1","éŽ¿å‹¬æ²éŽ¿å©ƒæµéŽ¿å±¾æ¸éŽ¿æ„­æ¼éŽ¿æ›Ÿæ‘‹éŽ¿ã‚†æ‘œéŽ¿â•‚æ‘¢éŽ¿î…Ÿæ‘ªéŽ¿åž«æ‘²éŽ¿ç»˜æ‘½é€ä½¹æ”§é€å Ÿæ”­é€å©ƒæ”ºé€æ’´æ•‚é€æ ¨æ•Šé€æ¶™æ•’é€ç†¸æ•˜é€ï¸½æ•¥é€î†½æ•±é€çƒ˜æ•¿é€èŠ¥æ™éå›¨æ™§éæ„­æ™µéæ—€æš‰éçŠ³æš“éî‚£æš«éèŠ¥æ¹é‚å‘®æžˆé‚æŽ“æž™é‚æ¨»æž¬é‚çŠ³æžºé‚ï¸½æŸˆé‚å‰æŸé‚å­˜æŸ¨éƒå‚›æ£ƒéƒå¤‹æ£Šéƒæ„­æ£“éƒæ ¨æ£™éƒç†¸æ£¸éƒå‰æ£¿éƒåž«æ¤†éƒç‚¬æ¤é„â‚¬é„å‹¬æ§‡é„å¤‹æ§é„æˆžæ§–é„æ›Ÿæ§šé„ï¿½"],["8fc2a1","é„ç‚´æ§¨é„ãˆ¡æ§ªé„ã‚†æ§®é„â•‚æ§³é„î‚£æ§µé„î†½æ§¹é„è¾¨æ§¼é„è§„æ¨‚é…â‚¬é…å‘®æª°é…å©ƒæª¶é…æˆžæª¸é…æ¥æ«‚é…æ¬æ«…é…æ»„æ«Šé…â„ƒæµ•é…î…æ«•é…î„æ«¨é…è™«æ«Ÿé…æŒŽæ«¡é…å‘Šæ«£é…ç»˜æ®Œé…å…¼æ®é†å±¾æ®Ÿé†æ„­æ®¥é†æ¬æ®®é†æ¶™æ®°é†ç†¸æ®¸é†ã‚†æ¯‰é†è¾¨æ¯‘é†åž«æ¯£é†æŒŽæ³™é‡å‚›æ³é‡å Ÿæ³´é‡åº¢æ´€é‡æ—€æ´“é‡ç†¸æ´¦é‡î‚£æ´­é‡î†½æµéˆå‘®æ¸¿éˆåº¢æ¹éˆæ¬æ¹éˆçŠ³æ¹¤éˆè™«æº‡é‰å‘®æ½Žé‰å Ÿæ½“é‰æ—€æ½Ÿé‰ï¿½"],["8fc3a1","é‰ï¸½æ½¿é‰î†½æ¾Šé‰èˆµæ¾”é‹ä½¹ç€¯é‹åº¢ç€¼é‹æˆžç€é‹æ ¨ç…é‹æ¬çˆé‹ç‰ˆç¡é‹å‰ç¥é‹ç»˜ç±é‹èŠ¥ç…¿éŒâ‚¬éŒå‚›ç„¹éŒå‘®ç„¾éŒå¤‹ç…‰éŒæ¥ç…“éŒæ»„ç…›éŒï¸½ç…±éŒå‰ç…»éŒé”‹î”—éæ—€ç‰‚éæ¿‡ç‰Šéã„¦ç‰•éî„ç‰ éîˆ›ç‰¥éè¾¨ç‰«éç»˜ç‰½å¦—å‹¬î”Šå¦—å©ƒî”‘å¦—æ›Ÿî”œå¦—æ¨»î” å¦—î‚£â€˜",4,"å¦—åž«ã€å¦—çƒ˜ã€å¦—å…¼î•§å§Šå‹¬î•«å§Šå Ÿî•»å§Šæ¨»î•¿å§Šæ»„â…°å§Šï½†â…´å§Šâ•‚â…¹å§Šî†½â’‰å§Šç»˜î—Šå¦«å Ÿî—‘å¦«ï¿½"],["8fc4a1","å¦«æ„­î—–å¦«æ’´î—›å¦«æ¬î—¡å¦«æ¿‡ï¼…å¦«ã„¦ï¼Šå¦«î‚£ï¼Œå¦«î…Ÿï¼å¦«è¾¨ï¼•å¦«èˆµï¼›å¦«å…¼ï¼å¦žå—˜î˜®å¦žå©ƒî˜µå¦žæˆžî˜¸å¦žæ ¨î˜¼å¦žè¾¨ã“å¦žåž«ã˜å¦žç»˜îš‡å¦¤å‘®îšŽå¦¤åº¢îšœå¦¤æ¶™ã‚£å¦¤ã‚†ã‚¥å¦¤ï¸½ã‚¨å¦¤â•‚ã‚¬å¦¤ç‰ˆã‚±å¦¤å‰ã‚ºå¦¤ç»˜ã‚¿å§’â‚¬å§’å¶†î›·å§’æ ¨î›½å§’â„ƒÎ•å§’ï¸½Î˜å§’î‚£Îå§’îˆ›Î¨å§’å‘Šîž†å§’å…¼îŠå¦²å Ÿî–å¦²æ ¨îœå¦²ãˆ¡Ð”å¦²î†½Ðå¦²è¾¨Ð¡å¦²åž«Ð¬å¦¯â‚¬å¦¯ä½¹â–‹å¦¯å¿”â˜‰å¦¯æ›ŸîŸ€å¦¯æ¿‡îŸ†å¦¯ã‚†Ã¨å¦¯ç‰ˆÃº"],["8fc5a1","å¦¯å­˜Çšå¦¯ç»˜Åˆå¦¯æŒŽï¹¨å§—å—˜îŸ§å§—å©ƒîŸ¬å§—æ„­îŸ¯å§—æŽ“îŸ³å§—æ ¨îŸ¸å§—ã‚†â”ƒå§—î…â”å§—è™«â”šå¦¾ä½¹çŒå¦¾å—˜ç“å¦¾å¤‹ç˜å¦¾æˆžç©å¦¾æ¿‡ç®å¦¾ç†¸î€„å¦¾î‚£î€Žå¦¾ç‰ˆî€å¦¾å­˜î€œå¦¾ç‚¬î€žå¨…å—˜ç˜å¨…å Ÿçœå¨…æ„­ç¨å¨…æ›Ÿç«å¨…æ»„ç´å¨…ã‚†î¤å¨…î„î­å¨…è¾¨î¯å¨…å…¼îºå¨†å‚›ç‘‘å¨†å—˜ç‘–å¨†å¤‹ç‘¥å¨†æ„­ç‘§å¨†æ¥ç‘³å¨†ç‚´î‚¿å¨†ã„¦îƒ†å¨†î„îƒŠå¨†åž«îƒ‘å¨†ç»˜îƒšå§å—˜ç““å§å¶†ç“›å§æ ¨ç“¨å§æ¿‡ç“²å§Ñ„î„¤å§î†½î„©å§åž«î„¶"],["8fc6a1","å§ç‚¬ç•Ÿå¨ˆå‘®ç•»å¨ˆæ¶™ç–…å¨ˆçŠ³î…¹å¨ˆï½†î…¿å¨ˆâ•‚î†ƒå¨ˆî…Ÿî†…å¨ˆç‰ˆî†å¨ˆè§„î†”å¨ˆç‚¬ç˜å§£å‹¬ç˜”å§£å±¾ç˜±å§£æ°­î‡–å§£ï½†î‡›å§£Ñ„î‡£å§£è¾¨î‡¬å§£è§„î‡´å§˜å‚›çš å§˜å‘®çš¦å§˜å¶†çš«å§˜æ„­çš°å§˜æ¬ç›å§˜ï¸½å“€å§˜ã„¦è‰¾å§˜î†½ä¿ºå§˜åž«å²¸å§˜çƒ˜ç›Žå§˜æŒŽçœ¾å§¹å¬«ç„å§¹å¿”çŠå§¹æ—€ç“å§¹æ¶™ç–å§¹î‚£æ¯å§¹îˆ›è´å§¹èˆµå¤‡å§¹è§„è¢«å¨Œå‘®çŸ„å¨Œå›¨çŸ‡å¨Œæ—€çŸ”å¨Œæ¥çŸ˜å¨Œæ»„çŸ¡å¨Œç‰ˆè†Šå¨Œå­˜ç¡žå¨‰å—˜ç¡©å¨‰å¿”ç¡±å¨‰æˆžç¡³å¨‰æ—€ç¡¸"],["8fc7a1","å¨‰æ°­ç¡¿å¨‰çŠ³åŽ‚å¨‰â•‚å€¡å¨‰î„é’žå¨‰å‰ç‚’å¨²å‹¬ç£­å¨²å©ƒç£¶å¨²å¿”ç£»å¨²æ’´ç¤†å¨²ï¸½æ£å¨²ã„¦æŠ±å¨²î†½ç–®å¨²è¾¨åž‚å¨²å…¼çº¯å¨´æ¥ç¦å¨´ç†¸æ€ å¨´ãƒ¦æŽ¸å¨´îˆ›è›‹å¨´å…¼ç§±å¨‘å›¨ç¨‡å¨‘æŽ“ç¨Šå¨‘æ ¨ç¨å¨‘æ¨»ä¸¢å¨‘î„æ´žå¨‘é”‹è±†å¨‘èŠ¥çŠŠå¨£å‹¬ç©²å¨£å©ƒç©¾å¨£å¿”çªŽå¨£æ¶™çª›å¨£ç†¸çª¢å¨£ãˆ¡ä¼å¨£â•‚çŸ¾å¨£ç‰ˆåå¨£èˆµèŠ³å¨“â‚¬å¨“å‹¬ç¬§å¨“ãˆ¡æŠšå¨“å‰ä»˜å¨“è§„å¯Œå¨“å…¼ç®˜å©€å‘®ç®žå©€å¤‹ç®£å©€å¿”ç®²å©€æŽ“ç®µå©€æ—€ç®ºå©€æ»„ç¯€å©€ï¿½"],["8fc8a1","å©€ãˆ¡æ¢—å©€ã„¦é’©å©€ç»˜è‡å©§å¶†ç°±å©§æ¬ç±‚å©§Ñ„æ¶µå©§î†½ç½•å©§è™«å¤¯å©§æŒŽç²ˆå©Šä½¹ç²Œå©Šå›¨ç²“å©Šå©ƒç²›å©Šåº¢ç²¡å©Šî‚£ç”»å©Šî†½è¿˜å©Šç»˜å”¤å©•å‹¬ç´™å©•å©ƒç´å©•å¶†ç´ªå©•æ¨»ç´°å©•æ¶™é¸¡å©•â•‚å‰å©•îˆ›åŠå©•è™«çº§å©•ç»˜æŠ€å©•î…Ÿç¶‡å¨¼æˆžç¶Šå¨¼æ’´ç¶å¨¼æ¬ç¶’å¨¼æ¿‡ç¶–å¨¼â„ƒèˆ°å¨¼ã„¦æµ†å¨¼èŠ¥éª„å©¢å†©ç·¡å©¢å Ÿç·¥å©¢å±¾ç·§å©¢æ„­ç·¬å©¢æ’´ç·®å©¢æ ¨ç·´å©¢ç†¸ç·ºå©¢ãƒ¦ç›å©¢Ñ„é²¸å©¢î†½è­¦å©¢ç‰ˆé•œå©¢èˆµç‚¯å©µå‘®ç¹ƒå©µå Ÿç¹†"],["8fc9a1","å©µæ°­ç¹›å©µã„¦å’¯å©µç‰ˆåº·å©µè§„è€ƒå©µç•Œâ‚¬â‚¬éŽå‘¯â‚¬å—™â‚¬å›©â‚¬å¶‡â‚¬æ¥ƒâ‚¬çŠµâ‚¬ï½‡â‚¬îˆœâ‚¬å¯¸â‚¬é£Žâ‚¬åœ­â‚¬è‚©äº™éå‹­äºªéå¤Œäº°éå¬¬ä»ˆéæ› ä»¢éç‚µäº·éã‚‡ä»´éî„‚ä¼„éç”µä¼“éå‰§å€Žéå‘¯å€–éï¿½",4,"éæ¶šå†éî‚¤å˜éè¾©åžéé£Žå„•é‘æˆ å„žé‘æ—‚å„ é‘æ «å„¤é‘æ»…å„°é‘è™¹å‰",4,"é’å¬¬å‰¬é’å¿•åŠ„é’çŠµåŠ”é’î… åŠ˜é’æ‰®åŠšé’å“¥åŽ‘é“å‘¯åŽ—é“å›©åŽžé“å¬¬åŽ«é“æŽ”åŽ³é“æ°±åŽ¹é“ç‚µåŽ¾"],["8fcaa1","é“ã„§å‚é”â‚¬é”å‘¯å”¶é”å²€å•‹é”æ°±å•—é”çŠµå•Ÿé”îˆœå•ºé”èŒ¬å–…é”è™¹å–›é•â‚¬é•ä½ºå™­é•å¬¬å™·é•æ’¶åšƒé•æ¬‘åš‰é•æ»…åš«é•å‰§åžé–å›©åžé–å¤Œåžžé–æ¥ƒåž°é–æ¿ˆåž·é–ã‚‡åŸ†é–îˆœåŸ“é–å“¥åŸžé—ä½ºå¢é—å†ªå¢”é—åº£å¢¢é—æ„®å¢¦é—æ› å¢«é—æ°±å¢±é—ç‚µå¢µé—ï½‡å¢¾é—î‚¤å£†é—îˆœå£‰é—é£Žå£é—è¤å£–é—è·¨å¦±é˜å¤Œå¦½é˜åº£å§„é˜æ¶šå§©é˜î… å§°é˜è¾©å§¶é˜å‰§åª®é™å›©åªºé™å²€å«Šé™æ «å«Žé™ç†ºå«¢é™å´‡å«¶é™è™¹å«½"],["8fcba1","é™å‰§å¯•éšå‹­å¯˜éšå›©å¯¢éšå¶‡å¯¬éšæ’¶å¯´éšæ¬‘å°€éšãˆ¢å°‹éšÑ…å°éšî„‚å°¡éšèŒ¬å°©éšè™¹å°°éšç•Œå´ˆé›å¶‡å´˜é›æŽ”å´ é›æ¨¼å´«é›ç‚µå´¯é›çŠµå´·é›Ñ…å´ºé›î‚¤å´¿é›î†¾åµ‚é›è¾©åµŽé›åœ­åµ“éœâ‚¬éœä½ºå·¸éœå‘¯å·»éœåº£å¸Žéœæ’¶å¸Ÿéœæ¥ƒå¸¢éœæ»…å¸ªéœç†ºå¸¬éœãˆ¢å¸´éœï¸¾å¸¾éœî‚¤å¹éœç”µå¹éœåœ­å¹–éœç•Œå¹™éå‘¯å¼³éå¤Œå¼¸éå²€å¼¿éæŽ”å½„éæ «å½Šéæ¿ˆå½™éï½‡å½ŸéÑ…å½¥éå¯¸å½½éé£Žå¾†éè™¹å¾Žéï¿½"],["8fcca1","éè·¨æ‚éžä½ºæ‚‡éžå›©æ‚éžæˆ æ‚®éžæ¶šæ‚¿éžï¸¾æƒƒ",9,"éžåœ­æ†–éŸå†ªæ†šéŸå—™æ†žéŸå¬¬æ†¤éŸæˆ æ†­éŸæ¥ƒæ†¹éŸãˆ¢æ‡„éŸÑ…æ‡†éŸî‚¤æ‡ŽéŸî†¾æ‡•éŸèŒ¬æ‹ƒé ä½ºæ‹é å—™æ‹ é å¤Œæ‹¸é æ„®æ‹ºé æŽ”æŒŠé æ¬‘æŒŒé æ»…æŒ“é çŠµæŒ•é ï½‡æŒ¦é ã„§æŒ¬é î†æŒ®é î†¾æŒ´é è¾©æŒ·é ç”µæé è¤æ’é¡å ¢æ²é¡å²€æ»é¡æ’¶æ‘Œé¡æ°±æ‘é¡ç‚µæ‘•é¡ã‚‡æ‘ é¡î†æ‘£é¡îˆœæ‘¯é¡è™¹æ‘¶é¡è‚©æ‘½é¢ï¿½"],["8fcda1","é¢æŽ”æ•„é¢æ¥ƒæ•”é¢ï¼„æ•œé¢Ñ…æ•¥é¢î†æ•®é¢å‰æ•¼é¢ç•Œæ–é¢è·¨æ™™é£å†ªæ™£é£å ¢æ™­é£æ„®æ™µé£æ¥ƒæšˆé£ç†ºæš‹é£îˆœæš é£ï¿½",5,"é¤ä½ºæž€é¤æ„®æž“é¤æ’¶æž™é¤æ¬‘æž©é¤ãˆ¢æž»é¤å¯¸æŸ¡é¤è·¨æ¢¹é¥ä½ºæ¢½é¥å—™æ£‡é¥åº£æ£Œé¥æ¥ƒæ£žé¥ç†ºæ£¤é¥ï¼„æ£¨é¥Ñ…æ£³é¥î†¾æ£·é¥è¾©æ¤†é¦â‚¬é¦å‚œæ§‚é¦å‹­æ§†é¦å ¢æ§‰é¦å²€æ§’é¦æŽ”æ§—é¦æ› æ§šé¦æ¬‘æ§¢é¦æ»…æ§¤é¦ç‚µæ§ªé¦ãƒ§æ§®é¦â•ƒæ§¶é¦èŒ¬æ§¼é¦ç”µæ¨ƒé¦ï¿½"],["8fcea1","é¦è™¹æ¨‡é§å©„æª§é§ä½ºæª­é§å‹­æª¯é§å¤Œæªµé§æ› æ«ƒé§ç†ºæ«Žé§ãƒ§æ«—é§î†¾æ«™é§è¾©æ«žé¨ä½ºæ®”é¨å²€æ®Ÿé¨æ› æ®¯é¨æ»…æ®±é¨ç†ºæ®¸é¨ï¿½",6,"é¨î†æ¯‰é¨ç•Œæ³šé©å‘¯æ³¬é©å¬¬æ³´é©åº£æ´ˆé©æ¬‘æ´œé©ï¸¾æ´¦é©î„‚æ´¶é©è¾©æµ‚é©åœ­æµ–éªâ‚¬éªå—™æ¹‚éªåº£æ¹Œéªæ—‚æ¹‘éªæ¥ƒæ¹™éªæ°±æ¹éªãˆ¢æ¹ªéªî… æ¹²éªîˆœæ¹¸éªç”µæ¹ºéªåœ­æº„éªå‰§æ½…é«å‘¯æ½Œé«å©„æ½”é«åº£æ½–é«æŽ”æ½ é«æ¥ƒæ½¨é«ç‚µæ½«é«çŠµæ½°"],["8fcfa1","é«ã‚‡æ½·é«î†æ½¿é«æ‰®æ¾†é«å´‡æ¾Šé«è™¹æ¾–é¬â‚¬é¬å‹­ç€¸é¬å¶‡çé¬æ› çƒé¬æ°±çé¬ãˆ¢ç–é¬î†çé¬îˆœç¡é¬ç”µç³é­å†ªç„¿é­æˆ ç…‰é­æ› ç…“é­ç‚µç…™é­çŠµç… é­ï¸¾ç…ªé­î„‚ç…±é­è¾©ç…·é­å“¥ç†é®å‘¯çˆ¢é®å¤Œçˆ«é®åº£çˆ²é®æ¿ˆç‰Žé®ãˆ¢ç‰é®î… ç‰£é®æ‰®ç‰­é®é£Žî”ˆçº­å‹­î”Œçº­å ¢î”‘çº­åº£î”—çº­æ»…î”£çº­çŠµã€€çº­ï½‡Â·çº­ã„§â€”çº­î†¾ã€Žçº­å‰§î•¯çº°å¿•î•¹çº°æ¨¼â…°çº°æ¿ˆî–ƒçº°ç†ºâ…³çº°ã„§î§çº°î… î«çº°è¾©â’‰çº°ï¿½"],["8fd0a1","çº°è¤â’”çº°è·¨î—Œçº¾å ¢î—Žçº¾å²€î—“çº¾æŽ”î—˜çº¾æ› î—›çº¾ã‚‡î— çº¾ç†ºã€€çº¾ï¼„ï¼†çº¾î†ï¼’çº¾å´‡î˜¥çº¾å‰ï¼—çº¾è™¹ï¼›çº¾è·¨î˜«ç»€å²€î˜µç»€æ°±î™ç»€ç‚µî™„ç»€çŠµã…ç»€Ñ…ã‰ç»€î… ã‘ç»€å¯¸ã•ç»€è¤ãç»€è·¨îš‰ç»å‘¯îš‹ç»å©„îšç»å¿•îš–ç»æ—‚îšç»æ¶šîš¡ç»Ñ…ã‚©ç»î‚¤ã‚²ç»åœ­ã‚»ç»è‚©ã‚¾ç»‚å¬¬î›±ç»‚æˆ î›¸ç»‚æ—‚î›ºç»‚æ «î›½ç»‚æ¶šîœç»‚ï¼„Î˜ç»‚â•ƒÎ›ç»‚îˆœÎ¡ç»‚å¯¸Î©ç»‚è¤î‡ç»‰å‹­îŒç»‰å ¢îç»‰å¿•î™ç»‰æ «îŸç»‰æ¿ˆî£"],["8fd1a1","ç»‰çŠµÐ‘ç»‰ãƒ§Ð˜ç»‰î‚¤Ð›ç»‰è¾©Ð¦ç»‰è‚©â–Šç»‹å†ªâ–ç»‹å¤Œâ–•ç»‹å²€â˜‰ç»‹æ› îŸç»‹ç‚µÄç»‹Ñ…Çç»‹î… Ç’ç»‹æ‰®Ã¹ç»‹ç”µÇœç»‹åœ­Ãªç»Œå‹­ï¹¨ç»Œå›©ï¹«ç»Œå²€îŸ³ç»Œæ «îŸ¶ç»Œæ»…îŸºç»Œç†ºîŸ½ç»Œãƒ§â”ƒç»Œî†â”‰ç»Œç”µâ””ç»Œå‰§ç‰ç»å‚œçç»å—™ç–ç»å¬¬çç»æˆ ç¢ç»ç‚µç±ç»ï½‡î€‹ç»å´‡î€”ç»åœ­î€šç»è‚©ç•ç»”å¤Œçœç»”åº£ç£ç»”æ¶šî¥ç»”â•ƒî¨ç»”î„‚î®ç»”å¯¸î¸ç»”ç•Œî»ç»—å›©ç‘ªç»—ç†ºî‚¾ç»—Ñ…îƒ„ç»—î†îƒ†ç»—î… îƒ‰ç»—îˆœîƒ‹"],["8fd2a1","ç»—è¾©îƒç»—ç•Œîƒšç»›â‚¬ç»›ä½ºç“ç»›åº£ç“¡ç»›çŠµî„ç»›ï¸¾î„¢ç»›î†î„¦ç»›îˆœî„«ç»›å´‡î„°ç» å‹­ç•¨ç» åº£ç•°ç» æˆ ç•ºç» æ¶šç–„ç» çŠµî…¼ç» î„‚î††ç» æ‰®î†‰ç» ç”µî†ç» è™¹î†’ç» è‚©î†”ç»¡å‚œç˜ç»¡å ¢ç˜–ç»¡æ—‚ç˜±ç»¡æ¥ƒç˜·ç»¡æ°±ç˜ºç»¡ã„§î‡Ÿç»¡èŒ¬î‡©ç»¡ç”µî‡­ç»¡åœ­î‡¯ç»¡è‚©î‡³ç»¨ä½ºçšžç»¨å†ªçš ç»¨å—™çš¦ç»¨å¬¬çš©ç»¨åº£çš¬ç»¨æ¬‘çš¼ç»¨çŠµå“Žç»¨ï¸¾çš‘ç»¨î„‚æ°¨ç»¨å´‡æŒ‰ç»¨å‰è‚®ç»¨è™¹çœ´ç»«å©„çç»«æˆ çŠç»«æ’¶ç“",5],["8fd3a1","ç»«ï¼„ä¿ç»«Ñ…æš´ç»«î… ç¢‘ç»«æ‰®è¾ˆç»«åœ­å¥”ç»«ç•ŒçŸ„ç»®å›©çŸŽç»®æ—‚çŸ ç»®çŠµæ‹¨ç»®æ‰®æ•ç»®é£ŽåŸ ç»®è¤å¸ƒç»®è·¨ç¡ ç»¯å›©ç¡¤ç»¯å¤Œç¡©ç»¯å¿•ç¡´ç»¯æ—‚ç¡¶ç»¯æ¥ƒç¡»ç»¯æ°±ç¢€ç»¯ï¸¾ç•…ç»¯î‚¤è½¦ç»±å†ªç£­ç»±å ¢ç£¯ç»±å¿•ç£»ç»±æŽ”ç£½ç»±æ «ç¤‰ç»±ç‚µçŸ—ç»±ï¸¾æ¤½ç»±î… å¹¢ç»±è‚©å”‡ç»±å‰§ç¥¤ç»²ä½ºç¥°ç»²å ¢ç¥¶ç»²æˆ ç¥¿ç»²æ¥ƒç¦‰ç»²æ°±ç¦ç»²æ¿ˆå•ç»²Ñ…æ°®ç»²æ‰®è¹ˆç»²è™¹ç¥·ç»²è·¨ç§®ç¼å‚œç§²ç¼å‘¯ç§µç¼å ¢ç§¼ç¼å²€ç§¿ç¼æˆ ç¨ç¼æ¥ƒç¨˜"],["8fd4a1","ç¼ç‚µé¼Žç¼Ñ…ä¸¢ç¼å´‡æŠ–ç¼é£Žè±†ç»¶ï¿½",4,"ç»¶å²€ç©½ç»¶åº£çªç»¶æ¬‘ç«´ç»¶ãˆ¢ä¼ç»¶ï¸¾è—©ç»¶î‚¤ç¿»ç»¶è¾©è¿”ç»¶å‰é¥­ç»¶è™¹ç¬€ç»ºæ„®ç¬ç»ºæ› ç¬šç»ºæ»…ç¬£ç»ºçŠµæŠšç»ºã„§è„¯ç»ºî… è…ç»ºå´‡ä»˜ç»ºè·¨ç®˜ç»»å‘¯ç®›ç»»åº£ç®°ç»»æŽ”ç®»ç»»ç†ºåŸ‚ç»»ãˆ¢æ”»ç»»î‚¤å·©ç»»îˆœé’©ç»»å“¥å’•ç»¾ä½ºç°¡ç»¾å›©ç°¥ç»¾å¶‡ç°¯ç»¾æ› ç°¶ç»¾æ°±ç°¼ç»¾ç‚µæŠ€ç¼‚è¤å†€ç¼‚å‰§ä¼Žç¼ƒå†ªçµ¼ç¼ƒå›©ç¶‡ç¼ƒæŽ”ç¶‹ç¼ƒæ¶šç¶”ç¼ƒæ¿ˆå¥ç¼ƒï½‡é¥¯ç¼ƒãƒ§æº…ç¼ƒï¿½"],["8fd5a1","ç¼ƒè¾©æµ‡ç¼ƒå‰§å¨‡ç¼‡â‚¬ç¼‡å¬¬ç·§ç¼‡å¿•ç·ªç¼‡æˆ ç·°ç¼‡æ¥ƒç·¶ç¼‡ï¼„åŠ²ç¼‡ï¸¾æƒŠç¼‡î… æ•¬ç¼‡è‚©ç©¶ç¼ˆâ‚¬ç¼ˆå†ªç¹„ç¼ˆåº£ç¹Œç¼ˆæ¶šç¹œç¼ˆï½‡éªç¼ˆã„§æ¥·ç¼ˆî†¾åˆŠç¼ˆèŒ¬äº¢ç¼ˆç•Œçƒ¤ç¼ˆèƒ¯â‚¬å›ªâ‚¬å £â‚¬å©…â‚¬å¶ˆâ‚¬åº¤â‚¬å¿šâ‚¬æˆ£â‚¬æ’¹â‚¬æ—‡â‚¬æ ¬â‚¬æ¿Šâ‚¬ç‚¶â‚¬ç†»â‚¬çŠºâ‚¬ã‚ˆâ‚¬ï¹â‚¬î„ƒâ‚¬î†¿â‚¬æ‹Œâ‚¬ç£‹â‚¬ä½ƒâ‚¬ç–¯â‚¬ç¡…â‚¬é¸¿â‚¬è‰°â‚¬æäºé‘±å‹®ä»©é‘±ã‚ˆä»¸é‘±î…¡ä¼‡é‘±ä½ƒå€Žé‘²å £å€¤é‘²æ»†å€¿é‘²ï¹å‹é‘²î‚¥å¢é‘²ç¡…å„“é‘³å¶ˆå„šé‘³æŽ•å„Ÿé‘³æ›¡å„£é‘³æ¨¿å„¬é‘³î…¡å„º"],["8fd6a1","é‘³æ‹Œå„¾é‘³å® å…Œé‘³ç¡…å…’é‘³æå‰é‘´å¬­å‰¸é‘´æ¥„å‰ºé‘´æ»†åŠ„é‘´çŠºåŠ‹é‘´Ñ†åŠ•é‘´æ‹ŒåŠ¦é‘´é¸¿åŠ¶é‘µå‘°åŽ™é‘µå©…åŽ¡é‘µæŽ•åŽ³é‘µçŠºå€é‘µÑ†åé‘µâ•„åšé‘µîˆå¿é‘¶ä½½å•‡é‘¶å‹®å”´é‘¶å—šå”»é‘¶åº¤å•é‘¶æ¨¿å•—é‘¶ç‚¶å•Ÿé‘¶î†¿å•¿é‘¶ç£‹å–•é‘·å¬­å™§é‘·å‘°å™´é‘·åº¤å™ºé‘·æ›¡åš„é‘·æ¶œåšŒé‘·ç‚¶åš’é‘·ã‚ˆåšé‘·î„ƒåš¢é‘·è¾«åš¥é‘·ä½ƒåš©é‘·æ­Œåš¬é‘·å€Ÿåš³é‘¸â‚¬é‘¸å†­åž™é‘¸æ’¹åžŸé‘¸æ¬’åž°é‘¸æ¿Šåžºé‘¸ãˆ£åŸé‘¸èŒ¶åŸ“é‘¸é¸¿å¢é‘¹å‹®å¢”é‘¹ï¿½"],["8fd7a1","é‘¹å¬­å¢¡é‘¹å¿šå¢¤é‘¹æ ¬å¢±é‘¹çŠºå¢¸é‘¹Ñ†å£„é‘¹ç£‹å£”é‘¹å€Ÿå£™é‘ºâ‚¬é‘ºä½½å¦°é‘ºå‹®å¦µé‘ºå¤Žå¦¸é‘ºåº¤å§‚é‘ºæ—‡å§ˆé‘ºæ¨¿å§Žé‘ºæ¶œå§žé‘ºÂ¤å§¡é‘ºã‚ˆå§§é‘ºã„¨å§ªé‘ºî‡å§°é‘ºæ‹Œå§´é‘ºç£‹å§ºé‘ºé¸¿å¨‚é‘ºæå¨é‘»å—šå«„é‘»æ›¡å«é‘»çŠºå«é‘»ã‚ˆå«§é‘»î‡å«®é‘»îˆå«¸é‘»ç–¯å«¿é‘»æå¯‘é‘¼ä½½å¯šé‘¼å £å¯ é‘¼å¬­å´é‘¼æ¶œå¯¾é‘¼ç‚¶å°‚é‘¼Â¤å°‡é‘¼î„ƒå°›é‘¼î†¿å° é‘¼å® å°«é‘¼é¸¿å°²é‘¼å€Ÿå´…é‘½å†­å´‰é‘½å›ªå´“é‘½åº¤å´™é‘½æ›¡å´ é‘½æ¥„åµƒé‘½ï¿½"],["8fd8a1","é‘½å€Ÿåµ–é‘¾â‚¬é‘¾å‚å·¹é‘¾å—šå¸Šé‘¾æŽ•å¸žé‘¾æ›¡å¸¢é‘¾æ¬’å¸¥é‘¾æ»†å¸©é‘¾ï¹å¸¶é‘¾â•„å¹€é‘¾æå¹™é‘¿â‚¬é‘¿å›ªå¼¶é‘¿å¿šå½é‘¿æˆ£å½…é‘¿æ¿Šå´œé‘¿ã„¨å½§é‘¿æƒ°å¾ƒé‘¿ç¡…å¾é’€ä½½æ‚Šé’€å©…æ‚˜é’€æˆ£æ‚¤é’€æ¬’å¹é’€îˆæƒžé’å‘°æ†žé’å £æ†¡é’å¶ˆæ†¦é’æˆ£æ†­é’æ ¬æ†³é’æ¬’æ†µé’æ»†æ†¼é’ã‚ˆæ‡ƒé’Ñ†æ‡‰é’æ‹Œæ‡—é’ç£‹æ‡šé’æ­Œæ‡ é’å€Ÿæ‹‹é’‚å‘°æ‹»é’‚æ’¹æŒ„é’‚ç‚¶æŒ¦é’‚ã„¨æŒ¬é’‚î‡æŒ´é’‚è¾«æŒ»é’‚é¸¿æŠé’‚ææ¥é’ƒå‚æ°é’ƒå £æ¶é’ƒå¿šæ‘€"],["8fd9a1","é’ƒæ»†æ‘Ÿé’ƒî‡æ‘¨é’ƒæ‹Œæ‘«é’ƒèŒ¶æ‘²é’„èŒ¶æ‘µé’ƒæ˜æ‘»é’„å‚æ”¦é’„å›ªæ”²é’„åº¤æ”¼é’„æ»†æ•’é’„ãˆ£æ•šé’„ã‚ˆæ•Ÿé’„Ñ†æ•§é’„î‚¥æ•®é’„å® æ•¶é’„æƒ°æ–‚é’‘å—šæ™±",4,"é’‘æ ¬æš€é’‘ï¿½",6,"é’‘ã‚ˆæš™é’‘îˆæšªé’‘é¸¿æš¬é’‘å€Ÿæš±é’–ä½½æž€é’–å—šæž†é’–å¬­æžŒé’–å¿šæž”é’–æ¨¿æž¬é’–ç†»æž²é’–ãˆ£æž¼é’–Ñ†æŸŽé’–æƒ°æŸ—é’–æ­ŒæŸ¤é’–å€ŸæŸ§é’–èƒ¯æ¢»é’˜å›ªæ£…é’˜å¬­æ£Šé’–î…¡æ£™é’˜æ°³æ£¢é’˜çŠºæ£ªé’˜ã„¨æ£´é’˜å® æ¤‚é’˜ï¿½"],["8fdaa1","é’˜èƒ¯æ¦¾é“‡å‹®æ§„é“‡å¶ˆæ§‘é“‡æ„¯æ§•é“‡æŽ•æ§é“‡æ¬’æ§¢é“‡ç‚¶æ§¨é“‡Ñ†æ§±é“‡æƒ°æ¨ƒé“‡é¸¿æ¨‡é“‡å€Ÿæª§é“å‚æª°é“æŽ•æª½é“æ ¬æ«é“æ¨¿æ«ƒé“æ¿Šæ«Š",4,"é“â•„æ«–é“îˆæ«Ÿé“æƒ°æ«¡é“é¸¿æ®Ÿé““æˆ£æ®©é““æ¨¿æ®®é““æ»†æ®¹é““ï¹æ¯€é““ã„¨æ¯‰é““è¾«æ¯˜é““ç£‹æ¯œé““ç–¯æ¯Ÿé““ç¡…æ¯§é“”â‚¬é“”ä½½æ³é“”å‘°æ´ƒé“”æŽ•æ´‰é“”æ¥„æ´‘é“”æ»†æ´œé“”ï½ˆæ´¢é“”Ñ†æ®˜é“”é¸¿æµ–é“”å€Ÿæ¸¼é“šå‘°æ¸¿é“šå¬­æ¹ˆé“šå¿šæ¹Šé“šæ’¹æ¹é“šæ¬’æ¹ é“šç†»æ¹£é“šï¿½"],["8fdba1","é“šã„¨æ¹²é“šîˆæ¹µé“šèŒ¶æ¹½é“šé¸¿æº‚é“šå€Ÿæº‡é“¦â‚¬é“¦å†­æ½Šé“¦å¶ˆæ½£é“¦æ¿Šæ½¯é“¦ã‚ˆæ½µé“¦îˆæ¾…é“¦èŒ¶æ¾”é“»ï¿½",6,"é“»å¬­ç€¸é“»æ„¯ç€é“»æ›¡ç„é“»æ¨¿ç†é“»ç‚¶çŽé“»ï½ˆç–é“»î„ƒçœé“»î†¿ç¡é“»ä½ƒç³é“»èƒ¯ç„·é”œå £ç„¿é”œå©…ç…„é”œæ›¡ç…é”œæ¬’ç…”é”œæ»†ç…™é”œãˆ£ç…Ÿé”œã‚ˆç…ªé”œî‚¥ç…­é”œè¾«ç…¶é”œæ­Œç†€é”œèƒ¯çˆœé” å†­çˆ¢é” å¤Žçˆ¦é” å¬­çˆ¯é” æ¬’çˆ³é” æ’¹çˆºé” æ¨¿ç‰ƒé” æ¶œç‰…é” ç‚¶ç‰Šé” ã„¨ç‰ é” î†¿ç‰¥é” èŒ¶ç‰­"],["8fdca1","é” é¸¿ç‰¸ç›ä½½î”ˆç›å‘°î”ç›å¤Žî”ç›å¬­î”“ç›æˆ£î”šç›æ ¬î”ç›æ°³î”¡ç›ç†»î”¥ç›ã‚ˆã€…ç›è¾«ã€ç›æ˜î•¥çšæ¨¿î•¿çšæ¶œî–çšç†»î–…çšã„¨â…¹çšé¸¿â’”çšæî—…ç‘ï¿½",4,"ç‘æˆ£î——ç‘æ’¹î— ç‘ç‚¶ï¼‡ç‘îˆï¼ç‘è¾«ï¼•ç‘ç–¯î˜¦ç‘œå—šî˜²ç‘œåº¤î˜´ç‘œæ›¡î˜»ç‘œæ¨¿î˜¾ç‘œæ°³î™ç‘œçŠºã†ç‘œÑ†ãˆç‘œæ‹Œã‘ç‘œèŒ¶ã•ç‘œç¡…ãšç‘œæîš…ç‘—å‚îšŠç‘—å—šîšŽç‘—å¿šîš—ç‘—æ¥„îšŸç‘—æ¶œîš¡ç‘—Â¤ã‚¢ç‘—ï½ˆã‚«ç‘—î†¿ã‚°ç‘—å® ã‚µç‘—ï¿½"],["8fdda1","ç‘—æ˜ã‚¼ç‘—å€Ÿî›®ç‘•å¶ˆî›µç‘•æ—‡î›ºç‘•æ¶œîœç‘•ç†»îœ…ç‘•ãƒ¨Î ç‘•ç£‹Î¦ç‘•æƒ°Î¨ç‘•è‰°î™",4,"ç‘™ãƒ¨Ð—ç‘™î‚¥Ð›ç‘™è¾«Ð¡ç‘™æƒ°Ð§ç‘™å€ŸÐ­ç‘·å‹®â–ç‘·å›ªâ—¤ç‘·æˆ£âŠ•ç‘·æ—‡ã€žç‘·ç‚¶îŸ†ç‘·ãˆ£Ã ç‘·ï¹Çç‘·î„ƒÇ’ç‘·ä½ƒÇšç‘·å€ŸÅˆç‘­â‚¬ç‘­å†­ï¹¨ç‘­å›ªîŸ§ç‘­å¶ˆîŸ¬ç‘­æ’¹ã€‡ç‘­æ¥„îŸµç‘­æ»†îŸºç‘­Â¤â”ç‘­Ñ†â”‘ç‘­æƒ°â”“ç‘­ç¡…â”–ç‘­æ˜â”šç‘­èƒ¯ç‰ç‘¾å†­ç‘ç‘¾å¬­çœç‘¾æ„¯çŸç‘¾æ ¬ç¥ç‘¾æ¬’ç°ç‘¾Ñ†î€ˆç‘¾î†¿î€Žç‘¾ï¿½"],["8fdea1","ç‘¾æƒ°î€–ç‘¾æ˜î€ç’œå†­ç•ç’œå £ç˜ç’œå©…ç£ç’œæ’¹ç¨ç’œæ›¡ç¬ç’œæ¿Šç¶ç’œî„ƒî­ç’œç£‹î²ç’œæƒ°î¹ç’œèƒ¯ç‘“ç’Žå—šç‘¡ç’Žæˆ£ç‘´ç’Žç‚¶ç‘¹ç’Žå©…îƒˆç’Žæ‹Œîƒ’ç’Žè‰°ç“Š",4,"ç’€å £ç“›ç’€æ’¹ç“Ÿç’€æ¬’ç“–ç’€ç‚¶î„œç’€î…¡î„¯ç’€æ­Œî„²ç’€è‰°î„·ç’ä½½ç•¡ç’å‘°ç•«ç’å¶ˆç•¯ç’æ—‡ç•·ç’æ»†ç–„ç’ç†»æ¡ˆç’‹ç¡…æ•–ç’‹æçœ³ç’žå›ªçœ½ç’žå¬­ç†ç’žæˆ£ç‹ç’žæ—‡çç’žæ¨¿ç•ç’žæ¿Šç“ç’žï½ˆå ¡ç’žï¹æŠ¥ç’žâ•„æ¯ç’žå® é’¡ç’žæƒ°è¢«ç’žæçŸ„"],["8fdfa1","ç’¨å›ªçŸ‰ç’¨æ„¯çŸ‘ç’¨æ’¹çŸ™ç’¨æ¶œçŸžç’¨ã‚ˆè¡¥ç’¨é¸¿ç¡¡ç’©å—šç¡¥ç’©å¬­ç¡°ç’©æ ¬ç¡¶ç’©æ¬’ç¢€ç’©Â¤æ•žç’©î„ƒæœç’©æ‹Œå·¢ç’©ä½ƒæ’¤ç’©æ­Œå°˜ç’©èƒ¯ç£¥ç’å†­ç£¯ç’æŽ•ç¤‚ç’æ¶œå•ç’§â•„æƒ®ç’§î†¿æ‚¼ç“’å‚ç§³ç“’å £ç§¿ç“’æ„¯ç¨‡ç“’æ›¡ç¨™ç“’ç†»ç¨œç“’ï¹ä¸œç“’î„ƒåŠ¨ç“’èŒ¶å…œç“’ç–¯è±†ç“’æ˜ç©©ç’ºå‘°ç©¯ç’ºå›ªç©²ç’ºå©…ç©¾ç’ºæˆ£çª‹ç’ºæ›¡çªç’ºæ¬’ç­ç’ºãƒ¨é˜€ç’ºî„ƒé’’ç“’è‰°ç¹ç’ºèŒ¶åç’ºå€Ÿç«µéŸªå‹®ç«»éŸªå—šç¬…éŸªæˆ£ç¬–éŸªæ ¬ç¬­éŸªÂ¤æ¶ª"],["8fe0a1","éŸªï½ˆç”«éŸªÑ†å‰¯éŸªå® ä»˜éŸªç–¯çˆ¶éŸªç¡…é™„éŸ«â‚¬éŸ«ä½½ç®£éŸ«å¶ˆç®®éŸ«å¿šç®¶éŸ«æ¶œç®¿éŸ«æ¿Šç¯‚éŸ«Â¤è€¿éŸ«â•„å®«éŸ«î…¡æ±žéŸ«æ‹Œè´¡éŸ«ç¡…è´­éŸ«æ˜ç°œéŸ¬å†­ç°¤éŸ¬æ„¯ç°°éŸ¬æ›¡ç°¹éŸ¬æ¶œç°¼éŸ¬ç‚¶å­©éŸ¬Ñ†æ†¨éŸ¬î…¡å¯’éŸ¬å® æ—±éŸ¬é¸¿å¤¯æŒâ‚¬æŒä½½ç²ŒæŒå‹®ç²æŒå¿šç²¦æŒæ—‡ç²¶æŒã„¨åˆ’æŒæ‹Œæ§æŒç–¯è¿˜æŒé¸¿ç”»æ“â‚¬æ“å‚ç´˜æ“å £ç´¡æ“æ„¯ç´ªæ“æ¥„ç´­æ“ç‚¶ç´¶æ“Â¤è¿¹æ“ãƒ¨å§¬æ“ã„¨æ£˜æ“î…¡ç±æ“ç£‹å«‰æ“æƒ°æŒ¤æ“é¸¿çµ¸æžï¿½"],["8fe1a1","æžå†­çµ¿æžå¿šç¶‰",4,"æžæ¨¿ç¶•æžç‚¶æ¸æˆæ¿Šç·ºæˆÂ¤å…¢æˆãƒ¨ç›æˆä½ƒå¾„æˆæ­Œæªæ©â‚¬æ©ä½½ç¹‚æ©å©…ç¹ˆæ©å¶ˆç¹æ©æŽ•ç¹æ©æ›¡ç¹æ©ï½ˆéƒ¡æ©ã„¨æ…¨æ©è¾«åº·æ©æƒ°ç‚•æ©é¹ƒâ‚¬å‚žâ‚¬å‹¯â‚¬å ¥â‚¬å²„â‚¬æ©€â‚¬æ¶¢â‚¬ã„©â‚¬â•…â‚¬îˆžâ‚¬îˆâ‚¬î„„â‚¬î…¢â‚¬æŠ½â‚¬æ’®â‚¬çƒ½â‚¬å—äº™é–¬å‹¯äº´é–¬æ¶¢ä»¢é–¬ãˆ¤ä»¸é–¬Ñ‡ä¼‚é–¬ä¼´ä¼Œé–¬å½’å€•é–­å ¥å€ é–­å²„å€¤é–­æ„°å€³é–­æ¥…å€¶é–­æ¬“å€¹é–­çŠ»å‚é–­ãˆ¤å‰é–­ä¼´å›é–­æŠ½åžé–­å •å¨é–®å²„å©é–®ï¿½"],["8fe2a1","é–®å‹¯å„é–®å›¬å„“é–®æ›¢å„£é–®æ©€å„¥é–®æ»ˆå„©é–®ç†¼å„±é–®æŽ—å…Œé–®î‚¦å„»é–®ä¼´å…‡é–®é¹ƒå…›é–¯â‚¬é–¯å‹¯å‰ é–¯å—›å‰¤é–¯å¶‰å‰±é–¯æ—ˆå‰¸é–¯æ¥…å‰ºé–¯æ°¶åŠ€é–¯ç‚ºåŠ†é–¯ãƒ©åŠ‰é–¯ï½‰åŠŽé–¯â•…åŠ—é–¯îˆžåŠšé–¯æ’®åŠ§é–¯çƒ½åŠ°é–¯æ´ªåŠ¶é–¯ä»‹åŽ“é–°å›¬åŽ›é–°å¿›åŽ¯é–°æ¥…åŽµé–°æ°¶åŽ¸é–°ï¿ å…é–°Ñ‡åšé–°æ’®å‚é–°æ´ªå‡é–±ä¾€å”­é–±å‘´å”µé–±å©‡å•‚é–±æˆ¦å•Œé–±æ—ˆå•Žé–±æ©€å•šé–±ï¿ å•¨é–±ã„©å•²é–±î…¢å•´é–±ä¼´å•½é–±æŸ¥å–…é–±å •å–•é–±å¥¸å–—é–±ï¿½"],["8fe3a1","é–²å‚žå™§é–²å‘´åš€é–²æ—ˆåš„é–²æ¬“åš‰é–²ç‚ºåš–é–²ãƒ©åš›é–²îˆåšž",5,"é–²çƒ½åš¬é–²å©šåš±é–³â‚¬é–³ä¾€åžŠé–³å‘´åžŽé–³å›¬åž‘é–³å©‡åž–é–³æ„°åžé–³æ’»åž¨é–³æ©€åž³é–³æ¿‹åž¼é–³ã‚‰åž¾é–³ï¹‚åŸé–³î‡€åŸŠé–³ä¼´åŸ‘é–³ç”¸åŸ—é–³æåŸžé–³æ´ªåŸ£é–³é¹ƒå¢é–´å‚žå¢é–´å—›å¢–é–´å©‡å¢ é–´åº¨å¢¢é–´æˆ¦å¢­é–´æ¬“å¢±é–´æ¿‹å¢µé–´ï¿ å¢ºé–´Ñ‡å¢¾é–´â•…å£†é–´îˆžå£ˆé–´ï¿½",4,"é–´å©šå£–é–´ä»‹å£™é–µå ¥å¦·é–µå©‡å¦½é–µåº¨å§ƒé–µï¿½"],["8fe4a1","é–µæ¬“å§›é–µçŠ»å§¢é–µãƒ©å§§é–µã„©å§­é–µîˆžå§´é–µå •å§¼é–µæ´ªå¨€é–µå¥¸å¨Šé–µï¿½",4,"é–¶å‘´åª¶é–¶å›¬åª¹é–¶å¬®åª½é–¶å¶‰å«€é–¶æ„°å«‡é–¶æ›¢å«é–¶æ©€å«é–¶æ»ˆå«•é–¶ç†¼å«šé–¶ï¿ å«žé–¶ãƒ©å«¥é–¶ã„©å«­é–¶î‡€å«²é–¶å½’å«½é–¶å—å¯‘é–·å‚žå¯›é–·å¶‰å¯«é–·æ—ˆå¯±é–·æ»ˆå¯¾é–·ç‚ºå°‚é–·ï¿ å°‹é–·ãƒ©å°Žé–·â•…å°“é–·æŠ½å°¨é–·å •å°«é–¸å›¬å´é–¸å¤å´˜é–¸æˆ¦å´šé–¸æ›¢å´¡é–¸æ©€å´¥é–¸ç‚ºå´µé–¸ãƒ©å´¸é–¸â•…å´»é–¸î…¢åµ‚é–¸ä¼´åµ„é–¸æŠ½åµˆé–¸ï¿½"],["8fe5a1","é–¸æ´ªåµ”é–¸å—å·°é–¹ä¾€å·¶é–¹å ¥å¸„é–¹å¬®å¸Šé–¹å¿›å¸“é–¹æ›¢å¸¢é–¹æ¶¢å¸ªé–¹ï¿ å¸²é–¹ã‚‰å¸µé–¹ã„©å¸¿é–¹æ’®å¹é–¹å •å¹’é–¹â•…å¼«é–ºå‹¯å¼²é–ºå—›å¼´é–ºï¿½",4,"é–ºæ’»å½Šé–ºæ»ˆå½é–ºç†¼å½šé–ºï¹‚å½ é–ºå½’å½¿é–ºæå¾é–ºå©šå¾‘é–»ä¾€æ‚…é–»å‹¯æ‚Žé–»å¤æ‚•é–»åº¨æ‚˜é–»æ›¢æ‚¥é–»æ¥…æ‚·é–»î‡€æƒŽé–»éæƒ’é–»æŠ½æƒ”é–»å©šæƒªé–»ä»‹æ†™é–¼å‘´æ†Ÿé–¼å©‡æ†£é–¼æ›¢æ†´é–¼æ»ˆæ†»é–¼ï¿ æ‡€é–¼ã„©æ‡Œé–¼î…¢æ‡é–¼îˆžæ‡•é–¼æŸ¥æ‹•é–½å†®æš©é—€ï¿½"],["8fe6a1","é—€é¹ƒæ½é—å ¥æžŒé—å¶‰æžŽé—æ¿‹æž®é—ç†¼æž´é—ï¹‚æŸ€é—î‚¦æŸ†é—æ’®æŸ–é—æ´ªæŸ¦é—å—æ¢¿é—‚å ¥æ£„é—‚å¬®æ£Žé—‚æˆ¦æ£é—‚æ’»æ£›é—‚æ°¶æ£Ÿé—‚ç‚ºæ£¢é—‚çŠ»æ£¨é—‚ï¹‚æ§¤é—ƒç‚ºæ§©é—ƒã‚‰æ§¬é—ƒï¹‚æ§µé—ƒéæ§¼é—ƒçƒ½æ¨ƒé—ƒå½’æ¨…é—ƒå¥¸æ¨ˆé—„ä¾€æª¼é—„æ—ˆæ«€é—„æ¥…æ«‚é—„ï¿ æ«˜é—„æ’®æ«¥é—„å¥¸æ«¨é—„å—æ®Žé—…å‚žæ®é—…å‹¯æ®™é—…æˆ¦æ®©é—…æ°¶æ®±é—…ç†¼æ®¼é—…ãƒ©æ®¾é—…â•…æ¯Šé—…îˆžæ¯˜é—…æ´ªæ³­é—†æŽ‘æ«é—†æ©€æ´‘é—†æ¿‹æ´–é—†ç†¼æ´¨é—†îˆžæ´·é—†æ´ªæ¸¹"],["8fe7a1","é—‡å†®æ¸½é—‡å¤æ¹šé—‡æ¶¢æ¹žé—‡ï¿ æ¹¤é—‡ï½‰æ¹ªé—‡éæ¹·é—ˆä¾€æ½ˆé—ˆå©‡æ½•é—ˆå¿›æ½Ÿé—ˆæ¥…æ½£é—ˆæ°¶æ½§é—ˆï½‰æ½·é—ˆîˆæ¾é—ˆæŠ½æ¾é—ˆçƒ½æ¾‘é—ˆå©šæ¾–é—ˆå—ç€«é—‰å¤ç‚é—‰æ ­ç„é—‰æ¬“ç‡é—‰ç‚ºçé—‰ãˆ¤ç›é—‰î‡€ç¡é—‰æŸ¥ç¥é—‰å •ç¨é—‰å½’çªé—‰å¥¸ç³é—‰å—ç„·é—Šå‹¯ç„»é—Šå›¬ç„¿é—Šå©‡ç…‚é—Šå¶‰ç…„é—Šæ„°ç…ˆé—Šæ—ˆç…‘é—Šæ©€ç…“é—Šæ¿‹ç…˜é—ŠçŠ»ç…•é—Šï¿ ç… é—Šîˆžç…´é—Šæ’®ç…¼é—Šæç†€é—‹å›¬çˆ¦é—‹æ¬“çˆ«é—‹åº¨çˆºé—‹æ ­ç‰…é—‹ç‚ºç‰‹é—‹ï½‰ç‰”"],["8fe8a1","é—‹î‚¦ç‰£é—‹îˆžç‰¥é—‹æŸ¥ç‰«é—‹ç”¸ç‰“é—‹é¹ƒî”‰æ¤¤å›¬î”æ¤¤æˆ¦î”—æ¤¤æ’»î”›æ¤¤æ¥…î”žæ¤¤æ°¶ã€æ¤¤ï½‰Ë‰æ¤¤ï¹‚â€”æ¤¤î„„î¦æ£°î…¢î©æ£°ä¼´â’‹æ£°çƒ½â’æ£°æ´ªâ’’æ£°å—î—‡æ¤‹å‘´î—æ¤‹å²„ï¼æ¤‹ï½‰ï¼…æ¤‹ï¹‚ï¼‡æ¤‹îˆï¼“æ¤‹å •î˜§æ¤å›¬î˜­æ¤æˆ¦î˜ºæ¤æ ­î˜¼æ¤æ°¶î™€æ¤æ»ˆî™„æ¤ãˆ¤ã†æ¤Ñ‡ã‹æ¤ï¿½",4,"æ¤å½’ãšæ¤å©šãœæ¥—â‚¬æ¥—ä¾€îš‹æ¥—å›¬îšæ¥—å¶‰îš“æ¥—æ—ˆîšæ¥—æ¬“îš æ¥—æ»ˆîš£æ¥—ç†¼îš¥æ££æ¶¢îœ‚æ££ç†¼Î–æ££ä¼´Î¡æ££æŸ¥Î¦"],["8fe9a1","æ££å½’îž†æ££ä»‹îž‹æ¤å†®îŽæ¤æ’»î™æ¤æ¬“îŸæ¤æ»ˆî£æ¤Ñ‡Ð˜æ¤î‚¦Ðšæ¤ä¼´Ð¢æ¤ç”¸Ð§æ¤ä»‹Ð¬æ¥±å‚žâ–‹æ¥±å‹¯â–¼æ¥±å²„â—¥æ¥±æˆ¦îž¼æ¥±ç‚ºîŸ†æ¥±ãˆ¤ÇŽæ¥±ã‚‰Ä›æ¥±î…¢Ã³æ¥±æŠ½Ç–æ¥±å •Çœæ¤¹å›¬ï¹£æ¤¹å‹¯îŸ¨æ¤¹å¬®îŸªæ¤¹åº¨îŸ¯æ¤¹æ—ˆã€‡æ¤¹æ¿‹î€‰æ¥ î„„î€æ¥ îˆžî€‘æ¥ æ’®î€”æ¥ å •î€˜æ¥ å©šî€æ¥ å—çŒæ¥‚å†®ç•æ¥‚å ¥çŸæ¥‚æ„°ç¤æ¥‚æ›¢ç«æ¥‚æ¥…ç±æ¥‚æ»ˆç·æ¥‚ã‚‰î¢æ¥‚Ñ‡î¦æ¥‚î„„î¯æ¥‚æŠ½î²æ¥‚å½’î·æ¥‚ä»‹î¼",4],["8feaa1","æ¥å‹¯ç‘“æ¥å ¥ç‘æ¥å¬®ç‘¢æ¥å¶‰ç‘¤æ¥æ„°ç‘¨æ¥æ ­ç‘±æ¥æ¶¢ç‘´æ¥çŠ»îƒæ¥î‚¦îƒˆæ¥æŠ½îƒæ¥ç”¸îƒ’æ¥å½’îƒ•æ¥ä»‹ç“æ¦„å¬®ç“•æ¦„æ›¢ç“¥æ¦„æ¥…ç“«æ¦„ç‚ºî„šæ¦„ï½‰î„žæ¦„ï¹‚î„¡æ¦„ï¿½",4,"æ¦„æŠ½î„®æ¦„çƒ½î„±æ¦„å½’î„¸æ¥«â‚¬æ¥«å‹¯ç•¢æ¥«å—›ç•¤æ¥«å¤ç•©æ¥«å¬®ç•­æ¥«å¿›ç•°æ¥«æ—ˆç•¾æ¥«æ¿‹ç–„æ¥«ï¹‚î…¾æ¥«â•…î†ƒæ¥«ä¼´î†ˆæ¥«æŸ¥î†Žæ¥«æî†’æ¥«å¥¸î†•æ¥«å—ç˜‰æ¦€å›¬ç˜“æ¦€åº¨ç˜£æ¦€æ¥…ç˜¶æ¦€æ¿‹ç™‚æ¦€ãƒ©î‡œæ¦€îˆî‡ æ¦€îˆžî‡¨æ¦€çƒ½î‡­"],["8feba1","æ¦€å½’î‡¯æ¦€ä»‹î‡´æ¦˜â‚¬æ¦˜å‚žçš¨æ¦˜å¿›çš¯æ¦˜æ ­çš¹æ¦˜æ¬“çš»æ¦˜æ»ˆç›€æ¦˜ãˆ¤åŸƒæ¦˜ï¿½",4,"æ¦˜éæš—æ¦˜å •èƒºæ¦˜ä»‹çœ®æ¥¸å†®çœ²æ¥¸å‘´çœ½æ¥¸å©‡ç…æ¥¸å¿›çˆæ¥¸æ’»çŒæ¥¸æ ­ç’æ¥¸æ¶¢ç—æ¥¸ç‚ºç™æ¥¸ï½‰æš´æ¥¸îˆç–æ¥¸î‚¦æŠ¥æ¥¸î‡€å‘æ¥¸æŸ¥é’¡æ¥¸çƒ½è¢«æ§Œï¹‚å·¢æ§Œçƒ½å½»æ¦‡å¬®ç£¦æ¦‡æˆ¦ç¤‚æ¦‡æ©€ç¤ˆæ¦‡æ¿‹ç¤Šæ¦‡îˆžçª—æ¦‡æŸ¥é—¯æ¦‡æ’®æ˜¥æ¦‡å¥¸ç¥¬æ¦‡ä»‹ç¥©æ¦ˆå†®ç¥°æ¦ˆå©‡ç¥¿æ¦ˆæ—ˆç¦‘æ¦ˆï½‰è€½æ¦ˆãƒ©æ—¦æ¦ˆîˆä½†æ¦ˆä¼´åˆ€æ¦ˆçƒ½ç¥·"],["8feca1","æ¦ˆå¥¸ç¨»æ§Žå†®ç§³æ§Žå—›ç§ºæ§Žå¶‰ç¨æ§ŽæŽ—ç¨‰æ§Žæ›¢ç¨æ§Žæ¥…ç¨‘æ§Žï¿ ä¸¢æ§Žî„„æ‡‚æ§Žéå…œæ§Žå½’éƒ½æ§Žå—ç©¬æ¦‰å›¬ç©³æ¦‰å©‡çª‹æ¦‰æ›¢çªŽæ¦‰æ¥…çª”æ¦‰ç‚ºçª¡æ¦‰çŠ»ä¼æ¦‰Ñ‡çæ¦‰î‚¦æ¨Šæ¦‰ä¼´çƒ¦æ¦‰æ’®è‚ªæ¥¦å©‡ç«¶æ¥¦å›¬ç¬Œæ¥¦æ„°ç¬æ¥¦æŽ—ç¬—æ¥¦æ ­ç¬æ¥¦æ»ˆç¬£æ¥£æ´ªå¤Ÿæ¥£å¥¸ç°šæ¥¹å‚žç°æ¥¹å‹¯ç° æ¥¹å›¬ç°¬æ¥¹å¿›ç°´æ¥¹æ©€ç°ºæ¥¹ç‚ºæ°¦æ¥¹ã„©å«æ¥¹î‡€å‡½æ¥¹ä¼´æ’¼æ¥¹æ’®æ—±æ¦›å—›ç²“æ¦›å¬®ç²«æ¦›ç†¼æŠ¤æ¦›Ñ‡æ»‘æ¦›î…¢åˆ’æ¦›ä¼´æ§æ¦›æŸ¥å"],["8feda1","æ¦›æè±¢æ¦§å‚žç´”æ¦§å¤ç´¡æ¦§æ„°ç´¤æ¦§æŽ—ç´¨æ¦§æ ­ç´¬æ¦§æ¬“ç´°æ¦§æ¶¢ç´µæ¦§ãˆ¤é¸¡æ¦§îˆæžæ¦§îˆžæ€¥æ¦§æŸ¥å³æ¦§çƒ½è„Šæ¦§æ´ªæŠ€æ¦§ä»‹ä¼Žæ¦»ä¾€çµ»",4,"æ¦»æ’»ç¶æ¦»æ ­ç¶æ¦»æ©€ç¶’æ¦»æ¿‹ç¶–æ¦»ã„©åƒµæ¦»ï¿½",4,"æ¦»æŠ½é™æ¦»æ´ªæµ‡æ¦«å¿›ç·ªæ¦«æˆ¦ç·¬æ¦«æ—ˆç·°æ¦«æ¥…ç·¸æ¦«ï¿ åŠ²æ¦«ï½‰èŒŽ"]]

            /***/ }),
        /* 100 */
        /***/ (function(module, exports) {

            module.exports = [["0","\u0000",127,"éˆ§ï¿½"],["8140","æ¶“å‚™ç«¸æ¶“å‘¬ç«¼æ¶“å¿Žç¬’æ¶“æ¤¾ç¬©æ¶“çŠ±æµ®æ¶“ï½„ç”«æ¶“â•€åºœæ¶“îˆ™å‰¯æ¶“å……å‚…æ¶“èœ‚è®£æ¶”â‚¬æ¶”ä½·ç®“æ¶”å‹ªç®šæ¶”å©ç®²æ¶”æ›šç®ºæ¶”æ°«ç®¾æ¶”î­æ¢—æ¶”ã‚„æ”»æ¶”Ñ‚é¾šæ¶”ï¿½",5,"æ¶”è¹­å‹¾",9,"æ¶”ï¿½",6,"æµœå›¦ç°¥"],["8180","æµœæ„ªç°´æµœæ¤¾ç°·æµœæ»€ç°¼æµœç‚°æµ·æµœîƒå‡½æµœé¢ç½•æµœç¿ æ†¾æµœèœ‚ç„Šæµœé€›æ­æµœæˆ’å£•æµ å œç²šæµ å¿Žç²£æµ æŽç²´æµ æ¶—ç²¶æµ çŠ±è™Žæµ ï¸¿æˆ·æµ â•€ç”»æµ î†»åŒ–æµ å˜æ·®æµ é•è¿˜æµ è½°æ‚£æµ å¥ç´‘æµ¼ï¿½",6,"æµ¼å¬©ç´æµ¼ï¿½",4,"æµ¼æ»€ç´³æµ¼â€²è¿¹æµ¼ã„¤ç¼‰æµ¼îƒ¿è¾‘æµ¼î†»æ€¥æµ¼å……å«‰æµ¼èœ‚è„Šæµ¼è®³å­£",4,"æµ£å‹ªçµ½æµ£ï¿½",5,"æµ£æŽç¶Œæµ£æ ¦å¥æµ£î­æº…æµ£ã„¤å§œæµ£î‚¡æ±Ÿæµ£î†»å¥–æµ£è¹­é™æµ£èœ‚ç¤æµ£é€›èƒ¶æµ£æˆ’ç·šæ¸šä½·ç·œæ¸šå‘¬ç· æ¸šå›¦ç·¤æ¸šå±¼ç·¨æ¸šæ„ªç·¬æ¸šæ’²ç·¯æ¸šæ ¦ç·²æ¸šæ¬Žç·´æ¸šæ»€ç·¸æ¸šç†¶å°½æ¸šï¿½"],["8240","æ¸šã‚„ç²¾æ¸šî…æ™¯",4,"æ¸šï¿½",8,"æ·‡â‚¬æ·‡ä½·ç¸½æ·‡å—•ç¹ƒæ·‡å œç¹…æ·‡å¬©ç¹‰æ·‡å¶„ç¹",4,"æ·‡æ¬Žç¹˜æ·‡çŠ±ç«£æ·‡ã‚„éªæ·‡Ñ‚æ©æ·‡îƒ¿å ªæ·‡è¹­çœ‹æ·‡å…¸æ…·æ·‡èœ‚æŠ—æ·‡è®³è€ƒæ·‡æˆ’é ",11],["8280","éŠå¬ªâ‚¬åº¡â‚¬æ„¬â‚¬æˆâ‚¬æ’³â‚¬æ›žâ‚¬æ §â‚¬æ¥€â‚¬æ¶˜â‚¬æ¿†â‚¬ç‚²â‚¬çŠ²â‚¬ãˆ â‚¬ï½…â‚¬ã‚…â‚¬Ñƒâ‚¬î‚¢â‚¬ï¿½",10,"éŠè¯²â‚¬è—‰â‚¬åž®äºé‹ä½¸äº—é‹å‹«äºé‹å——äº¯é‹å©‚äº±é‹å¶…äº¹",4,"é‹æ §ä»é‹æ¨ºä»šé‹æ¶˜ä»¢",7,"é‹ï¿½",5,"é‹ï¿½",8,"é‹ç¨¿ä¼–é‹å“„ä¼¡é‹è—‰å€ŽéŒå‚šå€‘éŒå‹«å€–éŒå›§å€éŒå©‚å€ éŒå±½å€¤",20,"éŒã‚…åŠéŒî„å’éŒï¿½",4,"éŒï¿½",6,"éŒï¿½"],["8340","éŒï¿½",17,"éï¿½",5,"éæ¥€å„¤éæ¬å„§",10,"éã„¥å„µéî„å„·éîˆšå„¼éåžå„¾éæ‘å…Œ",4,"éï¿½",9,"éŽï¿½"],["8380","éŽå¤Šå‰¨éŽï¿½",5,"éŽï¿½",13,"éŽï¿½",28,"éå‚šåŽ™éå©‚åŽ¡éåº¡åŽªéæ„¬åŽ­éæ’³åŽ³éæ¨ºåŽµéæ¶˜åŽº",4,"éï½…å…éï¹€åŽéâ•å’éîˆšå¢éå“„å˜éåž®å”­éå‹«å”µéå›§å”ºéå¬ªå•‚éå¿“å•‡éæˆå•Œéæ–¿å•’éæ°¬å•™éç‚²å•›éâ€³å• éï¿½",4,"éî…žå•´éæ‘å–éç‘°å–“éæƒ§å–›é‘ä½¸å™¦é‘å†¨å™®é‘å å™´é‘å¶…å™¹é‘æ„¬å™¿",5],["8440","é‘æ¨ºåšˆé‘æ°¬åš‹é‘ç‚²åšé‘ãˆ åš•é‘ï¿½",5,"é‘î„€åš é‘åžåš¥é‘æ‘åšªé‘æƒ§åžŠé’å‘­åž‘é’å¬ªåž–é’å¿“åžšé’æ’³åžŸé’æ›žåž³é’ç‚²åž·é’â€³åž»é’ï½…åž¾é’ï¹€åŸ€é’î„åŸ‡é’îˆšåŸé’æ’åŸ“é’é›åŸ£é’æƒ§å¢‘",5,"é“å¬ªå¢¡é“å¿“å¢¥é“æ’³å¢ªé“æ¥€å¢­"],["8480","é“æ¬å¢¯é“æ¶˜å¢²é“ç†·å¢µé“ãˆ å¢¸é“ã‚…å¢»é“ã„¥å£‚é“î„€å£„é“î†¼å£ˆé“åžå£‹",9,"é“æƒ§å¦§é”ï¿½",4,"é”ï¿½",6,"é”æˆå§ƒé”ï¿½",6,"é”æ»ƒå§¢é”ãƒ¥å§¦é”Ñƒå§°é”îˆšå§²é”ï¿½",9,"é•â‚¬é•ä½¸åª¯é•å‹«åª´é•å——åª¹é•å©‚åª½é•å¶…å«€é•å¿“å«…é•æ’³å«ˆé•æ›žå«é•ï¿½",5,"é•çŠ²å«›é•ãˆ å«žé•ï¿½",10,"é•ï¿½",7,"é•è¯²å«¾é•è—‰å¯”é–å‚šå¯–é–å‹«å¯šé–å¤Šå¯ é–å¬ªå¯£é–ï¿½"],["8540","é–æˆå¯¬é–æ’³å¯¯é–æ¨ºå¯·é–æ»ƒå°€é–ç†·å°‡é–ã‚…å°Œé–Ñƒå°é–â•å°—é–î„€å°›é–ï¿½",9,"é–ç…Žå°³é—â‚¬é—å‚šå´‰é—å——å´‘é—å±½å´“é—æ„¬å´é—æ¨ºå´£é—æ¶˜å´«é—ãƒ¥å´¹é—î„å´¿é—î…žåµ…é—è·ºåµé—è¯²åµ“é—è—‰åµ•é˜â‚¬é˜ä½¸å·¸é˜å›§å·¿é˜å©‚å¸‹é˜ï¿½"],["8580","é˜ï¿½",4,"é˜æ §å¸¡é˜æ¬å¸¥é˜æ»ƒå¸ªé˜çŠ²å¸¯é˜ã‚…å¸¶é˜î„å¸¿é˜î„€å¹é˜ï¿½",6,"é˜å³°å¹é˜ç‘°å¹’é˜ç…Žå¹—é˜æƒ§å¼¨é™ï¿½",4,"é™åº¡å¼¿é™æ„¬å½ƒé™æ’³å½†é™æ°¬å½é™æ¿†å½é™â€³å½šé™Ñƒå½ºé™å“„å¾“é™åž®æ‚éšå‚šæ‚ˆéšå›§æ‚‘éšæ–¿æ‚©éšæ¬æ‚®éšæ»ƒæ‚½éšã‚…æƒ€éšî„æƒéšå†²æƒ—éšå³°æƒ¡éšè—‰æƒªé›ä½¸æ†˜é›å‹«æ†›é›å›§æ† é›å±½æ†¤é›åº¡æ†¦é›æˆæ†µé›ï¿½",4,"é›ï½…æ‡ƒé›Ñƒæ‡‡",7,"é›æ‘æ‡é›å“„æ‡¢é›åž®æ‹‹éœå†¨æ‹éœå›§æ‹¡éœå¤Šæ‹ªéœå¶…æ‹ºéœæ’³æŒ†éœæ¨ºæŒéœç‚²æŒ“éœçŠ²æŒ•"],["8640","éœãˆ æŒœéœî†¼æŒµéœæ’æŒ¼éœè·ºæŒ¿éœç‘°æ„éœç…Žæ‘éå†¨æ®éå©‚æµéæ §æ‘Œéæ¶˜æ‘–",4,"éî‚¢æ‘¤éîˆšæ‘ªéåžæ‘¯",5,"éè¯²æ‘¼éžâ‚¬éžå‚šæ”¦éžå‹«æ”¨éžå æ”°",4,"éžæŽ‘æ•éžï¿½",5,"éžæ»ƒæ•éžç‚²æ•“éžâ€³æ•Ÿéžï¿½"],["8680","éžã„¥æ•¥éžî‚¢æ•ªéžæ’æ•¶éžé›æ•¹éžç¨¿æ•¼éžå“„æ•¾éžè—‰æ™™éŸå‚šæ™ éŸå›§æ™¥éŸï¿½",4,"éŸæˆæ™µéŸæ’³æ™¹éŸï¿½",4,"éŸæ¿†æšˆéŸç†·æšŠéŸãˆ æšŽéŸã„¥æš•éŸî‚¢æšž",5,"éŸç‘°æš«éŸè—‰æš±é å‘­æž‚é å±½æžé åº¡æž‘é æŽ‘æž”é æ›žæž›é æ¥€æž¤é æ¶˜æž®é ï¿½",6,"é ï¿½",8,"é æ’æŸŽé è·ºæŸ›é å“„æŸ¤é ï¿½",4,"é¡å——æ£é¡å æ£…é¡å¬ªæ£Šé¡å¿“æ£Žé¡æ›žæ£—",4,"é¡ç‚²æ£¤é¡ãˆ æ£«é¡â•æ£´é¡î†¼æ£¸é¡åžæ£¿é¡è·ºæ¤„",4,"é¡åž®æ§€é¢å†¨æ§ƒé¢ï¿½"],["8740","é¢å——æ§†é¢å©‚æ§‹é¢å¶…æ§“",7,"é¢æ¬æ§¡é¢æ»ƒæ§¤é¢çŠ²æ§¨é¢ãˆ æ§¬é¢ï¹€æ§°é¢â•æ§³é¢î‚¢æ§·é¢îˆšæ§¹é¢å†²æ¨€é¢å³°æ¨ƒé¢å“„æ¨‡é¢è—‰æ¨‰é£â‚¬",11,"é£ï¿½",4,"é£æ›žæ«€é£æ°¬æ«…é£ï¿½",4],["8780","é£ï½…æ«é£ï¹€æ«‘é£î…žæ«˜é£îˆšæ«šé£æ’æ«é£æ‘æ«Ÿé£å³°æ«¢é£ç‘°æ«¤é£ï¿½",7,"é¤ï¿½",6,"é¤æ„¬æ®¤é¤æŽ‘æ®§",14,"é¤ï¿½",10,"é¤ï¿½",6,"é¤ç¨¿æ¯ é¤å“„æ¯£é¤ï¿½",12,"é¥ï¿½",8,"é¥æ›žæ´Šé¥æ¨ºæ´é¥æ»ƒæ´ é¥ï¿½",5,"é¥î„€æ´°é¥îˆšæ´¸é¥å†²æµ‚é¥å³°æµ‰é¥è¯²æµ–é¦â‚¬é¦ä½¸æ¸¹é¦å‘­æ¸¿é¦ï¿½",6],["8840","é¦ï¿½",9,"é¦æ¿†æ¹ é¦çŠ²æ¹£é¦ãˆ æ¹¦é¦ãƒ¥æ¹¨é¦Ñƒæ¹¯é¦åžæ¹¶é¦ï¿½",4,"é¦ç…Žæº„é¦åž®æ½„é§å†¨æ½‰é§å‘­æ½Œé§å æ½é§å¬ªæ½š",4,"é§æ¨ºæ½¤é§ãˆ æ½±é§ãƒ¥æ½·é§î„€æ¾é§æ¿æ¾…é§æ’æ¾Šé§é›æ¾‘é§ç‘°æ¾“é§è—‰æ¾—é§åž®ç€«"],["8880","é¨ä½¸ç€²é¨å ç€´é¨å©‚ç€º",4,"é¨ï¿½",6,"é¨æ»ƒçŠé¨ç‚²çé¨ãƒ¥ç—é¨î„ç›é¨îˆšç é¨åžç£é¨é›ç¦é¨å³°ç©",8,"é©ï¿½",6,"é©å±½ç…ƒé©æ„¬ç…ˆé©æ’³ç…é©æ¥€ç…•é©æ»ƒç…˜é©â€³ç…é©ï½…ç…¡",7,"é©î†¼ç…±é©åžç…µé©å†²ç…¹é©è·ºç…¼é©è¯²ç†‚é©æƒ§ç††é«ä½¸çˆŸé«å‹«çˆ¡é«å çˆ¥é«å©‚çˆ©é«åº¡çˆ®é«æ„¬çˆ³é«æ’³çˆºé«æ §ç‰€é«æ¨ºç‰ƒé«æ¶˜ç‰…é«æ¿†ç‰Šé«ãˆ ç‰é«ï¿½",4,"é«ï¿½",4,"é«åžç‰ªé«å†²ç‰¬é«ï¿½",7],["8940","é«ï¿½",5,"æ¿‰ï¿½",6,"æ¿‰åº¡î””æ¿‰æ„¬î”—æ¿‰æ’³î”šæ¿‰æ §î”œæ¿‰ï¿½",4,"æ¿‰ï¿½",5,"æ¿‰ï¿½",4,"æ¿‰ï¿½",16,"æ¿‰åž®î•§æ¾§å‹«î•«æ¾§å›§î•­æ¾§å©‚î•°æ¾§ï¿½"],["8980","æ¾§ï¿½",4,"æ¾§ï¿½",4,"æ¾§æ¶˜î–æ¾§æ¿†î–…",7,"æ¾§ï¿½",17,"æ¾§è—‰â’•æ¾§åž®î—…æ¾¹å‚šî—ˆæ¾¹å‹«î—‹",10,"æ¾¹æŽ‘î—˜æ¾¹æ–¿î—›",13,"æ¾¹ï¿½",5,"æ¾¹î…žï¼æ¾¹åžï¼’æ¾¹æ‘ï¼•æ¾¹å³°ï¼˜æ¾¹ï¿½",7,"æ¾¶å†¨î˜ªæ¾¶å——î˜­",4,"æ¾¶åº¡î˜µæ¾¶æˆî˜·æ¾¶æ’³î˜¼æ¾¶æ¨ºî™€æ¾¶æ¿†î™ƒæ¾¶çŠ²ãæ¾¶ãˆ ãƒæ¾¶ï¹€ãˆæ¾¶î„€ãæ¾¶æ’ã“æ¾¶é›ã–æ¾¶ï¿½"],["8a40","æ¾¶è—‰ãžæ¾¶åž®îš…æ¿‚å†¨îšŠæ¿‚å——îšæ¿‚å±½îš’æ¿‚æ„¬îš—æ¿‚æ’³îšžæ¿‚ï¿½",4,"æ¿‚â€³ã‚£æ¿‚ã‚…ã‚¦",12,"æ¿‚é›ã‚·æ¿‚å“„ã‚»æ¿‚ç…Žã‚¾æ¿‚åž®î›¥æ¿¡å‘­î›®æ¿¡å¬ªî›±æ¿¡åº¡î›´æ¿¡æ„¬î›¶æ¿¡æ–¿î›ºæ¿¡æ¨ºî›¿æ¿¡æ¶˜îœæ¿¡æ¿†îœ„æ¿¡çŠ²Î‘æ¿¡ãˆ Î–"],["8a80","æ¿¡ÑƒÎœæ¿¡î…žÎ æ¿¡åžÎ¤",5,"æ¿¡å“„îžˆæ¿¡è—‰îž‹",6,"æ¿®å›§îæ¿®å¤Šî‘æ¿®å¶…î“æ¿®å¿“îšæ¿®æ §îžæ¿®æ¶˜î£",4,"æ¿®ã‚…Ð•æ¿®ÑƒÐ—æ¿®î„Ð™æ¿®ï¿½",11,"æ¿®å“„Ðªæ¿®è—‰Ð¬æ¿žâ‚¬æ¿žå‚šâ–•æ¿žå¬ªâ—¢æ¿žåº¡â—¤æ¿žæ„¬âŠ•æ¿žæ–¿ã€žæ¿žæ §îž½æ¿žæ¬îŸ€æ¿žæ¶˜îŸƒæ¿žç‚²Äæ¿žãˆ Ã æ¿žï¹€Ä›æ¿žã„¥Ã­",6,"æ¿žå†²Ç–æ¿žï¿½",4,"æ¿žè—‰Åˆæ¿žåž®ï¹£",4,"æ¿ å›§ï¹«æ¿ ï¿½",9,"æ¿ æ §îŸ´æ¿ æ¨ºîŸ¶æ¿ ï¿½",5],["8b40","æ¿ â€³î €æ¿ ã‚…â”æ¿ ï¹€â”„æ¿ â•â”‡",8,"æ¿ ç¨¿â”•æ¿ è¯²â”˜æ¿ è—‰â”šæ¿¯â‚¬",17,"æ¿¯ï¿½",6,"æ¿¯ï¿½",13,"æ¿¯î‚¢î€‹"],["8b80","æ¿¯ï¿½",4,"æ¿¯æ‘î€•æ¿¯å³°î€˜",4,"æ¿¯åž®ç‹ç€šï¿½",5,"ç€šå©‚ç›ç€šï¿½",4,"ç€šæ’³çªç€šæ¥€ç¯ç€šæ°¬ç±ç€šæ¿†çµç€šç†·îŸç€šã‚…î¢ç€šÑƒî¥ç€šî„î©",4,"ç€šï¿½",22,"ç€£ï¿½",11,"ç€£ï¿½",25,"ç€£å†²îƒç€£è·ºîƒ“",7,"ç€›ï¿½",6],["8c40","ç€›ï¿½",7,"ç€›æŽ‘ç“¥ç€›ç‚²ç“²ç€›â€³î„ ç€›ã„¥î„¤ç€›î…žî„§ç€›îˆšî„«ç€›æ‘î„¯ç€›å³°î„±ç€›ç‘°î„´ç€›ç…Žî„·ç€›åž®ç•Ÿç€¹å——ç•©ç€¹å¶…ç•®ç€¹æ„¬ç•±ç€¹æŽ‘ç•¶ç€¹æ §ç–…ç€¹Ñƒî…¿ç€¹â•î†ƒç€¹î…žî†…ç€¹îˆšî†ˆç€¹æ’î†Žç€¹å“„î†’ç€¹ç…Žç˜ˆç€µä½¸ç˜ç€µå ç˜”ç€µå©‚ç˜šç€µå¶…ç˜žç€µï¿½"],["8c80","ç€µæˆç˜®",8,"ç€µçŠ²î‡—ç€µï½…î‡›ç€µÑƒî‡ž",4,"ç€µîˆšî‡¦",6,"ç€µè—‰î‡³çâ‚¬çå‚šçšŸçå‘­çš£çå çš¨çå±½çšªçåº¡çš­çæŽ‘çš³çæ¥€çšºçæ¶˜ç›€çç†·ç›ƒçâ€³åŸƒçï¹€çš‘çâ•è”¼çî‚¢ç¢çî†¼éš˜çæ¿å®‰çå†²æš—çè·ºèƒºçžå†¨çœ²çžå——çœ¹çžå±½ç„çžæŽ‘ç‹çžæ–¿çŽçžæ¥€ç’çžæ°¬ç•çžæ»ƒç—çžç†·é›¹çžã‚…æŠ±",6,"çžæ¿è¾ˆ",6,"çžè¯²å¥”çžè—‰æœ¬å®€â‚¬å®€ï¿½",4,"å®€å¤ŠçŸˆå®€å¬ªçŸŒå®€å¿“çŸ‘å®€æ’³çŸ”å®€ï¿½",4,"å®€ï¿½",4],["8d40","å®€î„ä¼¯å®€îˆšèˆ¶å®€æ’æ³Šå®€è·ºè¡¥å®€å“„ä¸å®€ç…Žç°¿å®„â‚¬å®„å‚šç¡Ÿå®„ï¿½",5,"å®„ï¿½",5,"å®„ï¿½",5,"å®„ï¿½",6,"å®„ãˆ å¸¸å®„Ñƒç•…å®„î‚¢è¶…å®„î†¼æœå®„ï¿½",9,"å®„ï¿½",4],["8d80","å®•ä½¸ç£©å®•å‘­ç£®",5,"å®•ï¿½",4,"å®•æ›žç¤‚å®•æ¨ºç¤„å®•æ°¬ç¤ˆå®•æ¿†ç¤‹",4,"å®•ãƒ¥å·å®•î„ä¼ å®•î„€ç–®",4,"å®•ï¿½",7,"å®•ï¿½",7,"å®“å ç¥²å®“ï¿½",10,"å®“æ¬ç¦‹å®“æ»ƒç¦",10,"å®“î„æ·¡å®“î†¼è›‹å®“åžæŒ¡å®“å†²æ¡£",12,"å®¥ï¿½",21,"å®¥æ°¬ç¨•å®¥æ»ƒç¨™å®¥ç†·ç¨œ"],["8e40","å®¥ï¿½",21,"å®¥ï¿½",12,"å®¸ï¿½",6,"å®¸ï¿½",12,"å®¸æ»ƒçª¡å®¸çŠ²ç½šå®¸ã‚…è—©å®¸î„€ç¿»"],["8e80","å®¸æ¿è¿”å®¸è·ºçŠ¯",4,"å®¸åž®ç«´ç”¯å‹«ç«¾ç”¯å¤Šç¬‚ç”¯å¬ªç¬‰ç”¯åº¡ç¬’ç”¯æ’³ç¬šç”¯ï¿½",7,"ç”¯ï¿½",4,"ç”¯îˆšèµ´ç”¯ï¿½",4,"ç”¯ç‘°è´Ÿç”¯æƒ§ç¼šéªžâ‚¬éªžä½¸ç®–éªžï¿½",5,"éªžï¿½",6,"éªžï¿½",4,"éªžæ»ƒç¯€éªžç†·ç¯„éªžï¿½",14,"éªžé›ç‹—éªžç‘°å’•æ´ä½¸ç°œæ´å†¨ç° æ´å ç°¤æ´å±½ç°«æ´åº¡ç°°æ´æ¨ºç°ºæ´æ¿†éª¸æ´ãˆ æµ·æ´ã‚…é…£",4,"æ´ï¿½",4,"æ´æ‘æ±‰æ´è¯²æ­æ´è—‰åšŽ",6],["8f40","å¯¤å——ç²å¯¤å ç²™",5,"å¯¤æ–¿ç²«å¯¤æ¥€ç²¯å¯¤æ¬ç²´å¯¤ï¿½",11,"å¯¤â•çŒ¾",8,"å¯¤é›æ¡“å¯¤ç‘°æ¢å¯¤ç…Žå”¤å¯®å‘­ç´—å¯®å›§ç´šå¯®å±½ç´žå¯®åº¡ç´£å¯®æŽ‘ç´¨å¯®æ §ç´®å¯®æ°¬ç´²å¯®æ¿†ç´´å¯®â€³é¥¥å¯®ï½…æ¿€"],["8f80","å¯®ã„¥æžå¯®î„€ç±å¯®æ¿ç–¾",6,"å¯®è¯²å†€å¯®æƒ§ä¼Žè¤°ï¿½",14,"è¤°æˆç¶Œè¤°æ¬ç¶’è¤°æ¶˜ç¶”è¤°ç‚²ç¶—è¤°çŠ²å‰‘è¤°ãƒ¥æ¶§è¤°ã„¥å°†è¤°î†¼è’‹è¤°æ’é…±è¤°é›è•‰è¤°ç¨¿èƒ¶è¤°è—‰éª„è¤°åž®ç·å¯°å——ç·§å¯°åº¡ç·©å¯°æˆç·­å¯°æ–¿ç·°å¯°æ°¬ç·µå¯°æ¿†ç·¸å¯°ç†·ç·ºå¯°ï¿½",5,"å¯°â•ç²¾å¯°î„€è­¦",5,"å¯°è·ºé–å¯°ç‘°ç«žå¯°è¯²æª",4,"è¹‡å›§ç¹„è¹‡å©‚ç¹ˆè¹‡åº¡ç¹è¹‡æ–¿ç¹’è¹‡æ°¬ç¹˜è¹‡æ»ƒç¹›è¹‡ç†·ç«£è¹‡ï½…éªè¹‡ï¹€å¡è¹‡â•æ¥·è¹‡îˆšå ªè¹‡æ’ç è¹‡æ‘æ…·è¹‡å³°æŠ—è¹‡å“„è€ƒéŽ¬ï¿½"],["9040","éŽ¬å Ÿâ‚¬å¤‹â‚¬å¬«â‚¬å±¾â‚¬æ„­â‚¬æˆžâ‚¬æ’´â‚¬æ¥â‚¬æ¨»â‚¬æ°­â‚¬ç‚´â‚¬ç†¸â‚¬ãˆ¡â‚¬ï½†â‚¬ã‚†â‚¬î„â‚¬î…Ÿâ‚¬î†½â‚¬ï¿½",4,"éŽ¬ï¿½",4,"éŽ¬èŠ¥â‚¬ç‚¬äºéŽ­ï¿½",6,"éŽ­å±¾äº·éŽ­å¿”äº¼éŽ­æ’´ä»ˆéŽ­æ ¨ä»éŽ­æ¨»ä»œéŽ­æ»„ä»¦éŽ­ç†¸ä»©éŽ­â„ƒä»´éŽ­ï¸½ä¼„éŽ­è¾¨ä¼ˆéŽ­å­˜ä¼’éŽ­é”‹ä¼¨éŽ®â‚¬"],["9080","éŽ®ä½¹å€éŽ®å‘®å€–éŽ®å›¨å€›éŽ®å©ƒå€ éŽ®åº¢å€§éŽ®æ„­å€¯éŽ®æ’´å€³éŽ®æ¥å€¶éŽ®æ¬å€»éŽ®ç‚´å‚éŽ®ãˆ¡å†éŽ®ãƒ¦å‹éŽ®â•‚å‘éŽ®î†½å˜éŽ®è™«åŸéŽ®èˆµå¡éŽ®è§„å¤éŽ®ï¿½",7,"éŽ¯å›¨å„“éŽ¯å¤‹å„—",4,"éŽ¯æŽ“å„žéŽ¯æ—€å„¢éŽ¯æ¥å„¥éŽ¯æ¶™å„ªéŽ¯ï¿½",4,"éŽ¯î…å„½éŽ¯å‰å…ŠéŽ¯é”‹å…éŽ¯ï¿½",4,"éŽ°å‚›å‰éŽ°å‹¬å‰ éŽ°å›¨å‰¨éŽ°å¬«å‰¬éŽ°ï¿½",4,"éŽ°æ ¨å‰¹éŽ°æ¨»å‰»éŽ°æ¶™åŠ€éŽ°æ¿‡åŠ„éŽ°â„ƒåŠ‰éŽ°ãƒ¦åŠéŽ°â•‚åŠ’éŽ°ï¿½",18,"éŽ±â‚¬",6],["9140","éŽ±å›¨åŽœéŽ±å¬«åŽ¤éŽ±å¿”åŽ«éŽ±æŽ“åŽ¯éŽ±æ—€åŽ²",6,"éŽ±ç‚´åŽ½éŽ±çŠ³å€éŽ±ï½†å…éŽ±ãƒ¦å‡éŽ±ï¿½",6,"éŽ±è¾¨å¢éŽ±è™«å´éŽ±èˆµå€",18,"éŽ²å±¾å•€éŽ²ï¿½",4,"éŽ²ï¿½"],["9180","éŽ²ï¿½",6,"éŽ²ï¿½",8,"éŽ²î…å•±éŽ²ï¿½",9,"éŽ²ï¿½",5,"éŽ²æŒŽå™£éŽ³ä½¹å™§",4,"éŽ³å¤‹å™·",4,"éŽ³æ’´åš‚",16,"éŽ³ï¿½",13,"éŽ³ï¿½",8,"éŽ´â‚¬",5,"éŽ´å›¨åž‘éŽ´æ’´åžŸéŽ´æ¬åž³éŽ´æ¿‡åž¶éŽ´çŠ³åž¼éŽ´ï¸½åŸ€éŽ´ã„¦åŸ„éŽ´î‚£åŸˆéŽ´îˆ›åŸŒéŽ´è¾¨åŸéŽ´åž«åŸ—éŽ´ï¿½",4,"éŽµå‚›å¢‘éŽµå‘®å¢•éŽµï¿½"],["9240","éŽµå¿”å¢£éŽµæ›Ÿå¢«éŽµæ¥å¢®éŽµæ°­å¢±",6,"éŽµã‚†å¢ºéŽµã„¦å£‰éŽµå‰å£ŒéŽµåž«å£éŽµå‘Šå£“éŽµç»˜å£—éŽ¶ä½¹å¦­éŽ¶å†©å¦³éŽ¶å—˜å¦µéŽ¶å Ÿå¦º",5,"éŽ¶æ—€å§éŽ¶æ»„å§–éŽ¶ç‚´å§¡éŽ¶ï¸½å§§éŽ¶â•‚å§«éŽ¶î…Ÿå§°éŽ¶îˆ›å§²éŽ¶å‰å§µéŽ¶å­˜å§¸éŽ¶é”‹å§¼éŽ¶çƒ˜å¨‹éŽ·â‚¬éŽ·ï¿½"],["9280","éŽ·å†©åª¼éŽ·å¿”å«…éŽ·æ›Ÿå«•éŽ·ç‚´å«šéŽ·â„ƒå«ŸéŽ·î…å«¬éŽ·ç‰ˆå«´éŽ·åž«å«ºéŽ·è§„å«¼éŽ·ç»˜å¯‘éŽ¸å†©å¯—éŽ¸å‘®å¯™éŽ¸å©ƒå¯¢éŽ¸å±¾å¯¦éŽ¸å¿”å¯ªéŽ¸æŽ“å¯­éŽ¸æ—€å¯±éŽ¸æ¥å¯´éŽ¸æ¬å¯½éŽ¸ï¸½å°ŽéŽ¸â•‚å°™éŽ¸î…Ÿå°žéŽ¸ç‰ˆå°¡éŽ¸ï¿½",5,"éŽ¸ç»˜å°²éŽ¸ç‚¬å°¶éŽ¹â‚¬éŽ¹ä½¹å´‰éŽ¹å›¨å´éŽ¹å©ƒå´™éŽ¹æŽ“å´œéŽ¹æ—€å´ ",7,"éŽ¹çŠ³å´µéŽ¹ãƒ¦å´·éŽ¹ã„¦å´»éŽ¹î‚£å´¿éŽ¹îˆ›åµƒéŽ¹å‰åµ†éŽ¹å­˜åµ‰éŽ¹å‘ŠåµéŽ¹å…¼åµ”éŽ¹ç‚¬åµ–éŽºä½¹å·¸éŽºå‹¬å·ºéŽºå—˜å¸‡éŽºå¶†å¸’éŽºæ’´å¸žéŽºæ›Ÿå¸¡éŽºï¿½",6,"éŽºâ„ƒå¸³éŽºï¸½å¸¿éŽºîˆ›å¹ˆéŽºå‰å¹éŽºèˆµå¹‘éŽºç»˜å¹—éŽºæŒŽå¼¨"],["9340","éŽ»ä½¹å¼¬éŽ»å†©å¼²éŽ»å›¨å¼µéŽ»å©ƒå¼¸éŽ»å±¾å½‚éŽ»æ’´å½…éŽ»æ›Ÿå½ˆ",6,"éŽ»ç†¸å½šéŽ»ï¿½",4,"éŽ»î‚£å½«éŽ»î†½å½²éŽ»ç‰ˆå½µéŽ»è™«å½½éŽ»é”‹å¾†éŽ»çƒ˜å¾ŽéŽ»å…¼å¾“éŽ¼å†©æ‚‡éŽ¼ï¿½",4,"éŽ¼å¶†æ‚—éŽ¼æˆžæ‚žéŽ¼ï¿½",5,"éŽ¼æ¿‡æ‚·éŽ¼ãˆ¡æ‚¾éŽ¼ï¿½"],["9380","éŽ¼ãƒ¦æƒ‚éŽ¼ã„¦æƒ„éŽ¼î‚£æƒ",5,"éŽ¼ï¿½",4,"éŽ¼ç»˜æƒ£éŽ¼ç‚¬æ†–éŽ½å‚›æ†™éŽ½å¤‹æ†¢",6,"éŽ½æ’´æ†°éŽ½æ ¨æ†²éŽ½ï¿½",4,"éŽ½ï¿½",7,"éŽ½ã„¦æ‡‰éŽ½î‚£æ‡éŽ½ï¿½",9,"éŽ½ï¿½",6,"éŽ¾å†©æ‹žéŽ¾ï¿½",8,"éŽ¾æ’´æŒƒéŽ¾æ¥æŒŠéŽ¾æ°­æŒéŽ¾æ»„æŒéŽ¾ï¿½",4,"éŽ¾ãƒ¦æŒ¦éŽ¾Ñ„æŒ©éŽ¾î…æŒ®éŽ¾îˆ›æŒ¶éŽ¾å‰æŒ¸éŽ¾å­˜æŒ¾éŽ¾è§„æ‡éŽ¾èŠ¥æ‘éŽ¾æŒŽæ§éŽ¿å†©æ«éŽ¿ï¿½",6,"éŽ¿å¿”æ¼éŽ¿æ’´æ‘‚éŽ¿æ›Ÿæ‘‰éŽ¿æ¬æ‘Ž"],["9440","éŽ¿æ¶™æ‘éŽ¿æ¿‡æ‘•éŽ¿çŠ³æ‘—éŽ¿ï½†æ‘œéŽ¿ï¿½",24,"é€ï¿½",7,"é€ï¿½",7,"é€ï¿½",4,"é€ï¿½",8],["9480","é€ãˆ¡æ•šé€ã‚†æ• ",4,"é€î„æ•ªé€ç‰ˆæ•±é€å‰æ•µé€é”‹æ•½é€å…¼æ–€éâ‚¬",4,"éå—˜æ™£éå©ƒæ™ªéå¶†æ™­éæ„­æ™µéæ’´æ™¹éæ¥æ™¿éæ°­æš…éç†¸æšŠéâ„ƒæšéãƒ¦æš“éã„¦æš•éî…æš›éî†½æšžéè¾¨æš¢éåž«æš¥éï¿½",14,"é‚å Ÿæž†é‚å©ƒæžé‚åº¢æžé‚æŽ“æž–é‚æ›Ÿæž›é‚æ¨»æž¤é‚æ¿‡æž®é‚çŠ³æž¹é‚ï½†æž½é‚ã„¦æŸ‚é‚î„æŸˆé‚ï¿½",7,"é‚çƒ˜æŸ£é‚ç‚¬æŸ¨éƒâ‚¬éƒå‚›æ£éƒå Ÿæ£„éƒå©ƒæ£ˆéƒæ„­æ£éƒæ’´æ£“éƒæ›Ÿæ£™",7,"éƒâ„ƒæ£§éƒã‚†æ£¯éƒï¿½"],["9540","éƒå‰æ£¾éƒå­˜æ¤€éƒå‘Šæ¤†éƒï¿½",4,"é„ä½¹æ§ƒé„å‘®æ§†é„å Ÿæ§ˆé„å¬«æ§é„æ„­æ§•é„æŽ“æ§šé„æ¥æ§é„æ°­æ§¢é„æ»„æ§¥é„â„ƒæ§©é„ï½†æ§«é„ï¸½æ§±é„î…æ§´é„î„æ§·é„ç‰ˆæ§»é„è™«æ¨‚",4,"é„èŠ¥æ¨‹é…â‚¬é…å‚›æª®",6,"é…å¶†æª¸é…æ„­æª»é…ï¿½"],["9580","é…æ¬æ«…é…æ»„æ«‡é…ç‚´æ«Šé…ãˆ¡æ«é…ãƒ¦æ«‘é…ï¿½",4,"é…è¾¨æ«œé…è™«æ«Ÿé…å‘Šæ«£é…ç»˜æ«¦é…èŠ¥æ«©é†â‚¬é†ä½¹æ®é†å‘®æ®•é†å Ÿæ®™é†å©ƒæ®é†å¶†æ® é†å¿”æ®£é†æŽ“æ®¦é†æ—€æ®¨é†ï¿½",4,"é†ï¿½",8,"é†ï¿½",4,"é†ï¿½",4,"é†åž«æ¯é†é”‹æ¯Ÿé†çƒ˜æ¯£é†å…¼æ¯¥é†ï¿½",25,"é‡æ°­æ´–",7,"é‡Ñ„æ´¦é‡ï¿½",5,"é‡è¾¨æµ€é‡èˆµæµ‰é‡çƒ˜æµ•é‡èŠ¥æ¸·éˆå‚›æ¸»"],["9640","éˆå‹¬æ¸½éˆå—˜æ¸¿éˆå±¾æ¹ˆéˆå¿”æ¹‹éˆæŽ“æ¹éˆæ ¨æ¹—éˆæ¬æ¹šéˆæ»„æ¹ éˆï¿½",5,"éˆÑ„æ¹¬éˆî†½æ¹´éˆå‰æ¹·éˆèˆµæ¹»éˆå‘Šæ¹½éˆç»˜æº‚éˆç‚¬æºˆé‰ä½¹æ½‰é‰å‘®æ½Žé‰å©ƒæ½’é‰å¶†æ½šé‰æ—€æ½Ÿé‰ï¿½",4,"é‰æ¿‡æ½°é‰ï½†æ½³é‰ï¸½æ½·é‰î‚£æ½¿é‰î†½æ¾…é‰å­˜æ¾"],["9680","é‰å‘Šæ¾’é‰çƒ˜æ¾”é‰èŠ¥ç€«é‹å‚›ç€®é‹å‘®ç€±é‹å Ÿç€¶é‹å±¾ç€ºé‹åº¢ç€¼é‹æˆžç€¿é‹æ’´çé‹æ ¨ç†é‹æ¶™çé‹çŠ³çé‹ã‚†ç•é‹â•‚ç›é‹î†½ç¡é‹å‰ç¤é‹ï¿½",7,"éŒå‚›ç„»",9,"éŒæ›Ÿç…éŒæ¥ç…•éŒç†¸ç…›éŒï½†ç… éŒï¸½ç…£éŒã„¦ç…ªéŒî‚£ç…­éŒî†½ç…µéŒï¿½",7,"éŒç‚¬çˆœéå‚›çˆŸéå‹¬çˆ¢éå¶†çˆ¯éæŽ“çˆºéæ›Ÿç‰",4,"éç‚´ç‰ŠéçŠ³ç‰",6,"éï¿½",6,"éå­˜ç‰­éèˆµç‰¶éç»˜ç‰½å¦—å›¨î”å¦—å¶†î””å¦—æŽ“î”›",5],["9740","å¦—æ»„î”¢å¦—ç‚´î”¤å¦—î…â€–",7,"å¦—åž«ã€Œ",8,"å§Šå‚›î•©å§Šï¿½",7,"å§Šæ„­î•¶å§ŠæŽ“î•¹å§Šæ›Ÿî•»å§Šï¿½",9,"å§Šï½†â…³å§Šãƒ¦â…¸å§Šî…î¦å§Šî„î©å§Šè¾¨â’‰å§Šå­˜â’å§Šé”‹â’"],["9780","å§Šï¿½",6,"å¦«ä½¹î—ˆ",5,"å¦«å©ƒî—‘å¦«åº¢î—”å¦«æ„­î—–å¦«æ’´î—™å¦«æ ¨î—œå¦«æ¬î— ",4,"å¦«â„ƒï¼‚å¦«ï¿½",9,"å¦«îˆ›ï¼’å¦«è™«ï¼”å¦«èˆµï¼—å¦«å‘Šï¼›å¦«èŠ¥ï¼žå¦«æŒŽî˜¥å¦žå‚›î˜¨å¦žå‹¬î˜«",4,"å¦žå±¾î˜´å¦žæˆžî˜¸",11,"å¦žâ„ƒã‚å¦žï½†ã…",7,"å¦žî†½ãå¦žè¾¨ã’å¦žè™«ã•å¦žèˆµã—å¦žå‘Šãšå¦žç»˜ãœå¦žç‚¬îš…å¦¤ä½¹îšˆ",16,"å¦¤æ›Ÿîš›å¦¤æ¨»îšžå¦¤æ¶™îš¡å¦¤ï¿½"],["9840","å¦¤â„ƒã‚¢å¦¤ã‚†ã‚¥å¦¤Ñ„ã‚¨å¦¤â•‚ã‚ªå¦¤î„ã‚­å¦¤îˆ›ã‚°å¦¤ï¿½",4,"å¦¤çƒ˜ã‚»å¦¤èŠ¥ã‚¾å¦¤æŒŽî›¦å§’å†©î›ªå§’å©ƒî›°å§’å±¾î›³",5,"å§’æ ¨î›¼å§’æ¬î›¿å§’ï¿½",9,"å§’â•‚Îšå§’î„Îžå§’îˆ›Î å§’å‰Î¤å§’åž«Î§å§’å‘Šîž…å§’çƒ˜îžˆå§’ï¿½"],["9880","å§’ç‚¬îž‹å¦²â‚¬å¦²ï¿½",7,"å¦²å¬«î’å¦²å¿”î–å¦²æŽ“î˜å¦²ï¿½",5,"å¦²æ»„î¢å¦²ç‚´Ð",11,"å¦²î†½Ðå¦²ç‰ˆÐŸå¦²ï¿½",9,"å¦²ç‚¬â–ˆ",9,"å¦¯ï¿½",11,"å¦¯ï¿½",5,"å¦¯çŠ³Ã¡",5,"å¦¯â•‚Çå¦¯î„Åå¦¯î†½Ã²å¦¯å‰Ç”å¦¯å­˜Ç˜",6,"å¦¯ï¿½",4,"å§—å‘®ï¹©å§—ï¿½",7,"å§—ï¿½",6,"å§—ï¿½"],["9940","å§—ï¿½",4,"å§—ãˆ¡î €å§—ã‚†â”‚",10,"å§—ï¿½",6,"å§—çƒ˜â”—å§—èŠ¥â”šå§—æŒŽçŠå¦¾å‚›çŒå¦¾ï¿½",8,"å¦¾å¿”çŸ",4,"å¦¾ï¿½",7,"å¦¾ï¿½",5],["9980","å¦¾Ñ„î€‡å¦¾î…î€Œ",114,"å¨†ãƒ¦îƒå¨†ï¿½",6],["9a40","å¨†îˆ›îƒ‹å¨†è¾¨îƒŽå¨†å­˜îƒå¨†èˆµîƒ“å¨†ç»˜îƒ—å¨†èŠ¥îƒšå§â‚¬å§ä½¹ç“Šå§å‹¬ç“å§å Ÿç““å§å¬«ç“–",11,"å§ï¿½",7,"å§ã„¦î„¢å§ï¿½",13,"å§çƒ˜î„¶å§ç‚¬î„¸å¨ˆâ‚¬å¨ˆå‘®ç•§"],["9a80","å¨ˆå±¾ç•®å¨ˆå¿”ç•°å¨ˆæˆžç•¶å¨ˆæ›Ÿç•»å¨ˆæ¨»ç•½å¨ˆï¿½",4,"å¨ˆï¿½",7,"å¨ˆï¿½",7,"å¨ˆèˆµî†",6,"å§£â‚¬å§£å†©ç˜Žå§£ï¿½",4,"å§£å±¾ç˜žå§£æ„­ç˜§å§£æ¨»ç˜¹å§£ï¿½",4,"å§£ï¿½",7,"å§£î„î‡¢å§£î†½î‡¥å§£è¾¨î‡§å§£å­˜î‡«å§£é”‹î‡­å§£çƒ˜î‡°å§£å…¼î‡³",6,"å§˜ï¿½",4,"å§˜åº¢çš°å§˜æ¥çš½å§˜æ¿‡ç›€å§˜çŠ³åŸƒå§˜ãƒ¦çŸ®å§˜î„ç¢å§˜è¾¨ä¿ºå§˜èˆµèƒºå§˜è§„æ˜‚å§˜ç»˜å‡¹å§˜ç‚¬ç¿±å§¹å†©çœ²å§¹å‘®çœ»å§¹ï¿½",4,"å§¹æˆžçŠå§¹æ’´çŽå§¹ï¿½"],["9b40","å§¹æ¬ç”å§¹ãˆ¡ä¿å§¹ãƒ¦å®å§¹Ñ„é²",4,"å§¹è¾¨èƒŒå§¹åž«ç‹ˆå§¹å‘Šç„™å§¹ç»˜å¥”å§¹æŒŽçž¼å¨Œå‹¬çŸ…å¨Œå©ƒçŸ‰å¨Œå¶†çŸŒå¨ŒæˆžçŸ‘å¨Œæ›ŸçŸ•å¨Œæ¥çŸ˜å¨Œæ°­çŸžå¨Œæ¿‡çŸ å¨ŒçŠ³å¹¶å¨Œã„¦é“‚å¨Œîˆ›èˆ¶å¨Œå­˜é©³å¨Œèˆµåœå¨Œçƒ˜ç¡›å¨‰ä½¹ç¡žå¨‰å†©ç¡¢å¨‰å›¨ç¡¤å¨‰å¬«ç¡©å¨‰åº¢ç¡°å¨‰æˆžç¡³å¨‰ï¿½"],["9b80","å¨‰æ¬ç¡½å¨‰æ»„ç¢€å¨‰ç†¸é•¿å¨‰ï¸½åŽ‚å¨‰â•‚è¶…å¨‰î…Ÿå·¢å¨‰å­˜å½»å¨‰æŒŽç£¤å¨²å‚›ç£§å¨²å‘®ç£«å¨²å Ÿç£¯å¨²å©ƒç£µå¨²å¿”ç£¹å¨²æˆžç£½å¨²æ—€ç£¿å¨²æ ¨ç¤ƒå¨²æ»„ç¤‰å¨²ï¿½",5,"å¨²ï¸½å·å¨²â•‚èˆ¹å¨²î…Ÿç–®å¨²ç‰ˆåˆ›å¨²èˆµæ¶å¨²å‘Šæ˜¥å¨²æŒŽç¥¤å¨´å‚›ç¥«å¨´å¤‹ç¥µå¨´æ„­ç¦ƒå¨´æ ¨ç¦‡å¨´æ¨»ç¦Œå¨´æ¿‡ç¦‘å¨´â„ƒè€½å¨´ã‚†å•å¨´Ñ„èƒ†å¨´î‚£æƒ®å¨´î…Ÿè›‹å¨´è¾¨æŒ¡å¨´è™«æ¡£å¨´èˆµå€’å¨´çƒ˜ç¥·å¨´ï¿½",4,"å¨‘å†©ç§³å¨‘å—˜ç§¶å¨‘å©ƒç§¼å¨‘å¶†ç¨„å¨‘æ„­ç¨ˆå¨‘ï¿½",4,"å¨‘æ»„ç›¯å¨‘ãƒ¦å†¬å¨‘î…Ÿæ ‹å¨‘è¾¨å†»å¨‘å­˜æŠ–å¨‘é”‹è±†",5,"å¨£ä½¹ç©«å¨£å†©ç©²å¨£å¤‹ç©µ"],["9c40","å¨£å¶†ç©¾å¨£å¿”çª…å¨£æŽ“çªŠå¨£æ—€çªŒå¨£æ¥çª”å¨£æ¶™çªšå¨£ç†¸å‘å¨£ï½†ä¼å¨£Ñ„æ³•å¨£â•‚è—©å¨£î…ŸçŸ¾å¨£ç‰ˆå‡¡å¨£å­˜è¿”å¨£èˆµçŠ¯å¨£çƒ˜æ–¹",7,"å¨“å—˜ç«¾å¨“å Ÿç¬å¨“å¬«ç¬å¨“æŽ“ç¬“å¨“æ›Ÿç¬œå¨“æ¬ç¬¡å¨“æ»„ç¬§å¨“ç†¸æ¶ªå¨“ï¸½æŠšå¨“ã„¦é‡œå¨“î„åºœå¨“ç‰ˆå‰¯å¨“è™«å‚…"],["9c80","å¨“èˆµé˜œå¨“è§„å¯Œ",7,"å©€ï¿½",7,"å©€å¿”ç®°å©€æˆžç®³å©€æ›Ÿç®ºå©€æ¬ç®½å©€æ»„ç¯€å©€ç‚´ç¯„",10,"å©€î„å¼“å©€ï¿½",14,"å©§â‚¬å©§ä½¹ç°œå©§å‹¬ç°¢å©§å Ÿç°¥",4,"å©§ï¿½",6,"å©§æ¬ç°¹å©§æ¶™ç°¼å©§ç‚´ç±‚å©§â„ƒæµ·å©§ã‚†å®³å©§ã„¦æ†¨å©§î‚£å«å©§î…Ÿå¯’å©§ç‰ˆæ’¼å©§åž«ç„Šå©§è§„æ­å©§ç‚¬åšŽå©Šâ‚¬å©Šå†©ç²å©Šå‘®ç²å©Šå Ÿç²”å©Šå©ƒç²šå©Šå¶†ç² å©Šæ„­ç²§å©Šæ ¨ç²¯å©Šæ¬ç²µå©Šæ»„ç²·å©Šï½†æˆ·å©Šï¿½",5],["9d40","å©Šç‰ˆæ§å©Šå‰æ€€å©Šåž«æ¬¢å©Šé”‹æ¡“å©Šï¿½",7,"å©•å†©ç´•å©•å‘®ç´˜å©•å Ÿç´›",4,"å©•æ„­ç´¤å©•æŽ“ç´ª",9,"å©•â„ƒé¥¥å©•ï½†è®¥å©•ï¸½å§¬å©•ã„¦æ£˜å©•î†½åŠå©•å‰å³å©•åž«æŒ¤",6,"å©•æŒŽçµ¸å¨¼ä½¹çµº"],["9d80","å¨¼å†©çµ¼å¨¼å‘®ç¶€å¨¼å¤‹ç¶‚å¨¼å±¾ç¶†",9,"å¨¼æ¬ç¶’å¨¼æ¶™ç¶•å¨¼ç†¸ç¶˜å¨¼â„ƒå‰‘å¨¼ã‚†æ¸å¨¼ï¿½",5,"å¨¼îˆ›æ¡¨å¨¼è¾¨åŒ å¨¼åž«è•‰å¨¼é”‹ç„¦å¨¼ç»˜æµ‡",6,"å©¢å‘®ç· å©¢å›¨ç·¤å©¢å¬«ç·©",12,"å©¢æ¿‡ç·¸å©¢ç†¸ç·ºå©¢ï¿½",4,"å©¢ï¿½",10,"å©¢å­˜é•œå©¢é”‹é–å©¢ï¿½",5,"å©µä½¹ç¸¾",5,"å©µï¿½",6,"å©µï¿½",10,"å©µç†¸ç«£å©µï½†éƒ¡å©µï¿½"],["9e40","å©µï¿½",7,"å©µï¿½",32,"éŽï¿½",7,"éŽï¿½",6,"éŽï¿½",6],["9e80","éŽï¿½",9,"éŽå‰â‚¬é£Žâ‚¬å“¥â‚¬ï¿½",17,"éå¶‡äº·éï¿½",13,"éï¿½",11,"éî†¾ä¼‡éèŒ¬ä¼‹éå¯¸ä¼”éåœ­ä¼œéè¤ä¼£éä½ºå€éå†ªå€“éå—™å€—éå ¢å€ éå²€å€£éå¿•å€«éæˆ å€±éæ¥ƒå€¶éæ°±å€¹éï¿½",12,"éæ‰®å›éå¯¸åŸéå‰å¤éå‰§åªé‘å‹­å„é‘å—™å„‘é‘å¤Œå„–",12,"é‘ï¿½"],["9f40","é‘æ»…å„©é‘ç‚µå„¬é‘ï¼„å„®é‘ï½‡å„±é‘î†å„ºé‘ï¿½",6,"é‘å“¥å…’é‘è¤å…—é‘ï¿½",10,"é’ï¿½",4,"é’æˆ å‰´é’æ—‚å‰¹é’ï¿½",10,"é’ï¿½",7,"é’èŒ¬åŠ¤é’ï¿½"],["9f80","é’ç”µåŠ®",13,"é“å—™åŽ™é“å ¢åŽœé“å¬¬åŽ¤é“ï¿½",12,"é“æ¿ˆåŽ½",4,"é“ãƒ§å",4,"é“îˆœåžé“è¾©å´é“ç”µå¾é“é£Žå‚é“è¤å‹é“ï¿½",5,"é”ï¿½",4,"é”å¬¬å”½é”å¶‡å•‚é”æ„®å•ˆé”æŽ”å•Œé”æ› å•é”æ¥ƒå•”",4,"é”ï¿½",6,"é”â•ƒå•°é”î‚¤å•³",5,"é”å¯¸å–é”é£Žå–é”ï¿½",8,"é•ï¿½",9,"é•ï¿½",4],["a040","é•ï¿½",9,"é•ï¼„åš”é•ï½‡åš–é•ï¸¾åšš",5,"é•ï¿½",9,"é•ï¿½",11,"é–ï¿½",19],["a080","é–æ¶šåž³é–ï¿½",9,"é–â•ƒåŸ†é–î… åŸ‰é–îˆœåŸé–å´‡åŸ“é–è™¹åŸ£é–å‰§å¢",6,"é—å¤Œå¢›é—å¬¬å¢¡é—å¿•å¢£é—æˆ å¢¦é—æ—‚å¢ªé—æ¥ƒå¢­é—æ°±å¢±é—ç‚µå¢µé—ï½‡å¢¹é—ãƒ§å¢¾é—î†å£‚é—î„‚å£„é—æ‰®å£‰é—å´‡å£Œé—å‰å£é—å“¥å£”é—è‚©å£—é˜å‚œå¦°é˜ï¿½",4,"é˜å²€å¦¿é˜æ„®å§‚é˜ï¿½",11,"é˜ï¿½",11,"é˜î†¾å§³é˜èŒ¬å§µé˜ç”µå§¾",6,"é™å‘¯åª¶é™å›©åªºé™å©„åª¼é™å²€å«ƒé™æˆ å«‡é™æ—‚å«Šé™æ «å«Žé™æ°±å«‘"],["a1a1","éŠ†â‚¬éŠ†ä½µâ‚¬å®åŒªå£¦åš¶ã„£â‚¬å†¦â‚¬å‘ªâ‚¬æ—“ç¶–éˆ¥æ ¤â‚¬ï¸¹â‚¬æ¨·â‚¬æ¬Œâ‚¬æº¾â‚¬æ¿„â‚¬æ–»â‚¬æ›˜â‚¬ï¿½",7,"éŠ†æ ¥â‚¬æ¤¼â‚¬æ„©â‚¬æ‡§æ³µæ¤•å°åŸ—éˆ­Ñ€åŸéˆ­æˆ”åž™éˆ­îåŸ„éˆ­å šåŸ›éˆ­æ°£å§¤éˆ­ãƒ¢åž¹éˆ±æŽ†å§éˆ­î‚ŸåŸ‰éˆ®â™€å¢éˆ®å šåŸ¥éˆ­æ¿ƒå¢µéˆ®î†¹å£‡éˆ®ã‚‚å¢ºéˆ­ç‚©åŸ–éˆ­ç²¹æªªéˆ¾â‚¬æŽ³éˆ¥æµ‹â‚¬æ–¥å‰é”›åŠ¼ã‚ç¹é”Ÿâ™€â‚¬å¥¥Ñ€å‰¸éˆ½å—æ§„éˆ¼å¬§æ£Œéˆ¼åº˜æ£éˆ¼å—æž´éˆ»çŠ«æŸéˆ»æµ‹â‚¬çƒ©å•‹éˆ«æ„¨å•ˆéˆ«æ’±â‚¬ï¿½"],["a2a1","éˆªï¿½",9],["a2b1","éˆ·ï¿½",19,"éˆ¶ï¿½",19,"éˆ¶ï¿½",9],["a2e5","éŠï¿½",9],["a2f1","éˆªï¿½",11],["a3a1","é”›ä¾Šç´“é”›å†¿éªé”›ï¿½",88,"é”Ÿï¿½"],["a4a1","éŠ‡ï¿½",82],["a5a1","éŠˆï¿½",85],["a6a1","èž’",16,"å±",6],["a6c1","ä¼ª",16,"èŸ½",6],["a6e0","é””ç¢‰ä»˜é””ç™¸è´Ÿé””åŒ¡ç®‘é””æ–¤å¦‡é”•ä¾Šç®“é”•å†¿ç®˜"],["a6ee","é””ä¼™è®£é””å‡¤çˆ¶é””ï¿½"],["a6f4","é””ç­¹å¤"],["a7a1","è¢—",5,"è¡¼è¢ž",25],["a7d1","é‚ª",5,"è¤¢å¸",25],["a840","è— è—¡è—±éˆ¥æ’¯â‚¬æ›—â‚¬ãƒ¢â‚¬ç¢˜å‰ éˆ©å¤†å•éˆ«æ¤»å•’éˆ«æ¬Œåž¥éˆ­ç†²åž¼éˆ®æŽ†å¢»éˆ®Ñ€å¨éˆºï¿½",35,"éˆ»ï¿½",6],["a880","éˆ»ï¿½",7,"éˆ»æ’¯æž–éˆ»æ›—æŸ¤éˆ»è§£æ£¦éˆ¼ï½‚æ£¨éˆ¼ãƒ¢æ§ˆéˆ¯æ›˜â‚¬æŽ‹â‚¬æ¿„â‚¬ï¿½"],["a8a1","è†©è°©èè„¿è†¿èŒ…è‡ŽçŒ«å¢¨é“†è’çŸ›è‰’è´¸è•è²Œå¥´ç…¤è™éœ‰è›è¢è¤è§çœ‰é”šè“±"],["a8bd","è‰…è‰Œ"],["a8c0","ä¼ž"],["a8c5","éŠŠï¿½",36],["a940","éŠ†ï¿½",8,"éŠ‘ï½ƒå¸‹éŠ•å¿‹å¸¨éŠ•æ¿„å¸ªéŠ•Â°å¼°éŠ–åº›å½‚éŠ–æŽ‹å½†é””å¸®ç«£é”Ÿï¿½"],["a959","éˆ©Â°åŸ"],["a95c","éˆ¥ï¿½"],["a960","éŠ‰ç¬ºå€¹éŠˆæº¿å…˜éŠ‰ä¿±â‚¬å—å€½éŠˆçƒ‡ç®Ÿ",9,"é”•æ—“ç®·é”•æ µç®ºé”•ï¿½",8],["a980","é”•ï¿½",4,"é”•îŸ’ä¾›é”•îŽå…¬"],["a996","éŠ†ï¿½"],["a9a4","éˆ¹â‚¬",75],["aa40","é™æ»…å«•é™ç†ºå«",5,"é™î†å«¬é™ç”µå«¸é™åœ­å«¿é™å‰§å¬éšâ‚¬éšå‚œå¯—",5,"éšå¬¬å¯£éšå¶‡å¯©éšæ„®å¯«éšæŽ”å¯¯éšæ¨¼å¯µéšæ°±å°‚éšçŠµå°ˆéšã‚‡å°éšÑ…å°éšî… å°Ÿéšæ‰®å°£éšå´‡å°©éšå‰å°¯éšè¤å°²éšç•Œå´",8],["aa80","é›å¤Œå´é›å¬¬å´’é›åº£å´—é›æˆ å´œé›æ—‚å´Ÿé›æ «å´¢",7,"é›ï¿½",10,"é›î†¾åµƒé›ï¿½"],["ab40","é›ï¿½",11,"é›ï¿½",4,"éœå‘¯å·»éœå ¢å¸„éœå²€å¸Šéœå¿•å¸ŽéœæŽ”å¸—éœæ—‚å¸Ÿéœæ¥ƒå¸¢éœæ¬‘å¸¤éœæ»…å¸©éœç‚µå¸¬éœï¼„å¸²",5,"éœî†å¹€éœî… å¹ˆéœå¯¸å¹éœå‰å¹éœåœ­å¹–éœç•Œå¹˜éœè·¨å¼«éï¿½",4],["ab80","éå¬¬å¼»éåº£å½ƒ",6,"éæ°±å½Œéæ»…å½Žéç†ºå½™éãˆ¢å½›éã‚‡å½Ÿéã„§å½§éî‚¤å½«éî†¾å½²éæ‰®å½µéï¿½",4],["ac40","éï¿½",10,"éžå‹­æ‚‹éžå ¢æ‚‘éžå²€æ‚•éžåº£æ‚œ",8,"éžï¿½",5,"éžï½‡æ‚¿éžÑ…æƒ„éžî‚¤æƒŒéžîˆœæƒéžèŒ¬æƒ™",4,"éžç•Œæƒ¥éžè·¨æ†–éŸï¿½",11],["ac80","éŸï¿½",6,"éŸæ «æ†³éŸæ¿ˆæ†¼",12,"éŸî†¾æ‡éŸï¿½",4,"éŸå“¥æ‡éŸï¿½"],["ad40","éŸè¤æ‡ éŸç•Œæ‡£é å‚œæ‹•é å‘¯æ‹žé å ¢æ‹¤é å©„æ‹°é å¶‡æ‹¸é ï¿½",10,"é æ¿ˆæŒ“",7,"é ï¿½",15,"é ï¿½",12],["ad80","é¡ï¿½",9,"é¡ï¿½",8,"é¡æ¿ˆæ‘•é¡ï¼„æ‘œé¡ï¿½",6,"é¡æ‰®æ‘«é¡ï¿½"],["ae40","é¡å´‡æ‘°é¡ï¿½",6,"é¢â‚¬é¢ä½ºæ”¤é¢å†ªæ”¨",7,"é¢åº£æ”¼é¢æŽ”æ•‚é¢æ› æ•„é¢æ¥ƒæ•é¢æ¿ˆæ•’é¢ï¿½",4,"é¢ï¸¾æ•¡é¢î†æ•­é¢å¯¸æ•¹é¢åœ­æ•¿é¢ç•Œæ–‚é£ä½ºæ™œé£å†ªæ™žé£å—™æ™£é£å¤Œæ™©é£å¶‡æ™²é£æˆ æ™µé£æ’¶æ™»é£æ «æ™½é£ï¿½"],["ae80","é£ï¿½",7,"é£Ñ…æš”é£â•ƒæš™",6,"é£å´‡æš¤é£å‰æš¦é£ï¿½",4,"é¤â‚¬é¤ä½ºæºé¤å‹­æž€é¤ï¿½"],["af40","é¤å ¢æž†é¤å©„æžŒé¤å¶‡æžŽé¤æ„®æž”é¤æ› æž é¤æ¶šæž©é¤ç‚µæž¹é¤ï¿½",4,"é¤î… æŸ–é¤é£ŽæŸ¡é¤è¤æŸ¨é¥â‚¬é¥ä½ºæ¢¿é¥å¬¬æ£‡é¥åº£æ£Œé¥æ„®æ£é¥æ’¶æ£—é¥æ¬‘æ£œé¥æ»…æ£Ÿé¥ç†ºæ£¤é¥ï¼„æ£©é¥â•ƒæ£³é¥î… æ£¶é¥îˆœæ£½é¥å´‡æ¤€é¥å‰æ¤ƒé¥å“¥æ¤‡é¥è¤æ¤Šé¥å‰§æ§€é¦å‹­æ§…é¦ï¿½"],["af80","é¦å ¢æ§ˆé¦å¬¬æ§é¦åº£æ§’é¦æˆ æ§–é¦æ’¶æ§˜é¦æ «æ§¡é¦æ»…æ§¤é¦ç‚µæ§¨é¦ï½‡æ§¯é¦ã„§æ§µé¦î†¾æ§¸é¦è¾©æ§»é¦å‰æ¨‚é¦åœ­æ¨…é¦è¤æ¨ˆé§ä½ºæªªé§ï¿½"],["b040","é§ï¿½",6,"é§ï¿½",5,"é§æ› æ«",4,"é§æ¿ˆæ«‰é§çŠµæ«‹é§ãˆ¢æ«Ž",6,"é§î„‚æ«—é§î†¾æ«š",7,"é§åœ­æ«¤é§è‚©æ«©é¨â‚¬é¨ä½ºæ®é¨å‘¯æ®™é¨å©„æ®žé¨å¶‡æ®¢é¨æ„®æ®¥é¨æ—‚æ®¨é¨æ¥ƒæ®¬é¨æ°±æ®¯"],["b080","é¨ï¿½",7,"é¨ï¿½",8,"é¨îˆœæ¯Žé¨å´‡æ¯œ",9,"é©â‚¬é©ä½ºæ³éŸå©‡æ¨‹é©å†©å°éåº¡æ”­éâ‚¬é¨æˆ æª¶é’„è‚©ç…¯é‘¹å‰§î•²é–éæ®¬é—‰å¶†çš‘ç€¹å¤‰äº¢éŽ¸å¤‹æ®«å®€æ­Œå…’å¦—å £å–é„å‚œæ³¿é‘è§„æ™¼é”î„‚å‹˜çšå‹«å›æ¿‚ãƒ¦å™´å©¢å® å§¯éŽ¹å±¾å¢¥é™î…žæƒ‚ç»—å——å“é¤ã‚…åéŽ·æ—‡ç©»é—ˆèˆµå¦¸é‘°æ¬æ½©é—‡å“¥èˆ°é–å“¥æ«§éŒå¿•æ«¨éŽ½å—•æ¡¨ç’ãƒ¦å«“ç»‹æ¥æž’éî…Ÿæƒ‰éŽµå® åŸ‡æ£°ä½¹æ¾˜é—å Ÿå£†éŽ·å±¼å³é¡ï½…å´é”ç‚µç²–é–­ï¹€åºœå§Šå—˜îœé‘¶â‚¬ç¼æˆžî——çº¾å‘°æ®žé—€æˆå€£ç’‹ã‚ˆå«—é‘³ç‚²å¯˜ç‘œæŽ‘å¢º"],["b140","é©å‹­æ³§é©å¤Œæ³²é©å²€æ´†é©æ› æ´é©æ°±æ´”é©æ¿ˆæ´–é©ï¿½",4,"é©ï¿½",7,"é©æ‰®æ´ºé©ç”µæµ‚é©é£Žæµé©è¤æµ—é©è·¨æ¸¶éªå‚œæ¸»éªå‘¯æ¸¾éªå©„æ¹†éªï¿½",10,"éªæ¶šæ¹éªæ¿ˆæ¹ éªï¼„æ¹¥éªã‚‡æ¹§éªÑ…æ¹­éªï¿½"],["b180","éªî„‚æ¹²éªï¿½",4,"éªåœ­æºéªç•Œæº‡éªè·¨æ½…é«å‹­æ½Šé«å—™æ½",7,"é«ï¿½",7,"é«æ»†æ½é—†é€›ç¹šé«ï¿ ã‚±ç€¹æ¿‡å§³éŽ¶ãƒ¦æ¯šç’žå½’çŸ‹é–å—˜æ¾‚çº°æˆžå›é—æˆå¯³æˆå £å„—ç’æ¿‹æŒ•éŠå¶‡åª¹æ¾¶å›¨å„·é’æ¬’î¦æ¿‚æ—‡å«°éˆî„‚îƒƒå®•â•ƒçŽ¯é¢î…Ÿè½¦éŸ«ï¹æ‰›é–«å¥¸è“Ÿå§£æ—ˆå‰»ç»—æ–¿éƒŠçº°Ñ†æ‘‰é’„èŠ¥ç˜¯å§£æ¬ç˜±ç”¯ä½¸ç°¢é¥å½’æ£´éæ¿†ç´›è¹‡å‘°ç·¹æ¾¹ä½½å™¦é–¬å—æ«…é—‰î…¡ç«Ÿç¼‚æ ¬èˆ¹éŽµä½·ç©¶é™æ¨ºå´¬æˆã„¨äº¬æˆî‚¦äº¶éå›§å§œé‘¶æ¨¿ã€ƒæ§Œæ ¨å”»é’î‚¤æ§³è¤°î„æžŒå©µæŽ“èŠ±ç€¹ç‚¬æ†Ÿéé›å•ºéŒå‹ªç¬ç»‰å¤ã‚¼éï¿½"],["b240","é«æ¿ˆæ½ªé«ç†ºæ½¬é«ã‚‡æ½·é«â•ƒæ½½é«ï¿½",11,"é«è™¹æ¾”é«è‚©ç€¬é¬å‚œç€®é¬ï¿½",5,"é¬å¿•ç€½é¬ï¿½",11,"é¬ï¼„ç’é¬ã‚‡ç•é¬ã„§çšé¬î… çé¬îˆœç¡é¬èŒ¬ç¤é¬ï¿½",4],["b280","é¬è‚©ç³é­â‚¬",12,"é­ï¿½",8,"é­æ¨¼ç…“é­æ°±ç…—",4,"é­ã‚‡æ¢¾éªžå‰å¹“é‘¿çŠ³æŒ±éŽ·ã„©æŒ¼å¨‰ãˆ å´¥é•å†©æ‚˜é–¾å‚œç•¶æµ¼îˆšç¬¡é‘¸æƒ°å‰¸é‘¶å©ƒè¢±å¨‰å©‡â”éŽ¹æ›žå´ªéé¸¿Ë‰é©çŠ±ç¬‰ç”¯å†©î„žç»¨å—å„´éŽ¬æ ¨æ‘éšæ»†î—†é‰æ„­å¢ ç’ãˆ¢æ½¿éŸªâ•…å™°è¤°â•„å½é’„ï¿ î˜µé™å‚æ®¨å¨ˆå¬«å„¹éŽ¯ã„§ä¼©é‘»å¶ˆåŸæµ æ’´é’µé’˜å¿”æ·ç»¯æ¬Ð«é‡ç¡…å´é˜æ› ç“¥æ¸šÑƒå”½å¨´å¬ªçœ°éŸ«î…Ÿå½ƒé™å¤Žå°™é‘¼èˆµç…¡çº°å­˜æƒ¤ç€µç†·çŸ“å®¸î†¿î‡œéŽ·å—˜ç…·ç’žçƒ˜æ‚éŽºé¸¿æ½æ££å¬­çš¸ç¼‚çŠ»æ‘¬æµœÑ‡æ§“æ£°ã‚†æ§éšï¿½"],["b340","é­ï¸¾ç…¥é­î†ç…°é­æ‰®ç…´é­èŒ¬ç…·é­ç”µç…¼é­åœ­ç†€é­è¤ç†‚é®ï¿½",5,"é®å©„çˆ§é®åº£çˆ®é®æ„®çˆ´é®æ› ç‰‚é®æ¶šç‰‰é®çŠµç‰Žé®ãˆ¢ç‰‘é®ã„§ç‰šé®î‚¤ç‰£é®îˆœç‰¨é®èŒ¬ç‰«é®ç”µç‰°é®ç•Œç‰½çº­ä½ºî”‡çº­å†ªî”‰çº­å—™î”çº­å¤Œî”çº­å¬¬î”’çº­å¿•î”–çº­æ’¶î”™çº­æ¨¼î”žçº­ï¿½"],["b380","çº­æ¶šî”¡çº­ï¿½",11,"çº­ï¿½",7,"çº­å“¥ã€çº­è™¹ã€çº­ï¿½",6,"é¦å“„çš¾ç”¯ææš±é‹èƒ¯åé˜å‚›æšˆé£å‘­æ•±éŠÂ¤ç§´éŽ¶å‹¯æŒ’éˆæ¿†æ§»å¨¼î†¼å‘éšç”µå€°æžï¸½å£‡éŽ¾ã‚†å¸²è¤°ç»˜ç·¢é–®ç£‹åš•æˆæ¿çš¹é…ã„¥å‹˜å¨Œå¤æª²ç“’ä½½â€–éŽ¾æˆ Ðžé©åº¢îŸ¶éŽ´æ„¬æ†Ÿæ¶”æ¨¼â–¼éŽ¯â•‚ç·žç’‡æ°­å£™é–«ç‚ºç˜ç»‰ã‚…æ‚†é¥å­˜å¯”é–æ¬çœæ©ç†·ç´±æ¤¹æ‹Œâ‚¬å©šå¨‡æ¸šå æ˜‚ç’§ã‚‡ç¹€é‚ãƒ§å¨éå‘­å•¿é“î‚¢ç£­ç€¹çŠ³å¨Šé–°î„‚æš£éŸªå²€îŸ†éŽ°ä½ºî„²æµ å›©æ¡“é¬å‘¬ç¬é‘·î…žåžµé‘çƒ˜â”é˜ã„¨ç°¢é–¿å‹¯æ´€å©Šä¾€æ«Žå¦¤ï¿½"],["b440","çº°å‹­î•ªçº°å—™î•­çº°å©„î•°çº°å¿•î•µçº°æŽ”î•¹çº°æ› î•»çº°æ¬‘î–‚çº°ç‚µî–…çº°ãˆ¢â…³çº°ï¸¾â…·",7,"çº°ç”µâ’çº°é£Žâ’çº°è™¹â’’çº°è‚©â’”çº°è·¨î—…çº¾å‚œî—ˆçº¾å‹­î—‹çº¾å›©î—çº¾å²€î—’çº¾åº£î—”çº¾æˆ î——çº¾æ’¶î—›çº¾æ¥ƒî—çº¾ï¿½",9],["b480","çº¾ã‚‡ï¼…çº¾ï¸¾ï¼‡çº¾â•ƒï¼Šçº¾î‚¤ï¼",4,"çº¾å´‡ï¼•çº¾å‰ï¼˜çº¾åœ­ï¼›",5,"ç»€å‚œî˜¨ç»€å‹­î˜«",6,"çº­â‚¬éŒã„§ç…‘éŽ¼æ„¯Ð•æ¾¶å‹¬å½›å®¸æ¿ˆâ”›å¦žæˆ’ç´¶é‘¸ç‘°æž æ¶“èŒ¬æŸˆç»æ¥€è€¿æ´å©‡æ£·é’æ¶˜æƒžéå©ƒåµé–¿ã‚…ç€­é„ãƒ¦ãŸé–±å›§æ”ªå¨£å´‡å‡½é” ãˆ¡åŸ‘ç¼æ‰®æŸ•é‘¼ã„§î—†é—†å²ƒç·¸éŽ±å ¢æ‘²ç’‡å¶†î„é’é¸¿ç¥¼å¨†Â¤ä»¾é’åžæ´·é–å—•ç² æ¶“æ¶˜å™¾ç»®æ¥…å”»ç»¨å›¦ç¸¾éŸ«è·¨î‡–ç»æ»„æ‡…å®•æ–¿å“é‘´å—™æ¦¿ç»®è§„ç•ªç¼ˆçŠ³æ½™ç€›æ¨ºî‡­çº¾å¬«æŒ³éŽ¼æ’´å¸¾éŽ¸î‚¦æ•ŠéŽ¼î…¡æªç»›æ—‚æ§±éŽµæ’³ã‡é›å—˜î„²éŒï½†åŸ“ç”¯ï¸½ç•£æµ ï½ˆæ¶çšå¬ªç·Ÿé–«ï¿½"],["b540","ç»€ï¿½",5,"ç»€ï¿½",9,"ç»€ï¿½",4,"ç»€ï¿½",14,"ç»€ï¿½",4,"ç»€ç•ŒãŸç»å‚œîšˆç»å‹­îšŠç»å›©îš",8,"ç»æ—‚îššç»æ¨¼îšžç»ï¼„ã‚£"],["b580","ç»ã‚‡ã‚¦ç»â•ƒã‚ªç»î‚¤ã‚¬ç»î†¾ã‚°",6,"ç»åœ­ã‚»",4,"ç»‚å‚œî›¨ç»‚å—™î›¬ç»‚å ¢î›®ç»‚å¬¬î›±ç»‚å¶‡î›³ç»‚æ„®î›¶ç»‚æŽ“â‚¬çŠºâ‚¬èŠ¥åª´æ¶“ç‘°å´Ÿé–®å‘Šå¹é‘³å—˜æ£ªå§˜î†»çµ¾éŽ¯î†½è´°ç’‡ç‚²è„Šé“”å¬ªç¶‹éŽ¸â€³åŽ·é‘½â„ƒã€‚é’â‚¬éŽ¹ï½ˆç®žéŠæŽ‘çŸç»å³°î‡±é’æ‰®É‘éŽ®å¥¸äº¾é©æ¥€ç—‰å¯°æ¥ƒæ®‘éŸ«î„‚ä¼…é§è¤ç“‘é¬î„åš¦é–­æ’³ç‰‘æµ£åº¢æ·®æ©î…æ™«ç»—æ¶šåª±å¨‘ã‚‡ç¹œç€šâ„ƒå§·æ´æ›žæ¹´é’‚å‚œîƒ‡ç”¯æ¿†ç´µé–«æŽ”ç´¨æ£°çŠ³å·¶å©Šå›©î•½éç‘°å€é—ˆæ¶˜çšé¢å…¸çµ»é¢ç¨¿ç°µéŽ¯ï¹€îš¥å¨£â‚¬å¨ˆè·¨î•®é™å¥¸æ´‰é‘å¬ªåž‡éŽºå¤Šæ‚é–½æ’¹çšŸç’ºå²€åŸžçº°ç†»æ¾æ©î…¡çšªé™ï¿½"],["b640","ç»‚ï¿½",6,"ç»‚ï¿½",11,"ç»‚ï¿½",10,"ç»‚ï¿½",4,"ç»‚è‚©îž‹ç»‰å‚œî‰ç»‰å‘¯îŒç»‰å ¢îç»‰å²€î“ç»‰å¿•î•ç»‰æ’¶î™ç»‰æ «îœç»‰ï¿½",5,"ç»‰çŠµÐç»‰ãˆ¢Ð”ç»‰ã„§Ð˜"],["b680","ç»‰î„‚Ðœç»‰ï¿½",6,"ç»‰åœ­Ð¨ç»‰è‚©Ð¬ç»‰è·¨â–‰ç»‹å‹­â–ç»‹å›©â–“ç»‹å¤Œâ–•ç»‹å²€â—¤",4,"ç»‹æ› îž¼ç»‹æ¨¼îž¿ç»‹æ¶šîŸ‚æ¶“ä½ºæ´´é™î‡€æ‹¤æ¤¤å •ç´Ÿé–¿î…žç•¾ç’î­æ¶ªæ¶“æ»ƒå•²é’ï½†å™¦é”ã„¦çˆ§æ¸šæ¥ä¼€éç»˜ç¤Šéæ»„å§ˆé‚æ¥…æ«‹ç’žå—›â‚¬æ¥ƒæ£™é–®ç•Œæ½±å§£æŽ”å¦¸é™î„ƒî‡°é«ç”µæ¾’ç’§å±¾æ½¨é—€â‚¬é‘²æ°¬å®³å¨“â€³î›·ç»”îˆœç…­é–¿ç»˜î†Œé‚î… ç´Ÿé«å——åŽ¬é—ƒç†·î‡®æ¾§â•æƒƒéŸ«å‰æš’æ¤¤åž®æ´¡é–½æ¿ˆæµ˜é–¬ä½¹å·¼éå——î˜¿æ¾¶å“„çˆéŸ¬å‰æ¹¹ç’ºé¸¿åŸ–é“ä½¹å„¼é«æ›¡æµ˜å®„ã„©ç®™æ·‡å‹¯î–‚ç’ç‘°Ä“éŽ­è·ºå·¹éŽµå¥¸äº¸é–¯å‚žã‚¿éŽ­â•„â‚¬å±½åŠ¹é‘°å†²çšµæ¥—åž«å¹¢æµœï¿½"],["b740","ç»‹æ¿ˆîŸ…ç»‹ï¼„Ã¡ç»‹ï¿½",14,"ç»‹å¯¸Ç–ç»‹å‰Çœç»‹è™¹Åˆç»Œâ‚¬",5,"ç»Œï¿½",9,"ç»Œï¿½",4,"ç»Œï¿½",16],["b780","ç»Œï¿½",6,"ç»Œè¾©â”Žç»Œå´‡â”‘ç»Œè¤â”˜ç»Œç•Œâ”šç»å‚œçç»å›©ç•ç»å©„ç˜ç»å²€ç›ç»å¿•çç»æ’¶ç¢ç»æ¬‘ç¨ç»æ¶šç®ç»ï¼„î€ç’æ¿å½‚ç¼ƒæ°±ç“˜æµ¼æ„ªç®¯é—ƒâ‚¬å¨‰æ› å½é’˜â•ç«¼é£î†ç‚•å¦¯å©„ç†…é–½æŽ”ç®’é‘ï¼„å„²é™å¶ˆç¹‘é‘¼å†­ç©¿é˜îˆžã‚­å¨‰æ¶˜æ½‘é‘ºè™«æŸŸé‘²î…åŸ§é—ƒæ’Î˜æµ èƒ¯î†–ç»¾çƒ˜æ–é‘¿æŸ¥æ½ªéŸï¿ î—£é‘²ãƒ¥å°“ç’‡è—‰æ‚¹é‘²å“„ç°¾å¨Œæ­Œåž‚é‘ºî„„åŽ·éšâ•‚çš¼é’å—™æ‚é§ç†ºå‰¼å§¹å‰§çŸ‡æ¿‚å¬©å”¤è¹‡æŒŽåŠ‹ç»®îƒèµ´çä½¹çšé“šå‚šå˜²é–¿å¬®î—“é¤îˆœå…˜é–«ãˆ å•¹ç¼‚æ¿Šî†”æ¿‚å¤Šåš–æµ£æ¶˜æƒæ¾¶î‚£æš¦é‘²ã‚…î„®éŽµèˆµåª¯æˆæ„¬ç®™å§˜ç†ºîƒæµ¼å¿Žç¹•éˆï¿½"],["b840","ç»ï½‡î€ƒç»Ñ…î€ˆç»î†î€Šç»ï¿½",4,"ç»ï¿½",10,"ç»”â‚¬",10,"ç»”ï¿½",9,"ç»”æ¥ƒç®ç»”æ°±ç±ç»”æ»…ç´ç»”ï¼„îŸç»”ã‚‡î¤",5,"ç»”î†¾î­ç»”è¾©î¯ç»”ï¿½"],["b880","ç»”ï¿½",4,"ç»”è¤î¹ç»”å‰§ç‘Žç»—ä½ºç‘ç»—å‘¯ç‘–ç»—å¤Œç‘¢ç»—å¶‡ç‘¤ç»—æ„®ç‘¨ç»—æ’¶ç‘¬ç»—æ¥ƒç‘¯ç»—æ°±ç‘´ç»—æ¿ˆç‘¹ç»—ï¼„î‚½ç»—ï½‡îƒ‚ç»—â•ƒîƒˆå¨´î†½ä¸¢ç»‚å¿šâ’ˆå¯®æ¥ƒæ•¨éŽ¶æ°³ç·Ÿæ·‡îˆžåš‹é‚Ñ†åŠ˜é‘µæˆç°»é‘µæ„¯è¡é“îˆî›«ç’§å¬ªî˜²éŒå‘¬ç²¯é—ƒæ»…åŸ—é‘µç¡…ç¤‹ç€µå²ƒî…ºé—„å‹«î›¬ç¼‚æ°¬æ‹¹é£è·ºæ§‘ç’‡ãƒ¦æ•¼å§’å‚žæŒ‹é©æ ¨ç°¤éªžèŒ¬æ•‡é‰å—˜ç…ˆç»”èƒ¯å€½ç’§èˆµåŠ…ç»‰å—˜æšç’§ï½…å”¸é’æ°¶æŒ—ç¼‚æ­Œå€¹ç»¾æ’çŸ–å¨“îˆ›æ½¬ç»¡æ¬‘æ®æ¥‚æ¨¿å•…ç¼‡æ—‚ç¡¶éŽ¼ç‚ºæ™²ç»‹åž®æ†¡éãƒ¦ç“•éŽ¼ä½¹åžæ¥¦å€Ÿå…‚é¤æ¬å£Šé—ˆâ•„æ†¶éè‰°æ´¡é—ƒä¾€æ®§é–¾îƒ¿é‡œéšå‹­ç²°éç¡…çª¡é‘°æ›Ÿæ´¿æ´æ°±ç«Ÿ"],["b940","ç»—îˆœîƒ‹ç»—èŒ¬îƒç»—ç”µîƒ‘ç»—é£Žîƒ”ç»—è¤îƒ˜ç»—ï¿½",5,"ç»›å—™ç“ç»›å©„ç“–ç»›åº£ç“ç»›æ› ç“§ç»›æ¬‘ç“¬ç»›ç‚µç“±ç»›ï¼„î„œ",10,"ç»›îˆœî„©ç»›å´‡î„­ç»›å‰î„±ç»›è™¹î„µç»›ç•Œî„¸ç» ä½ºç•Ÿç» å†ªç•¡ç» ï¿½",6,"ç» åº£ç•¯"],["b980","ç» æˆ ç•³ç» æ’¶ç•ºç» æ¨¼ç•½ç» æ°±ç–€ç» ç‚µç–…ç» çŠµî…ºç» ã‚‡î…¼ç» î†¾î††ç» æ‰®î†‰ç» å´‡î†Œç» å‰î†Žç» ï¿½",7,"ç»¡å‚œç˜ç»¡å‹«ç„¸é‘°æŒŽî•¼å®¸ãƒ¦æ•¾é”ç†¸ä¼ƒæ¦«æ°«ç·µéŸ¬î„€å•ç€¹î‚¢ç´¦å®¸â•‚ç˜éŽ·è¾«ç¡€ééæŒ¬é•ç‚¬çŸ¡é‘»ç†ºå«é¨ãˆ¡ç€¯ç’î…žî™„æˆæ»†å¼´éœæ› ç•­æµ¼ç‰ˆæ­¥ç€›ã‚…î–æ¦§æ’³å½œé“”å©‡î€‡ç’‹ç–¯å‚éå‘´ã€é¥æ´ªæ³§é’î†¾æ‘é“æ„¬î‡–éŽ¸å‚î˜§æ¶”æ ¨å«„éŽ¬î…ï¼šéå†²ç•¼éçŠºî‡ç» ï¿ î›«ç¼ƒæ„­å„»éå²ƒç–®éå¤Šç®é–«æ¶šæ‡“ç‘™å‹«æ¹±çº­å‘­ç¶Šæ¦«ç†¼æ¤‡æžã„©îƒ—ç’‡ï¼„æ«¢å¦—å‚›ç…–ç’ºî‡å¹é’å€Ÿç·¤å©Šæ°­î—’é–¿å‘´å„¹é¥èŠ¥ç‰ç‘ç¡…ç¹ƒéï¿½"],["ba40","ç»¡å‘¯ç˜“ç»¡å¤Œç˜–ç»¡å¬¬ç˜ç»¡åº£ç˜¡ç»¡æ„®ç˜¨ç»¡ï¿½",4,"ç»¡æ¶šç˜»ç»¡ç‚µç™‚ç»¡çŠµî‡—ç»¡ï½‡î‡™ç»¡Ñ…î‡ç»¡â•ƒî‡ ç»¡î„‚î‡¢ç»¡îˆœî‡¥ç»¡ï¿½",4,"ç»¡å“¥î‡®ç»¡è™¹î‡°ç»¡ç•Œî‡´",7,"ç»¨å ¢çš¦ç»¨å©„çšªç»¨åº£çš­",5,"ç»¨æ¥ƒçš¹ç»¨ï¿½"],["ba80","ç»¨ï¿½",4,"ç»¨ï¿½",5,"ç»¨ã„§ç™Œç»¨ï¿½",12,"ç»¨ï¿½",5,"ç»«å‚žî€—ç€›â•‚æ£å§˜ï¸¿äº¥ç€¹æŠ½ç“é–°ï½†å•«é–­îˆžç…©éšî‚£å…œç€µæŽ‘åš±é å©„ç¶ç¼ˆç‰ˆæˆéŽ¹å¶†æ£»éŽ²ç‚¬å€£é’å©ƒçå§¹å¤Šãé‰î…¡åŸ…æ¾¹æ›žæ® ç’žî…î‡ é–®æ¿†ã‚½é‘°æ¥€å½¿å¨´â•æ‡™é æ¿ŠåµŽé‘¿å¿”ç‰³ç»‚æƒ§æ‹°æµ£æ›žæ‚Žé©æŽ•çŸ‡é—ƒå‚›æ¸¤å¨‘æ­Œä½†ç‘œæ„°å·¥ç’å“„æ¨‹æ¦›æˆ æ£”å¯°å ¢å«šéŽ­ã„¥æ‘·æµœã„¦Ã­ç›â„ƒäº½æžæ¿æ«é‘æ¨¿æ«£æ¥¦æŒŽæ¤½ç€¹å¿“ç´­ç»¾ãˆ æž†æ¸šîˆœå°¨éšç…Žå¸¤éŠæ¬æ‚—é›é—´ç®®è¹‡ç•Œæ†µæ¾¹æƒ°æ‡Œé‘³Â¤æ¾Šé™æ„®ç¡¦å©€ï¿½"],["bb40","ç»«ï¿½",9,"ç»«ï¿½",36,"ç»«ï¿½",5,"ç»«ï¿½",9],["bb80","ç»®å ¢çŸˆ",6,"ç»®æ’¶çŸ“ç»®æ «çŸ™ç»®æ°±çŸç»®çŠµç—…ç»®ï½‡æ‹¨ç»®Ñ…æ³¢ç»®â•ƒæç»®î„‚ç®”ç»®îˆœèˆ¶ç»®ï¿½",4,"ç»®è™¹ä¸å¯®Ñ†æª¸éžî„å§¢æµœæŽ“å‹ƒéŽ´ç–¯å§³éæ¥€å´•éšç‚¬ç²¦é¢è¯²åžé–æ ¬ç˜½å¦²æ„¬ç·¤éŽ¬â‚¬å¨£î†¼æ½–å¨†ãˆ¢å¹†å¦—æ’¹ç¹•ç¼‚æ’´å´²éŽ®ï½…æ•œé¥î‡é›¹é’æ›Ÿå®ç€¹ï¹€å¤Ÿé‘½æŽ“åŽ¡æ¦›å‹­ï¼šé“¦æ¥ƒå“€é¨å›§åš¢éŽ¯å‰åŽ¡é…å†¨ç®¤éŽ­å¶ˆçš«éç‰ˆå°Œæˆå¤Šçª˜éŽ­ãˆ£æ´ˆé¥ç‚´ç˜‰éŽ®æ—€åŽé—å¤‹å„¬é…ï¹çº¯ç»‰æˆ’ç´°é‘â•‚çœ¹ç’å® î‡§ç¼æ¨¿å´µé„å¿“îŸ·æ¦„å‚›ç¥½å¨£ç–¯çœ®å¨²è®³ç´®éî‚¥å¹éŽ´æ ¨å„œé—‡å¶ˆæ£ç»ç¨¿åš®é¦æƒ§ç†€éˆè™¹æš©ç»‹ç•ŒÐç» ï¿½"],["bc40","ç»®è·¨ç¡›ç»¯å‚œç¡Ÿç»¯å‹­ç¡¢ç»¯å¤Œç¡§ç»¯ï¿½",6,"ç»¯æ¨¼ç¡½ç»¯æ¶šç¢€ç»¯ç‚µåœº",6,"ç»¯ï¿½",5,"ç»¯ï¿½",7,"ç»¯åœ­æ¾ˆç»¯ï¿½",13,"ç»±ï¿½",5],["bc80","ç»±ï¿½",14,"ç»±ï¼„çŸ—ç»±ã‚‡è§¦ç»±ï¸¾å·ç»±â•ƒæ¤½ç»±î„‚å–˜ç»±î†¾çª—",6,"é‘²å²„ã‚¥æ©è§„ç¸ºç’ãƒ©æµ®æ¿®î„‚å“—ç¼‚å¤Šæ‚é‹ä½¹î—æˆæˆ ç„é—†å——å¼·éŽ¬ãƒ§æŸ§å§¹æ’åµ†ç€šå¤Œéª‡éŽ¸ã‚…åš‘é‘´å©‚ç¹é’ƒç†¸å¦§éâ‚¬ç€›ï½„ç´Ÿç»î…žå¢éŽ®å‘Šç¥¹ç€µå‹«ç˜‹ç’Â¤î†‡éƒãˆ ç¹‰é—„å‘­î›¸ç¼Ñ…é‚¯é¢å¤‹ç§æ¾¶é€›åŒ ç€¹è·ºå§žé‘½æ°¶î•¯ç’å‰§æ•³é–½æƒ§äº£ç»‹é—´çŽ¯é‹å •â”šç€šä½¹î„µé©æˆæ½¥çæ «îƒ•é—‚å¯¸åŽ§éè‰°åé‘¹æ¿ã‚¸ç¼‚å‹®å°Žå¦«â‚¬éŒî„‚â’ˆçº­é”‹å«žéŽ¹ï¼„ç•æ·‡î…žå£€é‘å¿šå´˜å¦²æ¶¢å£Œç’ºä½ƒå¹¢ç‘™ä¾€æ•­ç» î…æ¬¢"],["bd40","ç»±ï¿½",54,"ç»²ï¿½",7],["bd80","ç»²ï¿½",32,"é‹ãƒ¨åŸŒé“æˆ¦ã‚¯å¨“æ„­ç° å¨‘Ñƒç¼“éé›î¡çå—˜ç¥®å§¹ç†ºæž‚é’‚å¬«ã€ƒæ¿‚æ ¬î†‰é–çŠ»å¡é—„å¶ˆæ™§å¦žæŽ”î˜¦é’ï¹å…Œæµœã‚‰å„•å¨´å›¬çŽæ¿žå›§æ¯¤éŽ¼å‘´æ‘ªé­î‚¡èŒŽé‘´æ°±å«›ç‘™æŽ—ã‚ºç¼‚å¯¸ç²¸é“æŒŽæš€é–°ä½ƒå¨‡æˆå†¨å½¨ç»æ ¨å½®éŽºãƒ§æ®•ç»‰æ­Œî”œé—ƒèˆµåŸ…é”î‚¥å¦­å¦—æ—€æ¾ƒéŽ¹é£Žæ½¾ç»”î…Ÿç£¥ç¼æ’¹Ð’æ¿®æ„­åžé’˜å¤Žå§¤é£å±½â‚¬ç†¶ç²™é¤ãƒ¨î‡ çžå©‚è‚ªç»›å¬«æž»é–²æˆœç²–å¨²ãƒ¨îš¤ç»±Ñ‡æ• æµ å‘°çš‘æ©æ¶¢æ¾‡é…å¬¬î›¦æ©æˆ å„¸å¨´ï¿½"],["be40","ç¼ï¿½",12,"ç¼ï¿½",6,"ç¼ï¿½",42],["be80","ç»¶ï¿½",32,"çè—‰å§´é‘½å——åƒé‘¼åº£æ½§é…å •å“ºæµœî„å„•ç»®å‰§æ¸¤ç¼å¿Žç°³ç’€ï¸½æ«™æ£°å ¥æ½¤æ¾§å†©æššé—€æ»ƒç·žé¥å¤æ½ ç»”ç†ºçµé‘â‚¬éîˆœç¦éŽ»î†â”’ç»¾çŠµå¸ é—Šî…ç®™éé•ç¯€é–°æŽ‘å¸ºéæˆžæ£«é‘·è‰°åžéœåº¡æ°¨é¤æ°¶çŽéŽ·æ¨¼å«é¤è—‰çœ³æ¤¹ç¡…å¼·çžâ‚¬éœâ‚¬é­â•€å¦‡å¨Œî†¿ä»›éŽ·æŽ“åµå®¸ã„¥å¿ç’ºæ¿Šç¬§é–¿îˆ™å‹˜é™ãƒ¦å„³éî„€å¢½éŽ¹æ„°ç®–æ¿žç†·â‚¬ï¸¾æ¹»é—é£Žè™ŽéŽ¾å‘®æ•¨éŽ¶å¤‹å¸¢éŠæ—‚åŸ–ç‘™å¤Šå–…ç’‡â‚¬ç¼æ¿†æ½Žé‘¿å²„æŒ§éæ¶˜æ‚°å®„ï¿½"],["bf40","ç»¶ï¿½",62],["bf80","ç»ºè™¹è®£",4,"ç»»ï¿½",4,"ç»»ï¿½",21,"æ·‡å©„î å¨´æ°¶å„­æ¥ å¿“æ¸éœæ §å´±éœîˆšç´‘éŽ»â•‚ã‚·é‘îˆ›åé’å©‚ç‰šé•æ¨ºæ½•é®å¶‡æ¹…æ´é”‹å¿ç»¯çŠ³å¢°éŽ¶æ¤¾å­©éæ›¡â‚¬å†©å«¹é‘ã‚‰æ½¬é§ç–¯å«‘éŒîˆ›ï¼•çº¾æ›¢î•¼ç»‰æˆï¼“éœå†²å½²å¨“æ‘åŽ é’è¯²î…¹ç’‡æå—éŸå†¨ç•éŽ­å†²æ½™éšî… â”–éŽ­æ„¬ç“ŸéŽºÑ„å§žé™ï½†å¢¸ç€µå›¨çŸéî… ç°é‘»ï¹‚å¿æ´æ’¹ï¿¥æ¾¶ç¨¿çéŽ¸åº¤æ³•é‘³îˆšæ½¡ç»›èœ‚äº¬è¹‡î‚¢î†”å¨†æƒ§å°…ç»›æ„®åª¯å¦—å—™ç††éªèˆµæ¤ƒéå…¸ç°­é©æ–¿éƒ¨ç»ãƒ¨æ‡™æ¿‚åº¨ç“‰éŒâ‚¬"],["c040","ç»»ï¿½",35,"ç»¾ï¿½",23,"ç»¾æ»…ç°¼ç»¾ï¿½"],["c080","ç»¾î†¾æç»¾è¤æ­ç¼æ «æŠ¤ç¼î„‚è¿˜ç¼‚å©„ç´£ç¼‚ç‚µæŒ¤ç¼‚åœ­è“Ÿ",6,"ç¼ƒå†ªçµ¾",9,"ç¼ƒæŽ”ç¶‹æ££å ŸåŠŽå©§å†¨æ½³é„å—˜å´‹é¥ç‰ˆå«­éŽµâ•ç²¨é—ƒæ–¿ç€®éŽ·å¤Šæžƒé“šÂ¤åŽžæˆï½…æš’é‘¾è¾¨æ½µç’§æ ¬æ‘‘æ¿ î…çˆ®éŽ·ï¸¾î‡£é—ƒæˆåžå©¢æ»†éžéŽ»å€ŸîéŽ³æŽ”ç´—é‘å‚›äº’éžå‘®î›¹é™ç…Žç²–é–®åº¢æ¹•å¨´î…å´¬é”å´‡å¢·é‘°ä½·æµ†æ¿®ãƒ©å’é‘æ¬ç¨˜é•æŽç®°é—†çƒ½æš›é’‘å‰§î—ç»±îˆšåŠ‡é¨æŽ“æ¨é‘²å¬¬è¢«å¨‰î…ï¼‘å¦¤ç‚²å–Žé˜æ¨»â…·é˜ä¾€ç² ç»¡è¾©å«ºç»‚ç»˜ç´¦éžå—˜æ½•é–²å²„è ç»€è‰°å¸€é‘½æ–¿æ‚˜éæ¤¾é™„é˜å¤Šå§³é®æƒ§å·»é’â•å€›æ¸šå¬©ç¹"],["c140","ç¼ƒæ «ç¶‘ç¼ƒæ¶šç¶”ç¼ƒæ¿ˆç¶–ç¼ƒçŠµå‰‘",4,"ç¼ƒî‚¤æµ†ç¼ƒî… è’‹ç¼ƒæ‰®åŒ ç¼ƒç”µè•‰ç¼ƒé£Žç¤ç¼ƒè™¹äº¤ç¼ƒè‚©æµ‡ç¼ƒè·¨ç·šç¼‡ï¿½",7,"ç¼‡å¬¬ç·§ç¼‡ï¿½",4,"ç¼‡ï¿½",4,"ç¼‡æ¶šç·¶ç¼‡çŠµåŠ²ç¼‡ï½‡èŒŽç¼‡ï¸¾é²¸",6,"ç¼‡ï¿½"],["c180","ç¼‡ï¿½",4,"ç¼‡è™¹å‡€ç¼‡å‰§ç¸ºç¼ˆå‚œç¸¾ç¼ˆå‹­ç¹‚ç¼ˆå›©ç¹„ç¼ˆå¤Œç¹ˆç¼ˆå¶‡ç¹Œ",4,"ç¼ˆæ «ç¹”ç¼ˆï¿½",5,"ç¼ˆãˆ¢æµšé¥ãˆ¢ç›ç»®æŽ“æ’­é—…è·ºå§é å†¨æ‘¡æ·‡â•„ä»ˆé‘¾èŒ¶ç¹›é—€æ¿ç²”éŽ¬æ»„ç¨›ç”¯æ¨»æšƒé‘´ææ‘¼éŽ­å¬¬å§ç¼å†ªä¼¯é‘å¤‹î•¦ç»®è¾«å£‡æ¶“ã‚ˆç· é–²å¿”æ«¨æµœî†¿çš¡éŽ¾â•„äº°éæ°±æžŸé•åº¡î‡šæˆèŠ¥æº…æµœå—˜æ‹é—€ï½…ç²¬é‚æ¬åžªç‘å‚œå„“é”ï½‡å¯§éžè™«ç„çº¾çƒ½æ¹’æ¶“æ’®å¦æ§Œç‚´ç©»é‘æ¶œç¥¦éšæ¿‡å«€éœèŒ¶å½µé—†å •ç·žé–¾å†§çº§ç¼‡æ°¬å™·éç”¸æ«Ÿå®€î…¢î•«é™ï¸¿æŠ¤å©§æ»…æ‚å§’å¯¸ï½žæ££å¿•æš€é’æ¨¼æ§«å¨´ä½¹ç…¶éî…¢ç·³é‘±å¬ªæŒ‹ç»—è‚©î€ž"],["c240","ç¼ˆã‚‡å’–ç¼ˆã„§å¼€ç¼ˆî‚¤æ¥·ç¼ˆî… åˆŠç¼ˆèŒ¬çœ‹",6,"ç¼ˆç•Œçƒ¤ç¼ˆèƒ¯â‚¬å‚â‚¬å›ªâ‚¬å £â‚¬å¤Žâ‚¬å©…â‚¬åº¤â‚¬å¿šâ‚¬æˆ£â‚¬æ’¹â‚¬æ°³â‚¬æ¶œâ‚¬æ¿Šâ‚¬ç‚¶â‚¬ç†»â‚¬Â¤â‚¬ï½ˆâ‚¬ã‚ˆâ‚¬ï¿½",5,"é‘°èŒ¶â‚¬ç£‹â‚¬ç¡…â‚¬é¸¿â‚¬è‰°â‚¬æäºé‘±ä½½äºœé‘±å‘°äº£é‘±å £äº¯é‘±åº¤äº¸é‘±æ„¯äº¼é‘±æ’¹ä»Œé‘±æ ¬ä»"],["c280","é‘±æ¬’ä»œ",13,"é‘±ï¿½",5,"é‘±ï¿½",11,"é—…å——ç€¯éŽ·ãˆ¤æª±å¦¤ç…Žâ–ŒéŽ¼å‚œç˜¬å©•å¿›æªµé‘ºï¹€å´²æ£°å‘­ç°®éå¤‹å¹Šé—ã‚ˆæª¹æ¤´ä¾€ç°±çº°å²„æ¹¶ç’ºîˆç¥©æ¥£æŒŽç¶–ç»‚å‹«ç¶é—„å—˜åŸ‰æ¤¹æ‘æ‚¤é–¾æ¿…è†éƒå‘­é¥±çžï¼„ç´©é“æˆžéš˜å¯°å¬¬å·¼å©Šã‚‡è±¢å®„ï¸½å¯·ç€›î…æ²ªé—å…¸è´¡éŽºçŠµæšéŽ¶Â¤ç–†æµ¼ï¸¿ç²¦å¨Œï¸¾æ†¾ç’é¸¿æ‚µé“»è™¹ç¶é–«å©šæ•šç» â•…î€€ç‘æ­Œæƒ¤å¨²æ¶¢ç‘ç¼æ»ƒî›­æ¥¹è¤å¸¥é®ä½½æ®æ¤¹î„„ç‹é¢æ¶˜æ‚§é©å¬©æ‹±æ¥¹ï¹€å´ æ©å £å‰¦é¬æŽ—î›·é“”î†½å¼§é’„æ’´æµ–éŽ±ãˆ¡æž"],["c340","é‘±æå€Žé‘²å‚å€•é‘²å £å€žé‘²ï¿½",5,"é‘²æ—‡å€³é‘²æ¥„å€·é‘²ç‚¶å…é‘²ï¹å‹é‘²ã„¨å“é‘²æ‹Œåé‘²ä½ƒå é‘²æ­Œå£é‘²æ˜å„é‘³ï¿½",4,"é‘³ï¿½",6,"é‘³æ¨¿å„«é‘³çŠºå„®é‘³ï½ˆå„²é‘³î†¿å…Šé‘³ç–¯å…é‘³æ˜å…™é‘³èƒ¯å‰™é‘´ä½½å‰é‘´å‹®å‰ é‘´å›ªå‰¤é‘´ï¿½"],["c380","é‘´å²ƒå‰·é‘´æ¥„å‰»é‘´æ¶œåŠ€é‘´æ¿ŠåŠ…",12,"é‘´î…¡åŠ—é‘´æ‹ŒåŠ¤é‘´ç£‹åŠ¦é‘´ç–¯åŠ°",4,"é‘´èƒ¯ç™Œé‘ºæŽ•å°—é©å‰çš³è¹‡æ¬’å¹—éšî‚¥å¯˜é–¿æ°­ç˜ºé­æ¶¢æ¯é—îˆå¯•éæŽ‘é™„ç’¨å²ƒé”¤æ¶”å ¢å¸¿é‹æ°­î•ªé–°å •æ¹é“ã‚†ç—…éªå¤ŠçŸé—€ä½¹ç˜¡ç¼‡åº¢æ§¯ç€µæ„¬îž…æ¿¯æ°¶æ£¬é—‚èœ‚æ»‘é’€å²ƒæŒ‹å¦¾î„‚æ´˜é–¿æ‰®å¯·å§Šï¹€ç“±éªîˆžå•”é—ˆï¼„ç¡¿æ©ç–¯çš½å¯®ãƒ§èƒŒç»‰æ¨¿îŠå¨‰å²ƒæ¹ç€µå——ç®“å¦«å¤Œæ¹¢ç¼é›å•Žéå¶…åªºæ¿žâ•ƒç´–é—ˆãˆ£å«éŽ»å¿•ç€¯é’˜æ„®î—å¨“å“„ç°·æ¿¡æ¬’æ”½éî…Ÿçš¯éŽ¶è·¨æ¯§éå¿”å—é—‚èŠ¥æ§‘é“»ç†¼ç¦é–¾î…žæ‚•é›å€Ÿè‰¾éŽ½ï¿½"],["c440","é‘µâ‚¬",5,"é‘µå›ªåŽœé‘µå¶ˆåŽ§é‘µå¿šåŽ­é‘µæ ¬åŽ³é‘µæ¨¿åŽ¸",4,"é‘µÂ¤åƒé‘µï½ˆå…é‘µï¹åé‘µî‡å“é‘µî„ƒåé‘µèŒ¶å§é‘µä½ƒå¾é‘µç–¯å€é‘¶ä½½å”­",4,"é‘¶å¤Žå”»é‘¶å²ƒå•€é‘¶åº¤å•‡é‘¶ï¿½",5,"é‘¶æ¬’å•”é‘¶ï¿½",4,"é‘¶ã‚ˆå•£"],["c480","é‘¶Ñ†å•¯é‘¶ï¿½",7,"é‘¶ï¿½",5,"é‘¶è‰°å–—é‘¶æå–›é‘·å‹®å™®é‘·å›ªå™²é‘·å¤Žå™µé‘·ï¿½",6,"éŽ½ç¡…æ§•å¦¯Â¤å•˜çº¾ã„¦æ‡‡æ¦„æ—€å§½éˆî‚¥å¸¿æ¾§ã„©ç²¯å¨Œî‚£ç´¶ç€µç‚ºæª¶ç’‹å¬¬å¢´éŒæ„­åª·é—â€²æ†¨æ¿®å—˜ç˜æ¾§æ’´æ¯Šéªžæ›žå«™éŽ±æ›Ÿæ¹ªé©î†¾æ½¶é—Ñ…ï¹©éŽ·åž®æ‘¢é›æ„°æŒ”é–­ï½…îŸ‚ç»¾è™«çš·æ¶”å†¨ã‚¶é‘°æ„¬îšé—æ¥ƒæ•ºé—…æƒ§æ³­éŽ¸çŠºå‰³éŽ­å¥¸æ¤†å¨£æ §æ†¿æ££ä½¸å”´ç€šâ•„å…˜æ¿¡î‡€æ¹éŠî…å¿çå…¼å«™æµ£çŠ²å°¶é‘µå©šâ‚¬å—˜æ±‰é’„î‚£åª¹éªžå¯¸â’•éŽ¾åž«åµ’è¹‡é›îž¾é–°å—ç¬©çæŒŽå´—é‘±å‚šî„¶éŸî‡€æ™©é—€å¶†ç§´éŽ®ã„¦ç…šé™ç‚²åšŒç€¹ï¿½"],["c540","é‘·ï¿½",14,"é‘·ã‚ˆåš—é‘·ï¹åššé‘·â•„åšé‘·ï¿½",4,"é‘·ï¿½",5,"é‘·å€Ÿåš³é‘¸å†­åž",4,"é‘¸åº¤åž™é‘¸æˆ£åžžé‘¸ï¿½",5,"é‘¸æ¿Šåž¹é‘¸ã‚ˆåž¾é‘¸ï¹åŸ€é‘¸â•„åŸ‰é‘¸èŒ¶åŸ¡é‘¸è‰°åŸ¥é‘¸ï¿½"],["c580","é‘¹â‚¬é‘¹ä½½å¢é‘¹å†­å¢”é‘¹å—šå¢—é‘¹å©…å¢é‘¹å¶ˆå¢¡é‘¹ï¿½",7,"é‘¹æ¬’å¢°é‘¹æ»†å¢²é‘¹ç‚¶å¢µ",7,"é‘¹â•‚å«¥å¨‰ç‚µå¢°éŽµî…¢æŒ³ç»¾å€Ÿå‰µå¨´æ’³å•˜å¯®å‹«ã‚´é”î…â‚¬æŽ‘ã‚³é†æ ¬æªºé¤ç†¸å°“éŽ³ï¸¾æœç’‡å“„æ‘å¨†Ñ‡å¼—å¨ˆç£‹æ£”é›æ›žä¼“å¨Œã‚…æš˜ç“’å¯¸åŸ‡ç”¯æ›Ÿâ‚¬æ› æƒ—éŽ·å¶†å¸“é—å±½ç·²å©€å†©æ·³é€â‚¬å¨¼æ¨¼æ´çº¾æ„®æµ–é£æ–¿åž½é™æ¶—ç®µæ´ç‚´æ¢ºé‘°î‡å„¢éŽ¶æ¶˜æ‹žé’ã„§å–çšå¶ˆçª‡å¨‰â€³æ‡œé‘³æ°¬ç…¿ç‘ç£‹ç¦‚é—„îˆåŽ¤æµ£â•‚çŸé é£Žæ³¦é®ç‰ˆå§©é‘è§„ç·¨è¤°î…¡æ‘¤å¦«æ°±ã€–ç»¡ç–¯å•«éˆå¬®ç®¯éŽ¹Ñ…î«é§îˆœçˆ³é—‡è§„å£’éŽ¶î‚¢å¦¶éžåž«ç˜²"],["c640","é‘¹î‡å£‚é‘¹î„ƒå£„é‘¹è¾«å£é‘¹æƒ°å£é‘¹æ­Œå£”é‘¹è‰°å¦§é‘ºä½½å¦°é‘ºå‘°å¦´é‘ºå›ªå¦·é‘ºå²ƒå§é‘ºæ’¹å§…é‘ºæ›¡å§ˆé‘ºæ°³å§é‘ºç‚¶å§žé‘ºãˆ£å§¡é‘ºÑ†å§´é‘ºä½ƒå§¸é‘ºé¸¿å¨€é‘ºè‰°å¨é‘»â‚¬é‘»å‚åª°é‘»å‘°åª¶é‘»å¤Žå«„é‘»æ ¬å«é‘»æ°³å«•é‘»ãˆ£å«¥é‘»ã„¨å«¨é‘»î‡å«­é‘»î…¡å«¯é‘»æ‹Œå«´é‘»å® å«·é‘»æƒ°å«º"],["c680","é‘»é¸¿å«¾",4,"é‘¼å©…å¯¢é‘¼å¶ˆå¯ªé‘¼æŽ•å¯­é‘¼æ ¬å¯´é‘¼æ¬’å¯¾",9,"é‘¼â•„å°“é‘¼î†¿å° é‘¼èŒ¶å°«é‘¼æ˜å°³éŸã‚ˆåŠ¸é¤èŒ¬æ¯Šé–åœ­æ£¡éè¯²çœ®ç’€î„‚ç˜’é‹å¿•å¢–æ¥ æ¥…î—å©•å‚œæ‘™ç»ã„¦æ‹ é¬ãƒ¦å«¾æ£°æˆ£ä¼ éä½½ä»’æ¶”æŽ‘æ½½é‘»ç¡…æ‚•éªžå†²åšŸé¡æƒ°ç˜Žçžå¿“æ½¯å¨‰å¥¸î•¬æ¿ å—™ç‰¬æ¦„å‹®æ©ç»®æ›žå¢«éŽµæˆ¦æ‘µæµ å—šå·»é’Â¤å½¥é’‚æ’ç…éˆæ‘æ¸»é…î†½éƒ¸ç’‹è¾¨æ´•éŽæˆžæ¹¡å¨†çƒ˜çˆ¾éŽ´æ°¬îž‡æ¶“å†¨å™­å©•å—˜ç…‰å¨Œå¿“å¾å¦«å¬ªîšŒå§Ñ…æš’å®•åº¤å‰±æ¦»æ„­æ£—ç»å ¢îš†æ¥ æˆ£æ£å®€å‚™ç¯‚æµ¼ä½¸æƒŽæ¿‚æˆ çˆ©é£ã„¦çšµæ©å‹«ç´”å§¹èŠ¥å¸¸ç’î‚£å¸Ž"],["c740","é‘¼æå°¶é‘½ä½½å´…é‘½å‹®å´Šé‘½å £å´",4,"é‘½æ’¹å´Ÿ",4,"é‘½æ¿Šå´²é‘½ï¿½",6,"é‘½ç¡…åµ‘é‘½ï¿½",6,"é‘¾å›ªå·¿é‘¾å©…å¸‡é‘¾å²ƒå¸Šé‘¾å¿šå¸Žé‘¾æˆ£å¸žé‘¾æ›¡å¸ é‘¾æ¥„å¸£é‘¾æ°³å¸©é‘¾ç†»å¸¯",6,"é‘¾î„ƒå¹é‘¾ï¿½"],["c780","é‘¾îˆå¹é‘¾æ˜å¹˜é‘¾èƒ¯å¼¬é‘¿å†­å¼°é‘¿å—šå¼µé‘¿å¤Žå¼¸é‘¿å¶ˆå¼¾é‘¿æ„¯å½‚é‘¿æŽ•å½„é‘¿æ›¡å½ˆé‘¿æ¬’å½‹é‘¿æ¶œå½é‘¿ãˆ£å½›é‘¿ã‚ˆå½Ÿé‘¿Ñ†å½£é‘¿î‚¥å½«é‘¿î…Ÿä¼†å¨²ç•Œå£éŽµï¹‚æ‹µé–¾å‘­å´ˆæ©ä½ºî„·æµ ç†»å”‰æ¶”é¹ƒç²©é–½éæŒ¸é“å¶†ç¶”é–¬ï½†ç¥¬ç’‹æ‘çˆ²å®“å±¾ç‘ºå§å¤‹ç™é›æ¶œåŽ°ç¼‡å±½î•¾é’„å³°å·±éŽ¶ãˆ¡ï¹ªé–¿è§„æš¡éŽ®å‹¬Ë‰é¬Ñ‚ç®¶æ¸šã„¥é˜€é—‰æ¨»æŒ°ç¼ˆæ¨ºæŠ„æ·‡å¿•çšé’å›ªå¯—æ¶“æ—€â‚¬îˆœçŒé–½ï¸¿é•œæµœèŒ¬Ð•éžæ‘å«Ÿé‘ºè§„æ¾ç»‚è—‰ç˜½å¨Œä¾€æ½šæžç»˜é˜¿éŠæƒ§åµ–å¨“å‘®æ¸é…å­˜éžéŽ¯å‘´ã€‹ç’‡å³°ç°¡éžè‚©â”“ç»‰å¬©ç¬œé–­è¾©æ‚†å§¹å‚šæ´‘é–°å¬«ç¡¡ç“’å¬ªå°¯é“”å—˜æ´¸éŸ¬îˆšçœ»æ¤¹è¾¨ç¬­"],["c840","é‘¿î†¿å½²é‘¿ï¿½",4,"é‘¿é¸¿å¾Žé‘¿è‰°å¾“é‘¿èƒ¯æ‚é’€å‚æ‚ˆé’€å›ªæ‚Žé’€å¤Žæ‚é’€æ„¯æ‚ž",5,"é’€æ¬’æ‚®é’€æ¶œæ‚¶",5,"é’€ï¿½",7,"é’€ï¿½",5,"é’€ç¡…æƒ¡é’€æ˜æƒ¥",7,"é’å›ªæ†Ÿé’ï¿½"],["c880","é’ï¿½",6,"é’ï¿½",4,"é’æ¨¿æ†¹é’ç‚¶æ†»é’çŠºæ†¿é’ï¿½",4,"é’î‡æ‡é’îˆæ‡“é’èŒ¶æ‡˜é’ç–¯æ‡é’æ˜æ‡ é™æ §Ç˜æ¦«å¬­å®é˜è¯²æ¹€æ£°Ñ„æ½ˆé–±æ¶™ç¡¥éã„§æ£…éŽ·å´‡å§®é’ç¨¿å§–ç¼‚è™¹å€²é¦ç¨¿åµˆæ¥£å©ƒÎ¨çº­î‡€æ³™ç‘æ¬‘å…¢é’å‰å™§éå¤‹ç…‹é¡ã‚…ï¿¥é€æ¨ºæ¯žç’â•…ã‚¶éŽµæ‰®ç²«éŽ¯åœ­å„¹æ¾¹îƒ¿ç²Šæµœå“„ç¹Šé—ŠÑ‚æ¢ç’ã‚…åž‰æ¿¡å©„éŸ©éŽµæ–¾ç²›éƒãƒ¦åž˜é‘¼æ­Œæ²é‘½ï½ˆç€ºé”æ—€æ†¾ç€¹åœ­ç²§éæ¥å¼¶éŒæ—‡å€é‘¼ç¡…çˆ¼éŽæŽ‘î„³æ¿¡å‚é¢ˆæ¶”è™«ç—éãƒ¨ã…æžîˆžæ§·é’‘å©„æ†ºé–¿æ„°æ£¸å¨‘ï¹å«¢å¯®è¾¨æ‹»å¨²æŽ•æƒƒé‘µî‡€ç¡Ÿæ¿‰ç‚¶ç¦Œæ¶“å¤Šå¼«"],["c940","é’ï¿½",4,"é’‚å†­æ‹•é’‚å‘°æ‹žé’‚å©…æ‹²é’‚ï¿½",7,"é’‚æ¨¿æŒŒé’‚æ¶œæŒé’‚ç‚¶æŒ“é’‚çŠºæŒ—",12,"é’‚æ‹ŒæŒ¶é’‚å® æŒ¼é’‚æƒ°æŒ¿é’‚æ˜æˆé’‚ææ¥é’ƒå‚æ©é’ƒå‘°æ¯é’ƒå›ªæ±é’ƒå¬­æ¶é’ƒåº¤æ¹é’ƒæŽ•æ‘‚é’ƒæ›¡æ‘‹"],["c980","é’ƒï¿½",4,"é’ƒç‚¶æ‘—é’ƒãˆ£æ‘›é’ƒï¿½",4,"é’ƒî…¡æ‘¦é’ƒîˆæ‘«",10,"é’ƒå€Ÿæ‘¼é’„â‚¬é’„ä½½æ”¤æµ¼ç‚´æšŽå¦—æˆæ£‘æ¶“Ñ„æ‚¢æ¥ æ°­å£‚ç€šå‚œæ†»é‘¹å‰è®¢å¦«î†¼å„³é‘¾åº£çˆžé‰â‚¬é’è§„çŸ™ç»¾åžå¦éŸãƒ§åŽ¼ç»›æ¶™æª¼éå©…å«¬é‰å¤ŠåŒ—é’çŠµå”ç›î‚¦æ£¯é—„æ›Ÿæ®ç’§Â¤å–…é å‹¬çéŽµå›©ç±æ¾§æŽæ¿€éŸå—šç¥»é…å±¼ç¬‚çæ°³ï¼“å§Šãˆ¡å´•ç»‹å¶‡å„³é‘ºå¶…å«¼é—Šè·ºçš¯éã„©åŸç¼å¶…ã‚¢ç’§å©…æ³§é‘¸å²ƒåž—ç’§ï¸½æ†šçå‹¬åŽ¬å¨‘å¤Œãžç’å‰§ç‰±é¢å†²æ‡Ÿæµ¼æ­ŒéŸ©å¨£åžîŸ†ç¼å‘¯îš£å¨Œå î…¸æ¿ å‰æ•‹é‘²ç‚¬åŽ§å¨“æ¥€ï¼é¢ç†ºæ•Ÿé—æ’å´Œç¼ï¿½"],["ca40","é’„ï¿½",8,"é’„å¶ˆæ”·é’„å¿šæ”¼é’„æŽ•æ•‚é’„æ›¡æ•„é’„æ¨¿æ•Šé’„æ¶œæ•Žé’„æ¿Šæ•’é’„çŠºæ•˜",8,"é’„ï¿½",9,"é’„ï¿½",4,"é’‘å‹®æ™ é’‘å—šæ™£é’‘ï¿½",10],["ca80","é’‘æ¥„æ™¿é’‘æ°³æšƒé’‘æ»†æš†é’‘ï¿½",4,"é’‘ãƒ¨æš’é’‘Ñ†æš•",8,"é’‘å® æš¤é’‘æƒ°æš¦é’‘æ­Œæš­é’‘å€Ÿæš±é’–â‚¬é’–ä½ºæ¸·é©æ¶˜å¢¿é‘³æ»ƒæ¹¥ç”¯å ã‘é™î†½æŸ¦å©€èƒ¯ç˜²çæ­Œæ«›é—ä½ºç…¶éŽ·ç‚¬æ¤‚æµ â‚¬æ¤‹ç†»æ®Œç€¹ç‚¶ç˜‘é™èŒ¬ç…æµ£åž®ç…æ¤¹è·ºîå¯®å¿•ãšæ¾¹î‚¡ç¬˜éŒå¤¸ç°¨éŽ·î…¡ç¡é–«æ¿†å¨é„îˆšæ£žé£î„„â‚¬å‚™ç²«æ¸šå¶‰å™´æ¥—ç‰ˆçš¬ç”¯å‚›äº™ç€¹ã‚ˆî‹ç’‡æ›Ÿæ•¹éŽµå¬®î›»ç€¹å î‡´éŽºå æ•­é™æ¥ƒæ§®éå€Ÿæ•©é‹ãˆ¡â’Šå¨ˆå©ƒå§ƒæˆæ’³å½…é‘¸æŽ“çª‡é¤å¿ŽåŠŸç’§åº¡î„©é”ç†»æŸ‰é†æˆžæ´ç¼ƒèŒ¶æ¸¶æ¦›å¶‰ç´¶çžç‚´æ¹³æ©ç‰ˆçˆ²é‰ç†¸åž—ç»”æ §î•ªæ´èˆµæšŸå©•ï¿½"],["cb40","é’–å‚æ»é’–å—šæž…",6,"é’–ï¿½",10,"é’–ï¿½",6,"é’–ãƒ¨æž½é’–Ñ†æŸ€é’–î‚¥æŸ†é’–î…¡æŸ‹",5,"é’–æ­ŒæŸ¡",6,"é’˜ï¿½",6,"é’˜ï¿½",4,"é’˜æˆ£æ£"],["cb80","é’˜æ—‡æ£–",5,"é’˜ï¿½",6,"é’˜ãƒ¨æ£ªé’˜Ñ†æ£¬é’˜ï¿½",14,"éŽ­æ›žåŸ›é‘°å¶†æ†¯ç›æ‰®æ•¥ç”¯å‘®çˆ´éŽ·æ’®æ¹é™å²€åŸ¥ç’‹ä½¹æŒ‰é«ï¼„â—£éšî†¾ç›æ¤¤é¸¿åž³ç’‡å¯¸î”šéˆæ—‚å„Šé‚îˆ›æŒ„é¢èˆµâ‚¬æ¿ˆî†é™é•ç¬£å§æ˜å€–ç€µå“„æ£§é¥æ¶—å·±æµ¼å¥¸ã‚²å®¸è™«æ¾—é‘°å‘Šâ‚¬å‚žî•§é–«ä½¸ç•«ç’è‰°î‡ªéŽ¼æ»†å¢­éŽ¿ç‚²æ¤Šé‘»å¿›å†æ·‡æ¥ƒç¤Œé–«ç†ºçŸ¡éå†²î”–å©§îˆšî†–ç’‡å¤Žå€‘é–°æ­ŒæŒç» æ¥„æ«§é—…å¬®æ®¢ç¼ãƒ©ç¦çº°åº¡çž¾ç»Œæ¥…äº—é—…Ñ…îš¤ç€›æ¬å´¯ç»—å¬­æ¼å§Šî…žæ”©ç¼‚â•ƒæ‚™ç»±ãˆ¤æ”£éŽµâ‚¬æ¿‰å±¼ç²¬ç€¹å†¨ã‚¹æ¿‰ï¿½"],["cc40","é’˜ç¡…æ¤‡é’˜è‰°æ¤Šé’˜ææ¦¾",4,"é“‡ï¿½",10,"é“‡æŽ•æ§—é“‡æ—‡æ§™é“‡ï¿½",15,"é“‡ã„¨æ§³",13,"é“‡ç¡…æ¨…é“‡æ˜æ¨ˆé“‡ææ¨‹é“â‚¬"],["cc80","é“ï¿½",11,"é“æŽ•æª½é“ï¿½",4,"é“æ¶œæ«†é“æ¿Šæ«‰é“çŠºæ«‹é“ï¿½",7,"é›î…Ÿå°€éŸ«å¬­ç¬é‘³åº¤å«ˆéŽ¶î„€å½´å¨‰ä¼´åŽ¼æ¾¶î…â‚¬ä½¹å‘é§å¶†æ†¡ç’î†æ§´å©Šâ•æ½§å¦¾â‚¬é¥ç‰ˆæ±Ÿç’‹î…¡çš¥é§ï¸½î‡¤çšæŽ”â’ŠéŽºãˆ å¾†éî…Ÿå ¡æ¿‰æ¨»æƒ‡é«å‚›ã€€é‘¶æ¶˜æ”¼ç»¯æ §â‚¬æ¨¿æ±‰å¨£å²ƒç¨›é‘î‚£å¸å¨‘æ¶™ç²©ç¼ï¹æ‚‡å¦—å†®â‚¬å†©çªé—„æƒ°î…¿æ¿‚æ¥ƒå£’é’˜ã‚ˆå˜é¤è‰°ç–å§Šîˆšå¢§éŸªãˆ¤æ”½éŽ»æ„°î•½éŸ«å‹«æš­æµ£æ’´æµ›é¤å¿”å„ å¨‘æ›žå¢çžå¤Šã‰å¨£è¯²ï½žé¢æ‰®æ•ŽéŽ­î„ƒåžŸé‘µå—˜å¯«é‰Â¤ç«£éªé¸¿çƒ¦ç’æ’®æ§ç”¯æ §å·ºéšî„‚å„"],["cd40","é“î…¡æ«™é“æ‹Œæ«œ",6,"é““ï¿½",6,"é““ï¿½",4,"é““æ—‡æ®©",5,"é““ï¿½",4,"é““ãƒ¨æ®¾é““î‚¥æ¯‰é““î†¿æ¯‘é““å® æ¯žé““æ­Œæ¯ é““ï¿½",4,"é“”ä½½æ³œé“”å†­æ³¤é“”å £æ³´é“”å¶ˆæ´…é“”æ’¹æ´‰é“”æ ¬æ´é“”æ°³æ´”"],["cd80","é“”æ¿Šæ´œé“”Â¤æ´Ÿé“”ï½ˆæ´¢é“”ï¹æ´¤é“”ã„¨æ´©é“”î‚¥æ´­é“”îˆæµ€é“”æƒ°æµ„é“”é¸¿æµ•é“”è‰°æµ—é“”èƒ¯æ¸·é“šå‹®æ¸½é“šå—šæ¹…é“šå²ƒæ¹ˆé“šå¿šæ¹Šé“šæˆ£æ¹é“šæ ¨çœ¬å¯¤å³°ä» æµœî…žæ¶µéŽ¸é¸¿å¢–é–«æ°­î”•é–°î†¾ç£éšå²„æ‘è¤°ã‚‡î¢å¦—èˆµå´Šç»›æŽ”ç²ºé¥æ¶˜ä¼”éŽ¶æ›žã”é–«å¿“åš«ç»‰å†ªçŠé¥æƒ§ç·¬é–«æ—€ç§±çžçŠ²æ¹¡éšæ„¬åŽ°å©€å¶…æ´ŸéŽºã„©î•¸é‘µèƒ¯æ¹‘ç‘œîˆâ‚¬â‚¬éšç‚²æ‚²é‘·â‚¬éŽ·æ ¨å¢­é‘´éå‚…é—„â‚¬æ¤¹î‡€â”˜å¦žî…žÎ•éŽ·æ’³æ–éŽ¸æ §æ°é“”æ¬é†‡æ¿žå†ªæ‘çšæ»„î„£æ¾¶æ ¬ç‚å¯®îˆ›å’•éœâ•…ã€—æ¶“å“¥å…Žç€¹å²€î•¼éŽ¸èŠ¥æ«„é¨æ ¨å„–ç€¹æ¶˜îŸ§æ¶“å›ªåŽ±å§¹î†å¸‡æµœâ„ƒç€´ç¼ƒæˆç·šéƒçƒ˜æ¹œè¹‡æ¨ºî›©æ¿žï¿½"],["ce40","é“šæ¬’æ¹œé“šæ¿Šæ¹¡é“šçŠºæ¹¦é“šï¹æ¹©é“šã„¨æ¹­é“šî‚¥æ¹°é“šî…¡æ¹³é“šæ‹Œæ¹¶é“šå® æ¹¹é“šæƒ°æ¹¼é“šç¡…æº€é“šè‰°æº„é“¦â‚¬",6,"é“¦å©…æ½’é“¦å¶ˆæ½–é“¦æ„¯æ½™é“¦æŽ•æ½é“¦æ›¡æ½ é“¦æ¨¿æ½¥",5,"é“¦Â¤æ½°é“¦ï¿½",7,"é“¦îˆæ¾…é“¦èŒ¶æ¾‡é“¦ï¿½"],["ce80","é“¦ç–¯æ¾‘é“¦ç¡…æ¾“é“¦èƒ¯ç€«é“»ä½½ç€¯é“»å—šç€²é“»å¤Žç€¶é“»å²ƒç€»",4,"é“»æ—‡ç‚é“»æ ¬ç…",6,"é“»ï¿½",4,"å®¸å¶…äº•é—éç…¢æ©æ¿‡î”Šé¥æ‘æ•®éŽ¯ç†¶è´Ÿå¨¼å¶‡æ·®é‘»å›ªæ‚—æ¿®æ–¾ç´µæµ¼î„ç†¬ç»¾î„æ¹­é’„æ°¬æ‡—é£å¿šå„é å‚žç“˜æµ£å¶†è…‘ç’‹æ’³çš¦éŽ±æ¿å´¼é¦ç†¸ä¿¯é““å©ƒæžƒé—‚è¤æ±—éšè¤Ç”ç»±å©‡æ£¶é¡ï¼„ç¸¼é¡î†½å¯¾é“šæ¥ä¸ç»æ¿‡åžœé‚â€³å´¸éŽ»â„ƒçŸå®¸î‚¢æ†¸é–½ã„¤ç®¤å§¹Â¤î‡¡çžå¬«æ£¤é‘ºæ»„â…¶éšæƒ§æƒ”å§£å¬«î„Ÿæµœæ—€å´…é—å £åž¶æµ¼å¶„äº•é§ç‚´åž”é—†ç‚¬æ«Žé—â•å¬é”â„ƒå€ç’‡îˆ›æ§˜é”æ¬ç€½ç‘—è·¨î”—é­èŠ¥æ«šé¢è¯²æƒ›é–¿ï¼„å£“"],["cf40","é“»ãƒ¨ç•é“»Ñ†ç˜é“»î‡çé“»æ‹Œç¡é“»èŒ¶ç¤é“»æƒ°ç§é“»æ­Œç©é“»æ˜ç±é“»æç´é”œï¿½",4,"é”œå›ªç„¾é”œå¤Žç…‚",4,"é”œï¿½",6,"é”œæ»†ç…—é”œç‚¶ç…™é”œÂ¤ç…é”œï½ˆç… é”œï¹ç…£é”œã„¨ç…©é”œî‚¥ç…¬é”œî…¡ç…°",9],["cf80","é”œé¸¿ç†é”œè‰°ç†ƒé”œèƒ¯çˆ›é” ä½½çˆžé” ï¿½",5,"é” ï¿½",7,"é” æ—‡ç‰€é” æ¨¿ç‰‚é” æ°³ç‰…",4,"é” ï½‡â–ˆéŽ­îˆšç¬‡éŽ®å¤Žå•™æ¾¶æ›Ÿå„¨é”å‹­å„»å©§î…çˆé˜â‚¬å¦¾å‹®î¨ç”¯î…ç¯„æ¿¯å†²æž©é–¾ï½†ç¤‚ç»¯å©šæ®­éŽ´å¿•ç²é¬åº¤æ«¨é–ï½‰æ¹ æˆæ ¨æ®—å®„â€²ç·ºé™î…ç¬…é˜ï¹€î˜´éšæ’´å·°é–¿ã„¥åŽ›æµ æ¬“çŸžç»¾ã‚…æ€ç’ã‚ˆî”™é‘¸çƒ½æ£½å¨‘åº¡é¸¡ç€šå±¾æ¨‰é—„â•ƒå¹‡éšî†¼å¹™é‘µæ´ªî›ªç¼‡â€³î†é—„çƒ½æªºç»¾è·¨æµ‰é˜ãˆ¤æš¥æ££æ¬‘î†ˆç‘—å‹¬ç®»æ¶”ï¼„ç¹‘ç»ãƒ¨î‡›éŽ¯å†²æ·æµœî‚¦ã€å®¸é”‹îŸ¾éå¿“æ‚œç’žÂ¤æƒ‚çº­æ¿‹æ¸¼é“å©‚æ‘¦é¤ï½‰æ”¢å¨‘å î†Œå¨£å—˜æª½"],["d040","é” ï¿½",13,"é” ï¿½",5,"é” é¸¿ç‰·é” å€Ÿç‰¼é” èƒ¯î”†ç›å‚î”ˆç›ï¿½",5,"ç›ï¿½",5,"ç›æ›¡î”›ç›æ¨¿î”Ÿ",6,"ç›ï¹Â¨ç›î‡â€¦ç›îˆâ€ç›å® ã€ˆç›ä½ƒã€Šç›æ­Œã€ç›ï¿½"],["d080","ç›æ˜ã€–çšâ‚¬çšå†­î•«çšå›ªî•®çšå©…î•±çšåº¤î•´çšæ„¯î•¶çšæ’¹î•¹çšæ›¡î•¼",4,"çšï¿½",4,"çšï½ˆâ…´",5,"çå¿“ç“­éÂ¤å€´éŸå“¥ç‘§éå Ÿîš™æµœæ¶™ç“é“¦åº¨ç€·é—å¿”å°‚éŽ¼æ´ªå‘é‚æ»†å„Šç’‹æ„¬å•“å§Šæ¿åµé”œè§„å™²å¨‰å‹¬éƒ´ç’‹ãˆ ç‰é’–î‡å§±é–¿å±¾î‚¾æˆæ¶™æŸŠè¹‡è¯²ç¸¾æ·‡Â¤î”Šé„ç†»å†éšâ•‚å…’éæ‘åžœé¨å¬ªèˆ°é–­ãˆ£î”‘é–±æŽ‘åž¢é‰å¿”â‚¬Ñƒî˜éå‹«åš©é‘³ç¨¿å¯›å§¹å½’æ³Ÿé”å©ç´¤æ·‡î†¾ç·¸éˆè—‰æ¢¾é–¿å ¢î…çšæ «å”¬æ¾§ç†¸åž–é—‡â‚¬é“æ°¬æ§æ¤¤è¯²ç·ªç’æ­Œæ«é–°æ¥€å½Šéƒî…žç°­é£æ»„ä»±ç»²î†¼â”›ç¼î†ç”»æžâ•æž¾ç€¹ï½†å“éƒå¬¬å·¹"],["d140","çšî„ƒî©çšîˆî«çšï¿½",4,"çšæ­Œâ’çšé¸¿â’’çšå€Ÿâ’•çšèƒ¯î—…ç‘å†­î—‰ç‘å›ªî—ç‘å©…î—ç‘å²ƒî—’ç‘å¿šî—•ç‘æˆ£î—˜ç‘æ ¬î—œç‘ï¿½",4,"ç‘çŠºï¼ç‘ï¹ï¼‡ç‘ï¿½",6,"ç‘èŒ¶ï¼•ç‘æƒ°ï¼—ç‘é¸¿ï¼›ç‘å€Ÿï¼Ÿç‘œâ‚¬ç‘œä½½î˜¨",5],["d180","ç‘œå¤Žî˜°",4,"ç‘œæˆ£î˜¹",4,"ç‘œï¿½",4,"ç‘œãˆ£ãƒç‘œã‚ˆã†ç‘œÑ†ãˆç‘œâ•„ãŒç‘œî…¡ãŽç‘œîˆã‘ç‘œèŒ¶ã“ç‘œä½ƒã—é–«å¤Œæ«éªâ•ƒç²´é—ˆç£‹æž¦ç€›ï¸¾â”é—†î‡î”…é•å¬¬å•…å¯°î…æ£³ç’‡ãˆ î‡°æ¤¹îˆšè´°å¨ˆå¤‹ç•ç’î…¡î††é–«å©…ç¹€é˜å¬«å¨‚æ¥¦ï¹‚è…‘é›â‚¬æ¶“î‚¥å¨Šé—æ¬’æ®°å®•æ ¬î”žå¨‘îˆžæ³¤éæˆœç°¹ç’å‰å‰¦éœä»‹æ§ˆé‘ç†¸é¥­é©æ„ªå¼—é®æ—‡æ¹Œå®€â•æ¬¢ç‘·â‚¬æ£°æ»ˆæ§‘éåº¢éƒ¨æ¿‚å‹¬å¸ºéªè‰°î”’å©•æ—‡å£‹é«æ‰®åš‚é˜å²€ç‰ƒé—†ä½¸æ”£è¤°ï¸¾åŠ™ç€¹ç£‹çš»æ¥ å±¾ç• æ¾¶î‡€è…ç»‰Ñ„æ½¹éŽµîƒ¿è’‹é¤ï¼„ç·¤å¨²å¬®æ§¼å§˜Ñ‚è¯é¥æŽ‘å‡éé”‹å­£é–­â‚¬é‘µæ¿î›»éŸï¿½"],["d240","ç‘œï¿½",8,"ç‘—å‚îšˆç‘—ï¿½",24,"ç‘—ï¿½",5,"ç‘—ï¿½",19,"ç‘—ï¿½"],["d280","ç‘—å€Ÿã‚¾ç‘•â‚¬ç‘•å‚î›©ç‘•å‘°î›¬",26,"éŽ½å›§å“€é–¬ãƒ§çžç’‹ï½…îŸéœî„ƒåžé‘½îˆî›¦é‘°â‚¬å¦žæ¿æª¸é‘°å‰åŸ›é–²åº¡å–æ¶”ç†¼ã€‰éŽºæ ¦ç¬Ÿé™èˆµæ´ºé‘µå¬ªî™å¨‘è¹­ç«´æ¾¹ç‘°å°°éŽ»æ ­æ‘«æ¸šæ¿…ç´›ç›ï½‰î•µæ¾¶çƒ½ä»ç»‰è®³åŽé‘³æ‰®æž’å¨Œå‚šç–æ¿®ã„¥ç¶•å¦žå‘°æ®ŽéŠæ°¬å‡¡æ¶”æ¬‘ç…Ÿæµ ãƒ¨å£“éŽ¶æˆžæ§—é–­æˆæƒ«æµœåž®ç„¦é‘·å—›â‚¬æ­Œå€“é¤î‚¡å®³ç‘æ—€å‰°å§£å‘­ç¹‚æ¶”å¤Œæ³­å©§ãˆ£î‡˜ç’î†¿çš§ç’‡æˆç´“ç¼ˆè‚©ç¹‰ç¼åº¤å°©é‘½î‚¢æ´œå¨ˆçƒ½ç…¶é—ƒæ‘Ð©éšç†¼æ‘±å¨£î‚¢ç˜æ¥—î†¼è‚®å¯®æ›¢æ®£"],["d340","ç‘•ï¿½",30,"ç‘™å†­î’ç‘™æ’¹î™ç‘™æ›¡îœç‘™æ¨¿îžç‘™æ¶œî¢ç‘™ç†»î¥ç‘™Â¤Ð‘ç‘™ã‚ˆÐç‘™ã„¨Ð—ç‘™î‡Ðšç‘™î…¡Ðœç‘™æ‹ŒÐŸç‘™èŒ¶Ð¢",6],["d380","ç‘™ï¿½",4,"ç‘·ï¿½",5,"ç‘·ï¿½",21,"é—æ‹Œå«³å¦¯åžâ”æ¥£æ¿ç°²ç¼‚ã„¨å¹‘é’€ã‚ˆæƒ€é‘½Ñ†æ½Žæ©åº¤è€½é©å å¥–æ£°æ «â€–é„çŠ²æ‘•éŽ·ãƒ¤å‰‘é‘·å†ªæ£ƒæ´ææ³¹éŸªå©…æµŒéœå¿”åµå¨‘å±¾æ¡ˆéŽ­åž®åª·é¢ã„¥è‡æµ¼æ¨»åè¹‡ÑƒæŒ¨é¢éå–é–¾â‚¬é˜è§„è¡¥å¨“æåŽœéˆå¤Šå¼¸é™å……ç¶‰é–²å¤Žî‡¦é™å è¾œæ©å‚›ç­æµœåº£æ³œå§’å—šæ«ˆéŽ°æ°³åžŽæµ£æ¬Žç¹›é–«é¹ƒå¥”éŽ°å¤‹ç¬£å¨“æ—ˆæ®”æµœå Å«é—†ã„¤ç¬Œçžè·¨îž…ç€¹å›ªî‡¢ç¼‡ç•Œå¸€é©ç†»å¦ºé–®ä½¸æ‚‚é–¬å›§æŸ£å®„î„å°½éŽ°å Ÿîƒé™è¾«å›ç‘¾ï¿½"],["d440","ç‘·ï¿½",31,"ç‘·ï¿½",8,"ç‘­ï¿½",21],["d480","ç‘­ï¿½",25,"ç‘­ï¿½",6,"å¨´æ‘ç˜¬ç‘æ›¢î•©ç’žî‚¦â”‰æ¥¦è™«ç¬‚éã‚…åŽ“é¨ï½ˆî•¦é˜ç†¸å½ºæˆæ›žæ´¯é›æ¨ºæ¸¾éšæŒŽç°®ç¼‚æ¨¿ç¹™é‘»æˆžåŠ¹éŽ¬ã„©æ«Œé‡æ‰®å®³ç“’å©…ç©¬é–½ãƒ¥æ¸¤ç»®ã‚†æ¹€éŽ®ï¹‚æ§„é‘°æ¨¹ç°¯é–®Ñƒå¯‘é—„ã„¥åŽ‘æ©æ„¯æš£é–°æ¿‡æª¿é—Šé›ç“¡é–æ¿ˆç‰³é‰å‚›ç‰»éå¤Œä¼¨ç€¹æ‹Œæµ‡éå¶…æ¹ªéœè¾¨æ•€é†å‚ç¦ç’§å†­å‰°é’î„„ä¼ƒç»¯ç†·åš³é’˜ç»˜ç’éƒâ•‚å°½é““ã‚ˆç°›é£îˆâ‚¬çŠµæ®éå‰åš—ç’ï½†å«¨é’æ¬è¾°ç’å…¼â‚¬åº¡î–ƒéŽ²åº¢æµ˜ç’§çŠ³å¢¡é è™«ç¦éˆî…¡æ¶§"],["d540","ç‘¾ï¿½",7,"ç‘¾ï¿½",7,"ç‘¾ï¿½",46],["d580","ç’œï¿½",32,"é–¾ï¿ æ¤„éªã„¦çˆ¡å§’ã„¥æ‹«æ¶”å¶‡å¢ç’‡å Ÿæ†³é‚å¬ªç•¢ç»å‹«â‚¬å“„î‡é¬ç»˜î‡–ç‘­åœ­çŸ˜å¨Œå‰§æ´€é‚â•„ç·±å®•î…žçé“‡å‘Šçˆ¤é—çŠ³åž¬ç»”æ¬ç®¾ç¼èŠ¥îŸ…ç»”çŠ²æ¡¨å©•å†²ç´¶éŽºå±¾å®šé‰æ ¦ç¬€ç”¯æ„¯å¤„æµ æ¥„å„‰é¦æ’®æ®°éŽ·æ¶™æ§¶éŽµç‚¬å¸ƒç’§ç”µåŽç¼ƒâ•åŽ—é‘²å›§å½«é–¬î†½å§ŒéèŒ¶æ´¶æˆæ¬’â‚¬å‘´æ•†é’„æ¥„ç¹–å¨´æ¬‘å¼½é‚ç†ºæ¹¡é¢å‹­ç‰•é‘·æ˜ç¤Šé–½å œç›é‹æ› æŸŸç’‡å©‡æ¸¿éŽ¸îˆžæ™£é—ƒä½ƒæ€éŽ¸ï½‡æ½„å¯°ä½ºå«²æµœå¤‹â‚¬æ—€æš£éŽ·îˆ›î„œé€ï¿½"],["d640","ç’œï¿½",34,"ç’Žï¿½",27],["d680","ç’Žã‚ˆîƒ€ç’Žï¿½",30,"ç”¯Ñ…æ£é–®æˆ£ç˜‰é‘ºæ¿‡çŠé€îˆšæƒé“šæ¨¼ç…¡é‘²ãˆ£å‰›å§¹ä½·ç®£ç¼å›ªäº´é©å­˜î˜²å¨ˆæ ¨å¢½éŠé—´ç·žé§â‚¬éŽ¸å›¨î„›ç“’æƒ§å½§éƒã„§ç„Šè¹‡æ¥å¯¶éŽºç–¯åš¦é‘·å¯¸ç–†ç”¯æ»ƒç¡»é’èˆµæ«¤ç»‰â•ƒîŸ€ç’ã„§å€·é¥æ—€ç²¸å¨Œè¤çŸæ¶“î… æ³¤è¹‡çŠ»æŒ“ç›é£Žç²“ç»‰å¶ˆåªé–²å¶„å¾Šæµ¼æ¥„åž·é›ã„¥çªžå¨²èŒ¶ç˜œç»®ãƒ¨é…±é‘²æ¨ºç¬ŸéœæŽ”æ¯ç€¹æ¬æ¨‡æ¥ ã‚‡å½”éî‡æ´“éˆè¾©å°“ç’‡æ­Œç˜ºé–«æ„®î¶é‘æ¶šåœéŽ·å‹­ç˜é¢å˜å¯Œé’æ¥ç…´é”â•„æ³™ç’î‡€æ‘³ç»›ï¿½"],["d740","ç’€ï¿½",31,"ç’€ï¿½",4,"ç’€ï¿½",25],["d780","ç’ï¿½",24,"ç’î„ƒî†ˆç’æ˜ç˜’ç’‡æ„¯î‡Ÿç’‹å¤Žç›€æµ£å¿”æ•žç»æ¿‹â”—éŽ¶æ’¶åŸ…éŽ·æˆ’ç¬“é®æ ¬æµ†éŽ¾æ‹Œç¦‹ç»¡å—˜ã€…æ´å‹®î—Šæ¿¡å—˜æŒ’æ¾¹î†¾å§¸å¦žåº¨æ•Ÿæ©å€Ÿç¦ˆé§çŠµç´‘ç’‹å——å™¯éŽ¹å¤‹å«é—æ’´î”‘éžãˆ£å¯”é–°å±½æ™žé«â‚¬éå…¼ç¥³éç‘°æŒ©ç’§å‹«Ð­å©Šå¬«ç©­ç€›æ»…ä¼ æµ æ—‚è‹¯å©Šæ’³ç“™é‘·î…ç¬‰ç€›æ¥…ç‘‘å¦«æ›¡é‡œç€¹æ¥ƒæ‚£éŽ¬è¤æ—±é–­ç¡…è›‹æ¿‚å¿”å¼½ç»‰ç†»å†»é—æŽ“æ£Œç»æ ¬ç˜é—ƒè¤ç²é–½è¤ç°œé¢æ’®å”¹éˆâ‚¬ç¼ƒî„çš§é–¬åž«æ§°å®¸ï¸¿ç¶ˆéŒç‚²ä»›æµ£æ»ƒæ½—æ´ï¿½"],["d840","ç’‹ï¿½",8,"ç’žå‚çœ±ç’žå‹®çœ³ç’žå £çœ¾ç’žå¬­ç„",7,"ç’žæ ¬çç’žæ¨¿ç“ç’žï¿½",5,"ç’žï¿½",6,"ç’žï¿½",6,"ç’žç£‹é’¡ç’žæƒ°ç‹ˆç’žï¿½",6,"ç’¨å†­çŸ‚ç’¨å—šçŸ…"],["d880","ç’¨å £çŸ‰ç’¨ï¿½",6,"ç’¨æ›¡çŸ•ç’¨æ¥„çŸ™",20,"æµœå¶„ç¬‡éâ‚¬æ¶“æ„¬è±¢é—å‘¬ç¬—æµœæ¨¹ç¬§æ¥æ’î„¥é£â•€è¾…ç»‚è½°ç¼šé–æ›šç®›æ¾¶î… åŸ¢é—î†½çš­é¥ç†»å„°æ££æ¥ç˜¬é«é¹ƒç´¬æ¶“æœµç°¾æ¦§æ„ªç®¿æ¶”â•€ç°±é‘ºå ç“«éŸî„€æ§’æµ å‹«å¸Šé˜æ¿†å¸²é˜ãƒ¥å¹ƒé—ˆãƒ¨ç¦Žé–æ°¬å½½é–ï¹€å°žé–æç¦é—ï¹€å´³é’å‚šåžé’åº¡åŸˆé’å†²åŸ§é“â‚¬é“å±½å¢³é“â€³å¢±é’‚îˆšå£—é”å‚šå¦¬é”æ„¬å§„éå‚œç¶Œæµœè®³ç²Œæµ å¤‰ç²‹æµ ã„¤å¼§æµ î‚¡ç²¸æµ¼æ¶—æ€€æµ¼î­é¥¯æµ å…¸è®¥æµ¼Ñ‚ç´šæµ¼î‚¡ç¶–æµ£Ñ„æ•»æµ£æ°«ç¶•"],["d940","ç’¨ï¿½",62],["d980","ç’©ï¿½",32,"æµ£ç†¶ç¶æµ¼è¹­å†€æµ£æœµé…±æ¸šæˆœç·£æ¸šå†§ç·©æµ£å¥äº¤æ¸šîƒéƒŠæ¸šîƒ¿ç·®æ·‡ï¸¿å¡æ·‡îƒç¹€æ·‡æ°«æµšæ·‡æ»€ç¹Žæ·‡ç†¶æ‰›éŠâ•äº´æ·‡å†²â‚¬î„€â‚¬å¿“â‚¬î†¼â‚¬î…çƒ¤éŠæ»ƒâ‚¬å±½â‚¬ãƒ¥â‚¬ã„¥ä¼¨é‹å†¨ä»Œé‹å äº·é‹î„€ä¼éŒãƒ¥å‹éŒâ•å¤éæ §å‰¢éî…žå„¸éï¹€å„ºéŽå›§å‰«æµ æ¿‡æ•–æµ£æ¨¹æ¸æ·‡åº¨ç·ºå§¹å—™è´éî†¼æ–¹æ¦›å¤î›½éä½¸î˜¹é•ç‘°å¯¦ç‘·å›§å¯ªé‘î‚¢î˜¾éæ›šç±‚éæ ¦æ’¼ç›î†¿â…³æµœä½ƒå‰¶ç‘æŽ”î›¥ç€£ç£‹çˆŸç¼‡ç¨¿å•±éåžå–—éï¿½"],["da40","ç’ï¿½",14,"ç’çŠºç¥½ç’§æŽ•ç¦‡ç’§ç†»å•ç’§ã„¨æ—¦ç’§î‡æƒ®ç’§î†¿å¼¹ç’§è¾«æŒ¡ç’§ï¿½",8,"ç“’å‚ç§²ç“’å—šç§¶ç“’å £ç§¹ç“’ï¿½",4,"ç“’æŽ•ç¨‰ç“’ï¿½",9,"ç“’çŠºä¸"],["da80","ç“’ãˆ£é’‰",12,"ç“’èŒ¶æŠ–ç“’ç–¯è±†ç“’æ˜ç£ç’ºâ‚¬ç’ºä½½ç©«ç’ºå‘°ç©±ç’ºå £ç©³ç’ºå©…ç©½ç’ºæ„¯çª‰ç’ºæ’¹çª‹é‘å›§å•éãˆ å•£ç’çŠºî…½ç’Ñ†î†ç’ç£‹î†Œç’ç–¯ç˜‹ç’‡å†­ç˜šç’‡å¿šç˜žç’‡æŽ•ç˜¬ç’‡æ—‡ç˜±ç’‡æ¨¿ç˜·ç’‡æ»†ç™‚ç’‡çŠºî‡™ç’‡ã„¨î‡žç’‡î†¿î‡¥ç’‡å® î‡«ç’‡ç¡…î‡±ç’‡èƒ¯çšœç’‹å‚çš ç’‹å›ªçš©ç’‹å¿šçš¯ç’‹æŽ•çšµç’‹æ›¡çš·ç’‹æ¬’çš¼ç’‹æ¨¿çš¾ç’‹ç†»ç›ƒç’‹Â¤å“Žç’‹Ñ†è”¼ç’‹î‚¥çˆ±ç’‹îˆå®‰ç’‹å® æš—ç’‹è·ºå´ºé—æ´ªæ§¤é—ƒãˆ¤æ§¨é—ƒéæ§³é—ƒä»‹æ¨‡é—„å‚žæª³é—„æ—ˆæ«‰é—„Ñ‡æ«–é—„æŸ¥æ«žé—…å ¥æ®Ÿé—…æ¥…æ¯Žé–­æ¥…å€¹é–­æ¿‹å€·é–­î„„å‚é–­æ’®åé–­å •å¤"],["db40","ç’ºæ›¡çªç’ºæ¬’çªšç’ºçŠºè´°ç’ºãˆ£ä¼ç’ºï¹é˜€ç’ºâ•„ç¿»ç’ºî†¿é’’ç’ºè¾«å‡¡ç’ºç£‹èŒƒç’ºè‰°è‚ª",6,"éŸªå—šç«¾éŸªå £ç¬…éŸªå¶ˆç¬ŒéŸªæ„¯ç¬éŸªæŽ•ç¬“éŸªï¿½",7,"éŸªçŠºæµ®éŸªï¿½",4,"éŸªî‚¥è…‘éŸªæ‹Œè¦†éŸªå® å¤éŸªæƒ°é˜œéŸªæ­Œå¯ŒéŸªè‰°å¦‡"],["db80","éŸªèƒ¯ç®–éŸ«å‘°ç®šéŸ«ï¿½",4,"éŸ«ï¿½",5,"éŸ«ï¿½",11,"éŸ«Ñ†é¾šéŸ«î‡å…¬éŸ«î†¿è´¡é–­æå˜é–®å¿›å„é–­é¹ƒå„›é–®å‹¯å„‘é–®æ’»å„²é–®ãˆ¤å„¨é–®æ¥…å„§é–®î‚¦å„»é–®é¹ƒå‰Ÿé–¯ãˆ¤åŠ„é–¯ï½‰åŠšé–¯îˆžåŠ°é–°å†®åŽ—é’å¶…îš‡é”ãˆ å§®é”î…žå¨‹éåž®å«„é•æ §å«²é™ç†ºåš é­å¶…æ·®é‘é›åš°æ¥îˆšå¹Žå¯®ä½ºæšå®¸îˆšæ½“é¨â•çæ¿‰æƒ§â’“æ¾¹å‘­î—–é¦â•æ¹°é¦î„æ¹·é¦ç‘°æ¹²é¦îˆšæ½¨é¦è¯²æ½…é§â•ç€°é§î‚¢ç€±é§ç…Žæ¾”é§ã„¥æ¾€é§è·ºæ¾‡é¨î…žç“é¨å±½ç¢é©å¿“ç–é¨æ‘ç€é¨çŠ²ç…é©æ¨ºç…”é©æ¬ç…‰é¨ç¨¿ç…·é©îˆšç…¾é©ã‚…ç…—"],["dc40","éŸ«å® æ²ŸéŸ«ï¿½",4,"éŸ«å€Ÿå’•éŸ¬â‚¬éŸ¬å‚ç°éŸ¬å‹®ç°¡éŸ¬ï¿½",6,"éŸ¬æˆ£ç°°éŸ¬æ’¹ç°³",6,"éŸ¬æ¿Šç°¾",11,"éŸ¬î…¡å¯’éŸ¬æ‹Œç½•éŸ¬ï¿½",6,"éŸ¬ï¿½",7],["dc80","æŒï¿½",10,"æŒï¿½",21,"é«å¬ªçˆ«é©è—‰ç…­é«â‚¬é«ç‚²ç‰‚æ¿‰å‹«ç‰‹æ¿‰ãƒ¥â€–æ¾§ä½¸î•®æ¾§æ°¬î•¥æ££ã„©ç´®éŽ³èƒ¯å£’é‘¹å€Ÿå£™é‘ºå¿šå¦¸é‘ºã„¨å¦±é‘ºåº¤å§‚é‘ºæ¥„å§é‘ºî‚¥å§¼é‘ºæå§²é‘»å £åª»é‘»ï½ˆå§Œé‘ºç–¯å§°é‘»å¬­åª½é‘»ä½½å§ªé‘ºç£‹å§Ÿé‘ºî‡å§›é‘»å‹®å«€é‘ºã‚ˆå«›é‘¼å¤Žå«¹é‘»ã‚ˆå¯©é‘¼å›ªå«“é‘»ç£‹å«†é‘»æ¨¿å¯£é‘»æ˜å«‡é‘¼æˆ£å¯¶é‘¼å—šå¯¯é‘¼æ›¡å«šé‘»æ›¡å¯½é‘½æˆ£å´¨é‘½æ»†å¯›é‘¾æŽ•å°²é‘¼ç£‹å°¡é‘¾æ¶œå´¬é‘¼îˆå´—é‘½å›ªå´ˆé‘½ç†»å´é‘¼æ¥„å´°é‘¼î…¡å°¯é‘¼å® å´·é‘½ï¿½"],["dd40","æŒï¿½",62],["dd80","æ“ï¿½",32,"é‘½ã„¨å¯·é‘½â•„å´¿é‘½î‡åµ€é‘½î†¿å¹‡é‘½æ­Œå¹Šé‘¾ç£‹å¸¬é‘¾î‡å¸—é‘¾æ»†å·ºé‘½è‰°å¹Žé‘¾â•„åµ”é‘¾æ­Œåµ’é‘¾æ¨¿å¸ªé‘¾ã„¨å¹’é‘¾è‰°å¼«é’€ä½½å½žé‘¿æ¨ºçˆ£é’€æ¨¿æ‚‘é‘¿æ¿Šå¾‘é‘¿æ ¬æ‚³é’€æ­Œæ‚œé’€å—šå½…é‘¿ç†»æ‚˜é’€å†­å¾ƒé‘¿ç¡…å½§é‘¿å‘°å¼¨é’€ï¹å½´é‘¿Â¤æ†¸é’æˆ£æ†µé’æ¬’æ‡—é’‚å›ªæ‹¡é’é¸¿æ‹¤é’æ­Œæƒ£é’å—šæ‡‡é’æƒ°æ‹°é’‚åº¤æƒé’î…¡æ§é’ƒå¶ˆæ»é’ƒï¹æŠé’ƒæ’¹æ³é’‚èƒ¯æ„é’ƒçŠºæŒ•é’‚ç¡…æŒ»é’‚æ¥„æ‘œé’ƒï½ˆæ”²é¢å¶ˆæ•»é’ƒæ‹Œæ•¼é’„ç†»æ•½"],["de40","æžï¿½",32,"æžî‡ç·šæˆå²ƒç·¬æˆæ¿Šç·ºæˆÂ¤åŠ²æˆã‚ˆèŒŽæˆï¹æ™¶æˆî‡ç²³æˆî…¡äº•æˆîˆé™æˆå® æ•¬æˆä½ƒç—‰æˆæ­Œç«žæˆæ˜ç‚¯æˆèƒ¯ç¸ºæ©å†­ç¹‚"],["de80","æ©ï¿½",4,"æ©å¿šç¹æ©æ ¬ç¹”æ©æ°³ç¹æ©Â¤æµšæ©Ñ†æ¥·æ©îˆå‹˜æ©èŒ¶çœ‹æ©ä½ƒæ…·æ©é¸¿ç‚•æ©è‰°çƒ¤æ©å—â‚¬å›¬â‚¬å ¥â‚¬å²„â‚¬åº¨â‚¬æ’»â‚¬æ›¢â‚¬æ¨¿æ™¼é’„æ˜æ‘½é’ƒè‰°æš€é’‘å £æš”é’‘ã‚ˆæšˆé’‘è™¹ç‘é’‘å†­æš¡é’‘æ˜æž»é’–ã„¨æžƒé’–å¿šæšªé’–î†¿æž©é’–å‘°æŸŸé’–ç–¯æŸŠé’˜æ’¹æ¢ºé’˜æ»†æ¤é“‡Ñ†æ§„é“‡â•„æ§šé“‡ç…Žç—ªå¯®å ãœæ¿‚ä½½â‚¬å³°îššæ¿‚æ°¬îšé–å¿“é˜¿çãƒ¥è‰¾çå­˜å¢éŽµî…å§›éŽ¶ç»˜åª»éŽ·æ°­å«éŽ·î†½å°‡éŽ·èˆµå°®éŽ¹å¬«å´ˆéŽºî…Ÿå½¾éŽ¹è¾¨åµ‘éŽºåº¢å¹‹éŽ¹î…Ÿå¹€éŽºå©ƒå´ºéŽºî†½å¹–éŽ»å‰å¾ƒéŽ»çŠ³å¾”éŽ»å‹¬å½éŽ»åº¢æ†­éŽ»å—˜å¹˜éŽ½å‘®æ†—éŽ¼å¬«æ‚°éŽ¼çŠ³æ‚“éŽ¼ï¸½æ‚ºéŽ½ç‚´æ‹•éŽ½î…ŸæŒ…"],["df40","é–«æ¬“â‚¬æ»ˆâ‚¬ï½‰â‚¬ã‚‰â‚¬ãƒ©â‚¬ï¿½",5,"é–«ï¿½",4,"é–«çƒ½â‚¬å½’â‚¬æ´ªâ‚¬ä»‹â‚¬å—äºé–¬å†®äºé–¬å—›äºª",4,"é–¬åº¨ä»ˆé–¬æ›¢ä»é–¬æ¬“ä»›é–¬ï¿½",5,"é–¬ã‚‰ä»¸é–¬Ñ‡ä»¼é–¬îˆä¼€é–¬î„„ä¼…",4,"é–¬ï¿½",6,"é–¬é¹ƒå€Ž"],["df80","é–­å‹¯å€•é–­å—›å€—é–­å¤å€žé–­ï¿½",4,"é–­æŽ—å€²é–­æ ­å€¶é–­æ°¶å€»é–­ç‚ºå€é–­çŠ»å†é–­ãƒ©å‹é–­ã„©åé–­î‚¦å”é–­æŸ¥å¡é–­å¥¸å¨é–­å—å„‰éŽ½çƒ˜æŒ¿éŽ¾å‘ŠæŒ‹éŽ¾çƒ˜æ¥éŽ¿æ„­æ‘‹éŽ¿ã‚†æ‘™é€å¤‹æ•Ÿé€î†¼ç´œè¹‡æŽ”æ•Šå¯®æˆå´¯é™åžå¾‘é™â•å½£é™è¯²æ‚žéšæ §æ‚Šé›å¬ªæ†­é›æ’³æ†¯é›æ §æ†™éšâ€³æ†²é›æ¬æ‚¾éšæ’æ‹éœæ–¿æ‡›é›åžæ‡éœæ°¬æŒéœå‹«æ‡šé›ï¹€æŒéæ„¬æŒ±éå‚šæŒ»éæŽ‘æŒ§éœï¹€æ‘€éæ–¿æ‡–éœï½…æ‘ƒéœè¯²æ’éå±½æ‘éæ°¬æ‘éœâ•æŒ­éœã‚…æ‘‘éå¿“æ‘“éžæ¶˜æ‘ŸéžçŠ²æ‘»éžæ–¿æ‘®éžãˆ æ•šéžå¿“æ”½éžÑƒæ•§éŸÑƒæžé é›æ™§éŸî…žæ™›éŸæ›žæ–‚éŸæ„¬æ•¿"],["e040","é–®å‚žå„é–®å—›å„“é–®å¤å„–é–®å²„å„˜é–®æŽ—å„Ÿé–®æ›¢å„¢é–®æ©€å„¥é–®æ°¶å„ªé–®ç†¼å„¬é–®ï½‰å„°é–®ãƒ©å„µé–®îˆå„¸é–®î‡€å„¼é–®éå„¾é–®æŠ½å…Šé–®å •å…Žé–®å½’å…’é–®å©šå…—é–®å—å‰™é–¯ä¾€å‰é–¯ï¿½",19,"é–¯æ°¶å‰¾é–¯ï¿½"],["e080","é–¯æ¿‹åŠ…é–¯çŠ»åŠ‡é–¯ï¿½",10,"é–¯ä¼´åŠœ",6,"é–¯ï¿½",8,"é–°å‹«æ•ºéŸæ §æš¤éŸè·ºæš¦éžå†²æ•¯éŸæ»ƒæžŠé¡æŽ‘æ»é åžæŸŸé å æ¹é ç†·æš°é¡æ §æž’éŸè¯²æ£¢é è—‰æŸ§é æ–¿æž¡é¡î„æ¤ƒé¡å¤Šæ§¦é¡æˆæ£²é¡î„€æ£“é¡ï¹€æ£Ÿé¡å‹«æ£·é¡ãƒ¥æ£½é¡å†²æ£‡é¡å¶…æ£¬é¡é›æ£¨æˆæ–¿æ§¥é¢å æ§é¢ä½¸æ§«é¢ï½…æ¤Œé¢â‚¬é¢Ñƒæ§¶é£æ¨ºæ¨„é£æ¥€æ§µé£å¶…æ«Œé£æ¬æ«†é£å±½æª¾é¤å——æ«Žé£åžæ«•é£è¯²æ«¦é¤å‘­æ®¦é¤îˆšæ´ˆé¥æ¥€æ´•é¥â€³æµ€é¥î‚¢æµŒé¥åž®æ¸¼é¦å©‚æ¹é¦æ»ƒç¬ç”¯æ¬ç¬–ç”¯æˆå‰¯ç”¯è¯²è®£"],["e140","é–°å‘´åŽ™é–°å ¥åŽ¬é–°æ’»åŽ°é–°æ›¢åŽ²é–°æ©€åŽµé–°æ¶¢åŽ¹é–°ç†¼åŽ¾é–°ï¹‚åŽé–°ã„©å“é–°î…¢å§é–°æ´ªå‡é–°å¥¸å”¨",4,"é–±å—›å”¸é–±å©‡å•‚é–±å¿›å•Œ",6,"é–±ï¿½",5,"é–±ï¿½",5,"é–±î‚¦å•²é–±ä¼´å•½é–±æŸ¥å–…é–±å •å–Žé–±æå–’é–±ï¿½"],["e180","é–±ï¿½",10,"é–²å ¥å™µé–²æ„°å™¿",9,"é–²ï¿½",8,"ç”¯å³°ç®˜éªžæ–¿ç®¾éªžç‚²åŸ‚å®€å±½ç„™å®€å¶…çŸå®€æ §çŸ†å®€æ¨ºçŸ™å®€æˆçŸšå®€æ»ƒé©³å®€ãˆ æ­¥å®€î„€æå®€åžçŽ»å®„ä½¸åœå®„å‹«ç¡³å®„ã‚…ç¡§å®„ãƒ¥ç£¦å®•å†¨æ£å®•ï¹€ä¸²å®•ã‚…ç¤Šå®•å——ç¤‡å®“æ¨ºæ·³å®•æ‘å”‡å®“î„€ç¦Œå®“îˆšç¦Žå®“î‚¢ç¥´å®“å©‚æ—¦å®“æ‘ç§±å®¥æ¬ç¨˜ç’žå†²æ–—å®¸å‘­åŒ è¤°å³°ç·œå¯°å›§ç·£å¯°å±½ç·¯å¯°æ¬ç·¶å¯°ã„¥ç»å¯°é›ç‚¯ç›ãˆ å¥é˜î… å§²é˜å¯¸å§ºé˜å“¥åª°é™ä½ºå«€é™å¶‡å«†é™ã„§å«°é™â•ƒå«´é™å¯¸å«¹éšä½ºå«µéšå†ªå«¼"],["e240","é–²ï¿½",62],["e280","é–³ï¿½",32,"é™è¤å¯³éšæ’¶å°…éšå©„å°€éšæ¿ˆå¯±éšãˆ¢å°®éšãƒ§å°™éšå“¥å°¡é›æ„®å´“é›æ¥ƒå´°é›î„‚åµ‚é›æåž±æ¾¶ãƒ©ï¼‡æ¾¶ã‚…î˜§æ¥—ï½‰ã‚§",5,"æ¥—æ’®ã‚·æ¥—ä»‹î›¥æ££å‹¯î›¬æ££å©‡î›²æ££æ„°î›¶æ££æ’»î›¹æ££æ›žç°šæ´æˆç°¨æ´æ §äº¥æ´çŠ²æ±—æ´é›å£•æ´å® ç¥¿å¯¤æŽ‘ç²¦å¯¤æ¶˜èŠ±å¯¤î‡å–“è¹‡å‹«ç¹…è¹‡æ §ç¹ŒéŽ¬å†¨æ…¨éŽ¬å‹«ä¿Šè¹‡ã‚…çƒ¤éŽ¬å‘®â‚¬å——å¼€è¹‡î…žæ‰›éŽ¬æ¬â‚¬åž«â‚¬ï¸½â‚¬æ¶™â‚¬å¿”â‚¬å¶†â‚¬â•‚â‚¬î‚£â‚¬å©ƒâ‚¬æŒŽâ‚¬â„ƒä¼•éŽ­è§„ä¼éŽ­çƒ˜äº—"],["e340","é–´ï¿½",45,"é–´ï¿½",16],["e380","é–µï¿½",7,"é–µï¿½",24,"éŽ­î…ä¼£éŽ®æ ¨å€¸éŽ®î…Ÿå€½éŽ®å†©å€°éŽ®å±¾å€¹éŽ¯î„å¦éŽ®è¾¨å„©éŽ¯æ¨»å„éŽ¯æ°­åžéŽ°çŠ³åŠéŽ°æ›ŸåŠŠéŽ¯å­˜å‰™éŽ°åº¢åŠ”éŽ±å©ƒåºéŽ²î„å•éŽ²Ñ„å–ŽéŽ³æ—€åš¨è¹‡æ¿‹æ¯˜é—‚â•…æ£²é—‚éæ£¾é—‚ç”¸æ¤‚é—‚å¥¸æ¤Œé—ƒå†®æ§ƒé—ƒå—›æ§‡é—ƒå©‡æ§‹é—ƒå²„æ§é—ƒå¿›æ§–é—ƒæ›¢æ§šé—ƒæ¥…æ§žé—ƒæ°«è„¯é–æŒŽåž¥å§˜åž«çŒå§¹æ»„çœ¾å¨Œï½†çŸƒå¨Œæ„­çŸ“å¨Œå±¾æŠ¥å§¹â•‚è´å§¹èˆµçŸ„å¨Œâ•‚ç¡±å¨‰æ—€ç®”å¨‰é”‹æŽ£å¨‰è¾¨ç¡¹å¨Œå‰ç¢ƒå¨‰æ ¨æ¾ˆå¨‰î‚£é’žå¨Œè¾¨ç¡´å¨‰îˆ›å°˜"],["e440","é–µï¿½",5,"é–µï¿½",24,"é–¶ï¿½",31],["e480","é–¶ï¿½",32,"å¨²è§„æ£å¨²å±¾ç¥ªå¨´å Ÿç£­å¨²å‹¬ç¤„å¨²åº¢ä¼ å¨´å¶†ä¸²å¨²åž«ç¤†å¨´å¿”ç¥¾å¨´æ—€é—¯å¨‘æˆžå¼¹å¨‘ç‚´ç¨œå¨´ç‚´ç¨‰å¨‘æ—€ç¦å¨´çŠ³å¯¼å¨´ï½†ç¬Ÿå¨£å›¨ç©®å¨£ç‚´ç¬Œå¨‘æŒŽçª¢å¨“æˆžä¹å¨£æ¿‡çª“å¨“æ ¨ä¸œå¨“å±¾æ‡‚å¨“î‚£å·©å©€åº¢å…¬å©§å‰ç¯ƒå©§å—˜ç®µå©€æ—€è¦†å¨“ãƒ¦ç®˜å©Šç†¸ç½•å©§æ¨»ç²»å©•î…Ÿè™Žå©§ãƒ¦éª‡å©§èŠ¥å¤¯å©§é”‹ç²­å©§å­˜ç²¡å©§å¿”ç²‹å©§ç†¸èˆ°å¨¼å—˜çµ¿å©•ã‚†ç´©å©Šè§„é›†å©•èˆµç¶ƒå¨¼å­˜å‰å©•å¤‹ç¼‰å©¢å¤‹ç·§å©¢å±¾ç¤å¨¼å‰éƒŠå¨¼çƒ˜ç¹Ž"],["e540","é–·ï¿½",51,"é–·ï¿½",10],["e580","é–¸ï¿½",31,"é–¸î‚£ç¹…å©¢Ñ„ç«Ÿå©¢èˆµç¸½å©µâ„ƒæ…¨å©µç‚´ç¹å©µîˆœâ‚¬æ°±â‚¬ï½‡â‚¬æ¶šâ‚¬åœ­â‚¬ç”µäº¸éç‚²ç•ç€¹å‹«ç•·ç€¹æ’³î…¼ç€¹å“¥æ•®æ¥ ç‚´æƒ”ç€µã‚…î‡£ç‘œæ¿î‡¥éŸ«å›ªç‘–æˆæƒ°ç¹æ©æ›¡éªæ©î†¿éƒ¡æ©â•„å–€æ©å® å¡é–«å‘´â‚¬å‹¯â‚¬å¬®â‚¬ï¹‚â‚¬æˆ¦â‚¬å¶‰â‚¬æ ­â‚¬ï¿ â‚¬ç”¸â‚¬å •â‚¬î…¢â‚¬îˆžäºœé–¬æˆ¦äº½é–¬æ„°ä»ºé–¬æ©€ä»®é–¬æ¶™æ¯ é–¬æ’®ä¼£é–­å‚žå€›é–­å†®å€ è¤°æ„¬ç¶è¤°æ §ç¶çè¯²æŒ®çžæ„¬ç“ç€›åžä¿çžï¸¾ç‚¯å¯®î„ç¼‰å¯®î…¡å£Œå¯®å¥¸îƒ–çžî†¼î›¦æ¿¡å†¨î›²æ¿¡â•Îšæ¿¡ï¿½"],["e640","é–¸ï¿½",34,"é–¹ï¿½",27],["e680","é–¹ï¿½",29,"é–ºå¬®å¼»é–ºå¶…î›¼æ¿®å©‚Î›æ¿¡ç‚²Î”æ¿®æŽ‘Î£æ¿¡îˆšîœæ¿¡æƒ§â–æ¿žå——î¢æ¿žå Ð’æ¿®æ¨ºÐ§æ¿žå±½â–”æ¿žæ’Ã¹æ¿žæˆÇŽæ¿žæ’³ï¹¢æ¿ ÑƒîŸ¨æ¿ æ›žîŸ‡æ¿ ãˆ â”‘é‘³î„€î€‰æ¿¯æ¶˜â”“æ¿ å“„î€ç€šî‚¢î€‘ç€šæŽ‘ç¨æ¿¯ç¨¿ç·ç€šï½…î®ç€šæ §î£ç€šæ¨ºç³ç€£å¤Šç‘®ç€£æ §îƒç€£å³°ç“ˆçæ›žçš½ç€›æ°¬î„žç€›å†²ç“šç€›æ’³î„›æ¤¹ç”¸â”“æ¤¹æâ”–æ¤¹å—â”™æ¥ â‚¬æ¥ ä¾€çæ¥ å ¥ç–æ¥ æ„°çŸæ¥ æ’»ç¤æ¥ æ©€ç©æ¥ æ»ˆç«æ¥ ç†¼ç±æ¥ ãˆ¤î€‚æ¥ ãƒ©î€†ç»¾ç†ºéª¸ç»¾ï½‡äº¥ç»¾ã„§æ†¨"],["e740","é–ºï¿½",7,"é–ºï¿½",54],["e780","é–»ï¿½",32,"ç»¾î… å–Šç»¾å‰§ç²ˆç¼ä½ºç²‹ç¼å¤Œç²™ç¼å²€ç²£ç¼æ—‚ç²­ç¼æ¶šç²»ç¼ï¼„èŠ±ç¼î‚¤åˆ’ç¼îˆœæ§ç¼èŒ¬ç´žç¼å‰ç¼“ç¼è¤ç—ªç¼‚ä½ºç´“ç¼‚å†ªç´˜ç¼‚å ¢ç´œç¼‚å²€ç´¡ç¼‚æˆ ç´¥ç¼‚æ¥ƒç´®ç¼‚æ»…ç´±ç¼‚ç†ºè‚Œ",6,"ç¼‚î†æžç¼‚î„‚è¾‘ç¼‚ï¿½",4,"ç¼‚é›è´­é£åž®çª™é¢é¹ƒå€³éœåº£å¸’éœî†¾å¸°éœç†ºå¼¿éå‚œå½‚éœé£Žå¹Šéâ‚¬éå¤Œå¼µéãƒ§å½Šæ¤¤è‚©æ‚éâ•ƒå½ éç‚µå¹’éèŒ¬æ‚˜éžî†æ†¶éžï¸¾æƒ€éžã„§æƒéžî†¾æƒ‰"],["e840","é–»ï¿½",14,"é–»ï¿½",43,"é–¼î„„æ‡Žé–¼î‡€æ‡"],["e880","é–¼ï¿½",20,"é–½æˆ¦æŒ…é–½æ©€æ°é–¾å¿›æ‘€é–¾æ—ˆæ‘Žé–¾ï¹‚æ‘¶é–¿æ»ˆæ•”éžæ¶šæ‚®éŸä½ºæ†¸éŸæ¥ƒæ†°éŸæ¬‘æ‡›éŸî… æ‡¢é æ»…æ‹µé â‚¬é ä½ºæ‹ é å¬¬æŒ’é ã„§æŒ¬é æ„®æŒ§é¡æŽ”æ„é—Šîˆç…«é—Šî„æ½“é‰æ’´æ½ªé‰å Ÿæ½»é‹ãƒ¦ç€²é‰î…æ¾‡é‹æ¨»ç–é‰åž«ç—é‹ç‚´çœé‹å¬«æ¾é‰å…¼ç…±éå¤‹ç…’éå©ƒç…©é‹ç‰ˆçˆ©éŒæ¬ç¥éŒæ°­ç£éŒæ¿‡çˆ›éŒå†©ç¨éŒãˆ¡çˆ­éŒä½¹ç†ƒéå‰ç‰«å¦—çŠ³ã€€å¦—åº¢ã€å¦—å‹¬Â·å§Šå†©ç‰†å¦—æ›ŸË‡å¦—ä½¹Â¨å¦—â‚¬éç‚¬î”å¦—å¤‹ç‰˜å§Šåž«î•´å¦—å­˜ã€‹å§Šæ’´ï½žå¦«å‚›ã‚®å¦«å…¼î™„å¦žçŠ³ï¼™"],["e940","é–¿Ñ‡æ•µé–¿ä»‹æ™é—€å ¥æ™ªé—€æ›¢æšé—€çŠ»æšœé—€æ’®æš¤é—€ï¿½",7,"é—â‚¬",42],["e980","é—ï¿½",32,"å¦žã‚†ï¼å¦žå¬«î˜¦å¦¤æ¥ï¼ƒå¦žæ„­ã‚±å¦žè§„îš¥å¦¤å‚›îš¢å§’å‹¬ã‚«å§’â‚¬å§’æ¨»ã‚¸å¦žå­˜î‘å§’å›¨î›­å¦²åº¢î›®å¦¤ï¸½ã‚£å¦¤è§„îœ€å§’Ñ„îž‡å§’î‚£Îå¦²æ—€Î¡å¦²ä½¹îå¦²ç†¸î›ºå¦²çŠ³î›²å¦²æŒŽÇ’å¦²î…Ÿîž½å¦¯æ¨»â”å¦²å‰ï¹¦å¦¯ç‚¬ç±å§—æ„­îŸ¸å¦¯åž«ç›å§—è§„Å„å¦¯ã„¦îŸµå§—å…¼çžå¦¾æ„­î€ˆå¦¾æ¥î€Šéšé£Žå´šå¨ˆä½¹ç•Ÿå¨ˆå›¨ç•¡å¨ˆæŽ“ç•µå¨ˆå¶†ç•¾å¨ˆæ¶™î…¸å¨ˆî‡å°†æžî…¡å¥–æžèŒ¶åŒ æžä½ƒè•‰æžæ­Œæ¤’æžç¡…èƒ¶æžè‰°éª„æˆä½½ç·œæˆå‹®ç·¡æˆï¿½"],["ea40","é—‚ï¿½",27,"é—‚î„„æ¤é—ƒå›¬æ§—é—ƒæ©€æ§¢é—ƒç‚ºæ§§é—ƒï¿½",6,"é—ƒî‚¦æ§µé—ƒî…¢æ§¸é—ƒä¼´æ¨‚é—ƒææ¨„é—ƒæ´ªæ¨‰é—„ä¾€æª­é—„å©‡æª¸é—„å¿›æª»é—„æŽ—æª½é—„æ ­æ«"],["ea80","é—„æ©€æ«ƒé—„æ°¶æ«†é—„æ¿‹æ«ˆé—„çŠ»æ«é—„ãƒ©æ«é—„î‚¦æ«—",4,"é—„æŠ½æ«¢",12,"é—…å›¬æ®™é—…å©…ç·§æˆåº¤ç·©æˆæ¨¿ç·´æŒåº¢åž•éŽ´æ¥åž±éŽ´ç†¸åž»éŽ´â„ƒåž¾éŽ´ã‚†åŸ‡é‘·Ñ…æ‘¨é¡å¯¸æ‘½é¢å¿•æ”½é¢æ’´æ•¶éƒî†½æ£·éƒç‰ˆæ§‰é„æ¬æ¾†é„å†©æ§™é„â‚¬éå‘®æµ„é„æ¿‡æ§¾é„è¾¨æ¨é„ä½ƒâ‚¬å—˜æ«‰é…æ—€æª¨é…å¿”æ«€é…â„ƒæ«é…é”‹æ®‘é†å±¾æ¯€é†æ¿‡æ¯¦é‡æ¶™æ´”é‡ï¸½æ´¨ç’èŒ¶é—¯ç’æƒ°æ¤¿ç’å€Ÿç¥¤ç’§å‘°ç¥®ç’§å £ç¥²ç’§å›ªç¥¶ç’§æ›¡ç¦‰ç‘™å›ªîç‘™å¬­î‘ç‘™åº¤î”ç‘™æ„¯î–é—î†¾å§›é—æ¿ˆå¢»é—îˆœå£˜é—è·¨å¦±é˜å¬¬å¦½é˜å¿•å§ƒéŽ¸å Ÿå°£éŽºï¿½"],["eb40","é—…å²„æ® é—…æˆ¦æ®¥é—…æ’»æ®¨é—…æ ­æ®®é—…æ¶¢æ®±",9,"é—…ï¿½",7,"é—…éæ¯‘é—…æ’®æ¯œé—…çƒ½æ¯Ÿé—…æ´ªæ¯£é—…å—æ³œé—†å†®æ³©é—†å©‡æ³²é—†æ„°æ´ƒé—†æ’»æ´ˆé—†ï¿½",9,"é—†ï¿½",6,"é—†ï¿½"],["eb80","é—†î„„æ´¯é—†î‡€æ´¶é—†éæ´¸é—†æ’®æµ€é—†ææµé—†å©šæµ–é—†ä»‹æµ›é—‡å‚žæ¸»é—‡å‘´æ¹‚é—‡å¬®æ¹†é—‡æ„°æ¹‹é—‡æŽ—æ¹é—‡æ›¢æ¹•",4,"é—‡æ¿‹æ¹¡é—‡çŠ³æƒªéŽ¿æ¨¿â‚¬å‹¬î‡Ÿå§£è™«î‡²å§£åž«î‡®å§˜å‘®çš£å§˜å—˜çšªå§˜æ›Ÿçš¹å§˜æ¬çš»å§˜â„ƒç™Œå§˜ã‚†è”¼å§˜å‰æ•¸éæ›Ÿæš™é—å¶‡å¢¥é—æ «åŸŒé“ãˆ åž¨é‘²ç†»å€»é‘²æ’¹å§éˆå©…å¨é‘²è¾«å’é‘²î…¡åžé‘²ç–¯å„³é‘³ã„¨å„µé‘³î‡å„§é‘³å‚å„Žé‘³æ¬’å„˜é‘³æ¥æ¹Šé‘³æ¿Šå„·é‘³è¾«å…‡é‘³î…¡å‰­é‘´åº¤å„¾é‘³å…¼æ¹‘é‘´æŽ•ç”é‘´æƒ°åŠ„é‘´î„ƒå‰ºé‘´èŒ¶åŽ›é‘µå²ƒåŽ¯é‘µç£‹åŽµé‘µæ°³å¡é‘µçŠºåé‘µè‰°å”é‘µî…¡åŽæ¿‰å¶…î€”é‘¶å £å”«é‘¶æˆžç²«é‘¶ï½ˆå•°é‘·å±¾æ¹¨é‘·å©…å–•"],["ec40","é—‡ï¿½",8,"é—‡î‚¦æ¹°é—‡î‡€æ¹³é—‡éæ¹·",4,"é—‡æ´ªæºé—‡å¥¸æº„é—‡ï¿½",18,"é—ˆæ—ˆæ½Ÿé—ˆæ¥…æ½£é—ˆæ°¶æ½¨é—ˆæ¿‹æ½«é—ˆï½‰æ½³é—ˆï¹‚æ½·é—ˆã„©æ½½",7],["ec80","é—ˆæŸ¥æ¾‹é—ˆï¿½",4,"é—ˆï¿½",7,"é—‰ï¿½",4,"é—‰å²„ç€»é—‰å¿›ç€½é—‰æ’»ç‚é—‰æ ­ç„é—‰ï¿½",4,"é‘·ä½½å•¨å¨†ã‚†îƒ’å¨†è§„ç“‹å§å—˜ç“©æ¤‹æˆ¦î——æ¤‹æ’»î—šæ¤‹æ¬“î—Ÿå¨ˆå†²çµ¸å§£å‚Ð¡é‚æ„°ç¶‰é‚æ’´æŸ¤éƒå—˜æ¢½éƒå†©æ£‡éƒåº¢æ£éƒæ «å€‹éæ»…å€´éæ¿ˆå¦é‘â‚¬éé£Žå’éè¾©å„´é‘å©„å‰±é’æ’¶å‰¸é’îˆœåŠšé“å´‡åŽ¹é“ã„§åŽ–é“èŒ¬åŽžé“å“¥å…é”æ¨¼å–…é”ç”µå•«é”çŠµåš‘é•æ—‚åš™é•åœ­åžµé–ã„§ä¼‚é’æ¨¼å‡é”è§„åŸ¦éŽ´èŠ¥å¢éŽµå Ÿå¢˜ç»€è¤îš…ç»å—™îšŽç»æ¶šîš¡ç»æ’¶îšŸç»ãˆ¢îšœç»çŠµã‚¯ç»Ñ…ã‚ºç»‚å‘¯î›¯ç»‚æ°±Î—ç»‚å†²ç¹Žè¹‡ï¿½"],["ed40","é—‰ç‚ºçé—‰ï¿ ç‘é—‰ï¿½",6,"é—‰î„„çé—‰ä¼´ç¡é—‰æŠ½ç¥",46],["ed80","é—Šã‚‰ç…¡é—Šã„©ç…¯",4,"é—Šæ’®ç…¼",23,"éŽ¬å…¼ä»¢éŽ­æ°­ä»¹éŽ­ä½¹ä»šéŽ­ï½†å’éŽ°å—˜å‰­éŽ±æ¿‡å•¯éŽ²æ¿‡å™µéŽ³æˆžåžŽé‘²â‚¬é‘±æŒŽçŸ’å¨‰èˆµèŠ³é­å‰ç…¾é®â‚¬é®å¤Œç‰€é®æ¨¼çˆ²é‚î‚¤ç‰ é®æ»…ç‰†é®åœ­ç‰¶é®è¤ç‰Šé®è‚©ç‰“é®î„‚ç‰é®â•ƒî”“çº­î… î”›çº­æ¥ƒç‰”çº­æ„®î”Œçº­å²€â€”çº°æ¶šî•¸çº°æ°±î•¬çº°æ»…â…°çº°ï½‡â’‰çº°åœ­â…´çº¾æ—‚î—žçº¾å¤Œï¼Œçº¾èŒ¬î˜ªçº¾å¯¸î˜¸ç»€ã‚‡î™ƒç»€æ’®ç·µæ¦›å½’æ¢æ¦›è‚©æ´·éªå‹­æ¹‡é©åœ­æ¸¿éªå ¢æ¹šéªãˆ¢æ¹™éªî… æ¹¨éªç”µæ¹¼é«æ„®æ½™é«å›©æ½ˆé«æ°±æ½¹"],["ee40","é—‹ï¿½",62],["ee80","æ¤¤ï¿½",32,"é«ãˆ¢æ½µé«è·¨ç€ºé«ç•Œç€«é¬å²€ç€¾é¬ç†ºçŽé¬æ‰®ç¥é¬ç•Œæ•½é£â‚¬é£åº£æ™ªé£å ¢æšƒé£èŒ¬æšªé¤å†ªç¶ç¼ƒï¼„ç¶—ç‘­å ¢å»ºç¼ƒå¯¸å¥–ç¼ƒåœ­ç·›ç¼ƒå‰§æ³¹é©ãƒ¨ç‰ªé–½å‘´æ‹žé–½å›¬æ‹«é–½å©‡æ‹°é–½å¶‰æ‹¸é–½æ„°æŒƒé–½æ¥…æŒ„é–½æ°¶æŒé–½æ»ˆæŒ˜é–½ã‚‰æŒ®é–½îˆæŒ±é–½î„„æŒ´é–½ä¼´æŒ·é–½æ’®æŒ¾",4,"é–½å¥¸æŠé–½å—æ«é–¾ï¿½",6,"é–¾æ„°æ¼é–¾æŽ—æ‘ƒé–¾æ ­æ‘‹é–¾æ¬“æ‘Œé–¾æ¶¢æ‘“é–¾ç†¼æ‘–é–¾ãˆ¤æ‘›é–¾ãƒ©æ‘Ÿé–¾ã„©æ‘¢"],["ef40","æ¤¤ï¿½",5,"æ£°å¬®î•³æ£°æŽ—î•ºæ£°æ¬“â…²æ£°ï¿½",37,"æ¤‹å¿›î—•æ¤‹æ—ˆî—›æ¤‹æ¥…î— æ¤‹æ»ˆî—¢æ¤‹ï¿½",4],["ef80","æ¤‹ãƒ©ï¼†æ¤‹ï¿½",30,"é–¾â•…æ‘£é–¾î‡€æ‘¨é–¾æŠ½æ‘¯é–¾ç”¸æ‘²é–¾å½’æ‘·é–¾ä»‹æ‘½é–¿å†®æ”¤é–¿å—›æ”ªé–¿å¤æ”°é–¿å¶‰æ”·é–¿å¿›æ•€",4,"é–¿æ©€æ•é–¿æ¿‹æ•’é–¿ç†¼æ•˜é–¿îˆæ•¨é–¿â•…æ•©é–¿éæ•³é–¿æ’®æ•¹é–¿çƒ½æ•»é–¿å¥¸æ–é–¿å—æ™œé–¿ç”¸æ™žé—€å‘´æ™¢é—€å¤æ™«é—€åº¨æ™±é—€æŽ—æ™¸é—€æ—ˆæ™¼é—€æ¥…æ™¿é—€æ¬“æšƒé—€ç‚ºæš‰é—€æ¿‹æš‹é—€ãˆ¤æš",8,"é—€îˆžæš é—€æŸ¥æš¢é–¿è™¹ç…£é­î„„æ³¬ç»‰æ› Ð›ç»‰ï½‡Ð™ç»‹å——ç¥°ç»‹å†ªâ–Šç»‹ç‚µã€"],["f040","æ¤ï¿½",4,"æ¤åº¨î˜´æ¤ï¿½",28,"æ¤ï¿½",26],["f080","æ¥—ï¿½",9,"æ¥—ï¿½",12,"æ¥—ã‚‰ã‚¦æ¥—æŠ½ã‚¸æ¥—å½’ã‚»æ¥—é¹ƒî›§æ££å†®î›®ç»‹åœ­Çšç»Œæˆ¦ç²¡æ££ãƒ§â”Œé¨å ¢æ® é¨æ’¶æ®­é¨ã‚‡æ‘“é¡çŠµæ•©æ¥¦çŠ»æ¶ªæ¥¦ï¿½",4,"æ¥¦æŸ¥å‰¯æ¥¦å •çˆ¶æ¥¦çƒ½è…¹æ¥¦æ´ªå¦‡æ¥£ä¾€ç®“æ¥£å‹¯ç®šæ¥£å›¬ç®žæ¥£å¤ç®£æ¥£å²„ç®®æ¥£æˆ¦ç®·æ¥£æ¥…ç®½æ¥£æ¶¢ç®¿æ¥£ç‚ºæ¢—æ¥£ï¿½",6,"æ¥£éå¼“æ¥£å´‡æž“é¤æ—‚æž›é¤çŠµæž¬é¤î„‚æžºé¤å´‡æŸŽé¤å“¥æ¢½é¤è¾©æŸŠé¥å†ªæ¢»é¥æ «æ£ˆé¥ï½‡æ£¬é¥ï¸¾æ£¨é¥î‚¤æ£«é¦å†ªæ£»é¥è‚©æ¤é¦æ„®æ¦¾é¦å‘¯æ§é¦æ¥ƒæ§‰é¦ãƒ§æ§é¦æ› æ§ž"],["f140","æ££å²„î›³æ££ï¿½",10,"æ££ï¹‚Î—æ££ï¿½",47],["f180","æ¤ï¿½",32,"é¦æ¶šæ¨‡é¦ãˆ¢æ§§é§â‚¬é¦î… æ§¹é¦è·¨æ¨€é§å†ªæ¨‰é¦å´‡æª·é§ç‚µæª¾é§æ»…æ«€é§î‚¤æ«™ç¼ˆå©„î£ç»Œå“¥â”•ç»â‚¬ç»å—™ç”ç»æ› î€…ç»çŠµî€‹ç»ã„§î€Œç»å® Â·ç›â•„ã€”ç›å€Ÿã€‘çšå‚â…±ç‘å—šâ’Žçšè‰°î—Žç‘ãˆ£î—“ç‘ï½ˆï¼…ç‘è¾«î˜¿ç‘è‰°ï¼ˆç‘æï¼ç‘œÂ¤î˜¾ç‘œæ’¹î™€ç‘œå©…ã”ç‘œî‚¥ã–ç‘—ä½½ã‚¦ç‘—è¤æžŠé‘³ãƒ§æ¯‘é¨å¯¸ç…–é‘°æŽ•â‚¬æ—‡â‚¬æ ¬â‚¬æ»†â‚¬çŠºâ‚¬ãˆ£â‚¬ãƒ¨â‚¬ï¹â‚¬Ñ†â‚¬â•„â‚¬ã„¨â‚¬è¾«â‚¬å¬­â‚¬ä½ƒäº™é‘±å—šäº¶é‘±æŽ•ä»¼é‘±è¾«î›¨æ¤¤æî•¥æ£°ï¿½"],["f240","æ¤ï¿½",62],["f280","æ¥±ï¿½",32,"æ£°å¤î•±æ£°å¶‰î•´æ£°æ—ˆî•¿æ£°æ¶¢î–ƒæ£°ç†¼â…°æ£°ãˆ¤â…´æ£°ï¹æª·é“æ—‡æ«–é“î†¿æ«©é“é¸¿æ«¦é“æ˜æ¯ƒé““å¶ˆæ®é““î„ƒæ®±é““Ñ†æ®»é““î‡æ®¦é““â•„æ¯é“”å‹®æ¯œé“”åº¤æ¯Žé““é¸¿æ¯é““îˆæ³¬é“”å¿šæ¯šé“”â•„æ´·é“”èŒ¶æ´¯é“”å® æ´‚é“šæ’¹æ´–é“”ç£‹æ´˜é“”æ¨¿æ´ƒé“šå†­æ¸¿é“”æ­Œæ¹€é“šå©…æ¹‡é“šå¤Žæ¹¥é“šæ˜æ¹ é“šãƒ¨æ¹²é“šæ°³æº‡é“¦å £æ¹¸é“šè¾«æ¹¬é“šç–¯æºˆé“»å‚æ¹¤é“¦å€Ÿæ¾—é“¦æ˜æ½¬é“¦æ‹Œæ½“é“¦î†¿ç€·é“¦æ’¹æ½±é“¦è‰°æ½³é“¦æ¬’æ½µé“»æ’¹çŸé“»ã„¨ç…‰"],["f340","æ¤¹ï¿½",17,"æ¤¹æŸ¥çŒæ¥ å¤çšæ¥ åº¨ç¢æ¥ æ›¢ç§æ¥ ï¹‚î€ˆ",6,"æ¥ æŸ¥î€’æ¥ æ’®î€”æ¥ å½’î€šæ¥ ä»‹î€æ¥ å—ç’æ¥‚å‹¯ç•",4,"æ¥‚å¶‰çŸæ¥‚å¿›ç¢æ¥‚æŽ—ç¨æ¥‚æ›¢ç«æ¥‚æ¥…ç¯æ¥‚æ°¶ç±æ¥‚ï¿½"],["f380","æ¥‚æ¿‹çµæ¥‚çŠ»îŸæ¥‚ï½‰î¡æ¥‚ãƒ©î¤æ¥‚ã„©î¦æ¥‚îˆî©æ¥‚î‡€î­",8,"æ¥‚æ´ªî¹",6,"æ¥å‹¯ç‘“æ¥å—šç„¼é“»å £ç€°é“»î…¡ç„é“»å†­çšé”œãƒ¨ç›é“»ä½ƒç£é”œå¬­ç…‹é“»å€Ÿç…ˆé”œâ‚¬é”œå©…ç…•é”œî‡ç…šé”œî†¿çˆ¾é” æ’¹ç†…é” å©…ç‰„é” Â¤ç‰´é” è‚©çº§ç¼ƒå‚œçµ¼ç¼ƒå‘°åžšç»”è™¹îºç»—å ¢ç‘‘ç»—å‹­ç‘«ç»—å©„îƒ†ç»—å¿•ç“ç»—å“¥îƒ…ç»—æ¬‘îƒ‰ç»—è¾©ç‘ºç»—ãƒ§î‚¿ç»—å´‡îƒ™ç»—ç‚µç“¨ç»›æ°±ç“ç»›ç”µç“•ç»›æ¿ˆç“²ç»›î†¾î„´ç»›ãˆ¢î„«ç»›è¾©ç•°ç» ï¸¾î…¾ç» å“¥î†ƒç» æ¿ˆî…¿ç» å‘¯î†ç» æ»…î…¹ç» î‚¤î†‹ç»¡æˆ ç˜‰ç»¡å²€ç˜½ç»¡æ°±î‡šç»¡ï¸¾î‡Ÿç»¨å²€î‡³ç»¡è‚©çš¬ç»¨æ «çš¨"],["f440","æ¥å›¬ç‘",5,"æ¥æ„°ç‘§æ¥æŽ—ç‘ª",10,"æ¥çŠ»î‚¼æ¥ãˆ¤î‚¿",10,"æ¥ä¼´îƒŒæ¥ï¿½",7,"æ¥ä»‹îƒ™æ¥å—ç“ˆæ¦„å—›ç““æ¦„å¬®ç“•æ¦„åº¨ç“™æ¦„æŽ—ç“æ¦„ï¿½",5],["f480","æ¦„ï¿½",32,"ç»¨ç†ºè”¼ç»¨ï¸¾æ¡ˆç»«ä½ºçœ¬é‘·æåž‡é‘¸å‚åžŠé‘·î„ƒî”‰é‘¸Â¤åž»é‘¸ï½ˆåŸˆé‘¸îˆåŸé‘¸î‚¥åŸœé‘¸æ˜åŸ‘é‘¸ç£‹åŸ¦é‘¹å‹®å¢˜é‘¹å¬­å¢¢é‘¹æ°³å¢´é‘¹ã„¨ã€çšå‘°î•­ç‘æ¨¿î—¤ç‘—ç‚µç··ç¼‡ç†ºæ™¶ç¼‡îˆœæ™¯ç¼‡èŒ¬å¥”éå¤ŒçŸç»®æ¿ˆçŸžç»®ç‚µå¹¶ç»®èŒ¬å¸ƒç»®ç•Œç¡œç»¯å›©ç¡¨ç»¯å¶‡ç¡¤ç»¯å‘¯ç¡¹ç»¯ã„¨å£†é†ã„§ç©¶ç¼ˆåº£ç¹’ç¼ˆãƒ§ä¿Šç¼ˆï¸¾å’¯ç¼ˆî†¾ç ç»¯å“¥æ£ç¼ï¸¾æ‡‚ç»»å›©ç°ºæ¥¹ææç’§å® ç§³ç“’æ—‡ç¨‡ç“’è¾«æŽ¸ç’§î…¡çœ¹ç’žå¤åŽžé–°æ„°åŽ§é–°å¿›å…"],["f540","æ¦„ï¿½",62],["f580","æ¥«ï¿½",32,"é–°ãˆ¤å€é–°ä¼´åé–°îˆžå”é–°é¹ƒå¢é–°æ’®å‚é–±å²„å”´é–±æ„°å•€é–±æˆ¦å•Ÿé–±ï½‰å•°é–±î…¢å•´é–±îˆžå–Œé–±æ’®å–“ç’žæ›¢å’•ç“’æ­Œå¸†éŸªå‘°ç®¼éŸ«â•„å…œç“’èƒ¯éƒ½ç“’é¸¿ç©­ç’ºæ ¬çªç’ºæ°³çªžç’ºåº¤çª‚ç’ºæ¶œç©¯ç’ºî„ƒè´©ç’ºæ­Œç½šç’ºç¡…åŠç’ºã‚ˆç¬ç’ºå€Ÿç¬–éŸªæ¿Šç¬©éŸªî„ƒåºœéŸªï½ˆè…éŸªé¸¿ç®‘éŸªç¡…å‚…éŸªå€Ÿå‰¯éŸ«å¤Žç®’éŸ«å‚ç®²éŸ«æŽ•ç® éŸ«æ‹Œè‹ŸéŸ«è‰°æ±žéŸ«ç£‹ç° éŸ¬å¿šç°²éŸ¬æ„¯ç°»éŸ¬ç‚¶å¤‡ç’¨å‚çŸˆç’¨å‘°çŸ˜ç’¨æ—€æž¦ç‘™æ ¬î£ç‘™æ°³î¡"],["f640","æ¦€ï¿½",62],["f680","æ¦˜ï¿½",32,"ç‘™ãƒ¨Ð™ç‘™îˆÅˆç’Žï¹‚æ½›é—†â•…æ´ºé—†îˆžæ¸¾é—‡ä¾€æ¹€é—‡å¿›æ¹ˆé—‡îˆæ¹±é—‡ä¼´æº‡æ¦«â‚¬æ¦«å†®ç·Ÿ",5,"æ¦«å²„ç—ªæ¦§å¬®ç´žé—…å½’æ¯¤é—…ä»‹æ³¿é—†æŽ”ç´é—†çŠ»å¦¿é–µî‡€åª¹é–·é¹ƒå´»é–ºå©‡å¸é–»é¹ƒæ‡Œæ¥¸å—çŸ€æ¤´å‘´çŸ„æ¤´å›¬çŸ†ç»‹ï½‰çŸ‰æ¤´åº¨çŸæ¤´æˆ¦çŸ‘æ¤´æ—ˆçŸ”æ¤´æ°¶çŸæ¤´ï¿½",5,"æ¤´ï¿½",4,"æ¤´î‚¦ç®”æ¤´î‡€èˆ¶",7,"æ¤´æ´ªä¸æ¤´å¥¸æ­¥æ§Œå‹¯ç¡¡æ§Œå—›ç¡£æ§Œå©‡ç¡§"],["f740","æ¦˜ï¿½",62],["f780","æ¥¸å©šè‹¯æ¥¸é¹ƒçž¼æ¤´å†®çŸ‚æ¤´å¤çŸˆæ¤´å²„çŸŽæ¤´æ’»çŸ•æ¤´æ¥…çŸ˜æ¤´æ¬“çŸŸæ¤´îˆé“‚æ¤´îˆžè¡¥æ¤´ï¿½",4,"æ§Œå ¥ç¡¥æ§Œæˆ¦ç¡³æ§Œæ°¶ç¡¾æ§ŒçŠ»åœºæ§Œï¿½",4,"æ§Œæ’»ç¡µæ§Œæ›¢ç¡¹æ§Œæ©€ç¡»æ§Œæ»ˆç¢€æ§Œç†¼å°é—ˆå¥¸ç€°é—‰æˆ¦ç€¿é—‰æ—ˆçŸé—‰î‚¦ç’é—‰æŸ¥ç¤æ¥ éî€æ¥ çƒ½ç®»æ¥ å •î€™æ¥ å¥¸çŒæ¥‚â‚¬æ¥‚å‘´çŽæ¥‚å¬®çœæ¥‚æˆ¦ç“æ¦„å†®ç“æ¦„å¤ç“æ¦„å¶‰ç“šæ¤‹ã„©î˜²æ¤î‡€îššæ¥—æ—ˆç¶æ¥‚ï¿ î£æ¥‚îˆžî¨æ¥‚å©šîªæ¥‚å½’ç‘˜æ¥å¿›ç‘©æ¥ç†¼î‚¾æ¥¹ä»‹å£•ç»ºå©šç°œæ¥¹å›¬ç°£æ¥¹å¬®ç°°é–ºæ ­ç°¼æ¥¹ç†¼ç²µæ¦›æ»ˆç²·æ¦›çŠ»ç²ºæ¦›ãˆ¤å“—æ¦›Ñ‡äº’æ¦›îˆåŒ–æ¦§ãˆ¤æ£˜æ¦§îˆžè„Šæ¦§çƒ½å†€æ¦§é¹ƒçµ¼"],["f840","æ§Œï¿½",62],["f880","æ¦‡ï¿½",32],["f940","æ¦ˆï¿½",62],["f980","æ§Žï¿½",32],["fa40","æ§Žï¿½",62],["fa80","æ¦‰ï¿½",32],["fb40","æ¥¦ï¿½",27,"æ¥¦ã‚‰æŠšæ¥¦î‡€èµ´æ¥¦æ’®å¯Œæ¥¦å¥¸ç®‘æ¥£å¶‰ç®°æ¥£æŽ—ç®µæ¥£æ—ˆç®¹æ¥£æ¬“ç¯€æ¥£ç†¼ç¯„æ¥£ï¿ è€¿æ¥£ãƒ©å·©æ¥£îˆžå…±æ¥£ï¿½",9,"æ¥¹â‚¬"],["fb80","æ¥¹ä¾€ç°æ¥¹å‹¯ç° æ¥¹å—›ç°¤æ¥¹å©‡ç°©",5,"æ¥¹ï¿½",8,"æ¥¹ç‚ºç±‚",5,"æ¥¹Ñ‡é…£æ¥¹â•…é‚¯"],["fc40","æ¥¹ï¿½",8,"æ¥¹ç”¸æ†¾æ¥¹çƒ½æ±—æ¥¹æ´ªæ­æ¥¹ï¿½",4,"æ¦›å‘´ç²æ¦›å›¬ç²“æ¦›å©‡ç²™æ¦›å²„ç²£æ¦›æŽ—ç²¨æ¦›æ›¢ç²¬æ¦›æ¥…ç²°æ¦›æ°¶ç²¸æ¦›ï¿ å”¬æ¦›ã‚‰æ²ªæ¦›ã„©çŒ¾æ¦›î„„ç”»æ¦›î‡€è¯",8,"æ¦›æ´ªå”¤æ¦›ï¿½",6],["fc80","æ¦§ï¿½",4,"æ¦§å²„ç´¡æ¦§æˆ¦ç´¥æ¦§æ—ˆç´©æ¦§æ ­ç´­æ¦§ï¿½",5,"æ¦§ï¿ è¿¹",8,"æ¦§î…¢ç±æ¦§ä¼´æ€¥"],["fd40","æ¦§ï¿½",4,"æ¦§æå·±æ¦§å¥¸ä¼Ž",4,"æ¦»ï¿½",10,"æ¦»ï¿½",38],["fd80","æ¦»ï¿½",5,"æ¦«ä¾€ç·œæ¦«ï¿½",11,"æ¦«æ»ˆç··æ¦«ç‚ºå°½",4,"é“¯î„Šã‚¹é“´æ›ªÐé“µï¿½"],["fe40","é“·å²‹â—¢é“·åº¯â—¤é“·æˆ¯ã€’é“·æ—“îž¾é“·ç‡‚îŸ†é“·â˜…ÇŽé“·ã‚Ä›é“·îŸ’Ä«"]]

            /***/ }),
        /* 101 */
        /***/ (function(module, exports) {

            module.exports = [["a140","é¡¡ï¿½",62],["a180","é¡¢ï¿½",32],["a240","é¡¢ï¿½",62],["a280","é¡£ï¿½",32],["a2ab","é¡«ï¿½",5],["a2e3","éˆ§î„‰æ¾€"],["a2ef","é¡«î‡…æ¾‚"],["a2fd","é¡«é‚¦æ¾…"],["a340","é¡¤ï¿½",62],["a380","é¡¥ï¿½",31,"éŠ†â‚¬"],["a440","é¡¥ï¿½",62],["a480","é¡¦ï¿½",32],["a4f4","é¡«ï¿½",10],["a540","é¡§ï¿½",62],["a580","é¡¨ï¿½",32],["a5f7","é¡«ï¿½",7],["a640","é¡¨ï¿½",62],["a680","é¡©ï¿½",32],["a6b9","é¡¬ï¿½",7],["a6d9","é¡¬ï¿½",6],["a6ec","é¡¬æ—‘ç‚"],["a6f3","é¡¬ï¿½"],["a6f6","é¡¬ï¿½",8],["a740","é¡ªï¿½",62],["a780","é¡«ï¿½",32],["a7c2","é¡¬ï¿½",14],["a7f2","é¡¬ï¿½",12],["a896","é¡¬ï¿½",10],["a8bc","é¡­ï¿½"],["a8bf","æžª"],["a8c1","é¡­å¤˜ç…€é¡­å¬µç…‚"],["a8ea","é¡­ï¿½",20],["a958","é¡­ï¿½"],["a95b","é¡­ï¿½"],["a95d","é¡­ã‚Žç…¡é¡­ï¿½"],["a989","éŠ†é”¯å ª",11],["a997","é¡­ï¿½",12],["a9f0","é¡®ï¿½",14],["aaa1","é¡Žâ‚¬",93],["aba1","é¡ï¿½",93],["aca1","é¡ï¿½",93],["ada1","é¡’ï¿½",93],["aea1","é¡“ï¿½",93],["afa1","é¡•ï¿½",93],["d7fa","é¡®ï¿½",4],["f8a1","é¡–ï¿½",93],["f9a1","é¡˜ï¿½",93],["faa1","é¡™ï¿½",93],["fba1","é¡›ï¿½",93],["fca1","é¡œï¿½",93],["fda1","é¡žï¿½",93],["fe50","å¤‚ä¾‡çˆ¾é¡®æ¥Šç‰å¤‚å‹©æ‡—éŠ˜å›£ç°£å¤‚å¬µç‰‰éŠç‚ªæ§¡éŠŸåº˜ç°©å¤‚æ¤¼ã‚®æ‚šæ©†ç‰”æ‚ƒå¿‹î¤æ‚Œç‚½î•é¡®î‚«ç‰žæ‚±åº›ç¢‘æ„ çŠ«éª‡é¡®é³–ç‰ªå¤‚îƒä»é‹®ç†²å¯’é‹µå°æ’¼å¤‚åž›æ‚é¡®è®³å¹ˆé‹·îƒ½å¤¯é‹¸æ¿…æ‘‰éŒ‚â€²æª¶ç¢ï¿½"],["fe80","éŒ…ï½„æ¹¬éŒ†é—´ç€ºé¥£å©îšŒæµˆè½°ã‚½æ´‡å‚™î›¨æ´‡å‘¬î›«æ´‡ç†¶îœ€æ´‡èœ‚Î§ç¢æ—‘î”šæ´³ï½„çŸ¡æ´³çŠ±ç—…æµ”èœ‚å¹¶æµ¯ï¿½",6,"æ¶ î‡…Â·é¡Ÿï¿½",93]]

            /***/ }),
        /* 102 */
        /***/ (function(module, exports) {

            module.exports = {"uChars":[128,165,169,178,184,216,226,235,238,244,248,251,253,258,276,284,300,325,329,334,364,463,465,467,469,471,473,475,477,506,594,610,712,716,730,930,938,962,970,1026,1104,1106,8209,8215,8218,8222,8231,8241,8244,8246,8252,8365,8452,8454,8458,8471,8482,8556,8570,8596,8602,8713,8720,8722,8726,8731,8737,8740,8742,8748,8751,8760,8766,8777,8781,8787,8802,8808,8816,8854,8858,8870,8896,8979,9322,9372,9548,9588,9616,9622,9634,9652,9662,9672,9676,9680,9702,9735,9738,9793,9795,11906,11909,11913,11917,11928,11944,11947,11951,11956,11960,11964,11979,12284,12292,12312,12319,12330,12351,12436,12447,12535,12543,12586,12842,12850,12964,13200,13215,13218,13253,13263,13267,13270,13384,13428,13727,13839,13851,14617,14703,14801,14816,14964,15183,15471,15585,16471,16736,17208,17325,17330,17374,17623,17997,18018,18212,18218,18301,18318,18760,18811,18814,18820,18823,18844,18848,18872,19576,19620,19738,19887,40870,59244,59336,59367,59413,59417,59423,59431,59437,59443,59452,59460,59478,59493,63789,63866,63894,63976,63986,64016,64018,64021,64025,64034,64037,64042,65074,65093,65107,65112,65127,65132,65375,65510,65536],"gbChars":[0,36,38,45,50,81,89,95,96,100,103,104,105,109,126,133,148,172,175,179,208,306,307,308,309,310,311,312,313,341,428,443,544,545,558,741,742,749,750,805,819,820,7922,7924,7925,7927,7934,7943,7944,7945,7950,8062,8148,8149,8152,8164,8174,8236,8240,8262,8264,8374,8380,8381,8384,8388,8390,8392,8393,8394,8396,8401,8406,8416,8419,8424,8437,8439,8445,8482,8485,8496,8521,8603,8936,8946,9046,9050,9063,9066,9076,9092,9100,9108,9111,9113,9131,9162,9164,9218,9219,11329,11331,11334,11336,11346,11361,11363,11366,11370,11372,11375,11389,11682,11686,11687,11692,11694,11714,11716,11723,11725,11730,11736,11982,11989,12102,12336,12348,12350,12384,12393,12395,12397,12510,12553,12851,12962,12973,13738,13823,13919,13933,14080,14298,14585,14698,15583,15847,16318,16434,16438,16481,16729,17102,17122,17315,17320,17402,17418,17859,17909,17911,17915,17916,17936,17939,17961,18664,18703,18814,18962,19043,33469,33470,33471,33484,33485,33490,33497,33501,33505,33513,33520,33536,33550,37845,37921,37948,38029,38038,38064,38065,38066,38069,38075,38076,38078,39108,39109,39113,39114,39115,39116,39265,39394,189000]}

            /***/ }),
        /* 103 */
        /***/ (function(module, exports) {

            module.exports = [["0","\u0000",127],["8141","è‡§å‚ŸçšŸè‡§å‘¹çš¢è‡§ï¿½",4,"è‡§æ©ç›€è‡§ç†½å•Šè‡§ãˆ¥åŸƒè‡§ï¿½",6,"è‡§î‡å®‰è‡§é…¬æŒ‰"],["8161","è‡§åº—å²¸è‡§é€¢æ˜‚è‡§é­‚æ•–è‡§å¨Ÿç¿±ç“¯ï¿½",9,"ç“¯å²…ç…",5,"ç“¯ï¿½"],["8181","ç“¯æ ®çç“¯æ¬”ç”ç“¯æ¶¥ç—",18,"ç“¯ç¢´èƒŒç“¯åº—å€ç“¯é¾Ÿè¢«",4,"ç“´å‚ŸçŸ…ç“´å ¦çŸ‹ç“´åº©çŸŽç“´æˆ§çŸ‘ç“´æ’½çŸ”",6,"ç“´ç‚¾å¹¶",5,"ç“´î‚§ç®”ç“´î‡è„–",6,"ç“´å®ç°¿ç“´ç­·ç¡›ç“¿å‚Ÿç¡Ÿç“¿å‘¹ç¡¢ç“¿å›®ç¡¥ç“¿å©ˆç¡§ç“¿ï¿½",7,"ç“¿æ ®ç¡º",7,"ç“¿ãˆ¥å¸¸ç“¿ãƒªè‚ ç“¿â•†å€¡ç“¿î…£é’žç“¿ç¢´ç‚’ç“¿ï¿½",4,"ç“¿å¨Ÿæ™¨ç”ä¾ç£¦ç”å†´ç£ªç”ï¿½",4,"ç”åº©ç£¹ç”æŽ™ç£½"],["8241","ç”æ—‰ç£¿ç”æ ®ç¤‚ç”æ¬”ç¤†ç”æ¶¥ç¤‰ç”ç‚¾ç¤‹ç”ï¿½",7,"ç”î‰ä¼ ç”ï¿½",5],["8261","ç”è›¾æ¶ç”é¾Ÿæ˜¥ç”é­‚å”‡",6,"ç”‘å—žç¥±ç”‘ï¿½",5,"ç”‘æˆ§ç¥¾ç”‘æ’½ç¦ƒç”‘æ ®ç¦‡"],["8281","ç”‘ï¿½",7,"ç”‘ãˆ¥ä¸¹",7,"ç”‘î‡å¼¹ç”‘æ ‡æŒ¡ç”‘é€¢è¹ˆç”‘é¾Ÿå²›ç”‘å¨Ÿç§¬ç”“ï¿½",4,"ç”“å©ˆç§¼ç”“å¶Šç¨ç”“å¿œç¨‡",10,"ç”“ï¿½",5,"ç”“ï¿½",17,"ç”“ï¿½",7,"æ”´å‚Ÿç©¬æ”´å‘¹ç©¯æ”´å›®ç©³",6,"æ”´æŽ™çª‹",7,"æ”´æ¿Œçªžæ”´ç†½è´°æ”´ãˆ¥ç½šæ”´ï¿½",18],["8341","æ”´å®åŠæ”´ç–¥è‚ªæ—®ï¿½",5,"æ—®å©ˆç¬‡æ—®ï¿½",5,"æ—®ï¿½",7],["8361","æ—®ï¿½",18,"æ—®ç¢´èµ‹æ—®åº—ä»˜æ—®é¾Ÿå¯Œæ—®ï¿½"],["8381","æ—®ç–¥å¦‡æ—®ç­·ç®“æ—¯å‹±ç®›æ—¯å ¦ç®Ÿæ—¯å¬¯ç®¯æ—¯æˆ§ç®³æ—¯æ’½ç®·æ—¯ï¿½",4,"æ—¯ç‚¾è€¿æ—¯ï½Šå·¥æ—¯ï¹ƒæ­æ—¯î‰å…¬æ—¯î…£å·©æ—¯îˆŸè´¡",6,"æ—¯å®å’•",5,"æ—°ï¿½",5,"æ—°ï¿½",46,"æ—°ç­·ç²Šæ˜Šå‚Ÿç²Œæ˜Šï¿½",6,"æ˜Šåº©ç²§",5,"æ˜Šæ°·ç²µæ˜Šï¿½",8],["8441","æ˜Šï¹ƒæˆ·æ˜Šâ•†åŽæ˜Šî„…åˆ’",5,"æ˜Šåº—æ¬¢æ˜Šé€¢è¿˜æ˜Šå®æ¢æ˜Šï¿½",8],["8461","æ˜™å—žç´šæ˜™å©ˆç´œæ˜™å²…ç´Ÿæ˜™å¿œç´¤",18],["8481","æ˜™ï¿½",7,"æ˜™î‡é›†æ˜™æ ‡æ±²æ˜™ï¿½",6,"æ˜™å¨Ÿçµ¸æ²å‹±çµ½æ²å—žçµ¿æ²ï¿½",5,"æ²ï¿½",10,"æ²ï¿½",5,"æ²ï¿½",18,"æ²ï¿½",5,"æ˜ƒä¾ç·œæ˜ƒå†´ç·Ÿæ˜ƒå—žç·¡æ˜ƒï¿½",6,"æ˜ƒæŽ™ç·­æ˜ƒæ—‰ç·°",5,"æ˜ƒï¿½",26,"æ˜ƒå®å‡€æ˜ƒç–¥æª"],["8541","æ˜ƒç­·ç¸¼",5,"æ˜•å©ˆç¹‰æ˜•ï¿½",4,"æ˜•ï¿½",6,"æ˜•ï¿½",4],["8561","æ˜•ï¿½",5,"æ˜•ï¿½",5,"æ˜•ç¢´ç æ˜•åº—æ…·æ˜•é€¢æŠ—",6,"é›¬å‚ â‚¬ï¿½"],["8581","é›¬ï¿½",6,"é›¬å¶‹â‚¬åºªâ‚¬å¿žâ‚¬æˆ¨â‚¬æŽšâ‚¬æ’¾â‚¬ï¿½",6,"é›¬ï¿½",9,"é›¬ï¿½",26,"é›­å— äº£é›­å¤’äº±é›­å¶‹äº¸é›­æ„²äº¼é›­æŽšä»é›­æ©‚ä»›é›­æ¶¬ä» é›­ï¿½",29,"é›­å€¦ä¼©é›®ä¾‚å€é›®å†¸å€•",6,"é›®åºªå€«é›®ï¿½",5,"é›®æ¶¬å€½é›®ç‚¿å…é›®ï¿½"],["8641","é›®ãƒ«åŠé›®Ñ‰å‘é›®åŠå›é›®å³¨å¡é›®é—ºå¤é›®æµ‘å¨",6,"é›°å— å„•",5,"é›°ï¿½"],["8661","é›°æ’¾å„ é›°æ ¯å„£é›°ï¿½",6,"é›°â€°å„®é›°ï½‹å„°é›°ï¿½",10],["8681","é›°ï¿½",22,"é›±å©‹å‰­é›±åºªå‰°é›±æˆ¨å‰¶é›±æ›¤å‰¸é›±æ¥‡å‰¼é›±ï¿½",4,"é›±ï¹„åŠŽé›±â•‡åŠ’é›±î‚¨åŠ–",6,"é›±å³¨åŠ´",5,"é›²å‚ åŽ“é›²å‘ºåŽ—é›²å›¯åŽœ",6,"é›²æŽšåŽ¯é›²æ ¯åŽ³é›²æ¬•åŽ·é›²æ¶¬åŽºé›²ç‚¿åŽ½é›²ï¿½",22,"é›²å¼˜å‡é›²è¯«å˜é›²ä¾©å”©é›´ï¿½",4,"é›´å©‹å”½é›´åºªå•…é›´æ„²å•ˆé›´æ›¤å•é›´æ¥‡å•“é›´æ°¹å•—é›´ï¿½"],["8741","é›´ï¿½",9,"é›´ï¿½",15],["8761","é›´ï¿½",18,"é›µå¶‹å™¹é›µå¿žå™¾é›µæŽšåš€é›µï¿½"],["8781","é›µï¿½",5,"é›µç‚¿åš‘",7,"é›µîŠåšé›µî…¤åš é›µîˆ åš¤",7,"é›µå¼˜åš°é›µï¿½",5,"é›¸å— åžé›¸å¤’åž”é›¸ï¿½",6,"é›¸æ ¯åž¬é›¸ï¿½",5,"é›¸ï¿½",18,"é›¸ï¿½",6,"é›¸ï¿½",26,"é›ºæ¬•å¢¯é›ºæ¶¬å¢²é›ºç‚¿å¢´é›ºï¿½",6,"é›ºï¿½",4],["8841","é›ºï¿½",4,"é›ºï¿½",5,"é›ºï¿½",6,"é›»å— å¦µé›»å §å¦¸",4],["8861","é›»å¿žå§ƒé›»æ’¾å§‡é›»æ ¯å§‰é›»ï¿½",4,"é›»ãˆ¦å§¢é›»Ñ‰å§©é›»â•‡å§­é›»î…¤å§°é›»îˆ å§³é›»æ½å§µé›»æƒ¦å§¸é›»ï¿½"],["8881","é›»ï¿½",15,"é›¼å©‹åª¼é›¼å¶‹å«€é›¼å¿žå«…é›¼ï¿½",4,"é›¼æ°¹å«“é›¼ç‚¿å«™é›¼çŠ½å«›é›¼ï½‹å«¥é›¼â•‡å«ªé›¼åŠå«³é›¼æ½å«¸é›¼èŒ§å«¿é›¼å€¦å¯•é›½å†¸å¯˜é›½å— å¯šé›½ï¿½",6,"é›½æŽšå¯²",5,"é›½ï¿½",54,"é›¿æ¥‡å´£é›¿æ°¹å´«é›¿çŠ½å´±é›¿ãˆ¦å´³"],["8941","é›¿ï¹„å´¹é›¿îŠå´¿é›¿î…¤åµ‚é›¿æ½åµ†é›¿æƒ¦åµé›¿å†¯åµ",6,"éœ‚å‚ å·»",5,"éœ‚ï¿½"],["8961","éœ‚åºªå¸éœ‚æˆ¨å¸“éœ‚æ’¾å¸Ÿ",10,"éœ‚ï¿½",5,"éœ‚â•‡å¸¾éœ‚î‚¨å¹"],["8981","éœ‚ï¿½",21,"éœƒå— å¼´éœƒå¤’å¼·éœƒå¶‹å¼¿éœƒæˆ¨å½ƒéœƒæ’¾å½‡éœƒæ©‚å½‹éœƒæ»Šå½éœƒç†¾å½™éœƒãˆ¦å½›éœƒãƒ«å½ŸéœƒÑ‰å½¥",18,"éœƒï¿½",18,"éœ…ï¿½",6,"éœ…æ¬•æ‚®éœ…æ¶¬æ‚µéœ…ç‚¿æ‚·éœ…ï¿½",6,"éœ…îŠæƒ‰",7,"éœ…ï¿½",15],["8a41","éœŠï¿½",10,"éœŠæŽšæ†®éœŠæ›¤æ†±éœŠæ¥‡æ†´",6,"éœŠãˆ¦æ‡éœŠï¿½"],["8a61","éœŠï¿½",4,"éœŠï¿½",18,"éœ‹ä¾‚æ‹"],["8a81","éœ‹ï¿½",4,"éœ‹ï¿½",19,"éœ‹ï¿½",5,"éœ‹ãƒ«æŒ¦éœ‹Ñ‰æŒ¬éœ‹îŠæŒ®éœ‹ï¿½",7,"éœ‹å³¨æ€éœ‹ï¿½",5,"éœŒä¾‚æ¨éœŒå†¸æ®éœŒå— æ°éœŒï¿½",6,"éœŒæˆ¨æ¾éœŒæ’¾æ‘‚éœŒï¿½",5,"éœŒç‚¿æ‘•éœŒâ€°æ‘™éœŒãƒ«æ‘Ÿ",4,"éœŒî‡‚æ‘ªéœŒï¿½",5,"éœŒï¿½",26,"éœæ ¯æ•†éœæ¬•æ•‹éœï¿½"],["8b41","éœï¿½",5,"éœï¹„æ•¨",4,"éœæ½æ•µéœæƒ¦æ•¹éœå†¯æ•¼",6,"éœ‘å‚ æ™¢"],["8b61","éœ‘å›¯æ™¥éœ‘å¤’æ™©éœ‘åºªæ™±éœ‘æˆ¨æ™µéœ‘æ’¾æ™»",6,"éœ‘ç‚¿æš",8],["8b81","éœ‘ï¿½",52,"éœ’ãˆ¦æžºéœ’ãƒ«æž½éœ’Ñ‰æŸ€éœ’î„†æŸ‡éœ’î‡‚æŸ‰éœ’æ½æŸ–",4,"éœ’å€¦æŸ¨éœ”ä¾‚æ¢»éœ”å†¸æ¢¾",6,"éœ”åºªæ£",5,"éœ”ï¿½",18,"éœ”ï¿½",18],["8c41","éœ•â‚¬",15,"éœ•æŽšæ§—éœ•æ›¤æ§šéœ•æ¥‡æ§ž",4],["8c61","éœ•ï¿½",6,"éœ•ï¿½",5,"éœ•ï¿½",6,"éœ•ï¿½",5],["8c81","éœ•ï¿½",12,"éœ—ï¿½",26,"éœ—ãƒ«æ«éœ—Ñ‰æ«“",50,"éœ˜ç‚¿æ®¶éœ˜â€°æ®ºéœ˜ï½‹æ®½",5,"éœ˜î…¤æ¯Šéœ˜îˆ æ¯Žéœ˜ï¿½",16],["8d41","éœ™ï¿½",16,"éœ™ï¿½",8],["8d61","éœ™ï¿½",17,"éœ™å½ªæ´¸éœ™ç•´æµ€éœ™å³¨æµ„éœ™é—ºæµ"],["8d81","éœ™ï¿½",4,"éœšå‚ æ¸»éœšå‹²æ¸¾",33,"éœšîŠæ¹¯éœšî…¤æ¹²éœšï¿½",6,"éœšå¼˜æº‚",7,"éœ›å‘ºæ½Œéœ›å›¯æ½éœ›å©‹æ½’éœ›ï¿½",6,"éœ›ï¿½",9,"éœ›â€°æ½°éœ›ï½‹æ½µéœ›ï¹„æ½·éœ›ï¿½",6,"éœ›æ½æ¾Šéœ›ï¿½",5,"éœ›å€¦æ¾˜éœä¾‚ç€­éœå†¸ç€°",6,"éœåºªç€éœæ—Šç‚éœæ°¹çˆéœæ¿ç‹"],["8e41","éœç†¾ç",6,"éœîŠç",5,"éœå³¨ç§éœï¿½",8],["8e61","éœŸï¿½",4,"éœŸå §ç…€",19],["8e81","éœŸï¿½",13,"éœŸî‡‚ç…°éœŸå½ªç…µéœŸç•´ç…¹",6,"éœŸå€¦çˆž",4,"éœ å©‹çˆ§éœ å¶‹çˆ­éœ å¿žçˆ²",6,"éœ æ°¹ç‰…éœ ï¿½",5,"éœ ï¹„ç‰•éœ â•‡ç‰šéœ î‚¨ç‰ ",6,"éœ å³¨ç‰¶",5,"æ¿ä¾‚î”‡æ¿å†¸î”Š",11,"æ¿æŽšî”™",7,"æ¿ç‚¿î”¤æ¿â€°ã€æ¿ï½‹Ë‰",6,"æ¿î‡‚â€œæ¿ï¿½",5,"æ¿é—ºã€Žæ¿æµ‘ã€—",7],["8f41","æ“˜ï¿½",7,"æ“˜ï¿½",17],["8f61","æ“˜ï¿½",7,"æ“˜ï¿½",6,"æ“˜å½ªâ’‰æ“˜ç•´â’Œæ“˜å³¨â’Žæ“˜ï¿½",4],["8f81","æ“˜å€¦â’–è€„å‚ î—‰è€„ï¿½",5,"è€„å¶‹î—“è€„å¿žî—–è€„æŽšî—˜è€„ï¿½",7,"è€„ç‚¿ã€€è€„ï¿½",5,"è€„îŠï¼‹è€„î…¤ï¼Žè€„îˆ ï¼‘",6,"è€„å¼˜ï¼œè€„ï¿½",5,"æ¯ªï¿½",18,"æ¯ªï¿½",6,"æ¯ªï¿½",26,"æ¯ªå€¦ãŸæ¯³ä¾‚îš‡æ¯³å†¸îšŠ",6,"æ¯³å¶‹îš“æ¯³æ„²îš—",5],["9041","æ¯³æ°¹îš æ¯³æ¿îš£æ¯³ç†¾ã‚¡",6,"æ¯³îŠã‚¬æ¯³ï¿½",5,"æ¯³å³¨ã‚·æ¯³é—ºã‚ºæ¯³æµ‘ã‚½"],["9061","æ¯³ï¿½",5,"æ¯½å— î›­æ¯½å¬°î›±æ¯½ï¿½",15],["9081","æ¯½ï¿½",12,"æ¯½î‡‚ÎŸæ¯½å½ªÎ£æ¯½ç•´Î¦",6,"æ¯½å€¦î…æ¯µï¿½",5,"æ¯µå©‹îæ¯µå¶‹î˜",4,"æ¯µæ°¹î¡æ¯µç†¾î¥æ¯µãˆ¦Ð•æ¯µÑ‰Ð—æ¯µîŠÐ™æ¯µï¿½",6,"æ¯µå³¨Ð©",4,"æ¯¹ï¿½",5,"æ¯¹ï¿½",11,"æ¯¹ï¿½",33,"æ¯¹å¼˜É‘æ¯¹è¯«Åˆæ¯¹ä¾©ï¹£æ°…å†¸ï¹¦æ°…å‘ºï¹©"],["9141","æ°…å›¯îŸ¨æ°…å²†îŸ­æ°…æ„²îŸ¯æ°…æŽšã€‡æ°…æ¥‡îŸ¶æ°…æ°¹îŸ¸æ°…ï¿½",6,"æ°…ï¹„â”†",5],["9161","æ°…æ½â”æ°…æƒ¦â”’æ°…å†¯â”•",9,"æ°‡å— ç”æ°‡å¤’ç–æ°‡å¬°çš",5],["9181","æ°‡ï¿½",20,"æ°‡îŠî€Œæ°‡î‡‚î€Žæ°‡å½ªî€’",4,"æ°‡å¼˜î€›æ°‡ï¿½",5,"æ°†å‘ºç•æ°†å›¯ç˜",14,"æ°†ï¿½",33,"æ°†è¯«î»æ°†ä¾©ç‘æ°å‚ ç‘‘æ°ï¿½",7,"æ°åºªç‘¦æ°ï¿½",5,"æ°æ¬•ç‘²æ°æ¶¬ç‘µæ°ç‚¿ç‘¹æ°ï¿½",6],["9241","æ°îŸŽîƒ…æ°ï¿½",7,"æ°å†¯îƒ”æ°å¼˜îƒš",4,"æ°•å— ç“æ°•å©‹ç“”æ°•å²†ç“—æ°•æˆ¨ç“›"],["9261","æ°•æ’¾ç“¡æ°•æ ¯ç“§æ°•ï¿½",7,"æ°•ãˆ¦î„",7,"æ°•ï¿½",4],["9281","æ°•ï¿½",21,"æ°˜å¤’ç•©æ°˜å¬°ç•­æ°˜åºªç•¯æ°˜ï¿½",18,"æ°˜ãƒ«î…½æ°˜Ñ‰î†€æ°˜îŠî†‚æ°˜ï¿½",6,"æ°˜æƒ¦î†æ°˜ï¿½",7,"æ°™ä¾‚ç˜‹æ°™å†¸ç˜æ°™å— ç˜’æ°™ï¿½",6,"æ°™æˆ¨ç˜¨æ°™ï¿½",35,"æ°™å¼˜î‡°æ°™è¯«î‡³æ°šï¿½"],["9341","æ°šï¿½",4,"æ°šå©‹çš«æ°šæ„²çš°æ°šæ’¾çšºæ°šæ°¹ç›ƒæ°šâ€°é˜¿æ°šï½‹å”‰æ°šîŸŽè”¼æ°šî‚¨è‰¾æ°šî‡‚éš˜æ°šæ½ä¿ºæ°šï¿½"],["9361","æ°šå³¨èƒºæ°šï¿½",6,"æ°¡å‚ çœ´æ°¡å›¯çœ»æ°¡å©‹çœ¿æ°¡åºªç†æ°¡ï¿½",8],["9381","æ°¡æ°¹ç•æ°¡æ»Šç˜",37,"æ°©å— çŸ…æ°©å¤’çŸˆæ°©å¶‹çŸŽ",4,"æ°©æ ¯çŸ˜æ°©ï¿½",4,"æ°©ãˆ¦çŽ»æ°©ãƒ«æ‹¨æ°©ï¿½",6,"æ°©æ½æ•",5,"æ°©å€¦éƒ¨æ°¤ä¾‚ç¡žæ°¤å†¸ç¡¡",7,"æ°¤åºªç¡³æ°¤æ’¾ç¡µæ°¤æ ¯ç¡¹æ°¤æ¬•ç¡½æ°¤æ¶¬ç¢€",22,"æ°¤å†¯å½»æ°¤å¼˜éƒ´æ°¤ï¿½"],["9441","æ°¤ï¿½",5,"æ°ªå— ç£®æ°ªï¿½",5,"æ°ªæˆ¨ç£¼æ°ªæ’¾ç£¿",8],["9461","æ°ªï¿½",5,"æ°ªï¿½",6,"æ°ªï¿½",12],["9481","æ°ªï¿½",5,"æ°²ï¿½",6,"æ°²å©‹ç¥´æ°²å¶‹ç¥¹æ°²å¿žç¥½",6,"æ°²ï¿½",9,"æ°²ãƒ«éƒ¸æ°²Ñ‰æ—¦",22,"æ”µå‚ ç§²æ”µå‘ºç§µæ”µï¿½",4,"æ”µæŽšç¨Šæ”µæ ¯ç¨æ”µæ©‚ç¨•æ”µï¿½",6,"æ”µï¿½",10,"æ”µï¿½",6,"æ”µï¿½",24],["9541","æ••æŽšçªŠæ••æ ¯çªæ••æ¬•çª”æ••æ¶¬çª›",11,"æ••ï¿½",5,"æ••ï¿½"],["9561","æ••æ½çƒ¦æ••æƒ¦èŒƒæ••å†¯é¥­",6,"æ•«ä¾‚ç«¶æ•«å‹²ç«¼",5,"æ•«åºªç¬æ•«æˆ¨ç¬’æ•«ï¿½"],["9581","æ•«ï¿½",6,"æ•«ç‚¿ç¬­",35,"ç‰å— ç®›ç‰å¤’ç® ç‰å¬°ç®¥ç‰ï¿½",4,"ç‰æ ¯ç®»ç‰æ»Šç¯€ç‰ç‚¿ç¯ƒç‰ãˆ¦æ¢—ç‰ãƒ«åŠŸç‰Ñ‰ä¾›ç‰ï¿½",4,"ç‰æ½è‹Ÿ",4,"ç‰å€¦ç®ç‰’ä¾‚ç°œç‰’å†¸ç° ",6,"ç‰’åºªç°°",5,"ç‰’ï¿½",13,"ç‰’ï¿½",14],["9641","ç‰’ï¿½",23,"ç‰–æŽšç²¨"],["9661","ç‰–æ›¤ç²¬ç‰–ï¿½",6,"ç‰–â€°è™Žç‰–ï¿½",5,"ç‰–ï¿½",8],["9681","ç‰–ï¿½",10,"çˆ°ï¿½",5,"çˆ°ï¿½",13,"çˆ°æ°¹ç´´",33,"è™¢å‚ çµ»è™¢å‘ºçµ¾è™¢å›¯ç¶",6,"è™¢æŽšç¶‹è™¢æ—Šç¶Ž",44],["9741","åˆ–ï¿½",16,"åˆ–ï¿½",8],["9761","åˆ–ï¿½",17,"åˆ–ï¿½",7],["9781","åˆ–ï¿½",11,"è‚Ÿï¿½",5,"è‚Ÿåºªç¹Œè‚Ÿæˆ¨ç¹è‚Ÿæ’¾ç¹’",6,"è‚Ÿæ¿ç¹›è‚ŸçŠ½ç«£",89,"é²å±Šâ‚¬çœ·â‚¬ï¿½"],["9841","éµâ‚¬",16,"éµï¿½",5,"éµæ¬–ä»›éµï¿½"],["9861","éµæ¿Žä»¦éµç†¿ä»­",6,"éµï¿½",15],["9881","éµï¿½",21,"é·æŽ›å€±é·æ›¥å€´é·æ¥ˆå€·",6,"é·ãˆ§å†é·ï¿½",5,"é·î‡ƒå™é·å¯Ÿå¡",4,"é·çœ·å„Œé¸å†¹å„Žé¸å—¢å„‘é¸å©Œå„–é¸å¶Œå„™é¸å¿Ÿå„œ",6,"é¸æ°ºå„ª",5,"é¸îž”å„³é¸â•ˆå„¶é¸î‚©å„¹",6,"é¸é¹…å…é¸ï¿½",5,"é¹ä¾…å‰›é¹å†¹å‰ é¹å—¢å‰£é¹ï¿½",6,"é¹æˆ©å‰´é¹æ’¿å‰¶é¹ï¿½",5,"é¹Â§åŠ‰é¹ãƒ¬åŠé¹â•ˆåŠ’é¹î‚©åŠ—"],["9941","é¹å¯ŸåŠ¤é¹æŒ«åŠ¦é¹ç¼åŠ´é¹æ··åŠ·é¹çœ·åŠ¹éºï¿½",6,"éºå©ŒåŽ§",5,"éºæ °åŽ³"],["9961","éºæ¬–åŽ·éºæ¶­åŽº",6,"éºîž”å’",5,"éºè†˜å¢éºè¸Œåºéºé¹…å¿éºè½¨å…éºï¿½"],["9981","éºï¿½",8,"é»ï¿½",5,"é»å¿Ÿå•ˆé»æŽ›å•Œé»æ›¥å•‘",4,"é»çƒ„å•é»ãˆ§å• é»ã‚Œå•¨é»ÑŠå•°é»î‚©å•³é»î‡ƒå•¹é»ï¿½",11,"é»ï¿½",5,"é½å‘¾å™¯é½å›²å™³é½å©Œå™µé½ï¿½",6,"é½æ›¥åšƒé½ï¿½",6,"é½Â§åš”é½ï½Œåš—é½îž”åš™é½ï¿½",6,"é½å¯Ÿåš§",7,"é½çœ·åš³é¾ä¾…åžˆé¾å†¹åž",6,"é¾åº«åžšé¾ï¿½",5,"é¾æ°ºåž±é¾æ¿Žåž¶é¾Â§åž»é¾ï¿½"],["9a41","é¾ã‚Œåž¾é¾îž”åŸ€é¾î‹åŸ‡é¾î‡ƒåŸŒé¾è¸ŒåŸ–",16],["9a61","é¿å—¢å¢–é¿ï¿½",6,"é¿æŽ›å¢¦é¿æ›¥å¢«é¿æ¥ˆå¢®",6,"é¿Â§å¢·é¿ï½Œå¢¹é¿ï¿½"],["9a81","é¿ï¿½",4,"é¿î‡ƒå£‡é¿è†˜å£Šé¿è¸Œå£",6,"é¿çœ·å¦§éž€ï¿½",5,"éž€ï¿½",5,"éž€ï¿½",6,"éž€æ¬–å§Žéž€æ»Œå§™",5,"éž€îž”å§§éž€â•ˆå§«éž€î‚©å§°",5,"éž€é¹…å§¼éž€ï¿½",33,"éžçƒ„å«™éžÂ§å«éžï¿½",5,"éžî‡ƒå«²éžå¯Ÿå«µéžæŒ«å«·éžç¼å«¼éžå±Šå¬€éžå¿«å¯”",6,"éž‚å©Œå¯¢éž‚åº«å¯©"],["9b41","éž‚æ„³å¯«éž‚æŽ›å¯²éž‚æ¥ˆå¯µéž‚æ°ºå¯·éž‚ï¿½",6,"éž‚îž”å°Žéž‚ï¿½",8],["9b61","éž‚ï¿½",17,"éžƒï¿½",7],["9b81","éžƒï¿½",25,"éžƒî‹å´¼éžƒî…¥åµéžƒîˆ¡åµ„éžƒï¿½",4,"éžƒçº¢åµ’éžƒï¿½",5,"éž„å‘¾å·»éž„å›²å¸€éž„å©Œå¸‡éž„ï¿½",50,"éž†ï¿½",22,"éž†ï¿½"],["9c41","éž†æ¶­å½Žéž†çƒ„å½™éž†ï¿½",4,"éž†î‹å½¨éž†î„‡å½¯",5,"éž†é¹…å½¿éž†ï¿½",5],["9c61","éž†ï¿½",8,"éž‡ï¿½",6,"éž‡ï¿½",9],["9c81","éž‡ï¿½",8,"éž‡ï¿½",6,"éž‡î…¥æƒéž‡îˆ¡æƒéž‡å¯Ÿæƒ“éž‡ï¿½",6,"éž‡ï¿½",9,"éžˆï¿½",26,"éžˆîž”æ‡…éžˆâ•ˆæ‡‰éžˆî‚©æ‡Ž",6,"éžˆé¹…æ‡›éžˆèƒ³æ‡ž",5,"éž‰ï¿½",18,"éž‰ï¿½",6,"éž‰ï¿½",12],["9d41","éž‰ï¿½",13,"éž‰è½¨æ„éž‰æ··æŠ",8],["9d61","éžŠï¿½",25],["9d81","éžŠï¿½",8,"éžŠï¿½",5,"éžŠå¯Ÿæ‘®éžŠå¥ æ‘±éžŠç¼æ‘´éžŠæ··æ‘·éžŠå±Šæ‘¼éžŒï¿½",9,"éžŒå¶Œæ”·éžŒå¿Ÿæ”½éžŒæŽ›æ•éžŒï¿½",6,"éžŒï¿½",10,"éžŒî‹æ•¨éžŒî…¥æ•­éžŒîˆ¡æ•±",6,"éžŒçº¢æ•¿éžŒï¿½",5,"éžŽå—¢æ™£éžŽå¬±æ™±éžŽæ„³æ™³éžŽæŽ›æ™¼éžŽæ°ºæšƒéžŽæ»Œæš‰éžŽãˆ§æšŽéžŽãƒ¬æš’éžŽÑŠæš•",6,"éžŽå¯Ÿæš¥",5,"éžŽçœ·æš±éžä¾…æºéžå†¹æž€éžå—¢æž…éžå¤“æžˆéžå¬±æžŽéžæ„³æž“éžæ’¿æž–"],["9e41","éžæ °æž¡éžæ°ºæž¦éžæ¿Žæž®éžç†¿æž´",7,"éžï¿½",9,"éžï¿½"],["9e61","éžç¼æŸ¡éžï¿½",4,"éžå¬±æ£ˆéžå¿Ÿæ£éžæ’¿æ£”éžæ °æ£—éžï¿½",6,"éžãˆ§æ£¨éžîž”æ£«"],["9e81","éžîŸæ£­éžî‹æ£²éžîˆ¡æ£»éžå¯Ÿæ£¾éžå¥ æ¤„éžè½¨æ¤‡éžæ··æ§€éž“å†¹æ§ƒéž“å¤“æ§‰éž“å¬±æ§éž“åº«æ§’éž“ï¿½",6,"éž“æ°ºæ§¤",6,"éž“îž”æ§¯éž“â•ˆæ§³éž“î‚©æ§¸éž“è†˜æ§»éž“é¹…æ¨ƒéž“çº¢æ¨‡éž“å±Šæ¨‰éž“å¿«æªªéž•å†¹æª¯éž•å—¢æª±éž•ï¿½",6,"éž•æŽ›æ«€",5,"éž•çƒ„æ«‰éž•ï¿½",10,"éž•î…¥æ«˜éž•åŠžæ«œ",5,"éž•çº¢æ«¥éž•å±Šæ«¨éž•å¿«æ®Ž",6,"éž–å©Œæ®žéž–ï¿½",5,"éž–æ °æ®«éž–æ¬–æ®®éž–æ¶­æ®±",6,"éž–ï¿½"],["9f41","éž–îŸæ¯†",5,"éž–å¯Ÿæ¯˜éž–å¥ æ¯éž–ç¼æ¯£",4,"éž—å‚¡æ³Ÿéž—ï¿½",5,"éž—ï¿½"],["9f61","éž—å¿Ÿæ´ƒéž—æŽ›æ´†éž—ï¿½",6,"éž—çƒ„æ´˜éž—ï¿½",5,"éž—î‹æ´¬éž—î…¥æ´°éž—îˆ¡æ´·éž—ï¿½"],["9f81","éž—ï¿½",4,"éž—çº¢æµ•éž—æ£€æµ˜",5,"éž™å—¢æ¸¿éž™å¤“æ¹‚éž™å¬±æ¹‡",6,"éž™æ °æ¹—éž™ï¿½",5,"éž™ãˆ§æ¹¥éž™ãƒ¬æ¹¨éž™ÑŠæ¹¬",6,"éž™å¯Ÿæ¹¸éž™é¹…æ¹¼éž™è½¨æº€éž™æ··æº‡éž™å¿«æ½„éžšå‚¡æ½ˆéžšï¿½",4,"éžšå¬±æ½•éžšæ„³æ½¤éžšæ°ºæ½§éžšæ¿Žæ½ªéžšç†¿æ½¯",6,"éžšâ•ˆæ½½éžšï¿½",7,"éžšé¹…æ¾éžšè½¨æ¾“éžšæ··æ¾˜éž›â‚¬éž›ä¾…ç€­éž›å—¢ç€·éž›å²‡ç€ºéž›å¿Ÿç€¿éž›æ’¿ç‚éž›æ¬–çˆ",4,"éž›ãˆ§ç–",4,"éž›î‡ƒçŸéž›è†˜ç¢éž›è¸Œç¥éž›é¹…ç§"],["a041","éž›èƒ³ç©éž›çº¢ç®éž›çœ·ç„¸",5,"éžœå©Œç…éžœå¶Œç…†éžœï¿½",6,"éžœæ¬–ç…”éžœæ¶­ç…–"],["a061","éžœï¿½",5,"éžœãƒ¬ç…¢éžœÑŠç…©éžœî‹ç…«éžœï¿½",13],["a081","éžœï¿½",4,"éžå‚¡çˆŸéžå‘¾çˆ¢éžå›²çˆ¥éžï¿½",4,"éžæŽ›çˆºéžï¿½",4,"éžçƒ„ç‰ŠéžÂ§ç‰éžï½Œç‰“",6,"éžî‡ƒç‰¥éžï¿½",5,"éžè½¨ç‰¶éžæ··ç‰»éžçœ·ç‰½è‡ï¿½",6,"è‡å©Œî”è‡ï¿½",5,"è‡ï¿½",26,"è‡å¯Ÿã€•è‡å¥ ã€Šè‡ç¼ã€è‡ï¿½",4,"è†¦å‚¡î•©è†¦å ¨î•®è†¦å©Œî•³",5,"è†¦ï¿½",7,"è†¦çƒ„î–…è†¦ãˆ§â…²è†¦ï¿½"],["a141","è†¦ãƒ¬â…µè†¦ÑŠâ…¸",18,"è†¦çœ·â’–æ¬¤â‚¬æ¬¤ï¿½"],["a161","æ¬¤å‚¡î—ˆæ¬¤å‘¾î—‹æ¬¤å›²î—Žæ¬¤å©Œî—æ¬¤ï¿½",6,"æ¬¤æ °î—æ¬¤ï¿½",5,"æ¬¤ãˆ§ï¼ƒæ¬¤ï¿½"],["a181","æ¬¤ï¿½",14,"æ¬¤ï¿½",5,"æ¬¤çœ·ï¼Ÿæ¬·ä¾…î˜§æ¬·å†¹î˜¬",4,"æ¬·åº›â‚¬â‚¬éŠ†ä½µâ‚¬å®å°â‚¬ãƒ¢â‚¬Î²ã„£â‚¬å…Ÿî…›â‚¬æ›—åž¾é”›å°–åŸ£éˆ¥æ¨·â‚¬æ¬Œâ‚¬æº¾â‚¬æ¿„â‚¬æ–»â‚¬æ›˜â‚¬ï¿½",9,"å¤è„³æ¢…éˆ®çŠ«å¢¹éˆ®ãƒ¢åž¶éˆ­ç»°æ‰³â‚¬æµ‹â‚¬æ–¥å‰éˆ©î‚¬ç¹é”Ÿâ˜…éªéˆ¾å‚—æª§éˆ­çŠ«å§¤éˆ±æŽ†åžˆéˆ­å›£å¢¶éˆ®æ–Ñ€â‚¬çƒ©æ§…éˆ½å‘ªæ£†éˆ¼å¿Šæ£Šéˆ¼å›£æ¢¿éˆ»â™€æž²éˆ»æ–¥æŸŒéˆ»è§£æŸ¤éˆ«æŽ†å•‡éˆ«æˆ”å•Œéˆ«æ–»â‚¬æ’¯å£€éˆ®î‚Ÿåž°éˆ­è§£åžµéˆ­ç¢˜åŸ†éˆ­îƒ½åžéˆ­å¬§å¦´éˆ¯å›£å¦­éˆ¯å†£åŸ…éˆ­â”¾åŸ€éˆ­îŸ’ç«£"],["a241","æ¬·æ„³î˜·",5,"æ¬·ï¿½",18],["a261","æ¬·ï¿½",6,"æ¬·ï¿½",18],["a281","æ¬¹ï¿½",7,"æ¬¹æŽ›îš˜æ¬¹æ›¥îš›æ¬¹æ¥ˆîšž",6,"æ¬¹ãˆ§ã‚¤",7,"æ¬¹î…¥ã‚®æ¬¹îˆ—å™¿éˆ¬æ–ºåžéˆ­å…Ÿè¾¾ç¶–è—è—°è—µè—²è—±èµ‚è—³éš†é©´è—§éˆ­î†¹åžœéˆ­å¾›ã‚‚å‰¦éˆ¥æ‰³æ¢ºéˆ¼â‚¬éˆ»å°æŸ–éˆ¾ã‚‚æ«Šéˆ¾â™€æ«éˆ¾Ñ€æ«éˆ¯æ¬Œæ£ƒéˆ»ï½‚æ£Žéˆ¼æˆ”æž“éˆ»ã‚‚æž¼éˆ»ã„¢æž¾éˆ»ï¸¹æŸ€éˆ¾ã„¢æ§’éˆ½åº˜æ§£éˆ½çºåž›â‚¬çŠ«â‚¬â™€å•Žéˆ«æ¤»å•“éˆ«æ ¤å•’éˆ¾î…›æ«“éˆ¾îæ«–éŠè£¤åž³éˆ©æ ¥å¼´éˆ©î¬å¼¬éŠ–æ¨·åŠ‡éˆ§îƒï¿½"],["a341","æ¬¹è†˜ã‚²æ¬¹è¸Œã‚µ",6,"æ¬¹ï¿½",10,"æ­ƒå©Œî›°æ­ƒå¶Œî›³æ­ƒï¿½"],["a361","æ­ƒï¿½",6,"æ­ƒæ°ºîœæ­ƒï¿½",16],["a381","æ­ƒï¿½",16,"æ­†å‚¡îˆæ­†å‘¾î‹æ­†å¤“î",4,"æ­†æŽ›î™æ­†æ¥ˆîæ­†æ¶³ç´’",58,"é”Ÿï¸¼å†€",32,"é”Ÿï¿½"],["a441","æ­†çƒ„î¤æ­†Â§Ð’æ­†ãƒ¬Ð•æ­†îŸÐ—æ­†î‹Ð™æ­†î‡ƒÐ ",5,"æ­†çº¢Ð©æ­†å±ŠÐ¬æ­†å¿«â–‰æ­™å‚¡â–‹æ­™ï¿½"],["a461","æ­™å‘¾â–Žæ­™å›²â–•æ­™ï¿½",5,"æ­™æ›¥îž¼æ­™æ¥ˆîž¿",12],["a481","æ­™îž”Ä›æ­™îŸÃ­",28,"éŠŠï¿½",93],["a541","é£‘ï¿½",4,"é£‘åº«îŸ­é£‘æˆ©îŸ°é£‘æ’¿îŸ³",6,"é£‘çƒ„îŸ¿",5,"é£‘â•ˆâ”†"],["a561","é£‘ï¿½",17,"é£‘ï¿½",5,"é£’å‘¾ç‘"],["a581","é£’ï¿½",16,"é£’ï¿½",14,"éˆªï¿½",9],["a5b0","éˆªï¿½",9],["a5c1","èž’",16,"å±",6],["a5e1","ä¼ª",16,"èŸ½",6],["a641","é£’ï¿½",19,"é£’çœ·î€žé£“ä¾…çŽé£“å†¹ç”"],["a661","é£“ï¿½",5,"é£“åº«ç¢é£“æŽ›ç¨é£“æ›¥ç«é£“æ¥ˆç°",5,"é£“ï¿½",6],["a681","é£“îŸî¦é£“î‹î¨é£“ï¿½",6,"é£“ï¿½",18,"é£•å¤“ç‘ éˆ¹â‚¬éˆ¹å‚—æ”²éˆ¹æ„¨æ•‡éˆ¹æ–ºæ•Žéˆ¹îƒ½æ•œéˆ¹ç²¹æ•¿éˆ¹ä½²æ”¦éˆ¹å¿Šæ•éˆ¹æ¶’æ•†éˆ¹ï½‚æ•µéˆ¹î‚Ÿæ•¾éˆºå¬§æ•”éˆ¹îˆ—æ•¤éˆ¹å°æ–‚éˆ¹æ¿ƒæ•¯éˆ¹ãƒ¢æ•»éˆºå‚—æ•€éˆ¹æˆ”æ•‹éˆ¹æ¬Œæ•„éˆ¹æ›—æ”·éˆ¹å¶æ•’éˆ¹ç†²æ•—éˆ¹â‘©æ• éˆ¹Ñ€æ•¥éˆ¹îæ•ªéˆ¹î†¹æ•±éˆ¹æµ‹æ•¸éˆ¹åž›æ•¼éˆ¹è¡¡æ–€éˆ¹é”¯æ™™éˆºä½²æ™",7],["a741","é£•ï¿½",4,"é£•æˆ©ç‘¨é£•æ’¿ç‘«é£•æ °ç‘®é£•ï¿½",6,"é£•ï¿½",7],["a761","é£•ï¿½",22,"é£™å‚¡ç“‹é£™ï¿½"],["a781","é£™å‘¾ç“Žé£™å›²ç““é£™å¬±ç“–é£™åº«ç“˜é£™ï¿½",6,"é£™æ°ºç“«é£™æ»Œç“°",5,"é£™ï¿½",7,"éŠ•æ›˜å¸ éŠ•æ¤»å‰µéŠ•æ¨¸å¼°éŠ•ï½ƒå¸³éŠ•ãƒ£å¸µéŠ•ï¿½",9,"éŠ–å¨¿å¸ŠéŠ•åº›å¸éŠ–å¿‹å·¿éŠ•å¤ˆå¼µéŠ•Ñå¸¹éŠ•ï¿½",9,"éŠ•â‚¬",4,"éŠ•ï¿½",5,"éŠ•ï¿½",4,"éˆ©ï¸ºå¼¨éŠ–ä½µå¸„éŠ•å¬¨å¸‰éŠ–æ ¥å¼²éŠ•î…œå¹ƒéŠ•îˆ˜å½ŒéŠ•â”¿å¸¾éŠ•î‚ å¹€éŠ–æ¿„å½éŠ–æ’±å¼®éŠ–å¤ˆå½éŠ–ï¿½"],["a841","é£™ï¿½",10,"é£™ï¿½",14],["a861","é£šï¿½",18,"é£šï¿½",6],["a881","é£šï¿½",19,"é£šï¿½",11,"è„è„¨é™‹æ‘©"],["a8a6","ç‰Ÿ"],["a8a8","ç›®è‰è„´è‰—æ½žè„¼çº½è‰Ž"],["a8b1","éŠï¿½",27,"éˆ¸ï¿½",25,"éˆ¶ï¿½",14,"é™†éˆªæ’¯åŽ°å½•æˆ®éˆªæ¶’åŽ¹éˆªæ¿ƒåŽ¼"],["a941","æ®³ï¿½",14,"æ®³ï¿½",10],["a961","æ®³çŠ¾î‡–æ®³ãˆ§î‡˜æ®³ãƒ¬î‡›æ®³îŸî‡Ÿ",18],["a981","æ®³ï¿½",14,"å½€åº«çš¬å½€æˆ©çš°å½€æ’¿çš¶",6,"å½€çƒ„ç›å½€çŠ¾åŸƒå½€ã£Î´æ‡¨æ¾³îž¢è¹¦è¡¬æ¦‚â‚¬è‰‚é…¶è‰™è„½é•è„“è‰è‰éŠâ‚¬",27,"éˆ·ï¿½",25,"éˆ¶ï¿½",14,"é¹¿è™é²éˆ¦ç²¹ä¼©éˆ§ä½²å€éˆ§å†£å€“"],["aa41","å½€ãƒ¬å”‰å½€î‹çŸ®å½€î…¥éš˜å½€ï¿½",6,"å½€çº¢ç¿±",4,"æ¯‚å—¢çœ¹æ¯‚å¤“çœ¾æ¯‚å¬±ç„æ¯‚ï¿½"],["aa61","æ¯‚ï¿½",4,"æ¯‚æ °ç”",5,"æ¯‚Â§é›¹æ¯‚ï½Œé¥±æ¯‚ÑŠæš´",6,"æ¯‚è†˜è¾ˆ"],["aa81","æ¯‚è¸Œè´æ¯‚ï¿½",29,"éŠ‡ï¿½",82],["ab41","è§³æ—çŸ”è§³æ °çŸ–è§³æ°ºçŸè§³æ¿ŽçŸ è§³ç†¿ç—…",6,"è§³î‹ä¼¯",5,"è§³é¹…åœè§³ï¿½"],["ab61","è§³çº¢ä¸è§³ï¿½",6,"æ–å—¢ç¡¤æ–ï¿½",5,"æ–æˆ©ç¡³æ–æ’¿ç¡¶",5],["ab81","æ–ï¿½",8,"æ–ï¿½",6,"æ–î…¥é’žæ–îˆ¡æ½®",12,"éŠˆï¿½",85],["ac41","æ–çœ·æ™¨é½‘â‚¬é½‘ï¿½",5,"é½‘å©Œç£±é½‘å¶Œç£¶é½‘å¿Ÿç£»",6,"é½‘æ°ºç¤ˆé½‘çƒ„ç¤‹é½‘ï¿½"],["ac61","é½‘Â§å‚¨é½‘ï½Œè§¦é½‘îž”æ£é½‘â•ˆæ¤½é½‘î‚©å–˜",11,"é½‘ï¿½",4],["ac81","é½‘ï¿½",28,"æ–“æ¿Žç¦æ–“ç†œï¿½",5,"è¡¼è¢ž",25],["acd1","é‚ª",5,"è¤¢å¸",25],["ad41","æ–“Â§è€½æ–“ï½Œå•",6,"æ–“î‡ƒè›‹æ–“ï¿½",5,"æ–“ï¿½",7],["ad61","æ–¼ï¿½",6,"æ–¼ï¿½",10,"æ–¼æ °ç¨æ–¼æ¬–ç¨“æ–¼æ¶­ç¨˜æ–¼çƒ„ç¨›"],["ad81","æ–¼çŠ¾ä¸æ–¼ãˆ§å®æ–¼îž”å®šæ–¼ï¿½",5,"æ–¼ï¿½",18,"æ—†ï¿½"],["ae41","æ—†ï¿½",5,"æ—†å¶Œç©¾æ—†å¿Ÿçª‡",16],["ae61","æ—†ï¿½",5,"æ—†â•ˆè—©æ—†î‚©ç¿»æ—†î‡ƒçŸ¾æ—†ï¿½",6,"æ—†çº¢èŠ³æ—†ï¿½",4],["ae81","æ—„å†¹ç«»æ—„å—¢ç«¾æ—„å¤“ç¬‚æ—„å¬±ç¬‰",6,"æ—„æ›¥ç¬˜æ—„æ¥ˆç¬œæ—„ï¿½",5,"æ—„ãˆ§ç¦æ—„ãƒ¬ç”«æ—„ÑŠä¿¯æ—„î‹æ–§"],["af41","æ—„î„‡è…‘æ—„î‡ƒè…æ—„å¯Ÿå¤æ—„ï¿½",19],["af61","æ—ƒï¿½",13,"æ—ƒæ°ºç®¾æ—ƒæ¿Žç¯‚æ—ƒï¿½",5,"æ—ƒî‹å®«"],["af81","æ—ƒï¿½",5,"æ—ƒé¹…ç‹—æ—ƒè½¨è´­æ—ƒæ··è‡",6,"æ—Œå—¢ç°£æ—Œï¿½",5,"æ—ŒæŽ›ç°±æ—Œæ›¥ç°´æ—Œæ¥ˆç°·"],["b041","æ—Œï¿½",5,"æ—Œãˆ§å®³",5,"æ—Œï¿½",12],["b061","æ—Œï¿½",5,"æ—Žï¿½",19],["b081","æ—Žï¿½",13,"æ—Žîž”æˆ·æ—Žâ•ˆåŽæ—Žï¿½",6,"æ—Žé¹…ç¼“",5,"è‡§â‚¬è‡§ä¾çš è‡§å›®çš¥è‡§å¤‘çš§è‡§ï¿½",7,"è‡§ï¿½",4,"è‡§çŠ¼æŒ¨è‡§î„…ç¢è‡§îˆŸéžè‡§æ ‡æ¡ˆè‡§é¾Ÿå‡¹ç“¯â‚¬ç“¯å¬¯ç„ç“¯æ—‰ç’ç“¯æ»‰å‘ç“¯æ ‡è´ç“¯é€¢å¤‡ç“¯å®çž¼ç“´ä¾çŸç“´å‹±çŸƒç“´å—žçŸ‡ç“´å©ˆçŸ‰ç“´å²…çŸç“´æ—‰çŸžç“´æ¿ŒçŸ¡ç“´çŠ¼ç—…ç“´îŸåšç“´î‰é“‚ç“´îˆŸèˆ¶ç“´æˆˆè¡¥ç“´é­‚å¸ƒç“´ç–¥ç¡œç“¿å‹±ç¡¤ç“¿å²…ç¡¶ç“¿æ¥†ç¢ƒç“¿ï¿¡é•¿ç“¿Ñˆæ•žç“¿î‰è¶…ç“¿îˆŸå˜²ç“¿æ ‡åµç“¿åº—æ‰¯ç“¿ç¼„è¾°ç”â‚¬ç”å‹±ç£«"],["b141","æ—’å‚¡ç´”æ—’å‘¾ç´—æ—’å›²ç´š",6,"æ—’æŽ›ç´¨æ—’ï¿½",5,"æ—’æ¿Žç´´æ—’ç†¿è‚Œæ—’ãˆ§è¿¹"],["b161","æ—’ï¿½",6,"æ—’î‡ƒç–¾",5,"æ—’ï¿½",11],["b181","æ—–ï¿½",14,"æ—–æ °ç¶æ—–æ¬–ç¶’æ—–æ¶­ç¶•",6,"æ—–îž”å»ºæ—–î‹å°†æ—–î„…ç£³ç”å¶Šç£¸ç”æˆ§ç¤ƒç”æ»‰ç¤Œç”â•†èˆ¹ç”î…£åˆ›ç”åº—é”¤ç”ç¼„ç¥«ç”‘å‘¹ç¥°ç”‘å¤‘ç¥¼ç”‘æ—‰ç¦ˆç”‘ï¿¡æ‹…ç”‘î„…æ·¡ç”‘ç“£å…šç”‘æ“æ¡£ç”‘è›¾ç¥·ç”‘ç¼„åˆ°ç”‘ç­·ç§®ç”“å‚Ÿç§·ç”“å¤‘ç§¾ç”“æ„±ç¨–ç”“æ¿Œé’‰ç”“é€¢ç©©æ”´ä¾ç©­æ”´å ¦çª…æ”´æˆ§çªŠæ”´æ»‰çª¢æ”´ã‚ŠçŠ¯æ”´é¾ŸèŠ³æ”´ç­·ç«´æ—®ä¾ç¬€æ—®å¤‘ç¬…æ—®å¶Šç¬–æ—®ç“£å‰¯æ—®æ“é˜œæ—®æˆˆè´Ÿæ—¯â‚¬æ—¯ä¾ç®–æ—¯å‘¹ç®šæ—¯å©ˆç®¤æ—¯å¶Šç®®æ—¯æ„±ç®¶æ—¯æ ®ç®¿æ—¯æ¿Œç¯ƒæ—¯çŠ¼åŸ‚æ—¯ãƒªé¾šæ—¯â•†å®«æ—¯ç“£åž¢"],["b241","æ—–î…¥ç–†æ—–îˆ¡è®²æ—–è¸Œé™æ—–é¹…æ¤’æ—–ï¿½",6,"ç‚€ä¾…ç·œç‚€å†¹ç·žç‚€ï¿½",5,"ç‚€ï¿½"],["b261","ç‚€ï¿½",18,"ç‚€ï¿½",5,"ç‚€ï¿½"],["b281","ç‚€ï¿½",5,"ç‚€ï¿½",18,"ç‚œï¿½",6,"æ—¯é¾Ÿå¤Ÿæ—¯ç¼„è‡æ—°å‹±ç° æ—°å²…æ­æ—°ç–¥å£•æ˜Šâ‚¬æ˜Šå‹±ç²šæ˜Šå¶Šç²¡æ˜Šæ„±ç²¦æ˜Šæ©ç²°æ˜Šæ»‰èŠ±æ˜Šî‚§ç”»æ˜Šæ“æ¡“æ˜Šç¼„ç´˜æ˜™å ¦ç´žæ˜™æ„±æ£˜æ˜™î…£åŠæ˜™ç¢´å³æ˜™ç¼„å†€æ˜™ç­·çµ¹æ²å‚Ÿçµ»æ²å ¦ç¶æ²æ„±ç¶”æ²æ¿Œé¥¯æ²ãƒªç„¦æ˜ƒâ‚¬æ˜ƒå‹±ç·¢æ˜ƒæ„±ç·«æ˜ƒæ›£ç·¶æ˜ƒæˆˆç«Ÿæ˜ƒç¼„ç¸ºæ˜•å›®ç¹„æ˜•å¤‘ç¹ˆæ˜•å¶Šç¹‹æ˜•æ—‰ç¹™æ˜•îŸå’¯æ˜•ç“£å‹˜æ˜•æ“æ‰›é›¬â‚¬é›¬ä¾‚â‚¬å‹²â‚¬å²†â‚¬æ„²â‚¬æ—Šâ‚¬æ»Šâ‚¬æ¿â‚¬îŸŽäºœé›­å‘ºäºªé›­å©‹äº´é›­åºªäº¾é›­æ—Šä»Œé›­æ¥‡ä»š"],["b341","ç‚œï¿½",19,"ç‚œãˆ§æµšç‚œãƒ¬å–€ç‚œÑŠå’¯"],["b361","ç‚œï¿½",5,"ç‚œå¯Ÿçœ‹ç‚œï¿½",5,"ç‚œå±Šçƒ¤ç‚œå®½â‚¬ä¾†â‚¬å‚¢â‚¬å†ºâ‚¬ï¿½",5],["b381","éŸ¤ï¿½",5,"éŸ¤ï¿½",5,"éŸ¤ï¿½",19,"é›­æ¿ä¼¡é›­è¯«å€‹é›®å‹²å€¢é›®å¶‹å€§é›®æˆ¨å€¶é›®æ¬•å€¸é›®æ»Šå€é›®çŠ½å‚é›®ãˆ¦åé›®â•‡å’",4,"é›®å½ªåé›®æŽªåŸé›®é¸½å§é›°å‹²å„é›°å›¯å„“é›°å¤’å„›é›°æˆ¨å„Ÿé›°æ©‚å„¬é›°ãƒ«å‰¤é›±å¤’å‰«é›±å²†å‰±é›±æŽšå‰µé›±æ©‚å‰»é›±æ¶¬åŠ€é›±æ¿åŠŠé›±ã‚‹åŠŒé›±îŸŽåŠ•é›±æŽªåŠ¦é›±å†¯åŠ¯é›±é—ºåŽé›²ä¾‚åŽ”é›²å §åŽ«é›²æˆ¨åŽ°é›²æ›¤åŽ´é›²æ»ŠåŽ¾é›²é¸½å‚é›²èŒ§å”¨é›´å‚ å”¸é›´å¤’å”»é›´å¶‹å•‹é›´æ’¾å•é›´æ©‚å•˜é›´îŸŽå™·é›µæ„²åšé›µæ»ŠåšŒ"],["b441","éŸ¤ï¿½",5,"éŸ¤ä¿„â‚¬è®½â‚¬é¬¼â‚¬å–‰â‚¬è±â‚¬ï¿½",6,"éŸ¥å—§äºªéŸ¥ï¿½",5],["b461","éŸ¥æˆ«äº½éŸ¥æ“ä»ŒéŸ¥æ ±ä»éŸ¥ï¿½",6,"éŸ¥ï¿½",10,"éŸ¥î‡„ä¼…"],["b481","éŸ¥è¡¨ä¼ˆéŸ¥ç¨ ä¼’",6,"éŸ¥å·ä¼©éŸ¨â‚¬éŸ¨ï¿½",18,"é›µç†¾åššé›µâ•‡åšžé›µåŠåš¬é›µæµ‘åš±é›¸å‹²åžé›¸å §åž•é›¸å²†åžŸé›¸æ›¤åžªé›¸æ¬•åž¹é›¸æŽªåŸ£é›ºæ©‚å¢±é›ºçŠ½å¢¾é›ºâ•‡å£Œé›ºæƒ¦å£–é›»å‹²å¦³é›»å¤’å§é›»æˆ¨å§…é›»æ©‚å§é›»æ°¹å§žé›»â€°å§¡é›»ãƒ«å§¦é›»îŠå§®é›»åŠå§¶é›¼å §åªºé›¼å²†å«„é›¼æŽšå«Žé›¼æ¬•å«‘é›¼æ¿å«é›¼ã‚‹å«¢é›¼ï¹„å«§é›¼ï¿½",4,"é›¼ç•´å«¶é›¼æƒ¦å«¹",4,"é›¼ä¾©å¯‘é›½ä¾‚å¯—é›½å §å¯ªé›½æˆ¨å¯­é›½æ—Šå¯±é›½æ»Šå´é›¿æ›¤å´ é›¿æ©‚å´¨é›¿æ»Šå´¬é›¿ç†¾å´µé›¿ï¿½"],["b541","éŸ¨ï¿½",14,"éŸ¨îž•å‹éŸ¨â•‰å‘éŸ¨î‚ªå”",5],["b561","éŸ¨ç¨ å éŸ¨ç–™å¤",5,"éŸ®å‚¢å„éŸ®å‘¿å„éŸ®å›³å„•",5,"éŸ®æŽœå„¢",4],["b581","éŸ®æ¶°å„ªéŸ®ç‡€å„­éŸ®ãˆ¨å„¯éŸ®ï¿½",6,"éŸ®î‡„å„¾",5,"éŸ®ï¿½",11,"é›¿Ñ‰å´ºé›¿î‚¨åµé›¿åŠåµ„é›¿æŽªåµéœ‚â‚¬éœ‚ä¾‚å·¸éœ‚å‹²å·ºéœ‚å²†å¸Žéœ‚æ—Šå¸¬éœ‚â€°å¸¹éœ‚î„†å¼°éœƒå‘ºå¼µéœƒå¬°å¼»éœƒåºªå½éœƒæ—Šå½†éœƒæ¥‡å½Šéœƒæ¶¬å½ŽéœƒçŠ½å½œéœƒîŸŽå¾éœ…æ„²æ‚©éœ…æ»Šæ‚¹éœ…îŸŽæƒ„éœ…î‚¨æƒ”éœŠæ„²æ†«éœŠæ—Šæ†³éœŠçŠ½æ†½éœŠï½‹æ‡ƒéœŠî„†æ‹ƒéœ‹å §æŒéœ‹ã‚‹æŒ©éœ‹î„†æŒ¼éœ‹å†¯æéœŒâ‚¬éœŒå‹²æ±éœŒæ„²æ‘ƒéœŒæ»Šæ‘‘éœŒçŠ½æ‘šéœŒã‚‹æ‘éœŒî„†æ‘¥éœŒîˆ æ‘«éœŒé¸½æ•‚éœæ›¤æ•‡éœæ¶¬æ•Žéœã‚‹æ•ŸéœÑ‰æ•¤éœâ•‡æ•§éœåŠæ•±éœæŽªæ•»"],["b641","éŸ¯ï¿½",7,"éŸ¯ï¿½",17],["b661","éŸ¯ï¿½",15,"éŸ¯å²”åŠ¤éŸ¯æ·€åŠ§éŸ¯è®½åŠ°éŸ¯è±åŠ¶éŸ¯å·¾åŠ¸"],["b681","éŸ¯å®½åŽ’éŸ°ï¿½",5,"éŸ°åº¬åŽªéŸ°æˆ«åŽ­éŸ°æ“åŽ±",6,"éŸ°çƒ…åŽ¾éŸ°ï¿½",5,"éŸ°â•‰å’éŸ°î‚ªåšéœ‘â‚¬éœ‘ä¾‚æ™éœ‘å‹²æ™ éœ‘å¬°æ™«éœ‘å¶‹æ™²éœ‘æ—Šæš…éœ‘æ¿æš‰éœ‘çŠ½æš‹éœ’çŠ½æž´éœ’ã‚‹æž¿éœ’îŠæŸ…éœ’åŠæŸ‹éœ’ç•´æŸŽéœ’æƒ¦æŸ£éœ’èŒ§æŸ¦éœ”â‚¬éœ”å‹²æ£‡éœ”å¶‹æ£Œéœ”æ„²æ£éœ”æ©‚æ£³éœ•æ„²æ§•éœ•æ—Šæ§éœ•ãƒ«æ§µéœ•æŽªæª²éœ—ã‚‹æ«’éœ˜æ»Šæ®±éœ˜çŠ½æ®¼éœ˜î‚¨æ¯ˆéœ˜å½ªæ´ˆéœ™åŠæ´¿éœ™é¸½æ¸¶éœšä¾‚æ¸½éœšîŸŽæ¹¬éœšî„†æ¹³éœšåŠæ¹¼éœšé—ºæºéœ›å‹²æ½éœ›å²†æ½éœ›æ›¤æ½¬éœ›ã‚‹æ½¹éœ›åŠæ¾…éœ›ç•´æ¾‹éœ›èŒ§æ¾–éœâ‚¬éœå‹²ç€¸éœå¶‹ç€¼éœæ„²ç€¾éœæŽšçƒéœï¿½"],["b741","éŸ°ï¿½",13,"éŸ°ï¿½",6,"éŸ±å‘¿å”µéŸ±å›³å”¹éŸ±ï¿½"],["b761","éŸ±ï¿½",20,"éŸ±ãˆ¨å• éŸ±ãƒ­å•¨éŸ±ï¿½"],["b781","éŸ±ï¿½",6,"éŸ±å²”å–†éŸ±ä¿„å–ŽéŸ±ç–™å–’éŸ±è±å–—éŸ±å·å–›éŸ²ï¿½",14,"éœæ©‚ç†éœæ»ŠçŽéœîŸŽç˜éœî‚¨ç›éœî…¤ç¤éœæƒ¦ç¨éœŸå›¯ç„¿éœŸî„†ç…­éœŸåŠç…·éœŸèŒ§ç†ƒéœŸä¾©çˆ›éœ ä¾‚çˆ£éœ å §çˆ¥éœ å²†çˆ¯éœ æ©‚ç‰‚éœ æ¶¬ç‰†éœ ã‚‹ç‰“éœ îŸŽç‰žéœ æŽªç‰­éœ å†¯ç‰³éœ é—ºî”…æ¿å‹²î”–æ¿æ’¾î”¡æ¿æ¿î”¥æ¿ã‚‹â€–æ¿î…¤â€™æ¿å½ªã€Œæ¿èŒ§î•²æ“˜îŸŽî«æ“˜æŽªâ’è€„â‚¬è€„ä¾‚î—ˆè€„å‘ºî—‘è€„æ„²î—™è€„æ¿î—¤è€„â€°ï¼ˆè€„â•‡ï¼Œè€„åŠï¼˜è€„é—ºï¼›è€„è¯«î˜©æ¯ªæ©‚î™…æ¯ªèŒ§ãæ¯³â‚¬æ¯³å‹²îš‘æ¯³å¿žîš–æ¯³æ©‚îšžæ¯³æ»Šîš¥æ¯³îŸŽã‚©"],["b841","éŸ²ï¿½",7,"éŸ²ï¿½",17],["b861","éŸ²ï¿½",8,"éŸ²æ·€åš©éŸ²è®½åš¬",13],["b881","éŸ´å ©åž”",5,"éŸ´ï¿½",24,"æ¯³î‚¨ã‚­æ¯³æŽªã‚µæ¯³é¸½ã‚¼æ¯½å‹²î›ªæ¯½å›¯î›®æ¯½å©‹î›²æ¯½åºªÎœæ¯½î…¤Î æ¯½æŽªîžˆæ¯½è¯«îž‹æ¯µä¾‚îæ¯µå¤’î‘æ¯µï¿½",4,"æ¯µæ©‚îžæ¯µæ¶¬î¢æ¯µç‚¿Ðæ¯µï½‹Ð“æ¯µãƒ«Ð–æ¯µî„†Ð¢æ¯µæƒ¦Ð¥æ¯µé¸½Ð§æ¯µå¼˜â–ˆæ¯¹ä¾‚â–“æ¯¹æ›¤Çœæ¯¹é—ºîŸ‡æ°…â‚¬æ°…å‚ ï¹«æ°…å¤’îŸ©æ°…å¶‹îŸ¬æ°…æ’¾îŸ²æ°…æ›¤îŸµæ°…æ»Šâ”€æ°…ãƒ«â”ƒæ°…îŸŽâ”…æ°…åŠâ”æ°…æŽªâ””æ°‡å†¸çŽæ°‡å‘ºç“æ°‡å²†î€‡æ°‡â•‡î€Šæ°‡î„†î€æ°‡æ½î€—æ°‡é—ºî€šæ°‡è¯«ç“æ°†å §ç®æ°†æ¬•î¹"],["b941","éŸ´îŒåŸ†éŸ´î‡„åŸŠéŸ´è¡¨åŸéŸ´ç¨ åŸ–",6,"éŸ´å·å¢éŸ·ï¿½",5,"éŸ·å¤—å¢›éŸ·å¬³å¢"],["b961","éŸ·ï¿½",14,"éŸ·ï¿½",6,"éŸ·ãƒ­å¢»éŸ·Ñ‹å¢¾"],["b981","éŸ·ï¿½",22,"éŸ¸å‚¢å¦°éŸ¸å‘¿å¦´éŸ¸å›³å¦·éŸ¸å©å¦ºéŸ¸å²†ç‘Žæ°å‹²ç‘£æ°å¿žç‘§æ°æ©‚ç‘´æ°çŠ½îƒ„æ°î‚¨îƒæ°æƒ¦îƒ‘æ°é¸½îƒ–æ°èŒ§îƒ˜æ°å€¦ç“Œæ°•å‘ºç“æ°•å¤’ç“–æ°•å¿žç“™æ°•æ—Šç“¨æ°•â€°î„œæ°•î„†ç•§æ°˜å²†ç•°æ°˜ã‚‹î…¿æ°˜î„†î†‹æ°˜å†¯ç˜ˆæ°™å‹²ç˜“æ°™æ„²ç˜¬æ°™é¸½î‡®æ°™èŒ§î‡´æ°šâ‚¬æ°šå‚ çš¥æ°šå¤’çš¨æ°šå²†çšªæ°šå¿žçš¯æ°šï¿½",4,"æ°šï¿½",4,"æ°šã‚‹å“Žæ°šÑ‰ç™Œæ°šî…¤éžæ°šå½ªæŒ‰æ°šé¸½çœ¬æ°¡ä¾‚çœ±æ°¡å‹²çœ³æ°¡å¤’ç‚æ°¡å¶‹çˆæ°¡æ¿çŸ‚æ°©å‘ºçŸ†æ°©å¬°çŸŠæ°©åºªçŸ“æ°©æ›¤çŸ–"],["ba41","éŸ¸å¶å¦¿éŸ¸å¿¢å§ƒéŸ¸æ“å§…éŸ¸ï¿½",5,"éŸ¸æ¿å§™éŸ¸ç‡€å§ŸéŸ¸ãˆ¨å§¡éŸ¸ï¿½",6,"éŸ¸ï¿½"],["ba61","éŸ¸î‡„å§±éŸ¸ç»Šå§´",5,"éŸ¸å–‰å¨€éŸ¸å·¾å¨‹éŸ¹ä¾†åª°",4,"éŸ¹å©åª½",5],["ba81","éŸ¹æŽœå«‡éŸ¹æ›§å«‹éŸ¹æ¥‰å«éŸ¹æ°»å«‘éŸ¹ï¿½",6,"éŸ¹ï¿½",9,"éŸ¹å²”å«µéŸ¹æ·€å«¸éŸ¹è®½å«»éŸ¹å¼˜çŸ™æ°©æ°¹çŸ¤æ°©â€°è æ°©Ñ‰æ³¢æ°©åŠè„–æ°©ç•´æ³Šæ°©æƒ¦å¸ƒæ°©è¯«ç¡›æ°¤å‹²ç¡©æ°¤å¿žç¡±æ°¤æˆ¨ç¡¶æ°¤æ©‚ç¡¿æ°¤æŽªè½¦æ°¤å³¨æŽ£æ°¤èŒ§ç£©æ°ªå‘ºç£­æ°ªå¤’ç£¹æ°ªæ—Šææ°ªî„†ç¥¤æ°²å §ç¥²æ°²å²†ç¥¼æ°²æ©‚ç¦‰æ°²ã‚‹èƒ†æ”µâ‚¬æ”µä¾‚ç§³æ”µå›¯ç§·æ”µå¤’ç§ºæ”µæ„²ç¨‡æ”µæ’¾ç¨Œæ”µæ¬•ç¨“æ”µæ»Šé’‰æ”µåŠé™¡æ••æ—ŠçªŒæ••æ©‚çªšæ••â•‡é’’æ••æŽªçŠ¯æ•«â‚¬æ•«å†¸ç«»æ•«å²†ç¬‰æ•«æ„²ç¬–æ•«æ»Šç¬£æ•«ç†¾ç®˜ç‰å‘ºç®žç‰å²†ç®®ç‰æ—Šç®·ç‰æ¥‡ç®¼ç‰æ°¹ç®¾ç‰çŠ½åŸ‚ç‰ï¿½"],["bb41","éŸ¹ï¿½",4,"éŸºå‚¢å¯—éŸºï¿½",5,"éŸºå¿¢å¯«éŸºæŽœå¯­éŸºæ›§å¯³",4,"éŸºçƒ…å°‡éŸºï¿½"],["bb61","éŸºã‚å°éŸºÑ‹å°“éŸºî‚ªå°›éŸºî‡„å°ŸéŸºï¿½",6,"éŸºå–‰å°µ",5,"éŸ»å—§å´ŒéŸ»å ©å´"],["bb81","éŸ»ï¿½",31,"ç‰îŸŽèº¬ç‰åŠè´¡ç‰ç•´å‹¾ç‰æƒ¦å¤Ÿç‰èŒ§è‡ç‰’â‚¬ç‰’å‹²ç°©ç‰’å¶‹ç°­ç‰’æ„²ç°¯ç‰’æ©‚ç°·ç‰’îŸŽç²£ç‰–æˆ¨ç²©ç‰–æ¥‡ç²¯ç‰–çŠ½å”¬ç‰–ã‚‹äº’ç‰–î„†ç´’çˆ°å §ç´šçˆ°æ©‚ç´®çˆ°æ¶¬ç´²çˆ°æ¿çµ¸è™¢ä¾‚çµ¼è™¢å §ç¶ˆè™¢æˆ¨ç¶åˆ–æ—Šæ™¯è‚Ÿå‘ºç¹‰è‚Ÿå¶‹ç¹è‚Ÿæ—Šç¹™è‚Ÿç†¾ä¿Šé²æ£€äº¼éµæ©ƒä» éµçŠ¾ä»ºéµâ•ˆå€«é·æˆ©å€²é·æ©ƒåé·Â§å…é·ãƒ¬å“é·î…¥å—é·åŠžåé·æŒ«åŸé·é¹…å§é·å±Šåªé¸â‚¬é¸ä¾…å„é¸å ¨å„”é¸å²‡å„›é¸æ©ƒå„¥é¸æ¶­å„¨é¸æ¿Žå„°"],["bc41","éŸ»ï¿½",17,"éŸ»å·åµ–éŸ¼ä¾†å·¶éŸ¼å†ºå·ºéŸ¼å—§å·¼"],["bc61","éŸ¼å ©å¸€éŸ¼å©å¸‡éŸ¼åº¬å¸“",5,"éŸ¼æ°»å¸¥éŸ¼æ¿å¸ªéŸ¼ç‡€å¸¯",6,"éŸ¼îŒå¹€éŸ¼ï¿½"],["bc81","éŸ¼ï¿½",4,"éŸ¼æ·€å¹ŽéŸ¼è®½å¹‘éŸ¼å–‰å¹“éŸ¼ï¿½",6,"éŸ½å—§å¼´éŸ½ï¿½",5,"éŸ½ï¿½",5,"é¸ãƒ¬å„´é¸î„‡å…‡é¸å¥ å…Žé¸è½¨å‰™é¹å‹³å‰¤é¹æ„³å‰·é¹ï¿½",4,"é¹ï½ŒåŠ‹é¹îž”åŠŽé¹î„‡åŠ–é¹îˆ¡åŠ™é¹è†˜åŠ§é¹èƒ³åŠ°é¹æ£€åŽéºå ¨åŽœéºå¬±åŽ¡éºå¶ŒåŽ°éºæ›¥åŽ´éºæ»Œå…éºãƒ¬åŽéºîŸåéºåŠžå´éºèƒ³å”´é»å²‡å•€é»åº«å•‡é»æ—å•é»æ»Œå•™é»ç†¿å•žé»ãƒ¬å•«é»â•ˆå•²é»åŠžå–—é½å‹³å™²é½å²‡åšé½æ¥ˆåš‡é½çŠ¾åš–é½îŸåš¢é½è†˜åš¦é½æ£€åš±é¾â‚¬é¾å‹³åž–é¾å¶Œåž™é¾æˆ©åž¬é¾æ¬–åž³é¾ç†¿åž¹é¾îŸåŸ„é¾î‚©åŸˆ"],["bd41","éŸ½æ¥‰å½Š",7,"éŸ½ãˆ¨å½œ",7,"éŸ½î‡„å½²éŸ½è¡¨å½¶éŸ½ç¨ å½½éŸ½ä¿„å½¿"],["bd61","éŸ½ç–™å¾†éŸ½å–‰å¾ŽéŸ½å·æ‚éŸ¾ï¿½",5,"éŸ¾ï¿½",13],["bd81","éŸ¾ï¿½",5,"éŸ¾ï¿½",25,"é¾îˆ¡åŸé¾å¯ŸåŸ“é¿å ¨å¢£é¿æˆ©å¢§é¿æ©ƒå¢µé¿ãƒ¬å£ƒé¿î…¥å£ˆé¿æŒ«å£–é¿å±Šå£™éž€ä¾…å¦¶éž€å¤“å§éž€æ©ƒå§éž€æ¿Žå§¢éž€ãƒ¬å§©éž€î„‡å§¯éž€æŒ«å§·éž€ç¼å§½éžæ»Œå«•éžçŠ¾å«žéžã‚Œå«¬éžî„‡å«®éžîˆ¡å«³éžé¹…å«ºéžè½¨å«½éžæ£€å¯‘éž‚å ¨å¯œéž‚å²‡å¯¦éž‚æ’¿å¯¯éž‚æ›¥å¯´éž‚æ»Œå°‹éž‚ãƒ¬å°éž‚â•ˆå´ŠéžƒîŸå´ºéžƒî„‡åµƒéžƒå¯Ÿåµéžƒè½¨åµ“éžƒå±Šå·¹éž„å ¨å¸‰éž†â‚¬éž†æ©ƒå½Šéž†æ»Œå½‘éž†çŠ¾å½šéž†îŸå½¥éž†î…¥å½ºéž†å¥ å¾ƒéž‡å ¨æ‚™éž‡ã‚Œæƒ‰éž‡ï¿½"],["be41","éŸ¾ï¿½",7,"éŸ¿ä¾†æ†˜éŸ¿å†ºæ†›",14],["be61","éŸ¿ï¿½",7,"éŸ¿æ¿æ†ºéŸ¿ç‡€æ†½éŸ¿ãˆ¨æ‡€éŸ¿ï¿½",7,"éŸ¿î‡„æ‡“éŸ¿è¡¨æ‡–"],["be81","éŸ¿ï¿½",4,"éŸ¿å–‰æ‡ŸéŸ¿å·¾æ‡¢é €ä¾†æ‹‘",4,"é €å©æ‹°é €ï¿½",5,"é €ï¿½",8,"éž‡æŒ«æƒ£éž‡å±Šæ†Ÿéžˆã‚Œæ‡ƒéžˆîŸæ‡éžˆæŒ«æ‡™éžˆè½¨æ‹ƒéž‰æ—æŒéž‰èƒ³æˆéžŠâ•ˆæ‘ªéžŠè†˜æ‘¯éžŠèƒ³æ‘µéžŠå¿«æ”¢éžŒä¾…æ”²éžŒæ„³æ•‚éžŒæ»Œæ•¤éžŒâ•ˆæ•©éžŒåŠžæ•»éžŒè½¨æ•¾éžŒå±Šæ™žéžŽå‘¾æ™¥éžŽå¤“æ™©éžŽå²‡æ™¬éžŽåº«æ™¸éžŽæ—æ™»éžŽæ¥ˆæ™¿éžŽæ¬–æš†éžŽçƒ„æšŠéžŽÂ§æšéžŽîŸæšŸéžŽè†˜æš¢éžŽæŒ«æš¤éžŽæ£€æš¯éžâ‚¬éžå‹³æžƒéžå²‡æžéžå¿Ÿæž’éžæ›¥æžŸéžæ©ƒæž©éžçŠ¾æŸ€éžæŒ«æŸ•éžèƒ³æŸŸéžæ··æŸ¤éžå±ŠæŸ§éžï¿½",6,"éžå²‡æ£Š"],["bf41","é €ï¿½",10,"é €ï¿½",14],["bf61","é €ï¿½",18,"é å¶æ¸é å¿¢æ¼é æŽœæ‘€é ï¿½"],["bf81","é ï¿½",5,"é æ¿æ‘“é ï¿½",7,"é â•‰æ‘¢é î‚ªæ‘¥é î‡„æ‘¨é ï¿½",6,"é é¬¼æ‘µé æ£€æ£Žéžæˆ©æ£“éžæ©ƒæ£¤éžÂ§æ£§éžãƒ¬æ£³éžî…¥æ£¶éžåŠžæ£¿éžé¹…æ¤ƒéžï¿½",5,"éž“å‘¾æ§…éž“å›²æ§‡éž“å²‡æ§“éž“æ©ƒæ§žéž“æ¶­æ§£éž“ã‚Œæ§¬éž“îŸæ§µéž“î…¥æ§·éž“åŠžæ§¼éž“æŒ«æ¨€éž“ç¼æ¨„éž“æ··æª§éž•ä¾…æª®éž•å ¨æªºéž•æˆ©æª½éž•æ—æª¿éž•æ»Œæ«‡éž•çŠ¾æ«–éž•îˆ¡æ«›éž•èƒ³æ«£éž•æ£€æ®Œéž–å ¨æ®™éž–å¬±æ®Ÿéž–æ—æ®¨éž–æ©ƒæ®°éž–ã‚Œæ®½éž–ÑŠæ¯„éž–åŠžæ¯éž–æŒ«æ¯Ÿéž–è½¨æ¯¢éž—â‚¬éž—ä¾…æ³éž—å‘¾æ³´éž—å¶Œæ´‚éž—æ—æ´”éž—æ¿Žæ´œéž—Â§æ´¦"],["c041","é ï¿½",5,"é ‚å‘¿æ”©é ‚å›³æ”­é ‚å©æ”±é ‚ï¿½",6,"é ‚æ ±æ•‡",5],["c061","é ‚ï¿½",25],["c081","é ‚ç–™æ•¼é ‚å–‰æ•¾é ‚å·æ–‚é ƒä¾†æ™œé ƒå†ºæ™ ",6,"é ƒåº¬æ™²é ƒï¿½",5,"é ƒæ°»æšƒé ƒæ¿æšˆé ƒç‡€æš‹é ƒãˆ¨æšŽéž—â•ˆæ´­éž—åŠžæµ‰éž—è½¨æµ—éž™å‹³æ¸½éž™å ¨æ¹†éž™æ—æ¹‘éž™æ¥ˆæ¹™éž™çŠ¾æ¹£éž™ã‚Œæ¹ªéž™åŠžæ¹µéž™è¸Œæ¹¹éž™ç¼æº‚éž™å±Šæ½ƒéžšå‹³æ½‘éžšå²‡æ½”éžšå¿Ÿæ½™",7,"éžšæ»Œæ½¬éžšîŸæ½¾éžšæŒ«æ¾‹éžšèƒ³æ¾•éžšå±Šæ¾—éž›å†¹ç€¯éž›å‘¾ç€²éž›å ¨ç€´éž›å©Œç€»éž›æ„³ç€¾éž›æ—çƒéž›æ¥ˆç…éž›æ°ºçŽéž›Â§ç’éž›ã‚Œç”éž›îž”ç›éž›î…¥ç éž›æŒ«ç±éž›å±Šç´éžœâ‚¬éžœä¾…ç„¾éžœå¤“ç…‚éžœåº«ç…‡éžœæ©ƒç…—éžœã‚Œç…¥éžœî„‡çˆ›éžä¾…çˆ éžå ¨çˆ¦"],["c141","é ƒã‚æš’é ƒÑ‹æš˜é ƒî„ˆæšœ",5,"é ƒä¿„æš¦é ƒé¬¼æš«é ƒè±æš¯",6,"é „å—§æžˆé „ï¿½"],["c161","é „å²‰æžé „åº¬æžé „ï¿½",19,"é „îž•æž¾"],["c181","é „ï¿½",31,"éžæ„³çˆ²éžæ’¿çˆ¼éžæ °ç‰…éžæ¿Žç‰‹éžã‚Œç‰žéžî…¥ç‰¤éžè†˜ç‰³éžæ£€î”…è‡å ¨î”Žè‡å²‡î”’è‡æ—â€œè‡è†˜ã€ˆè‡èƒ³ã€Žè†¦â‚¬è†¦ä¾…î•¨è†¦å‘¾î•«è†¦å›²î•°è†¦å²‡î•²è†¦æ—î–‚è†¦ç†¿â…°è†¦îŸâ’“è†¦å±Šî—‰æ¬¤å ¨î—‘æ¬¤æ—î—šæ¬¤æ¥ˆî—žæ¬¤çŠ¾ï¼æ¬¤ã‚Œï¼•æ¬¤æ£€ï¼æ¬·â‚¬æ¬·å‹³î˜ªæ¬·å—¢î˜±æ¬·å¶Œî˜´æ¬·æˆ©î˜½æ¬·î„‡ã”æ¬¹æ„³îš–æ¬¹æ—îšæ¬¹çŠ¾ã‚¡æ¬¹ï½Œã‚¬æ¬¹åŠžã‚´æ¬¹æ£€î›­æ­ƒå¤“î›±æ­ƒæ„³î›½æ­ƒæ¬–îœ€æ­ƒæ¿Žî…æ­†ä¾…î‰æ­†å›²îæ­†å©Œî•æ­†æˆ©î˜"],["c241","é …å©æ£†é …å¶æ£Šé …å¿¢æ£é …ï¿½",4,"é …æ°»æ£žé …ï¿½",5,"é …îž•æ£«é …â•‰æ£¯é …î‚ªæ£´é …ï¿½"],["c261","é …ï¿½",4,"é …ä¿„æ¤„é …ï¿½",5,"é †å‚¢æ§‚é †å‘¿æ§…é †å›³æ§ˆ",6,"é †ï¿½"],["c281","é †ï¿½",5,"é †æ¿æ§¥é †ç‡€æ§¨é †ãˆ¨æ§ªé †ï¿½",7,"é †ï¿½",9,"é †å–‰æ¨†æ­†æ›¥î›æ­†æ¬–îŸæ­†æ»Œî¢æ­†çŠ¾Ð‘æ­†ã‚ŒÐæ­†î„‡Ð›æ­†îˆ¡Ðžæ­†è†˜Ð¦æ­†è½¨Ðªæ­™â‚¬æ­™å ¨â–”æ­™å¬±â–½æ­™å¶Œã€æ­™æ©ƒÄ«é£‘å²‡îŸ«é£‘æ„³îŸ²é£‘æ»ŒîŸºé£‘ç†¿îŸ½é£‘Â§â”„é£‘å±ŠçŽé£’æ©ƒî€›é£’å±Šç‹é£“å‹³çœé£“å¶Œç¡é£“æˆ©ç¦é£“æ©ƒç¯é£“çŠ¾î©é£“æŒ«ç‘˜é£•æ„³ç‘ªé£•æ©ƒç‘ºé£•Â§ç“‰é£™å ¨ç“‘é£™å²‡ç“™é£™æ©ƒç“©é£™æ¿Žî„é£™èƒ³î„²é£šæ»Œî†æ®³æ—î‡™æ®³ÑŠî‡žå½€å²‡çšªå½€æ„³çšµå½€æ»Œçš¾å½€Â§é˜¿å½€ÑŠçš‘å½€â•ˆè‰¾å½€î‡ƒéžå½€èƒ³è‚®å½€ï¿½"],["c341","é †å·¾æ¨‰é †å®½æª¨é ‡å‚¢æª­é ‡å‹´æª°é ‡å›³æª´é ‡å²‰æª¸é ‡å¿¢æªºé ‡æŽœæª½é ‡æ ±æ«é ‡æ¬—æ«„é ‡æ¶°æ«‡",4],["c361","é ‡ï¿½",4,"é ‡îŸæ«”",5,"é ‡å²”æ«é ‡ï¿½",11],["c381","é ˆä¾†æ®é ˆå‹´æ®•",5,"é ˆåº¬æ®¢é ˆæˆ«æ®¥é ˆæ“æ®¨",7,"é ˆçƒ…æ®¸é ˆï¿½",5,"é ˆâ•‰æ¯†å½€æ£€æ•–å½€çœ·çœ²æ¯‚å‘¾çœ»æ¯‚å²‡çŒæ¯‚æ›¥çæ¯‚æ©ƒç“æ¯‚çŠ¾å ¡æ¯‚îž”æŠ¥æ¯‚åŠžé’¡è§³æ©ƒçŸ™è§³æ»ŒçŸ¤è§³îŸåšè§³î‚©é“‚è§³î…¥æ³Šè§³å¥ å“ºè§³æ£€ç¡ æ–å‘¾ç¡£æ–å¤“ç¡±æ–æ—é•¿æ–î„‡å˜²é½‘ä¾…ç£®é½‘å¤“ç£³é½‘æ„³ç¤ƒé½‘æ¬–ç¤‡é½‘æ¿Žæé½‘îŸèˆ¹é½‘è½¨ç¦æ–“çŠ¾ä¸¹æ–“î„‡æ·¡æ–“îˆ¡å½“æ–“èƒ³ç§·æ–¼æ—ç¨Œæ–¼æ©ƒç¨–æ–¼ã‚Œé¡¶æ–¼ÑŠè®¢æ–¼åŠžç©­æ—†å²‡çª…æ—†îŸç•ªæ—†åŠžçŠ¯æ—†è½¨åŠæ—†å±Šç«¸æ—„å ¨ç¬‡æ—„æ—ç¬æ—„çŠ¾æµ®æ—„ã‚Œè¾…æ—„åŠžå‰¯æ—„è¸Œå‚…"],["c441","é ˆî‚ªæ¯‰é ˆî‡„æ¯Œé ˆï¿½",7,"é ˆå–‰æ¯¤",7,"é ‰å—§æ³§é ‰å¤—æ³­é ‰ï¿½"],["c461","é ‰å¶æ³¿é ‰å¿¢æ´‚é ‰æŽœæ´†é ‰æ›§æ´Šé ‰æ©…æ´‘",5,"é ‰â„–æ´Ÿé ‰ï½æ´¢é ‰îž•æ´¤é ‰ï¿½",4],["c481","é ‰î‡„æ´´é ‰è¡¨æ´¸é ‰ç¨ æ´¿é ‰ï¿½",5,"é ‰å·æµ›é Šä¾†æ¸¹é Šå†ºæ¸½",11,"é ŠæŽœæ¹é Šæ—ç®»æ—ƒæ¬–ç®¿æ—ƒç†¿ç¯„æ—ƒÂ§é¾šæ—ƒâ•ˆå…¬æ—ƒî…¥å‹¾æ—ƒå¥ åž¢æ—ƒæ£€ç°žæ—Œå‘¾ç°¢æ—Œå¤“ç°®æ—Œæˆ©ç°²æ—Œæ©ƒç±‚æ—ŒÂ§æµ·æ—Œã‚Œäº¥æ—Œî„‡æ¶µæ—Žä¾…æŠ¤æ—Žãƒ¬èŠ±æ—Žî‚©æ»‘æ—ŽæŒ«åæ—Žç¼æ¡“æ—Žè½¨ç´‘æ—’ä¾…ç´•æ—’å ¨ç´£æ—’æˆ©ç´¦æ—’æ›¥ç´²æ—’çŠ¾æ¿€æ—’î„‡è¾‘æ—’îˆ¡åŠæ—’è†˜å‡ æ—–æ—ç¶æ—–æ©ƒç¶”æ—–ã‚Œæ¸æ—–ÑŠåƒµæ—–åŠžå¥–æ—–æŒ«ç¤ç‚€â‚¬ç‚€å‘¾ç·¦ç‚€Â§é²¸ç‚€åŠžç¸¿ç‚œçŠ¾ä¿Šç‚œã‚Œå¡ç‚œåŠžå‹˜ç‚œè¸Œåº·ç‚œæŸ¬â‚¬â‚¬éŸ¤å‹´â‚¬æˆ«â‚¬æ©…â‚¬î…¦â‚¬é”™â‚¬æ·€â‚¬ç–™â‚¬ï¿½"],["c541","é Šæ›§æ¹’é Šæ¥‰æ¹šé Šæ¶°æ¹žé Šçƒ…æ¹¡é Šï¿½",6,"é ŠîŒæ¹°é Šï¿½",5,"é Šä¿„æ¹»é Šï¿½"],["c561","é Šå–‰æºé Šï¿½",6,"é ‹å‘¿æ½Œé ‹å ©æ½‘",5,"é ‹æŽœæ½›é ‹æ›§æ½¥",4],["c581","é ‹ç‡€æ½°é ‹ã‚æ½¶é ‹Ñ‹æ½¹é ‹îŒæ½¾é ‹î…¦æ¾é ‹îˆ¢æ¾…é ‹å²”æ¾‡é ‹ï¿½",6,"é ‹å·æ¾˜é Œâ‚¬é Œï¿½",5,"é Œå©ç€·éŸ¥å‹´äºéŸ¥å›³äº¯éŸ¥æ„´ä»ˆéŸ¥æ©…ä»©éŸ¥î„ˆä¼ƒéŸ¥ç»Šä¼ŒéŸ¥æŸ¬ä¼£éŸ¨ä¾†å†éŸ¨ãƒ­åéŸ¨î„ˆåžéŸ¨æ·€å¡éŸ¨é¬¼å„‰éŸ®ä¾†å„ŽéŸ®å ©å„”éŸ®æ„´å„œéŸ®æ“å„ŸéŸ®æ›§å„¨éŸ®æ¿å„¬éŸ®ã‚å„¸éŸ®î…¦å„»éŸ®ç»Šå„½éŸ®ç–™å‰­éŸ¯ç»ŠåŠšéŸ¯é”™åŠ¯éŸ¯å–‰åŽéŸ°ä¾†åŽ“éŸ°å‹´åŽ–éŸ°å²‰åŽ¤éŸ°æ„´åŽ°éŸ°æ»åŽºéŸ°ç‡€å€éŸ°îŸå•éŸ°æŸ¬å”²éŸ±å ©å•éŸ±â„–å•¢éŸ±îŸå•ºéŸ±è¡¨å–…éŸ±æ·€å–“éŸ±æŸ¬å™£éŸ²æ©…åš§éŸ²ç–™åžéŸ´å¤—åžšéŸ´î„ˆåŸˆéŸ´ç»ŠåŸ“éŸ´æŸ¬åŸ¥éŸ´å®½å¢ŽéŸ·å ©å¢±"],["c641","é Œå¶ç€»é Œå¿¢ç€¾",6,"é Œæ°»ç‰é Œï¿½",5],["c6a1","éŸ·ã‚å¦§éŸ¸ä¾†å¦±éŸ¸å ©å§éŸ¸æˆ«å§‡éŸ¸æ»å§žéŸ¸ã‚å§®éŸ¸è¡¨å§¼éŸ¸é¬¼å¨‚éŸ¸å®½åª­éŸ¹å‚¢åª¹éŸ¹å¤—åª¼éŸ¹æ—å«ŽéŸ¹æ»å«ŸéŸ¹ãƒ­å«²éŸ¹è¡¨å«¶éŸ¹ç–™å¯‘éŸºä¾†å¯–éŸºå‘¿å¯£éŸºå¶å¯§éŸºæ„´å¯¯éŸºæ ±å¯½éŸºæ¿å°‚éŸºçŠ¿å°…éŸºãƒ­å°éŸºâ•‰å°™éŸºç»Šå°­éŸºé¬¼å°°éŸºæŸ¬å°³éŸ»å‹´å´ŠéŸ»æŸ¬åµ”éŸ¼â‚¬éŸ¼å‹´å¸‰éŸ¼å¶å¸éŸ¼æ„´å¸’éŸ¼æ©…å¸£éŸ¼æ»å¸¬éŸ¼îŸå¸ºéŸ¼î‚ªå¹éŸ¼é”™å¹éŸ¼æŸ¬å¼°éŸ½å‘¿å¼µéŸ½å¤—å½éŸ½æ©…å½™éŸ½ï½å½«éŸ½î…¦å½´éŸ½é”™å¾éŸ½å·¾å¾”éŸ¾ï¿½"],["c7a1","éŸ¾å ©æ‚µéŸ¿â‚¬éŸ¿å‹´æ†¸éŸ¿çŠ¿æ‡éŸ¿î…¦æ‡éŸ¿ç–™æ‡éŸ¿æŸ¬æ‡£é €â‚¬é €å‚¢æ‹¡é €å¤—æ‹«é €å¶æŒƒé €â•‰æ¶é æ„´æ‘‚é æ»æ‘•é îŸæ‘¤é ç»Šæ‘³é è±æ‘»é ‚å‹´æ”¬é ‚å²‰æ•‚é ‚æ›§æ•†é ‚æŸ¬æ–€é ƒâ‚¬é ƒå‹´æ™«é ƒå¶æ™±é ƒæˆ«æ™¿é ƒæ¬—æš…é ƒçŠ¿æšé ƒîŸæš•é ƒî‚ªæš›é ƒé”™æš¤é ƒç–™æš­é „å‹´æž€é „å›³æž…é „å¤—æž‘é „ãƒ­æ£ƒé …å¤—æ£‡é …æ„´æ£é …æ©…æ£›é …æ¶°æ£Ÿé …ã‚æ£©é …îŸæ£³é …é”™æ¤€é …è®½æ¤†é †â‚¬é †ä¾†æ§ƒé †å ©æ§“é †æˆ«æ§—é †æ—æ§™é †æ»æ§§"],["c8a1","é †ã‚æ§¶é †ç–™æ¨„é †æŸ¬æª§é ‡å‘¿æª²é ‡å¤—æªµé ‡å¶æª»é ‡æ—æª¿é ‡æ©…æ«†é ‡Ñ‹æ«“é ‡ç»Šæ«›é ‡é”™æ®é ˆå‘¿æ®žé ˆå¶æ®£é ˆæ—æ®±é ˆç‡€æ®¹é ˆîŸæ¯ˆé ˆç»Šæ¯ é ˆè±æ³Ÿé ‰å‘¿æ³©é ‰å²‰æ´ƒé ‰æ—æ´é ‰æ¬—æ´œé ‰ã‚æ´¦é ‰ç»Šæµ€é ‰æŸ¬æµ—é Šâ‚¬é Šå‹´æ¹‹é Šæ©…æ¹™é Šæ»æ¹¢é ŠîŸæ¹¬é Šî‚ªæ¹±é Šé”™æ¹¹é Šç–™æº‚é ‹å‹´æ½Žé ‹å¤—æ½—é ‹æˆ«æ½é ‹æ ±æ½¡é ‹æ©…æ½¤é ‹çŠ¿æ½¯é ‹ï½æ½µé ‹â•‰æ½¿é ‹ç»Šæ¾Šé ‹æŸ¬æ¾–é Œä¾†ç€³é Œå¤—ç€¸é Œæ„´ç…é Œæ¬—çˆé Œï¿½"],["caa1","æµ¼æˆ’åŒ é‹å›§å…é”çŠ²å½²é›é›æ‘œé¢å¤ŠçŒç€¹èˆµæ®—é‹èˆµç§éŒîˆ›ç“•éå‚œæ¢»ç»‹è‰°å«‘é‘¼å‹®î”œçšå £Ç˜ç’©å £çª‚æŒæ˜å–€æ¤æ›žåŸ¢é—æ‘æ‚‡éŽ­î…å…å¨ˆè‚©å¼¿é‘´æ°³îž†ç‘™æŽ—æžºæ¸šå†¨åž”æ¾§æƒ§ã‚¸æ¿®ï¹€å…±éªžè§„å™°éŽ»â‚¬é‰å—˜ç…¬å¦—æŒŽç·±é§åº£æ¹…çº¾ç”µâ–“ç»”è·¨å•Šé‘²æ¿Šå£†é‘¹è¾«î¨é—æ’²å…¬é æ¿‡æµ„å¨“å¯¸â…²ç»”î…¡æ†¶ç‘œæ„¯æ½•é—‰ã„¥å«Žé§åº¡ç‰šå®“å±¾åŠ…éŽ²ç‚¬åžºéãˆ¡ç…ˆå§—å‹¬ç¬¡é¢æ¨¼æŸé©ï½‡ç ç»±æ´ªå—é–¼æˆ¦æ†­æ¦«ï¿½"],["cba1","é–ï½…é“‚é¢èŒ¶å„§é–´â‚¬é—æ¨ºå¢°é«å î¡å®€â€³ç¤‚æ´å³°å·±è¤°å©ƒå¿å§¹ç†ºæš«é¤å—™ç¢ƒç»²å´‡ä¾—ç¼‡å²ƒåŽ°é‘¸Â¤æž’ç‘—ä½½ç‘³é–¶å¥¸æª·æ¥¸å›¦ç²™æµ å³°â‚¬å¬ªåš¤æ¿‰å¿”åŠ®éŽ°ç‚¬åé€è§„Ð˜å©•æˆ æž¼é¨å—™æ´Šç» å›ªå§¤é’ƒå¬¶î˜¥é–¹Ñ‡æžŠé â‚¬ç€¹ãˆ æ½™é“¯ä½ºæ¸¤ç¼‡å½’å–ŒéŠã„¥å¹“çžå‘­æ³•éŽ·æŽ“åµéŽ¿æ°­æ‘Ÿå¨“çŠµå“ç»æ¶œçª›éŸªçƒ‡î˜§é–¬ä»‹å¢”é–¶é•å’•æµ è·ºä»´å®¸æƒ§ç¼“éŽ°å—˜îšœé‘µè¾«æª¾éŸ«å›¬åµ‰æ¥±î‚¡ç¯‚éŒæˆžæ¾ƒå¦—â‚¬éŽå¤Šå¦½é”æŽ“î€"],["cca1","é¬å¥¸åžšæ¦›æ–¿å§­éŽ¬îˆåŽé‹å Ÿå•¯éŽ»î…Ÿæ³éå…¼çŽå©µâ‚¬é‘¶å £Î‘é—…æ–¿çˆ¡é—ç•Œå§®é¢å‹­å€’ç»»î…¡åç‘•å¬­î„­é–¬ï½‰ç¥½éŽ¶å¤‹ç„™å¨¼æ—‚ç¥¼ç¼‚é¸¿ÇŽéå…¼åŽžç» æ¿Šç‘±é–´æ¥…å¸‰æµœîƒ¿ç¹éŠç‚²å©éŽå——åª®é•å¶…åµ–é§æ¿î•¨æ´æ°¬ç·«éŽ±èˆµå•²éŽ¿åº¢æššé…îˆ›æ¯£é‡å­˜î•¼å¨‘å›©å€•é‘è¾©æŒ“é ãƒ§æ³é¥æ¬‘â€–çº¾î„‚ç¶ç»”å‰ç¥¬ç¼æ’¹â‚¬æ›¡â‚¬èƒ¯å‰¾é‘¾æ ¬î„Ÿæ“æ›¢â‚¬æ›¢å½™é—‹å†®ç‰³æ¤¹æ°¶î‡æ·‡å‚šæ™¸é«å“„îš–ç€›ï½…çœ´éŽ®å‘Šåžå¦—å‚›î«"],["cda1","å¦«ã„¦é‚¯é£å²€æ«¢çº¾åº£Å„ç»¯è¤å…¬ç»»è‰°â–“ç‘¾Â¤ç¿±é—…åº¨ç©­é™ã‚…å½¥é›å©‚æ‡•é¥å“„î–ç€›ã‚…ç›Žæ´î‚£å«¹é€é”‹æ™ éå‰æ®¸é‹îˆ›î†å¨Œç•Œæ¤‰é¨æ„®æ¾—ç»‹è·¨ç·®é‘°å†­å‚é‘¶å¿šå«¤é‘»å€Ÿå½´é’˜ä½½ç‰¨çšç£‹î€„é“¯å†­ç·¶é–·î‡€æ³§æ¤¤Ñ‡ç®æ¦§æ’³æ‘¥é‚æ¶™æ´¸å§Šå¿•ï¹¢ç’‹çƒ½ç¦’é¥æ¿æ½³å®•æˆžæ§…å§Šè¾¨î—’å©Šå‰§æƒƒçšç‚ºî‡™å§¹îŸ’î˜©æ¥ ã„¤ç·µéî„€å¡é”ç†·ç“Ÿå®¸ãƒ¦äº¹éŽ­î…Ÿå«³éŽºÑ„æ•¾éæ¬‘â”–é““ï½ˆå¹¶é—‰å¿Žè¦†ç€µâ„ƒåžé‹æ»…æ‘"],["cea1","ç»‰æˆ£å½„ç‘¾å›ªî€‘ç’ºã„©äº·é–¸å¬®î”‹å¯¤æ’´Ð–é’˜å—å„¹é“¯å‘­å•ç€¹æ¨ºî‡¡éŽ±ï½†ï¼šå¨†å‰§äº´éžîˆœæ‘Œç» ï¼„ç¶ˆé‘¿å‘°î…ç’¨î‚¦æ£žæ¤ã„¥åŸ‰éŽ­æ¿‡å«­é–«å‚™ç·¤éå¤Šå°…æ¾¹æ¬å”¬é‡çŠ³é”¤éæ°±åª¯éæ «ç“™é‘³éæ†¶é—ï¸½å¸¥ç¼ƒî‚¡ç®¹éŒâ‚¬æ¿‰å©‚î—£éŽ¬î…åŠŽéŽ·æ„­î•æ¦„ä½¸ç•¯ç»±æ¨¿å™æžç†¶æ°¦éæˆæŒ°é î„€ç‘¢å®¥çŠ²é˜€é€î…æ™­éâ„ƒîŸ©é™ï¼„æ® é­îˆœç¦ç¼ˆç¡…å•é’‘åº¤æ´˜æ“å†­ç¶†é–®å©‡î˜¨æ¤¹æ›¢î†‚æ¶“æ¨¹ç®™æ¶”æ¿…ç²æ·‡åžå¿é•ï¿½"],["cfa1","é—â‚¬é™ï½…å½žéœåº¡æ§˜é§é›ç‘ç€µå›§ç§¶å¯¤æ„­åš°éŽ·æ¨»æ™³é‹å‘Šç…©å¦²å¬«ç“™å§£å—˜î‡¡å§¹å‚›ç°¼éå“¥å«éœæ «æ‚†é¬è·¨ç…©ç»Œå‰æ‚¼é‘°å¤Žåš°é‘¸å‘°åž”é‘»ç†»ã€ç’Žå® è‡£æŒâ‚¬é–«æˆ¦å™é–´ã‚‰å§¸æ¤æŽ—ï¹¨æ§Œâ•…çªæ¦«æ»ƒæ¹…çžâ‚¬é‘¿å©‡çŽé—‰î‚¦æéšæ¶šç¦ç¼‡ã‚ˆî—žæŒå¶‰å„­é«â‚¬çžå Ÿå¸¢ç»ç†·î†…å¯®æ’¶â”•ç»î†¿å¦¿éŸ¬î„€â‚¬ï¹€åŸœé•ç¨¿åµŽé¦å Ÿå«µéŽ¹å‰ç‘ å¨£å†ªæ¹»é˜ãƒ§å´¡é’‘ã„¨è‹Ÿé—‚æ›Ÿæº€å¨…å†©æ¡¨ç‘­î…¡ç²šæ¥—å¬¶î˜«é…é”‹î„±ç’¨ï¿½"],["d0a1","æ¥ç¡·î˜¬é™î‚¢æ¹±æ¿‚åº¢å¼³å¦²è¤å½§çº­å‘¯î€™ç»”å‘¯å°˜é’ä½ƒî›´ç’§æŠ½â‚¬ç”¸æž¿é•è¯²æ½Žé£å›©ç“²é‘¿å²„åž¶é“¯å ŸîŸµéå¬ªå¢œé”å›¨åž·å¦«æ¨»ã‚µé—…æ¬å„é”ã‚…å«ŸéŽ³å†©æž»éè§„Ð­éŸå‰§ç“”é‘ºç¡…å½¨ç‘•èŒ¶îƒ”æ©æˆ¦îšŽé“¯å¤‰ç²–æ¿¡æ¥æ¾é„æˆžç›éžå¯¸î›¦ç»‚å€Ÿå§ªç›æã€‘ç‘—ç‡‚î˜¯é–·ï¸¿ç´œé™å©ƒâ‚¬ãƒ¦å£‰å§¹èŒ¬ç¤†ç»²ï¸¿ç°¶éãˆ¢ç…–é‘²îˆ™ç´’æµ¼åº¡å¾éâ‚¬é¡æ»ƒæ«’é¦è¯²ç†€é©ç…Žî˜¹æ¿‚å›§î›¸ç€µå‹«çŸå®•åº¡ç¹éªžæƒ§ç¹‰éŽ¶â‚¬éƒæ¥æ£§"],["d1a1","éˆç‚´æ¹¡é‰ç‚´î—å¦«å‹¬îŸ¼å¨†çƒ˜åŸƒå§¹èŠ¥çŸ€å¨£å›©å¸¢éžï¸¾æƒ‡é å‚œæŒ˜é£å“¥æš±çº°ä½ºï¼ç»ä½ºîšŒç»å ¢ã‚ºç» æ› ç£¤ç¼è™¹ç·¢é‘°å—šâ‚¬î…¡å€¢ç‘·æ¨¿ç“˜ç’žå £æ£é–·ï¿ å°‹æ¤‹ãˆ¤îš–æ¥±åº¨â—¤æ¤¹ãƒ©ç°°ç»¶å©è•‰éšå¤‹å«¯å¦—æ—ˆå™¾é î‚¢åŠ´é“¯å¬¶î˜±æ¿žæ»„åš˜é“¯å¶†å«ƒéŽ·åŒ¡î˜³",5,"é–­ï½î˜¹",4,"ç’œæ’…î˜¾é“¯æ°¾î™€é“¯æ»„æ®©é“¯æ¿ˆåŽ²é“¯çƒ‡î™„é—†ï½î™…éŽ¹å¿”åµ‘é—æ¥‹ãé‹å¿”îš¥å©€ç­¹ã‚é¢å‡¤ãƒé“¯ã‚ã…"],["d2a1","ç»±å¶ã†é“¯Ñ†ã€”é¥å©‚îž¾é“¯ï¿½",4,"æ¶”å†¿ãéÑƒîšéŒæ‹Œâ‚¬æ„¶ãŽæ¿‚å†²å‹¾éŽ¾æ°±îè¹‡åž«ä¼‚éŽ·å Ÿåµ’ç€µÑƒç˜²é”îŽãæ¿‚æ‘ç¼‰éŽ¬æŽžãé“¯æ†‹ã’éŸæ¬™ã“",5,"æ¤æˆ¯ã™",10,"å©µå†¿îš‰é“³å‘°å–›æˆå‰å„½é“³å—­îšŒé‘µï¸¼îšé“³å¤Šç¿±é“³ï¿½",7,"ç€šâ•„Ä“é‰è¤ç£¹é“³ï¿½",5,"é‘³æ–¤îšé“³æ¬å‡¹å¨‰ãƒ¥å°¶å©§å“„î˜¿é‘¼ï¿½"],["d3a1","æ¶“é€›æ†¾æµ£å——æŸˆé¦æ¨ºî—Œè¤°æ ¨æŸ—éƒï¸½ç‰å¨ˆåž«ç®¥é­î… î¬ç»¨ç‚µçªžé“”å¬­î•·é–¯æŸ¥å´¨éŽ¾ç»˜æªé›è™¹æŸ›é–¬æ–¿æ™¼é§å¶†å–“éŽ¿æ—€æ³§å¨£â„ƒç®¾å¨¼î…Ÿç«Ÿé¥æ‹Œäº™é‘¶å€Ÿæ™›ç‘•å†­ç–ç’€æ°¶å°‚å¨Œæ’¶æ™¸ç»›æ—‡ç¬é–¬æ¿†æ”¼é«å‚šî”éªžãˆ¡åžéŽ¾ç‚´ã€€é£å‰ç¡¸é“»æŠ½èŠ±æµ ï½…ç€³é§î†¼ã‡çå¶…è„–ç”¯è·ºç·ŸéŽ´å­˜æ‘—éœå® åš­çšå¬­å“ºé—…å©‡ç²µç€¹å‘­ç—‰éŽ®å†²â‚¬æŽ‘åžé’æ¿æ¹’é«é›î”œçåº¡çœå®„è·ºç§¼æ´ï¹€ç·¬éŽ®å…¼å¯«éŽºå¤‹æ‚§å¦—ï¿½"],["d4a1","å¦«è§„çŽå¨£æ¨»æµ®å©Šæ—€éƒ¡é•å‰§æ´”é«åœ­Î¡ç»‹æ˜æ‚‡ç‘•â•„æŠ„ç’ºå® ç®žé–«å†®â‚¬æ—ˆäº¾é–®ä»‹å´“é—„å •ç…–å§£æŽ”â‚¬å—™å¢­é˜ãˆ¢å´¹é«ï½‡îž‹ç»¡ã‚‡ç°ºç’â‚¬æ¾§â•‚å„‘éï¸½æ¤Šé†ç‚¬çŸŠé’ç‚µå™³ç’žæ°¶çˆ´æ¶”î… çŠæµ æ¿†å•²é‘å¶…å«Šéšå±¾å•©é‰è¾¨î”•å¦«ç†¸ç¤Šå¨¼è‚©æŸ¤é¬å´‡î¢é‘³ç£‹æ‡€é–µå‘­åŽ¹é‚æ¥æ½¨é‹æ’¶æ£™ç»”å›ªåµ†é“³æ°³çœ´é–«æ¥…ç‰ çžîˆå™£é‘ºæ°¶äº–é–¬îˆžåž—å¯°æ¥€ç¨˜å§—æ¬‘å™²é§è¤ç“‘é’˜ã‚ˆç‘’é–¯Ñ‡Ã²é å›¨åš©é“³æ¶šæ«“ç¼‡ï¿½"],["d5a1","é“‡èƒ¯çªç‘æå€§é“³æ»„ç¤‡é‘æ¬‘å½ç»²Â¤æƒ¤é“³æ¿‹å’æ¤æ†‹îš£æµœå‚šåµ‰å¨†å‹¬ç‘¨éŽå‰§åž±é“‡î…¢ç¬§é“å²ƒè†å®“æ„­æ‘œé€î„ç‘¬å©µî‚¤çœ±ç»¾æ»†æ£ˆç‘—ã‚ˆîž‰éŽ·å¤Žåš‡é” ç†·ç²–éˆæ¥æ°®é™è‚©æ‚ˆéŸîˆç€­é–®ç‚°ç· å®•å¶…ç·ºé’€å©‚å–ŽéŽºçŠµæšæµœî†¼â‚¬å——åé‘å¤‹î•¦å¦¯æˆ ä¼¯ç»®è¾©åŽ‚é‘¹îˆç¤æ“æ¶¢å™ºæ¸šè·ºåŠ®é•é›æ†˜å¯¤î„åœéŽ´ç‚¬æ¢¾å¨…æ°­çƒ¤ç»€î‡æ£žé” ï½‰æŸ‡æ¤¹ãˆ¤â”†æ¥¹æ¥…ç² é”æ¶™æ³¦å§é£Žâ‚¬æ¿ˆã‹æžãˆ¤æ½…éŽ²æ„­åžé€ï½†è¿¹"],["d6a1","é“å¤Œæ‹¤ç»¶ç£‹ä¼…é’ƒî†¿é¸¡é–«ï½‰å´éè—‰åžªé”ï½†ç£³é‘å £î—‡å¯¤å¤‹æºå¨ˆî†½ç¸½ç»¨å‰§åµ‰æµ ã‚„çº§é¥ç™¸îš¤å®€å“„é€—éŽ¬æ»…å¹‰ç»—î… ç·´ç¼ˆåº¤äºžé–«ç‚ºåŸ“é—†å •æ½é—‹æ©€å¥æ¸šå¬«æ™¶ç»‚î‡€å–†é—…å³°å«—é“³çŠ³æ‹¡éŽ¿å‹¬ç¦å¨¼ç‚µâ‚¬æ¨¼åžšé©Ñ†â‚¬ä½½æ§…é“æ»†çŸ¾æ“å‘´æ¹¶æ¦„îˆžæ³›æ¥£ç”µî•±ç»è·¨ç¨œé‘¿å¤å¯—æ¥£å—ç°±ç’œæ §î—¤å¯®å‹¬æ¹©éŽÑ…æ¹ç»«çŠºä¼¨éŽï¼„â‚¬ã„§å¢·çº¾å©…ç¡žç’©æ°³ç‚’é—†èœ‚ç°¡éæ°¬î‡£å¯¤æ ¨æž¡é•åº£æªªé¬î…¡äº°é’ƒï¿½"],["d7a1","é–¬å¥¸îƒ‚æ¦«å¶…î—æ¿ ä½¸é›¹å¦¯æ’´çª”å©•å¿•æ¨†ç»±îˆœé˜œé’„ç‚¶ã˜é–ºã‚‰æªµé”å¤‹æ£éŒè™«Î¥å¨´ä½¹ç°»éŽå¿•æ‚éŸçŠµæš€é¦ã‚‡ï½žç’Žî„„î”£éî…ŸåŸ‰é—„é•ç·°éŠî‚¢ç¤„å¨£î†é™¡æ“î„ç·¥éŽ±å‹¬ç‰€é“³ï¿ æ®•é•æŽ•å€ é‘æ»ƒå™·å¦¤ç‚µîŸ‚ç¼æå½µé—„å…¸ç¹—é’â•å¸¢éšå¿“æ”·çžãƒ¦å‹é‰åº¢â…·å¨´î„‚å¦¬é™å“¥æ‚Šé å†¿ã‚¢é¥ãˆ¢çˆ†ç¼ƒåœ­é–é‘¾å¤Žî—”ç‘ï¿ å™·é–²æ„°æ´Ÿæ¦€å¤Šæ‚µå¨¼å‰§å™½é æ¨¿æ¤‡éŸ¬îˆæ®»æ¥¸æ¥…ç°¾é‹æ¥ç©»éžå® åššé—‡æ «ç‰ž"],["d8a1","ç»”å¬¬ç‘ºç»®æŽ“æ‡‡éŸî†æ£½çº°è‚©ï¼ˆæ££î„„ç“Ÿæ¥¹è¯²ç™éªžæ›Ÿç´¶é‘¶æ»†å¸¿é–­å œç«¾é—å¶…Ä«å®¸æŽ‘ç¶†éŽ±ãˆ¡å°³é…â•‚æµ–å©ŠæŒŽæžéï½‡ç‹é’€î„ƒæ•é” æ˜ç´¦æ¥—å‘´ç›Žéžæ»„å§½éˆî‚£æé‘¼å¤Žã‚ªé—ˆè½°éª¸æ¿¡å‹«ç¹•è¹‡æ¬æ¹œç¼èŒ¬ç¶Œé‘ºæŽ•å°—é‘¾å€Ÿç´´é–­æ¬ç…æ¿¡ç‘°çŸç€µæ„­æ§¯é‹æ°­î•ªå§£å¿•å…ç¼ƒä½ƒåœç’©ï½‰å€Žæ¦„å‘°å‰¤ç’¨å©‡æª¶æ¤¹â‚¬æ¥¹ãƒ¥ç“±å§˜æ’¶å¯·é©èŒ¬æ´˜é’€å±½å•°ç‘•æ’³åŽ¤éæ›žåªºå¦«å¤‹çŸ“éªå‹­æ¹¢ç¼è·¨ç•ªé—ˆãˆ¤æ—±å©Šï¿½"],["d9a1","é’„æˆå•£éšå¶…æ‡¡é„åº¢æ®±å¦žÑ„ç°¾é¨è·¨ç€¾é‘¼æ¥„æ¨é“»ç†¼åé–µæ©€ç‚’çšå‚™äº•éæŽ‘å«™æ¿®å——é™„éŽ±æ›Ÿæ‡œéŽ½è§„æ¯ŠéŒæ„­Äå§£å¶†ç˜ºé—ç†ºå¢¶éŸä½ºæ¹¼é­æ¶œâ‚¬æ¥„å¨‚é‘¼å‘°ç‘Žç’Žã„¨çŸŠéˆã„¦çŸé—Ñ…æ´°é«ï¸¾ï¹©æ§Žâ•‚î„¸å¨ŒæŽ‘ã‚éˆï¹æŒ‹é—îˆšî•¸æ¿¡æ¬ç²ºéŽ»å¿”æ§¾é‰è™«è´Ÿéšî‚¤ç¬é‘»æ¥…å°é•æ¬å¸†éŽ²î†½å™µéŽ´å©ƒåª·éŽ¾î‚£æ£¤å¦¤æ¬î„Ÿå§£å¬¬åŠ‡éé£Žæš†ç»»å—šåž¶é‘¼å‚æš˜ç‘¾ï½ˆéƒ¨é—‡Ñ‡æ€ æ¾§ã„©ç²¯éŠæˆåž˜éšè¯²æ™±é‚ï¿½"],["daa1","å§¹å‰ç£°ç»±å¬­ä»¦é““å©‡æ¸é—†îˆšå¬å¨Œæ› å¢¿é›å†²ç¨çæƒ§ç¥´è¤°å±½äº•éˆî…â’å¦¤ï½†è®£å©€å‹­æ¹ç»«å´‡ç·¨é’–å›ªç‘¤æ©çƒ½æ½¯æ¦›æ‘åœéŽ®èˆµå‰­éŽ²î‚£æ™±éƒç»˜æ¤‰å§˜æˆžæœéœç†ºå¼¶ç»¶ï¿ æž–ç€µå—šæ¹ç’Žæ„¬å¢²é—æ°­åª¿éŽ¼å¿”æŒ·éˆå­˜Çœå¨‰å©„å¼¨é ç‚µç•¶ç»®æ› ç¬¡é‘¶å©…åŸ—é’–å‹®æ©é—†å½’î†æµ¼æ‘å´é™å¶…å½ŒéŽ·å±¾æƒ‰é€â‚¬é‚æˆžîˆå¨‰î†½ç¶éî… æ™¹é¦ãˆ¢æ´¡é©è‚©î—•çº¾è¤ãŒç»²å—šåŸ‡é”œçŠºç¹‘é—‹æŽ—ï¼é•å†©å«ˆéŽ¾ãƒ¦è¢±å¨¼ï¿½"],["dba1","é§è‰°ç©»é–±éå¢·æ¥‚î‡€ç“‹éŠï½…å€£é§å©‚Î˜çã„¥ç®›è¤°é”‹åŸ§é€ç‚¬æŸŸéƒä½¹æ§ˆé‹å¬«îœå©Šå‚œî—Šç»±Â¤å‘é‘¶â‚¬é‘¸î‚¥å§µé’‚Â¤æ®žç‘·î‡ç‘®é–­ï¹‚æ§»æ¦«æ„¬â‚¬å¶„ç é“³ï½…ç…¿å¯°æ¨»å«“éŽºæŽ“æ¾‚å©€å†ªå‰»é©å†­å„—é‘³æ°³ï¼”ç‘ä½ƒî˜¾ç’©çŠºç¼‰é–°å¶‰æ«”æµ¼îˆ™æ¡¨ç”¯æ¶™ç…†éãˆ¢æ«§é§é¹ƒç“Œéªžâ„ƒâ–•é“â•ƒåšé£îŽã‚¤ç»»ä½½æ™é’˜â•…î—¡æµ¼æ„®ç“˜ç¼ƒä¼´æž¼é‘â€³ç«¼å§Šåž«ç†¬å§¹åº¢ç¡¾é˜îˆœç˜Žé‘¼å†©ç¡¶éžå“„å…“é”å î—†éŽ¿æ¨»ç¥é Ñ…æ«€"],["dca1","çº°Ñ†æ§œé—‚ãˆ¤æ¹½é“³ãƒ¥å´¬å¯®ä½½ç•©æˆã„¨è­¦é–­å©‚åž¾é¬ãƒ©çœ½æ¦§å œç¬éŠå‚šåºçžæ¶˜ç‹—é„ç‚´æ¨…éŒå‹¬î—Šéå´‡æ”£é¥å‘¯îŽç»”æ¿Šå§¬æ¤çŠ»â–“æ·‡æ¿†ç‰Žé«åžî‡«é…î†½î„žå¨²æˆžè´­å¨¼ç•Œå½œé¢î‚¥å½¥ç‘æ»†î˜¸ç’€æ»†ç´¨æµ¼å¿“å„ é–æ„¬å´ªç€¹æ’³äº¬éˆå¶‡î›´é‘µç¡…å°Ÿé’„æ—‡î˜¬ç‘•å—šè„Šæ“å©šÎ•æ¦˜æŽ“æ¹°æ¶”æœµæ‰›æ¿‚å¤Šçšå®„îˆšå˜²éŽ¹Ñ„î——é‘ç•Œå•Ÿéžî‚¤æ–§é’ƒî„ƒæ¸¹é–«ãˆ¤å«†æ§Œå……ç¬‰æµ æ¨¹åˆŠéŒå‘­å¢«é“îˆšæƒéœæ„¬ç…šæ¾¶î‚¢â”‚"],["dda1","ç€›æ°¬î„®ç€µå±½ç°»é“³ï¸½å£Žéé”‹æž¾å¨´î†½äº¥é–å‰îƒç»¨è·¨çº§é‘µæ„¯åŽ¬é‘¶æ°³å¢é‘ºæ¬’å¸ºç‘·å†­çŸ¤ç’©ï¹éƒ´ç’§ç£‹é€—é–®ã„©åš‹é—ƒæ»ˆæª®æ¤æ¬“åŽ‚é–æ¥€åžŽéšâ•æ«žæ¾§å†²îš™æ¿‚î†¼é éŽ²ã‚†å£†é„æ„­æœ¬é’æ°±æ³¦ç»®å¤Œç¢ç»±æ¶œå§®ç’©ä¾€æ´¶é“³Ñ‚ç¶“å¯®æ¥€å¨‡éŽ·å‚šç©¿éˆå¬«î—Ÿçº­è‚©ç®–æ¦ˆîƒ¿ç¬—éŒæ¬å¯±é–î„å´™æ¿¡å†¨îŸ¿æ´å›¨å›éŽ²å©ƒå¢˜éŽµè§„æž‘é‹å›¨Î—å§£æ—€ç˜±å§£æ¥ç˜¶å¨Œé©ã‚¨éžç”µæ¤‡é®æŽ”î•¶ç»‰æ› îç»®å†ªç©»ç¼ˆÂ¤å‰"],["dea1","é‘´æå™¦é‘¿èŒ¶æ¹šç‘ã„¨î€˜ç’€î„ƒä¸é–¯æ¬“æ½ªæ¤‹æ¶¢è“Ÿé¤î„€îƒ…è¤°î„æžŒå¦¾è™«î††å¨´æ»„å‹˜éŽæ› å¢²éœî…¡é’µç’©æ’»ç‰·éŽ²æˆžèƒºé‘±æ©€â–‰æ¶”å¶„ç°¨æµœæ¶—ç²«æµ¼è½°æŠ€æµ£å¤¸ç¹œéåž®å½¶é™ç¨¿æ”©é¡ï½…æ´“æ¾¹î‚¢ã‚¢æ¿žæˆî‡ ç€µå“„çš å®¸å†²æ–§å¯°æ¬â‚¬æ¿‡å´¹é‚æ»„æŸ‰éŒèˆµç†å§Šî…Ÿî„´å¨Œæ¬ç¡¹å¨“ï½‡â‚¬å¤Œå´Šé®å‚œãžç»â‚¬ç»çŠµî†ç»¡â•ƒç¤‚ç»²èŒ¶å€–é‘¸å¶ˆå¸‹é’ƒæˆ£æ³§ç‘ç†»îŸ®ç‘­ç‚¶ç‘µç’©æ»†éƒ¸æˆî…¢å‘æ¤‹å¥¸î¤æ¥¹æ¿†å¢›é“³â•‚æ¹é“³ï¿½"],["dfa1","éŒæ¨ºåŸ…çžè¾¨æšŽå§¹æ› å¼·é¢ï½‡æž¬ç» æ¥„æŒé–°ææ¹´æ¶”é”‹æ‹»å¨ˆè™¹åŽ¼é’–â•€ç¬é“³î‚£æ½å¦«î†½ç¬šé‘ºç†»æ•‡ç›î‚£å½¿å©¢ä¾€åžæ£°îˆ™ç¬‚éŒå³°å„šéŽç†·æ™¢é î„æ§œç€›â‚¬çæ¬ç¢ƒç”¯ç¨¿ç°¥æ´çŠ²ç²‹éŽ¯è™«î”–å§—â„ƒç®»é–ç•Œå¢é™â‚¬é©å“¥ã‚¥ç» è¾©ç¹‘ç‘å® Ð¢ç‘­å® è–„ç’©ç‚ºæ¹æ¿‰ç‚µæŠç’©è—‰æ£é“³î„‚îŸ¾ç»±ãˆ£å£Šé—èŒ¬æ•“é¢ãƒ¯ã‚­ç»—æ¬î•ªæ¾¹è¯²éƒ½æ´å¿“æ†¾å¯°æ„­ä»ŒéŽ¶æŽ“åµ–éå¶†æ®¤é‡æ¬æµ‰éæ ¨ï¼’é˜â‚¬éŸç‚µî„§ç»²î†¾çªŽç¼ƒï¿½"],["e0a1","é‘³ãƒ¨åžé’–îˆã‚¿ç‘¾æ’»â‚¬æ¿‹å«Ÿæ¦›å¶‰ç´¶æ¾¶æ›žã‚­ç”¯î…Ÿå„¨é„æ—€æ«é‹æ„­çˆå¨£å‘®ç¶—é­å´‡â…¸é’ƒå—›å™µé–·î‚¡ç²°éå©‚åŽ›é å‹«ç‘¡ç€¹ï½†å¢–éç‚¬æ£†å¨“èŒ¬å”éžä½ºæ†šé å›©æ’é§î„‚Îšç»¶æ°±ç®·ç¼‡ã„¨å…é‘¶å® åŸžé“‡æ°³ç…¬ç‘­ä½ƒç½šé–¬æå§‚é–»ãƒ©îš’æ¥«î†¼å´¹çžæˆžîš™å¨‰å‹¬ç©¿å¨“î‚¥åž–é’–æ¶œã›ç‘·î…¡î€‰é—†îˆæ¶§é“â„ƒæ¯ å¨ˆèŒ¬ç°´é”œæç£µé—å†®æ«‡é€æ¿‡ç§¹é•î‡†ã‚®é©åº¡î˜ç€¹î„â‚¬Ñ„å…’éŽ´æ„­æ§¦é…ç†ºå°’éåœ­æ´“éªä½ºî„¥"],["e1a1","é‘±æ ¬ä¼ˆé‘µãƒ¨ç±é–±æŽç¬˜é•ãˆ¡î„«å¨²æ¥ƒâ–ç»—åœ­çª—é“³îˆèˆ¶é™î„€æ§¸æ¿‰æˆî†Œçå¿“çš¯å®¸ãˆ¡å¢éŽºå†©æ‚¢é„î…Ÿâ’Šå¨Œå…¼ç§·å©§îˆœâ‚¬ç†ºå†é•æŽ”æ• é¤å¿•æžŽé¦æ¬‘ç‘§ç»¡çŠµçŸ®ç»±çŠµåž‚é’„î„ƒæš›é“‡å›ªÃ¹é–«å¶‰ä»­é–­ç”¸å§ºé—Šå •Çšæ·‡æ¥€çˆ†é‰ç†¸ç¨‡ç»®ç†ºç°©ç’Žæ ¬ç¤€é–«ç†·î„¤å®¸èŠ¥æ‚•é’ƒâ‚¬é–¬æ»ˆï¼éœå›§ç•«éŽ®æ°­æ¾—å¨£ç‚¶îŸ…ç‘¾ï¹‚â‚¬ä¾€çˆ©é’å‡¤ã‚°éæˆ î•³é–¹æ ¬â€œé–²æ¤¾æ…¨é™æ¥€æ¤Šé¥æ°¬ç€­æ¾¹è—‰çŽç€¹å æå®„â‚¬ç”¯ãƒ¦å‰š"],["e2a1","éŽ´å¶†å¢œéŽºå Ÿæ‚³é€èˆµæš©å¦¯è§„ç•©å§˜å­˜ç¤„å©•è¾©åš™é™â•ƒåµéžå›©æŒ·é¦ï¸¾æ½¯ç»‰â‚¬ç»Œæ¥ƒî§ç»®åœ­ç¨„ç¼î„‚åŸ‚ç¼‡ç‚¶åŠ‘é‘¼è¾«æ‹¹é’ƒæ°³æ£¯çšæ ¬î€ç’æ„¯å‡ é–¬å‚žå€‘é–°î„„å§ˆé–µå½’æ®é—…Ñ‡æ¯ƒé—†æ ­æ¸¶é—‹å ¥î›»æ¥‚æ’»ç‘²é™æ–¿ã€æ¾¶æ¬î„©ç€¹æŒŽçª‡å¨¼æ°±å•›éžï¼„æé‘²å‘°å¾‘å®¸â€³ç·¡å¯°î…äº—éƒî„çˆ³å¦¤îˆ›îŸ±å¨ˆå¤‹å¹å¨£å´‡å½›é©å‰§ç›ç»›å¶‡ç£¾é‘´ï½ˆåž³é‘½â‚¬é’ƒç£‹æšŽç‘­ãˆ£ç“é–±å›¬å°€é—‹å—›Î¥éŽ´å²ƒî”˜æ©ä¼´å¢ºå®•å›§æ£"],["e3a1","å®“â•ƒæ†»é‘¶æ¿Šæ½¹å©µæ›Ÿå¬€ç¼ˆæŽ•ã–ç‘—è¹­ç¬§æ¶”æ¨ºå„³é•æ¿†å´ŒéŽµæŒŽæ§†ç»»â•„çˆ¡é—„ç‚°ç·§é–æ¬æ¨æ¿®å¬ªî€ƒçç¨¿ç…çžå¶…ç«¶å¯®æˆžäº™é‚èŠ¥æ§¸é…å‚›ç³éŒå¯¸å¯½é­ãˆ¢ãšç¼ˆå‘°æŒƒé’ƒå¶ˆî›»ç‘­ï¹â”…ç’œÂ¤çç’žå“„ç…·ç€µæ–¿ç´¡éŽ­îˆ›å«®å¦žå¶†ç•ºå©€æ»…å”²ç»¡æŽ•æ½Ÿç’€æ¨¿ç—ªæ¤‹ç†¼ï¼žæµ¼é•ç·›æ·‡â€³æ‡Ÿæ¿žçŠ²î†éŽ°å…¼æŸŠé…ã„§åš°é¢å´‡îš£ç»±å® åŽ§é‘·ï½ˆå¸¢é’–î‡æ£Šé“šå†­â–•éŸ¬î‚¥ç·µé“³è¾«ç¹€æ¾¶åžî…»ç€µï¸½å€ç€µâ•çš¨è¹‡å†©çž¾"],["e4a1","é“³å‰ç¹éŽå¬¬æ•‹é‘ºîˆî³æµ â‚¬é—ä¾Šã‚³é—†æ¬çš¬æµœç‚°ç¸¿éæŽ‘æšˆæ¿žãƒ¥æ•žéŽ´æˆ å¢®é‘ºå€Ÿå¸¾é“”æî”žç‘·æ¿‹æ¨‹é—†å‘´î˜¸æ¦‡å¤ç¦Žé«å©‚æ¸¤å®¥è—‰ç®˜éŽ¯â„ƒå‰·éŽ»â„ƒâ–Šå¨“ãƒ©å‰›é–¸æ—ˆî”“æ¦˜æ„°æ¤’ç€¹å¤Šå“ºéŽ¸å¤‹æª¹å¦—å ¢æº‚é—†ä¾€ç€ºæ¤¤æ—ˆç–…é‚Â¤ç‘æŒå¬®æŸ¤éžé›åšå®¸æ §æ—±é†æ¥ƒæª¶é‘¿æ’®æ£æ¾¹æ’´å¨‚é™åº¨å·æµ æ¿ãŽéŽ¬å¿”æ¨†å¨ˆå†ªÐæ¦‡ï¹€å¸—éâ‚¬é©å†¨ç¤€éŽ°æ¶™æ´Šå¨‘îˆœî•²é‘¹é¹ƒæ®¬é—ˆå‹«å·¹éŽµå…¼å¸ å¨‘èŒ¬ç¬‚é‘µå¬®î”’"],["e5a1","å¨…è¤ç¶„æ§Žîˆžç¬Ÿæ¶”ç†·â‚¬è¯²å–æ¾¶æ»„å…éŽ»èˆµãé–é¸¿â‚¬è®¹ã‚´é–²åº¡æ€¥é“³ç¢‰ã‚¶ç»±å‹®å«¢é’îˆæ‡é’˜ãƒ¨ç°«é“³èœ‚è’‹é“³é©ã‚¹æ¾¹ã‚…ç“‹éŽ­æ¬å½‹é€æ¨»æš›é†æ©ˆã‚ºå¦¤å©ƒÇŽå¨²å¬¬â‚¬ä½ºå•é¥æŽ”æ§ç»‚å´‡â”Œé“³è¤ç·¤é“³è‰°îš‰é“³å€Ÿç•µé–²â‚¬é—„æ–¤ã‚¾æ¤å©‚æ¸¼å¯°â„ƒæŸ¤å©•ä½ºæ¦¾ç»‚ï¹ç®æ££î…¢ç“ªæ¦»î„€å‰ŸéŽ²èˆµå§‚å¦¾å¶ˆå™¯é‹å†¨ç‰¥è¤°ï¸¾å‰¦ç‘·â‚¬ç’œå“„î„µé“‡æ ¦äº¢éŽç…Žæ¯šæ¿‚å‹¬å¸ºå¨£ç‘°ä¸¢å¦¤î…žå”µæµœå œç¶‘é“³åŒ¡î›¥é“´ä½¸î›§é“´ï¿½"],["e6a1","é“´å†©ç“±å§¹æ¿“î›©é ç”µî˜»é“´å‘°åžé‘¹å‘°å°®æ“èƒ¯ç¶•é“´å—›î˜½é“´å›·î›­é“´å¤‰å®³é“´å©‚ç…™è¤°è§„æ§—é“´å¬¶î›±é¤î‚¤æž„ç’€îˆ¤î›²é–«å—›îŸ¸é¤ãƒ¥ç‰•æ¿®ç¨¿îŸ…ç€¹è¾¾î›³å¯¤è®¹î›´é“´æ„­å´˜éŽ¸ä¼™î›¶å¦žèŠ¥çŸ…å¨ŒæŒŽç¨å¨‘æ’´è¿”å©•æ—“î›·é‘ç†ºåŠ§é“æ¬™î›¸é•å†ªåš‚é“´æ—‚î””çº­îˆ¤î›ºç»›ç”µç½šé“´æ «è…é“´æ¥„î”’æŒç‡‚î›½é“´æ¬™î›¿é–´æ¶³îœ€æ§Œè®¹îœé“´æ¿“îœƒéŽ®å‘®ç§´é“´ç†ºå•½é“´ç‹…Î‘é—åžå¹é“´î®Î“é“´ã‚†ç…‹é“´ãƒ§å€¤é’æ‰®æƒé‘¹æƒ°å«†"],["e7a1","é“´ï¹‚æŸ£æ¥‚ãƒ©è‡é‡å‹¶Î—é•ä½½æ† é“´îŸ’Î™æ¿‰å¬¶Îšé“´î‚¢é™¡è¤°æ†‹Îœé„çŠ³æ® å¦¤è§„Îžå§˜å‘Šåµå¨“èˆµçµ¹å©µæ°±â‚¬æ¶šâ‚¬îˆœåŽ«é•ç†ºåµƒé“´î… æ†¶é“´î†¾æ‘‚é©å ¢îŸ¬ç»¾æ“„ÎŸé“´æ‹Œå«³ç‘­çŠºç¹‹é“´éå´é“´æŸ¥æ¹™é“´ç­¹Î¥æ¶”å‚šâ‚¬îŽÎ¦é’å å½™é‡è™«æ¯å©µå©„å¯ é«è·¨îŸ¿é‘ºî†¿æ£Ÿé“‡å‚¦Î§ç‘æ—‡î €ç’€å€Ÿé²é“´çƒ½å§µé“´ææ¹é—‹æ„ªç°²æµ¼å¶„ç¹…éŒæ’å´éšæƒ§æƒ“é¡æ°¬ã€æ¾§å“„ã‚§æ¿žæ¶˜î‡™éŽ®ç‡‚îž…éŽ³å©ƒæ™¼éƒæŒŽæ«Žå§ŠÑ„ç”å©¢ï¿½"],["e8a1","é‘å¿•å•²é›æŽ”î„¶é“šå £î€ƒæ¦˜æŸ¥ç´˜çžå¬«çŸé›å‹­å¸€é–³çƒ˜éŸ©éŸãƒ§æ§¦ç»Œâ•ƒç¬—é“‡å©‚åŽæ¾¹å‘®æ§é¡î†¾æ•ƒé§æ‰®ç¸¼é–­æ›¢æ³¹æ¥—æ—€ç”«é¡ï¸¾î€ˆç»î‡åš—é“”æ¬’æ¾‘ç‘·æ¶˜îŸ§ç€¹å±½ç–€å§Šâ„ƒî˜¥å¨´ï½‡å¸ºéžæ’¶æƒ‰çº°æ¥ƒçç¼ˆî‚¥å‰ºé‘µæ›¡å¸ªç’žå²„æ§·é—‹æˆžæ´¶å¯°â‚¬éƒçƒ˜ç€´å§¹î†å¸‡éŠî…žâ–‹å§î†ç…¯æ¾¶æ §æƒ®å®¸å¶‡å°Œé£å¿¥îž†é“´è¯²å„±é‘ç‘°ç‰¤æ¾¶î…žî›»æ¿®æ°¬î‡šé“´ç¡·îž‰å®¥ãˆ¡å«éŽ¼æ ¨æŒ€éŽ¿æ’…îžŠé‡æ»îž‹å§—å ¬î…é•è·¨æ‡é“µï¿½"],["e9a1","ç»å ¢î€Žç»»å›©ç¯‚é‘°â‚¬é‘µå¸®î‡é”œîˆî›¦ç’ŽçŠ»ä»šé“µå†®å€‹æ¥—æŽ“å˜å¨†å‰è¡ç»ºç†»ã…æˆå˜ç¹ŽéŒî…žå•‘é•å›§ç„½æ¾§å¤Šî†æ´å‘ŠåŽ’å§’æ›Ÿç§¾å©€Ñ„æ†¾é”æ—‚æ†¿é¢ã„§æ•©é‘±å® å°­é’ƒå¤Žç¬‚é–¹æ—ˆå½é“µå‹ªç°¬æµ£æˆä¼“éŽî„å¼µé™å¬ªå½¸ç€¹å›§ç˜¬çã‚†å‰¼éŽ²å‚›æ£¿é—æ¶šå¸¡éŸâ‚¬é©å‚œîš•ç»‚æˆ îž…ç»±å—™çª˜é‘ºå¬­æ£”é“ç‚¶ç¸½é–¬å›¬å…Šé–²îˆæ®”é—†ã„©æ´¨é•æ §æ¶§éƒî…Ÿæ§ºéîˆœåŽ¹ç»‹å •å„Šé—‹å©ç°¯é“µå‘®îŸ°å¨ˆç‚´ç·ªé”å¤Žâ‚¬æ¨¿å§¼é’‘ï¿½"],["eaa1","é–¬å¬®æ®¨é—†æŸ¥ç†é’„æ°¶îƒŒæµœæ„®å”ºé—†å‹«åŽ“é˜ç†·æ‘—é¦æ’³æ¹Œé¨ï½…ç©ç€šå‹«ç˜éŽ¬ã„¦åŠ¹éŽ»å­˜çŸƒå¨²è§„å…±å©§æ„®åŸŒéšè·¨æ†²é‘»æˆ£î•¦æžå‘´ä»©é“µå—›æ«Œæ¤¤æ©€ç¤‡éˆå £ç§ºé–´ç‚°ç¶…é‹å¤Šå„ªé—åžæ¹‡æ¿®æ–¿â–‰çå¤‹åžé†æ„­è…‘é–èŒ¬æ†¢ç»¶îˆå„é’€åº¤æ‡„é’„èƒ¯æ½«ç›æ¶œî˜½ç’Žå‚žä»Œé—Šå¬®ç“˜æ¶”å……ç·«éŽæŽ‘å’é“µå›§æ•®é â•î„³ç€¹ãƒ¥è¾œéªžè—‰å£•éŽ®çŠ³å„«éŽ°å Ÿå‰¦éŽ»å‹¬æ•»éˆå¤›îéŒæ—€ç…”é“µå¤‹ã‚¡å¦¤ãˆ¡è¡¥å¨²Ñîå¨“é©î"],["eba1","å©µï¼„å°ªéšå‡¤î‘éŸæ»…æ•±é“µå¶‡æª¼é“µåº¯î”ç¼î…¡åš²é’€æ­Œî—šç‘¾æ¨¿ç±ç’œî…¡èµ´éŸ«å‚žäº°é–«é¹ƒä¼œé–°å¤å™³é–¸î‡†î•é“µæˆçˆ¥é“µæŽ“ç˜¬é‘²å¤Žå›é“µæ“„î™éä½¸ã‚«çç™¸îšé“µæ ¨é¥¯éœÑ†å„°ç’å›·îœé–³æ¥…æžé“µæ©ˆîžé“µæ°¾î é‘±æŒŽåž˜éŽæ»…èƒ†é“»å¶î¡é¨çŠ³ä»¼éŽ±å›¨î†Žç‘¾é¹ƒå¦§é—…å˜ç®¼éšç†¸å¸†é’„î…¢æ«šé—ŠæŠ½ï¼ŽéŽ»æ ¨å¸¸é–­æˆåšŒéŽ³å¤Žå–“æ¦‰é€›ç··éŠæ°¬å‰™ç€¹æ»„å‰°éŽ³æŒŽæ‘¤å¦žå‘®ç˜é¤æˆ ç…Ÿç¼‡â•„å¢¹é’–å¿šç†ç›ï½ˆî€›"],["eca1","ç’€ä¼´å•±æµœå±¼äº’æµ¼å©î¢é“µç‚²ã—æ¿®îŸ’î¤å®¸æ’ç´±è¤°æ¶™â‚¬â˜…î¥é“µâ˜…Ð‘é“µï½‡åŸ¦éãƒ¯Ð“é£æ‰®æ£ˆé“µãƒ§Ð©é“µï¹â‚¬å²ƒâ‚¬å® å€“é‘»Â¤å´™é“µÑÐ–ç’¨å€Ÿæ¸¤é–­å›·Ð—é“µîˆï¼”æ¤å²‹Ð™é“µî„‚â‚¬é£Žæ³­ç¼ˆå©„ç¹‰ç¼ˆè‰°ç‘²æµœè½°ç²Šé’å†¨åµƒé“µî…žæŠé¥çŠ²Ð©ç€µå‘­ç´©è¹‡å¶†å·©é“µî‡†Ðç»²î‡å°©é“µæ‹Œæ®¦ç‘¾å¶ÐŸé—ˆî…¢æ¾é“µè¯§Ð¡æ¶“â‚¬æµ£æ°«éª„æ¾¹è§„æ£©å©§ãˆ¤â‚¬æå¹‡æ££é€›æ¢æ¾¹î„€î›¯æ¿®æ¬äº–é“µè¾¾Ð£ç»‹æ—“Ð¤é‘½å¿šç¡Ÿéãƒ¥å´‰"],["eda1","é“µå‡¤Ð¦é“µé€›ç²›é“â•ç“¡é‘ºå¤¸ç²©é’å“„æŒ©æ¿®å¤ŠÐ­ç€›æ„¬ç“§ç€›æ»„ä»¯éŽ±å Ÿç²™éæ¬‘åœéœå—™æ‘²é¤ç”µî—†ç»±î‚¥â‚¬å‘°åšœé‘¼ã„¨æ•†é’˜å¤Žî«ç’©å›¬æ³´æµ£æ»ƒå«¼é¤å…¼æŸ…é„ã„§ä¼¡éå“¥åŸ–ç¼å€Ÿå¦½é–°å²„æ³™æ¦ˆæ’î„ªå¦«Ñ„ç•¼å¨¼è™¹æ´–å®€æˆžæ¯‡å¨¼æ¶šî†‹ç»¨î‡ç‰°é—†æ»€ç¬€æµ æ¥€å°ƒé«æ‘â’’æ¾¹îˆšã‚¬çå›§èµ‹æ´å‹«å«‰éŽºå±¾æ¯‘é‰æ ¨îŸ…å¦¾ï½†ç‘¢å©•è·¨å¢•é“µè™¹å´˜é å¬¬ç·ç»®Ñ†å€é‘·ç†»åš™é‘¾å©…æ‡é’„ï½ˆæž–é’˜å¿šî—¢ç’æ’»å•²é—€ï¿½"],["eea1","é—…æ»ƒå•€éå¤Šæ¹ªç€¹ç‰ˆå¢ é‰æ„­ç‰»å§Šæ’´é™„å©Šæ’¶ä¼£ç»ºÂ¤î—†ç’¨Â¤ç´šæ¦»å¬®ç¶†é–î… ç•¯ç’œå¶‰å¯¶æµ£å›¦ç¶†éŽæ’æ‹ƒæ¿®æ„¬ç°³éŽ¶åž«æ¾‹å¦¤î†½îž½å¨Œî†½ç¬Ÿé™æ¬‘å°“é¤ç•Œî†ç»±ä½ƒå«¥é‘¿ç¡…æ†²é’˜ç–¯îŸ¸ç’¨îˆç°¢é–«æ¬“å¢é—†åº¨ç¶—é•ï½…æ‚ç€šâ€³ç˜‹éŽ½æ¨»æš¤å©Šå¯¸åª±é“µè¤æ®‘ç»Œå¶‡ç‘³ç»«å¶‡å¦‡ç¼ˆç†»åµ’ç’Žî‚¥ç¡¦ç’§ã‚ˆè´°éŸ«ç†»å¼€æ©å½’ä»¼é–ºæˆœçµ»æµ£å“„åéã„¥å€é“å¶…å£€æ¿‰â€³ã€–æ¿‚çŠ²çš¥çžæ›žç²µéŽ®æ¶™åŸŒéæ’´î†–å§˜å Ÿé¢ˆ"],["efa1","é“åº£æ‚¹é¢æ‰®æ•»é£æˆ æ«œç»›å²€ç•«ç» î… ç˜‘ç»¾å¿šâ”Šæ“æç¶é–³å—å§„é–·ãˆ¤æƒˆé—†å©šî”Ÿæ¤¤î‚¦î™ƒé’å›¨åŸ…éŽ¶æ¨»ç¦‰é§ã‚‡çšç»¡â‚¬ç»²è·ºå´°å®€æƒ§ç°µå©•å“¥å£ç»®æ©€æ¹‹æ¥«åº¨ç²¸éŽºãƒ¦æ‡žé“¦æœµç«µæµœæ›šæ¶µé‹æ»ƒä¼’é›å îˆç€¹æ°¬ç®‘æ´î…žçŽ¯å¯°ä½¹å„éŽ¸çƒ˜æ–‚éå­˜æ£‡é…èˆµæ«¢éŒç‚¬ã‚¨å¦¾å¤‹î„œå§¹â‚¬å¨£â‚¬å¨£ã„¦ç¬©å©€ç‚µâ‚¬ç‚µå‚éœåº£å¾‘é¢è™¹æ½§çº°å›©î›³ç»‹å¬¬â”™ç»®å‰§ç¨é‘¹å›ªâ–Šç’œî‡çŸ é–¯î…¢åŽžé–²æ©€å¢»é–¶å²„å°ƒé—‡å—›æ½ "],["f0a1","é—ˆæ»ˆçˆžæ¦§åº¡åŸ—é”æˆæš­é«ã‚…ç¬£å¯®ç†¸å€¢éŽ»æ„­îªå©µç†ºã‚­ç»—î„ƒå™¸é’–é¸¿ï¼ç’œæ­Œç®˜é–±å¶‰æ«Žé—…æ¶¢æº„æ¤¤å²„ç¶‚æ·‡åº¡åŽ—é‘å¬ªå§ªé¢æ’ç´¨è¤°î‚£å¸¾éŽ¿å¶†æ£­é…ä½¹æµé‡è§„æ¹žå§Šæ¿‡î—œå¦²èŠ¥ç´©å¨¼î†¾åŽé•ãƒ§åŸ…é î†æº€ç»æ «îšŸç»‰ç†ºîŸ†ç»æ› çŸ–ç»¯ç†ºç¥«ç»»æ‹Œå€—é’˜æ˜æ®¼ç‘­æ—‡î€žç“’æ¬’ç°›é–«çŠ»ä¼ƒé–²ï½‰æ¨†é—†æ›¢å¿éƒå¿•çš£ç“’æŠ½å¼®ç€›æ¨ºçš§é—æŽ“å«éšæ¿†â‚¬Ñƒç•»å¯°ç‚´å˜éŽ±î‚£î—šå¨£æ¬‘æƒç»‹î†¾ç¥©ç¼æ»…å‰¯é‘µï¿½"],["f1a1","éŸªî‡å‚…é–¸é¹ƒæ‚©æµ£æ„¬æ½—å®¸ï¹€éª‡éŽ¸î‚¤å§œæ¶“è®³ç¶‡æ¸šå¿“ä»›æ¿®æ¿Šå„Žé›î„æ‡†é¡æƒ§îš”ç€¹æ¬çªžå¯¤æ°­æ«‡éˆè¾¨ç…´éî…æ•žå¨²å‰ç® å©¢å¶‡å¡éçŠµæžƒç»«å²€ç£¦ç»±î„‚ç›¯é‘¸ç†»æ´“ç‘·æ˜çç’§æ‹Œç°¥æ“æŠ½â‚¬éåŽ§é–°æŽ—æ†šæ¤æ„®î¶ç»®ãƒ¤ç¹†éŽä½¸å™¯é©å î‡¤å®„ç»˜æ«ƒå¦¯èŠ¥ç¦‹å©§æ ¨æ¥·é’å²€æšžç»”ï½ˆç‰é–«ï¿ ä¼’é—†å¬®Ð­é‘¼ä½·è…‘æµ èŒ¶î”‹é–²å¶…åµ”å¨…æ¶™ã‚«å§¹ä½½æ‡žæ¾§ç‚´å•‚é‡ç‚¬å«°é‘æ¿ˆæ”½é¥å›©ç®³é’‚æ­Œç“‘ç’å œç®£é™ï¿½"],["f2a1","éœî‚¢æ¹´é§â‚¬è¹‡æ¥å¯”éŽ¸å›¨æ‡é€îˆ›æ£¬é…çƒ˜çŠé‹è™«î„›å§¹çŠ³çŸšå©•î„‚ç…¡é®ãƒ§îšŽç»æ¥ƒç¤„é‘²ãˆ£å‰›é‘·å® å§–é‘ºç–¯æ¹—ç‘¾å²‹Ðªç’å‹®æ¯’é–¬èŒ¬æ´¿ç»‹æ¬‘Çšç»»æ—‡ä¼”éžå›§æ£“æ¿‰åž«å°ŸéŽ¼ãˆ¡æª³é…å¬«â€¦å§’æ¶™ç•¡å¨²ãƒ¦ç½•éå¶‡æ‡†é ï¼„æšƒé¤åœ­æ´éªç‚µç€·ç»‰ï¸¾ç¬ç»ºæ¿Šåš®é’„îˆî•¼ç‘·é¸¿ç¡²æŒî‚¥æ™¯é–«æŸ¥å¹é—„ï½‰æ«é—‡å›¦ç·žé™åžÐ˜ç€šå¤Šç¬å¦—åº£æ¯é¤å‰§Ð—ç»æŽ•å• é“”î…¡å”±ç’ºå²ƒå‡¯é‚ç†¸æ¹‘é“µè—‰ç…¼å¨¼æ¥ƒçª›æ“ï¿½"],["f3a1","é–ºå •æ³¦å¯°åž«åš¥å©¢å‹ªç¬–æ¸šæ¨ºâ‚¬ç†·å¼¶é¡ç†·å¼¹å®¸î†½î‚¼å§ã‚‡î—ç» æ°¾Ð¬éŸ«å¤Žç²–é–¬î†½å´éŽ¼å‰§æ½ƒç»å‹¯å°Ÿé–¼å—å§œéŽ¾ç‰ˆè­¦é•ï¸¾æŒ©é¡æ°±ç“ç»¨æŽ”ç°œç»®èŒ¬ç°¶ç’æ°³ç£°é–¼ä»‹î˜µæ¥—å±½åŸžç€µç†¸æ‘éˆî… ä¸²éî…žå¼®æ¿‰è§„åŽ´éŽ±æ¬åš­é‚î„‚ç¯ç’æŽ•ç•ºéŠå¤Šâ‚¬â€³å£éžåžîŸ‡å¯¤çŠ²æ¡¨éŽ°å­˜æšˆé„å±¾æ¨é†ãˆ¡î’å©Šå‹¬ç–¾éšæ «æ§¨ç»æ’¹åŠ°é‘¹æ¬’å½‡é’‚ç…ŽåŸé©æ¿ç˜ˆç€µã„¥åƒµéŽºï¼„ç‰”ç¼ä½ƒå½é’„ï¿ å™°é–²é›å”ºéŒç”µç“¥"],["f4a1","ç’¨î„€å™­æ¿¡ç»˜å¨é“æ›žâ‚¬æ»Ð­é“æ–¿æ˜‚éŽ±èŠ¥åž°éŽ·æ’´æ‘¬é‚ãƒ¦ç²šé¦çŠºå‰¨éŸ«çŠ»æ«‰é—…è®³ç²ºé—å†¨æž æ¾¶â•çª›éŽ¿å‘®ç¡¥å¨£è™¹å¸žç»Œèƒ¯åž±é’–ï¹é•¿éŸªæ„°ä¼”é–²Ñ‡æ£¥é—ƒï¿ ç„¼é‘ç¨¿æ‘¬é å——ç«ŸéŽ¾ã‚†ç·¢ç¼ç£‹ç´µæžå¶‰æƒ–éå¤Šçš·å¨Œç‚¬åŠé¢æ¶šç®ç»¨ç•Œå ¡ç‘­ç¡…çŽé«ç‚²îžŠç”¯æ ¨åµŽé—æŽ”æžˆé«î‚¥ç³ç’¨è‰°ç´¥å¯¤è™«æ«žå¨£æ­Œä¼£é‘¿ä½½ç›é—ˆæˆ¦ç˜±é“·â‚¬é“å†©æµ›å¨‘æ›ŸåŒ–ç»¶çŠºî£é–«î‡€ä»¦æ¥‚æ–¿åžµé“åž®æ‘ éŽ²æ—€å¦±éŽ·æ¶™â…±"],["f5a1","å¦žæŽ“îšŸå¦¯ç”µå€°é’ï¸¾î”¢ç»€ä½ºî˜³ç»‰æŽ”â—¢é‘²æ ¬å£é‘»æ›¡å´é’‘å¤ŽçŸ€ç“’å‘´åƒé–±å¬®å•´æ·‡å†¨æ´ƒé•î… ç…‘é“šâ‚¬ç‘™ç¨¿î‡­è¹‡æ ¨æ½™é–­ã„¥å½šæ¿‰æ°¬î‡ªéŽ®ã‚†å”©éŽ½çŠµé™„é‘±æ‹Œæ•Ÿé–µå†©æŒ³éŒî„€ç£¾éˆâ‚¬æ¾§æ»„å¨ŠéŽºã„¦î˜³å¦¤å‘ŠîŸ„å©€î‚¤æ¯¢ç»‰å¬­å¨€é’€â•„ç¡ç“’ã„¨æ‹·é–¯æŽ—åŽ é–±æ»ˆå¯ªé–·æ©€å¸¤é—†æ¶¢Ç˜æ¦˜å¶„ç¬é£æ»…îš¢ç»”è™¹ç“šç»¡å¤Œåºœé’ƒå‹®ç®¼éŸ«ç£‹æ¡“é–«æ„­æ§¬å¦žè·¨æ†™é‘çƒ˜æ¹²æ¦›æ»ƒåŽ–è¹‡çŠ³çŸ•é”œèŒ¶î”¢ç›é”‹åžé‘¶ä½ƒæ‚†"],["f6a1","ç’å‘­å½‡éšç‘°æ§¾æ¿žè·ºæ°¨éå©„ç¹é‘±æ°³å‰¢é‘·î…¡å®é–±å¤îŸ¼æ¦‰æ’ä¼Œæµ å‹«å¸¬éŽ¯ç»˜è„¯çžã‚„ç·¢éŠã‚…æ£¨å®„æ¬ç¯ƒéŽ­ãƒ¦î•¹å¨Œç»˜ç©­é”å‰§æ£“é¥å¯¸æ«‹ç»‹æ°±îŸ§ç»¶å›©åŠç¼ƒî†¿åš§é““â•„ç´²é—†å¤Î¤æ¦»æŽ‘å¢–é•å‘´ï¼ç‘•îƒç«·éŒæŽ“ç´—æ¸šé›î‡—é‹æ›ŸçŸ†å¨´å“¥æ‚°é®Ñ‡åšŒé–¸è‰°ç„ºç»‰ã‚‡Å«è¹‡î‚¡ç²¬éœã‚…æ–æ¾§î†¼Î•éŽ¯ç‰ˆå¢¦éŽ·æ ¨æ¹ºå¦¤æ›¡åŸ–é—„â‚¬æ££éî¢éŠî„€å´œéŸå‹«æ¾•é“·ä½¹å¢­é“·å‚›æ‘™é…î‚£ç…—å©µä½¹åˆŠéžãˆ¢æƒ›ç‘·ï¿½"],["f7a1","é–»ç¨¿æ†«é¢å——æ½¶è¤°å Ÿå•”å§åº£ä»’éî… ç—˜ç‘¾æ›žã‚ªé‘´î‚£å¸°éªå £â‚¬å€Ÿå‹ƒæ¿‰æ—€æƒŒå§’è¯²ç•·ç”¯æˆžæ±žé“·å†­æš•éå±½å½´æ¾¶î…â‚¬çŠ³åŽ å¨ˆå—˜å‘å¨‰æ‰®ç‘¸é‘³åº¤å«ˆç’ºå—›å˜æ£°æ†‹â–ŒéŽ¿å›¨å…¢éŽ¾æˆžæ”§éåº¡æ‚™é¦ç†»â—£éŽ±ç†¸ã€Šé“·å‘¯æ£ç»›æŽ”å½“é–«æ°¬çˆ¢å¦²å²ƒå™ç‘œîˆâ‚¬â‚¬é—‹ç‘°ä¼•æ¿‚æ¥€ÎœéŽ¶æ›¢â‚¬å¿›îƒ…éŽ±æ¿ˆå£’é—‚æ §æ½¯æ¿ å——åéŽ¶å©ƒæŒ±éŽ¿çƒ˜æ¾å¨‰ãˆ¡æ·³é–î„‚æƒ—é®å¯¸æ¤’é‘ºî…¡çª™é—‹æ¥€åž½é§å‚›æ¾˜é—å ¢æ‘šç’¨â•„ç›é–³ï¿½"],["f8a1","é—ƒî„å“é™î…Ÿå´’æµ£â•æ”§éŽ®æ ¨æ™½å¨Œæ¶™æ‚¼é—å²€å«¿ç»‹æ¥„î›¬ç’¨æ¿†æ±Ÿå©¢åº£å…é‘¶ã„¦å‰®æ¸šåž®äº¸éŽµä½ºå¢–ç»¡å›©æ³•ç¼ˆâ•…äº¶é—‰î…¢îž¿ç’¨è·ºæ½½éªžè™«ç é’€å¶ˆîŸ³éšçŠ²ç‘¬éªžï½…è™Žå¯®å©ƒæ»é‘²é¸¿æ–€é—å¤æ«…æµ£å å¯˜é–å¶…å¯©éœå——æ‘µé¦å†¨ç«·éŽ¬æ ¨å§éŽ¶è¾¨å´Ÿé“·å—˜åœºå¨´ï¸¾æŸ‹é®èŒ¶å„ªé‘´îˆå«—é’Â¤æŒ·çšå¶ˆî˜·é–«å¬®å«ªæ¤‹ä»‹ç•±éªžå‘®æ¯šé‡æ¿ˆâ‚¬æˆ åžŽé“·å›¦åº·é“è—‰å§œéŽ±æ’´æ½›å¦¯æ¬ç´“é¡ãˆ¢ã‚¨ç›ã„¨æƒ«æ¤‹å›¬î—‰æ¤¹ï¿½"],["f9a1","éä½ºîŸ…å¦¤æ’¹î´ç’žå©‡â…·æ££î†¼éƒŠéŽ¶î‚¤æŸŒé¨î†¿î¦é–¬å—æªªé–ç‘°æŠ€è¹‡å‘®ç¡¨éå²€æšé¤å¬¬ç“Žé‘»é¹ƒîœ‚æ¶”å¿›â‚¬é—´ç¬…æµ£æ›žå¸µæ¾¶å¿“ç²“é„ç‰ˆæ¸¤éŸæ›¡åµŽé“¦ï¹ç¡›é–¬æ„°æ¹ æ¦˜æ›žî—–ç€›æ­Œæªºç’Žæ—ˆæ´žç€µæŽ“ä»ºéŽ®å¶†æ£»å§¹æ¥é¥¥å©¢ï½‡â‚¬æ°±ç¶ç¼ˆä¼´æž’é—æŽ—æªºé—Šæ’³å£Šæžå‹«åš±éšî‚¢æ€éŸï½…æžˆå¦¾ç»˜å…œç»¶æ¨¿å¢»é–µæ»ˆæ«¡æ¥£ç‘°æ‚Žéå ¢æ´…é“”ã‚‰æž»é—‚æ—ˆæ«†æµœî­ç´šæ¿®î†¼î£å®¸é”‹äº½éŽ¶æ¥æ¾€å¦—ä½¹çŸ„å¨“îˆœå‡ é‘²æ¶œåŸ…"],["faa1","é“·å ¬â–”é—‹å‘¬äº¥é‹æ›žæŒ¸é¨æ’³îšŸç€›â•î†ŠéŽ³å Ÿã‚·å¨´é£Žâ‚¬ï½ˆç…¿ç‘™ï½ˆâ”Žç’œÑ‡å€æ¤î…¢î€—é”ç‚¬ç‰³éŠæ §åž¢é‰å¿šå´Œç›å±¼éŸ©éšæˆæ¯Šéï¹‚å‰·é—Šå—î˜®æ¥—æ¥…î›¾é£æ’³î–„é“æ¶œÅ«éŽ²å‰î³é›æ˜ç²§å§å›¬æ¯†æ¤¹æ¥€îššé–â‚¬ç’§î‚¦æ½»æ·‡æ–¿ç‚’å¯®ï¸½åš«é…æ¶™å€¡éî‚¤å·¹éœåœ­å¾“éªâ•ƒæ½”ç»²å†ªè€½ç»ºï½ˆåŸ›ç›æŽžâ–•ç’©ãˆ¤å¢˜æ¤¤îˆšç“šç»Œç£‹î”…é—‹ä½¸çœæ·‡çŠ²å´æ¾¶æƒ§è¾°éŽ¸ç‚¬å€’é™ç¡…å‰ é‘´å›ªå¸°é–¶å¿›ç‰¥æµœã„¥åŽ”é’æˆç€·"],["fba1","è¤°ãˆ¡ç¡žå©Šåº£â‚¬å‘¯äº¹éîˆœå•‹éâ•ƒæ‡‡é‘½å©…ç‘ç›ï¿ â‚¬å ¥å„é–¹ï½‰Î˜éî†¼ç¶éŽ¯çŠ³åŽé†å® æš€éŸ«å©‡å•¹é—‰å¬©ç®®æµœæŽ‘æ‡ æ¾¹æ›žï¼šæ¿‚è—‰é©³å¯®Ñ„åŸ—éŽµå Ÿæ§‰é…Ñ„î‡ å¨´â•‚çª‚å©€æ ¨æ¡“å©¢æ—€ç¹å©µâ•ƒä»¢é™æ„®æƒ€éŸæ°±æ‘–é¨æ’¶îš¡ç»¯å©„ç¬§é‘³Â¤å§¦é’î‚¥æ’é“åº¤æ«‰é“¦ç£‹î„°ç’žîˆå¹€é—‹â‚¬æ¤¤ãƒ¦å„œéŽ´æ ­å¿æ¿ æ°­æ§’å¨£é”‹å¦‡éžå—ç“Šè¹‡èŠ¥å„¦ç»—å¿“æ«å¯®æ¨»ç˜å¨‰æ’´æ¤½é‘æ¨¼ç£ªé“ç¡…â–½æ¦‡è¯²å¯²éœå±½ç‘“å¦¯è™¹ä¼€é£ï¿½"],["fca1","ç»‚å¶‡îžŠé‘ºè¾«å½²ç‘­è¾«ç“‰ç’¨ã„©æ¾Šé“·å¬«æ‘¯é€î‚¤â’‘çº°è¤â”‡æ¶“ç¨¿æž¤æ¿‚æ„¬î…½éªžç»˜å…éŽ»æ¶™î„šé…ãƒ¦î”˜å¨“æ¬‘å†é æ‰®ç£®é–­å‹¯â”…æ¦˜ãƒ¦æ¤¿å©Šæˆ å°µç’žä¾€æ£…é‘æ¿ç®¤å¯°ã„¦äº¶éŽ¯èˆµåŠ™éŽ±å±¾æª­é…å‹¬Î•å¨‰ä½¹ç¯ƒå©Šå¤‹èˆ°é“å²€æŒé¨å›©ç˜‰ç»¨Ñ†å´šé“¦æ¥…äº¼é—…å¶‰ç²Œé–îˆšæ´–å¯¤è¯²ç·¤éŽ­ãˆ¡å€²éŽ³é”‹æ«éˆå†©çªå¨£î†½äº•éæ‰®å´»ç»»î‡å–šé‘¼ç£‹æ´ˆç‘¾ã„¨ç¡ é”å†ªåµ…ç€¹æ ¨â”‡é–»å‹«æ‘¦é¤å——ç“­éå Ÿæž€é‡å¤‹î–„å¨‘å¶†ç©¯"],["fda1","é–æ˜åžé–°ç”¸îŸ«æ¸šîˆšâ‚¬æ¬å¸¤éšåº¡æƒ£é å¤Šæ¢¾ç”¯åž®ç·¦éˆç•Œå‡éæ¿‹â‚¬å‘­å«‘é•å†²Â·æ¾¹åº£å‰Ÿé”å¿•åš®é’–æ‹Œã€’é†å £æž¿é Ñ„æ®‘é“å©…æƒé—å¤Šæž¡å§£ä½¸ç¶‘å¯°èŠ¥å½¯é†å¤ŒåŽ™ç’œè¾«ç´³æ¥¹å¥ç´¤éŽ¼è™¹å„–é£ï¹æ«‘éŽ­ã‚ˆç“—æ¦‰ç¨¿åŽ™é‘è·ºå¯›å¨²æƒ°å…æ¦›æˆžæ§™å¨†ï½‡å€¶é¥æ›žæ‚†çžåœ­ç£­ç‘·æ ¨ç‘ºå¨†èŠ¥ç“Žéšå‘Šä¼†å¨²ç•Œç¹’é‘¸å å„¢é‘ç‚²æž©é£î‚¢æ³¹æ¿®î„€ç‘ç”¯å±¾å•“éŽ²æ¨»åŸé…ç‚´æ´£é”æ¬‘å–’é”è™¹å§§ç»‚Ñ…â–ˆç¼‡èŒ¶â”Œ"]]

            /***/ }),
        /* 104 */
        /***/ (function(module, exports) {

            module.exports = [["0","\u0000",127],["a140","éŠ†â‚¬é”›å±»â‚¬ä½µâ‚¬å‚¦ç´Ÿéˆ¥Ñç´±é”›æ°¾ç´µé”›ä¾Šèµ´éˆ¥ï¸¹â‚¬ãƒ¯ç®°é”•æˆ¯ç®³è·¯é”•æ—“ç®·é”•æ µç®ºé”æº¾â‚¬æ“„å‰¯éˆ¥æ—“èµ‹éˆºè¾¾å¤é”•å¿¥ç´™é”›å¤›å‚…é””è®¹ç¶“é”æ¿“é˜œé””æžâ‚¬æ–»â‚¬æ›ªè…¹é””æ’â‚¬æ„©â‚¬æˆ¯å¯Œé””ç¬ºâ‚¬å¨¿â‚¬å¬¶é™„é””ä¿±â‚¬å ›â‚¬å¤›ç¼šé”•â‚¬éŠ†å±»â‚¬å¶ç®’é”•å‚˜â‚¬åº›â‚¬å¿¥ç®–é”•å‹¶ç®¼é”•ï¿½"],["a1a1","é”•æ¶³ç®¿é”•æ¿“ç¯‚éˆ¥æ¨·â‚¬æ¬Œâ‚¬æº¾â‚¬æ¿„â‚¬æ¿„â‚¬ç‚©â‚¬ç¢˜â‚¬è¯§ç´”é”›å—­ç´›éˆ¥å®¦Ñâ‚¬å†£æ£†éˆ¼å¿ŠæŸéˆ»æµ‹æ£Šéˆ½å—æ§„éˆ¼å›£æ¢¿éˆ»â™€æž²éˆ»è§£æŸ¤éŠ‘ï½‚å‰ ç‚‰é”Ÿï½ä¼Žè—£é”•å¤›ç® é”•å¶ç®®é”•å¬¶ç®¤é”•ç‡‚ç¯„é”•â˜…ç´œé”›åµœæ¤•ä»¿æ‰åž°é”›æ»ç´´é”›æ¿ƒå¢»éˆ®Ñ€å¢µéˆ­ç‚©å¢¥éˆ®â˜…è€¿",4,"é”ç‚©åŸ„éˆ­îå§¤éˆ­çŠ«åž·éˆ¯è£¤å½ƒéŠ–æˆ”åŸ†éˆ­î†¹åŸ–éˆ­ç²¹æª§éˆ¾å‚—å§‡éˆ¯æ¬Œå•ˆéˆ«æ’¯å•‡éˆ«æŽ†å•éˆ«æ¤»å•“éˆ«æ¨·åž¾éˆ­ï½ç´¡"],["a240","é”›å°–åž¥é”•îŸ’ç´•é”Ÿãƒ£â‚¬æŽžç¹é”Ÿâ˜…ç´–é”›çŠ«å‰éˆ©å¤›ä¾›é”•îŽå…¬éŠ–æ›˜å¸¨éŠ•æ¿„å¸ªéŠ–åº›å¸¯éŠ•åº›å¸éŠ–åŠ¼æ¿åŽµéæ¶˜åŽ¼éæ¿†å€éï½…æ£«é¡â•ƒç¡¯éˆ»ï¿½",7,"éˆ»å¿ŠæžŽéˆ»å¶æžŒéˆ»å¬§æžˆéˆ»å¤†æ•¿éˆ¹ç²¹æ•©éˆ¹ã‚‚æ•Žéˆ»æ–ºæ”¢éˆ¹å‚—æž™éˆ¹å±¸æ”¼éˆ¹æ–ºæ•‡éˆºï¿½"],["a2a1","éˆºî†¹æšŸéˆºîˆ—æ™²éˆºç‚©æš˜éˆºâ™€æ£¦éˆ¼ï½‚æ£©éˆ¼ã‚‚æš éˆºæµ‹æš¢é”›ï¿½",9,"éˆªï¿½",9,"éŠ†ï¿½",8,"é—ä½¸å´‰é—å’ƒè‚Œ",25,"é”ï¿½",21],["a340","é”æ¥‹ç¶é”æ¬™ç¶’èž’",16,"å±",6,"ä¼ª",16,"èŸ½",6,"éŠŠï¿½",10],["a3a1","éŠŠï¿½",25,"è—±è—Ÿè— è—è—¡"],["a3e1","éˆ§ï¿½"],["a440","æ¶“â‚¬æ¶”æ¬Žç«µæ¶“å†§ç®–æ¶”æ¿…ç°¡æµœå±¼æ±‰éŽåž®å†éî‚¢åš‘é’â‚¬é’ä½¸å§é–æ›žå´„é—æ»ƒå¼µæ¶“å¤‰ç¬…æ¶“å œç¬‚æ¶“î‚¡çˆ¶é‘â€²ç®™æ¶”å œç¯ƒæ¶”ç‚°ç°¬æµœâ€³åŽé’å†¨å«¼é—å†¨å¼¶é™ï½…æ¹¡æ¾¹î‚¢î˜ºæ¾¶Ñƒã‚³ç€›æ„¬ç“šç€›æ’³î‡­çå¿“é˜¿çç¨¿åŒ—å®¸æ¿†ä¼å®¸åžå‡¡å®¸å†²è‚ªéªžæ’ç—ªå¯®å¬ªç´¦éŽµï¿½"],["a4a1","æ¶“æˆœç¬Žæ¶“å¶„è…‘æ¶“é¢è…¹æ¶”å¬ªè‚®æµœå œç°¯æµœæ›šç°°æµœæ–¾å­©æµ ä½·ç²ˆæµ å†§ç²æµ å›¦ç²›æµ å©ç²™æµ å‹«åŽ“éä½¸åŽéî…žåœéî„€å•‘é‘è·ºåžŽé’å›§åžé•è¯²å¬€é•åž®å¯²é–ç‘°å´é—å›§å´Šé—ç‚²å·¹é™å¬ªå¼·é™å¶…ï¼Œæ¾¶â•ã‹æ¾¶î„ãç€›æ–¿çš¯çã‚…æ˜‚çžîˆšåéªžè¯²è±¢å¯®æ–¿ç´©è¹‡å†©åžéŽ´èˆµå¢œéŽµåº¢æ•®é‚å›¨æžŸé‚ã‚†æŸŸéƒãƒ¦æ´¶éˆå Ÿæ¹ªå¨†çŠ³î„›å§è§„ç˜šå§£æ—€ç˜ºå§˜å¿”æŒ‰éî‚¤åŸ…é–å‰åŸ¢é—å›©å¢®é—æ¶šå§®éœå¬©ç¬"],["a540","æ¶“æ ¦ç¬—æ¶“æ–¾ç¬œæ¶“è®³ç®¥æ¶”å¿Žç®®æµ ãƒ¤ç²¯æµ æ–¾ç²«æµ æ ¦ç²­æµ ï½„æŠ¤æµ æ¬Žç²¸éå‘­åŽ”éå¤Šå”ºéî„€åš¬é‘å“„åš«é’å©‚å§žé”ç†·å¯˜é–å——å¯³é–æ¿…ç²ºé—å©‚å´é—â€³å´°é—îˆšåµé˜è¯²å½²é™ã‚…å½¸é™î„€å½¯é™â•å½£é™ç…Žå¾ƒé™é›å½¨é™ï¹€å½§é™æ’å½µé™æ¿å½žé™î…žå¾Žé¥æ¶˜æ´‘æ¾¶ï¿½"],["a5a1","æ¾¶î†¼ã‘æ¿‚æ‘ã‚¶ç€›æ›žç• çç…Žæ³•å®¸Ñƒä¹ç”¯å‚šç«·éªžå†²è¾œå¯®ä½¸ç´­å¯®æ¥€ç¹€éŽ´å©ƒå¢¦éŽµæ—€å¢¥éŽµæˆžæž¼éƒï¸½æ¹²éˆî„æ¹­éˆî‚£æ¹±å§ï½†ç˜å§˜æˆžçš­å§˜å‘Šçœ®å§¹â‚¬å§˜å‰§å§±éœå‹­å¸€é¡æ»…æ‘é¢æ¨¼æ•“é¢ã„§æ•¥é¢æ‰®æ•±é¢èŒ¬æ•µé¤å¬¬æ«§é¨î†¾æ¯§é©î†¾ç…•é­ãˆ¢ç…¶ç»€è™¹îžŠç»Œå¯¸ç›æ¶“ç‚°ç¬©æ¶”æŽç®µæ¶”â•€ç°·æµœã‚„å®³æµœãƒ¤è±¢æµ¼å¤‰ç´®æµ¼å©ç´©æµ¼å¶„ç´£æµ¼æˆœç´¡æµ è¹­æ¬¢æµ è®³è¯æµ å……å”¤æµ¼ä½·ç´œéå¤ŠåŽ™éå——åŽ›éï¿½"],["a640","éåžå•€éæ¿åžªé’æˆåžé’åº¡åž¨é”ï½…å¯›é–â€³å°ƒé—æ¿åµ„éšå¤Šæ‚˜éšå±½æ‚éšæ„¬æ‚‚éšå¬ªæ‚‡éšæˆæ‚•éšå æ‚†éšåº¡æ‚ŠéšæŽ‘æ´œé¥ç‚²æ´•é¦å†²æ¹´é¦ã„¥æ¹±é¦î„€æ¹³é¦â•î˜¾æ¾¶æ°¬ã—æ¾¶ç¨¿î›©æ¿‚ç¨¿î›¨æ¿‚è—‰ã‚¹æ¿¡å‚šî›¦ç€›æ¥€ç“¨ç€¹å›§ç•§ç€¹å‘­ç•¨ç€µå“„çš·çžç‘°çªžç”¯å——è‹Ÿéªžï¿½"],["a6a1","å¯®å¿“ç´±è¹‡æ¬ç¹“éŽ´åº¢åž–éŽ´å¶†åžšéŽµï½†å¢°éŽµæ¨»æ•¹éƒâ•‚æ£¬éƒî„æ£´é‡å‰æ´ºéˆå¤‹æº„éˆå­˜æ¹µéˆåž«î‚¼å§ã‚†î„´å§˜æ ¨ç—å§¹æ¥ç“å§¹ç†¸çœå§¹æ„­çå§¹â„ƒç•å§¹å¶†ç…éæ‰®å¢´é—æ¿ˆæ«¨ç»”åœ­èƒŒç»¯å“¥çº§ç¼‡å©„çª˜é‘°ä½½â‚¬å†­â‚¬å²ƒâ‚¬æŽ•â‚¬å® ä¼©é‘²å¤Žå€ é‘²å²ƒåš•é‘·î‡åš¦é‘·è‰°åž–é‘¸æ¶œåž·é‘¹î†¿å£Šé‘¹ææ«•ç›â‚¬ç›å²ƒã€‚ç‘—å—æ§¨æ¶“è¹­é…£æµ£å¶„ç¶‡æµ£å›¦ç¶æµ£ç‚°å³æµ£æ¶—ç¶æµ¼é¢ç¶ˆæµ£æˆœå†€æµ¼è½°å‡ æµ£å†§ç¶Œæµ¼é—´çµ¾æµ£ï¿½"],["a740","æµ£æ»€ç¶˜æµ¼îˆ™ç¶†æµ¼æœµç¶‘æµ£æ¿…ç¶€æµ£æ°¬åŽ¡éå¬ªåŽ¤éé›å–éå³°åž¾é’ã‚…åŸ„é’î„åŸé”î‚¢å§ªé”î„å§®é–ï½…åµ†é—é›æ‚µéšî…žæ‚¶éšæƒ§æƒé›åº¡æƒ‚é›å——æ†™éšå†²æ†Ÿé›å‚šæ‚°éšâ•æ†¡éšç‘°æƒ¢éšç¨¿æƒéšé›æƒ—éšçŠ²æƒ£é›â‚¬éšåžæƒˆéšç†·æƒ‰é¥î„æ´¶é¥ã‚…æ´¬é§å©‚æ½™é§â‚¬é§ï¿½"],["a7a1","é§å›§æ½•é¦æƒ§æ½—é§å¿“æºæ¾¹îˆšãžæ¿¡æ¿†î›·æ¿¡ã„¥îœƒæ¿¡ï½…î›¾æ¿¡æ §î›²æ¿¡ã‚…î›¸æ¿¡å©‚Î•ç€›æ¿†ç“¬ç€›æ°¬ç“«ç€¹å±½ç•«ç€¹å¿“è‰¾çžâ‚¬çžä½¸ç¿±çæƒ§çŸå®€æˆçŸ“å®€å±½å¸†ç”¯å±½ç°­æ´å›§ç°¥å¯¤å³°ç´•å¯®ç†·é¥¯è¤°ãˆ æ¤’è¤°ç‘°ç¹•è¹‡å±½ç¹”è¹‡å¶…å‹˜è¹‡î‚¢æ‰›è¹‡î…åžéŽ´æˆžå¦±éŽ¶æ¥å§ˆéŽ¶â‚¬éŽµèˆµå¦·éŽµî…Ÿå¦¸éŽµå…¼å£˜éŽµè§„å£‹éŽ¶æŽ“å£‡éŽ¶æ¨»å£†éŽ¶æ›Ÿå§„éŽ¶æˆžå¦´é€è§„æ•¾é€å‘Šæ£»é‡å­˜æ½«é‰åº¢æ½–é‰æ„­æ½™é‰æ»„æ½ é‰ç‚´æ½é‰å—˜æ½¬"],["a840","é‰æ’´æ½¡å§ãƒ¦ç˜¡å§¹å‚›ç˜å¨Œæ¬çž¾å¨Œå ŸçŸ‡å¨Œå‘®çŸå§¹î…ç„™å¨Œæ„­å‘å¨Œå±¾æŠ¥å¨Œæ ¨çŸ‘å§¹èŠ¥çŸå§¹å‰æœ¬å§¹å­˜çŸ„å§¹èˆµçŸ‹å¨Œæ—€çŸ˜å¨Œå‚œä¼“éè‚©ä¼£éå“¥å¢·é—ï¼„å¢µé™å‹­åª¯éœæ «æ•©é¢î‚¤æ•ºé¢å“¥æ®é©îˆœç…Ÿç»‰ä½ºî…ç»‚è·¨â”’ç»¯è¤ç¶é‘²æ ¬å€±é‘²æ¿Šå€¶é‘²æ¶œå€¸é‘²èŒ¶å£‡é‘ºï¿½"],["a8a1","é‘ºå¬­å¦½ç‘•å¬­î—ç‘·â‚¬ç’‹ç–¯çœ´ç’žæ›¡çŸŸç’§ã‚ˆè›‹ç“’å® éŸ©æŒå©…ç·µæˆæ‹Œç¸½æ©å—šç¹€æ©å‹«è´°é–­æˆ¦å„é–­îˆåŠé–­ï½‰åŽœé–²å—›å™·é—ƒæŸ¥æ§·é—ƒéæ§³é—ƒîƒ¿ç”«æ¶”æ ¦é’©æµœå¬©ç°ºæµœç‚°éŸ©æµœîƒ¿è’‹æ¸šæ¿…ç·§æµ£å……å¨‡æµ£îƒ¿ç·µæ¸šå¬©ç· æ¸šå†§æ¡¨æµ£å…¸ç·¢æµ£â•€äº¤æ¸šæ ¦éª„æ¸šå¿Žç·«æµ£å“„åŽ°éæŽ‘åŽ±éâ•å¿éè·ºå€éè—‰åš±é’è¯²åŸœé’å³°åŸ¡é’æ¿åŸ‰é’è·ºå¢Žé”æƒ§å¨€é—æŽ‘å´é—æ’³å´™é—ï¹€åµŽé—ç¨¿åµé™æ §å½…é™æ¥€æ‡—é›ï¿½"],["a940","éœæ §æ‡œéœæ›žæ‹ƒé›è¯²æ‡›éœå‹«æ‹»éœå——æ‡ éœæ„¬æ‡•é›è·ºæ‹°éœæ°¬æ†¿é›ã„¥æ‹«é›è—‰æ‹µé¥å“„ç€®é§å³°æ½½é§â•æ½¯é§ï¹€æ½³é§ç…Žî™æ¿‚å¤ŠîšŒæ¿‚å îš‰æ¿‚æ–¿îžŠæ¿¡è¯²î™æ¿¡ç‘°Îžæ¿®æˆî‹æ¿®æ„¬î’æ¿®å¬ªî˜æ¿®å©‚ÎŸæ¿¡å†²î—æ¿®å‘­ç“±ç€›ã‚…î„œç€¹æ¥€ç•¾ç€¹æ¨ºç–ç€¹æ¬ç–€çæ°¬çœ»çžï¿½"],["a9a1","çžå——åœå®€â€³å“ºå®€â•æå®€åžæ¸¤ç”¯æ¨ºç¬Ÿç”¯æ §ç¬—ç”¯æ¶˜ç¬éªžç¨¿ç°¹æ´æ¥€ç°»æ´æ›žç°´å¯¤è·ºé¸¡å¯®Ñƒç¼‰å¯°â‚¬å¯°ä½¸å¨‡è¤°ç…Žç¹šè¹‡çŠ²æ‹·è¹‡é›é éŽ¬å¿”â‚¬æ—€â‚¬îˆ›â‚¬åž«â‚¬æ ¨â‚¬î…â‚¬æ›Ÿâ‚¬â„ƒâ‚¬Ñ„â‚¬â•‚â‚¬î‚£â‚¬æ¶™åž¨éŽ´æ›ŸåŸ§éŽ´ç‚¬å¢éŽµæŒŽåªºéŽ·å±¾åª±éŽ¶æŒŽåª¯éŽ¶è§„å«†éŽ·æ¶™å§­éŽ·æ’´å«ˆéŽ·å¬«åª¹éŽ¶ã„¦å¨ŠéŽ¶å…¼å«„éŽ·æ¬åª·éŽ·å¶†å§·éŽ·æ°­å§³éŽ·æ¨»å«‹éŽ·æ¥åª¶éŽ¶î„å«€é€ç‚¬æž¾é‚å…¼æ¤‡é„æ—€æ§—é„å±¾æ§…é„å‚›æ§‘é„â‚¬é„å¿”æ§™é„ï¿½"],["aa40","é„å›¨æ¹‡éˆå¬«æ¾€é‹å¬«ç‚é‰è¾¨ç‰é‰è™«æ¾é‹å›¨çŠé‹æ¥æ¾‚é‰ç‰ˆæ¾˜é‹å¤‹æ¾—é‹æ„­æ¾‹é‹æ°­ç€é‰å…¼æ½½é‰å‰î‚¾å§ï¸½î„ å§æŒŽçš³å§˜æ¶™å¸¸å¨‰ã„¦åµå¨Œè¾¨ç¡¨å¨‰ãƒ¦æ¸¤å¨ŒèŠ¥ç°¿å¨Œå…¼å°å¨Œî‚£ç¡¶å¨‰æ’´å“ºå¨‰å‹¬è¡¥å¨‰ä½¹ä¼¯å¨‰æ¥ç¡¡å¨‰è¾¨éƒ¨å¨Œç»˜åœºå¨‰æ¶™ç¡¦å¨Œî„æœå¨‰æ»„ç¡¸å¨‰ï¿½"],["aaa1","éæ› å€¤éæŽ”å€žéæ¬‘åŸ‡é–î… åŸœé—å ¢å¢½é—â•ƒåª­é™åº£å«é™æ¥ƒå«„éœâ•ƒå¸¹éœç†ºå¸¿éœãƒ§æ–€é¤æ¿ˆæž¡é¤æ°±æ®‘é©å‚œæ´¸é©å¯¸ç…¡é­ç•Œãžç»â‚¬ç»ä½ºîŽç»‰å ¢â”–ç»Œåœ­î·ç»¯å‰§ç¶Œç¼‡å²€ç·¥é‘°å‘°å¤é‘²ãƒ¨å„é‘²è¾«å‚é‘²î‚¥åé‘²ç£‹å‘é‘²îˆåš—é‘·æåž—é‘ºå® å§–é‘ºæ¬’å§¯é‘ºå€Ÿå§›é‘ºç¡…å§³é‘ºî„ƒå§¤é‘ºîˆå§¼é‘ºï½ˆå§²é‘ºæå§ºé“åº¤æ«›é’æ¿Šã€ƒæŒå¬­ç¹‹æ©æ—‡ç¹Žé–­ç”¸å¢é–­éå é–²å›¬å™¾é—€çƒ½æ¸é—ƒæ»ˆæª§é—ƒå—æ¨†é—„ï¿½"],["ab40","é—„å‚žæ¯ é—†ã„©æ½šé—ˆç‚°ç°¾æµœî…å¯’æ·‡â€²é•œæ¸šîˆ™ç©¶æ·‡çŠ±ç¹Žæ·‡å¿Žç¹šæ·‡å†§å¾„æ·‡æ¨¹ç¹œæ·‡å©ç¹”æ¸šî†»ç¹æ·‡å‹ªç¸½æ·‡æ°«ç¹‹æ·‡ç‚°ç—‰éæ¥€å•‹éæˆå•é“åº¡å¢é“å©‚å¢ é“å±½å¢œé“å›§åª·é•å¤Šåª°é•ä½¸å¯¦é—æ¥€åµ’é˜æ°¬å½Œéœî„€æ¥éœã„¥æ¸éå¤Šæ€éœï¹€æŒ¸éå›§æ¨éœè—‰æŒ­éï¿½"],["aba1","éå‹«æ±éœîˆšæŒ®éœåžæ‡éœâ•æŒ§éœåž®æµ›é¨å‚šç€·é¨çŠ²ç’é¨ãˆ ç…„é¨î†¼ç€æ¿‚æ›žîš–æ¿‚å¿“îš“æ¿‚æ„¬î¡æ¿®æ¨ºÐ­æ¿®ï½…Ð–æ¿žå†¨Ð”æ¿®î„îŸæ¿®ï¹€â–‰æ¿®è¯²î„¢ç€¹ï½…î…½ç€¹ã‚…î…¹ç€¹ãƒ¥çšçžåº¡ç†çžå¶…çœ¿å®„æ¬ç¡³å®¸å³°ç¬£ç”¯ãƒ¥ç¬©éªžè—‰ç±‚æ´ï¹€ç¼“å¯®å è¾‘è¤°ãƒ¥ç·¢å¯°å‘­ç·¤å¯°å¬ªç·¡å¯°å±½ç·£éŽ¬æŽ“â‚¬æ¿‡â‚¬çŠ³â‚¬ãƒ¦â‚¬åº¢â‚¬ã„¦äº¶éŽ­ç‰ˆä»ºéŽ­ãˆ¡äºžéŽ­å†©ä¼‚éŽ­î‚£ä»¾éŽ­ã‚†å¢ŽéŽ·æ»„å¯²éŽ¸å¤‹å«¾éŽ·î…Ÿå¯”éŽ·î†½å«¿éŽ¸å›¨å«³éŽ·ï¿½"],["ac40","éŽ·îˆ›å«­éŽ·ç‚¬å«¶éŽ¸æˆžå¯•é€æŒŽæ™ é‚î‚£æŸ¦éƒãˆ¡æ§¬é„î…Ÿæ§§é„Ñ„æ§¸é„ç†¸æ§°é„è¾¨æ§«é‡é”‹ç††éŒæ’´ç…´éŒæ—€ç…‡éŒî„ç¦é‹îˆ›ç…¹éŒâ•‚ç…°éŒå‹¬ç…ˆé‹å­˜ç…”éŒãƒ¦ç¨éŒå¿”ç…˜éŒè™«ç éŒæ¬ç…éŒæ¿‡ç…‰å§î…ç• å¨ˆå—˜î†Œå§£æŽ“ç˜²å§˜ç†¸ç¡¥å¨²å¬«åºŠå¨²î…ç¥¦å¨²ãƒ¦ç£³å¨²è¾¨ç¤Šå¨²ï¿½"],["aca1","å¨²ç»˜å”‡å¨²ç‚¬ç‚Šå¨²æ¶™è½¦å¨²è§„æ£å¨²å‘Šç©¿å¨²î†½å¹å¨²åº¢ä¼ éî‚¤å¤éå´‡å“éîˆœå”éå“¥å–éã‚‡åŸŒé—èŒ¬å£‡é—å¯¸å«¨é™çŠµå«›éœé£Žå¼·éœè¤å¹‰éå¶‡å¼¨éœå´‡æ•‹é¢î… æ™±é£å²€æ™­é£å¬¬æŸ…é¤ã‚‡æž¼é¤ãˆ¢æžºé§å“¥æ®•é¨å›©æ®˜é©å ¢æ³¦é©å†ªæ³¤éªä½ºæµŒé©å“¥æ¹éªå¬¬æµ˜é©è‚©æ¸¿é­æ»…çˆžé®æ—‚çˆ©é®å¶‡îš‹ç»å¤Œîšç»å›©îž…ç»‚è™¹î–ç»‰æŽ”îç»Œè·¨çŠç»”è·¨îºç»«ç•Œç£¦ç»±å‘¯ç£¤ç»±å¤Œç£­ç»±å‹­ç£«ç¼‚å“¥ç·¨ç¼‡èƒ¯â‚¬ï¿½"],["ad40","é‘°æ„¯â‚¬å¶ˆâ‚¬æˆ£â‚¬æƒ°å„¢é‘³ãƒ¨å„¦é‘³å†­å„Žé‘³å²ƒå„­é‘³æ¶œå„™é‘³ç‚¶å„°é‘³æ¿Šåš§é‘¸ãˆ£å«¥é‘¼å†­å¯˜é‘»ï½ˆå«‘é‘»ï¹å¯—é‘»ãƒ¨å¯•é‘¼å¤Žå«†é‘»æ¥„å«³é‘¼ä½½å«“é‘»æ—‡å«…é‘»ç‚¶å«‡é‘»ç†»å«°é‘¼å—šæªºé“ç¡…æ«¥é“é¸¿î”’ç›î‚¥î›¦ç‘™æ—‡â–“ç‘·å‚â–‹ç’¨ç‚¶çŸ¤ç’§ç£‹å…šç“’ç£‹ç²›æŒå²ƒå ªæ©ï¹ç«£æ©î‡éª"],["ada1","æ©î…¡æ©æ©ã‚ˆå¡é–®å©‡å„™é–®ä¾€å„é–°å¬®åŽžé–²å¶‰æºé—„æ„°æªµé—„å²„æª·é—ˆãˆ¤æ½»é—Šå¬®ç…­é—ŠæŠ½çˆœæ£°ã„©î— æ¤‹ç†¼î›»æ££æ¬Žç®»æµœå†²â‚¬å±½â‚¬å¶…â‚¬ï½„åˆŠéŠï¹€â‚¬ãƒ¤æ‰›éŠâ•â‚¬æ §â‚¬å——â‚¬ç…Žâ‚¬ç†·â‚¬æ°¬â‚¬æŽ‘â‚¬æˆœäº¢éŠâ‚¬éŠæ–¿â‚¬ã„¤å‹˜éŠâ€³â‚¬å¬ªâ‚¬æ¬â‚¬æ¨¹ç æ·‡î†¼â‚¬î…žâ‚¬îƒçƒ¤éŠî‚¢â‚¬å¤Šå‹éã‚…å•£éãˆ å™¸é‘å±½å™¯é‘å¬ªå¢«é“æ»ƒå¢§é“æ¶˜å¢²é–î„åµ–é˜ç†·å¸©é™ç†·æ‘ éžæ„¬æ”£éžå³°æ‘·éãƒ¥æ‘¬éžå——æ‘µéžæ–¿æ‘¡éî…žæ‘—éžå¤Šæ‘¦éï¿½"],["ae40","éï¹€æ•¡éžå›§æ‘»éžå¿“æ¸»é¦å‹«ç„¸é©æ–¿ç…é©å†¨çˆ¥æ¾¶å¿“îšœæ¿‚æ¨ºîšŸæ¿žæˆîž¾æ¿žæ»ƒîŸ…æ¿žæ¶˜ã€’æ¿®î„€îŸ†æ¿žï½…Ä«æ¿žãƒ¥â–½æ¿žå¤Šî„¤çžæ¨ºî†‡ç€¹å†²î†ç€¹æ‘î†…ç€¹é›î†ç€¹ç¨¿çš çžæˆççžæ„¬æŠ„å®„è—‰éƒ´å®„î„æ•žå®„æ¿æ‰¯å®•ä½¸ç‚’å®¸î†¼è…‘ç”¯î‚¢éŸ©æ´î…žéª‡å¯®åžç·¬å¯°æˆç·ªéŽ­ï¿½"],["aea1","éŽ­ï½†ä»´éŽ­æ„­ä»ŒéŽ­î…Ÿä»¼éŽ­îˆ›å€“éŽ®ç†¸å€¸éŽ®å¶†å€²éŽ®å±¾å€•éŽ®æ ¨å¢–éŽ·è™«å¯›éŽ·æŒŽå´•éŽ¸ç‚¬å°ŸéŽ¹æ›Ÿå´…éŽ¹å—˜å´—éŽ¹å¤‹å°¯éŽ¹æ„­å°³éŽ¸î…å°—éŽ¸ã„¦å´“éŽ¹å±¾æ™¥éå¤‹æž¡éƒä½¹æ¢¾é…å‚›æª³é…å¿”æª­é…æŽ“æª¶é…å‘®æª¨é‡å‘Šæ¹éˆæ›Ÿæ¹•éâ„ƒç‰³å¦—å Ÿî”‹å¦—æ’´ç‰´å¦—å‚›î”™éâ•‚â’Šéæ¥î”‘å¦—æˆžç‰»éŒå­˜î”•å¦—â‚¬éå…¼î”ˆéî…î”Šéæ’´ç‰å¦—ä½¹ç•©å¨ˆå¤‹î†Žå§˜ï½†å“€å§˜ã„¦å”‰å§˜ã‚†å˜²å¨´î…ç¨Œå¨‘å Ÿç§¶å¨´ï¸½è¹ˆå¨´é”‹ç¦‰å¨‘ï¿½"],["af40","å¨´î„ç§¹å¨´î†½ç¦‹å¨´å­˜æ—¦å¨‘å±¾ç§ºå¨´è§„ç§´å¨´ãƒ¦ç¨Šé‘å©„å„¤é‘ã‚‡å„¥é‘å ¢å„šé–åœ­å£’é™è‚©å«»é™ç•Œå«ºé™é£Žå·»éî… æ‚éî†¾å½”éî†å½é£æ—‚æš†é£æ»…æšé£æ¬‘æŸ§é¥å‘¯æ£é¤èŒ¬æŸé¤ç•ŒæŸ¤é¤åœ­æ¢»é¤å“¥æ®é¨æ‰®æ³­é©å¶‡æ³¿éªâ•ƒæ¹¡éªçŠµæ¹ªé­â•ƒç‰¥é®Ñ…ç‰³é®æ¿ˆç‰¬é®ï¿½"],["afa1","é®ãƒ§ç‰ é®çŠµç‰Šé®èŒ¬îššç»æ„®îš¥ç»ç†ºîš›ç»ç‚µîš¢ç»æ¥ƒîšŸç»‰ã‚‡Ð’ç»‰Ñ…î¤ç»‰ï¸¾Ð—ç»‰æ¨¼çŽç»å ¢ç¯ç»—å—™ç‘§ç»®å¤Œç¡€ç»±æ¥ƒç£±ç»±å©„ç¤Œç»±ãˆ¢ç£¾ç»±æ„®ç£¿ç»±æ°±ç¤ˆç»±å¶‡ç¤„ç»±æ¶šå·±ç¼ƒç†ºç·®ç¼ˆå‘¯ç¸¼é‘°å—šâ‚¬æ¨¿â‚¬æ›¡â‚¬æ¬’â‚¬æ¥„â‚¬å€Ÿâ‚¬èƒ¯å„½é‘´å‚å„¼é‘´å‘°å„¹é‘³ç£‹å‰¢é‘³æ­Œå…‚é‘´å £å…˜é‘´å©…å…—é‘³îˆåšŸé‘·î„ƒåžé‘¸æ„¯åŸ…é‘¸î‚¥åŸé‘¸î„ƒå¨€é‘¼î‚¥å´šé‘½æ—‡å´é‘¼æ­Œå´˜é‘½å¤Žå°©é‘¼ç£‹å´—é‘¼èŒ¶å°®é‘¼æƒ°å¯³é‘½â‚¬é‘¼è¾«å°é‘½ï¿½"],["b040","é“æ—‡æ®œé““î‡æ®¦é““ã‚ˆæ¯„é““å²ƒæ®»é““æ»†â€œç›ç–¯î•¦çšå‚ã€—ç›ç¡…îž¾ç‘·æ„¯â—£ç‘·å²ƒã€žç‘·å©…îž½ç‘·æ’¹îž¼ç‘·å¿šâ˜‰ç’žå £ç„™ç’žç¡…ç—…ç’¨ãˆ£æ£éŸ¬î„ƒç²§æŒæ—‡ç²¡æˆéâ‚¬ä¾€â‚¬å—šç³ é–«â‚¬æ©é¸¿çœ‹é–«å†­æ‹·é–«å‘°æ‰›é–­æ›¢å„­é–®æ¿‹å„®é–°æŽ—åŽ¤é–°å²„åš‡é–²æ¿‹åš„é–²æ»ˆåšˆé—å†®æ«Œé—„ï½‰æ«‹"],["b0a1","é—„æ¶¢æ«‡é—„ã‚‰æ«‚é—„ç‚ºæ¯£æ¤‹ãˆ¤Îœæ¥ ã„©ç®æ¥ãƒ©îƒæ¥é—´å’•é‹å“„ä¼£é‹æ»ƒäº£é‹å†¨äº´é‹æ°¬äº¯é‹ãƒ¥ä¼“é‹åº¡ä»Œé‹é›ä¼Œé‹å³°äº¸éŠå¿“ä¼…é‹î…žåŽ¹éæ›žåš¢é“î„å£‡é•æŽ‘å«é•æ¨ºå«Šé–æ„¬å¯©é–æ¬å°¶é—â‚¬é–æƒ§å¼®é‡ç…Žæ™¢éŸî„æš’éŸå‹«æšˆéŸâ€³æ™éŸå©‚æ•±éŸæ §æ™±éŸæ›žæ•®éŸã‚…æ•»éžî†¼æš…éžî„€æšŽéžå†²æ™›éŸæ¥€æ¹€é¦å¬ªæ¹é©ç†·çˆ¡é«å©‚çˆ¢é©çŠ²ç… é©å“„çˆžé«é›ç…¼é©ç‘°î™…æ¿‚ãˆ Ç˜æ¿ ä½¸îŸ§æ¿ ï¹€â”†æ¿ â‚¬"],["b140","æ¿žç…ŽîŸ¿æ¿ æ°¬ï¹©æ¿ å©‚î„©ç€µå›§ç˜ç€µå‹«ç˜‹ç€¹åž®ç˜‘çå¤Šçš¥çå›§çœçžæ»ƒç—å®•å›§ç£«å®•åº¡ç¤‡å®•æ §å‚¨å®•æˆç©¿å®•æ–¿ç¤„å®•ã‚…æ£å®•æ¥€å‘ç”¯ç¨¿ä»˜ç”¯å†²é˜œæ´å³°ç„Šæ´è·ºæ—±æ´æƒ§å«‰å¯®å³°ç¶è¤°î„€åƒµè¤°î‚¢ç·±å¯°æ¬ç·¸å¯°æ¨ºå°½å¯°çŠ²ç·¶éŽ­æŒŽå…éŽ®å¤‹åéŽ®ã„¦å„–éŽ®å­˜å„²éŽ®ï¿½"],["b1a1","éŽ¯å‘®å¦éŽ®åž«å„¨éŽ®å…¼å„¤éŽ¯æ›Ÿå„éŽ¯ç†¸å¢éŽ¯æ°­å„‘éŽ´æ°­åž±éŽµå Ÿå¸¬éŽºÑ„åµ…éŽºæ ¨å¸°éŽºãƒ¦åµŽéŽ¹Ñ„å¸¢éŽºî…åµ„éŽºâ•‚å¸€éŽºå†©å¸¥éŽ¹î‚£å¸¹éŽºå‹¬å·¿éŽºæ¬å¸¯éŽºî„å¸“éŽºå¿”å·°éŽ¹ç»˜å´ºéŽ¹ã„¦åµ‘éæ¿‡æ™¼éæˆžæš€éæ¥€æš‰éå¿”æ™¿éæ›Ÿæ™¹é‚æ»„æž¦é‚î„æ£Œéƒå¬«æ£‡éƒåº¢æ«‡é…æ°­æ«Žé…ã„¦æ«é…ç‚´æµŒé•æ¥æ¹œå§Šä½¹îªå§Šãˆ¡î•¸å§Šåž«ã€‘å¦—èˆµâ’ˆå§ŠÑ„î•¼å§Šç‰ˆî•¨å¦«å‹¬î¨å§Šå—˜î•ªå§Šæ—€î–‚å§Šã„¦î–„å§Šâ„ƒî•§å¨†å‰î†‘"],["b240","å§£î‚£î‡¡å§˜î‚£ç¨å¨‘å…¼çƒ¦å¨£æ¬æ«å¨£â„ƒç©¼å¨£ã‚†åŠå¨£çƒ˜ç«»å¨£å›¨ç©»å¨‘îˆ›çª‡å¨‘î†½çªžå¨£è§„é™¡å¨£é”‹è¿”å¨£å‘®çª‰å¨“æ°­å…œå¨£æ°­å¸†å¨£æ¨»è—©å¨£è¾¨æ¨Šå¨£ã„¦ç©¯å¨£å‹¬ä¸¢å¨£î„çŠŠå¨£ï¸¾å…é’å¤Œå‰¨é‘ç•Œå„»é–ç•Œå£—é˜ä½ºå¯½éšæ¶šå¯²éšæ’¶å¯µéœå›©æ‚ˆéžå©„æ‚†éžå—™å¾“éžå¶‡æ‘–é¡ï¿½"],["b2a1","é¡é£Žæ•Žé¢ãˆ¢æšé£ï¸¾æšé£æ‰®æžé¥æ—‚æ£”é¤ç”µæ£…é¥å¶‡æ® é©æ—‚æ´…é©æ¶šæ¹»éªå‰§æº‚éªå‰æ¹¼éªè™¹ï½žçº­å†ªî”“ç»ãƒ§ã‚¨ç»î… Ð©ç»æŽ”ç£ç»—çŠµîƒƒç»—æ¶šîƒ‡ç»—ï¸¾ç‘±ç»—ç‚µîƒ‰ç»®æŽ”çŸ–ç»®æ› ç¥®ç»²å†ªå½“ç»±î†¾åž‚ç»±è‚©ç¥¤ç»±æ‰®é—¯ç»²å‹­ç–®ç»²å‚œåºŠç»±è¾©å†€ç¼‡ç‚µç·´ç¼ˆå²€ç¹‹ç¼ˆæŽ•â‚¬æ»†äº°é‘±å—šåŠ˜é‘´æ ¬åŠŠé‘´î‚¥åŠ‘é‘´æ‹ŒåŠ‹é‘¸å‚åŸ–é‘¸ç–¯åŸ—é‘¸ç¡…å¸‹é‘¾ç‚¶å¸¢é‘½æ­Œå¸°é‘¾æ ¬å¹—é‘¾î‚¥å¸“é‘¾å©…å¸—é‘¾å¤Žå¸¬é‘½ç–¯åµ’é‘½ï¿½"],["b340","é‘¾å—šå¸¶é“æ›žå§œé“”å›ªæ³™é““æƒ°æ³Ÿé““ä½ƒæ³¦é“”å¬­æ¯é““îˆæ³¬ç›æ’¹î–ƒçšå £î¦çšæŽ•î•»çšå¶ˆî•°ç‘•æ’¹î›´ç‘·î‡îŸƒç‘·ï½ˆÄ“ç‘·è¾«Åç‘·ç†»îŸç‘·ãˆ£çœ½ç’žæ°³åšç’¨î„ƒæç’¨ã„¨å‹ƒç’¨Ñ†æŽ¸ç’§ï¹æ¯’ç“’é¸¿ç²µæŒç†¼â‚¬æ¬“â‚¬å¶‰â‚¬æ°¶â‚¬æ¥…â‚¬ï½‰â‚¬ç†¼â‚¬æ¿‹â‚¬æ„°â‚¬æ›¢â‚¬ç‚ºâ‚¬çŠ»â‚¬å¿›â‚¬ãˆ¤â‚¬æ ­â‚¬æ¶¢â‚¬ï¿½"],["b3a1","é–®ã„©å„¹é–®ä»‹åŽ³é–²åº¨åš¨é–²ï¹‚åš•é–²Ñ‡åšŸé–²â•…æž†é—„îˆæ«Ÿé—„æŠ½æ«¢é—„ä¼´æ«žé—„å •æ«¡é—„î„„æ³™é—†îˆæ´¨ç»”çŠµç¶é—‹å‚žçˆŸæ¦„æ°¶å¿æ¥£ç”¸ç®æ¥¹ãƒ©å¤¯éŒãˆ å€£éŒå‘­å€·éŒæˆå€‹éŒæ §å€¶éŒæ°­æ¸¶é‘åžå£Šé“æ‘å£é“â•å«—é•æ¿†å«‘é—æ°¬å¸´éŸè¯²æ¸é Ñƒæš­é å©‚æž¬é æ¨ºæºé æ»ƒæŸ‚é æ–¿æžƒé å¬ªæ»é å†²æŸˆé ç†·æ–é æ’æž¤é è¯²æŸ†é åžæš°é å¤ŠæŸ…é æ¬æ¹‡é«îˆšç‰šé«æ‘ç‰‘é«æ¿ç‰¨é«â€³ç‰†é«çŠ²ï¼™æ¾¹å“„îš¥"],["b440","æ¿ å³°ç¨æ¿ åž®çŸæ¿¯æ¶˜î€†ç€›å†²î„ªç€µæŽ‘ç˜œç€µæ’³ç˜£çå©‚çš¨çåžç¥µå®“æ„¬åˆ›å®“å›§æ–¹éªžå‘­é™„éªžâ‚¬éªžå†¨å’•å¯¤å©‚ç²Šå¯¤å‚šç²å¯®ç…Žæ±Ÿå¯°â•æƒŠå¯°ã„¦å„œéŽ¯â„ƒå›éŽ®èˆµå„¬éŽ°æ»„åŠŠéŽ¯çƒ˜å‰·éŽ¯ç‰ˆå…“éŽ¯å­˜åéŽ¯è¾¨å‰®éŽ¯èˆµå‰¦éŽ°â‚¬éŽ°æŽ“åž·éŽµå¤‹å¸²éŽºå±¾å¼¿éŽ»â‚¬éŽ»â•‚å¼¶éŽ»å—˜å¼½"],["b4a1","éŽ»æŽ“å½›éŽ»æ„­å½™éŽ»æ ¨å½®éŽ»î†½åµéŽ»å­˜å½§éŽ»æ¶™æ†­éŽ»æ°­å¾†éç‚´æš’éãˆ¡æšŽé‚æˆžæž‘é‚îˆ›æ«˜é…ç‰ˆæ«žé…èˆµæ«™é†æˆžæ«¤é…ç‚¬æ«¡é‡ç‚¬æµ›éˆç†¸æ¹žå¦«çƒ˜î—šå¦«çŠ³î—å¦«æ¥î˜ªå¦«ç†¸ï¼•å¦«î†½ï¼‡å¦«è§„î——å¦«å‰ï¼ƒå¦«å¬«î—’å¦žå¶†î˜·å¦žåº¢î—Žå¦«æ°­ã‚®å¦«ç»˜îƒ™å¨†çƒ˜îƒ˜å¨ˆæ¨»ç•ºå¨ˆå…¼î‡¤å§˜î†½éš˜å§˜î„è…å¨“å‘Šç®¶å¨“â„ƒè¦†å©€Ñ„ç® å¨“çŠ³å¼—å¨“ï½†ç¬¡å©€æ¶™ç®»å¨“ã‚†ç®¹å©€î†½è…‘å¨“ï¸½æ±žå¨“å­˜ç®¥å¨“çƒ˜è„¯å©€å†©ç¬£å¨“ç‚¬ç²™"],["b540","å©§å¤‹ç¬å©€åº¢æ¢—å©€å‹¬å…±å©€â•‚ç¯ƒé’æ¬‘å‰¼é’ï¸¾åŠ™é’ï¼„åŠ§é“î†¾åŠ€é—å²€å¦±é˜â‚¬éšå‰å°Œéšå¯¸å°’éžè™¹æƒ‡éžå´‡æ‚½éžãƒ§æƒ–éžå‰æƒ”éžîˆœæ‚°éžï¸¾æƒƒé¢ãƒ§æ• é£î‚¤æš˜é¥ãˆ¢æ£é¥ï½‡æ£›é¥æ¨¼æ£¡é¥çŠµæ«¥é§è‚©æ®©é¨æ’¶æ¯šé©æ»…æ½–é­î… î”¢çº­î„‚â€™ç»‹å¶‡â–“ç»‹å¬¬â–ç»‹â‚¬ç»ï¿½"],["b5a1","ç»æ¥ƒç¤ç»”ãƒ§î ç»›å¤Œç“¥ç»›å—™ç“™ç»›æŽ”ç“Ÿç»›å¶‡ç“”ç»›å¿•ç“šç»®ç†ºæ’­ç»²ç‚µç¥¼ç»²ã„§ç¦ƒç»±î‚¤è¯žç»²èŒ¬æ€ ç»²ï¸¾è€½ç»²æ‰®å…šé å‹­ç¹‘ç¼ˆæ›¡â‚¬å¬­äº½é‘²å‘°åŽ±é‘µæ—‡åŽ é‘µæˆ£åŽ§é‘´ç¡…åŽ—é‘´æåŽ¡é‘µæ’¹å´é‘¸æŽ•åž³é‘¿â•„æ‚†é‘¿æ­Œæ‚•é‘¿çŠºå¼²é’€å¬­å¼«é‘¿îˆå½µé‘¿ç£‹æ†²é’€å©…å½´é’€å²ƒå¼»é‘¿å€Ÿå½¶é‘¿å©…æƒ›é’€åº¤æ‚‡é‘¿æ»†æ‚‹é‘¿æ—‡å½‘é“æ¶œæ´˜é“”æ¬’æ´¯é“”æ—‡æ´“é“”ã‚ˆæ´‚é“”ç‚¶î”œç‘ä½½î—‡çšè¾«î›¨ç‘•æ ¬É‘ç‘­çŠºîŸ³ç‘­ç‚¶îŸ‡ç‘­ï¿½"],["b640","ç‘­æ—‡îŸ¸ç‘­æ„¯ï¹©ç‘·ç£‹Ãªç‘·æƒ°ã€‡ç’žÂ¤çŸ€ç’¨îˆå¸ƒç’¨å® æ­¥ç’©ä½½ä¸ç’©â‚¬ç’¨ç£‹åœç’¨æƒ°éƒ¨ç’¨æ­Œç§ºç“’å‘°ç§®ç’ºåº¤çª›ç’ºå¬­çª”ç’ºæˆ£ç©¼ç’ºæ¶œç©¯æŒæ˜æ¡“æŒè‰°ç·¶é–«î‡€â‚¬ç”¸â‚¬éâ‚¬æâ‚¬æŸ¥â‚¬å •å‰›é–®ç”¸å‰¦é–®é¹ƒå„é–°ãƒ©å™ºé–³æ—ˆåž¥é–³ï½‰åž‘é–³ç‚ºåž—é–³æ„°åžé–³æˆ¦æž–é—å¿›æžŠé—ï¿½"],["b6a1","é—æ’»æž“é—åº¨æ®œé—…åº¨æ®é—„ä»‹æ®”é—…å—›æ®Ÿé—„æŸ¥æ®‘é—†ä¾€æ³¤é—†å‹¯æ³¦é—†å›¬æ´´é—†æŸ¥ç…‚é—‹å‘´çˆ¢é—‹å ¥ï¼‡æ¤‹îˆï¼æ¤‹â•…ï¼’æ¤‹î…¢Îžæ££î…¢ç²Œæ¦›å¶‰ç²¦æµœå‚šå”éŒé›å›éŒå†²å„éŒæƒ§å“éŒå³°å¦éŒîˆšå„‘é“åž®å£é“è—‰å«™é•ï¹€å«Ÿé•ãˆ å«žé–îˆšæ£¢é¡ã„¥æ£‘é¡ï¹€æ£Šé¡æ»ƒæ£é¡æˆæ£§é¡ã‚…æ£·é¡æ°¬æ£¥é¡å‘­æ¢¿é¡ãƒ¥æ£„é¦æŽ‘æ¹æ¿‰ç‚²î”–æ¿‰æ¨ºî”œæ¿‰æ°¬î”™æ¿‰î‚¢î”‘æ¿‰î…žî”æ¿‰ãˆ î”—æ¿‰å¬ªã‚§ç€šä½¸ç˜ç€šå±½î€æ¿¯è—‰î€›"],["b740","æ¿¯å†²çŽæ¿¯æ’æ—¦å®“îˆšç®¤éªžç‘°ç²”å¯¤å ç´¥è¤°æ¬ç²³å¯°î†½å‰¼éŽ°å¿”åŽ›éŽ°ç†¸å…‚éŽ°æ¶™å…éŽ°ä½¹å‰¤éŽ±åº¢åŽ¡éŽ±å‹¬åŽ¤éŽ°ç‚¬åŠ¥éŽ°Ñ„å‰­éŽ°å—˜åŠ®éŽ´â„ƒåž»éŽ¼æ’´æƒ¥éŽ¼ç‚´æƒ‡éŽ¼î…Ÿæƒ¤éŽ¼î„æ‚˜éŽ¼æ»„æ‚¢éŽ¼å¶†æƒ—éŽ¼æ ¨æ‚§éŽ¼å—˜æššé‚ç†¸æŸŠé†æ¥æ®™é†å›¨æ®˜é†æ ¨æ®‘é†æ¨»æ®Ÿéˆå†©î›¹å¦¤ï¿½"],["b7a1","å¦¤æ°­ã‚·å¦¤çŠ³îš™å¦¤åž«ãå§’å‚›îšå¦¤ã„¦ã‚«å¦¤ç‚´îš˜å¦¤è§„î›«å¦¤æ¿‡ã‚£å¦¤æ¶™ç“å§å‰ç˜ˆå¨ˆæŒŽç˜¬å§£èŠ¥å­©å©§îˆ›ç²¨å©§èˆµç²‹å©§æ„­ç°¼å©Šå›¨ç²Žå©§ãƒ¦ç°¶å©§å…¼æ±‰å©§î‚£ç²¦å©§æ ¨ç°»å©Šå‹¬ç²©å©§î…éª‡å©§å¯¸åŽ§é“æ¬‘åé“ã‚‡åŽœé“Ñ…åŽ¹é“î„‚å‡é“å²€å†é“ç‚µåŽ—é“ã„§åŽ²é–è™¹å¢¥éšé£Žå´Šéšè·¨å°µéŸîˆœæ†µéŸæ› æ†»éŸç‚µæ†—éžè·¨æ†´éŸæ¶šæ†¸é£å‰æš©é¦â‚¬é¥æ‰®æ¦¿é¥èŒ¬æ£»é¥è™¹æ¤é¥å¯¸æ£¾é©ç‚µæ´˜é«æ¶šæ½¾é«ï¸¾æ½ªé«ï¿½"],["b840","é«åœ­æ½½é«î„‚æ½¨é«ãƒ§æ½¹é«ãˆ¢ç…¯çº°åº£î«çº°æ¥ƒî•½çº°å²€î•®çº­è‚©î•¶çº°æ’¶ã€‘ç»è™¹ã‚¿ç»‚ä½½æƒ‰ç»‚ç•ŒîŸ‚ç»‹æ°±îŸ†ç»‹æ—‚îŸ…ç»‹ç‚µç°ç»çŠµî„°ç»¡â‚¬ç»›çŠµî„§ç»›Ñ…è„–ç»®å´‡é©³ç¼æ’¶å€’ç¼æˆ ç§®ç¼å¿•ç¦Œç¼ƒî†¾åƒµç¼ƒî†è®²ç¼‡â•ƒé²¸ç¼‡ã‚ˆä»é‘±æ¨¿å€–é‘²å‹®å¡é‘µæ‹Œå€é‘µãƒ¨åœé‘µå® å“"],["b8a1","é‘µç¡…å…é‘µï¹åžé‘¹å›ªæ‹é’ç–¯æƒ¤é’€è¾«æ‡™é’ï¹æ‡Œé’å¤Žæ‡é’æ¶œæƒ£é’€ä½ƒæ†½é’ï½ˆæ‡‡é’î…¡æ†œé“ç‚¶æ«†é“ç†»æµŒé“šæ’¹æ¹€é“šå›ªæ¸¶é“”ææµ•é“šå‚æ¸»é“šå—šæ¹‚ç›æ¬’î—¤ç‘æ—‡î—žç‘æ»†î—ç‘æ¿Šï¼ç‘å©…î—šç‘æŽ•îœç‘™ï½ˆâ”‡ç‘­èŒ¶â”ç‘­ï¹â”…ç‘­æ‹Œç“ç‘­è‰°î €ç‘¾çŠºâ”ç‘¾å‘°â”‰ç‘­ãˆ£â”Šç‘­î„ƒâ”•ç‘­æ˜Åˆç‘­ã„¨é›¹ç’¨å©…çŸ‡ç’©å©…ç¡£ç’©å £ç¡ ç’¨èŒ¶ç¡Ÿç’©å‚ç¡¡ç’ºÂ¤çª¡ç’ºã„¨çŸ¾ç’ºå® æ³›ç’ºî‡ç­ç’ºï¹ç¿°æ“å†­ç´šæŒæç´›"],["b940","æˆç†»é™é–¬å¬®äº°é–¬æ’»äº—é–¬æ—ˆâ‚¬å¥¸ä»Œé–¬æ„°äº£é–¬å¿›äº·é–¬å¶‰äº¼é–«é¹ƒäº–é–¯æŽ—å‰¹é–°î„„å’é–°â•…å™³é–³çƒ½å¢¬é–³æåŸ¥é–´â‚¬é–³é¹ƒå¢°é–´å¬®å¢¹é–´æˆ¦åŸ“é–´å¤å¢ é–´å‘´åŸžé–³å—å¢¯é—æ©€æ®¬é—…æ—ˆæ®¨é—†å¶‰æ³²é—†å¤æ³­é—†çƒ½æµ•é—†å½’æµ‚é—ˆæ ­æ¾Šé—ˆå •çˆ¯é—‹æˆ¦çˆ´é—‹å©‡çˆ³é—‹å²„ï¼œæ¤‹ï¿½"],["b9a1","æ¤‹ä»‹ï¼žæ££æŠ½Î¡æ££æ’®îžæ§Œâ•…ç°œæ¦§åº¨ç´¦æ¦§çŠ²å„³éî†¼å„±éæ §å„¹éæ°¬å„ éå¿“å„œéåžå„™éâ•åƒé‘å†²å¦°é”å‚šå°¡é˜î…žæ¤Œé¢â‚¬é¢æ¶˜æ§œé¡è—‰æ§˜é¢å——æ§ˆé¢å¶…æ§‘é¡å³°æ§šé¢ç†·æ§‡é¢æ„¬æ¤‚é¦æ¨ºæ¹’æ¿‰é›ã€æ¾§å†¨î•¸æ¾§å©‚ã€æ¾§å‘­ã€—æ¾¹è—‰ã…æ¾¶ãˆ ã„æ¿‚î„ã‚©ç€šâ€³î£ç€šâ•ç¬ç€šæ §ç®ç€šï½…î„®ç€µç‚²î‡œç€µâ€³î‡šç€µï¹€î‡ç€µãˆ î‡™ç€µç†·çšªçžãˆ ç§³å®¥å›§ç®¾éªžï½…ç®·éªžæ¥€ç®¶å¯¤æ’³ç²¬å¯®å©‚çµ¾è¤°æ¿ç«ŸéŽ±ï¿½"],["ba40","éŽ°æŒŽåŽ éŽ±é”‹åƒéŽ±ï½†åŽ½éŽ±æ°­åŽ´éŽ±åž«åŸ…éŽ¾å›¨æ†³éŽ½æ—€æŒ™éŽ½å‘Šæ†»éŽ½çƒ˜æ†«éŽ½Ñ„æƒ”éŽ½î…Ÿæ‡Ÿéå‰æž´éƒæ¥æ£–é†ãˆ¡æ¯ƒé†æ¿‡îœå§’ã„¦î›ºå¦²ä½¹Îžå¦²æ’´îå§’æ¶™Î¨å§’ç»˜Î›å§’å­˜î•å¦²å¶†Îå¦²å±¾Î–å¦²å†©Î“å§å¤‹ç“•å§˜è™«æ±²å©•æ—€ç—ªå©•æ’´æ·®å©•â•‚å­£å©•çŠ³æ£˜å©•å¿”ç´“å©•ï¿½"],["baa1","å©ŠæŒŽåŒ–å©•å—˜æ€¥å©•å‘Šç–¾å©•ï½†ç´©å©•î‚£é›†å©¢å Ÿå‰å©Šî„ç´’å©Šå‰ç²šå©Šé£Žå•é”æ¬‘å”é”å©„å”²é”æŽ”åŸ¦é˜æŽ”å§ˆé›å‹­å´˜éŸã‚‡æ‡€éŸî†æ‡“éŸî… æ”§é¤æˆ æ§¯é¦å¶‡æ§‹é¦å¤Œæ§—é©ï¼„æ´ é¬å‹­æ¾–é«è·¨æ½¯çº¾ä½ºî–„çº°Ñ…â’Šçº°â•ƒâ…²ç»‚åº£î›´ç»‚å¶‡Ã³ç»‹è¾©î€‰ç»â•ƒîªç»”îˆœî…¸ç» æ› ç•«ç»›ç”µç•»ç» æ¿ˆç•¶ç» å¿•î†ç» å›©ç•¡ç»®åœ­æ­¥ç»®å‰§ç—˜ç¼æ‰®ç¨–ç¼ç•Œæ¯’ç¼çŠµç©µç¼å¯¸æ«ç¼è¾©é€—ç¼ãˆ¢çŠŠç¼ç”µé™¡ç¼î… çª‰ç»¶å›©å†¬"],["bb40","ç¼ƒæ‰®ç¹ç¼ˆï¼„ç¹œé‘±ç‚¶ä»›é‘²å›ªåŽ«é‘¶â‚¬é‘¶å¿šå”¸é‘¶å©…å™é‘¶å‚åš™é‘·é¸¿åžé‘¸æ—‡åž¶é‘¹å¬­æ²é’‚èƒ¯æ¯é’ƒå‹®æŒ‹é’‚ç‚¶æŒ·é’‚æ»†æµé’‚æ­Œæ¥é’ƒæ’¹æ‹¹é’‚è‰°æ¼é’ƒå©…æºˆé“šæ»†æºé“šãˆ£æ¹§é“šç£‹æ¹—é“¦æ›¡æ¹»é“šâ•„ï¼“ç‘œå‚ï¼”ç‘ç¡…ï¼˜ç‘å€Ÿï¼ˆç‘œæ°³ï¼ç‘¾ï¹ç™ç‘¾ç‚¶î€‚ç‘¾å¶ˆî€€ç‘¾æ’¹î€ƒ"],["bba1","ç‘¾î‡î€„ç‘¾ã„¨ç¦ç‘¾æˆ£ç¨ç‘¾Ñ†è±¹ç’¨å¶ˆçŸŠç’©æ’¹ç¡²ç’©æŽ•ä½†ç“’æ¬’ç¨Œç’ºè‰°ç´¨æ“æŽ•ç´©æ“æ’¹è†é–¬çŠ»ä»’é–¬æ»ˆä»¯é–¬æ¬“ä»¦é–¬ãˆ¤ä»¢é–¬æ¶¢å‰»é–¯æ©€åŠ„é–°ç”¸å€é–°çƒ½å´é–´æå¦§é–µå‘´å§Œé–µæ ­å£”é–µæ’»å§•é–µã„©å£–é–µæˆ¦æž´é—ã„©æŸ€é—ï½‰æž¼é—ã‚‰æ®­é—…æ»ˆæ®¯é—†å²„æ´…é—‡â‚¬é—ˆå¥¸ç€°é—Šå •ç‰€é—‹æ©€îªæ£°éî˜¨æ¤å‘´î˜±æ¤å¤î†æ¥ îˆžî€æ¥‚ï¹‚ç“‰æ¦„å‚žç‚’æ§Œå •åµæ¥¹å¥¸è“Ÿæ¦»å©‚å‰ŸéŽâ‚¬éè¯²å…Šéç‘°å‰›éŽå å‰¦éŽå‘­åš‹"],["bc40","é”å›§å¦¶é”å¤Šå¦½é”å©‚å«²é˜æ’æ§·é¢è¯²æ¨„é¢æ’æ¨‹é¢æ‘æ§±é£æ’³æª¸é£æ¥€æ«žé¢è·ºæ§¸é¢æ¿î•¥æ¾§ç†·î–ƒæ¾§å†²î–æ¾§î†¼â…¸æ¾§ï¹€ã‚­ç€£å¤Šî¸ç€£å¬ªî²ç€£å±½ç‘˜ç€µî†¼î‡¡ç€µâ•î‡ çžã‚…é¥±å®¥æ¿†ç¨Šéªžãˆ ç¯ƒéªžâ€³è™Žå¯¤æ°¬ç²ºå¯¤æ¿†å”¬å¯¤çŠ²ç¶€è¤°åžç—‰å¯°åž«å¾éŽ±Ñ„åœéŽ±æ¿‡åŽ±éŽ²ï¿½"],["bca1","éŽ±å…¼åžéŽ±î‚£å˜éŽ²Ñ„å•‡éŽ²î‚£å•‚éŽ²î„å•”éŽ²ã‚†å•éŽ²î†½åŸ‰éŽ½â•‚æ‡éŽ½è§„æŒ’éŽ¾å‰æ‹¡éŽ¾æ„­æŒµéŽ¾ãƒ¦æŒ€éŽ¾æ›ŸæŒ¬éŽ¾æŽ“æŒ³éŽ¾î…ŸæŒ®éŽ¾æ°­æŒ°éŽ¾æ¬æŒ—éŽ¾è™«æš¤éé”‹æš©é†î†½æ¯‡é†å­˜æ¯å¦¯ï½†îŸ…å¦²ã„¦â–‰å¦¯ç‚´îž¿å¦²èŠ¥Äå¦¯æ’´â–•å¦²è™«â–Šå¦¯å‘®Ð›å¦¯æˆžç“™å§åº¢î…»å§£å‘®ç˜‘å©•æŒŽéƒŠå©¢å‹¬ç¶‰å¨¼ï¸½ç¶Œå©¢å—˜æ±Ÿå¨¼æ¶™ç¤å¨¼î†½ç·¨å¨¼çƒ˜æ¡¨å¨¼ã‚†ç·±å¨¼æ¨»ç²«å¨¼îˆ›ç¶˜å¨¼ç†ºå•›é”î„‚å•½é”ã„§å¢«é˜æ¶šå´•é›æ¥ƒæ‡‡é å¬¬æ‹‘"],["bd40","éŸå‰§æ‹ƒé£è·¨æ§§é¦â•ƒæ§¦é¦ã‚‡æ§®é¦ï¼„æ§©é¨æ°±æ¯¢é©ã‚‡ç€»é¬å›©ç€¸é¬æˆ ç€·çº¾å¬¬î—Šçº°è™¹î—çº°å‰§î—šçº°è‚©î—•ç»‹è·¨îŸ‡ç»Œâ‚¬ç»‹ç•ŒÇšç»‹è¤î€Žç»î†¾î†„ç» è¾©ç˜Žç» å¯¸ç˜‘ç»¡å›©ç˜‰ç» çŠµç˜œç»¯å©„çª¢ç»¶å¯¸çŸ¾ç»¶è¤çªç»¶î„‚çª›ç»¶ã„§ç½šç»¶æ°±çªžç»¶â•ƒç¨™ç»¶æ¬‘å‡¡ç»¶åœ­é™ç¼ƒé£Žè­¦"],["bda1","ç¼ˆâ•„â‚¬ï¹å•—é‘¶æ»†å•™é‘¶çŠºå•”é‘¶æ¨¿æ•†é’„å€Ÿæ•‹é’ƒî†¿æ•©é’„î…¡æ•é’„æˆ£æ•šé’„Â¤æ•‚é’ƒî„ƒæ•Ÿé’ƒèƒ¯æ”©é“»å‚æ¾Šé“¦æƒ°æ½¬é“¦ï¹æ¾‘é“¦ã„¨æ½¤é“¦æ¥„æ½“é“¦æ’¹î” ç›æ¿Šî˜µç‘œå›ªî˜·ç‘œæ’¹î˜ºç‘œå©…î€›ç’œæŽ•ç–ç’œå‹®ç£ç’œå¬­îµç‘¾èŒ¶ç˜ç’œå‚î€žç‘¾æ‹Œç«ç’œå¶ˆî€•ç‘¾ç¡…ç±ç’žå²ƒç…ç’žî„ƒç¢ƒç’©ç‚¶è‚ ç’©ã‚ˆè¶…ç’©î…¡å°ç’©ï½ˆç¡¿ç’©î‡åœºç’§î…¡ç¨›ç“’ï½ˆæ–§éŸªæ„¯ç¬£éŸªãˆ£ç¬éŸªâ•„ç¬©éŸªÂ¤ç¬§éŸ¬é¸¿ç´³æ“æ¶œç´µæ“â•„é¸¡æ“î‡ç´²æ“ï¿½"],["be40","æ“ãƒ©ä»¼é–¬î‡€ä»ºé–¬î…¢ä¼”é–¯ä¼´åŠ–é–¯Ñ‡åŠšé–±å›¬å”¹é–±å¬®å”­é–¶å‘´å¨€é–µçƒ½å«ªé–µî„„å«Ÿé–¶ä¾€å§µé–µå¥¸å«†é–¶å›¬å«²é–µæŸ¥æŸ‡é—éæ¸¼é—‡å—›æ¸¿é—‡å¤æ½¬é—‰å¶‰ç€·é—‰å¿›ç‰Žé—‹î‚¦ç‰…æ£°æŠ½î˜¯æ¤æ’»î˜·æ¤æ©€î¢æ¤æ„°î¤æ¤æ¶¢î–æ¤æ›¢î—æ¤æ¬“î€–æ¥‚î‡€î¬æ¥Ñ‡ç“æ¦„å‹¯î„°æ¦„îˆžç£«æ¦‡ï¿½"],["bea1","æ¦‡å†®æ†¨æ¥¹é¹ƒç² æ¾§ã„©ç¶ŠéŽæŽ‘å‰ºéŽæ–¿å‰±éŽæ›žå”¨éî„åšŒé”æˆå§„é•å†²æ«ƒé£î‚¢æ«£é£â•æ«Žé£ç¨¿æ«”é£ã„¥æ«é£åžæ«™é£î„€æ«Œé£è·ºî—†æ¾§æƒ§î—Œæ¾¹å‘­ã‚®ç€£æ¿†îƒç€›ç¨¿î‡¥çåº¡ç¶‚éŽ²å‰å•ˆéŽ²â•‚å”ºéŽ³å¶†å–éŽ²ç‚¬å™´éŽ³å ŸåŸŒéŽ¿å‘®æ§éŽ¿å¬«æ‡éŽ¾å…¼æ‘ŽéŽ¿å‹¬æ°éŽ¿å‚›æ·éŽ¾æŒŽæ¾éŽ¿æ—€æ‘éå­˜æ³¦é‡å¤‹æ¯ é‡å‹¬æ³§é†å‘ŠÅ„å¦¯å‘ŠÃªå§—æ¬â”‡å§—æ¨»Ã¼å§—å‹¬îŸ¿å§—â„ƒîŸ©å§—å›¨Ç–å§—ç†¸ï¹«å§æ¬î„°å§˜å‘®ç¸½å©¢è¾¨å°½"],["bf40","å©µå†©å…¢å©µä½¹æ™¶å©¢è™«ç¸ºå©¢è§„å¾„å©¢ï¸½ç·ºå©¢å¯¸å–šé•å¤Œå™½é•æŽ”å™²é•æ› å–’é•åº£åšˆé•æ»…å™§é•å‹­å´¹é æ»…æŒ˜é æ¨¼æŒ“é ç‚µæ‘™é¢å²€æ”³é¦å¯¸æ¨ƒé¦è™¹æ´¤é©ãƒ§çŽé¬ç‚µçé¬ãƒ§ï¼ˆçº¾æ°±ï¼Œçº¾Ñ…Î–ç»Œå¶‡îŸ¬ç»Œå—™îŸªç»Œå¬¬î€™ç»¡æ¬‘çš¯ç»¡å¤Œî‡™ç»¡æ¶šî‡–ç»¡â•ƒî‡›ç»¯æ› ç¡¸ç»ºï¿½"],["bfa1","ç»ºæˆ ç¬€ç»ºæ¶šç¦ç»ºç‚µç¬£ç»ºå¤Œç¬Žç¼ƒåœ­é™ç¼ˆæ‰®å‹˜ç¼ˆî†¿â‚¬ã„¨å–…é‘¶â•„å•«é‘·æ˜åžé‘¹æ¨¿å¢®é’‘å©…æš€é’‘å £æš”é’‘â•„æ™é’‘å¤Žæš›é’‘î‡æšˆé“»å†­çé“»ç‚¶ç‘é“»å¶ˆã€€ç‘œî‡ã’ç‘œãƒ¨ã‹ç‘œÂ¤Îšç‘•ï¹î£ç’œé¸¿î¨ç’œè¾«ç‘Žç’œæ»†î¤ç’œî†¿î»ç’Žä½½ç‘ç’œç–¯îªç’œå® î³ç’œè‰°é²ç’žî…¡çŸ’ç’©ç£‹ç®˜éŸªè¾«å¤éŸ«å‚è…¹éŸªä½ƒè“Ÿæ“îˆå‡ æ“å® é²¸æˆï¹‚ä¼’é–¬æ’®ä¼•é–¬æŸ¥ä¼¡é–¬æ´ªåŠ¥é–±æŽ—å°ƒé–·å •å«ºé–·æŠ½å°Ÿé–·ãˆ¤å«¾é–·î‚¦å¯—é–·ï¿½"],["c040","é–·æ„°å°é–·ï¿ å¯±é–·î‡€å¯µé—å©šæ¯€é—…ã„©æ¯†é—†æ›¢æ¹ˆé—‡æˆ¦æ¹’é—‡å¶‰æ¹é—‡å¿›æ½§é—ˆæ»ˆæ½¶é—‰æ©€ç‰¥é—‹æç‰·é—‹çƒ½ç‰ é—‹å½’ç‰‘æ¤æ„°ãˆæ¤ç‚ºî™€æ¤ï¿ î˜¿æ¤î…¢Ð‘æ¤éî€—æ¥ å¥¸î¸æ¥‚î…¢îƒƒæ¥«æˆ¦ç£¿æ¦‡ï½‰å¤„æ¦‡ã„©ç£¼æ¦‡æ¶¢ç²¯æ¦›æ—ˆç·§æ¦«æ»ƒåŠ’éŽç†·åŠ‡éŽæ’å«·é¤åº¡æ®Œé¤æ„¬æ®”é¤ï¿½"],["c0a1","é¤å¿“î—šæ¾¹æ’³î—–æ¾¹åº¡îƒ‹ç€£î„î‚¿ç€›å“„èƒºçžã„¥éƒ½å®¥å“„ç£å®¥ç¨¿å…¬è¤°å±½çª˜éŽ³å¤‹å™¦éŽ³å›¨åš˜éŽ³å¬«åŸéŽ´å­˜æ¸éŽ¿å©ƒæ‘ŒéŽ¿çŠ³æ‘ªéŽ¿ï¸½æ‘¤éŽ¿è¾¨æ‘™éŽ¿î…Ÿæºé‚å†©æ´é‡æ ¨ç‰å¦¾æ—€çŽå¦¾ãˆ¡çªå¨…æ¶™î€‚å§—ç‚¬ç¥å¦¾æ„­ç±å§æ»„î†…å§£æ°­çš¥å©µæ¨»å‹˜å©µç†¸ç¹å©µæ¶™éƒ¡å©µî‚£åˆŠå©¢â‚¬å©µî„ä¿Šå©µâ•‚ç¹’å©µî†½å ªé•Ñ…åšé•î†¾åš˜é•ãƒ§åšŸé•î„‚åš§é•çŠµåŸ–é—å—™åµƒé›èŒ¬æŒ¬é æ‰®æŒ¦é ã„§æª°é§å‚œæª¶é©î†ç£é¬î†ç é¬ï¿½"],["c140","é¬Ñ…çœé­îˆœï¼—çº¾è™¹ï¼”çº¾îˆœî˜¦ç»‚Ñ…Îšç»Œæ¥ƒî€žç»¨å›©çšªç»¡å‰§î‡¬ç»¨å²€ç™„ç»¯çŠµç¡¿ç»¯ç‚µå°ç»¯ç†ºç¡»ç»¯æ¿ˆåºœç»ºå‰§ç®šç»ºé£Žè¦†ç»»å†ªæ–§ç»ºç•Œå‰¯ç»»å‘¯ç®’ç»ºå¯¸è…¹ç»»å ¢å‚…ç»ºè·¨è…ç¼ƒå‹­ç ç¼ˆè‰°ä¼‡é‘±èŒ¶ä¼†é‘±îˆä¼‹é‘·å—šå™§é‘¶é¸¿å™¦é‘·â‚¬é‘¶èƒ¯å–—é‘·å¤Žå–šé‘·ã„¨åž‘é‘¹è¾«æŸ‚"],["c1a1","é’–å‹®æš°é’–æ»†æž’é’–æ—‡æŸ‰é’–æ¶œæžƒé’–ã„¨æžˆé“Ñ†ç„µé”œæˆ£ç£é”œæŽ•ç„¼é“»î‚¥ç®é“»é¸¿ç„¾é”œå¬­ã›ç‘œæƒ°îš‰ç‘œæ­Œãç‘•î„ƒç‘¤ç’Žæ¥„ç‘±ç’Žæ¶œç‘ ç’ŽçŠºç‘µç’Žå‹®ç‘¦ç’žä½½ç¿±ç’žå® æ¾ˆç’©å€Ÿè‡£ç’©æ­Œéƒ´ç“’ã„¨ç®ŸéŸ«å¬­ç®žéŸ«å©…çµ¼æ“æçµºæžå‘°ä¼Žé–¬å—ä¼£é–­å‹¯å€Žé–­å‚žå€‹é–¯å½’å• é–±ç‚ºå•˜é–¸å¶‰å·¶é–·ã„©åµ‰é–¸å©‡å´¶é–¸å¬®å¯´é–¸é¹ƒå´¿é–¸æ¶¢åµƒé–¸æ°¶å´é—‚å©‡æ£†é—‚å²„æ£ƒé—‚å—›æ¯é—…ææ´Šé—‡æ»ˆæ¹ é—‰çŠ»ç…‹æ¤¤å—›â’æ¤ç”¸â–‰"],["c240","æ¤å—î†…æ¥«î‚¦î†æ¥«î…¢æ¤¿æ¦‡å—ç°¨æ¦›å¿›ç²¸æ¦›æ»ˆç²·æ¦›æ¶¢å­£æ¦»å¬ªå½šé¤æ›žæ¯Šæ¾¹æ¬î—ç€£ç¨¿ç¶•éŽ³ï½†åŸ‘éŽ¿å­˜æ‘¬éŽ¿ç‚¬æ”©éŽ¿çƒ˜æ‘¶éŽ¿é”‹æŸ—é‡æ»„æ¹¨å¦¾è™«î€‹å¨…å†©î€šå¦¾å‘ŠçŽå¦¾î†½î€Žå§ç†¸î„±å¨ˆîˆœâ‚¬å¤Œâ‚¬å¬«çƒ¤éŽå—˜äº¢éŽæˆ â‚¬å¿•åš®é•è‚©åš²é•å“¥åµŽé›ç”µæŒ§é è·¨æ•ƒé§æ «æ«‚"],["c2a1","é§æŽ”ç²é¬è·¨ç®é¬è‚©î˜³ç»‚î†¾îŸ¾ç»Œãˆ¢îŸ½ç»”å‹­ç”ç»¨î‚¤å“€ç»¨î†ç›€ç»¨ï½‡å•Šç»¯Ñ…ç®¶ç»»æ› ç¯‚ç»»æ°±åŸ‚ç»»æŽ”ç®¼ç¼ƒå ¢æŠ—ç¼ˆæ˜ä¼”é‘±æƒ°å™¸é‘·å¿šåž”é’˜å¿šæŸ€é’˜å¶ˆæ£Žé’˜å¤ŽæŸŠé’–é¸¿æŸŸé’–ï¹ç…°é”œî„ƒç…µé”œçŠºî›«ç‘•èŒ¶Ð¢ç’Žã„¨îƒ”ç’Žî„ƒîƒ†ç’žæ„¯ç£ªéŸ«æ¬’æ¢—éŸ«ï¹å·¥éŸ«ç†»ç®·æŒâ‚¬æžå¤Žç¶…é–­å›¬å€‘é–­å ¥å•±é–±î„„å™½é–¹æ—ˆå¸„é–¹æ ­å¸°é–¹æŠ½å¹ƒé–¹î„„å¹‡é–¹æ©€å¸¤é–¹æ¥…æ£“é—‚æ ­æ£Žé—‚æ›¢æ´Ÿé—†æ»ˆæ´é—†æ¶¢æ´–é—‡ã‚‰ç’é—‰ï¿½"],["c340","é—‰î…¢ç…¿æ¤¤å¶‰î””æ¤¤å²„î”“æ¤¤æ’»â’‘æ¤é¹ƒãŸæ¤ä»‹ãŽæ££ãƒ©â—£æ¥‚ä¾€ç‘‘æ¥å—›ç“˜æ¦„åº¨ç“–æ¦€å©‡ç˜”æ¦€ä»‹ç˜“æ¦€â‚¬æ¦ˆæˆ¦ç¦Žæ¦ˆçŠ»ç²»æ¦§æ›¢æ£˜éŽå†²æ®½æ¾¹ç‚²î—¤æ¾¹ãˆ î‡ªæ¦«æ„¬æ»‘éŽ³å‰åšªéŽ³èˆµåš¨é€â‚¬é€å¿”æ´œé‡æ¿‡î¢å¨…æ¿‡ç°å¨…æ’¶â‚¬æ¶šâ‚¬ç†ºâ‚¬ã„§â‚¬æ°±â‚¬æ¿ˆâ‚¬æ› â‚¬æ¨¼åžŽé–å¶‡å¢­é˜ãˆ¢åµ"],["c3a1","é›è™¹æŠé¡å©„æ‘šé¤å›©æž‚é§ç†ºæ«‹é­å›©î˜¾ç»‚è¾©â”‡ç»Œâ•ƒç†¬ç»¨è·¨æ¡ˆç»¨ç•Œèƒºç»«â‚¬ç»»î‚¤å¼“ç»»åœ­ä¾›ç»»î†ç·Ÿç»»å´‡å¾„ç¼‡åœ­é–é‘·æ¨¿æ£­é’˜æ¿Šæ£¯é’˜æ›¡æ£¨é’˜ãƒ¨æ¤ƒé”œæ˜çˆ¡é” å¶ˆç…¿é”œæîš¥ç‘—ç†»îš›ç‘—ç‚¶ç“‰ç’€æ»†ç“¨ç’€å¤Žç“ªç’€åº¤ç“˜ç’€å—šç“©ç’å £ç£°éŸ«è‰°å…±éŸ¬å›ªè‹ŸéŸ«î„ƒè´­éŸ«ç£‹ç¶Œæžåº¤ç»é–­å©‡å€ é–±éå•´é–ºï¿ å½‚é–ºç†¼å¼®é–ºå ¥å½é–ºæ¿‹å½‡é–ºãˆ¤å¼½é–ºæ©€å½œé–ºæ¥…å½£é—‚æ»ˆæ¯šé—†ï½‰æ¹­é—‡Ñ‡æ½¯é—Šæ»ˆç†æ¤¤ï¿½"],["c440","æ¤¤æ©€î” æ£°å¥¸îšŠæ¥—å¤îž¼æ¥±æ¬“ç‘£æ¦€ã„©î‡œæ¦€æ ­ç˜ºæ§Žå¤æ€ æ¦ˆæŸ¥æ°®æ¦ˆî„„ç°°æ¥¹æ¥…ç°±æ¥¹æ‘å«ºé¤ã„¥æ¯žé¤è·ºæ¯šé¤ç…Žï¿¥ç€›â‚¬ç€›å†¨î„¶ç€µè·ºç©³éŽ³å‘Šåš­é€æ¨»æ•‚é€æ¬æ´£éˆÑ„î©éŽå‰§â‚¬æ‰®â‚¬èŒ¬åžšé›è¤æ¹é§ãˆ¢æ«ç»€ï¸¾ãŠç»€î„‚ã‹ç»”å›©î³ç»«å²€çœ±ç»«å¶‡æœç»¯æ‹Œäº•ç»»ç•Œè¾œ"],["c4a1","ç»¾å‚œç¶„é‘°â‚¬é‘·æ°³å¢»é’˜æ˜æ¤†é“‡æˆ£æ¤‡é“‡å—šæ§‹é“‡å›ªæ§‰é” æ—‡çˆ¼ç‘—ã‚ˆîž†ç‘™æ­Œî„©ç’€î„ƒî„Ÿç’€îˆç“±ç’€î‚¥ç£¸ç’å¶ˆç°¤éŸ¬ä½½ç° éŸ¬å‚žå–†é–²å¬®æ‚©é–»å†®å¾‘é—‚ï¿ æ¹´æ¤‹å‹¯îš—æ¥—æˆ¦Î˜æ¥±î‚¦Ã²æ¥±çƒ½Ç–æ¦˜æ’»çšªæ¥£å½’æ—±æ¦›ã„©é›†æ¦»ç†¼å‰‘æ¦»â€³åŠ®éŽç¨¿æ³šé¥â‚¬é¥å‚šî˜¹çžî„€ç©½éŽ³å…¼åš²é€æ¿‡æ•Žé‚æ›Ÿæ´¨å¨…ç»˜ç‘’å¨…çƒ˜î†‰éå²€åž±é˜Ñ…æ‘‰é¡æ—‚æ«“é­æ’¶çˆç»¾å¿•ç°©ç¼‡è‰°æ§œé“‡î…¡æ§¡é” ï½ˆç‰é” Â¤ç‰Šç‘—î‡ã‚¬ç‘•å€Ÿî„­"],["c540","ç’€ç–¯î„¶ç’æ’¹ç°¥éŸ¬å¶ˆç°¨æžç†»è­¦é–±æ´ªæƒé–»æŠ½æƒ–é–»æ´ªæƒ›é–»æŸ¥æƒˆé—‚ãˆ¤æ¹¼é—‡å½’æ¹¶é—Šå—Â¨æ¤¤ãƒ©îšœæ¤¹å‘´ï¹¥æ¤¹â‚¬æ¥±é¹ƒç¡æ¦„æ—ˆç“šæ¦˜î…¢å“Žæ§Žîˆžæ´žæ¦‰å‚žé™¡æ¥¹æ¿‹åŒ–æ¦§æ¬“ç¶”æ¦»ï¹‚æ¶§éŽç…ŽåŠµé¥å æ³­é¥å¤Šî„¸å®¸æ–¿çª‰è¤°åº¢åš³é€ã‚†ç‘ å§ï¼„äº¼éæ¨¼å·°é¡ã‚‡æžˆé§î†¾æ«–"],["c5a1","ç»‚å´‡çœç»«ç†»ä¼¨é‘±å€Ÿåšç‘—èŒ¶ã‚¯ç‘™è‰°ç•ç’æ ¬ç¤‚éŸ¬æˆ£ç°±æžï¿ åŽ›é–¼å‹¯æ†«é–¼æŽ—æº„é—‡é¹ƒç„¹é—Šä¾€ï½žæ¥—æ›¢îŸ³æ¤¹å¶‰ç¤æ¥æ°¶çœ½æ¦˜éç†¬æ¦˜å©šçªŠæ¦‰æ¥…å³æ¦»î„„å§œæ¦«æ–¿æ³´å®¸æ ¨åžé€ï½†æ•¨é€î…æ´­å¨†æ„®æ‘Žç»”å©„å ¡ç»«ï½‡é¥±ç»¾æ’¶ç°´ç»¾æ—‡åš”é“‡æ­Œæ¨‹é” è¾«ç•©é–­æ„°å€§é–¼ï½‰æ†¼é–¼ã‚‰æ½¹æ¤¤îˆžîš¡æ¤¹æ°¶îŸ¸æ¤¹æ¥…ç¦æ¥‚æ—ˆç£æ¥¸æ—ˆçæ¥¸æ ­ä¼æ¥¹ç†¼æ·®é¥æˆï¼‰é€î„‚ä»¦é§è¾©æ«œé­æ¥ƒç¶ˆç¼‡å £ç‰°é” ç¡…ã€ç’æ’¹ç•³"],["c640","ç’æ ¬å£ç’æ¶¢å™£é–¼îˆæ½…é—ˆå ¥æ½‰é—Šå—›â€œæ¤¹ç†¼î‚½æ¦„æ©€ç™æ¦‰å½’æ³›æ¥£å¥¸è‡æ¦§å›¬æ¤’æ¦»æ’æ€€å¨†æ «ä»¯ç»«î„‚ç¢‘é” æ˜î…éŸ¬ï¿ å™¥é–¼æŸ¥æ‡“æ¤¤éîš£æ¥‚æ ­î‚¾æ¦›å²€ä»±é­æ°³ç•¾é–¼çƒ½ç„¿æ¤¹ãˆ¤â”ç»¾æ»†ç–éŸ¬îˆå™®é–¼ä»‹æ‡¢é–¼å¥¸ç‹ˆæ¥¸æçŽ¯ç’žæ—ˆæ‡£æ¥¦æ°±åŸæ¤¹îˆîƒŒæ¥¦æ¶¢ç¬§ç»«ï¿½"],["c940","æ¶”å‚™ç®¿é‘é›å¯¶é˜å‚™ç«¾æ¶“å±¼ç®›æµœå¶…æ´é“·å±½ç¢‘è¤°å……ç¬éå›¦ç¬Œæ¶“î†»ç°±æµ å‚™ç²”æµ å å•’é•ç…Žå´¿é˜ç‘°æ¹¢æ¾¶å†¨ãŒçæ„¬æˆ¿éƒâ„ƒî†Šå§£å±¾çšµé–å¤¸å‰¯æ¶“é—´èŠ±æµ æ»€å“—æµ â€²ç²·æµ æ°¬åž–é–æ»ƒå´’é¦ãˆ æ¹¥æ¾¶æ¥€ãç€¹ä½¸ç•¡çæŽ‘ç›Žçžæ‘èƒŒç”¯å‹«ç°šæ´å‚šç¹…éŽ´å¤‹å¢£å§˜ï¿½"],["c9a1","å§˜èˆµçœ±å§˜æŒŽç›Žé˜î†¾å§²éœå©„Î©é‘²å©‡æ§¥æµ¼åºç´­æµ¼îƒ¿åæµ¼æ–¾æ§æµ¼â‚¬æµ èœ‚ç´™æµ¼æ¿…ç´“æµ¼å‘¬é¥¥æµ¼æ’²ç´•æµ ç¿ ç´¥éåžåžžé’å¤Šåžšé”ï¹€å°‡é–ç†·å´“é˜å©‚æ‚‹é¥â€³æ´˜é¦î†¼æ¹­é¦æ‘ãœæ¿¡â‚¬æ¿‚ç…Žî›ªæ¿‚è¯²ã‚¾æ¿‚å³°ã‚¿ç€›æ §çš¶çãƒ¥å¥”çžå“„è¢«çžæƒ§çª¡éªžé›ç°žå¯®å‚šç´°è¤°æ‘ç¹’è¹‡æ–¿ç¹ŒéŽµæ»„å¢³éŽµã‚†å¢¶éŽµï¸½å¢·éŽµæ¬å¢µéŽµæ°­å¢ºéƒîˆ›æ£¶éˆç‚¬æ¹½éˆå‘Šæºéˆçƒ˜æºˆéˆå…¼æ¹·å§˜æ¨»çœ´å§¹æŽ“ç–å§¹å¿”çœ¾å§¹æ—€çœ¿"],["ca40","å§¹å²€ä¼‡é—ç‚µå§¶é˜ç”µå¸‹é¢î†æ«©ç»Œç”µç¶‰é‘¹æ­Œå£–é‘ºâ‚¬é‘¹å€Ÿå£™é“å¶ˆã‚¾é–­æ¬“å€µé–­æ©€å€¹é–­æ—ˆæ§©é—ƒã‚‰æ§§é—ƒï½„ç¶Žæµ¼è®³èˆ°æµ£å¤‰ç¶‹æµ£ã‚„å­£æµ£Ñ‚ç¶Šæµ£ç†¶çµ¹æµ£æ¨¹è¾‘æµ¼å……ä¼Žæµ£â€³å•…éç‘°åž³é’ç‚²åžºé”î…žå§°é–å¤Šå´³é—æ’å¸‹é˜å¿“æƒéšå³°æƒ‡é›æ–¿æ†›éšæ¬æ‚³éšãƒ¥æ‚©"],["caa1","éšè—‰æ†¦é›ä½¸æƒƒéšã‚…æ†žé¥î†¼æ´¤é¥ãƒ¥æ½„é§å‘­æ½“é§å¤Šæ½’é§æŽ‘î˜«æ¿‚â‚¬æ¿¡ï¹€î›½æ¿¡çŠ²î›¼æ¿¡åº¡Î’æ¿¡æ„¬î›´æ¿¡ÑƒÎ‘ç€¹åº¡ç•³çã„¥è”¼å®€å¶…çŸŽå®€å çŸ‰å®€å¤ŠçŸ‘å®€å©‚çŸ„å®€æ’³çŸ”å®¸çŠ²ç¬‚ç”¯åº¡ç°¨æ´å¤Šç°©æ´å ç°«å¯®å‘­ç´³è¤°ç¨¿è•‰è¹‡æŽ‘ç¹Žè¹‡æ„¬å‡¯è¹‡ã„¥æ…¨è¹‡å†²ä¿Šè¹‡ã‚…æµšè¹‡å“„åˆŠè¹‡å³°ç‚•éŽ¬â‚¬è¹‡å­˜åŸ¡éŽ¶å†©å¦¼éŽ¶åº¢å§€éŽ¶æ—€å¦µéŽµè¾¨å£”éŽµçƒ˜å£ˆéŽ¶ä½¹å¦¶éŽµé”‹å£—éŽµå‰å£Œé€é”‹æ£¸éƒå­˜æ£¾éƒå‰æ¤€é‰å‘®æ½Ž"],["cb40","é‰æ¬æ½Ÿé‰å±¾æ½é‰æ¿‡æ½”é‰æ°­æ½’å§£æ„­çšºå§˜æ°­å¤‡å§¹Ñ„é²å¨Œå‹¬çŸ‰å¨Œå¿”åŒ—å§¹îˆ›æš´å¨Œæ°­æ¯å¨Œå›¨çŸ”å¨Œæ»„å®å§¹è™«é¥±å§¹ç»˜çŸŒéå¯¸ä¼œé—ï½‡å¨é˜ç•Œåª°é™å—™åª®é˜è™¹åª´éœæ› å¸¡éœæ’¶å¸žéœæŽ”æ•½é¢åœ­æž–é¤æ› æ®Žç»€å€Ÿâ‚¬ç£‹å€³é‘²æ¬’å€«é‘²æŽ•å€»é‘ºæ„¯å§€é‘ºå‘°å¦¿é‘ºæˆ£å§„"],["cba1","é‘ºå©…å¦°é‘ºå‹®å¤‡æ©å¤Žç©¶é–­ç†¼å‚é–­ãƒ©å€¿é–­Ñ‡åé—ƒä¼´æ§°é—ƒîˆžæ§¶æ¶“å……ç·²æµ£é—´ç·Ÿæµ£æˆ’ç·šæ¸šå›¦è•‰æµ£ç¿ ç·£æ¸šå‹ªæ¤’æµ£å±¼ç·±æµ£îƒç·´æµ£é€›ç·›æµ£é•ç·ªæ¸šæ»€ç·®æ¸šç‚°ç·¬æ¸šå‚™ç·¯æµ£î‚¡ç–†éç‚²å––éæƒ§åŸ–é’æ’åŸ‘é“å——åŸé”ç…Žå¯ é–å¬ªå°²é˜æŽ‘å¸žéœå›§æ‡£éœä½¸æ‹ºéœå‚šæ‹¡é›î‚¢æ‡žé›æƒ§æ‡ƒé›î„€æ‡˜é›ï¹€æ‹²é›îˆšæ†½é›çŠ²æŒŠé›ï½…æ‡…é›ã‚…æµ„é¥ç‘°æ¾‚é§æ’æ¾€é§î‚¢æ¾…é§æ¿æ¾é¨â‚¬é§é›æ¾”é§å†²æ¾Šé§ï¿½"],["cc40","é§ã„¥æ¾–æ¾¶å±½îšŠæ¿¡é›îž†æ¿®å¿“î“æ¿¡æ’î‘æ¿®ä½¸Î§æ¿¡ç…Žîˆæ¿®æ §Î¡æ¿¡è—‰î…æ¿®å Î¥æ¿®å›§î„›ç€›ãƒ¥ç•µç€¹æ›žçœ²çžå›§ä¼¯å®€ã‚…çŸ¤å®€é›å¸›å®€ã„¥é“‚å®€ç†·çŽ»å®€î…žå¹¶å®€î„é’µå®€æ¿†æ’­å®€è·ºèˆ¶å®€ï¹€ç¬šç”¯æ–¿ç¬å¯®ã„¥é¥¥å¯®ï½…æ¿€è¤°æ–¿ç·œè¤°æƒ§æµ‡è¹‡ç‚²éªéŽ¬î…Ÿâ‚¬ï¸½â‚¬æ¬â‚¬å‰â‚¬ï¿½"],["cca1","éŽ¬å­˜â‚¬å©ƒâ‚¬æ¥â‚¬è™«â‚¬æ°­â‚¬ç‚´â‚¬î„â‚¬ãˆ¡â‚¬å¶†â‚¬æ„­â‚¬î†½â‚¬æ’´â‚¬æˆžâ‚¬å±¾â‚¬å¤‹â‚¬æ»„åžŸéŽ´èŠ¥å§¯éŽ¶å­˜å«…éŽ¶ç‚¬å§«éŽ¶èˆµåª»éŽ¶î†½å§µéŽ¶îˆ›å¨€éŽ¶â•‚å§²éŽ¶å‘Šæ–€é‚ã„¦æŸ£é„å¤‹æ¤‰é„å‹¬æ§–é„å Ÿæ¤ˆé„å†©æ§‹é„å¶†æ§„éƒèŠ¥æ§•é„æ„­æµ‚éˆå©ƒç€°é‰î„ç€»é‹æŽ“æ¾é‰ç»˜ç…é‹å—˜ç€¯é‰å­˜ç€ºé‹å±¾æ¾“é‹ç†¸ç€¾é‹æ¬ç€®é‰èŠ¥ç€¬é‰å‘Šæ¾’é‹æ—€îƒ€å¨ˆâ‚¬å§ç‚¬ç™å§˜æ¿‡çŸ’å¨‰î„å€¡å¨‰î†½ç¡»å¨Œèˆµç¡µå¨Œî…ŸåŽ‚å¨Œé”‹ç¡±å¨‰å‚›åŸ å¨‰å†©ç¡¢å¨‰î…Ÿå·¢"],["cd40","å¨‰æŽ“ç¢€å¨Œå­˜çŸˆå¨Œæ¿‡çž¼å¨‰ç‚´ç¡›å¨²ç‰ˆç¡©å¨‰å›¨èˆ¶å¨‰è§„ç¡°å¨‰â•‚ç¡²éæ—‚å€¶éå‘¯å€±éå—™å€“éæˆ å€´éå‚œå€¸éå†ªå£€é™æ «åª¼é™æ¨¼åªºé™æ»…å«†é™æ—‚å«é™å²€å«…éœã‚‡å¸¯éœî… å¸µéœãˆ¢å¸¬éœî„‚å¸©é¡æ¿ˆæ‘ é¢è·¨æ™™é¢å‰§æžŒé¤æ¨¼æ¯Œé©å´‡æ´·é©æ‰®æµ€é­å“¥ç†‚é­åœ­ç†é­ï¿½"],["cda1","é­é£Žîš‡ç»€è·¨îŠç»Œå“¥â”—ç»”è¤é’¡ç»¯å€Ÿâ‚¬ä½ƒå€§é‘²î†¿å…é‘²æ­ŒåŸé‘²î…¡åž¹é‘ºçŠºåª­é‘ºî‚¥å§Žé‘ºæ¨¿å§é‘ºä½ƒå§§é‘ºî†¿å¨‚é‘ºç‚¶å§¾é‘ºç£‹å§©é‘ºÂ¤å§ªé‘»å‚å§¢é‘»å†­å§¸é‘ºãˆ£æ«šé“îˆæ«—é“î†¿çŽæ©æŽ•ç¹ˆæ©æ’¹ç¹Šæ©æ ¬ç¹’æ©æ¥…å›é–­æ’®å—é–­æŠ½å˜é—ƒå½’æ¨ˆé—ƒå¥¸æ¨…é—„å†§ç¹Šæ·‡å‘¬ç¹æ¸šè¹­ç¹…æ·‡å¬©ç¸¼æ·‡æ–¾ç¹™æ·‡æ¬Žå‡€æ¸šå……ç¹˜æ·‡å›¦ç¹“æ¸šè½°ç¸ºæ¸šé€›æ¥·é“å‹«å¢˜é•â‚¬é•å‚šå°³é—ç…Žå¸¡é˜æ §å¸£é˜æ¨ºæ„éœâ€³æŒ±éœãƒ¥æ¹"],["ce40","éå†­å¯¦éœå³°æŒ³éæ §æŒ¾éå‘­æ¯éœçŠ²æ‡“éœç…ŽæŒ—éœæƒ§æ‡–éç‚²æŒµé¨é›ç‹é¨ç†·ç“é¨å±½ç„é¨æ¿†çˆé¨æ–¿ç…é¨å¿“ç†é¨ãƒ¥ç‡é¨æ›žï¼”æ¾¶å¶…îš˜æ¿®â€³î£æ¿®î†¼â–ˆæ¿®åžî¢æ¿®å“„Ð«æ¿®ç…ŽÐ¤æ¿®ã‚…Ð æ¿®å³°î æ¿®â•Ð¡æ¿®é›î¥æ¿®æƒ§Ð¢æ¿®î…žî…¿çžå±½ç¡±å®„æ¨ºç¡¨å®„æ¥€ç¡§å®„ï¿½"],["cea1","å®„ç‚²ç¡½å®„å¤Šç¡£å®„å©‚ç¡¸å®„æ’³ç¡µå®„å¿“ç¡¤å®„å——ç¡¯å®„ç†·æŽ£å®¸ç‘°æµ®ç”¯ãˆ ç¦ç”¯çŠ²è¢±æ´æ¿æ°¦æ´ãˆ ç°ºæ´ï½…äº¥å¯®å›§ç±è¤°æ §ç· éŽ¬é”‹â‚¬è§„ä»ˆéŽ­å‰ä»¦éŽ­å‘®äº¾éŽ­å›¨äº¯éŽ­æ¶™äº´éŽ­â‚¬éŽ­å‚›ä»§éŽ¬ã‚†äºœéŽ­æ¨»ä»¸éŽ­î†½å¢éŽµå†©å«ƒéŽ¸å¶†å¯¢éŽ·åž«å¯§éŽ¸å†©å«¬éŽ·è§„å¯©éŽ¸å±¾å«ºéŽ·èˆµå¯‘éŽ¸æ’´å¯¯éŽ·çƒ˜å¯±éŽ·ç»˜å«²éä½¹æ™é‚î…æŸ¨é„èˆµæ§¨é„å‰æ¨€é„æ»„æ§®é„ãˆ¡æ§¼é„î‚£æ¨…é„æ¿‡æ§¾é„è§„æ§·éˆå¿”æ¹ŠéŒä½¹ç…µéŒå Ÿçª"],["cf40","éŒæ»„ç®éŒå‘Šç…’éŒâ‚¬é‹é”‹ç„»éŒî‚£ç… éŒç†¸ç¥éŒå¶†ç£éŒé”‹ç…»éŒî†½ç…ŸéŒå‚›ç©éŒåº¢ç…£éŒç‰ˆç¢éŒå…¼ç„¼éŒî…Ÿç…‚é‹î†½ç…¢éŒæ¶™ç†€éŒå¤‹ç…€éŒå†©ç…ªéŒå¬«îƒƒå¨ˆå‚›ç•¡å¨ˆèˆµç˜±å§£æ¨»ç™„å§˜çŠ³å•Šå¨²ã„¦åˆ›å¨²î…Ÿç¤‹å¨²å…¼çº¯å¨²æŽ“ç£°å¨‰æ°­é—¯å¨²å‹¬ç¤„å¨²çƒ˜ç¤†å¨²æˆžç£¤å¨²æ¿‡ç¥©"],["cfa1","å¨²ä½¹ç¤ƒå¨²é”‹ç£§å¨²å¿”ç¥¤å¨²å›¨ç¤Œå¨²î„ç£®å¨²ãˆ¡ç£¯å¨²æ„®å¡éç†ºå©éè¾©å˜éï¼„åžéç”µåé—ä½ºå¢˜é—å©„å£ƒé—æ‰®å£‹é—î†¾åª»é™ã‚‡å«§é™î‚¤å«™é™î†å«¤é™ï½‡å·ºéå²€å¼¬éå ¢å¼²éœåœ­å¹Žéœç”µå¹‹éî‚¤å¹™éå›©å¹˜éå†ªå¼³éœå“¥å¼¸é¡î„‚æ‘¦é¢î†¾æ™£é£å ¢æž¾é¤î†æ«£é©å‹­æ¹€éªå†ªæ¸¼éªå‘¯æ¹‚é©é£Žæµ•é©è™¹ç…£é­ã„§çˆ¢é®æˆ çˆ³é®å‘¯çˆ¯é®å¿•çˆ­é®å¤ŒçˆŸé®æ’¶îšç»å²€îšç»å‘¯îš‰ç»‰æ› î’ç»‰å¿•î›ç»‰åº£ç‰"],["d040","ç»Œå‰§ç£ç»—â‚¬ç»—ä½ºç„™ç»«å“¥æƒ«ç»«è·¨çž¼ç»®ä½ºç£§ç»±å ¢ç£¥ç¼ƒæ¨¼ç·«ç¼‡å¶‡æªé‘°å›ªâ‚¬åº¤â‚¬å¿šâ‚¬æ—‡â‚¬ç–¯å„¤é‘³å›ªå„¬é‘³æˆ£å„“é‘³å‚å„›é‘³å‘°å„¯é‘³æ¬’å„¨é‘³å©…å„ é‘³å¤Žå„šé‘³æ¥„å„²é‘³å¶ˆåš³é‘¸Â¤å§…é‘»æ¬’å¬€é‘»ç¡…å¯šé‘»ã„¨å¯‘é‘»æ›¡å°¯é‘»î‚¥å«‹é‘»ç£‹å«­é‘»Â¤å«´é‘»ä½ƒå¯£é‘»æ˜å«¸é‘»æ‹Œå«ª"],["d0a1","é‘»ã‚ˆå«šé‘»é¸¿å«µé‘»î…¡æ«¡é“ç£‹æ«¦é“å® î”†ç›åº¤Â¨ç›î‡ã€…ç‘™æ’¹â–Œç‘·å›ªæŒ¡æ©ï½ˆä¿Šæ©î†¿ç¹é–®éå¨é–­å—å„ é–®å‘´å©é–®å›¬å„–é–®å ¥åšé–²æ’»æª¾é—„å¿›æª»é—„æ’»æª´é—„åº¡â‚¬ç‚²â‚¬å‘­â‚¬å›§â‚¬æ’³â‚¬ãˆ â‚¬æ¿â‚¬æ¶—åº·æ·‡æ‘â‚¬å†²â‚¬å³°â‚¬îƒ¿æ…·æ·‡å³°â‚¬æ¥€â‚¬æ»ƒâ‚¬çŠ²â‚¬Ñƒâ‚¬é›â‚¬îˆšâ‚¬åžâ‚¬åº¡åŽ·éæ–¿å•Œé‘å©‚å™­é‘å‘­å™²é‘åº¡å¢¶é“æ°¬å¢¥é“ç‚²å¢´é“æ›žå¢·é•å¶…å¯§é˜ç‚²æ• éãˆ æ•†éžæŽ‘æ‘Ÿéå†²æ‘›éžæ°¬æ‘½éžå‹«æ”¬éî‚¢æ”½éžå‘­æ‘«"],["d140","éžå©‚æ‘¶éå³°æ‘³éçŠ²æ”·éžå†¨æ”±é¦ä½¸æ¸¹é©å±½ç‰ªé©æ›žç…‰é¨å“„ç„¼é¨è—‰ç±é¨ç¨¿ç¦é¨åž®ç„½é©æ„¬ç©é©ä½¸î˜³æ¿‚å©‚îž¿æ¿žæ §Åæ¿žî†¼ã€žæ¿žå¿“îž½æ¿žå©‚îŸ„æ¿žå†²î„¥ç€¹Ñƒî†„ç€¹î„€çšŸçžæ §çŒå®„î„€æ™¨å®„î†¼æ½®å®„å³°ç£¤å®„ç‘°ä¿¯ç”¯ã„¥é…£æ´î†¼é‚¯æ´î„€æ±²å¯®æ¿æ¶§éŽ­æ¿‡ä»›éŽ­ï¿½"],["d1a1","éŽ­ä½¹å„éŽ®å Ÿå€‹éŽ®æŽ“å€ŽéŽ®æ¿‡å€‘éŽ®æ›Ÿå€¹éŽ®æ¥å€—éŽ®æ»„å€¤éŽ´æ¬å¢•éŽ·å‰å¯ªéŽ¹æ ¨å°™éŽ¹å‹¬å´ŠéŽ¸èˆµå´ˆéŽ»ã‚†å°®éŽ¹å¬«å´éŽ¸å…¼å°’éŽ¹ä½¹å°¨éŽ¹æ¨»å´éŽ¹æ¬å°›éŽ¹å›¨å°¦éŽ¹æ°­å´™éŽ¸å‘Šå´¡éŽ¹â‚¬éŽ¹å Ÿæ™©éå—˜æ¢¿éƒå†©æ¢½éƒå‚›æª´é…ç†¸æª±é…æˆžæ¹Œéˆæ’´ç‰Šéæ°­î”Žéå‰ç‰«éç»˜î”å¦—å¿”çˆ¾éè¾¨ç‰…éåž«ç‰œéî…Ÿç‰¤å¦—åº¢î”‰éå­˜ç‰†éæŽ“çˆºéï¸½ç‰—éî†½î”’éçƒ˜ç‰“éçŠ³îƒ‡å¨†îˆ›îƒˆå¨†è¾¨îƒå§î…¡å€å¨ˆå Ÿî‡›å§£ï¿½"],["d240","å§£ã„¦î‡˜å§£ãˆ¡î‡œå§˜ãƒ¦å²›å¨´ï½†ä¸¹å¨´èˆµç£µå¨´â„ƒç¨ˆå¨´æ¨»è€½å¨´î…Ÿå¼¹å¨‘æˆžç§¿å¨£îˆ›æ‚¼å¨‘å—˜ç¦å¨´Ñ„ç¦’å¨‘æ¥è›‹å¨´å…¼ç¦‘å¨‘å‚›ç¨‘å¨²îˆ›èƒ†å¨‘å¬«ç¨»å¨‘â‚¬å¨‘å‹¬ç¤€å¨‘å†©ç¥·å¨´èŠ¥æ¡£å¨‘æ„®å„¨é‘æ’¶å„œé‘æ¿ˆå„–ç¼‚åœ­å„®é‘æ¥ƒå„é‘ç‚µå„¬é‘æ—‚å„˜é‘å‘¯å„é‘å›©å„¦é‘åº£å„­é—å‚œå£"],["d2a1","é—é£Žå£Žéšâ‚¬é™è™¹å«¶é™å‰§å«¸é™å´‡å«½éšä½ºå½„éæ¬‘å½žéæ «å¹–éÑ…å½›éâ•ƒå½éæŽ”å½Œéæ—‚å½Žéæ°±å½ˆéæ¨¼å½£é¡ç‚µæ‘•é¡å¯¸æ‘°é¢ï¼„æšƒé£ç†ºæŸŠé¥ä½ºæŸ£é¥å‹­æ¢¹é¤è·¨æŸ–é¤è™¹æ®œé©å¤Œæ¹žéªæ¶šæ¹Šéªæ’¶æ¹Œéªï½‡æ¹‹éªæ› æ¹™éªæ°±æ¹¤éªÑ…ç‰é®î„‚ç‰é®ç”µç‰¤é®ã„§ç‰£é®î‚¤ç‰Žé®â•ƒç‰«é®î†ç‰¨ç»æ—‚îš ç»å¿•îš¡ç»æ’¶îš—ç»æˆ Ð™ç»‰î„‚î¥ç»‰î†¾Ð›ç»‰î†î¡ç»‰ç‚µî¢ç»å—™ç•ç»å‘¯ç˜ç»å²€ç–ç»å›©ç®ç»—ï¿½"],["d340","ç»—å‹­ç‘©ç»—å‘¯ç‘¥ç»—å ¢ç‘ ç»—åº£ç‘ç»—æŽ”çŸ‚ç»®æˆ çŸˆç»®å²€çŸ†ç»®å¶‡çŸƒç»±ç‚µç¤‰ç»±æˆ ç£¶ç»±æ¨¼ç¤€ç»±æ’¶ç¤‹ç»±æŽ”ç£¸ç»±å²€ç¶”ç¼ƒï¼„ç¶–ç¼ƒçŠµç¶•ç¼ƒæ¶šç·°ç¼‡æŽ”ç¸¾ç¼ˆå‚œç¸ºé‘°æ ¬â‚¬æâ‚¬ç¡…å…’é‘³èŒ¶å…é‘³ä½ƒå‰šé‘³æ˜å‰™é‘¸ä½½åŸŠé‘¸ãƒ¨å°¦é‘¼î…¡å´‰é‘¼æ¬’å´™é‘¼ãƒ¨å´ é‘¼èƒ¯å´„é‘¼ï¹å¯½é‘¼ï¿½"],["d3a1","é‘½å‚å´•é‘¼æ¶œå°“é‘¼å £å°²é‘½å¶ˆå¯²é‘¼ã‚ˆå°ƒé‘¼ç–¯å°Ÿé‘¼â•„å´Œé‘½å‘°å´’é‘½æ’¹å°€é‘¼î„ƒå´‘é‘¼Ñ†å´é“æ’¹æª¼é““ãˆ£æ¯ƒé““æ ¬æ®Ÿé““æˆ£æ®²é““å›ªæ®«é““å—šæ®é““æ°³æ®”é““ãƒ¨æ®­é““Â¤æ¯€é““æ›¡æ®¬é““åº¤æ®±é““æ„¯æ®§ç›å†­î”‰ç›î…¡ã€‰ç›æƒ°ã€”çšâ‚¬ç›è¾«ã€‘ç›îˆî•¨ç›æã€ˆç›è‰°âŠ•ç’žå›ªçç’žæ˜è ç’¨ï½ˆåˆ€ç’§æ­Œå…œç“’ç–¯æŠ–æŒæˆ£ç²¨æ©æåº·é–«å‚é æ©å©šâ‚¬å‹®è€ƒæ©å •å„¢é–®çŠ»å„¥é–®æ°¶å„¯é–®ç†¼å„±é–®æ©€å„§é–®æ¥…å„¨é–®ã‚‰åŽ«"],["d440","é–°åº¨åŽªé–²æ›¢åš”é–²æ°¶æ«†é—„ç†¼æ¯¤æ¤‹ï½‰ç¶æ¥îˆ™ç®é‹æ¿ä»¾é‹â€³ä»¦é‹çŠ²äº¾é‹å¬ªä»¢é‹æ’äºªé‹å¶…äº–é‹æ¶˜äº°é‹ãˆ â‚¬æ›žäºé‹ç†·ä»¼é‹î‚¢ä»¯é‹ã‚…äºžé‹â‚¬é‹î†¼ä¼‹é‹æ¥€äº¼é‘æ„¬å£‚é“î…žå£ƒé“î†¼å«‹é•æ’³å°›é˜æ»ƒæš¤éŸè·ºæ•¿éŸå¶…æ™²éžæ‘æ•§éŸæˆæšéžè·ºæ•¸éžæ¿æ™µéŸï¿½"],["d4a1","éžå±½æ•³éŸãƒ¥æ™­éžç‘°æ™¥éžî…žæ•¾éŸâ‚¬éŸå¬ªæ¹‚é¦å›§ç†é«æ–¿ç…é©è·ºç…–é©æ‘çˆ›é©î…žç†ƒé«å ç…¾é«å¬ªç…¶é©å¿“çˆ£é©î†¼ç…Ÿé©æ’ç…¡é©î„€ç…›é«åº¡ç†‚é«æ„¬ç…£é«ä½¸çˆ©é©åžç…©é©æ¿çˆ«é«å‹«îš¡æ¿ çŠ²îŸµæ¿ æ›žâ”ƒæ¿ ç‚²Çœæ¿žé›â”‰æ¿ æ„¬îŸ¼æ¿ ãƒ¥â”ˆæ¿ æ’³â”€æ¿ æ¥€ï¹¥æ¿ æ¿†îŸ°æ¿ å‹«îŸ¸æ¿ å ç›æ¿žæƒ§îŸ«æ¿žç‘°îŸªæ¿ æ¿â”…æ¿ å›§îŸ¯æ¿ æ §ï¹¤æ¿ æ»ƒî„«ç€›î†¼ç˜‰ç€µâ‚¬çžæ¬ç¤Šå®•å¬ªç¤‰å®•æ°¬ç¤Œå®•å±½å·å®•å¶…å¤„å®•ãƒ¥ç£¸"],["d540","å®•æ¿ç£¼å®•ï½…ç¤‹å®•î†¼å¦‡ç”¯æ‘ç½•æ´æ‘æ±—æ´æ’æ’¼å¯®è·ºå‡ å¯°æ¶˜ç·°å¯°ç†¸å€žéŽ®æ„­å€–éŽ®ç‚¬å˜éŽ®çƒ˜å„žéŽ¯æ—€å„šéŽ¯ã‚†å„¥éŽ¯æ¿‡å„“éŽ®è¾¨å„§éŽ®é”‹å„•éŽ®æŒŽå„éŽ¯å¶†å„‰éŽ¸å‰å´¶éŽºå©ƒå·¶éŽ¹èŠ¥å¹—éŽºç‚´å¹éŽºæ¿‡å¸¡éŽºî‚£å¸‹éŽ¹îˆ›å·¼éŽºæ„­åµéŽºîˆ›åµ‰éŽºæ»„åµ€éŽºî†½åµ“éŽºã‚†å°°éŽºï¿½"],["d5a1","éŽ¹å‘Šå·ºéŽºä½¹å¸’éŽºå¶†åµƒéæ’´æ£ˆé…ãƒ¦æ«‹é…æ¶™æ«ƒé…æ»„æ«Œéˆæ¨»ã€å§Šå›¨î•µå§Šæ»„â€¦å¦—î†½î©å§Šî‚£îš›å¦—îˆ›â…²å§Šî„â…¸å¦—åž«ã€ˆå§Šå‰î•´å¦—é”‹î•·å¦—å…¼ï½žå¦—å‰â…¹å§Šâ‚¬å¦—è¾¨ã€å§Šæ¶™î•»å§Šå¬«î–…å§Šå¤‹â…³å¦—å‘Šã€å§Šæˆžî•±å§Šå©ƒã€—å¨†èˆµîƒŽå¨†é”‹îƒ“å¨ˆæˆžç•¯å¨ˆå¶†ç•®å¨ˆå±¾è”¼å¨£â‚¬å¨‘î‚£æ´žå¨‘è™«å‹¾å¨‘î„çå¨£ãˆ¡æ–—å¨£èˆµçª‹å¨“â‚¬å¨£å Ÿçª¢å¨£ç†¸çªŽå¨‘ç‚¬ä¼å¨£æ»„çª›å¨£æ¶™åå¨£å©ƒç£å¨£î…Ÿé’’å¨‘çƒ˜çªŒå¨£å‚›çª‚å¨£ï¿½"],["d640","å¨£æ„­å‡¡å¨£æ’´æ–¹å¨£æ¥ç©½å¨£ï½†ç—˜é‘è™¹å‰­é‘é£Žå‰¹é‘å¯¸å‰¬é‘æ‰®å‰Ÿé‘å´‡å‰±é‘è‚©å…›é’å—™å‰µé’â‚¬é‘å“¥å…Œé’å¬¬å‰›é’åº£å£˜é—è¤å£–é—è·¨å¯¾éšæ¥ƒå¯šéšæˆ å¯´éšå©„å¯›é™è·¨å¯©éšç‚µå·¿éå‰å¾ƒéç”µæ‚‡éžä½ºå¾‘éžå›©æ‚éè™¹å¾éè·¨æ‚“éžå¬¬å½ºéžå ¢æšé£ï½‡æ£Šé¥æŽ”æ£Œ"],["d6a1","é¥å¬¬æ£‡é¥æˆ æ£Žé¨å¿•æ®™é©æ’¶æ¹½éªîˆœæ¹±éªè¾©æ¹¶éªå¯¸æ¹·éªç•Œæ¹§éªè¤æ¹¹çº­å ¢î”—çº­å¤Œî”’çº­å©„î”‘é®ï¸¾î”Šçº­æ„®ã‚¤ç»Ñ…ã‚©ç»î†ã‚£ç»î‚¤ã‚¡ç»‚è¤Ð¨ç»‰å“¥Ð¤ç»‰é£Žçœç»æ—‚çç»—ç”µç“ç»—å¯¸îƒ€ç»—æ‰®î‚½ç»—ã‚‡îƒŽç»—æ¨¼îƒ…ç»—æ¿ˆîƒŒç»—î‚¤îƒˆç»—îˆœîƒç»—å“¥ç‘²ç»—ï½‡çŸ“ç»®æ¨¼çŸ•ç»®ï½‡å¹ç»±ç•Œé”¤ç»±å‰æ˜¥ç»²å‘¯èˆ¹ç»±â•ƒç¥¦ç»²å›©æ·³ç»±è·¨ç¥³ç»±è¤å·ç¼ƒï½‡ç·¯ç¼‡æ»…ç··ç¼‡æ¶šç¹†ç¼ˆå¬¬ç¹Šç¼ˆæ„®ç¹Žç¼ˆå›©ç¹Œç¼ˆå¤Žâ‚¬ï¿½"],["d740","é‘°ç‚¶â‚¬æ¶œäº£é‘±å†­äºªé‘´æ¨¿åŠŒé‘´æ¬’å‰¾é‘´î…¡åŠ…é‘´î„ƒåŠ„é‘´Â¤å‰·é‘´Ñ†åŠƒé‘´ãˆ£åžœé‘¸æ­ŒåŸ‘é‘¸é¸¿åŸ“é‘¸èŒ¶å£Œé‘¾æ„¯å¸²é‘¾ã„¨å¸Šé‘½é¸¿åµ†é‘¾ã‚ˆåµˆé‘¾å¿šå·µé‘¾æ›¡å¸£é‘½ä½ƒå¸žé‘¾â•„åµ”é‘¾å†­å¸‰é‘¾æ¿Šå¸¥é‘¾î‡å¸‡é‘½æå¸´é‘¾îˆå·¿é‘¾æ¥„å¹‡é‘½èƒ¯å¸µé‘¾å›ªå¹ƒé‘½æƒ°å¸¤é“æ¬’æ«€é““èƒ¯æ¯ž"],["d7a1","é“”å‚æ³šé“”å‘°æ¯¢é““æ‹Œæ³©é““ç¡…æ¯˜é““æ­Œæ³´é““ç£‹æ¯£é““è‰°æ³é““å€Ÿæ¯¦ç›æŽ•î•®çšæ›¡â…·çšãˆ£â…¹çšæ°³î•¶çšÂ¤î–„çšæ¨¿â…¶çšæ¬’î–€çšæ¥„â…³çšî„ƒî•±çšæ’¹î•³ç‘•å‚î›ç‘™æ¬’îšç‘·æ‹ŒÄ›ç‘·î„ƒîŸ„ç’‹ç¡…ç›Žç’žæ»†ç—ç’žå€Ÿæ’­ç’§å€Ÿç¥·ç’§ç¡…éƒ½ç’ºå‚è±†ç“’èƒ¯ç©ªæŒæ¨¿ç²¸æŒæ¿Šç²¶æŒæ¥„ç²»æŒï¿ â‚¬ã‚‰â‚¬å¬®â‚¬æˆ¦â‚¬æ»ˆâ‚¬å²„â‚¬ï¿ å„»é–®îˆå„¼é–®æ’®å„¾é–®æŠ½å„Ÿé–®î‚¦å„¸é–®â•…åŽ²é–°æ©€åŽ·é–°æ’»åŽ±é–²î„„åš§é–²éåš¦é–²æåš–é–²å½’åšœ"],["d840","é–²î‚¦åšªé–²ã„©åš é—€æ´ªæž‚é—å ¥æ«¦é—„î…¢æ«•é—„éæ«™é—…å—æ½½é—‹å‹¯ï¼…æ££æ¥€å€¹éŒæ›žå€²éŒç‚²å€ éŒï½…å€‘éŒå±½å€¤éŒæ¿†ä»ºéŒæ»ƒå€°éŒå‚šå€—éç†·åšé–æŽ‘å¯«é˜ã‚…å¸¶é æˆæž¿é ãƒ¥æŸ‡éŸå³°æª¯é ãˆ æž”é å æžé é›æ¹é ï½…æž“é ã‚…æš¯é å±½æž½éŸåž®æž™é â€³æžŽé¦å±½ç‰˜é«ï¿½"],["d8a1","é«æ¬ç‰‰é«Ñƒç‰é«ã„¥ç…¹æ¿‰å ç‰“é«æ»ƒç‰„é«å†²ç‰½é«è·ºç‰£é«ç‘°ç‰³é«î…žç‰žé«è¯²ã‚¡æ¿¯îˆšç¢æ¿¯ç†·â”–æ¿¯ãˆ ç®æ¿ ç¨¿î€…æ¿ ç…Žî€„æ¿¯î„€ç£æ¿¯î†¼Çšæ¿¯å‹«ç–æ¿¯æ¥€çŒæ¿¯å¬ªî€ˆæ¿ è¯²â”™æ¿¯å±½çªæ¿¯å¿“ç¡æ¿¯æ¿†î‡Ÿç€µå¶…ç˜šç€µæ–¿ç˜§ç€µå©‚ç˜žçå±½éžå®•å³°ç¥ªå®“î‚¢ç¥¦å®“å¬ªçº¯å®•é›ç¥½å®“åº¡ç¦ƒå®•å†²æ˜¥å®“æŽ‘å”‡å®•åžç¦‰å®“å‚šåž‚å®“å¤Šé”¤å®•ç…ŽåºŠå®•è·ºç¥¤å®“å‘­ç®˜éªžä½¸ç¶å¯°ï¹€èŒŽå¯°î‚£å„”éŽ®è§„å„—éŽ¯ãˆ¡å„™éŽ¯å‹¬å‰¶"],["d940","éŽ¯å‰å‰¨éŽ°æ ¨å‰ éŽ¯åž«å‰µéŽ¯å‘Šå…—éŽ¯ç‚¬å„ŠéŽ°å†©å‰ºéŽ°æ¿‡å‰±éŽ¯æŒŽå‰ŸéŽ°å¬«å¢›éŽºæ—€å¹ˆéŽºç‰ˆå¼¾éŽ»ãƒ¦å½£éŽ»îˆ›å¼®éŽ¾æ¿‡å½¸éŽ»å©ƒå½”éŽ»èˆµå½†éŽ»å‰å½½éŽ½â„ƒå½‘éŽºç‚¬å½ŽéŽ»æ»„å¼°éŽ»æ¨»å½„éŽ»å‚›å¼´éŽ»å±¾å¼¸éŽ»å Ÿå½´éŽ»æ¥å½Šé€å‰æš“éî…æšéæ»„æš”éãƒ¦æžŒé‚æ¿‡æž®é‚î†½æ£Žéƒï¿½"],["d9a1","é…å…¼æ«–é…ç»˜æ®Œé…è¾¨æ«£é…î…æ«œéˆä½¹î˜±å¦«æ’´î˜©å¦«æ»„ãŠå¦«î„ï¼Šå¦«è¾¨î˜´å¦«æ ¨ï¼—å¦«î‚£ï¿¥å¦«èˆµî˜¸å¦žæ„­ï¼“å¦«â„ƒî˜¬å¦«å±¾î˜­å¦¤ç‰ˆâ’‹å¦žæˆžï¼å¦«å—˜î˜¹å¦«å‘Šî—•å¦«èŠ¥ï¼œå¦«ã„¦î˜°å¦žå©ƒî˜¼å¦«åº¢î—å¦«æ¿‡î—£å¦«ï¸½ï¼”å¦«æˆžî˜«å¦«æ—€ï¼‰å¦žæ›Ÿã…å¦«å›¨îƒ”å¨†ç»˜îƒšå¨†å…¼ç•¶å¨ˆæ¥ç•½å¨ˆæ›Ÿî†”å§£ç‰ˆî‡§å§£è™«éžå¨£å…¼ç®šå©€å›¨ç¬©å©€å¤‹ç°£å¨“å…¼é™„å©€å‘®è€¿å¨“î‚£ç¼šå©€ä½¹ç¯€å©€è™«ç¬¢å¨“è™«ç®£å©€â‚¬å©€æˆžå¯Œå¨“å†©åºœå©€ï¿½"],["da40","å©€ã„¦ç®¿å©€â„ƒå‰¯å¨“ã„¦ç¯„å©€è¾¨å…¬å¨“è§„æ¶ªå¨“ç‰ˆç®µå©€ãƒ¦æŠšå©€å‘Šå·¥å©€é”‹ç®·å©€è§„ç®³å©€ï¸½å‚…å¨“èˆµç®½é’çŠµåŠ„é’îˆœå…“é’î†¾åŠšé’ï½‡åŠŒé’ãˆ¢åŠœé’ç†ºåŠé’è™¹å‰¾é—å¬¬å¢¯é˜å ¢å¦·é˜å—™å¦³é˜å¬¬å¯¬éšå¬¬å° éšãˆ¢å°¡éšå´‡å°ŽéšèŒ¬å°›éšï¸¾å°ˆéšç”µå¯£éžî†¾æƒ‰éžæ‰®æƒˆéžï¿½"],["daa1","éžæ°±æ‚ºéžî… æƒéžã‚‡æ‚¾éžæ¿ˆæƒ„éžçŠµæƒ’é¡è¤æ•®é£îˆœæššé¥Ñ…æ£œé¥ï¼„æ£ªé¥æ¿ˆæ£¢é¥ã‚‡æ£—é¨æ› æ®¥é©æ°±æ½Œé«å›©æ½‰é«å¶‡æ½Šé«å©„æ½•é«å¬¬æ½“é­ç‚µç…¬çº­çŠµÂ·çº­ãƒ§î”¡çº­î… â€çº­î†â€˜çº­æ‰®ã€…çº­ã„§î”£çº­ãˆ¢ã‚´ç»å´‡ã‚²ç»æ‰®â–Šç»‹å©„â–‹ç»‹å²€â–Œç»æ¬‘î£ç»”ã‚‡ç““ç»—è¤ç“Œç»›å ¢ç“•ç»›åº£ç“ˆç»›æ¨¼ç“ç»®ãˆ¢çŸ ç»®ã„§ç—…ç»²æ¨¼å¼¹ç»²ï½‡ç¥¿ç»²æ «æŽ¸ç»²î†ç¥»ç»²î… ç¦ç»²î‚¤ç¥¾ç»²æ—‚æ—¦ç»²æˆ ç¦‘ç»²åº£å­£ç¼‚è·¨æ¸"],["db40","ç¼ƒï¸¾åŠ²ç¼‡çŠµå°½ç¼ˆæ¥„äº¼é‘±å¿šäº¹é‘³æå„Ÿé‘µå†­åŽžé‘µæŽ•åŽªé‘µå›ªåŠ·é‘µå¶ˆåŠ´é‘·ï¹åš é‘·ç–¯åš«é‘·ç¡…åžŠé‘¸è‰°åŸ¥é‘¸èƒ¯å£é‘¼æ˜å¼¿é‘¿ç¡…æ‚¾é‘¿â‚¬é‘¿ã„¨æ‚žé‘¿Ñ†å½œé‘¿è‰°å½¾é’€æ„¯å¼³é‘¿å £å½¨é‘¿ï½ˆå¹™é’€ä½½å½Žé‘¿ãƒ¨å½‰é‘¿èƒ¯å½™é‘¿å¬­å¼¾é‘¿æ ¬å½½é‘¿å¤Žæ‚é’€å¿šå½é’€æˆ£æ‚Šé‘¿å‚å½¸"],["dba1","é‘¿æ›¡å¾é‘¿å›ªå½‚é‘¿î‡æ‚¡é‘¿å†­å½«é‘¿î†¿å¼°é‘¿æ˜å½ˆé‘¿ãˆ£æ‚°é‘¿æ¶œå¾“é“”æ¨¿æ´Ÿé“”ï¹æ´†é“”ï½ˆæ´‘é“”î‡æ´•é“”î‚¥æ´”é“”î„ƒæ´¨é“”æ¥„æ´¦é“”æˆ£î”ç›æ ¬î”šçšé¸¿î—œçšç¡…â’ç‘â‚¬çšæâ’çšè‰°â’Žçšå€Ÿâ’‰ç‘œä½½î—Žç‘•æ›¡î›½ç‘•æ¥„î¢ç‘™æ°³î ç‘­åº¤îŸ«ç‘·ç¡…îŸ¶ç‘­â‚¬ç‘­æ¥„îŸµç‘­å‹®ï¹¨ç‘­æŽ•ï¹«ç‘­æˆ£îŸ¨ç‘­å²ƒîŸ­ç’žç†»çž¾ç’¨â‚¬ç’¨é¸¿ç°¿ç’¨æ‹Œè¡¥ç’¨ä½ƒç§³ç“’â‚¬ç“’å¤Žçªç’ºæ’¹ç©½ç’ºå›ªçªŽç’ºæ»†çª‚ç’ºæ›¡çª“ç’ºå £çªç’ºå‘°åŒ–æŒç–¯ç¼“"],["dc40","æŒç¡…æ²ªæŒî†¿äº’æŒä½ƒæˆ·æŒã„¨æ¬¢æŒî‚¥æ§æŒî„ƒæ·®æŒâ•…â‚¬î…¢â‚¬æ’®â‚¬îˆžå‰¢é–¯î„„å‰Ÿé–®å—å…—é–¯å ¥å…é–®å©šå‰šé–¯â‚¬é–¯å›¬å‰ é–¯å†®å€é–°ã‚‰åŽ½é–°ãˆ¤åŽ¾é–³ä¾€åž”é–³ãƒ©åž‰é–³æ°¶åž¿é–³å¿›åž–é–³â‚¬é–³æŽ—åš³é–²ä»‹åžŽé–³å‹¯åŸ€é–³å‚žåž³é–³ã‚‰åž¯é–³æ¥…åžé–³æ ­æš¬é—å¶‰æžŒé—æ„°æ®—é—„é¹ƒæ®˜"],["dca1","é—…å¤æ®é—…â‚¬é—†å‚žæ³©é—†å†®æ´·é—†ä¼´æ½¿é—ˆä¼´æ¾é—‹å›¬â…¸æ¤‹î‚¦è‚ æ¦›é€›ç°æµœå‹ªæ†¾éŒè—‰åªéå——å–éå‹«å„•éŒæ‘å„“éå‚šå˜éä½¸å¤éŒåžå„–éå¤Šå éŒç¨¿åš„é“å“„å£é“è¯²å£–é¡å†¨æ£é¡å±½æ£Žé¡å¬ªæ£…é¡æ¿†æ¢¹é¡æ–¿æ¢½é¡â•æŸ¨é¡æŽ‘æžé¡å¿“æ£”é¡ãˆ æ£–é¡å æ£½é¡å¶…æ£›é¡å‚šæ¹æ¿‰æ’³ã€ƒæ¿‰ã‚…î””æ¿‰å¶…î”Žæ¿‰îˆšî”šæ¿‰åº¡î”¢æ¿‰æ¬Ë‰æ¿‰æ¶˜ç‰»æ¿‰ï½…â€æ¾¹ç…Žç–ç€šå‹«ç›æ¿¯å“„î€—æ¿¯åžî€”æ¿¯æ¿î€žç€šå î€šç€šï¿½"],["dd40","æ¿¯å³°ç‹ç€šå©‚î€“æ¿¯è·ºçæ¿¯ç‘°çç€µæ §ç˜¶ç€µæ¬ç›çå†²å½“å®“ï½…ç¥³å®“ãƒ¥æŒ¡å®“î„€ç¦å®“ã„¥æŽ¸å®“ãˆ é’’éªžå¿“ç®®éªžå©‚ç®¥éªžå¬ªç²Žå¯¤å±½ç²å¯¤å¬ªç²è¤°â‚¬å¯°îˆšç»éŽ¯é”‹åŽœéŽ±å©ƒåŠ”éŽ±å‘®åŠ§éŽ°å‰åŠ—éŽ±å—˜åŠ˜éŽ±å¿”åŠ‘éŽ±â‚¬éŽ´çŠ»åéŽ´ï½†åž¾éŽ´ã‚†å¼²éŽ»è¾¨å½¨éŽ¼æ„­æ‚žéŽ¼å¤‹æ‚¹éŽ¼ï¿½"],["dda1","éŽ¼è™«æ†™éŽ¼ç†¸æ‚¤éŽ¼æ¨»æƒžéŽ¼é”‹æ‚½éŽ¼ï½†æ‚“éŽ¼ï¸½æƒéŽ¼ã„¦æ†—éŽ¼åž«æƒŽéŽ¼å©ƒæ‚®éŽ½â‚¬éŽ¼ãƒ¦æƒ‚éŽ¼å¬«å½ éŽ¼æ¶™æƒéŽ¼â„ƒæ‚—éîˆ›æž“éƒæ’´æ®•é†å±¾æ®¨é†æ„­æ®é†å©ƒæ®­é†æ—€æ«¢éˆçŠ³ã‚¦å¦¤ç†¸ã˜å¦¤åº¢ã‚¢å¦¤è¾¨ãŸå¦¤å‘®ã‚ªå¦žè§„îš‡å¦¤æ¥îšžå¦¤çƒ˜îšå¦¤å¤‹ã•å¦¤î„ã“å¦žèŠ¥ã‚¥å¦«ç‰ˆã‚¸å¦žå­˜ã‚©å¦¤â‚¬å¦¤îˆ›îš‰å¦¤èˆµîšå¦¤ä½¹ã‚´å¦¤å±¾ã›å¦¤å¬«ã—å¦¤æ»„îš”å¦¤æˆžã’å¦¤æŽ“ãå¦¤ç»˜ãœå§å—˜ç“å§å†©ç“Šå§å Ÿç“‰å¨ˆæ¶³â—¢å§£ç»˜î‡±"],["de40","å§£è§„î‡¬å§£å‘Šç°ºå©Šæ ¨ç²“å©§å¿”ç²ˆå©§ç†¸ç°±å©§æ—€ç±‚å©§è¾¨æ±—å©Šå—˜ç²§å©§èŠ¥ç²Šå©§ç‚´ç²”å©§é”‹å–Šå©Šå¶†å®³å©Šå¿”ç¿°å©§ç‚¬ç²Œå©Šæ»„ç²¯å©§æ¬ç°°å©§åº¢ç°«å©§ã‚†éª¸å©§æŒŽæ’¼å©Šæ„­ç²–å©§æ¥å¯’å©§ï½‡åŽ™é“æ—‚åŽ­é“ï½‡åŽ¾é“ä½ºåŽºé“ãˆ¢å¢é“å“¥å’é“ï¼„åŽ’é“æ¨¼åŽ“é“å¬¬åžé“ç†ºåŽ«é“ï¿½"],["dea1","é“å‹­åŽ¤é“æ°±å¢¢é˜å¶‡å¦¼é˜æˆ å§é˜åº£å°²é›å‚œå°°éšè™¹å´é›å©„å´éŸå‹­æ†¡éŸå¬¬æ†­éŸæˆ æ†²éŸâ‚¬éŸå¿•æ†ªéŸåº£æ†˜éŸå—™æ†¤éŸæ—‚æ‘—é¡è·¨æ‘¼é¡ç•Œæ•é£åœ­æš¦å§’å†ªæ£·é¦å¿•æ§‚é¥é£Žæ¤Œé¥è‚©æ¤†é¥å“¥æ§“é¥è¤æ¤‚é¥î… æ¤€é¥ç•Œæ®­é¨ç”µæ´•é«æ› æ½«é«çŠµæ½šé«æ «æ½¥é«â•ƒæ½·é«æ—‚æ½¤é«î… ç…šçº°å›©î•¿çº°æ—‚î•´çº°å‹­î•ºçº°å‘¯î•«çº°ï¼„î•¨çº­åœ­î•¾çº°â‚¬çº°æ «ã€ç»è‚©î›§ç»ç•Œã‚¹ç»‹æˆ îž¾ç»‹æ¬‘âŠ•ç»‹æ¥ƒã€žç»‹ãˆ¢ã€’"],["df40","ç»‹æ¶šâ—¥ç»ï½‡î€ç»ç‚µî¨ç»›ï¸¾î„ç»›î… î„­ç»›â•ƒî„«ç»›ãƒ§î„¬ç»›è¾©î„©ç»›ï¼„î„±ç»›å‰î„œç»®èŒ¬æ³Šç»®îˆœç§·ç¼å—™ç§¬ç¼å¶‡æ‚¼ç¼å‘¯å²›ç¼åº£ç¥·ç¼å†ªå¯¼ç¼å²€ç¨Šç¼å‹­åˆ°ç¼æŽ”æ±Ÿç¼ƒî‚¤æ¶§ç¼ƒã„§æµ†ç¼‡ï¸¾èŒŽç¼‡Ñ…ç¹˜ç¼ˆæ»†â‚¬Â¤å…é‘µçŠºå¿é‘µæ»†åé‘µæ¶œåƒé‘µå‰æ¹£é‘µç‚¶å¾é‘µÑ†å"],["dfa1","é‘µå‹®å€é‘¸æ¿Šå¢˜é‘¹å‹®å¢é‘¹å‚å¢”é’ƒè¾«æƒªé’æ ¬æ‡šé’ç¡…æ‹¸é’‚å¶ˆæ‡ƒé’æˆ£æ†–é’‚å—šæ‡…é’€æ‹Œæ†¤é’å€Ÿæ†µé’æ¬’æ‡˜é’å® æ†¹é’„å›ªæ†ºé’€ç–¯æƒ¡é’€ç£‹æ‡žé’å†­æ‡œé’€èŒ¶æ†›é’€â•„å½Šé’å¬­æƒŽé’å‚æƒŒé’ç†»æ‡“é’€ç¡…æ†¥é’å²ƒæ†­é’îˆæ®é’‚åº¤æƒ¢é’å›ªæƒ—é’€å® æ‡†é’ææ†šé’€î‚¥æ†¼é’æ—‡æ‡é’æ„¯æ¹…é“šå‹®æµ„é“šå²ƒæµé“”æ ¬æµ€é“¦å¶ˆæµ‰é“šåº¤æ¹é“šä½½æµ‚é“šå¶ˆæ¸½ç‘æ ¬î—ç‘å¶ˆî—“ç‘ç‚¶î— ç‘æ°³î—‘ç‘æ„¯î›ªç‘•æ¶œî¤ç‘™ãƒ¨Ð“"],["e040","ç‘™Â¤î¥ç‘™ãˆ£î¡ç‘™ï¹â”’ç‘¾å—šâ”›ç‘­Â¤Ç¹ç‘­ç–¯ç‹ç‘¾å‹®â”‘ç‘¾å†­çŠç‘­ç£‹â”–ç’‹è‰°çœ¿ç’žå©…é¥±ç’žã‚ˆå®ç’¨å—šçŸ‚ç’¨å‘°ç¡¨ç’§ã„¨æ—¦ç“’æˆ£ç§¾ç“’åº¤ç¨„ç“’å¶ˆç¨‰ç“’æ—‡ç¨…ç“’æŽ•é’’ç’ºçŠºç•ªç’ºè¾«æ¨Šç’ºæ„¯çç’ºï½ˆå‘ç’ºÑ†å‡¡ç’ºî‚¥åæ“å—šè±¢æ“ä½½ç´‘æ“å‘°ç´˜æ“å £ç´“æ“å¬®äº½é–«ï¿½"],["e0a1","é–¬å‹¯äº¯é–«ä»‹å‰±é–¯å¶‰å‰°é–¯æˆ¦å‰¸é–¯æ—ˆå‰«é–¯åº¨åœé–°îˆžå¢—é–´æŽ—åŸŒé–³æ´ªå¢»é–³æŠ½å¢ºé–´ç‚ºå¦°é–³î‡€å¢›é–´å—›å£„é–´î„„å¢¢é–´çŠ»å¢½é–´îˆžåŸ—é–´ï¿ å£ˆé–³éå¢§é–´ï½‰å¢£é–´æŸ¥å¢¡é–´æ’»å¢é–´æ ­åŸé—ç†¼æž©é—ç‚ºæž¦é—…æŽ—æ®¦é—…æˆ¦æ®«é—†åº¨æµé—†ä»‹æµ‰é—†ç”¸æ¾‡é—ˆçƒ½æ¾‘é—ˆæŸ¥çˆ®é—‹å¶‰çˆ­æ£°î„„ï¼–æ¤‹å½’ÎŸæ££æŸ¥Î æ££ç”¸î€Œæ¥ î‚¦ç“«æ§ŒîˆæŠ„æ§ŒÑ‡ç°šæ¦›è—‰å„²éæ–¿å„£éã„¥å…‚éæ¶˜å„¶éæ¿†å„°éæ’³å„¸éæ¿å„»éï½…å„¬"],["e140","é‘æ¨ºå¦§é”ä½¸å«¨é•î‚¢å° é˜î„€æ§¯é¢æ›žæ§é¢æŽ‘æ¤‰é¢å¿“æ§£é¢ä½¸æ§—é¢å‚šæ¤‡é¢æ¿†æ§ƒé¡åž®æ¤†æ¾§å¤Šã€–æ¾§æ„¬î•½æ¾§å——î•¦æ¿‰åž®ã€ˆæ¾§å¬ªã€Žæ¾§å›§î•¶æ¾§åº¡ã€Šæ¾§å‚šî•­æ¿‰è¯²î•¹æ¾§å¿“ï¼žæ¿‚î‚¢ç³ç€šî†¼î¢ç€šæ›žî§ç€šæ°¬îªç€šî‚¢î°ç€šãˆ ç·ç€šæ¶˜î©ç€šç‚²ç´ç€šæ¬î¥ç€šç†·î„°ç€µï¿½"],["e1a1","ç€µï½…ä¿å®¥å‚šç§¬å®“è—‰ç§µå®“å“„ç§®å®“å³°ç§ºå®¥å¤Šç§·å®“æƒ§å¯¼å®¥å¶…å€’å®“åž®ç®»éªžæ¬ç®µå¯¤æ¨ºç²¦å¯¤æ¥€ç² å¯¤æ»ƒç²«å¯¤æ¬ç²§å¯¤æ–¿çµ¼è¤°å†¨è’‹å¯°èˆµåŠ•éŽ°ã„¦åŽ‘éŽ±ç‚´å¡éŽ±è™«åŽ­éŽ±æ’´å¢éŽ±î„å”¨éŽ±å­˜åŽ°éŽ±çƒ˜åŽ¸éŽ±ãƒ¦åŠµéŽ±î…å€éŽ±æ ¨åŸ„éŽ´Ñ„åŸ†éŽ¼î‚£æ†¤éŽ½æ¶™æ†¹éŽ½å­˜æ‡šéŽ½å‰æ‡—éŽ½èŠ¥æ‡™éŽ½ï¸½æŒ¦éŽ½åº¢æ‹éŽ½ç‚´æ†¸éŽ½å¬«æ†®éŽ½çŠ³æ†ªéŽ½æŒŽæƒªéŽ½î„æ‡ŒéŽ½æ¬æ‡ƒéŽ½é”‹æš¢é‚çŠ³æ®¹é†çŠ³æ®¶éˆå‘®æ¸¼éˆãˆ¡Î¡å§’èˆµîŽ"],["e240","å§’çŠ³î“å§’æ ¨Î å§’î„îžˆå§’æˆžî›¾å§’åº¢Î—å§’å¶†Î™å§’ç‚¬ÎŸå§’æŒŽî‰å§’èŠ¥Î”å¦²æ—€îž…å¦²å©ƒî›¿å¦²å¿”Î¤å§’æ’´Îšå§’â„ƒîœƒå¦²æ¬î›¼å§’æ„­î‡å§’åž«Î•å¦²å—˜ç““å§å¶†ç“”å¨ˆç‚´ç–…å¨ˆçŠ³ç˜å§£å‹¬î‡³å©Šåº¢åå©Šè¾¨ç´”å©•ãƒ¦æ¡“å©•é”‹æ¢å©•î†½ç´šå¨¼åº¢ç´®å©•æ°­å§¬å©•æ¨»è“Ÿå©•æŽ“ç”»å©•ï¿½"],["e2a1","å©•èˆµåŒ å©Šè§„åˆ’å©•î…Ÿçµ¸å©•ç‰ˆæŠ€å©•åž«çŒ¾å©•å›¨ç´Ÿå¨¼å†©ç´–å©ŠèŠ¥æ¬¢å©•è§„ç´²å©Šå…¼å·±å©•ç†¸ç´žå©•ç‚´ç´™å©•ï¼„å”¶é”æ„®å”¹é”â‚¬é”å‘¯å”«é”å¿•å‡é”å—™å”©é”æ¥ƒå¢‘é—æ’¶å§‰é˜æ› å§„é›å†ªå´“é›æˆ å´’éŸãˆ¢æ‡—éŸè¾©æ‡™éŸèŒ¬æ‡…éŸî†¾æ”¢é¢å‚œæ”¦é£ç•Œæž‘é¦æ «æ§‡é¦å²€æ§™é¦æˆ æ§‰é¦æ—‚æ¯Ÿé¬ä½ºæ¾•é¬å‘¯ç€­é«î†¾ç€«é«îˆœæ¾—é¬å†ªâ’‰çº°î†â’‹çº°î… â…·çº­å‰§î¦çº°ç‚µâ…´çº°çŠµî§çº°ãˆ¢â…³ç»‚æ¨¼î›¯ç»‚å¬¬î›»ç»‚æ› î›¹ç»‚ï¿½"],["e340","ç»‚æ¥ƒî›­ç»‚æŽ”î›µç»‹î‚¤îŸ¨ç»‹æ‰®Ç’ç»‹ã„§Ã©ç»ã„§î€Šç»î„‚î«ç» å ¢ç–ç» å©„ç•±ç» æ„®ç•ºç» å¶‡ç•¬ç» æ¶šç•®ç» å‘¯ç•¼é”å‹­ç•½ç» ã‚‡ç•Ÿç»®è¤éƒ¨ç»®è‚©åŸ ç¼Ñ…æ–—ç»¶å‚œå®ç¼î†ç©ªç»¶â‚¬ç»¶å‘¯ç¨˜ç»¶åº£ç©­ç»¶å—™ç©»ç»¶å²€åŠ¨ç¼åœ­ç¨ç¼è‚©ç¨›ç¼ï¸¾æ‡‚ç¼â•ƒä¸ç»¶å¤ŒåŒ ç¼ˆãˆ¢æµšç¼ˆãƒ§ç¹›"],["e3a1","é‘°ã‚ˆä»¢é‘±æ»†å”¹é‘¶å—šå”­é‘¶å›ªå•€é‘¶å²ƒå”»é‘¸æ›¡æŒ†é’‚ã‚ˆæŒ•é’‚ç†»æ„é’ƒåº¤æ¨é’‚î„ƒæŒ³é’‚î‚¥æé’‚ç£‹æ§é’ƒå¶ˆæŒ­é’‚æ°³æŒ¶é’ƒæ„¯æŒé’‚Ñ†æ‡é’‚ãˆ£æŒƒé’ƒå›ªæ¶é’‚æ¶œæŒ¬é’‚îˆæŒ©é’ƒæ ¬æŒŠé’‚æƒ°æ¹é’‚çŠºæ‘‹é’ƒæ—‡æ¾é’ƒæ¶œæŒµé’‚æˆ£æ«‹é“šå® æ¹¥é“šã„¨æ½¾é“¦â‚¬é“šî†¿æ¹ é“šÂ¤æ¹™é“šæ¶œæ½ˆé“šî„ƒæ½„é“šææ½Œé“šçŠºæ¹¶é“šî‡æ¹±é“šè‰°æ¹Œé“šé¸¿æ¹µé“šä½ƒæ½…é“šï¹æ¹©é“šæ­Œæ¹¦é“šæ°³æ¹´é“šæˆ£ï¼—ç‘Ñ†ï¼‘ç‘èŒ¶ï¼šç‘æï¼Žç‘è‰°ï¼–ç‘ï¿½"],["e440","ç‘æ‹Œï¼Œç‘î‚¥îœ‚ç‘•Â¤îœ„ç‘•ç‚¶Ð—ç‘™î‚¥Ð–ç‘¾î‚¥ç§ç‘¾å¬­çŸç‘¾å¿šç¤ç’‹å€ŸæŠ¥ç’žâ•„ç¡¶ç’©å¿šç¡¹ç“’æ ¬ç¬éŸªå‚æˆ¿éŸªå¶ˆæ–¹éŸªå©…ç«·éŸªå›ªç«¼éŸªå‘°è‚ªéŸªâ‚¬éŸªå‹®ç´£æ“æˆ£ç´Ÿæ“å¶‰åŠŠé–¯æ»ˆåŠ†é–¯ãˆ¤åŠ…é–¯æ¿‹å‰¼é–¯ã‚‰åŠ‡é–¯æ¶¢å…é–°æŸ¥å‚é–°æŠ½å§¤é–µã‚‰å£Žé–µæ¶¢å£“é–µçŠ»å§…é–µîˆå¦½"],["e4a1","é–µï¹‚å§Žé–µî‚¦å£’é–µæ¥…å£™é–µï½‰å«¯é–µåº¨å¦­é–µæ›¢å§ é–´ä»‹å¦¶é–µï¿ å¦¸é–µå—›å¦¼é–µæ¬“å§§é–´é¹ƒå¦µé–µâ•…å§–é–µå¬®åŸˆé—…ç‚ºæ®¹é—†å—æ½£é—ˆä»‹æ¾“é—ˆé¹ƒç€®é—‰â‚¬é—‰å‚žæ¾”é—‰å‹¯ç€¬é—ˆå—ç…„é—Šå¶‰çˆ¾æ£°î…¢î©æ¤å‚žî˜¥æ¤å›¬îœ‚æ££æ»ˆîˆæ££å½’îž‡æ££æ´ªî‡æ££ä»‹îŒæ¥ éî æ¥‚Ñ‡îƒ™æ¥å—ç“²æ¦„ï¿ ç“±æ§Œéå·¢æ§Œç”¸éª‡éåž®å‰éŽæ¿å…éŽå——å‰£éè·ºå…™éŽå¬ªå‰¬éè—‰å‰¨é”å¬ªå¦¼é•åžå«°é£å æªªé£å±½æ¨€é£ä½¸æª´é£å¤Šæª°é£ï¿½"],["e540","é£æ°¬æª§é¢å†²æ¨ˆé¢î„€æ¨‰é¢ç¨¿æ§³é¢å“„æ¹šæ¾§î‚¢î–‚æ¾§åžî–…æ¾§ï½…îªæ¾§î„€â…´æ¾§â€³ï¼Ÿç€šåž®î±ç€šè—‰î´ç€šè·ºç‘‘ç€šç¨¿ç‘ç€šç‘°ç‘ç€£å›§ç‘“ç€£å¿“æŠ±å®¥æ¬ç¨å®¥ç†·ç¨ˆå®¥ãˆ ç¨‰å®¥æ›žç¨œå®¥æ»ƒä¸å®¥æ°¬ç¨™éªžâ•ç¯€éªžçŠ²ç®¿ç»¶å†²ç²µå¯¤ç‚²å¼§è¤°å¤Šé™éŽ²å¬«å”­éŽ±è§„å•½éŽ²ç‰ˆå•ŸéŽ²ï¿½"],["e5a1","éŽ²æ¶™å•ŒéŽ²îˆ›å•³éŽ²ç†¸å•‹éŽ²î…å•žéŽ²å¶†å‡éŽ²è™«åŸˆéŽ½î†½æ‡“éŽ¾æ ¨æŒ”éŽ¾å‘®æŒ†éŽ¾æ»„æ‹¸éŽ¾å¬«æ‹ªéŽ¾å±¾æŒ˜éŽ¾ç†¸æ‡†éŽ¾è¾¨æŒŠéèˆµæš«éè§„æš¬é‚å‰æŸé†åž«æ¯Žé†â•‚æ¯‘é†é”‹æ¯†é†îˆ›â–ˆå¦¯å—˜îž½å¦²ãƒ¦Ð¦å¦¯æ›ŸÐŸå¦²ã‚†îŸ†å¦²æŒŽÐšå¦²ãˆ¡îŸå¦¯æ¿‡Ð¬å¦¯Ñ„Ð å¦²î†½ã€å¦²é”‹Ðå§—â‚¬å¦¯å ŸÐ•å¦²ç»˜â—¢å¦²å…¼Ð™å¦¯å¤‹â–Œå¦¯æ¨»Ä“å¦¯å¿”Ð¤å¦¯ï¸½â–å¦²å­˜îž¼å§æˆžî…¼å¨ˆï½†î…¹å¨ˆï¸½çšå§˜â‚¬å§£æŒŽçšžå¨¼ä½¹é¸¡å¨¼ç‚¬ç·¡å©µå—˜ç·¬"],["e640","å©¢å¶†ç·£å©¢å±¾èˆ°å¨¼å¿”ç·Ÿå¨¼æ°­ç·°å¨¼èˆµæµ†å©¢å‚›ç¶å¨¼å‰ç¶Šå¨¼æ„­ç¶å©¢æ—€ç·­å¨¼æ¿‡ç´‘å¨¼â„ƒå°†å¨¼èŠ¥æ¶§å©¢æ„­ç¶‹å©¢å¬«åƒµå¨¼æŒŽç·¯å¨¼ï½†æ¤’å¨¼î…äº¤é”èŒ¬å•¹é”æ¶šå•ºé”çŠµå•”é”â•ƒå–Œé”æ¿ˆå•£é”ç‚µå•¢é”ï¼„å•°é”æ»…å•©é”å´‡å§Œé˜æ°±å´¢é›æŽ”å´¬é›ç†ºå´°é›æ¿ˆå´¨é›ï¼„å´¥é›ï¿½"],["e6a1","é›ãˆ¢æ‹ é å¤Œæ‹ªé å—™æ‹‹éŸç•Œæ‹é å ¢æ‡ éŸåœ­æ”¬é¢å›©æš°é¦ãƒ§æ§¥é¦æ¬‘æ§¤é¦æ»…æ§ªé¦æ°±æ§°é¦æ¶šæ®°é¨æ¿ˆæ®²é¨æ¶šç€ºé¬å¿•ç€´é¬å ¢î—’çº°è¤î—”çº¾å²€î—–çº¾åº£î—™çº¾å ¢î—ˆçº¾å‹­î—Žç»‚æ°±Î‘ç»‚çŠµîœç»‚ãˆ¢îœ€å§å‰Ã¼ç»èŒ¬î€“ç»å´‡î†Žç»¡å¬¬î†•ç» î„‚ç˜žç» îˆœî†ç»¡å©„î†Œç»¯å‘¯ç¡¤ç»¯å²€ç¡§ç»¶é£Žçª™ç»¶î†é˜€ç»¶æ¥ƒè´°ç»ºå†ªæ³›ç»¶ï¸¾èŒƒç»¶è¾©é’’ç»¶î†¾çª¡ç¼ƒå‰ç²³ç¼‡æ‰®ç»ç¼ˆî… æ©ç¼ˆî†æ¥·ç¼ˆï¸¾å¡é‘±ã‚ˆä»¹é‘¶ï½ˆå•›"],["e740","é‘¶ç‚¶å•Žé‘¶ãˆ£å•“é‘¶æ¥„åž¨é‘¹å¿šå¢¦é‘¹æŽ•å¢£é‘¹åº¤å¢¤é’„ã‚ˆæ•¾é’„å¿šæ”¢é’„â•„æ”·é’„å¤Žæ”³é’„ç†»æ”°é’„Ñ†æ•Žé’ƒæ˜æ•¨é’ƒé¸¿æ”¬é’„å²ƒæ‘¯é’„î‡æ‘¬é’„æ›¡æ‘²é’ƒî‚¥æ‘®é’ƒè‰°æ•€é’ƒî‡æ‘¡é’„æ ¬æ‘¼é’„ã„¨æ•é’„î†¿æ”¤é’ƒå€Ÿæ•’é’ƒæƒ°æ•±é’„ï¹æ‘Ÿé’ƒã„¨æ‘ªé’ƒîˆæ‘´é’„æ¨¿æ•”é’„æ‹Œæ”±é’„æ¬’æ•®é“ï¿½"],["e7a1","é“¦æ ¬æ½±é“¦ã‚ˆæ¾é”œÂ¤æ¾‡é“¦æ¨¿æ½é“¦æ¶œæ½šé“¦Â¤æ½¥é“¦æˆ£æ½ªé“¦î…¡æ½½é“¦æ„¯æ½•é“¦ç†»æ½©é“¦îˆæ½¿é“¦é¸¿æ¾é“¦æ»†æ½µé“¦å¿šæ¾”é“¦ä½ƒæ½°é“¦Ñ†æ½»ç›æ°³î˜ªç‘œå²ƒî˜¹ç‘œå¬­î˜¼ç‘œæ¨¿î˜¾ç‘œå—šî˜»ç‘œæˆ£î˜³ç‘œå¤ŽÎ’ç‘•ã‚ˆÎ“ç‘™î…¡Ðžç‘™î„ƒç¡ç’œå—šî€—ç’œæ’¹ç£ç’œæ—‡çªç‘¾æ˜ç¬ç‘¾æç‹ç’œå‘°ç®ç’œå†­î€™ç‘¾å€Ÿç¯ç’‹æç„ç’¨å¿šå¿ç’©ç†»ç¡»ç’©ã„¨ç¡½ç’©æ¿ŠåŽ‚ç“’çŠºç¨–ç“’Â¤ç¨•éŸªçŠºç¦éŸªãƒ¨è¢±éŸªî†¿ç¬—éŸªæ¶œç¬˜éŸªæˆ£ç¬éŸªï¹æŠš"],["e840","éŸªæ—‡ç¬’éŸªæ¨¿ç¬“éŸªæ»†ç¬šéŸªæ°³æ£˜æ“ã‚ˆç´­æ“æ°³ç´¶æ“ï½ˆç´ªæ“æ¥…ä¼‹é–¬ä¼´ä¼…é–¬Ñ‡ä¼€é–¯îˆžåŠ”é–¯â•…åŠ’é–¯æŸ¥åŠé–¯î‡€å”´é–±å—›å”ºé–±ä¾€å”«é–±å‹¯å”¨é–¶æ„°åª°é–¶å‹¯åª­é–¶æ¬“å§¸é–¶å¿›å«³é–¶ç†¼å«Žé–¶â•…å«é–¶æ¿‹åª½é–¶îˆžåª¯é–¶ã„©åª»é–¶å ¥å«€é–¶ï¹‚åª¿é–¶æ›¢åªºé–¶çŠ»å«—é–¶Ñ‡å«…é–¶ï¿½"],["e8a1","é–µç”¸å«›é–¶å—›å§¶é—€å¥¸æŸ†é—î‚¦æŸˆé—ä¼´æ®¼é—…ãˆ¤æ´†é—‡å‘´æ¹€é—‡å‚žæ½¥é—‰å©‡ç€»é—‰å ¥ç…‡é—Šå¿›ç‰‰é—‹æ¿‹ç‰”é—‹â•…ç‰—é—‹çŠ»ç‰„é—‹Ñ‡â’‰æ¤å ¥ï¼šæ¤æˆ¦î˜¹æ¤æ ­î˜¼æ¤æ›¢î¡æ¤å¶‰î”æ¤æ’»î™æ¤åº¨îŽæ¤æ ­îæ¤å¬®îœæ¤å²„î€’æ¥‚î„„î¨æ¥‚æŠ½î¯æ¥‚éç“Žæ¦„å†®î„ æ¦„æ’®î„ªæ¦„ï¹‚î„¯æ¦„ç”¸î„©æ¦„ã„©î„æ¦„î„„è‡£æ§Œæ´ªè¾°æ§Œå—æ’¤æ¦‡å›¬ç£¤æ§Œå½’éƒ´æ¦‡å ¥ç£ªæ¦‡å‹¯ç°æ¦›æ’»ç´¡æ¦§æ„¬åŠ€éŽæ’³å‰¹éŽæ°¬å‰³é‘ç‚²å°¨é™â€³æ«šé£çŠ²æ«˜"],["e940","é£å†²æ«é£ï½…æ«—é£æ’æ«ˆé£å³°æ¹é¦æ¶˜î—æ¾§è—‰î—Žæ¾§åž®â’‘æ¾¹å‚šâ’“æ¾¹å——ç‘®ç€£æ¬ç‘³ç€£â€³ç‘ªç€£æ’³ç‘¦ç€£æ §îƒƒç€£æ°¬ç‘ºç€£ç‚²î‡¤å®¥î„€ä¾—å®¥â•é”­å®¥é›æ ‹å®¥î†¼ä¸¢å®¥ã„¥æ«å®¥î…žåŠ¨å®¥æ‘æ­éªžã„¥åŠŸéªžîˆšå“—å¯¤Ñƒæ²ªå¯¤ã„¥äº’è¤°å¬ªç‚¯éŽ²æ¿‡å•«éŽ²æ ¨å™®éŽ²å­˜å™¯éŽ³ä½¹å™·éŽ²ï¿½"],["e9a1","éŽ²æŒŽå–éŽ²å±¾æ‘‹éŽ¿æ ¨æ»éŽ¿å¿”æ²éŽ¾èŠ¥æ‹¤éŽ¿å†©æ‘éŽ¿è™«æ‘é€è™«æš±éå…¼æž¹é‡å Ÿæ¯¦é‡â‚¬é‡å©ƒæ³²é‡å¿”æ¯¥é†ç»˜æ¯¢é‡å±¾æ¹¥å¦¯å­˜â”‚å§—å¤‹â”ƒå¦¯å‰â”„å¦¯ç‚¬îŸºå§—î…Ÿâ”’å§—æ¶™îŸ¯å¦¯ã„¦îŸ·å¦¯ç»˜Ç¹å§—ä½¹â”†å§—ã‚†îŸ®å§—å¿”îŸ²å§—îˆ›â”…å§—çŠ³îŸ‡å§—ç‚´ã€‡å§—æ›ŸîŸ«å§—åº¢ï¹©å§æ›Ÿç“Ÿå§æ ¨î…¾å¨ˆî…î†‚å§£å Ÿç˜’å§˜å‹¬çšŸå§˜å—˜ç»å©µå¬«è†å©µå›¨ç‚¯å©µåº¢ç¹„å¨¼ç‚´ç¸¿å©¢èŠ¥ç·¸å©µå©ƒé²¸éŽå‹¬èŒŽå©¢î†½ç«žå©¢î„æƒŠå©µå¿”ç©¶å©¢ï¿½"],["ea40","å©¢ãˆ¡ç¹…å©¢î‚£ç¹Šå©¢îˆ›é™å©¢æ‰®å™®é•å‚œå–›é”å“¥åšƒé•â‚¬é•ä½ºå™µé•æ—‚å™´é•å›©å™ºé”ç•Œåš‡é”è‚©å™¯é•æ°±åšŠé˜æ¿ˆå§™é›â•ƒå´·é›Ñ…å´¿é›ãƒ§å´¼é›î†æ‡£é æ°±æŒ”é æ—‚æ‹»é æ› æŒ•é¢å¬¬æ¸é¦îˆœæ§¶é¦è¾©æ¨ˆé¦å´‡æ¨‡é¦ç”µæ§»é¦æ‰®æ¯£é©ï¸¾ç‡é¬æ¿ˆçé¬æ»…çˆé¬ãˆ¢ç’é¬æ› ç†"],["eaa1","é¬æ¥ƒî—¢çº¾â•ƒï¼…çº¾î†î—£çº¾ï½‡î— çº¾ï¼„ï¼‚çº¾î… î—¤çº¾çŠµÎ”ç»Œå‹­ï¹«ç»Œå›©î€•ç»å“¥î€”ç»è¾©î€–ç»¡ç‚µî‡˜ç»¡Ñ…ç˜½ç»¡æ› î‡šç»¡æ°±î‡ç»¡åœ­ç˜®ç»¡î†î‡—ç»¡æ»…î‡ ç»¡æ¨¼ç™‚ç»¯æŽ”ç¡µç»¯æ¥ƒç¡±ç»¯æˆ ç¬’ç»ºï¼„ç¬šç»ºå²€ç¬©ç»ºçŠµç¬“ç»ºåº£ç¬¢ç»ºæ› ç¬Ÿç»ºãˆ¢ç¬…ç»ºå¿•ç¬˜ç»ºå¶‡ç¬–ç»ºãƒ§è¢±ç¼ƒå†ªäº¤ç¼ƒè‚©èƒ¶ç¼‡è¾©åˆŠé‘°î‡â‚¬â•„ä¼‚é‘¶è¾«å•¨é‘¶î†¿å–’é‘¶ä½ƒå•±é‘¶æ‹Œå•²é‘¶ç£‹å•¿é‘¶ç–¯å•©é‘·èŒ¶å¢ªé‘¹æ ¬å¢¬é’‘æ ¬æ™ é’‘î‚¥æ™¬é’‘æ’¹æš‹é’‘ï¿½"],["eb40","é’‘â‚¬é’‘å—šæšé’‘ä½½æšé’‘å‹®æ™³é’‘å›ªæšŽé’„ææšƒé’‘è¾«æ™­é’‘î†¿æš¤é’‘æ›¡æš“é’‘çŠºæžŒé’‘ï¹æš†é’‘æ—‡æšé’‘î„ƒæ«é“ãƒ¨æ«Žé“»æ¶œç€¼é“»æ¥„ç€é“»æŽ•ç€³é“»ä½½çƒé“»æ¨¿æ¾’é“»å›ªç’é“»å‘°ç€½é“»æˆ£çŠé“»å‹®çé“»æ»†ç‡é“»å¤Žî™ƒç‘œï¹ãç‘œî…¡ãŽç‘œÑ†ã‘ç‘œãˆ£ã‰ç‘œï½ˆãç‘œî„ƒî™„ç‘™è¾«ç·"],["eba1","ç’œãˆ£î¯ç’œç£‹î²ç’œæ¿Šç‘ªç’œã‚ˆç¶ç’œæ‹Œç—ç’œç‚¶îžç’œã„¨î¼ç’œîˆî¸ç’¨æˆ£çŸ‘ç’¨æ„¯è½¦ç’©î†¿æ½®ç’©æ‹Œåµç’§î„ƒè¯žç“’ãƒ¨é”­éŸªå® å¦‡éŸªæ­Œç®‘éŸ«å‘°ä»˜éŸªè‰°é™„éŸ«ä½½èµ´éŸªèƒ¯èˆªæ“æƒ°ç±æ“ä½ƒç–¾æ“ç¡…æŒ¤æ“æ’®ä¼“é–¬å½’ä¼é–­å—›å…’é–¯æŠ½åŠ¦é–¯å •å•Œé–±æ„°å•ˆé–±å¶‰å•…é–·Ñ‡å°€é–·å ¥å°‚é–·å—›å¯©é–¸æ´ªå°­é–·å¥¸å¯·é–·ï½‰å¯¬é–·ä¾€å´‹é–·î…¢å¯§é–·å¶‰åª¼é–·æ¿‹å«¼é–·ãƒ©å¯­é–¶å½’å«¹é–·æ’®å¯•é–·ã‚‰å¬é–·â•…å°®é–·ç”¸å°“é–·æ—ˆå¯£"],["ec40","é–·å¬®å¬€é–·å¤å¯‘é–¶å©šå¯²é—å¥¸æ£ˆé—é¹ƒæŸŸé—æ´ªæŸ–é—å—æŸ•é—ä»‹æ¯„é—†æ—ˆæ¹…é—‡æŽ—æ¹Šé—‰æ¬“ç„é—‰æ—ˆç…±é—Šæç‰­é—‹îˆžç‰ªæ¤ã‚‰î™„æ¤Ñ‡ã‰æ££ç‚ºÐœæ¤î„„Ð”æ¤ã‚‰Ðžæ¤ï½‰Ð˜æ¤â•…Ðæ¥ å½’î€žæ¥ æ’®î€šæ¥‚å •î·æ¥‚å½’î´æ¥æŠ½ç•æ¥«å‘´ç•¤æ¦„å¥¸î„·æ¦„å©šç•Ÿæ¥«æ’»ç•³æ¥«æ„°î„³æ¥«ï¿½"],["eca1","æ¦„ä»‹ç•§æ¦‡ãƒ©ç¤‚æ¦‡çŠ»ç¤Šæ¦‡æ—ˆç©¿æ¦‡æ¿‹ç¤ƒæ¦‡ãˆ¤ç£¹æ¦‡æ¬“ç¤‹æ¥¹å ¥ç°¡æ¥¹å›¬å¯’æ¥¹î…¢ç²«æ¦›æ ­ç¼“æ¦§æŽ—å†€éŽï¹€åŠŒéŽãˆ åŠ‹éŽçŠ²åŠ‘é•æ‘æ®¦é¤å±½æ®Ÿé¤å——æ®‘é¤å†¨æ«¨é¤å‚šæ«©é¤ä½¸î—›æ¾¹æ–¿î—”æ¾¹æŽ‘îƒˆç€£ãƒ¥îƒç€£ï½…îƒ‡ç€£Ñƒîƒç€£îˆšîƒ‰ç€›è¯²î‡¦ç€µæ’æ–—éªžî„€èº¬å¯°æƒ§å‡€éŽ³å†©å–ŒéŽ²å…¼åš™éŽ³çŠ³åš—éŽ³ã‚†åššéŽ³ç‚´æ‘¨éŽ¿â•‚æ‘šéŽ¿î‚£æ‘›éŽ¿ã„¦æ¹é‚â‚¬é‚èˆµæ£œé‡æŽ“çšå¦¾æ ¨çŠå¦¾ãƒ¦ç•å¦¾ç†¸ç©å¦¾â„ƒç®å¦¾å›¨ç¡å¦¾ï¿½"],["ed40","å¦¾æ›ŸçŒå¦¾ã„¦î€ƒå¦¾æˆžâ”›å¦¾ï¸½ç¨å¦¾å‘®ç™å¦¾æŽ“ç“«å¨ˆî…Ÿçš¦å©µå±¾äº¬å©µå­˜ç¹‘å©µï½†ç¹™å©µî…Ÿå’–å©µï¸½ç¹›å©µå‰ç¹šå©µãˆ¡å¡é•ï¼„åš¤é•ã„§åš¥é•ã‚‡åš¢é•ãˆ¢åµ†é›î†¾åµ‚é æ¥ƒæŒ·é î‚¤æ‹¹é î†æŒ±é è¾©æŒœé îˆœæ”¼é¢æˆ æ•€é¢å¿•æ½é§å†ªæª²é§å¤Œæª±é¨ã‚‡æ´¨é¬ç”µçšé¬èŒ¬ç§é¬ï¿½"],["eda1","é¬å¯¸ç¡é¬ã„§ç…±çº¾å´‡ï¼ç»€å‚œï¼›çº¾è‚©ï¼’ç»€å‘¯ï¼™çº¾å‰§î˜©ç»‚î‚¤Î˜ç»Œæ»…îŸ¸ç»Œæ «îŸµç»Œæ—‚îŸ·ç»å‰§ç‹ç»”ä½ºçš¡ç»¨å¿•î‡§ç»¨â‚¬ç»¡è·¨î‡°ç»¨åº£î‡©ç»¨å¬¬î‡¨ç»¨å‚œçš¦ç»¨å†ªçšç»¡å“¥î‡²ç»¨å—™î‡¥ç»¡è¾©çš­ç»¨å©„æ•žç»ºî… è®£ç»»å‚œèµ‹æ¤¤å ¢çˆ¶ç»ºî†ç®Ÿç»»â‚¬ç»»å›©ä¿¯ç»»å²€èµ´ç»ºè¤ä»˜ç»»å‹­è´Ÿç¼ƒå‘¯å¨‡ç¼ƒå‰§æµ‡ç¼ˆå¯¸åŽé‘°î„ƒå–•é‘·å‹®å™·é‘·å©…å™®é‘·å›ªå––é‘·â•„å¢°é‘¹æ°³å¢±é’–å†­æ¸é’–å¿šæž¾é’–æ›¡æž²é’–å¬­æžºé’‘æ˜æž»é’–æ°³æž®"],["ee40","é’‘ç–¯æš­é’–å¤Žæž´é’‘é¸¿æš©é’‘æ¥„æžŽé’–æ ¬æž‚é’–å¶ˆæž¡é’–æ¿Šæ¹é’–ãˆ£æºé’–å £æž€é’‘ç¡…æš¥é’–æ¨¿æž‘é’–ç†»æ«’é“»æç™é“»î…¡ç„»é“»æ‹Œç›é“»ç¡…ç¥é“»è‰°çé”œå¤Žç„¹é”œå‚ç…‚é“»ç–¯çŸé”œå‹®ç…€é“»ç£‹ç¦é“»èƒ¯ç¨é“»å€Ÿç…˜é“»èŒ¶ã•ç‘œå® ãœç‘œæîš†ç‘—æŽ•ã—ç‘—å‚Îç‘•îˆÎžç‘™èŒ¶Ð¡ç’Žï¿½"],["eea1","ç’Žæ¨¿ç‘¬ç’Žæˆ£ç‘“ç’Žå¬­î‚½ç’Žå¿šç‘¨ç’Žæ›¡ç‘–ç’Žå¶ˆç‘˜ç’Žå—šç‘´ç’Žæ’¹ç‘²ç’žå¿šå‘ç’žèŒ¶åŒ—ç’žîˆçŸ”ç’¨æ—‡å½»ç’§îˆç®®éŸ«å¶ˆç®µéŸ«æ„¯ç®¤éŸ«å›ªçµ»æžâ‚¬é–­å‘´ä¼¨é–¯æå•”é–±ãˆ¤å•—é–±æ¬“å•›é–±ï¿ å•™é–±çŠ»å¸¯é–¹å†®å¹†é–¸ã‚‰å´ é–¸å›¬åµ“é–¸æ©€å´ªé–¸å •å´é–¸æ„°å´™é–¸çŠ»åµ€é–¹å¿›å´’é–¸îˆåµé–¸æ¥…å´Ÿé–¸æŽ—å´—é–¸éåµŽé–¸å©šå´±é–¸ç‚ºå´³é–¸Ñ‡å·°é–¸åº¨å´£é—‚å›¬æ¢¹é—‚å¤æ¢¼é—‚å‘´æŸ—é—…î‡€æ¯Žé—…î„„æ¹¢é—‡ç†¼æ¹—é—‡æ¿‹æ¹™é—‰æ°¶çé—‰ï¿½"],["ef40","é—‰ç‚ºçŠé—Šæ›¢ç…é—Šéî”†æ¤¤å‹¯î”æ¤¤å¤î”Šæ¤¤å†®ã…æ¤î‚¦ãŒæ¤îˆã“æ¤æŸ¥ãæ¤î…¢ã‘æ¤ä¼´î›½æ££ï½‰Î‘æ¥±å‚žÐ¨æ¤æ’®Ð¥æ¤å½’Ð¦æ¤å •Ð©æ¤ä»‹Ð¬æ¤å¥¸â–‹æ¥ é¹ƒî»æ¥‚ä»‹ç‘æ¥‚å¥¸ç“æ¥«æ°¶î…¿æ¥«ç‚ºç–€æ¥«ï¹‚î…¸æ¥«ãƒ©î…»æ¥«å—›î…¹æ¥«çŠ»î††æ¦‡æŠ½ç¥¦æ¦ˆÑ‡ç‚Šæ¦‡î‡€ç–®æ¦‡éé”¤æ¦‡ï¿½"],["efa1","æ¦ˆå‘´ç¥©æ¦ˆå†®æ·³æ¦‡çƒ½ç¥¤æ¦‡ç•Œåº·æ¦‡î…¢ç°¥æ¥¹å¤ç°«æ¥¹ä¼´ç²“æ¦›æ°¶æ¢æ¦›å—æ¿€æ¦§ï½‰é¥¥æ¦»æ—ˆç·ºéŽåžåŠ–éŽî†¼æ®¬é¤æ»ƒæ®«é¤æ°¬æ®±é¤æ¬ã‚°ç€£ç…Žæš´çžî„ç©©éªžî…žå·©éŽ³æ¨»åšéŽ³î…Ÿåš éŽ³è¾¨åšœéŽ³ç‰ˆåšéŽ³æ ¨åš›éŽ¿æŒŽæ”§éŽ¿èŠ¥æ‘³é€ä½¹æ”¦éŽ¿å…¼æž–éƒæ¶™æ´‘é‡æ¶™æ´å¨…å‘®î€˜å¦¾èŠ¥îžå¨…å—˜î€™å¦¾èˆµî€–å¨…å›¨î€“å¦¾î…Ÿç“°å§£å¤‹çš¨éŽå›©â‚¬å²€â‚¬å¶‡â‚¬ä½ºâ‚¬å‘¯â‚¬æ—‚â‚¬åº¢é éŽâ‚¬å©µè¤â‚¬ï¸½è€ƒå©µé£Žâ‚¬å©„åž‡é•è·¨åš¬é–å†ªåš±é›ï¿½"],["f040","é å“¥æ¥é ç”µæ§é å‰§æŒ¾é è¤æ¨é¢æ—‚æ•é§æ»…æ«Žé§æ¬‘æªºé§æ’¶æ«é§æ°±æ®¾é¨ç•Œæ´­é­å‚œçªçº¾è·¨î˜±ç»€æ’¶î˜¹ç»€å¤Œî˜µç»€æŽ”î˜¶ç»‚î… Îœç»Œç†ºçš½ç»¨â•ƒçšºç»¨çŠµç›ç»¨î… çš¾ç»¨ï¸¾çš‘ç»¨ãˆ¢å“Žç»¨æ‰®ç®¿ç»»æ„®ç®¹ç»»ï½‡ç®»ç»»ãˆ¢ç¯ƒç»»æˆ ç¯„ç»»æ¥ƒç®µç¼‡ç”µå¢ƒç¼ˆé£Žæ‰›é‘±ä½ƒå™¾é‘·ï¿½"],["f0a1","é‘·æ„¯å¢´é‘¹ç‚¶æŸŽé’˜å—šæ¢¹é’˜å†­æ¢»é’–å® æŸ•é’–å€Ÿæ£é’˜å‹®æŸ¨é’˜å¬­æ£Šé’˜å £æ¢¾é’–è¾«æŸ–é’˜æŽ•æ§«é’–æ­ŒæŸ—é’–ææ«“é”œÑ†ç…¢é”œãˆ£ç…•é”œî‚¥ç…ªé”œãƒ¨ç…™é”œå® ç… é”œæ—‡ç…–é”œæ’¹ç…­é”œæ¨¿ç…Ÿé“»ã‚ˆç…‘é”œæ¬’çˆœé”œç£‹ç…¥é”œæ¿Šîš˜ç‘—å¬­îš”ç‘—å²ƒîš‹ç‘—æ„¯îš–ç‘—å¤Žîƒ…ç’ŽÑ†î‚¾ç’Žå® îƒ‹ç’Žä½ƒç“ç’Žîˆîƒ—ç’ŽæîƒŒç’Žãƒ¨îƒ’ç’Žï¹îƒ‘ç’Žî†¿î‚¿ç’Žæ˜îƒ˜ç’Žé¸¿çœ°ç’žä½ƒçŸ™ç’¨æ¨¿çŸ–ç’©æç£©ç’å‚ç£¤éŸ«æ»†è€¿éŸ«çŠºç®ºéŸ«æ ¬ç¯‚éŸ«ãƒ¨æ­"],["f140","éŸ«æ¶œç®½éŸ«Â¤ç¯€éŸ«â•„ç®¶æžå—šçµ¿æžå £ç¶ƒé–¯ã„©åŠ´é–¯å©šåŠ¸é–±ã„©å•£é–±Ñ‡å•¹é–±îˆå¹é–¹å²„å¸“é–¹çƒ½å¸¥é–¹æ¿‹å¸€é–¹Ñ‡å¸‹é–¹îˆå¸ªé–¹ï¹‚å¸Ÿé–¹å ¥å¸£é–¹ç†¼å¸Šé–¹éå¸’é–¹æŸ¥å¸³é–¹ã„©å¹‹é–¹ï½‰å¸´é—‚æŽ—æ£‘é—‚æˆ¦æ¯˜é—†æ¥…æ´‘å®¸å‚žæ´˜é—†æ©€æ´•é—‡ï½‰æ¹¤é—‡ãƒ©ç›é—‰î‡€ç—é—‰î‚¦ç“é—‰ï¿½"],["f1a1","é—‰ãˆ¤ç”é—Šæ¥…ç…“é—Šæ ­ç…’é—Šæ´ªî”•æ¤¤æˆ¦î”—æ£°æîš†æ¤å¥¸ãšæ¥±å¿›â–¼æ¥±å¤â—¢æ¥±å‹¯â˜‰æ¥±å©‡â–æ¥±å›¬â–Žæ¥‚â‚¬æ¥‚æ»ˆç‘˜æ¥å‹¯ç‘“æ¥â•…îƒæ¦„å©‡ç“•æ¦„å¬®ç˜’æ¦€å—›ç˜æ¥«å—ç˜‰æ¥«ç”¸î†æ¦€æ’»î†æ¦€å‹¯î†æ¥«ä»‹ç¦æ¦ˆæ’»ç¥»æ¦ˆå©‡ç¦Œæ¦ˆå¬®ç¦‰æ¦ˆæ ­ç¥µæ¦ˆæ¥…ç¥¾æ¦ˆæ—ˆç¦‘æ¦ˆæ©€ç¦‹æ¥¹åº¨ç°©æ¦›ç†¼ç´’æ¦§â‚¬æ¦§æ ­è®¥æ¦§î‚¦å‰æ¦§â•…ç»©æ¦»å²„ç¶éŽæ‘åŠ¦é”æ §å«¹é˜æ‘æ¯‡é¤î…žæ®¾é¤Ñƒæ¯†é¤î„€î—Ÿæ¾¹æ¿†î— æ¾¶æŽ‘îƒ˜ç€£æƒ§îƒšå®¸å†¨æ‹±"],["f240","å¯°æŒŽåš®é€å›¨æ”¼é€å¶†æ”­é€å±¾æ”·é‚å‹¬æ£¡éƒæ¿‡æ´–å¨…Ñ„ç·å¨…å±¾ç£å¨…æ¬ç›å¨…ç†¸ç³å¨…æ„­î¨å¨…å¿”çå¨…ç‚´ç“²å¨ˆç‰ˆçš©éŽæ¬‘â‚¬Ñ…â‚¬çŠµâ‚¬æ «â‚¬î‚¤â‚¬ï¼„â‚¬ãˆ¢â‚¬ï½‡â‚¬â•ƒâ‚¬æ¥ƒâ‚¬ã‚‡â‚¬æ»…â‚¬î†åž–é–å©„åžé–å‚œåžé˜ãƒ§å§¦é˜ã‚‡å§¡é˜ï¼„æµé¡å‘¯æŒ¿é¡å†ªæ•„é§çŠµç„¿é­å©„ç„ºé­è¾©î™‚ç»€ï¿½"],["f2a1","ç»€ï¼„î™ç»€æ¥ƒî™ƒç»‚æ‰®â”ƒç»Œã„§ä¿ºç»¨è‚©è‚®ç»¨î„‚ç›Žç»¯î„‚å”±ç»»å‰æ²Ÿç»»å“¥æ‹±ç»»é£Žæ±žç»»è™¹å…±ç»»å¯¸é¾šç¼ƒå¬¬ç¶‚ç¼‡å†ªç· ç¼‡é£Žæ‹·ç¼ˆæä¼•é‘·æ¥„åš‚é‘¹ã‚ˆå¢¶é‘¹ï½ˆæ£²é’˜è¾«æ£´é’˜æ¬’æ£¥é’˜ã„¨æ£œé’˜æ¥„æ£³é’˜èŒ¶æ¤„é’˜æ¨¿æ£¢é’˜ï½ˆæ£žé’˜æˆ£æ£¸é’˜ï¹æ£·é’˜ç‚¶æ£¦é” â‚¬é”œé¸¿çˆŸé”œæƒ°ç…¼é” å¤Žçˆ©é” å¬­çˆ¢é”œè‰°çˆ¤é”œèƒ¯çˆ¦é” å‚ã‚¢ç‘—æ°³îš ç‘—æ¥„ã‚¡ç‘—æ»†îšç‘—æ¿Šîšžç‘•å £Î¨ç‘•æƒ°Ð¤ç’€æ„¯ç“ç’€å©…ç“ˆç’€æ’¹ç“¥ç’€æ—‡ç“”ç’€ï¿½"],["f340","ç’€æˆ£ç“Šç’€æŽ•ç“§ç’žå†­ç‹ˆç’žæƒ°çŸšç’å—šç£­ç’å¤Žå†¬ç“’î‡è‘£ç“’î‚¥å¼“éŸ«æ­Œé’©éŸ«î‡æ±žéŸ«æ˜ç²‹æžæŽ•ç¶‰æžå¿šç¶ˆæžæ’¹æ•¬é–°â‚¬é–¯å—å•ºé–±î…¢å½é–ºå›¬å¼¿é–ºå‚žå½‹é–ºæ„°å¾†é–ºî„„å¼»é–ºæ¬“å¸ºé–ºï¹‚å¼·é–ºæ—ˆå½¯é–ºï½‰å½†é–ºå‹¯å¼¾é–ºâ‚¬é–ºæŽ—å½ é—€ä»‹æ£œé—‚æ¶¢æ´é—‡â•…æ¹¯é—‡î„„æ¹ªé—‡ï¿½"],["f3a1","é—‰æŠ½ç§é—‰å •ç…—é—Šç‚ºç…™æ¤¤æ»ˆî”žæ¤¤æ¿‹î”œæ£°å—â’”æ£°å©šâ’•æ¥—å ¥îšŒæ¥—å†®Î–æ££Ñ‡îŸ€æ¥±æ›¢Ä“æ¥±æ¿‹Ã æ¥±æ¶¢Ã¡æ¥±çŠ»Ä›æ¥±ï½‰îŸ„æ¥±æ»ˆã€æ¥‚å‚žç‘¡æ¥å©‡ç‘¤æ¥å²„îƒ’æ¦€îˆî‡ æ¦€çŠ»ç™æ¦€ã‚‰î‡›æ¦€ãˆ¤î‡¥æ¦€æ—ˆç˜²æ¦€î„„ç˜»æ¦€æ¬“î‡šæ¦€æ›¢î‡–æ¦€æ°¶æ£æ§Žä¾€ç§ºæ§Žå‹¯ç§·æ¦ˆéç§¬æ¦ˆæç§µæ§Žå¬®ç§¾æ¦ˆä»‹ä½†æ¦ˆæ’®æ¡£æ¦ˆä¼´æ—¦æ§Žå‘´å…šæ¦ˆå©šç§±æ¦ˆîˆžå€’æ¦ˆå—ç§¶æ¦ˆã„©ç°²æ¥¹æˆ¦ç²ˆæ¦›å¥¸è¾‘æ¦»â‚¬æ¦»ä¾€ç¶…æ¦»æ ­ç¶æ¦»æ¨ºå°«é¤ï¿½"],["f440","é¤é›æ¯˜æ¾¹ï½…ç“å®¸å——ç©±å¯¤î†¼åŒ–è¹‡â‚¬è¹‡ä½¹åš¬é€æ¥æ•„é€æ›Ÿæ•éƒç†¸æ´¦é‡ï½†æ´¡å¨…è™«î­å¨…î…î¥å¨…è§„î®å¨…î†½î¬éŽè‚©â‚¬ç”µâ‚¬îˆœâ‚¬é£Žâ‚¬å¯¸â‚¬è¾©äº—éŽå“¥â‚¬è·¨â‚¬è™¹â‚¬åœ­äºéŽè¤â‚¬å´‡äº–é–æ’¶åžŸé˜ã„§åµ”é›è‚©æ„é¨î‚¤æ¯†é¨å‰§æ´¯é­å²€ç…„é­å¿•ç…ƒé­èŒ¬ã…ç»€ï½‡ã‡ç»€ã„§ã„ç»€ï¿½"],["f4a1","ç»‚èŒ¬â”Šç»Œî„‚â”‰ç»”é£Žçœ½ç»«å ¢çœ¾ç»«å›©çœ³ç»¯î†¾å¤Ÿç»»å‰§ç°›ç»¾â‚¬ç¼‡è™¹é é‘±ç¡…åšŠé‘·æ¬’åž•é‘¹ã„¨å¢¿é“‡ãˆ£æ¤é“‡ä½½æ¤Œé“‡æ¶œæ¦¾é’˜æƒ°æ§ƒé“‡å¤Žæ§„é“‡å²ƒæ¤Šé” æ¬’çˆ¯é” æˆ£ç‰€é” æ’¹çˆ¾ç‘—ï½ˆã‚¦ç‘•ç¡…Ð¥ç’€çŠºî„£ç’€æ¿Šî„¡ç’€ï½ˆî„žç’€Ñ†î„¦ç“’î†¿ç°¡éŸ¬å £ç°žæžæ¬’ç¶Žæžæ¥„ç¶æžæ¨¿ç¶’é–­å¶‰åŽ“é–°ä¾€å–Žé–±ç”¸å•¿é–±æŠ½æ‚‘é–»æ’»å¾Žé–»çŠ»æ‚˜é–»æ—ˆå¾“é–»æ›¢æ‚™é–»ã„©æ‚ªé–»å¶‰å½½é–»â‚¬é–ºçƒ½æ‚‹é–»åº¨æ‚¥é–»æŽ—å¾é–»å¤å¾ƒé–»å©‡å¾”"],["f540","é–ºå¥¸æ‚“é–ºå •æ‚œé–»å—›æ£¡é—‚çŠ»æ£¢é—‡î‡€æ¹³é—‰å½’ç®é—Šä»‹ç†…æ¤¤çŠ»ã€æ¤¤ï½‰î”¤æ¤‹ä¾€î—‡æ¥—æ„°îš“æ¥—æ¬“îš‘æ¥—å¬®îš˜æ¥±æŸ¥Ã¹æ¥±éÃ¬æ¥±îˆÇ˜æ¥±â•…Ã³æ¥±æÅæ¥‚å›¬çšæ¥‚å—›ç‘¦æ¥æŽ—ç‘§æ¦˜å¬®çš¥æ¦€çƒ½çš¡æ¦˜æŽ—î‡­æ¥¸â‚¬æ¦˜å›¬çš«æ¦˜å—›çš¸æ¦˜æ—ˆçš¦æ§Žç†¼ç¨’æ§Žã‚‰ç¨˜æ§ŽæŽ—ç¨‘æ§Žæ„°ç¨•"],["f5a1","æ§ŽçŠ»ç¨Šæ§Žæ»ˆä¸¢æ§Žæ¥…ä¸æ§Žæ°¶ç›¯æ§Žã„©ç¨™æ§Žï½‰çŠŠæ§Žâ•…ç¨æ§Žï¹‚é”­æ¥¹æ¬“ç°ºæ¥¹æ°¶äº’æ¦›ã‚‰æˆ·æ¦›ï¹‚åŠæ¦§î‡€ç¶“æ¦»çŠ»ç¶–æ¦»æ¿‹ç¶‘æ¦«æˆåŠ´éŽç‘°å§Œé”æ¥€æ³é¤è—‰æ¯¦ç€›å ç“å®¸å¬ªçª‚å¯¤è¾¨åš±é€æ¶™ç‘å¨…å…¼ç‘‘å¨…å‘Šç‘Žéå†ªäºœéå©„äºªéå¤Œäºéå—™åžµé–æ°±åž¯é›å‰§æ•†é§î†ç…‡ç»€î… ã‘ç»€îˆœçŒç»«æ’¶å·¢ç»¾å©„ç°¢ç»¾å ¢ç°¨ç»¾å—™ç°«ç¼ƒå¶‡å‡€é‘°æ‹ŒåšŒé“‡æ¨¿æ§³é“‡ï¹æ§¦é“‡ï½ˆæ§£é“‡æ¬’æ§¯é“‡î†¿æ§¨é“‡çŠºæ§±é“‡ç‚¶æ§¬"],["f640","é” â•„ç‰†é” æ¶œç‰‹é” ã‚ˆç‰…é” î‚¥î”ç‘—î…¡ã‚©ç‘—î†¿ã‚«ç‘™é¸¿î„²ç’€æ­Œç“ç’€é¸¿î„´ç’æ„¯ç£¾ç“’îˆç°¬éŸ¬å²ƒç¶–æžæ¶œç¶•é–°å—›åŽ”é–°å‘´å–’é–»å—æƒ¢é–»å •æƒ„é–»ä»‹æƒ£é–»ä¼´æƒžé–»îˆæƒ™é–»î„„æ†–é–»éæ£©é—‚ã‚‰æ£§é—‡ç”¸æº€é—‰å—ç…›æ¤¤ã‚‰î—Žæ¤‹å—›î—…æ¥—æ©€îš›æ¥±å½’Å„æ¤¹å—›ï¹¦æ¤¹å‚žï¹£æ¥±ï¿½"],["f6a1","æ¥±å—çæ¥æ›¢ç‘®æ¥æ©€ç‘¬æ¥æ´ªç“›æ¦˜î‚¦çš¾æ¦˜æ»ˆè‰¾æ¦˜ï½‰çš‘æ¦˜â•…æŒ¨æ¦˜ï¿ æ–—æ§Žå •éƒ½æ¦‰ä¾€ç©±æ¦‰å©‡çª‚æ§Žé¹ƒç©®æ¦‰å†®ç—˜æ§Žç”¸ç©¾æ§Žå½’é€—æ§Žî„„ç©²æ§Žéè‘£æ¦‰å²„å†»æ¦‰å¶‰æ«æ¥£æ´ªç°»æ¦›î‚¦åˆ’æ¦›î…¢ç´±æ¦§æ©€ç´°æ¦§éç¶†æ¦»ãƒ©é¥¯æ¦«æŽæ±—é¥å——æ³¤é¥å¬ªã‚±ç€›å¬ªç“•å®¸æ›žçª‡å¯¤å‰æ•—é€çŠ³æ• é€ãˆ¡ç‘¡å¨†å Ÿç‘å§˜å¶‡ä»Œéæ «ä»éæŽ”åž¶é–ç†ºå§ªé›è·¨æ‘Œé¡æ› æ‘é¡æ¥ƒæ«—é¨î… ã•ç»‚å¯¸â”Œç»Œè¾©çç»«æ»…ç“ç»«æ¶šç”"],["f740","ç»¯å¯¸æ½®ç»¾æˆ ç¶‡ç¼‡å›ªåšé‘¹î‚¥æ§¾é“‡ä½ƒæ§¼é“‡î„ƒæ§»é“‡æƒ°ç‰žé” ã„¨ç‰”é” î‡ç‰“ç‘—è¾«îž‹ç‘•æÐ©ç’€æç•¡ç’å‚ç•£ç’å‘°î„¸ç’æ›¡ç°³éŸ¬æ—‡ç°¹éŸ¬æŽ•ç°®éŸ¬æ ¬ç°µæžçŠºèˆ°é–°å›¬æ†£é–¼æ„°æ†¡é–¼å¬®æ†¦é–¼å›¬æ†›é–¼å ¥æ† é–¼å—›æºˆé—Šï½‰â€”æ¤¤â•…î—æ¥—æ—ˆîš æ¤¹åº¨îŸ±æ¤¹æ—ˆîŸªæ¤¹å¿›ï¹«æ¤¹ï¿½"],["f7a1","æ¤¹å¤îŸ°æ¤¹æ„°ç¢æ¥æ¬“îƒ†æ¥å©šç“¥æ¦„æ›¢çœ´æ¥¸å ¥ç¿±æ¥¸å‹¯è‚®æ¦˜æŠ½çœ®æ¦˜å¥¸èƒºæ¦˜æ’®å®‰æ¦˜ä»‹å²¸æ¦‰æ¶¢çª‰æ¦‰ç‚ºçª”æ¦‰å¬®çª…æ¦‰æ»ˆçª‡æ¦‰ç†¼çæ¦‰æ¬“çªæ¦‰æ ­è¿”æ¦‰æ›¢çª›æ¥¹å •è¯æ¦§ç”¸æ±²æ¦§æŸ¥çµºæ¦»î‚¦ç·¯æ¦«ãˆ åŠ·é”æ¬ï¼ˆæ¾¹Ñƒã‚²ç€›å¶…çªé” îˆšç¶‡éŽ´ä½¹åž‰éŽ´å‹¬æ•¥é€ãƒ¦æž›é‡î‚£ç‘§å¨†æŽ“ç‘¥å§£å©„ä»œéæ°±åž»éœå‚œå·µéœå†ªæ«šé­æ—‚æŠ±ç»«ï¸¾ç°³é‘¹î„ƒæ¨…é“â‚¬é“‡ç¡…æ¨‡é“‡è¾«æ¨†é“‡æç‰¥é” èŒ¶ç‰£é” å® ã‚¶ç‘—ç£‹ã‚³ç‘™ï¿½"],["f840","ç’å²ƒç•®ç’å¬­ç•§ç’žå‘°ç¤„éŸ¬æ¨¿é¥¯æžï½‰å––é–¼ãˆ¤æ†°é–¼æ¿‹æ†²é–¼ç‚ºç„ºé—Šå‘´çˆ›æ¤¹æ ­îŸ¶æ¥ç‚ºç‘¹æ¥çŠ»çŠæ¥¸æ©€çˆæ¥¸å©‡ç„æ¥¸å¬®çæ¥¸æ¬“ç‚æ¥¸åº¨åŠæ¦‰çƒ½çŸ¾æ¦‰ï½‰å¸†æ¦‰æç­æ¦‰å •è´°æ¦‰î‡€ä¹æ¦‰æŸ¥é’’æ¦‰ãˆ¤ç•ªæ¦‰æ’®çƒ¦æ¦‰ã„©ç¿»æ¦›å‚žç²£æ¦›æŸ¥æ€€æ¦§å—›ç´²æ¦§ææŒ¤æ¦§å •çµ»æ¦»ï¿½"],["f8a1","æ¦»éæ¡¨æ¦»î‡€è’‹é¥æ’³æ³¹ç€›åº¡æ¯é€î…Ÿæ´¯é‡î†½ç‘©éç†ºä»­éæ¿ˆä»©é–ï½‡æ‘é¡ãƒ§ç…ç»€å“¥Î¨ç»‚å‰è±¹ç»¾æ¥ƒç·£é‘¹î…¡æª­é” æ­Œç‰±é” ä½ƒî”ç’æ—‡ç•·éŸ¬ç‚¶ç°¾éŸ¬çŠºç°¼é–±é¹ƒå–—é–²å‚žæ‡Œé–¼ã„©æ‡‡é—†ãƒ©æ½Œé—ˆå†®æ½Žé—Šå›¬ç…¡æ¤¹ç‚ºçªæ¦„æ¬“ä¿æ¥¸Ñ‡å®æ¥¸ãˆ¤ç˜æ¥¸çŠ»ç«¶æ¦‰é¹ƒç«¾æ¥¦å†®ç«¼æ¥¦å‘´ç«´æ¥¦ä¾€ç¬æ¦‰å—æ–¹æ¥¦å‹¯ç±‚æ¦§ç‚ºçµ¾æ¦»æ’®é™æ¦»è·ºæ´ˆé€î†½æŸ›å¨†æ¨»ç‘±å¨†æ¥ç‘²éãˆ¢åž¿é˜î†ç…’é­æ¬‘ã™ç»«â•ƒé²ç»¯å‰ç°¹"],["f940","ç»¾æ¨¼ç°ºç»¾æ¬’åš‘é‘·Â¤æª°é“å›ªæª²ç‘—ç¡…ã‚ºç‘—è‰°ã‚»ç‘™èƒ¯ç•¼ç’æ¬’äº¥éŸ¬ã‚ˆæµ·é–¼î‡€æ‡Žé–¼îˆžæ‡•é–¼æŠ½æ½æ¤¤æŸ¥îš¤æ¥¸ã„©ç¢‘æ¥¸î…¢ç¬…æ¥¦å¶‰ç¬Žæ¥¦å¿›ç¬’æ¥¦æˆ¦éª¸æ¦›ç”¸ç´šæ¦»å›¬ç¤æ¦»å©šèƒ¶æ¦»ç‘°æ¹ éï¸¾æ‚²é” è‰°æ«éŸ¬ï¹‚å™§é–¼æ’®æ‡œé–¼å •æ‡™æ¤¹çŠ»è´æ¥¸æŠ½åŒ—æ¥¸ç”¸ç¬–æ¥¦æ’»æ¬¢æ¦§ï¿½"],["f9a1","æ¦«ã‚‡ä»ºéãƒ§æ’¤é“î‡ç‰¼é” å€Ÿç‰½ç’ç‚¶çŸžéŸ¬â•„ç²”é—ˆå¬®ã€•æ¤¤æ’®î—‘æ¥—ï¿ Î›æ¤¹ã‚‰â”‚æ¤¹Ñ‡î‚¿æ¥¦æ›¢ç¬šæ¦»å Ÿåžå¨†ç‚µåŸ€é“å²ƒé…£é–½å‚žæ‹ƒé–½ä¾€â”…æ¤¹ã„©îƒ‰æ¥¦æ¬‘åŸ„é“å¬­ç–…é–½å†®æƒ«æ¥¹é£Žæ«Ÿæ¤¹î‚¦ç„™æ¥¦æ¿ˆä»¼éîˆæ°¦æ¦»é¹ƒç¶æ¦«æ¨¼î•¦é–µç¡…î—”æ¾§ç»˜äº½ç»®Ñƒî·éˆºæ–ºæš’éˆºæ¤»æšŠéˆºîƒ½æšŽéˆºæ°£æš•éˆºæ¿ƒæ™µéˆºã‚‚æ™»éˆºç‚©æš˜éˆºâ™€æ™¿éˆºÑ€æšƒéˆºæ’¯æšéˆºæ ¤æš‰éˆºî‚Ÿæšéˆºæ¬Œæš”éˆºæº¾æ™³éˆºæ„¨æš›éˆºî†¹æšŸéˆºîˆ—æž”"]]

            /***/ }),
        /* 105 */
        /***/ (function(module, exports) {

            module.exports = [["8740","é‹¸é¢å®‰éŒå†§æž½é‹¾è‘›îŽÑ‚æ£é‹¿ä»‡Ð å˜å°çšˆç¡¡æƒæ›šæ¹ºéŒ†å‹ªçœ¹æµ”â‚¬é»å¨ç©‘æ§œçšˆå´šç©°ç°¨çšˆå„æµ”æ¥Œçšæˆœæ½–éŒ€æ°«çŸƒçšˆçˆ†æµ¯å›¦î€ƒéŒƒâ—‹Îœï½‡åž¾é¦¥îŸ²ç¨¹î €ç©‘ç«¼ç©‘å¥é…å¶…æµ•"],["8767","ç¼æ›žî™‚çšŽî†æƒ´æ’®æ¹¸çšˆî‡¤ç€µæ¶´ã€‰ç‚²î€ƒéŠŸãƒ°â”–æ¿ç£ç€¹å³°è‡£é‰î†¿æž”çš“îšŠéŸï¼„æŒæªå¼ã€‰æ“†î—Ÿçƒ‰î›¥Â°æ»‘"],["87a1","é¦¥î—£æƒ¬ç”µî¹æ¦«æ¥Œî˜ªâ—‹Ã å¶î—Œîç‰šå©î—Žç‚°å¯ é’‚å‹¯ç·°é–»îˆ™ãé“‡æ’³î•»é—ˆå©‡åž¬ç»‰æ„®Ãºé…çŠ³Ä«çšæ¿ˆæ†£ç»¡å‘®ç€­ç»‹î„€å¢¢é–¬å—æ‘éå‹·ã‚¶åœ­æ¯æ¦­å›§ç£æµƒîˆšæ†£é‹­åˆ«î—Ÿåº¡ç‰ç»Œæ‹†Ð›ãƒ¨ç•¯éŒƒî‡‡îž†å œå”©é¦¥ç¨’ç» î‡‡î•·å¥¸ç¹„ç¨·æ§ç¨·æ²ç¨·æ¶æ¦­å¤Žæ”§ç©‘æŸ£é‹«æ’®ç¹†é‹¼â—‹î€–æŒŽåª®éî‡€ç¹ˆ"],["8840","éŠâ‚¬",4,"é¦‰å‰¬éŠå’…çˆŸæˆ°çˆŸå¶ƒå™¯éŠå›¸çˆŸå¬¸ã€‘ã„£å™²é¦‰å„•éŠå¤ˆå™´éŠå¬¨å™·é¦‰å‰®éŠå¶ƒå™¹è†§è„•èŽè„Œè†¾è„¡è‡è„ è‰‘è„«è“è„ªå—«æ£µå¨žå‹§å£•å—«æ£µå¨žå±·ç²ˆè„¢è†©è°©èè„¿è“±è†¿èŒ…è‡ŽçŒ«å¢¨é“†è’çŸ›è‰’è´¸è•è²Œå¥´ç…¤è™éœ‰è›è¢è¤"],["88a1","è§çœ‰å—«æ£µî€«å‹§åšŽå—«æ£µî€«å±·ç²Šé”šä¼žéˆ´æ°£å½Œ"],["8940","çš™å¸ºç¨¹åŽ–"],["8943","é€ï¿½"],["8946","æ¶“èŠ¥ç²·æ¦ˆåº¨åš"],["894c","çšˆæ¹¹éŽ¾æˆœç´°æµ¼ã„¤é²¸éæ §å´éæ»ƒåš–é”â€³å§©é–è¯²å´•é™æˆå½‰é¥ãˆ ï¼æ¾¶å‹«î˜¬æ¾¶æ’ã”ç€›ï¹€ç–„ç€¹ç†·çŸšæ´å—˜â‚¬ç»˜æž†éŒç‚¬çˆ å¦—ãƒ¦ç¥¹éè‚©æ•¸ç»¾ã‚‡å«ç»¾è™¹ç²ç¼å¿•ç²ºç¼‚å—™æŒ¤é‘¹é¸¿å«ƒé‘½îˆî‹ç’æî‡—æžï¹æ¶§æžï¿½"],["89a1","éžæˆ è‡£ç»¶å¶†îš‹ç»”å¤ŠåŸ€"],["89ab","é–±å²€â’é–°ç‚¶å§"],["89b0","ç’å¬­å…Œé¦‰Ð"],["89b5","é‘²ç†¼ç²æ¶‘å¶‰ç©³æ¥¦å±¼ç†¬çš“èŒƒçšˆâ‚¬åº¨ç¬‚çš™åŠ¤éŠžï¿½"],["89c1","å©§æ°³åŸ¦é¢ï¿½"],["89c5","æµƒæˆ¦â”ˆæ¥ å¿›ç·³ç»‚å›¸â˜‰î„‹ã€‹å©ç‰€æ„·î¦ï¸¿è¢±æµœä½·ç°šæµœå›¦åšŽæµ î‚¡æŒ¤éŠ˜å±¼çª˜æ„Žå â‚¬å†¨å€›éŠ˜å§æŒ€éŠ™ãƒ¥å”µæ¾¶å‘­åšŠé‘ç…Žåžæµœå¤Šå£’é”æ„¬å°ŽéŠžå›§å¸ºéŠœæˆå¹‡éŠœæ’³å¼¬éšï½ƒæš›éŠœå±‚æ®Žéœæ’³æŒ˜éœæ‘æéæ„¬æ‘¨éžæ¨ºæ•šéžã„£æž éžè£¤æž¼éŠåž®æ£—éŠžï¿½"],["8a40","çšˆç§³éžï¿½"],["8a43","é¦‰çœ°é¦‰ç£¿é¦¥åŠ”é æ„·â’Šå—Ðšé¦‰å´„éŸ«å—®ã–è‘›îŸ±ãƒ¤äº¾çšŽå©é«å¼î«æžÃ¹éŒˆæ›«â–æ¿”Î—æ‹†ã—î…æ‘‘é¦‰å¯¼é¦‰æ•¬é¦‰ç¡¶ç¨¹å…‡éŽ¾å¶ˆå’•é¦‰ç°´é¦‰çš¨é¦‰é¥¯ç¨·åšçšŽå¢«é»æ‘€"],["8a64","é¦‰ç¥®çš“îŸ«çšŽå„µéŒˆç­”ãšÑŽâ’Šå‚žî€‘æ‚ŒÑŽîŸ´æ·¬å‡¯éŠ›å—®îšå›¸îŸ¼æ—”Ð’å ­â’Œå‹¯è¯žé—‹ï¿½"],["8a76","é‹¸æ¬šî›§ãƒ¦æŒ»éï½â’Œå²Žîªå©î”†æž«Ð©ç¨¹ä¼…"],["8aa1","ç©°æ´‘ç©°æ¹’çšˆîœ…éŽ¿îîš†æŽŸç‰¨å†­é¾šç¨·å•žçšŽç“•é¦‰æ¹µ"],["8aac","éŒ‰å¬¸çˆ¢â”¿äº¢æ¿‰ä»‡â’ï¿½"],["8ab2","é»æ£ƒé¦‰æ‘·ç©°å€µé¦‰ç¶„é¦‰ç¨éŸé€›å¦é‹·ï¿½"],["8abb","æ´«ç­”â…¸ï¸·î”‡æ¿Šå•°æ¤‹å¼ç‰°æ»„åµæ‚ƒæ”«î–‚ä½ƒç©©é¤â„ƒæ‡ æ„Žï¿½"],["8ac9","çš™æ¦¿é¦‰ç¬ç¨·ç¡ç¨·ç¡¥"],["8ace","ç¨¹å„“ç©‘î‡æ‚æŽ‹â–ŽçšŽå§éŠœè‘›ã‚¹å¤î•¨å›§æª¼é¦‰æ€¥ç¨·è†Šçš“æ¹¢éŠ™å…¼æ•–é»å¯Œ"],["8adf","çšˆæš£ç¨·ç°¨ç¨·åžçš™æ«…çšŽç¡©é¦‰è´­é¦‰æŒ‰ç©°ç‰…ç¼‡æ“†î”ˆå¿¦î–…å‡â…³å¹¿æ¤ˆé¦¥åš•é¦‰ç°©é¦‰ç·§é¦‰é‚¯æ†”æ“†ç‰¸æ¢†ç‰­å›¸î”Šå¿¦ç‰´ï¿½"],["8af6","é¦‰éŸ©é¦‰î†€é¦‰ç¥±ç¨¹å„‰ç¨¹åŠ·æ†§æ¡‚î•¿æ ¨æƒ’é¦‰ç»"],["8b40","ç©‘å½ºçšˆæ¨„ç¨·ç˜žé¦‰ç¨»é¦‰æ‚¼ç¨·ç‰ç¨·çæ‚’æ©‰ç‰¶æ©‰î”ˆå›¸ç‰¸î‡‡ç¦æ‹†Îæ„·Ç”æŽŸÇ˜æ¬šÇ”å©‡æŸ‚éå²ƒåª±é ï¿½"],["8b55","çš“ç²Œæ¦˜ï¹‚î€•çšˆæ½ªç¨·æ¨Šé“â‚¬é‘µî…¡å„¸çæ»’î›ºèŒ¶åŠ¥éŠ¥æ¥€å´¯çšŽå¨é–±å¨¥ç‰·å¼ç‰³å¿¦ç‰´ä½›ç‰·æ±‡æ£Ÿé»å¸†éŠŸå¤ç‰«æ §æ¯Œç¨·ç¥ç¨¹å„”é¦‰ç¬Žé¦‰åž¢ç¨¹ä¼•ç¨¹åŽ›çšŽåžç¨¹æ†°é¦‰æž„é»ç®°ç¨·é’‰æ¿ æ—”î”…æ¿”î”…çƒ‰î”ˆå¼î”ˆè·ºç‰é¦‰ç¬"],["8ba1","çšˆæ®§çšŽåª¿é¦‰é•œé¦‰å¤Ÿé¦¥å˜éŠ£å‡ç‰¼å¨¥î”‹â‚¬é¦¥å«Žçš™å¨Šé»îŸç¨¹ç‰¶é»å¿çšŽå£–æ¾§æ¬å¢¾éŠŸæ°¿îš¡ç•Œî†‰ç€›ã„¤çˆ›æ´®î„„å§¬æ´„Ñ‡ç›æ¥«å¶ã‚­ç­”î—‰è—‰æ¤ˆéŠžæ’æ®™æ¶“ã„¥î˜§ç¨¹ç˜‰é¸ ã€Œé—ˆæˆ°çˆžå—•ç®¾æµœæ±‡æ–çï½…ç¶‰è¹‡å‹©ï¼šéŽµå±¾æ•¸å§çƒ˜æš—å§˜è™¹ä¼‚é–î‚¡è„¯é˜î…©ãƒâ•ƒç¶Šç»€è¤å½»ç¼ƒæ“†î›®î‚æ§"],["8bde","ç©°å´‘é‘°å‚å€‹ç©°æ§–ç©°îš–é—æ¿ŠÂ·ç‘™ä¾ŒÐ‘èŒ¶ç–‡ç’æ¿‹æ‹é—€ææš±é—‚îŸ“Çœå¿›ç…¢æ¤¤ç”¸î—“æ¤‹ç‚ºã‚£çš“çˆ¯æ¥¸å¥¸ç¬©æ¦›å‹¬î„¨é“¯å›¦é˜œé¦‰å€—é—ƒæ¿‡åŸ›é–½ï¿½"],["8c40","éŠç»˜è‚ªçš“èƒŒæ¦«ï¸ºç©³çšå¿¦î˜ªåº£ä¼”å®„å…¸ç‘ºé¦¥å™¸éŠœæ¬šã‚´ç‰ˆåŠ‰çšŽÃºæˆÑ‡åš©é”æˆžæ¹™éœå¼î—ä¾ŒçŽå›¥çŸ‰ç¨¹î›¥æ´®æ„®ï¿¥éžå‚šå•´çšŽæ¹‰é‹©å¤‹î €çš™å§¾é‹±ï½ˆæ§’é¦‰â”‹ç»‹îâ”å›¸Çîˆæ½Ÿéå¶…å°‹ç¨·ä¼¨é–ºå¯¸æ´çšŽÐ’æ¦«Ñ…ç…—æµœï½„å ªéŒé—´è…æµ¼æ¥…é²¸éšå¯¸ç§¼æ¾§æŽ‘î—•ç¨¹æŠ–æ´æŽ‘ç°·è¹‡å‚ªî–æŽ“æžŠ"],["8ca1","ç©‘å¾†å¦žæ¬ï¹¥ç©‘ä¿å¨‰ï¿½"],["8ca7","é–â‚¬é»æ”¨éœå±»ç²µé»ã€’ç€£æ› æç’å‡ã‚²ã‚îšŸæ› ç¡ç»¡î„‚ç¡Ÿç»»î„ƒå«ºé’–æ¥…äº¬çšæ„°æƒŠéŸ¬å½’ç²¾æ©å¿šæš‰æ¤çŠ»åžºæ¦«î„‹Ç˜æ¡‚î”•å¤¸ä¼‡é‹³ãˆ îŸ€"],["8cc9","æ¤¤ã„¦æ½¾é‹²è·ºæº„"],["8cce","é’˜æ ¶ã…æ˜å¨çšˆå‰­æ´³ä¾ŒÎ¦æ‘ç¥·ç©°ç‘«ç©°æªæ¦«î…¢äº•ç€¹æ ­è­¦é‡Ñ…ç®¾å©€æ¥ƒîæ„£å œæ©ç©‘å¢«ç¨·çƒé‹·æ°«æ•¹"],["8ce6","å®„æ›«ï¼Œæ°³î¶çžæžç£¼ç©‘æ™³å®“æé™é“æ¤¾æ™¿é»å„¸ç¨¹ç¦æµ”æž«ã‚¸éŠ˜å©çˆ¢ã‚Î¡ä½½çœæ¸šç­”çˆ¤ç‘°îž‹é‘µî„„î”›çš“ï¼šå¯®ï¿½"],["8d40","é¦‰ç–…"],["8d42","ç¨·å™¥çšŽã‚­é‹­å‚™æ¯£çš“ä¼–æ…µå›¬å¢ƒçš™å–Œé‹¬æžç…éŒ„ä½›Î¡å—•å‹çšŽæ¯‘çšˆå¾”é‹¾î…œî—™é¦¥æŒŒé‹¾â€²æ•æ¶ å¤‰è¢«æ¶žæœµæ£¯æ†§å ­ãŒå¿‹æ«‹é‹¼ç‚°æŠé‹°î…žæ·³å®“å ç¦†æƒ´ç¬ºçˆ®å®¥ã‚…è±†éŠ§çŠ®ç‰³éªžå‚šèˆªå¯®ãƒ¥ç·æ‚šå ›î˜¹æ‚šè£¤îš’éŽ¯æ¥åŠ·å®„ãƒ£î›®éŽ²é”‹å–’éŽ³å¿‹Î©éŽ´î„å§éŽ·ãƒ¦å¯´æ‚ƒç¨¿æ¯"],["8da1","æ‚’å†©å½šéŽ»ç»˜æ‚‹éŽ½æ°¥îŸ©éŽ¿â‚¬å®•æ›žæ§¨æ¦«ç†´ç¥é‚å—î€œéƒæŒŽæª½æƒ¬å‰æ®¥æ‚»ãˆ¡æ¹’æ‚±å‚›ç“éâ‚¬æ‚±æ¨»î”å§Šå‹©î„«æ‚±ä¾¿î„´å¦žå¤‹îšˆé—æ»„ã‚¤å§’ç†¸î›ªæƒå…¼î›æƒ˜æ¿‡â”å§—å­˜â”å¦¾å‚˜î‡¡å¦¾æ¬î‡§å¦¾î‚£î€”å¨…æ—€î³å¨ˆä½¹ç˜‰å§£î…é’¡å¨Œî‚ç¡§å¨²å‚›ç£«å¨²ï¸½ç§®æ„ îˆ›é’‰å¨‘è¾¨ç¬—å¨“æ¨»ä¿¯å©§å—®Ä›â‚¬å©§ç»˜è™Žå©Šæ°¶å¨‡å©Šã„¦å“—å©•ã‚†å³æ„•å—®ï¼ä½¹ç·›å©¢ä¿±æ°®æ„•ç”µå–Žå®€æ¬ç§ºéŽîƒ¾ç¨‡éæ„®ä»ˆéîˆœä¼©éå¤çˆ©ãƒ¤å¼«éŠžåˆ«ç‰·ï¿½"],["8e40","ç©‘ç²­é¨æ”«îž‡æ’¶åŠ¸é¦¥ç…šéŠ åº¢Î’çšŽî‡žç€›å¯¸îŸ§é¦¥ï¼çš“æ‘ç»Œãƒ§â”™é¦¥Îœç»è¤î€ç»”å‚œç’é•æˆ°î›·å¶„å™´ç»”æ°±ç´ç»”îƒåš¡éœæ‹†ã‚°ä½ºç‘¡ç»›æ› îƒ„é¦¥å¯§é¦¥å°˜ç» ãˆ¢î„¨é‘¾æ»’ã‚®ç­”Î¡è·¨ç˜£é’€ï¼„ç•³ç» è‘›ã‚´çŠ®è‘£é¦¥é¥±é’‚æŽ”î‡¯ç»¨å—™æš—é¦¥ç¡œç»«å‹­çŸé»î•§ç»®ï¸½æ«§é»æš©ç»¯å¤Œç¡£ç»¯ï¸¾è´ç»¯å´‡è½¦ç»¯ï¿½"],["8ea1","ç»»Ñ‚æ•ç©°ç®˜ç»²æ¿”îž‡æ «æ‹²ç¼å¤Œä¸œé’ç”µå†»ç»¶æŽŸî˜¦æ¥Œî›¥â•ƒç­æ„¦æ’¶è¿”ç¨¹ç…¿ç»¶ãƒ°â—¢î… ç¬£ç©°åŠ‡ç©°åŽ·ç»»î†¾ç°°é‹µî‚¦æ‡ç»ºÑ…çµ¸ç¼ƒä½ºçµ¿ç»€å¨¥î›°æ„°Ðç¼‡æ¥Œî›²æˆ è†ç¨¹æ«‹é¦‰ä»ºé‹¾æ»’î—¢ï¸¿æ”¦çšŽå°¯ç¼ˆå¼î›·å¤Žâ‚¬å‘°â‚¬å £â‚¬æ¿Šâ‚¬ã„¨â‚¬îˆ¥ç‹å›¸Î¤å†­â‚¬æ˜â‚¬è‰°ä»­ç¨·æ¹æ´‡å¤î›½ï¸·ï¼—ï½îœ€ã„¦æ¹§é‘²ÑŽÄ«å £å‰£é‘´æ°¬î«ç¨·æµ‚å§¹ç­î›·æ©‰ãžå‘Šæ‘Ÿç¨¹æ‹ªé‘¸æ©‰ã€€ç‚´îŸ±é»â”é»ç£é‹ºé¸¿åŸ„é¦‰ç‘£ç©°îŸ°ç©‘ç¨»æ·‡æ¡‚î”˜å€Ÿæ‘™é‘½î¯Îœå©ã†ÑŽî—™æ¢†î”¢ä»‡ï¼—æ­Œå§«å¦žæ¶´î‡›æ–¾åšŠ"],["8f40","é’‘å¬­å«„é‘¼æ°¿ç‰³æ ¶î”£æ·¬æ³šç©‘å”ç©‘æšé‘¹æ˜å«é‘¼æ©‰ï¼šå¬¸Î§ï½Îœå’…Îžæ¥Œî—œåº›çŠŠé‘¼æ¿†æ£³é‘¾å‘¬æ”±ç©°é¡¶é‘¾î„ƒå¼«é‘¿æ’±æ‡¢ç©°ç²©å§—æ¥„æšéŠ™æ ¶îž…å‚ªâ’’îˆæ†³é¦¥î‡™é’ä¾¿çªŠé‹¼ã‚†î€†é’å©ï¼’ç”µîšé’‚îŸ“Îžæ ¶îž…ä½›îž…å†­æ‘“é’€å¿šå¸’é‹»çŠºæŒ€é’ƒã‚ã‚²æˆœå¢é¦¥ç¡›é‹¾å†­æ•¶ç€šæ‹†îž†æ¬Žæ•¡é’‘å……æ•„é‹èƒ¯æ§š"],["8fa1","çšŽæ§¬çšŽæ¨†é’˜ä¾Œî‡å £æ§€ç¨¹æºçšˆå„˜é¸ Î£é‹¾î‡æ§°éŠ å ­ã€ãˆ å½¿çšˆå¸¤é“ææ¾…çš™å…é”œî‡‡î«Ñ†ç¡é”œæ°³çˆ®é£Â¤æ«–å¦—æ ¦æ§’ç›å‘°î”‹çšˆæ£¤ç©‘è±†çšˆæ£¨ç›ç‚¶î–éŒ‚æ¶œâ’‹çšåž«å¼«ç‘å‘¯æ¾çšˆæ¹‰ç‘•å›ªî›¯ç‘•ï¹Î™ç‘•Ñ†îžˆçšŽÄ“ç‘™ÑŽÐ“ã‚Ð˜å€Ÿçªé¬æ’»åš²ç‘¾æ„·Ð—æ¬‘î¦çšˆîƒ•ç©‘ç·©éŒ…æ“†Ðšå“¥å‹ç’Žå²ƒç‘¹é¦¥æƒé¦¥æšç’Žèƒ¯ç“•ç’€å¶ˆî€ˆé»â”–ç’æ„¯ç–€ç‘¾îˆ¥î” ç†¶æ§™ç›å¿šçŸçšˆç¦‚çšˆç¨„é¸ î™éŠ£ãƒ°Ð£æ’¹ç¡¸çšˆç¨‘çšˆç£ç’æŽ•ç£§ç¨¹î˜µç’©æ¶šä» ç’æˆ°ã“å¤ˆç²£ç’§ï¿½"],["9040","ç“’î â–ˆå‚ªî”…æ—”ã†å¨¿î„µçšŽå––çšˆå‰¬ç»”Ñ†æ¶µéŸ¬æƒ°ç²Œé–¶æ—‡ç´®æ“î…©â—¢ãƒ°â—¥æŽ•èŒŽé–·å‡ç–ç‡„ç‰˜æ„¯å¢ƒæµƒîÄ›çƒ‰ã€é‡‘ï¼–è¯²æ¡“ç©‘å¢·æ©æ¡‚ç‰æ—”îŸ€æ‹£ã€ä¾Œî•±ãƒ£î›¥ç©°ç²­é–«ä½›ã€æ‹£Ð˜é¹ƒä»­çšŽæššçšŽæ§‹é–­îŸ“îŸ‚æ’»å„ŽçšŽæ´£é–­î‡€å…˜é–°Ñî­é–±â•…å™­ç»®î„‹Ã ä»‡ã€Žå¤åž˜å¨Œç†¼å¢Žé–´î¯îš›å½’å§½çšŽç•ç©‘çŸçšŽç‘¢é¦¥æ£"],["90a1","é¦‰å¹¢é–·î„„å´¼çšŽîžçšŽî‡ éå¿“ç’çšŽîŸçšŽî¢æµˆãƒ©å¢‘çšŽî‡¡çšŽè‚®çšŽî‡´é–¸æŠ½æ†¶éŸ¬å¥¸æž€é—ï¹‚æƒé—çŠ³æ…·é‹³æ¡‚î•¾å¼îŸæ©‰î”Žæ‹£ï¼˜î†»î¤å§˜æ»ˆæ«¥é—…æ ¦å•é—…ï½îž‡æ›Ÿåš‰é—…å‰ï¼•çšŽç·é—…è—‰å¼»æ´‡â—‹Î£è‘›çˆ¥ç­”î›µæ„·ï¹¤îˆ¥ï¹¥ãƒ°ã‹æˆ°Â·æ›«î—‘å©‡æ¹µé“å‚žæ¹ºæ´™å¿Žæ–€é‹¿å’…ã‹â•ƒä¼’ç€›ä¾€æ¹œé—ˆæ»’ï¹ªæ›¢æ½¡ç€›å©ï¹ªî‚¦æ½«é–»ãƒ¥å„›ç©‘å¡ç©‘å§é—‰å¤çé—‰éç³é—Šâ‚¬é—ŠæŽ—ç…šé¦¥æ‡é—Šî†¾æ‚³çš“æƒ“é—Šå—ç…¹çš“æ‚µçšˆã‚ºæµæˆ¦ç‰¬é—‹æŠ½î”æ¤¤ï¸ºç‘¤çšˆåºæ„•æˆ°ç‰æ¢†î˜ªï¿½"],["9140","é¦¥æ¸¾æ¤‹å©‡â’Žæ¤‹å ¥î—Œæµç­Î¥ÑŽî” æ’³æŸŠæ¤‹ï¿ ï¼†æ¤‹î„„åµæ¤æ¡‚ãˆâ•€î„«çš“î”œçš“î˜ªæ¤ç”¸â–½æ¥±å©šâ—¥æ¤¹æ©‰îš¡ãƒ£æ³Ÿçš“å™çš“ç˜¯æ¥‚çŠ»îŸçš“ç‘“æ¥‚ç¿ çš«æ¥æ—ˆîƒˆçšŽæ¦¾éŠæ’®îƒç©°Î˜æ‚–å‡î—†ä»‹ç“™æ¦„â‚¬çš“æ·³æ¿ å’…ã€€ï½‰ç•®é»å¢œæ¦˜å‚žî‡´æ¦˜å²Žâ”•ã„©çª‹çš“ç—‰çš™å•‹çš™å•±çš™å„­çš™åŠŠçš™åšæ¦ˆé¹ƒç§²çš™åŠ¥æ¥¦åº¢î•­"],["91a1","æ¦‰å‹·î•ªæ¶´ç‘æ“†ç”ç‹†Â·ç«ç”æŠ½åž‚çš™å£çš™å§¶æ¥¹æ„°ç°³æ¥¹ç‚ºå­©æµ¯æ’®é‚¯æ¥¹îˆ¥î˜²ã‚‰ç²Šæ‚±çŠ®Ð”æ„¦æ¿…ç–¾éŠ¥æ”«Ã²î‚¦ç´“æ¦§å œç•ºé–»ã‚Î§ãˆ¤ç´¬æ¦§æ ­è„Šé¤ç†·æ®œæ¦»å‘´Î©çš“å€ é—ŠèŒ¶æ‡£æ¦»ãˆ¤åƒµç»”æ»ˆç·¨é–æ ¦î†•é»ã‚µé»îž‡é“ä½›ã‡è‘›î˜²å ­ã‰æˆ å¸ªçšŽç˜¹ç¨¹ï¼šç»‚ç‡„Ä“æ”«Çœå •å´ºé–ºä»‡Ä«å‹¯å«­é–¹ä¾€å¼¸çšŽã‚¬é»æé–æ¤¼çŒ¾é«èŒ¬ï¹¥é‘æ„·î˜¶ä»‡î˜´å“¥å˜ç¨¹ç…°éï½ã€æ”«î—›æ¬ç²ç¨¹î•ªé¦¥æƒŽç¨¹ç…¾éŠ£î¯î” ç«î”¥å¹¿æ´ç¨¹æ¾Šç¨¹î—–é¦¥ç¶ƒéŠ£ï½î” â‚¬é§æ¶´ãˆãƒ°î””æ”«î”ï¿½"],["9240","ç¨¹å¼³ç¨¹æŒ¾é’„å‡î—Ÿï¹æ”¦é’æ›«ã†æ—”îŠãƒ°ï¼˜åˆ«îššæ»’ï¼›ç«î†æŽæ‘¯ç©‘æ´°çš“îœ‚ç©°é¸¡éŒå¹¿æ¹·æƒ†æ›˜é˜€æ¿‰î„‹Â·ãˆ¡çˆ¯é‹ªæ¥Œî—¡ç­î˜¨â—‹î˜§å¬¸î˜©å¿¦Î â€³æµé¤çƒ‰î›¿åžæ®¥é¦‰ç¹œé¦‰î…¿é¦‰ç¬‰é–ºå—®Ã¬æ’»å¸¨æµ ç¨¿åŠ”éŠ§æ¬šî˜µæœµæ­é¦‰æ‡ƒé¦‰åµ–æµ£å¬©ç·¤é¦¥æª»æ¿ îŸ“çˆ¢î‚­çˆ®å¬¨î›¾é¦‰å¯ é¦‰æ‚¢éŠ—å…¸ç¼‰é¦‰åª­çšŽæ’¼é¦‰å£ç’œæ°¿çˆ¤å±¼ç°¶"],["92a1","éå¶…å‰­æ¸šî­ç´”é»â—£ç©‘ç°¥æµ£å‚šâ‚¬î†¼ä¼‚éŒä½·ç¹‰æ·‡ãƒ¥ä»’éç…ŽåŽµéæ¶˜åŽºéç‚´è‹Ÿç©‘æž™ç©‘è…¹ç©‘åšŽå¨´æ‹†ã€å‹·ï¼šå¤Šå•«é‘å‡ç‰€çŠ±æ‘‘é¦‰æŒ˜é¦‰æ‹»é¦‰æ‹ºç’§å¼Ã­æ»’ç‰…åº¡å¢®é”ã‚ç‰Žå†²å«›é–¸î†»æ«¤é”å²Žî˜³å²Žç‰¥ç‹†ã†î„‹î”ˆã‚†î–é¦‰ç¬£éŸå¹¿ç²¸é æ¬‘æ‚¢éŸæ «å¸¢æ´šåº°ãŠæ‹£î˜§å¶…å½éŠå‹­åž™é»å„”é ç­”çˆ«å‘­æ·é¦‰ç˜‘é¦æ¿‹å¢²é—†æ’®å´·é©æ¿†ç€ºé§è£¤æ¨‰æ¾¹å¬ªç§çšŽï¹©ç¨¹æµç¨¹æ¾‚ç¨¹æ¹Šæ¿žî„€Î©é–µå¿“â”šç€šå¿“âŠ•é¦¥îš‹ç¨¹Ð¡ç¨¹ã€€é»å§‡éŠ¢åž«ç£ªéŸå†¨Äé¦¥ç°"],["9340","æ¿¯ä¾ŒÇ’æ¥Œçˆ¯æ’»å½”é å²Žî”‘å†ªå‰ æµˆæŸ¥æ‚ŽçšŽÐ©é–¹å§çŽçç‚²çŸ éªžç‚²ç®žç¨¹î›»ç¨¹ã‚¼ç©‘î«å¯¤å¶…ç“˜ç¨¹î˜¨ç¨¹î˜©éŠ£ä¾Œã€çŠ®æ´•ç¨¹æµ˜éŠ¢æ’¹åŠ’çšŽï¹ªç¨¹é€—ç©‘æ‡–çšŽÎ˜å¯®å±½ç´Ÿç¨¹ã‡ç¨¹çšæ¿ î‚­î”¡è¯²ç“Œé“‡æ—”îœå€Ÿî”¥éŽ­æ”«â…°ç‹†î•½î‚¢ç¹˜æ„«è‘›î•»îˆ¥î•»æ”«ï¹¤å ­îž‰è™«å™£é¦‰â‚¬æ”«çˆœå—®î•½æ¶™å•“éŽ²æ¨»ä¼’ç¨·çŸç¨·ç£­é»æ´ˆçš“åŽ¤"],["93a1","éŽ½åˆ«î˜¾ãƒ°î¨î‚Ä«ç¨·î‚½ç©‘æ†ªçš“ï¼Šç¨·åž¢éŽ¸ä½›çžæ¶™æŒ¾éŽ¸è¾¨å½‚é»Ð’ç¨·æŽ¸éŽ¶ã‚â’‰â„ƒæƒ¢éî‚£ã‚²æƒ˜ç­”î—‡åº°î—î…©ã†å¤î—î‚¢æ”³ç©‘å«šç¨¹î—žçš“æƒªé‡åº°î—å¤î—‹ç‚½ç·é‹¯æ„·îš›å‹·Ã¬î¯îš›å¿¦î” æ‹£îššæ¶´îš•ãƒ§ï¼Žç©‘å‰ç¨¹ç‰šç©‘åŸ“éŠ˜ã‚î—å¿¦î—‹å‚ªî˜°å¤‹æ® ç©°æé…î‚¡ç•µé„æ¢†Ðæ¢†ã€‹î‚£æ«ç©‘å«†ç©‘å«›é„çƒ‰ã‚¡å±‚î—–ç©‘ç‰¶ç©‘ç±æƒæ¬šî—£î¯î—”å‰§æ»æƒæ ¨ç€¼é»æ§³å§Šèˆµç‰‰æƒ˜å‹¬î€æªï½î—¤æ›«î˜·å›¨Ç”å§—æŽ“ç˜å¨†å’…Â·æŽ“æ”½å§Šæ¨»îŸªæƒ˜æ¥â”–å§æ¥Œï¼Ÿâ‚¬ç©‘çŸšé–¹çŠ»å«´çšŽî‡ŸçšŽç›"],["9440","é–µå¤â–ˆçƒ‰Ä›æ»ˆæ‡…å¨‘ãƒ¦ç´œé»Ðšå¨´ÑŽï¼è£¤ç¨„å¨“å‹·î˜¥ç…ŽÅ„å¨“å©‚î”Œå¨²ã‚‡î”‡é’ç«î˜±æ°¿î˜®å‰å„½é—æ„®å¦µé˜æ—”î™ƒå¿¦î™ãƒ¥å‚é»î€ƒé¦‰æ£²éŸå¼ï¼›è‘›î—žç‡„ã‰å©ã„æ¥Œã‚¿Â°ç´—æ„«åˆ«ã‹ç‡„Ã²ï½ï¼œåž«å‹æ…Šå´‡æ¶éžå¥¸å·¼éžèœ‚æŒ“ç©°è—©é‹¾æˆ æ»æ†¬ï½ã“æ¬šã”å—ç¶é£æ› æ«çš™æ¢¿æ‚»æ¬‘æ‡†çšŽçœé»Î›é»î›³æƒ¬ï¿½"],["94a1","æƒ´å¶ã‰åº›è±¢é»îŠé»ï¼“é–²å“„æ¹¶é–¸å‚ªÇï½ã€€ã‚…å„«é¦¥åžºé¦¥åš™é«è‘›î—èŒ¬æ¹ˆéªå¿•æ¾”é»æ®«ç©‘ç€¬æ‚Œçƒ‰ãƒæ‰®æƒ›é æ¶–åšŽé»î€™é»ç–é‹¬å ­ãŠæ ¶î›«î‡€å¯šé¦¥æ¹é®ç‚µî•²çº°å ¢î——éæ„®îšžçšˆæ½„é¦¥æ´ é‹­åº£îœ€é’‚æ «Î•å¦¯î…©ï¼›è™¹Ãªç»‰ç¿ åœç¨¹æ´£é‹­æŸ¥åŸ–ç»‰åˆ«ç‰­å²Žã†å²Žçˆ¦æ¬šï¼–å¼î”¢î†ºæžŸéŸî‚ æšŸéŠ¡îçˆ£æ—”ç‰¥å¶‡îŸæ¿ æ¬šî–€å¼ã‚ªîˆ¥ã‚ªæ»ƒâ—¢é¦‰å¢°çº¾æ¿Ã­é¦¥ç˜‘ç»”å¥åš¬ç»«æ¿ˆæ¯é‹±æˆ°ã‚®ä»‡ã‚ºæ‹£ã‚ºï¸¾ç¡©é»Ð§ç¨¹ç ç»®åº£å¥”ç»®î†½î€‘ç»¶æ»…ç«¾ç»¶æ’¶ç¶†ç©°å¢¶"],["9540","ç©°åŽ¹çšˆç“ç¼æ¥Œã‚ºå‚™å£€ç©°î„®é¦‰î˜»éŒæ ¶çˆœåº°î—œå¿“ç„ºç©°æ‚žç©°å¾ƒé»ã‚¢ç¼ˆæ¿ˆîƒ‚é¦‰ç‰žé¦¥î¦é¦¥ç¥ªç»—å²Žã‚¸åº¨Ð•é“å‘´î €å¦¯æ»’î—•è£¤Ð‘é»Ð¥ç©°æŸ‡æ¥±ç‡„î›»çŠºæ‹ƒçšˆåŠŽç©°ç¡²é‹¼î‡åŠ®é‹¹å‚å„é‘´å¤ŽåŽ’ç©°ç¤æ¤‹å‡Î™å‚å¢·é‘¹ãƒ°Î™æˆ£æ†®ç©°é”­é“‡æ„·îæ¶˜ç‘é‹®ç­ã€€â‚¬ç€£î‚­ã€â€³î¡ç¨¹î—é““ç‹†î‡›æ‹£ï¼–å¿šç‰ çšˆæ‚½æ¿žï¿½"],["95a1","ç›î†»çµ½çšå›ªâ’–ç‘ï¹ã‚¥ç‘—å¶îšŸå†­îš™çšˆç€°çšˆç€¯çšŽî‡ªçšŽç˜·çšŽç–çšŽÐ§æ„«î…¡æŒ˜éŒ„å…¸æ´€éŠ¦èŒ¶Å„ç‘·æ»’îŸ¯å ç¶…é–³î‚­î˜¯å‹¬æ£“é’â•ƒå„Žç¨¹î”Šæ¦ˆî…¡çŸ¡ç’©î Ð¥æ»ƒî›¿é­å†¨Ðžé‹¶î†ºæ´ˆéŸªî‡éª‡é»çš¦æ“æ‹Œç¶‚é‹´å­˜ç’å©¢ç«î•±â€²î–€å¨¼è§„ç°¨ç¨¹ç…”æ¦€â”¿æ¯œé»ãé–­å©šå€µéŸå˜î˜«é–±å©šæ‚‡çšŽîŸ©é‹ªî¯Çå¥¸æƒ‚çšŽçš¾çšŽç›Žé’ƒãƒ¨Çé—æ¬“æž¾é—æ¥…æž›çšŽåˆ›éŸå‘«ç²‹é»ï¼Ÿé»ï¹¤é»å½§æ…ŠÑŽî—ãƒ©æ®¢çšŽæˆ·çšŽåŠŸçšŽæ”»æ…Šå²Žã‡î…©ã‰è‘›ï¼Ÿî†¾æ‚žéŸî‚ æ‚£é—ˆä¾Œï¹¤ï¿½"],["9640","å¦—å›¦îŸƒçš“å€±é¦¥ç…™é—ˆæ¿‹å´¹çšŽî›®çšŽå”‰çšŽîƒŠç©°å¹˜é–µå“„ç‘§ç’€â•€ãœéæ¡‚î˜­æ¶¢çˆé—ˆéã˜é¦‰é¸¡å®¸ä¾ŒÇ’å’…ãŠæŸ¥ç‰Šçš“æ‘Žé–¶å¨¥îŸ´æ¥…åš—é‹¼â‚¬çšŽç“™é»â”ƒçšŽî„æ¤‹æ»’Ä«å‘«ç´‘é–³îƒã…é’€æ—ˆã›æ¥—å¶Ðšå—æ–¹æ££æ¶—î„¨æ££îˆîŸ¹çšŽî„žé¦¥î—å¦¾å¿›Äç€šé¹ƒÇ’çš“ï¼‘æ´šæ„·â”å ¥îžˆæ´šæˆ’ç•»é–¸è—‰ã€”ç¨¹å¯•é«î¯ã†ï¿½"],["96a1","ç¨¹æ‘ çº­å‹·î–ç‡„ï¼–å‘Šî—Šæ„•ä»‹æ†³æ‚šÑ„åŽ«ç¨·ç€¬ç¨·ã‚«éŽ°å›¬ç†æ¥¸æ’»è¢«æ¦˜ç”¸çš­æ¦„å—ç˜¡çš“è…‘æ¥«ç‡„ç“å¼çŒé¹ƒç¡€æ´³î‡‡î˜©å‹¯ç¬œæ´³ä¼´ç£³çš™å–†çš™å„¹çš™å…‚çš“ãæ§Žãƒ¨æŠç©°ç¬’ç©°ç¹œç©°ç•Ÿé’˜é—´æ•µç©°é’‰ç©°ç°žç©°é’’é’€çŠºæ£¶ç©°ç«´ç©‘ç…‘ç©°ä»±ç»‰î¯î—›æ»’î—žâ‚¬æµƒî…©ã‡ç‚ªè€½é–ºæ¶¢å¨‹é–¸å ­çˆ¦è·¨â’é–´çƒ½æ†¤æ·‡ã‚ƒæ†–é–¬ã‚îššæ¿ˆç‰»çº­æ—‚â’çº­å¬¸î”¢æ¥Œî—Œå¤ã…ä½µæ®®æµ£å‰ç¹—å©µæ¬‘â‚¬ç‚µâ‚¬ç‚²æ‚¢é»å–Œé¨è¯²ï¼“é¨å©‡ç¤€é©æ¥ƒåŠ¥éŠ™îˆ¥î˜«î„‚åšç©°çœ¬é»ç·±ç€£îŸ“î”£å¼Ä«ï¿½"],["9740","éŽ°å±½çŸæ¿žå¬©å¨‚é»æ‹¡éŠ£îƒ¿î„´çšŽÐªé–¹å©šå¹ç¨¹î—›é¦‰ç´³é’æ‹†Î¤â‚¬ç¨¹æ‚¡é»å«¼ç¨·å”‰é»å¼«æ¿¡æ—”ï¼–ä½›îœ‚ä½ºå®šç©°åŽ¸ç©°å†é»îž…é»î›°çšŽÐ¨é–¶ãƒ§å½šæ…Šâ•ƒæŒ»çšŽî„œç¨¹î–„æ…Šâ—‹ãŠè™«ç®éå´‡å¾Žæ…Šæ ¶ãˆæ”«ãŠæ—”î”¤æ¬šã‰ï¸·çˆ­ÑŽî”•ã‚ã‡ãƒ§æ†Ÿé»î˜»éãƒ°ã…å •å¦±éï¹‚å´¯é¦‰æ‘¼é–·åˆ«Çåº°Ã¨æ ­å·»çšŽî‡œé¦¥æ£”æµƒå¼Ã­å‚œå“"],["97a1","é»îšˆé¦‰æ™¨é¤ã‚ç‰æ°¿ç‰¤î‚­ç‰ªç¨¿æ”¤ç»‰å‹·î”¤è™¹è‚ªç¨¹æ³œé»îŸ®ç¨¹î”—é‹½î‡€æ‚‚éŠ£å©Çâ‚¬é»Îæ¿¡æ¢†ã€ç­ã€å‡î—å‹«î€€éŠ¢î¯ï¼•æ¶–æ¯Žé–´ç†·â”•çšŽçŠç¨¹ã€é–¸æ·¬ç¡©é¦‰î€“æ´«æ ¥î›¯éæ·¬æ—¦æ„•å²Žî”“æ»…åºé‹´ç«â–“æ¨»ç¬çš“å„°é‹¼î‚£ç¦‡çšˆç®¯éÑ„å¸›æ„ æ ¶ï¼Ÿî…©ï¼˜î…Ÿç«¶å©•å±»å¼¹é¦‰å½½é£æˆ™æ¯¤éŠšå œæ®Œæ…Šæ°«â€æ¿®å‹¯å£†æµƒæçµ¹çšŽçš½ç©°ç˜ˆé«æŽ‘ç„¾éŠ¢æ ¶î”–æŽ”å…™é»å´²é»â”ç¨·æµšç¨¹å§²ç¨·å¹—å§Šè§„ã‚§ç¨¹å¸¢ç©‘æ‘œçšˆî‡©ç©‘æ´˜çšŽçŒç©‘ç…ç©‘å¾é»çŸ¡å¦¯æ°¿î—Ÿî…©Î£ç–¯æƒ¥é‹¼ç†¶æ¸"],["9840","ç©°å¤„ç©°ç¥½ç©°çŸ€ç©°ç¹›å©•æ¥Œî‰å¤Žå°³ç¨¹æº€é‘¿î…©Î£â‚¬çšˆäº¾ç¨¹ç…•æ¿¡å¤Šç‹ç¨¹ç£æ¿ â€³â”ç¨¹î˜ªé»åš°éŠ£î…žÐç¨¹æº‚éŠ¢å›©å•‚é–¹æ„­æ®®é»å§¤æ¿ î†¼Çé»å§„å¦¯î‚­ï¼›æ¡‚î¡å¨¥î˜¶æ¶´î˜°å©„åŠƒé»å¢®çšŽÐæ¸šæ¢†Î¥ã„¥ç¡žé»æ¸çšˆç®¥é»å¹—å¦¯å²Žî˜®æ ¶î”‘å‹­åŠé’ä»‡î˜´â”¿é¡¶å¨‰ç‡„ç™„ãƒ°ã‰å¿•æ”»æ¿®î‚¢ç–®æƒ´å†²ç¶”é»îŸºç¨¹ç…™ç¼ã‚ˆæƒ"],["98a1","éœå’…ï¼‹å¼î—‘â‚¬é¦‰åžŸé§æ”«ç‰æ›«ç‰æ¬éªç¨¹ç·¸çš™å§¸éŽå‡ï¹¨æ¶˜è›‹éœå¿•ç¡´çšŽîŸ¶çš“æ‚¹æ·‡å ¢å’–é™å¶‡å¯ªçšˆî±éšå“¥å°®é¦¥æµ‚é›ä½ºå´æ„«î Ðšæ©€ä¼‚é•å¼ãƒèŒ¬å½™é‘·èº²ç²–éªå±»ç²¦å¨Œãˆ æµ—éžæ¬‘æ‚¶éžç†´è™Žæ…Šèˆ¬æ·®æ…Šè™¹æ‘€æ…µåº›ç¶‹é£å‚œæš›é£èŒ¬æžæ†¬è‚©æ£ƒé¥æº¿ç¸ºé§å¶ƒç¹”é§æ·¬ç¹™é§å¼ãæ»…å”¸é¢ï½ˆî›¥æ¿‰â•€â‚¬æ¿ˆæ½ˆé‹©è§„æ½¯é‹ªå‘«æ£é¬æ¨¹ä»¾é‹ªîˆšç˜é¬å‰§ç…æ¾¹èŒ¬ç‰éåœ­ç‰…é‹«ã„§ç‰´çº­å›©î”–çº­ï¹æ†Ÿé¦¥æ•¸ç»€è™«çˆŸç»€è¹­å‰"],["9940","é‹­å¤Œî›¶ç»‚æ¬’å‡€ç»‹å—šç‚¯é‹®Ñ…çžé‹¯èŒ¬î€›é‘¹é€›å™­ç»”å¿•ç±é‹°å¿Žæµ®ç»›ãˆ¢î„¥ç»›è¤çš°ç»¨æ¶—å¢µé‹²è™¹è¢«ç»®æ»€å¦¼ç»®é•å§…ç»¯î…¡ç·­é‘â‚¬é¦‰ç¡°ç»¶å¿•çª‹ç»¶æ„®æ–¹ç¼‡î†¾æ•¬é˜ç†¶å¸¡é‘°çŠºâ‚¬ãƒ§îƒ”é‘°î†¿â‚¬è¾«ä»ˆæƒ´å±½ç¤éçŠºå¡é‘³â•€å½®é‘´å²€å°“é‘´åº¤å‰´é£çŠºå‰¶é‹¹ä½µîƒ”é‘µæ ¬åŽµé‘µï¿½"],["99a1","é‹¹æ’³ç‰¶é‘µè‰°å”²é‹¹ãƒ¨å•Œé‹¹î…¡å•£é©îˆå™¥é‘·ã‚ˆå¢§é‹»å¿šå§¦é‘¹æƒ°åª»é‘»æ¨¿å¬é‹»æ‹Œå´¡é—„â•‚î›¯é’€å‘¯å…Šé’ã‚†å„¯é’‚å œæ”§é’‚ææ‘—é’ƒæ­Œæ”¼é’„æ­Œæ™µé‹½æ˜æšžé’‘æ‹Œæ£¤é‹¾ç–¯æ«œé““æŽ•æ¯‘é“”îˆžæª¯é“»å¬©æ§…éŒæ¥„î©ç‘èƒ¯ã„ç‘—å›ªî›¶çšˆã‚§ç‘·â•„Çœç‘¾æ—‡î€“ç’žæˆ£ç¡µç’©èŒ¶ç¤ˆéŒ‡æ¨ºî”¤ç’ºå†§ç…­æµ î†¿è´Ÿé¡æ¨ºæ½éŸ«åžæ¤€éŸ¬é¢ç‰±æŒåº¤è™ŽæŒã‚ˆç”»æŒèŒ¶ç—‰æ©ä½½ç¹†æ©å²„â‚¬æŠ½î‰æ´§î…¢ã€€é–³æ’²î™ƒé–³ã„©å¢­é–´î‚¦å§³é–µî‡€å¨"],["9a40","é–¶ï½‰å«¬é–¶æŠ½å«¶é–¶ä»‹å´ˆé–¹å‹¯å¹æµˆå‘¬îš–æ¥¹å—æ‚§é–ä¾€æ‚µé–»î…¢æƒ¥æµˆîˆæ†¯é–¼å½’æ•ªé—î­Î—é—‚æ’®æ§¼æ´„ãƒ¦çŽæ´™ã‚‰æ½ƒæ´™ç”¸ç¢é—Šå‚šæª¾æµã‚†å„´æ£°é€›ç‘±æ¤‹åžî”‰æ¤åº¨î˜¾éæ’®î™æ¤çƒ½îš‡æ¥—æ¿‹ã‚¢æ´µä¼´îŠæ´šæ¿‹îŸ‡æ¥å¿•çŒæ¦„â•…ç•žæ¦€æ¿‹î‡¦æ¦€ç¿ æ¯æ¦˜çŠ®æ¾‚ç¨¹ç˜‹æ¦ˆå¤æ˜‚"],["9aa1","æ¦›æƒ§æªºæ§Žæ’»ç£æ¦‰â‚¬æ¦‰å¥¸æ‘±æˆå •å¤Ÿæ¥¹î„„ç½•æ¥¹ä»‹ç²é–¾æ»ˆè™Žæ¦›éæ¡“ç»”å ¥çµ¼é¦‰å€²é¦‰å§ºé¦‰å¸¬å¦žæ°¶æ©æ¿¡î„‹çˆ´æ¥€î”…é–¾ä½µç©é¦‰æ£”é¦‰æ§™é¦‰æ« ç¨¹æ¯¢é§æ¥ƒå§é¦‰çŽé¦‰çé¦‰î†–é›îç™„ç«ç‰¤å¬ªæŒ’é¦‰î‡°é¦‰ç›Žé¦‰ç‹é¦‰é¥±é¦‰å¥”éŽ¯ÑŽç‰ªå¶…æ«¤é¦‰é©³é¦‰ç¢€é¦‰æŠ„é¦‰å¼¹é¦‰æ«é¦‰ç©²å¦¤æ›¢éš˜é“»ãƒ°ç‰³å‹·ç‰³åº°ç‰·æ¥Œç‰¼æ„·ç‰¸î…©ç‰´å†²ç›ƒé¦‰ç‚¯ç”¯å¬¸î”†æ»’î”†å¿¦î”†èˆµæ¹ ç¨¹ä¼ç¨¹å€›ç¨¹å€´éŠ å›¸î”‡ç­î”ˆæ“†î”‰îˆ¥î”‰è¯²å´µé’‚î…©î”ï½î”’å¼î”‘æƒ°ç•žç¨¹æš¦ç¨¹æ§žç¨¹ç„¹ç¨¹ç„½æ¶”å“¥å¦ç¨¹ç‰ ç¨¹ã‚ª"],["9b40","ç¨¹Åç¨¹ï¹¨ç¨¹è”¼ç¨¹å‘ç¨¹é“‚ç¨¹ç²“éŽ·å‡ã€æ›«ã€–æ› å•’å¦—æ›«î•¦å‘®Ð—éŠ¢å ­î•®æ‹£î•´æ¥Œî•´å¼î–îâ…°åˆ«â…´å¿šå«¿ç¨·ã‚§ç¨·î›¸ç¨·çªç‘•ãƒ°î¦ã„¨ç·ºç¨·ç‘¤é—‰è‘›î§å—î”Œæ¥ é‡‘â’ˆï¿½"],["9b62","ç¨·çŸ†ç¨·åœé¦¥î‡ç¨·ç£®ç¨·ç£¼ç¨·æ–—ç¨·ç¨Œç¨·ç®“ç¨·é…±ç¨·ç¹‰ç©‘â‚¬ä»‡î—†ï¸·î—‘ç‡„î—”ç‚²é¢ˆé…å Ÿæ¯§çšˆâ”•ç©‘æš“ç©‘æ£¾é–ä¾Œã†è™¹ç…‘ç©‘æ§¡ç©‘æ¹’ç»¾å›¸çˆ«å——â’Œéˆï¿½"],["9ba1","å¦žæ©‰ï¼ŠÑŽîžæ¥Œã‚¿î¯ï¼˜æˆ°ï¼šæ¡‚îœæ”«î•§æ°«î—•æ´«è‘›î˜©æ¬šÃ­æ°¿î˜°î‡‡î˜±å¶î˜¥ç«î˜±ç­”î˜³æ ¶ã‰å’…ç‰€å©‚å™¿é¦‰æ§•æ¿¡ç‡„ã€Žã„£î†•ç©‘æ™¨é»æ‚‡é»æ‘‰é¨å ­î˜¾æ·¬îœ€é»æ¹³çšŽæ£¬çš“îŽéŠ¤î¯î•¬å†­ç“°çšŽç“—æ¤æ ¶î™…æŽŸãƒç«ãˆæ› åž‘é»ç‹é¦‰å¤‡æ¿‚ãƒ°ãšãƒ°ãžå—®ç‰†ç¡…ç²´é¦¥â‚¬î„€å§€é¦è·¨å¡é¦¥å§é¦¥æ‚ªç©‘ç¶‚é»î€†é æ‹£îš–å—®îš–î‡‡ÎæŽ—åšéŠ˜ä»‡îš™ç­îæ‹†îššç‚°æ¹—é¦¥æšé¦¥æš’é¦¥ç„½é»ãŸé¦¥î”¢é‹ï¸ºæ‘¶ç©‘å¼»éŽ¯çƒ‰ã‚¤å†§æ¾•çšŽîšé¦¥î€é¦¥ç•¨é¦¥çš¢ç¨¹ç¨…é¨ï¼„åŽ¬å©¢å¨¥î›©å‚ªÐžæŽ—ä»ç©°å•¿é»ç·´ç’€î¯î›µå‚ªî›¶ï¿½"],["9c40","å®“æ¶´ÎŸç–¯çº§ç©°æ‹•ç¨¹î™ç’œîã‡å¨¥î›·å ­ï¼Ÿîˆ¥î›¹æŽç˜ˆç©°æŸ¨ç©°æ¯œç¨·æ¹œé–¼ãƒ°îš¤â„ƒå•Žæ¿žÑŽî‡˜å¶„å‡€é¤æ¡‚î˜¹â—‹îœ€é—´èº¬é»ã”é—„æ ¨ç¨„ç©°æ­¥éŠŸæ¨¿ã‚·ç©°ç†ç©°â€˜ç©°æ‚œç©°î”£é•ç‡„Î“å›©ç“Šçš“å„‰é¦‰â˜‰ç©°ã†é–¯å‹·Î”åœ­ï¹¨æ¦‰æ¢†Î—æ´ªÃ©ç©°ÅéŠ ç‡„î›¶î çˆ›ï¼„î›¨ç©°Ã¹ç©°ç“«å®•î„‹î—™æ¬’å¼¿ç©°ç–‚éŒ„æ„·Î£ã‚‡æ•¾ç›ãƒ°Î§î†¼â’"],["9ca1","éŠ£æ»’î•»å¶î†å¬¸îŒå¶ƒçŒçšˆå¦§çšˆå¦³é–µä¾Œî•ªå¼îå¬®å° çšˆå«¤é»î•å§˜å½’æŒ“çšˆæ†ªé¦‰æ¡“é” Ñ†ï¼•ç¨·ã†çšŽæ‡—ç¨¹ç¡å©§è‘›ãˆîî”¥çŠ®Î”éŠ¡ç‘°çš­ç»‰ï½„æ–‚é†å¨¥â”Žî…©îŸ¿ã‚ˆîšˆçšˆç…‚çšˆî”é¥æ ¦å„«ç¨¹æ§‰æ‚â—‹î—¡îˆ¥â–‹îŸ“î””å‘¯å•³é‘½ï¸·Ðæ¿”ï¹©ã„¥â”ƒæ´³ä½›î‡îˆ¥Ã©î‚­Ðé‡‘Ð–å©Ðšå¬¸Ð£ï¸·î˜ªè™¹ç“‹ç»æ”«â–ˆå¤‹é•œçš™å«™å¦¯å‡â–½æ¨ºå¸°ç©°ç«¾é–¹æŒŽç‰°é—ˆæ¿”â–îˆ¥â–ˆï½Î–å¼î””î…©î—îˆ¥â–‰å ç§´çšŽéžçšŽå€‘é¦æ›¢ç‰çšŽîšŽå®¥î‚­ã†å ŸæŸ§å¦²æ›žå½ƒé»î€„ç©‘ç·›æƒ†æˆžæ¹ºçšŽå€«çšŽå…‡çšŽåŠ—ç¨¹å°½çšŽåŽª"],["9d40","çšŽå”¹çšŽå•¹çšŽåž°çšŽå¯™çšŽå°ŸçšŽå¸„éŠžå©â˜‰îŸ“îŸ€îƒï¼šéŽ»ï¸·Ä“æ «çˆ¤é–´æ›«Ã©é•å½¶çšŽÐé‹¸ç‡„Ä›îŸ“Åå—®Ç’æ–¿Ð¦çšŽçš¦æ“å¬¸Ç¹å’…ï¹¥î„‚ç“šçš“å‰±çš“åŠ¶æƒ´ä½›ï¹¨çƒ‰ã‹å©…ç¹é˜å¿“æ®çš“æ‘Ÿçš“æ£­çš“æŸŠçš“æŸ›çš“æ¹¶çš“î—–çš“îšŽçš“ã‚ªçš“îˆçš“Ã¨çš“ç‘¤çš“ç¦‹çš“ç¨•ç»¾ç‡„â”—è‘›â”˜ï½„è é—€å›¸ç–æ’¶å•Ÿçš™å¬æ¶ æˆ¦â‚¬æŽŸç¥å¬©ç¨–é¦‰çŸžæˆæƒ§æ¢º"],["9da1","æˆå¼î•·æ‹Œç«Ÿé»ç¡é‹½å¤Œç®å¨¼æ ¨î€æµ î‚æ‘›çšŽîƒ‡çšˆî–‚éŠ£é¸¿ç°šç¨¹ç…¹çšŽâ‚¬ã‚Åî„‹Ã³æ¬šÐ–æ”«î›¿îˆ˜å¸†çšˆæª¿ç©‘åœé¦¥æ¨€é¦¥îš›æµœæ°¿ã‚ºä¾Œî›®æ¨ºæ¯§é¦‰å¼“éŸªåº¡î„¦ç©‘ç°£é»çŸ éŽ»ç‚´å«„ç¨¹ç…»ç¨¹ã€é€æ¿æ§¶é¦¥çœ¾éšæ°¿îš‘æˆ™ç©¯çš“ç¨‘æµ”è—‰æ§©é¢ç‚µç¶é¦¥ç²¯æ¿‚å¼ï¼•â‚¬é“¦é¢ç¬¢é¦‰å¼€é¦‰ç¥²ç©‘æ¯¢é‘´æ¥…ç¦ç’æ¨¼æ¨†æ¥¸å‘¯æª¸é¬å½’å´ŠéšèŒ¶åŽ›é‘»å³°æ§¬é‘´èŒ¶æ‚©é‘²è—‰æ£¯ç»ãˆ æª­éšæ ¶ç‰¶æ¿„æ£Šé¢å‘­æ£»é‡åˆ«â–¼î¬æ§¶é¢æ‘æ£¸é å“„æŒ†éŸæ‹†ç‰¨ä¾Œç‰ªæ §ç²£é¦¥åŽ›é¦‰è‹Ÿç¨·é›¹"],["9e40","é¦‰å­©æ¥¹î‚¤ç¦‹é¡çƒ‰î”†åž«å§–é—ˆî…žæŒƒç’©å¶‡åš©é–°èˆµå¾éŽºè§„å¾“éŸî î¨å†®è¾ˆç¨·æ’¼éæ°¥æ‘•é¦‰é”­éÑƒæ†¤éžç‚²æ•é§ï¹è…‘ç©°î•¯é¤è¾«å é” å‹®ç€±ç‘å›ªå–é’€æ»’î”ˆä½·æ‘¤éšå‹·î™å——ç•°é‘¼å¬¸Î’æ’³æ«¥ç¨·æ´¿çšˆç–®é»å• çšˆå…šç©°ç²£çšˆå§¸é–°æ¢†î”Œæ¬“åžç©‘è‡£çš™æ¯„é¦‰å«é¦‰è¿˜é—ï¸·ã€”î­æ½•é»ç¸½çšˆæŠ—é¦‰æ©é‹¬ï¿½"],["9ea1","æ¥¸æ¿‡æ•“ç¨·ç¨œæ´Œä»‡î™„ç‹†â”‘æ‹£ç‰½î„‹ç‰³å©ƒä»®çšˆæžºé¦‰å‡¯"],["9ead","ç©°äºªç¨¹å”¶é”ï½‡ç°¬æ¦ˆæ„ªç¬Ÿæ¶“å‹©æš¦ç€£å¶†è†Šé—Ñæ¯ˆæ‚ƒæ»ƒåµ”éŠ¡ãƒ°î˜½æ¨ºî•¿é»î„§é‘¸î…žæ†¢é¨îã‚ªæ›«ç‰“ï¿½"],["9ec5","æ‚ŒæŽŸî•¶ãƒ§åµˆçš“å«æµ¯å¤î‡¢ç©‘å°˜çš“åŠæµ”æ¶´ãžî ã€‡çƒ‰â”›ç‚¶æ†¸ç©‘æŠ–çšˆå§´ç©°ç£ç©‘æ¹¢éŽ¸î†¾è§¦ç©‘çŽ¯ç©‘è„¯æ‚’îˆâ‚¬å åª½æ„Žæ·¬æ«¤éŒ€î çˆ³åº£æª§ç€šæ¢†ç‰¶å‰ã€Žçšˆç±æ¾§Ñ‚åªé£å¥¸ç•«å®“å¯¸æª¾çš™æƒ”æ¥¹å‘¬åœºé¥å¹¿ç†éŽ°æ¬šî—ˆæ°¿î˜´ï¿½"],["9ef5","é£æ¿”î”â•ç–é»ã‚£çš“ç«¼é’ç­”î‡î†ºæŸ‡å§¹å©‡å¯¼"],["9f40","ç»«æ ­îƒ”é©çƒ‰î”¢î„€ç‹éŽ¿æ“†îŸ±æ„·î›±å¼îŠã‚ˆæ¯‰é¦‰å·ç©°å‚¨é»îŸé¦‰å½“"],["9f4f","é‘æ”«ã€–å¿“ç¨é—‡å‡ã€‹æˆ¦ç°›é–¬å²€ç‘¹æ¥å‚šç¡²ç» ï½†å¢¾éŽ¸ç”¸î¼ç»¡å¿›îƒ…ç»«é¹ƒîƒ‰ç»«å‚œçŸ„æ¦˜æ› î‡±æ¥å¤ç´¬æ¦˜æ¶´ã„é¹ƒç¶’éŸå†²ç˜æ·‡ä»‹ç°¶æ·‡æ’å¢µæ„€å——å«…é§Ñƒä»æ¿¡å³°ç¬’é—Šå ¥ä¸œæžæ»ƒæ‡‡é—‰æ’®îš…é—‰å“„å°™éŽ°ï¿½"],["9fa1","å¦žî„€å½‹æ¦˜å©‡ç£¦æµ’å©šæª¨å§’â‚¬éŒï¸¾æ™¢ç¨¹æ¾€æ¤æ°¬å£‹"],["9fae","é–°æ¬“æ®Žé–°ï¿½"],["9fb2","é–°æˆ°Ãªæ¥åµ–ç©°çŸ—å¨…å©‚æ§•é–±åº£æš«éŽ¶å’…çˆ®è‚©å´—ç»«æ¢†ã‚°â—‹ï¼“ï¿½"],["9fc1","é»î˜¾é©æ ­ç–‚æ¶“îç‰«æ—‡å¹˜ç›ï¿½"],["9fc9","çžå©ƒî…éî…žæ¾“é’ç†·è¿”æµ åº¢æ°¨é¦‰åš¥æµ¼ç‘°æŒéæ°¬å§Žç“’å‚˜æ¤Œå¯®å±»æ£¾"],["9fdb","å§æŽ—å‹æ¦«ãƒ©ç•»é—‹î‡€â’‹æ¥ æ´ªé…£æ¥¹å‹­å…ç»—ï¿½"],["9fe7","å§£é¸¿ç‰ç¼ƒï¿½"],["9feb","é¢ç‹†ç§å©…ç‹—æ¦»ï¿½"],["9ff0","ç’ºæ—‡ç®¯æ¥¦æ»†ç«µéŽ¶å‚ªâ—¢å€Ÿè¾…éŸ«ç”µç¦é»â”“ç»‹å‰§î—å¨‰î‡â”ƒé¦ï¿½"],["a040","çšŽîŸ·æ¦§ï¸½ç¡¯é”œæ «æ¢¼çš™å§´çº­æ“†î‡–â‚¬ç’å²€å«é›è¾«îƒˆéšå‚œæ‘«ç’©î‚­ãŠæ˜æ§¸å¯°é¸¿î–…é‹»ï¿½"],["a055","ç¨¹ç‰·ç©°ç«»"],["a058","ç‘­æ”«î•¹ï¿½"],["a05b","éŽ¯ç•Œæ«‘æ¥‚æ¥…ç¥«é–¸î‡€ç•¯é”œï¿½"],["a063","é” å¿šæ’¤éšî„„æ¹£æ¥«èˆ¬æ£–é˜è¹­çš£ç»«æˆ¦îšç©°åŽµéŽ±æ¬Žçš æ¥¹æ ¨å”"],["a073","é§ç†¸åéŽ¶ï¸½åŸžéŽ·åº›îŸ¹éŽ³ãˆ å¸¾ç©‘å½½éŽ¹ã‚†çˆžéŠžï¿½"],["a0a1","å®“æ¥ŒÇ’å‚ç¹—çšŽè…¹"],["a0a6","éæ¬šã€‰å—™î˜«é–æŸ¥æ¨ƒé¦‰è“Ÿé‹ªï¿½"],["a0ae","é­ï¿½"],["a0b0","ç»¯å‚ªã‚¼æ°±ç¡½ç»‹î…¡ä»¸é‘±ï½‡ç¥¶é¢å‘¯æ‘¬ç‘•æ—‡åž°éˆå²ƒä»®çšˆæ‹žé‘±æ¶šæ‘ªé‘´å†ªæ¹¦ç‘•å¤îœ„å²€æ™¸ç©°ç²¦é“»â•„ç…„é‘·å £ç€¸ç‘­å¤Žç®”ç’€å†ªæ¹¯é¡æ­Œæ‘ŽéŠŸåž«Î£ç“’ï¿½"],["a0d4","ç‘•â•ƒæ‡†å¨‘ç¡…ç„·é»â‚¬æˆ æ‘Ÿæƒ´æ¶šå¾éŽ®ã‚†å•˜æ„ æˆ åƒéŽ­ï¿½"],["a0e2","ç¼ƒåˆ«Ã¬î… å¢£éŽ¯â•€î„·é’çŠ®çš¹ç©‘ç¡£é¦¥ç²­çšˆæ«€é¦¥æ•±ç¨¹îš‰ç¨¹å¬€çš“î˜¨ç©°çªšçšˆå”å®„ä¾Œî›«î…©Ã¨å¿¦î—žä½›çˆŸî‡‡Î‘å—®ãœåºæšç€£ç‡„î›²å²„ç¶ˆæ¥¹ï¸·î›®ï¿½"],["a3c0","éˆµâ‚¬",31,"éˆµï¿½"],["c6a1","éˆ¶ï¿½",9,"éˆ¶ï¿½",9,"éˆªï¿½",9,"æ¶“æœµç¼šæµœå‘¬ç±‚éå‚šå•éî‚¢å«»é–ç¨¿å´ºé˜è·ºî˜¯ç€¹â‚¬å®¸æ¶’æ±²éªžåž®æ·®è¤°æ„¬å¥é€å­˜æ£¤é¤æŽ”æ« æˆç”¸æ¯ç¯“è—›éŠ‰å§å…™éŠˆæ¿„å€¿éŠ†å†§ç²·éŠ†å‘«â‚¬å—â‚¬å›¥å…—é”›ä¼™å†€é‰å§äº–",23],["c740","éŠ‡ï¿½",58,"éŠˆÂ°å„éŠˆï½ƒå†"],["c7a1","éŠˆï¿½",81,"è¢—",5,"è¡¼è¢ž",4],["c840","è¢¥",26,"è¤¢å¸",25,"éˆ¬Ñ€å–éˆ«å¹¿å™ºé¦‰å„—æ¶”æ°¿çˆžå©‚åžˆé‹»ï¿½"],["c8a1","æ¦«æ¿å”¸æ¦«åˆ«îï¿½"],["c8cd","é”Ÿî®éƒ¡é”›å›·ç´“éŠæ‰å‰¸éˆ©Â°å€¹éŠˆæº¾ç°šå¤‚å‹¨ç°¡å¤‚å›£ç°£å¤‚å¨¾ç°©å¤‚å¶ç°³å¤‚æº¾ç°¼å¤‚ãƒ¢éª‡å¤‚îå«å¤‚î†¹æ†¾å¤‚å°–å£•é¥£å—ç²–é¥£å±¸ç²›é¥£å¿Šç²¬é¥£æ¤»ç²¸é¥£ï¿½"],["c8f5","è•›è“¯è“»è“´å‚»è‰™é…¶è‰è•£ç‘Ÿ"],["f9fe","é”Ÿï¿½"],["fa40","é¦‰æ™£é–¶æ¶´ç‰€ç‡„ï¼Ÿå‘°æ™«é‹³ç”µå½²éç‚¹æª³é»îš‡çšŽÐ“é–¸å‹·Â¨æ¶œå«¯ç©‘ç¡¤é®å…¼æ½‰éŽ·ç‡„ã„ä»‡Ã©îçˆ¦ç‹†Îžä»‡î”‘å‘¬ç²¾ç¨·æ‘¥éŠå ­Î¥î Ð˜å‹·î—â‚¬é»î€ç¨·æ•éŠî çˆ«æƒ§å…¢é¦‰å·°é¦‰å´Œå©Šæ¶´çˆ¯ç†·ä¼£éŽä½µæ‡žéŽåº¨â€–éŠ¤å†­æ‚¥é»Î”é¦‰æ‹ éç‹†î—“æ‘å’é¦‰î‡´ç¨·å…—é¦‰å«¢ç¨·æ•¯é¦‰æžŽç©‘åŸ‘ç¨¹î›¨ç€¹å‚æ¾–é¦‰æŸç©‘çŸ™éæ’å–"],["faa1","æ¦‡æ‘å™³é‘å¿“å™¾æ„ æ»ƒåš€é»î€…éå†²åš”é—å‚šåšŸé‘¿å¶†ãžç©‘æ¹±è¤°è¯²åž•é’ï¹€åŸ£é”é›å¢¬é”æ–¿å§½é•å‘¯çš¶é’‘å‚šå«šé“‡å¶Îœæ’³å¯˜çšŽçµéŸå¤‹ç²°ç©‘ç·šé¦‰îš™ç©‘æ¥·é–å†²å´‰é¦‰î‡—å¨‰å¬¸î”¡ï¸½ç‰„éæ›Ÿäº°æ„«î‚î—‘ç¨¹æ´¦é•æ¿…æŒ—é—î…žåµˆçšŽæ¯‡é—æƒ§åµ–ç¨¹æž›ç¨¹æ§—é­ï¹€å¸—çšŽç©é˜çŠ²å¸¿é˜î†¾å¸¶é¦¥æ¾†æ†¬æ¬‘å¸¨é™ä½¸å¼²å§¹å¤‰ç®Ÿé©æƒ§å½Šæ‚›î‚­ç‰£å¿“å½”ç©‘æ©ç¨·å®é™å¨¥ç‰¨å³°æ‚¡éç‘°æ•¨é…æ¥ç¦Œé›î…©Îæ“†ç‰­æ‘æš†éœå¿“æŒ™éŒ‡ï¸·î”¡å¶ç‰·æ¿„æ´žé¦‰ç¥¶"],["fb40","çšŽîžˆç¨·æ®¬éŸå›¦æŠ„éšîˆœæ‚§é å——æŸ€é¢å’…ã€‚æ¥Œî˜¥è½°æ™µé»æƒ–é†ä»‡î”‡æ‘æ¨‚é‡å¶î—å©ƒæ®¼é†î…žæª·é£å¿•ï¼‘é¥éç€²é™æƒ§æ¸¶é¥îˆšæ´¯çšŽî„ŸéŠŸï½î”Žå¿“æ½Œé»å•£å§¹î†¾å€ é§å‚˜æ¯ç©°æœ¬é©ï¸·î”•æ §çˆŸç¨¹æ†¯é»å´³é«ï¸·ãé›î”¡æ¾§î‚æš‹æ¾¹çŠ²î—¡ç¨¹åŸ£æ¾¹è¯²î‡´é§å‡çæ„·î˜®æå½„éŠâ€³î™„å§Šï¸ºæ³å©€ï¿½"],["fba1","ç¨¹æ¨‰æ¿žã‚…æ™¸ç¨¹æ®¥é’„å‘­îŽé¦‰ç¥¹ç©°çž¾ç©°æ¤½ç¨¹ç…–æ¿®æ¬šî”¤ç«î”£æ‹†Î§ï¸½å½“ç¨¹ç‰—ç¨¹æ´‰æ¿®æ¡‚îž…å‘­î€Šæ¿ ï½ƒæ´£é»Î™æ¿ æž«æ¹€æ¿¯æ «æ‡ƒç€šæ“†îžŠâ—‹î•ºæ–»ç§´ç¨¹î˜¶éŠ£æ‹†î”Ÿç¨¿ç°é•æ„¬î„¯é‚å î„µçšˆâ—£é‹©å‹ªî”¢é¦‰åžŠç€µæ›ŸåŽ¾ç¨¹Ã¹é¦¥î‘é¦‰æž¼ç€µå†²ç–‚æµ¯æ„¬çš¡ç¨¹ç“Œçæ’¶å¼¾çæ—”ã€”ãƒ°Îœã„¥çœ½æ´Œæ¿†çŸƒå®„â•æœå®¥å¬¸ã€‹æ¡‚ã€Œå³°ç£¹å®•æ¨ºç¥®ç¨¹æ°¦å®€å“„çªé‘»ç¬ºç‰ é»î˜¦ç¨·äº¯ç¨·å§é‘ºå›¥ç‰°æƒ˜å‚šåºœå¦¾å©‚æ²Ÿéªžå¼î˜·æ‹£ç‰«æ’³å¸µæµœå³°ç²£é˜îŸ“î”¢åžç¬å¯¤ç­”âŠ•ï¿½"],["fc40","å¯¤ç‘°æ¢æ½çŠ²æ‚£éé¹ƒæ‚°å¯®å¶çˆ£ä¾Œî‡—æ–»çµæ´§î‡‡î”‘å“„å·±ç©°î•­ç¨·å½è¤°æ©‰î•¶åžå‰‘é—‰é‡‘îž…î†¼è®²é–¸â‚¬çšŽÇ˜å¯°ÑƒæŠ–æ„•ç‡„îšŽæ„·ã€—îîˆè‘›î•¾ã„©åšƒé¦‰å§™çšŽÄ«éŽ¬è¾¨æ®”ç¨¹ã€‹æ‚­ï½ƒç©±éŠŸç‘°ç€½ç¨·ç¤ç»ä¾¿ç®‘éŽ®ç‚´å†éŽ®ä»‡ã†å‚ªã†å¿¦Ð—æ’¶æŒ™éâ€³ç±éŽ±ã‚ˆæ‚¿éŽ±å‚ªî‡—ï¸·îž‡æŽ“å”©é‘ç­”ç‰‚æ ¨å”¶ç€¹îï¼žï¿½"],["fca1","ç¨·î”¤éŽ³æ“†Ã³æ¿”â”æ¿‡å™½æ‚šæ‹†â…µâ‚¬ç¨·î—†éŽ¬ï½†åŽ¹é€ç‚´å¸‡é¦‰å‰ºéŽ·å’…î”¢ç‰ˆå«Šç¨·ç¬‰éŽ¹î„‹ã‡ç†´îž½éŽ¼å‘Šå¾ƒç¨¹å¸‹ç¨¹ç†‚éŽ¾æ„­ç·¤ç¨·ä»˜é—‹æ—”î˜§å²Žîš¡æ¿‡æ‘—éŽ¿ãƒ©æ‡Ÿæ‚Œï¸½æƒ¡æ‚Œæ¥æ™¬å©•æ ¶ãˆîŸ“ãˆï½†æž€éî…Ÿæš‰ç©‘ä¼¨é‚å¼ã…â‚¬æ´®é”‹æ£é‹¬æ©‰î”¥â•‚æ£¤éƒï½…ç¹œç©‘æ‚é„æ©‰î—Œä½›î—Œå‘Šæª®ç©‘å•¢ç©‘å•£é…å¬¸ç‰´åž«æ«‘é¦¥åš˜é…è™«æ«žç¨¹é™„ç©‘åŸçšŽæ£¿ç©‘å™²é¦¥å¯­é­å’…â…²çƒ½Î”éˆå‚ªî˜³æ»’ãˆÂ°îƒ†å¦²å¼î—¤å‚›æ½ªé‰Ñ„æ½°é»å™¸çš“å„¹éŒæ¤¾æ‘¡éãˆ¡ç®°é–³å…¼çˆœç©‘å½Ÿç©°ç¨œå¦—ï¿½"],["fd40","ç©‘æ‡å¦²â„ƒâ–¼çšŽç¶å¦¤è™«î—ˆç©‘æ£ˆå¦žä½¹î˜¥æ„¦å±‚â–‰ç©‘æ¨‡æƒâ‚¬é‹î„ã‚¡çšŽîŸ¨é‹´å…¼ã–å§’æ¨¸î…¸é¦‰å¼¶é‘½ï½…å€«å¦²æ¡‚î—žæ¬šî•©î…ï¹¨ç©‘æ¸»å¦¾æ¿„î‡¨é‹è¾¨ç—çš“å•˜æƒ†å¶†ç‘µé¦‰ãƒéŽ¯ç‚´îƒå§ç­”î–„å¶†æ—±ç©‘ç±é¦‰å¹ç¨¹îšéŠ¤â‚¬éšâ—‹ï¼æ°­î‡–ç©‘æ‚£å§£æ»„èƒºç¨·æ‹«é»ï¼‘ç©°ç“šå§¹æ°³åž¿å§¹æ¡‚ï¼–é—´æ®ç©‘ç£é»å•¢é»î˜±é»î˜¥"],["fda1","ç©‘ç¡¥éŠ¢ãƒ£å€¡é¦‰åºŠæ¥«å‡î—Œæ¡‚î•·æˆ ç·©éä½›Î¥ãƒ°Î§â—‹Î¨î‚£ç¨å¨´æ»„è¾œå©•å‹·ã…ç­î˜§å’…îž…èŒ¶æ•µç©°é…±é‘å›¨çŸžå¨“æ¿ŠæƒçšŽî‚¼å¨“îˆ¥ï¼˜îˆœæ†®ç©‘ç·œç»‰å±¾ç®¯æ¿¯æˆ°î—†å¬«æ‰›éŠ£å¶†ç··ç©‘èµ´å©Šå¼î”—æ¥Œî˜¥æˆ’æ™»é–ºç‰ˆçµ¼å¨¼æº¿ç¥¹å¨¼ç­”ï¹¨èˆ¬æ¤¿å©¢ç‡„î˜ªå‹¬ç¹é»å€¯é»åŽ±é»â‚¬æ¡‚ï¼Ÿæ¢†ï¼žç­”î˜©åž®åšé»åŽ²é»åŽ³é»åŽç©°åšŒéå¬¬ä¼¨éÑ…å€Žé‘å²€å„ é‘æ «å„«é‹­å‹©æ³•é”å¯¸å•é»å£é’î‚¤åŽ–æ¿¯å ¢åŽžé“î†¼çŸžé»å´¶é“å¿›å´²é»åª®é’î„‹î˜¶æ°¿ãˆÑŽãˆãˆ¢å–“çšŽî‡éç•Œåž˜"],["fe40","é–¼å‚œåž¥æ¾¶æˆ¦æ†™é–ã‚‰å´„é¦¥æ§„é–î†¾å¢é»ã‚´å§Šç•Œå¢ªé—æ¤¼ç®·ç©‘äºœéå¶†å†€é˜å‚œå°“éšî‚­î™…ï½îŸ†î‚¡ï¼çšŽçˆ éšã„§å°žéå¿•å¸¾é¦‰æ˜‚ç©°Ã³éå¤Œæ† é»åš”ç¨¹æ´¤é»Ã é„ï½ƒæ³¤é»Î¨é»î›²é»Ð©éé£Žæ‚¤å¦žå‡ãˆï¸¾æƒžé¦‰æ¢¼æ…Šæ¥ƒæ†¸ç¨·î¨éŸç‹†ÃªèŒ¬æ†žéã‚‡æ‡šé‘¾åœ­æ‡éŠ£æ‰®æ‡˜é–ºè¾¨Ã¬é å‚™îš˜é»ç™"],["fea1","é»åŽ½é»â”•çšŽç•¯ç€›å—®Ã²å‡ã€ç‚µæ±ç¨¹î›­é¢åº£æ‘¡é¢çƒ‰É‘æ¬šã€…å¬ªç˜²çšŽå«é–¹å‘¯æ™¬é£å©„æš“é£î‡‡ãžå‚˜ç´•é»ç£½é¤åº£æ†¹é¤ç‚µæŸŽé¦å‚œæ§µé§æˆ æª¹é§îˆœæ« ç©°å½½é¨æ„¯åš¡éŠ¦è‘›Î”æˆ°Î”åº£æ®¹é¨ãƒ§æ¯žé©å²ŽîžŠç†»æ†¿é¦¥å€½é¦¥å”ç¨¹ç¬¢éªç‚µæ¹¨é«â‚¬éŽ¾îˆ¥îšçŠµæ½£ç©‘å§®é¬îˆ¥Ä“ã‚Ä“îŸ“î” ä½ºç…·é®å¤î”’å¨¥ãˆæŽ“î—çº°îˆœî—Œçº¾æ’»æ®½ç»€î‡‡îšœçŠµî—œç»€å¯¸â’ˆçšˆæ§æˆæ­Œî•©çšŽîƒ†ç©°å€‘ç¨·æ§£ç»‚å—šî˜¥å¦žå‚œî›¥é¦¥î”œç»‚æ¿”Ðšåœ­ãœç»‚â•‚é‡œçšˆåŠæ„«ã„§î‹çš“å‰­ç»‰ï¿½"]]

            /***/ }),
        /* 106 */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            var Buffer = __webpack_require__(2).Buffer,
                Transform = __webpack_require__(31).Transform;


            // == Exports ==================================================================
            module.exports = function(iconv) {

                // Additional Public API.
                iconv.encodeStream = function encodeStream(encoding, options) {
                    return new IconvLiteEncoderStream(iconv.getEncoder(encoding, options), options);
                }

                iconv.decodeStream = function decodeStream(encoding, options) {
                    return new IconvLiteDecoderStream(iconv.getDecoder(encoding, options), options);
                }

                iconv.supportsStreams = true;


                // Not published yet.
                iconv.IconvLiteEncoderStream = IconvLiteEncoderStream;
                iconv.IconvLiteDecoderStream = IconvLiteDecoderStream;
                iconv._collect = IconvLiteDecoderStream.prototype.collect;
            };


            // == Encoder stream =======================================================
            function IconvLiteEncoderStream(conv, options) {
                this.conv = conv;
                options = options || {};
                options.decodeStrings = false; // We accept only strings, so we don't need to decode them.
                Transform.call(this, options);
            }

            IconvLiteEncoderStream.prototype = Object.create(Transform.prototype, {
                constructor: { value: IconvLiteEncoderStream }
            });

            IconvLiteEncoderStream.prototype._transform = function(chunk, encoding, done) {
                if (typeof chunk != 'string')
                    return done(new Error("Iconv encoding stream needs strings as its input."));
                try {
                    var res = this.conv.write(chunk);
                    if (res && res.length) this.push(res);
                    done();
                }
                catch (e) {
                    done(e);
                }
            }

            IconvLiteEncoderStream.prototype._flush = function(done) {
                try {
                    var res = this.conv.end();
                    if (res && res.length) this.push(res);
                    done();
                }
                catch (e) {
                    done(e);
                }
            }

            IconvLiteEncoderStream.prototype.collect = function(cb) {
                var chunks = [];
                this.on('error', cb);
                this.on('data', function(chunk) { chunks.push(chunk); });
                this.on('end', function() {
                    cb(null, Buffer.concat(chunks));
                });
                return this;
            }


            // == Decoder stream =======================================================
            function IconvLiteDecoderStream(conv, options) {
                this.conv = conv;
                options = options || {};
                options.encoding = this.encoding = 'utf8'; // We output strings.
                Transform.call(this, options);
            }

            IconvLiteDecoderStream.prototype = Object.create(Transform.prototype, {
                constructor: { value: IconvLiteDecoderStream }
            });

            IconvLiteDecoderStream.prototype._transform = function(chunk, encoding, done) {
                if (!Buffer.isBuffer(chunk))
                    return done(new Error("Iconv decoding stream needs buffers as its input."));
                try {
                    var res = this.conv.write(chunk);
                    if (res && res.length) this.push(res, this.encoding);
                    done();
                }
                catch (e) {
                    done(e);
                }
            }

            IconvLiteDecoderStream.prototype._flush = function(done) {
                try {
                    var res = this.conv.end();
                    if (res && res.length) this.push(res, this.encoding);
                    done();
                }
                catch (e) {
                    done(e);
                }
            }

            IconvLiteDecoderStream.prototype.collect = function(cb) {
                var res = '';
                this.on('error', cb);
                this.on('data', function(chunk) { res += chunk; });
                this.on('end', function() {
                    cb(null, res);
                });
                return this;
            }



            /***/ }),
        /* 107 */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";
            var Buffer = __webpack_require__(2).Buffer;

            // == Extend Node primitives to use iconv-lite =================================

            module.exports = function (iconv) {
                var original = undefined; // Place to keep original methods.

                // Node authors rewrote Buffer internals to make it compatible with
                // Uint8Array and we cannot patch key functions since then.
                iconv.supportsNodeEncodingsExtension = !(new Buffer(0) instanceof Uint8Array);

                iconv.extendNodeEncodings = function extendNodeEncodings() {
                    if (original) return;
                    original = {};

                    if (!iconv.supportsNodeEncodingsExtension) {
                        console.error("ACTION NEEDED: require('iconv-lite').extendNodeEncodings() is not supported in your version of Node");
                        console.error("See more info at https://github.com/ashtuchkin/iconv-lite/wiki/Node-v4-compatibility");
                        return;
                    }

                    var nodeNativeEncodings = {
                        'hex': true, 'utf8': true, 'utf-8': true, 'ascii': true, 'binary': true,
                        'base64': true, 'ucs2': true, 'ucs-2': true, 'utf16le': true, 'utf-16le': true,
                    };

                    Buffer.isNativeEncoding = function(enc) {
                        return enc && nodeNativeEncodings[enc.toLowerCase()];
                    }

                    // -- SlowBuffer -----------------------------------------------------------
                    var SlowBuffer = __webpack_require__(2).SlowBuffer;

                    original.SlowBufferToString = SlowBuffer.prototype.toString;
                    SlowBuffer.prototype.toString = function(encoding, start, end) {
                        encoding = String(encoding || 'utf8').toLowerCase();

                        // Use native conversion when possible
                        if (Buffer.isNativeEncoding(encoding))
                            return original.SlowBufferToString.call(this, encoding, start, end);

                        // Otherwise, use our decoding method.
                        if (typeof start == 'undefined') start = 0;
                        if (typeof end == 'undefined') end = this.length;
                        return iconv.decode(this.slice(start, end), encoding);
                    }

                    original.SlowBufferWrite = SlowBuffer.prototype.write;
                    SlowBuffer.prototype.write = function(string, offset, length, encoding) {
                        // Support both (string, offset, length, encoding)
                        // and the legacy (string, encoding, offset, length)
                        if (isFinite(offset)) {
                            if (!isFinite(length)) {
                                encoding = length;
                                length = undefined;
                            }
                        } else {  // legacy
                            var swap = encoding;
                            encoding = offset;
                            offset = length;
                            length = swap;
                        }

                        offset = +offset || 0;
                        var remaining = this.length - offset;
                        if (!length) {
                            length = remaining;
                        } else {
                            length = +length;
                            if (length > remaining) {
                                length = remaining;
                            }
                        }
                        encoding = String(encoding || 'utf8').toLowerCase();

                        // Use native conversion when possible
                        if (Buffer.isNativeEncoding(encoding))
                            return original.SlowBufferWrite.call(this, string, offset, length, encoding);

                        if (string.length > 0 && (length < 0 || offset < 0))
                            throw new RangeError('attempt to write beyond buffer bounds');

                        // Otherwise, use our encoding method.
                        var buf = iconv.encode(string, encoding);
                        if (buf.length < length) length = buf.length;
                        buf.copy(this, offset, 0, length);
                        return length;
                    }

                    // -- Buffer ---------------------------------------------------------------

                    original.BufferIsEncoding = Buffer.isEncoding;
                    Buffer.isEncoding = function(encoding) {
                        return Buffer.isNativeEncoding(encoding) || iconv.encodingExists(encoding);
                    }

                    original.BufferByteLength = Buffer.byteLength;
                    Buffer.byteLength = SlowBuffer.byteLength = function(str, encoding) {
                        encoding = String(encoding || 'utf8').toLowerCase();

                        // Use native conversion when possible
                        if (Buffer.isNativeEncoding(encoding))
                            return original.BufferByteLength.call(this, str, encoding);

                        // Slow, I know, but we don't have a better way yet.
                        return iconv.encode(str, encoding).length;
                    }

                    original.BufferToString = Buffer.prototype.toString;
                    Buffer.prototype.toString = function(encoding, start, end) {
                        encoding = String(encoding || 'utf8').toLowerCase();

                        // Use native conversion when possible
                        if (Buffer.isNativeEncoding(encoding))
                            return original.BufferToString.call(this, encoding, start, end);

                        // Otherwise, use our decoding method.
                        if (typeof start == 'undefined') start = 0;
                        if (typeof end == 'undefined') end = this.length;
                        return iconv.decode(this.slice(start, end), encoding);
                    }

                    original.BufferWrite = Buffer.prototype.write;
                    Buffer.prototype.write = function(string, offset, length, encoding) {
                        var _offset = offset, _length = length, _encoding = encoding;
                        // Support both (string, offset, length, encoding)
                        // and the legacy (string, encoding, offset, length)
                        if (isFinite(offset)) {
                            if (!isFinite(length)) {
                                encoding = length;
                                length = undefined;
                            }
                        } else {  // legacy
                            var swap = encoding;
                            encoding = offset;
                            offset = length;
                            length = swap;
                        }

                        encoding = String(encoding || 'utf8').toLowerCase();

                        // Use native conversion when possible
                        if (Buffer.isNativeEncoding(encoding))
                            return original.BufferWrite.call(this, string, _offset, _length, _encoding);

                        offset = +offset || 0;
                        var remaining = this.length - offset;
                        if (!length) {
                            length = remaining;
                        } else {
                            length = +length;
                            if (length > remaining) {
                                length = remaining;
                            }
                        }

                        if (string.length > 0 && (length < 0 || offset < 0))
                            throw new RangeError('attempt to write beyond buffer bounds');

                        // Otherwise, use our encoding method.
                        var buf = iconv.encode(string, encoding);
                        if (buf.length < length) length = buf.length;
                        buf.copy(this, offset, 0, length);
                        return length;

                        // TODO: Set _charsWritten.
                    }


                    // -- Readable -------------------------------------------------------------
                    if (iconv.supportsStreams) {
                        var Readable = __webpack_require__(31).Readable;

                        original.ReadableSetEncoding = Readable.prototype.setEncoding;
                        Readable.prototype.setEncoding = function setEncoding(enc, options) {
                            // Use our own decoder, it has the same interface.
                            // We cannot use original function as it doesn't handle BOM-s.
                            this._readableState.decoder = iconv.getDecoder(enc, options);
                            this._readableState.encoding = enc;
                        }

                        Readable.prototype.collect = iconv._collect;
                    }
                }

                // Remove iconv-lite Node primitive extensions.
                iconv.undoExtendNodeEncodings = function undoExtendNodeEncodings() {
                    if (!iconv.supportsNodeEncodingsExtension)
                        return;
                    if (!original)
                        throw new Error("require('iconv-lite').undoExtendNodeEncodings(): Nothing to undo; extendNodeEncodings() is not called.")

                    delete Buffer.isNativeEncoding;

                    var SlowBuffer = __webpack_require__(2).SlowBuffer;

                    SlowBuffer.prototype.toString = original.SlowBufferToString;
                    SlowBuffer.prototype.write = original.SlowBufferWrite;

                    Buffer.isEncoding = original.BufferIsEncoding;
                    Buffer.byteLength = original.BufferByteLength;
                    Buffer.prototype.toString = original.BufferToString;
                    Buffer.prototype.write = original.BufferWrite;

                    if (iconv.supportsStreams) {
                        var Readable = __webpack_require__(31).Readable;

                        Readable.prototype.setEncoding = original.ReadableSetEncoding;
                        delete Readable.prototype.collect;
                    }

                    original = undefined;
                }
            }


            /***/ }),
        /* 108 */
        /***/ (function(module, exports, __webpack_require__) {

            // Generated by CoffeeScript 1.7.1
            (function() {
                var ArrayT, NumberT, utils;

                NumberT = __webpack_require__(109).Number;

                utils = __webpack_require__(110);

                ArrayT = (function() {
                    function ArrayT(type, length, lengthType) {
                        this.type = type;
                        this.length = length;
                        this.lengthType = lengthType != null ? lengthType : 'count';
                    }

                    ArrayT.prototype.decode = function(stream, parent) {
                        var ctx, i, length, pos, res, target, _i;
                        pos = stream.pos;
                        res = [];
                        ctx = parent;
                        if (this.length != null) {
                            length = utils.resolveLength(this.length, stream, parent);
                        }
                        if (this.length instanceof NumberT) {
                            Object.defineProperties(res, {
                                parent: {
                                    value: parent
                                },
                                _startOffset: {
                                    value: pos
                                },
                                _currentOffset: {
                                    value: 0,
                                    writable: true
                                },
                                _length: {
                                    value: length
                                }
                            });
                            ctx = res;
                        }
                        if ((length == null) || this.lengthType === 'bytes') {
                            target = length != null ? stream.pos + length : (parent != null ? parent._length : void 0) ? parent._startOffset + parent._length : stream.length;
                            while (stream.pos < target) {
                                res.push(this.type.decode(stream, ctx));
                            }
                        } else {
                            for (i = _i = 0; _i < length; i = _i += 1) {
                                res.push(this.type.decode(stream, ctx));
                            }
                        }
                        return res;
                    };

                    ArrayT.prototype.size = function(array, ctx) {
                        var item, size, _i, _len;
                        if (!array) {
                            return this.type.size(null, ctx) * utils.resolveLength(this.length, null, ctx);
                        }
                        size = 0;
                        if (this.length instanceof NumberT) {
                            size += this.length.size();
                            ctx = {
                                parent: ctx
                            };
                        }
                        for (_i = 0, _len = array.length; _i < _len; _i++) {
                            item = array[_i];
                            size += this.type.size(item, ctx);
                        }
                        return size;
                    };

                    ArrayT.prototype.encode = function(stream, array, parent) {
                        var ctx, i, item, ptr, _i, _len;
                        ctx = parent;
                        if (this.length instanceof NumberT) {
                            ctx = {
                                pointers: [],
                                startOffset: stream.pos,
                                parent: parent
                            };
                            ctx.pointerOffset = stream.pos + this.size(array, ctx);
                            this.length.encode(stream, array.length);
                        }
                        for (_i = 0, _len = array.length; _i < _len; _i++) {
                            item = array[_i];
                            this.type.encode(stream, item, ctx);
                        }
                        if (this.length instanceof NumberT) {
                            i = 0;
                            while (i < ctx.pointers.length) {
                                ptr = ctx.pointers[i++];
                                ptr.type.encode(stream, ptr.val);
                            }
                        }
                    };

                    return ArrayT;

                })();

                module.exports = ArrayT;

            }).call(this);


            /***/ }),
        /* 109 */
        /***/ (function(module, exports, __webpack_require__) {

            // Generated by CoffeeScript 1.7.1
            (function() {
                var DecodeStream, Fixed, NumberT,
                    __hasProp = {}.hasOwnProperty,
                    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

                DecodeStream = __webpack_require__(86);

                NumberT = (function() {
                    function NumberT(type, endian) {
                        this.type = type;
                        this.endian = endian != null ? endian : 'BE';
                        this.fn = this.type;
                        if (this.type[this.type.length - 1] !== '8') {
                            this.fn += this.endian;
                        }
                    }

                    NumberT.prototype.size = function() {
                        return DecodeStream.TYPES[this.type];
                    };

                    NumberT.prototype.decode = function(stream) {
                        return stream['read' + this.fn]();
                    };

                    NumberT.prototype.encode = function(stream, val) {
                        return stream['write' + this.fn](val);
                    };

                    return NumberT;

                })();

                exports.Number = NumberT;

                exports.uint8 = new NumberT('UInt8');

                exports.uint16be = exports.uint16 = new NumberT('UInt16', 'BE');

                exports.uint16le = new NumberT('UInt16', 'LE');

                exports.uint24be = exports.uint24 = new NumberT('UInt24', 'BE');

                exports.uint24le = new NumberT('UInt24', 'LE');

                exports.uint32be = exports.uint32 = new NumberT('UInt32', 'BE');

                exports.uint32le = new NumberT('UInt32', 'LE');

                exports.int8 = new NumberT('Int8');

                exports.int16be = exports.int16 = new NumberT('Int16', 'BE');

                exports.int16le = new NumberT('Int16', 'LE');

                exports.int24be = exports.int24 = new NumberT('Int24', 'BE');

                exports.int24le = new NumberT('Int24', 'LE');

                exports.int32be = exports.int32 = new NumberT('Int32', 'BE');

                exports.int32le = new NumberT('Int32', 'LE');

                exports.floatbe = exports.float = new NumberT('Float', 'BE');

                exports.floatle = new NumberT('Float', 'LE');

                exports.doublebe = exports.double = new NumberT('Double', 'BE');

                exports.doublele = new NumberT('Double', 'LE');

                Fixed = (function(_super) {
                    __extends(Fixed, _super);

                    function Fixed(size, endian, fracBits) {
                        if (fracBits == null) {
                            fracBits = size >> 1;
                        }
                        Fixed.__super__.constructor.call(this, "Int" + size, endian);
                        this._point = 1 << fracBits;
                    }

                    Fixed.prototype.decode = function(stream) {
                        return Fixed.__super__.decode.call(this, stream) / this._point;
                    };

                    Fixed.prototype.encode = function(stream, val) {
                        return Fixed.__super__.encode.call(this, stream, val * this._point | 0);
                    };

                    return Fixed;

                })(NumberT);

                exports.Fixed = Fixed;

                exports.fixed16be = exports.fixed16 = new Fixed(16, 'BE');

                exports.fixed16le = new Fixed(16, 'LE');

                exports.fixed32be = exports.fixed32 = new Fixed(32, 'BE');

                exports.fixed32le = new Fixed(32, 'LE');

            }).call(this);


            /***/ }),
        /* 110 */
        /***/ (function(module, exports, __webpack_require__) {

            // Generated by CoffeeScript 1.7.1
            (function() {
                var NumberT, PropertyDescriptor;

                NumberT = __webpack_require__(109).Number;

                exports.resolveLength = function(length, stream, parent) {
                    var res;
                    if (typeof length === 'number') {
                        res = length;
                    } else if (typeof length === 'function') {
                        res = length.call(parent, parent);
                    } else if (parent && typeof length === 'string') {
                        res = parent[length];
                    } else if (stream && length instanceof NumberT) {
                        res = length.decode(stream);
                    }
                    if (isNaN(res)) {
                        throw new Error('Not a fixed size');
                    }
                    return res;
                };

                PropertyDescriptor = (function() {
                    function PropertyDescriptor(opts) {
                        var key, val;
                        if (opts == null) {
                            opts = {};
                        }
                        this.enumerable = true;
                        this.configurable = true;
                        for (key in opts) {
                            val = opts[key];
                            this[key] = val;
                        }
                    }

                    return PropertyDescriptor;

                })();

                exports.PropertyDescriptor = PropertyDescriptor;

            }).call(this);


            /***/ }),
        /* 111 */
        /***/ (function(module, exports, __webpack_require__) {

            // Generated by CoffeeScript 1.7.1
            (function() {
                var ArrayT, LazyArray, LazyArrayT, NumberT, inspect, utils,
                    __hasProp = {}.hasOwnProperty,
                    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

                ArrayT = __webpack_require__(108);

                NumberT = __webpack_require__(109).Number;

                utils = __webpack_require__(110);

                inspect = __webpack_require__(72).inspect;

                LazyArrayT = (function(_super) {
                    __extends(LazyArrayT, _super);

                    function LazyArrayT() {
                        return LazyArrayT.__super__.constructor.apply(this, arguments);
                    }

                    LazyArrayT.prototype.decode = function(stream, parent) {
                        var length, pos, res;
                        pos = stream.pos;
                        length = utils.resolveLength(this.length, stream, parent);
                        if (this.length instanceof NumberT) {
                            parent = {
                                parent: parent,
                                _startOffset: pos,
                                _currentOffset: 0,
                                _length: length
                            };
                        }
                        res = new LazyArray(this.type, length, stream, parent);
                        stream.pos += length * this.type.size(null, parent);
                        return res;
                    };

                    LazyArrayT.prototype.size = function(val, ctx) {
                        if (val instanceof LazyArray) {
                            val = val.toArray();
                        }
                        return LazyArrayT.__super__.size.call(this, val, ctx);
                    };

                    LazyArrayT.prototype.encode = function(stream, val, ctx) {
                        if (val instanceof LazyArray) {
                            val = val.toArray();
                        }
                        return LazyArrayT.__super__.encode.call(this, stream, val, ctx);
                    };

                    return LazyArrayT;

                })(ArrayT);

                LazyArray = (function() {
                    function LazyArray(type, length, stream, ctx) {
                        this.type = type;
                        this.length = length;
                        this.stream = stream;
                        this.ctx = ctx;
                        this.base = this.stream.pos;
                        this.items = [];
                    }

                    LazyArray.prototype.get = function(index) {
                        var pos;
                        if (index < 0 || index >= this.length) {
                            return void 0;
                        }
                        if (this.items[index] == null) {
                            pos = this.stream.pos;
                            this.stream.pos = this.base + this.type.size(null, this.ctx) * index;
                            this.items[index] = this.type.decode(this.stream, this.ctx);
                            this.stream.pos = pos;
                        }
                        return this.items[index];
                    };

                    LazyArray.prototype.toArray = function() {
                        var i, _i, _ref, _results;
                        _results = [];
                        for (i = _i = 0, _ref = this.length; _i < _ref; i = _i += 1) {
                            _results.push(this.get(i));
                        }
                        return _results;
                    };

                    LazyArray.prototype.inspect = function() {
                        return inspect(this.toArray());
                    };

                    return LazyArray;

                })();

                module.exports = LazyArrayT;

            }).call(this);


            /***/ }),
        /* 112 */
        /***/ (function(module, exports) {

            // Generated by CoffeeScript 1.7.1
            (function() {
                var Bitfield;

                Bitfield = (function() {
                    function Bitfield(type, flags) {
                        this.type = type;
                        this.flags = flags != null ? flags : [];
                    }

                    Bitfield.prototype.decode = function(stream) {
                        var flag, i, res, val, _i, _len, _ref;
                        val = this.type.decode(stream);
                        res = {};
                        _ref = this.flags;
                        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
                            flag = _ref[i];
                            if (flag != null) {
                                res[flag] = !!(val & (1 << i));
                            }
                        }
                        return res;
                    };

                    Bitfield.prototype.size = function() {
                        return this.type.size();
                    };

                    Bitfield.prototype.encode = function(stream, keys) {
                        var flag, i, val, _i, _len, _ref;
                        val = 0;
                        _ref = this.flags;
                        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
                            flag = _ref[i];
                            if (flag != null) {
                                if (keys[flag]) {
                                    val |= 1 << i;
                                }
                            }
                        }
                        return this.type.encode(stream, val);
                    };

                    return Bitfield;

                })();

                module.exports = Bitfield;

            }).call(this);


            /***/ }),
        /* 113 */
        /***/ (function(module, exports) {

            // Generated by CoffeeScript 1.7.1
            (function() {
                var BooleanT;

                BooleanT = (function() {
                    function BooleanT(type) {
                        this.type = type;
                    }

                    BooleanT.prototype.decode = function(stream, parent) {
                        return !!this.type.decode(stream, parent);
                    };

                    BooleanT.prototype.size = function(val, parent) {
                        return this.type.size(val, parent);
                    };

                    BooleanT.prototype.encode = function(stream, val, parent) {
                        return this.type.encode(stream, +val, parent);
                    };

                    return BooleanT;

                })();

                module.exports = BooleanT;

            }).call(this);


            /***/ }),
        /* 114 */
        /***/ (function(module, exports, __webpack_require__) {

            // Generated by CoffeeScript 1.7.1
            (function() {
                var BufferT, NumberT, utils;

                utils = __webpack_require__(110);

                NumberT = __webpack_require__(109).Number;

                BufferT = (function() {
                    function BufferT(length) {
                        this.length = length;
                    }

                    BufferT.prototype.decode = function(stream, parent) {
                        var length;
                        length = utils.resolveLength(this.length, stream, parent);
                        return stream.readBuffer(length);
                    };

                    BufferT.prototype.size = function(val, parent) {
                        if (!val) {
                            return utils.resolveLength(this.length, null, parent);
                        }
                        return val.length;
                    };

                    BufferT.prototype.encode = function(stream, buf, parent) {
                        if (this.length instanceof NumberT) {
                            this.length.encode(stream, buf.length);
                        }
                        return stream.writeBuffer(buf);
                    };

                    return BufferT;

                })();

                module.exports = BufferT;

            }).call(this);


            /***/ }),
        /* 115 */
        /***/ (function(module, exports) {

            // Generated by CoffeeScript 1.7.1
            (function() {
                var Enum;

                Enum = (function() {
                    function Enum(type, options) {
                        this.type = type;
                        this.options = options != null ? options : [];
                    }

                    Enum.prototype.decode = function(stream) {
                        var index;
                        index = this.type.decode(stream);
                        return this.options[index] || index;
                    };

                    Enum.prototype.size = function() {
                        return this.type.size();
                    };

                    Enum.prototype.encode = function(stream, val) {
                        var index;
                        index = this.options.indexOf(val);
                        if (index === -1) {
                            throw new Error("Unknown option in enum: " + val);
                        }
                        return this.type.encode(stream, index);
                    };

                    return Enum;

                })();

                module.exports = Enum;

            }).call(this);


            /***/ }),
        /* 116 */
        /***/ (function(module, exports) {

            // Generated by CoffeeScript 1.7.1
            (function() {
                var Optional;

                Optional = (function() {
                    function Optional(type, condition) {
                        this.type = type;
                        this.condition = condition != null ? condition : true;
                    }

                    Optional.prototype.decode = function(stream, parent) {
                        var condition;
                        condition = this.condition;
                        if (typeof condition === 'function') {
                            condition = condition.call(parent, parent);
                        }
                        if (condition) {
                            return this.type.decode(stream, parent);
                        }
                    };

                    Optional.prototype.size = function(val, parent) {
                        var condition;
                        condition = this.condition;
                        if (typeof condition === 'function') {
                            condition = condition.call(parent, parent);
                        }
                        if (condition) {
                            return this.type.size(val, parent);
                        } else {
                            return 0;
                        }
                    };

                    Optional.prototype.encode = function(stream, val, parent) {
                        var condition;
                        condition = this.condition;
                        if (typeof condition === 'function') {
                            condition = condition.call(parent, parent);
                        }
                        if (condition) {
                            return this.type.encode(stream, val, parent);
                        }
                    };

                    return Optional;

                })();

                module.exports = Optional;

            }).call(this);


            /***/ }),
        /* 117 */
        /***/ (function(module, exports, __webpack_require__) {

            // Generated by CoffeeScript 1.7.1
            (function() {
                var Reserved, utils;

                utils = __webpack_require__(110);

                Reserved = (function() {
                    function Reserved(type, count) {
                        this.type = type;
                        this.count = count != null ? count : 1;
                    }

                    Reserved.prototype.decode = function(stream, parent) {
                        stream.pos += this.size(null, parent);
                        return void 0;
                    };

                    Reserved.prototype.size = function(data, parent) {
                        var count;
                        count = utils.resolveLength(this.count, null, parent);
                        return this.type.size() * count;
                    };

                    Reserved.prototype.encode = function(stream, val, parent) {
                        return stream.fill(0, this.size(val, parent));
                    };

                    return Reserved;

                })();

                module.exports = Reserved;

            }).call(this);


            /***/ }),
        /* 118 */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(Buffer) {// Generated by CoffeeScript 1.7.1
                (function() {
                    var NumberT, StringT, utils;

                    NumberT = __webpack_require__(109).Number;

                    utils = __webpack_require__(110);

                    StringT = (function() {
                        function StringT(length, encoding) {
                            this.length = length;
                            this.encoding = encoding != null ? encoding : 'ascii';
                        }

                        StringT.prototype.decode = function(stream, parent) {
                            var buffer, encoding, length, pos, string;
                            length = (function() {
                                if (this.length != null) {
                                    return utils.resolveLength(this.length, stream, parent);
                                } else {
                                    buffer = stream.buffer, length = stream.length, pos = stream.pos;
                                    while (pos < length && buffer[pos] !== 0x00) {
                                        ++pos;
                                    }
                                    return pos - stream.pos;
                                }
                            }).call(this);
                            encoding = this.encoding;
                            if (typeof encoding === 'function') {
                                encoding = encoding.call(parent, parent) || 'ascii';
                            }
                            string = stream.readString(length, encoding);
                            if ((this.length == null) && stream.pos < stream.length) {
                                stream.pos++;
                            }
                            return string;
                        };

                        StringT.prototype.size = function(val, parent) {
                            var encoding, size;
                            if (!val) {
                                return utils.resolveLength(this.length, null, parent);
                            }
                            encoding = this.encoding;
                            if (typeof encoding === 'function') {
                                encoding = encoding.call(parent != null ? parent.val : void 0, parent != null ? parent.val : void 0) || 'ascii';
                            }
                            if (encoding === 'utf16be') {
                                encoding = 'utf16le';
                            }
                            size = Buffer.byteLength(val, encoding);
                            if (this.length instanceof NumberT) {
                                size += this.length.size();
                            }
                            if (this.length == null) {
                                size++;
                            }
                            return size;
                        };

                        StringT.prototype.encode = function(stream, val, parent) {
                            var encoding;
                            encoding = this.encoding;
                            if (typeof encoding === 'function') {
                                encoding = encoding.call(parent != null ? parent.val : void 0, parent != null ? parent.val : void 0) || 'ascii';
                            }
                            if (this.length instanceof NumberT) {
                                this.length.encode(stream, Buffer.byteLength(val, encoding));
                            }
                            stream.writeString(val, encoding);
                            if (this.length == null) {
                                return stream.writeUInt8(0x00);
                            }
                        };

                        return StringT;

                    })();

                    module.exports = StringT;

                }).call(this);

                /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))

            /***/ }),
        /* 119 */
        /***/ (function(module, exports, __webpack_require__) {

            // Generated by CoffeeScript 1.7.1
            (function() {
                var Struct, utils;

                utils = __webpack_require__(110);

                Struct = (function() {
                    function Struct(fields) {
                        this.fields = fields != null ? fields : {};
                    }

                    Struct.prototype.decode = function(stream, parent, length) {
                        var res, _ref;
                        if (length == null) {
                            length = 0;
                        }
                        res = this._setup(stream, parent, length);
                        this._parseFields(stream, res, this.fields);
                        if ((_ref = this.process) != null) {
                            _ref.call(res, stream);
                        }
                        return res;
                    };

                    Struct.prototype._setup = function(stream, parent, length) {
                        var res;
                        res = {};
                        Object.defineProperties(res, {
                            parent: {
                                value: parent
                            },
                            _startOffset: {
                                value: stream.pos
                            },
                            _currentOffset: {
                                value: 0,
                                writable: true
                            },
                            _length: {
                                value: length
                            }
                        });
                        return res;
                    };

                    Struct.prototype._parseFields = function(stream, res, fields) {
                        var key, type, val;
                        for (key in fields) {
                            type = fields[key];
                            if (typeof type === 'function') {
                                val = type.call(res, res);
                            } else {
                                val = type.decode(stream, res);
                            }
                            if (val !== void 0) {
                                if (val instanceof utils.PropertyDescriptor) {
                                    Object.defineProperty(res, key, val);
                                } else {
                                    res[key] = val;
                                }
                            }
                            res._currentOffset = stream.pos - res._startOffset;
                        }
                    };

                    Struct.prototype.size = function(val, parent, includePointers) {
                        var ctx, key, size, type, _ref;
                        if (val == null) {
                            val = {};
                        }
                        if (includePointers == null) {
                            includePointers = true;
                        }
                        ctx = {
                            parent: parent,
                            val: val,
                            pointerSize: 0
                        };
                        size = 0;
                        _ref = this.fields;
                        for (key in _ref) {
                            type = _ref[key];
                            if (type.size != null) {
                                size += type.size(val[key], ctx);
                            }
                        }
                        if (includePointers) {
                            size += ctx.pointerSize;
                        }
                        return size;
                    };

                    Struct.prototype.encode = function(stream, val, parent) {
                        var ctx, i, key, ptr, type, _ref, _ref1;
                        if ((_ref = this.preEncode) != null) {
                            _ref.call(val, stream);
                        }
                        ctx = {
                            pointers: [],
                            startOffset: stream.pos,
                            parent: parent,
                            val: val,
                            pointerSize: 0
                        };
                        ctx.pointerOffset = stream.pos + this.size(val, ctx, false);
                        _ref1 = this.fields;
                        for (key in _ref1) {
                            type = _ref1[key];
                            if (type.encode != null) {
                                type.encode(stream, val[key], ctx);
                            }
                        }
                        i = 0;
                        while (i < ctx.pointers.length) {
                            ptr = ctx.pointers[i++];
                            ptr.type.encode(stream, ptr.val, ptr.parent);
                        }
                    };

                    return Struct;

                })();

                module.exports = Struct;

            }).call(this);


            /***/ }),
        /* 120 */
        /***/ (function(module, exports, __webpack_require__) {

            // Generated by CoffeeScript 1.7.1
            (function() {
                var Struct, VersionedStruct,
                    __hasProp = {}.hasOwnProperty,
                    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

                Struct = __webpack_require__(119);

                VersionedStruct = (function(_super) {
                    __extends(VersionedStruct, _super);

                    function VersionedStruct(type, versions) {
                        this.type = type;
                        this.versions = versions != null ? versions : {};
                        if (typeof this.type === 'string') {
                            this.versionGetter = new Function('parent', "return parent." + this.type);
                            this.versionSetter = new Function('parent', 'version', "return parent." + this.type + " = version");
                        }
                    }

                    VersionedStruct.prototype.decode = function(stream, parent, length) {
                        var fields, res, _ref;
                        if (length == null) {
                            length = 0;
                        }
                        res = this._setup(stream, parent, length);
                        if (typeof this.type === 'string') {
                            res.version = this.versionGetter(parent);
                        } else {
                            res.version = this.type.decode(stream);
                        }
                        if (this.versions.header) {
                            this._parseFields(stream, res, this.versions.header);
                        }
                        fields = this.versions[res.version];
                        if (fields == null) {
                            throw new Error("Unknown version " + res.version);
                        }
                        if (fields instanceof VersionedStruct) {
                            return fields.decode(stream, parent);
                        }
                        this._parseFields(stream, res, fields);
                        if ((_ref = this.process) != null) {
                            _ref.call(res, stream);
                        }
                        return res;
                    };

                    VersionedStruct.prototype.size = function(val, parent, includePointers) {
                        var ctx, fields, key, size, type, _ref;
                        if (includePointers == null) {
                            includePointers = true;
                        }
                        if (!val) {
                            throw new Error('Not a fixed size');
                        }
                        ctx = {
                            parent: parent,
                            val: val,
                            pointerSize: 0
                        };
                        size = 0;
                        if (typeof this.type !== 'string') {
                            size += this.type.size(val.version, ctx);
                        }
                        if (this.versions.header) {
                            _ref = this.versions.header;
                            for (key in _ref) {
                                type = _ref[key];
                                if (type.size != null) {
                                    size += type.size(val[key], ctx);
                                }
                            }
                        }
                        fields = this.versions[val.version];
                        if (fields == null) {
                            throw new Error("Unknown version " + val.version);
                        }
                        for (key in fields) {
                            type = fields[key];
                            if (type.size != null) {
                                size += type.size(val[key], ctx);
                            }
                        }
                        if (includePointers) {
                            size += ctx.pointerSize;
                        }
                        return size;
                    };

                    VersionedStruct.prototype.encode = function(stream, val, parent) {
                        var ctx, fields, i, key, ptr, type, _ref, _ref1;
                        if ((_ref = this.preEncode) != null) {
                            _ref.call(val, stream);
                        }
                        ctx = {
                            pointers: [],
                            startOffset: stream.pos,
                            parent: parent,
                            val: val,
                            pointerSize: 0
                        };
                        ctx.pointerOffset = stream.pos + this.size(val, ctx, false);
                        if (typeof this.type !== 'string') {
                            this.type.encode(stream, val.version);
                        }
                        if (this.versions.header) {
                            _ref1 = this.versions.header;
                            for (key in _ref1) {
                                type = _ref1[key];
                                if (type.encode != null) {
                                    type.encode(stream, val[key], ctx);
                                }
                            }
                        }
                        fields = this.versions[val.version];
                        for (key in fields) {
                            type = fields[key];
                            if (type.encode != null) {
                                type.encode(stream, val[key], ctx);
                            }
                        }
                        i = 0;
                        while (i < ctx.pointers.length) {
                            ptr = ctx.pointers[i++];
                            ptr.type.encode(stream, ptr.val, ptr.parent);
                        }
                    };

                    return VersionedStruct;

                })(Struct);

                module.exports = VersionedStruct;

            }).call(this);


            /***/ }),
        /* 121 */
        /***/ (function(module, exports, __webpack_require__) {

            // Generated by CoffeeScript 1.7.1
            (function() {
                var Pointer, VoidPointer, utils;

                utils = __webpack_require__(110);

                Pointer = (function() {
                    function Pointer(offsetType, type, options) {
                        var _base, _base1, _base2, _base3;
                        this.offsetType = offsetType;
                        this.type = type;
                        this.options = options != null ? options : {};
                        if (this.type === 'void') {
                            this.type = null;
                        }
                        if ((_base = this.options).type == null) {
                            _base.type = 'local';
                        }
                        if ((_base1 = this.options).allowNull == null) {
                            _base1.allowNull = true;
                        }
                        if ((_base2 = this.options).nullValue == null) {
                            _base2.nullValue = 0;
                        }
                        if ((_base3 = this.options).lazy == null) {
                            _base3.lazy = false;
                        }
                        if (this.options.relativeTo) {
                            this.relativeToGetter = new Function('ctx', "return ctx." + this.options.relativeTo);
                        }
                    }

                    Pointer.prototype.decode = function(stream, ctx) {
                        var c, decodeValue, offset, ptr, relative, val;
                        offset = this.offsetType.decode(stream, ctx);
                        if (offset === this.options.nullValue && this.options.allowNull) {
                            return null;
                        }
                        relative = (function() {
                            switch (this.options.type) {
                                case 'local':
                                    return ctx._startOffset;
                                case 'immediate':
                                    return stream.pos - this.offsetType.size();
                                case 'parent':
                                    return ctx.parent._startOffset;
                                default:
                                    c = ctx;
                                    while (c.parent) {
                                        c = c.parent;
                                    }
                                    return c._startOffset || 0;
                            }
                        }).call(this);
                        if (this.options.relativeTo) {
                            relative += this.relativeToGetter(ctx);
                        }
                        ptr = offset + relative;
                        if (this.type != null) {
                            val = null;
                            decodeValue = (function(_this) {
                                return function() {
                                    var pos;
                                    if (val != null) {
                                        return val;
                                    }
                                    pos = stream.pos;
                                    stream.pos = ptr;
                                    val = _this.type.decode(stream, ctx);
                                    stream.pos = pos;
                                    return val;
                                };
                            })(this);
                            if (this.options.lazy) {
                                return new utils.PropertyDescriptor({
                                    get: decodeValue
                                });
                            }
                            return decodeValue();
                        } else {
                            return ptr;
                        }
                    };

                    Pointer.prototype.size = function(val, ctx) {
                        var parent, type;
                        parent = ctx;
                        switch (this.options.type) {
                            case 'local':
                            case 'immediate':
                                break;
                            case 'parent':
                                ctx = ctx.parent;
                                break;
                            default:
                                while (ctx.parent) {
                                    ctx = ctx.parent;
                                }
                        }
                        type = this.type;
                        if (type == null) {
                            if (!(val instanceof VoidPointer)) {
                                throw new Error("Must be a VoidPointer");
                            }
                            type = val.type;
                            val = val.value;
                        }
                        if (val && ctx) {
                            ctx.pointerSize += type.size(val, parent);
                        }
                        return this.offsetType.size();
                    };

                    Pointer.prototype.encode = function(stream, val, ctx) {
                        var parent, relative, type;
                        parent = ctx;
                        if (val == null) {
                            this.offsetType.encode(stream, this.options.nullValue);
                            return;
                        }
                        switch (this.options.type) {
                            case 'local':
                                relative = ctx.startOffset;
                                break;
                            case 'immediate':
                                relative = stream.pos + this.offsetType.size(val, parent);
                                break;
                            case 'parent':
                                ctx = ctx.parent;
                                relative = ctx.startOffset;
                                break;
                            default:
                                relative = 0;
                                while (ctx.parent) {
                                    ctx = ctx.parent;
                                }
                        }
                        if (this.options.relativeTo) {
                            relative += this.relativeToGetter(parent.val);
                        }
                        this.offsetType.encode(stream, ctx.pointerOffset - relative);
                        type = this.type;
                        if (type == null) {
                            if (!(val instanceof VoidPointer)) {
                                throw new Error("Must be a VoidPointer");
                            }
                            type = val.type;
                            val = val.value;
                        }
                        ctx.pointers.push({
                            type: type,
                            val: val,
                            parent: parent
                        });
                        return ctx.pointerOffset += type.size(val, parent);
                    };

                    return Pointer;

                })();

                VoidPointer = (function() {
                    function VoidPointer(type, value) {
                        this.type = type;
                        this.value = value;
                    }

                    return VoidPointer;

                })();

                exports.Pointer = Pointer;

                exports.VoidPointer = VoidPointer;

            }).call(this);


            /***/ }),
        /* 122 */
        /***/ (function(module, exports, __webpack_require__) {

            module.exports = { "default": __webpack_require__(123), __esModule: true };

            /***/ }),
        /* 123 */
        /***/ (function(module, exports, __webpack_require__) {

            __webpack_require__(124);
            var $Object = __webpack_require__(142).Object;
            module.exports = function getOwnPropertyDescriptor(it, key){
                return $Object.getOwnPropertyDescriptor(it, key);
            };

            /***/ }),
        /* 124 */
        /***/ (function(module, exports, __webpack_require__) {

            // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
            var toIObject                 = __webpack_require__(125)
                , $getOwnPropertyDescriptor = __webpack_require__(129).f;

            __webpack_require__(140)('getOwnPropertyDescriptor', function(){
                return function getOwnPropertyDescriptor(it, key){
                    return $getOwnPropertyDescriptor(toIObject(it), key);
                };
            });

            /***/ }),
        /* 125 */
        /***/ (function(module, exports, __webpack_require__) {

            // to indexed object, toObject with fallback for non-array-like ES3 strings
            var IObject = __webpack_require__(126)
                , defined = __webpack_require__(128);
            module.exports = function(it){
                return IObject(defined(it));
            };

            /***/ }),
        /* 126 */
        /***/ (function(module, exports, __webpack_require__) {

            // fallback for non-array-like ES3 and non-enumerable old V8 strings
            var cof = __webpack_require__(127);
            module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
                return cof(it) == 'String' ? it.split('') : Object(it);
            };

            /***/ }),
        /* 127 */
        /***/ (function(module, exports) {

            var toString = {}.toString;

            module.exports = function(it){
                return toString.call(it).slice(8, -1);
            };

            /***/ }),
        /* 128 */
        /***/ (function(module, exports) {

            // 7.2.1 RequireObjectCoercible(argument)
            module.exports = function(it){
                if(it == undefined)throw TypeError("Can't call method on  " + it);
                return it;
            };

            /***/ }),
        /* 129 */
        /***/ (function(module, exports, __webpack_require__) {

            var pIE            = __webpack_require__(130)
                , createDesc     = __webpack_require__(131)
                , toIObject      = __webpack_require__(125)
                , toPrimitive    = __webpack_require__(132)
                , has            = __webpack_require__(134)
                , IE8_DOM_DEFINE = __webpack_require__(135)
                , gOPD           = Object.getOwnPropertyDescriptor;

            exports.f = __webpack_require__(136) ? gOPD : function getOwnPropertyDescriptor(O, P){
                O = toIObject(O);
                P = toPrimitive(P, true);
                if(IE8_DOM_DEFINE)try {
                    return gOPD(O, P);
                } catch(e){ /* empty */ }
                if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
            };

            /***/ }),
        /* 130 */
        /***/ (function(module, exports) {

            exports.f = {}.propertyIsEnumerable;

            /***/ }),
        /* 131 */
        /***/ (function(module, exports) {

            module.exports = function(bitmap, value){
                return {
                    enumerable  : !(bitmap & 1),
                    configurable: !(bitmap & 2),
                    writable    : !(bitmap & 4),
                    value       : value
                };
            };

            /***/ }),
        /* 132 */
        /***/ (function(module, exports, __webpack_require__) {

            // 7.1.1 ToPrimitive(input [, PreferredType])
            var isObject = __webpack_require__(133);
            // instead of the ES6 spec version, we didn't implement @@toPrimitive case
            // and the second argument - flag - preferred type is a string
            module.exports = function(it, S){
                if(!isObject(it))return it;
                var fn, val;
                if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
                if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
                if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
                throw TypeError("Can't convert object to primitive value");
            };

            /***/ }),
        /* 133 */
        /***/ (function(module, exports) {

            module.exports = function(it){
                return typeof it === 'object' ? it !== null : typeof it === 'function';
            };

            /***/ }),
        /* 134 */
        /***/ (function(module, exports) {

            var hasOwnProperty = {}.hasOwnProperty;
            module.exports = function(it, key){
                return hasOwnProperty.call(it, key);
            };

            /***/ }),
        /* 135 */
        /***/ (function(module, exports, __webpack_require__) {

            module.exports = !__webpack_require__(136) && !__webpack_require__(137)(function(){
                    return Object.defineProperty(__webpack_require__(138)('div'), 'a', {get: function(){ return 7; }}).a != 7;
                });

            /***/ }),
        /* 136 */
        /***/ (function(module, exports, __webpack_require__) {

            // Thank's IE8 for his funny defineProperty
            module.exports = !__webpack_require__(137)(function(){
                return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
            });

            /***/ }),
        /* 137 */
        /***/ (function(module, exports) {

            module.exports = function(exec){
                try {
                    return !!exec();
                } catch(e){
                    return true;
                }
            };

            /***/ }),
        /* 138 */
        /***/ (function(module, exports, __webpack_require__) {

            var isObject = __webpack_require__(133)
                , document = __webpack_require__(139).document
                // in old IE typeof document.createElement is 'object'
                , is = isObject(document) && isObject(document.createElement);
            module.exports = function(it){
                return is ? document.createElement(it) : {};
            };

            /***/ }),
        /* 139 */
        /***/ (function(module, exports) {

            // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
            var global = module.exports = typeof window != 'undefined' && window.Math == Math
                ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
            if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

            /***/ }),
        /* 140 */
        /***/ (function(module, exports, __webpack_require__) {

            // most Object methods by ES6 should accept primitives
            var $export = __webpack_require__(141)
                , core    = __webpack_require__(142)
                , fails   = __webpack_require__(137);
            module.exports = function(KEY, exec){
                var fn  = (core.Object || {})[KEY] || Object[KEY]
                    , exp = {};
                exp[KEY] = exec(fn);
                $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
            };

            /***/ }),
        /* 141 */
        /***/ (function(module, exports, __webpack_require__) {

            var global    = __webpack_require__(139)
                , core      = __webpack_require__(142)
                , ctx       = __webpack_require__(143)
                , hide      = __webpack_require__(145)
                , PROTOTYPE = 'prototype';

            var $export = function(type, name, source){
                var IS_FORCED = type & $export.F
                    , IS_GLOBAL = type & $export.G
                    , IS_STATIC = type & $export.S
                    , IS_PROTO  = type & $export.P
                    , IS_BIND   = type & $export.B
                    , IS_WRAP   = type & $export.W
                    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
                    , expProto  = exports[PROTOTYPE]
                    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
                    , key, own, out;
                if(IS_GLOBAL)source = name;
                for(key in source){
                    // contains in native
                    own = !IS_FORCED && target && target[key] !== undefined;
                    if(own && key in exports)continue;
                    // export native or passed
                    out = own ? target[key] : source[key];
                    // prevent global pollution for namespaces
                    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
                        // bind timers to global for call from export context
                        : IS_BIND && own ? ctx(out, global)
                        // wrap global constructors for prevent change them in library
                        : IS_WRAP && target[key] == out ? (function(C){
                        var F = function(a, b, c){
                            if(this instanceof C){
                                switch(arguments.length){
                                    case 0: return new C;
                                    case 1: return new C(a);
                                    case 2: return new C(a, b);
                                } return new C(a, b, c);
                            } return C.apply(this, arguments);
                        };
                        F[PROTOTYPE] = C[PROTOTYPE];
                        return F;
                        // make static versions for prototype methods
                    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
                    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
                    if(IS_PROTO){
                        (exports.virtual || (exports.virtual = {}))[key] = out;
                        // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
                        if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
                    }
                }
            };
            // type bitmap
            $export.F = 1;   // forced
            $export.G = 2;   // global
            $export.S = 4;   // static
            $export.P = 8;   // proto
            $export.B = 16;  // bind
            $export.W = 32;  // wrap
            $export.U = 64;  // safe
            $export.R = 128; // real proto method for `library`
            module.exports = $export;

            /***/ }),
        /* 142 */
        /***/ (function(module, exports) {

            var core = module.exports = {version: '2.4.0'};
            if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

            /***/ }),
        /* 143 */
        /***/ (function(module, exports, __webpack_require__) {

            // optional / simple context binding
            var aFunction = __webpack_require__(144);
            module.exports = function(fn, that, length){
                aFunction(fn);
                if(that === undefined)return fn;
                switch(length){
                    case 1: return function(a){
                        return fn.call(that, a);
                    };
                    case 2: return function(a, b){
                        return fn.call(that, a, b);
                    };
                    case 3: return function(a, b, c){
                        return fn.call(that, a, b, c);
                    };
                }
                return function(/* ...args */){
                    return fn.apply(that, arguments);
                };
            };

            /***/ }),
        /* 144 */
        /***/ (function(module, exports) {

            module.exports = function(it){
                if(typeof it != 'function')throw TypeError(it + ' is not a function!');
                return it;
            };

            /***/ }),
        /* 145 */
        /***/ (function(module, exports, __webpack_require__) {

            var dP         = __webpack_require__(146)
                , createDesc = __webpack_require__(131);
            module.exports = __webpack_require__(136) ? function(object, key, value){
                return dP.f(object, key, createDesc(1, value));
            } : function(object, key, value){
                object[key] = value;
                return object;
            };

            /***/ }),
        /* 146 */
        /***/ (function(module, exports, __webpack_require__) {

            var anObject       = __webpack_require__(147)
                , IE8_DOM_DEFINE = __webpack_require__(135)
                , toPrimitive    = __webpack_require__(132)
                , dP             = Object.defineProperty;

            exports.f = __webpack_require__(136) ? Object.defineProperty : function defineProperty(O, P, Attributes){
                anObject(O);
                P = toPrimitive(P, true);
                anObject(Attributes);
                if(IE8_DOM_DEFINE)try {
                    return dP(O, P, Attributes);
                } catch(e){ /* empty */ }
                if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
                if('value' in Attributes)O[P] = Attributes.value;
                return O;
            };

            /***/ }),
        /* 147 */
        /***/ (function(module, exports, __webpack_require__) {

            var isObject = __webpack_require__(133);
            module.exports = function(it){
                if(!isObject(it))throw TypeError(it + ' is not an object!');
                return it;
            };

            /***/ }),
        /* 148 */
        /***/ (function(module, exports, __webpack_require__) {

            module.exports = { "default": __webpack_require__(149), __esModule: true };

            /***/ }),
        /* 149 */
        /***/ (function(module, exports, __webpack_require__) {

            __webpack_require__(150);
            __webpack_require__(176);
            module.exports = __webpack_require__(178);

            /***/ }),
        /* 150 */
        /***/ (function(module, exports, __webpack_require__) {

            __webpack_require__(151);
            var global        = __webpack_require__(139)
                , hide          = __webpack_require__(145)
                , Iterators     = __webpack_require__(154)
                , TO_STRING_TAG = __webpack_require__(173)('toStringTag');

            for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
                var NAME       = collections[i]
                    , Collection = global[NAME]
                    , proto      = Collection && Collection.prototype;
                if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
                Iterators[NAME] = Iterators.Array;
            }

            /***/ }),
        /* 151 */
        /***/ (function(module, exports, __webpack_require__) {

            'use strict';
            var addToUnscopables = __webpack_require__(152)
                , step             = __webpack_require__(153)
                , Iterators        = __webpack_require__(154)
                , toIObject        = __webpack_require__(125);

            // 22.1.3.4 Array.prototype.entries()
            // 22.1.3.13 Array.prototype.keys()
            // 22.1.3.29 Array.prototype.values()
            // 22.1.3.30 Array.prototype[@@iterator]()
            module.exports = __webpack_require__(155)(Array, 'Array', function(iterated, kind){
                this._t = toIObject(iterated); // target
                this._i = 0;                   // next index
                this._k = kind;                // kind
                // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
            }, function(){
                var O     = this._t
                    , kind  = this._k
                    , index = this._i++;
                if(!O || index >= O.length){
                    this._t = undefined;
                    return step(1);
                }
                if(kind == 'keys'  )return step(0, index);
                if(kind == 'values')return step(0, O[index]);
                return step(0, [index, O[index]]);
            }, 'values');

            // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
            Iterators.Arguments = Iterators.Array;

            addToUnscopables('keys');
            addToUnscopables('values');
            addToUnscopables('entries');

            /***/ }),
        /* 152 */
        /***/ (function(module, exports) {

            module.exports = function(){ /* empty */ };

            /***/ }),
        /* 153 */
        /***/ (function(module, exports) {

            module.exports = function(done, value){
                return {value: value, done: !!done};
            };

            /***/ }),
        /* 154 */
        /***/ (function(module, exports) {

            module.exports = {};

            /***/ }),
        /* 155 */
        /***/ (function(module, exports, __webpack_require__) {

            'use strict';
            var LIBRARY        = __webpack_require__(156)
                , $export        = __webpack_require__(141)
                , redefine       = __webpack_require__(157)
                , hide           = __webpack_require__(145)
                , has            = __webpack_require__(134)
                , Iterators      = __webpack_require__(154)
                , $iterCreate    = __webpack_require__(158)
                , setToStringTag = __webpack_require__(172)
                , getPrototypeOf = __webpack_require__(174)
                , ITERATOR       = __webpack_require__(173)('iterator')
                , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
                , FF_ITERATOR    = '@@iterator'
                , KEYS           = 'keys'
                , VALUES         = 'values';

            var returnThis = function(){ return this; };

            module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
                $iterCreate(Constructor, NAME, next);
                var getMethod = function(kind){
                    if(!BUGGY && kind in proto)return proto[kind];
                    switch(kind){
                        case KEYS: return function keys(){ return new Constructor(this, kind); };
                        case VALUES: return function values(){ return new Constructor(this, kind); };
                    } return function entries(){ return new Constructor(this, kind); };
                };
                var TAG        = NAME + ' Iterator'
                    , DEF_VALUES = DEFAULT == VALUES
                    , VALUES_BUG = false
                    , proto      = Base.prototype
                    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
                    , $default   = $native || getMethod(DEFAULT)
                    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
                    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
                    , methods, key, IteratorPrototype;
                // Fix native
                if($anyNative){
                    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
                    if(IteratorPrototype !== Object.prototype){
                        // Set @@toStringTag to native iterators
                        setToStringTag(IteratorPrototype, TAG, true);
                        // fix for some old engines
                        if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
                    }
                }
                // fix Array#{values, @@iterator}.name in V8 / FF
                if(DEF_VALUES && $native && $native.name !== VALUES){
                    VALUES_BUG = true;
                    $default = function values(){ return $native.call(this); };
                }
                // Define iterator
                if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
                    hide(proto, ITERATOR, $default);
                }
                // Plug for library
                Iterators[NAME] = $default;
                Iterators[TAG]  = returnThis;
                if(DEFAULT){
                    methods = {
                        values:  DEF_VALUES ? $default : getMethod(VALUES),
                        keys:    IS_SET     ? $default : getMethod(KEYS),
                        entries: $entries
                    };
                    if(FORCED)for(key in methods){
                        if(!(key in proto))redefine(proto, key, methods[key]);
                    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
                }
                return methods;
            };

            /***/ }),
        /* 156 */
        /***/ (function(module, exports) {

            module.exports = true;

            /***/ }),
        /* 157 */
        /***/ (function(module, exports, __webpack_require__) {

            module.exports = __webpack_require__(145);

            /***/ }),
        /* 158 */
        /***/ (function(module, exports, __webpack_require__) {

            'use strict';
            var create         = __webpack_require__(159)
                , descriptor     = __webpack_require__(131)
                , setToStringTag = __webpack_require__(172)
                , IteratorPrototype = {};

            // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
            __webpack_require__(145)(IteratorPrototype, __webpack_require__(173)('iterator'), function(){ return this; });

            module.exports = function(Constructor, NAME, next){
                Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
                setToStringTag(Constructor, NAME + ' Iterator');
            };

            /***/ }),
        /* 159 */
        /***/ (function(module, exports, __webpack_require__) {

            // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
            var anObject    = __webpack_require__(147)
                , dPs         = __webpack_require__(160)
                , enumBugKeys = __webpack_require__(170)
                , IE_PROTO    = __webpack_require__(167)('IE_PROTO')
                , Empty       = function(){ /* empty */ }
                , PROTOTYPE   = 'prototype';

            // Create object with fake `null` prototype: use iframe Object with cleared prototype
            var createDict = function(){
                // Thrash, waste and sodomy: IE GC bug
                var iframe = __webpack_require__(138)('iframe')
                    , i      = enumBugKeys.length
                    , lt     = '<'
                    , gt     = '>'
                    , iframeDocument;
                iframe.style.display = 'none';
                __webpack_require__(171).appendChild(iframe);
                iframe.src = 'javascript:'; // eslint-disable-line no-script-url
                // createDict = iframe.contentWindow.Object;
                // html.removeChild(iframe);
                iframeDocument = iframe.contentWindow.document;
                iframeDocument.open();
                iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
                iframeDocument.close();
                createDict = iframeDocument.F;
                while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
                return createDict();
            };

            module.exports = Object.create || function create(O, Properties){
                    var result;
                    if(O !== null){
                        Empty[PROTOTYPE] = anObject(O);
                        result = new Empty;
                        Empty[PROTOTYPE] = null;
                        // add "__proto__" for Object.getPrototypeOf polyfill
                        result[IE_PROTO] = O;
                    } else result = createDict();
                    return Properties === undefined ? result : dPs(result, Properties);
                };


            /***/ }),
        /* 160 */
        /***/ (function(module, exports, __webpack_require__) {

            var dP       = __webpack_require__(146)
                , anObject = __webpack_require__(147)
                , getKeys  = __webpack_require__(161);

            module.exports = __webpack_require__(136) ? Object.defineProperties : function defineProperties(O, Properties){
                anObject(O);
                var keys   = getKeys(Properties)
                    , length = keys.length
                    , i = 0
                    , P;
                while(length > i)dP.f(O, P = keys[i++], Properties[P]);
                return O;
            };

            /***/ }),
        /* 161 */
        /***/ (function(module, exports, __webpack_require__) {

            // 19.1.2.14 / 15.2.3.14 Object.keys(O)
            var $keys       = __webpack_require__(162)
                , enumBugKeys = __webpack_require__(170);

            module.exports = Object.keys || function keys(O){
                    return $keys(O, enumBugKeys);
                };

            /***/ }),
        /* 162 */
        /***/ (function(module, exports, __webpack_require__) {

            var has          = __webpack_require__(134)
                , toIObject    = __webpack_require__(125)
                , arrayIndexOf = __webpack_require__(163)(false)
                , IE_PROTO     = __webpack_require__(167)('IE_PROTO');

            module.exports = function(object, names){
                var O      = toIObject(object)
                    , i      = 0
                    , result = []
                    , key;
                for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
                // Don't enum bug & hidden keys
                while(names.length > i)if(has(O, key = names[i++])){
                    ~arrayIndexOf(result, key) || result.push(key);
                }
                return result;
            };

            /***/ }),
        /* 163 */
        /***/ (function(module, exports, __webpack_require__) {

            // false -> Array#indexOf
            // true  -> Array#includes
            var toIObject = __webpack_require__(125)
                , toLength  = __webpack_require__(164)
                , toIndex   = __webpack_require__(166);
            module.exports = function(IS_INCLUDES){
                return function($this, el, fromIndex){
                    var O      = toIObject($this)
                        , length = toLength(O.length)
                        , index  = toIndex(fromIndex, length)
                        , value;
                    // Array#includes uses SameValueZero equality algorithm
                    if(IS_INCLUDES && el != el)while(length > index){
                        value = O[index++];
                        if(value != value)return true;
                        // Array#toIndex ignores holes, Array#includes - not
                    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
                        if(O[index] === el)return IS_INCLUDES || index || 0;
                    } return !IS_INCLUDES && -1;
                };
            };

            /***/ }),
        /* 164 */
        /***/ (function(module, exports, __webpack_require__) {

            // 7.1.15 ToLength
            var toInteger = __webpack_require__(165)
                , min       = Math.min;
            module.exports = function(it){
                return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
            };

            /***/ }),
        /* 165 */
        /***/ (function(module, exports) {

            // 7.1.4 ToInteger
            var ceil  = Math.ceil
                , floor = Math.floor;
            module.exports = function(it){
                return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
            };

            /***/ }),
        /* 166 */
        /***/ (function(module, exports, __webpack_require__) {

            var toInteger = __webpack_require__(165)
                , max       = Math.max
                , min       = Math.min;
            module.exports = function(index, length){
                index = toInteger(index);
                return index < 0 ? max(index + length, 0) : min(index, length);
            };

            /***/ }),
        /* 167 */
        /***/ (function(module, exports, __webpack_require__) {

            var shared = __webpack_require__(168)('keys')
                , uid    = __webpack_require__(169);
            module.exports = function(key){
                return shared[key] || (shared[key] = uid(key));
            };

            /***/ }),
        /* 168 */
        /***/ (function(module, exports, __webpack_require__) {

            var global = __webpack_require__(139)
                , SHARED = '__core-js_shared__'
                , store  = global[SHARED] || (global[SHARED] = {});
            module.exports = function(key){
                return store[key] || (store[key] = {});
            };

            /***/ }),
        /* 169 */
        /***/ (function(module, exports) {

            var id = 0
                , px = Math.random();
            module.exports = function(key){
                return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
            };

            /***/ }),
        /* 170 */
        /***/ (function(module, exports) {

            // IE 8- don't enum bug keys
            module.exports = (
                'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
            ).split(',');

            /***/ }),
        /* 171 */
        /***/ (function(module, exports, __webpack_require__) {

            module.exports = __webpack_require__(139).document && document.documentElement;

            /***/ }),
        /* 172 */
        /***/ (function(module, exports, __webpack_require__) {

            var def = __webpack_require__(146).f
                , has = __webpack_require__(134)
                , TAG = __webpack_require__(173)('toStringTag');

            module.exports = function(it, tag, stat){
                if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
            };

            /***/ }),
        /* 173 */
        /***/ (function(module, exports, __webpack_require__) {

            var store      = __webpack_require__(168)('wks')
                , uid        = __webpack_require__(169)
                , Symbol     = __webpack_require__(139).Symbol
                , USE_SYMBOL = typeof Symbol == 'function';

            var $exports = module.exports = function(name){
                return store[name] || (store[name] =
                        USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
            };

            $exports.store = store;

            /***/ }),
        /* 174 */
        /***/ (function(module, exports, __webpack_require__) {

            // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
            var has         = __webpack_require__(134)
                , toObject    = __webpack_require__(175)
                , IE_PROTO    = __webpack_require__(167)('IE_PROTO')
                , ObjectProto = Object.prototype;

            module.exports = Object.getPrototypeOf || function(O){
                    O = toObject(O);
                    if(has(O, IE_PROTO))return O[IE_PROTO];
                    if(typeof O.constructor == 'function' && O instanceof O.constructor){
                        return O.constructor.prototype;
                    } return O instanceof Object ? ObjectProto : null;
                };

            /***/ }),
        /* 175 */
        /***/ (function(module, exports, __webpack_require__) {

            // 7.1.13 ToObject(argument)
            var defined = __webpack_require__(128);
            module.exports = function(it){
                return Object(defined(it));
            };

            /***/ }),
        /* 176 */
        /***/ (function(module, exports, __webpack_require__) {

            'use strict';
            var $at  = __webpack_require__(177)(true);

            // 21.1.3.27 String.prototype[@@iterator]()
            __webpack_require__(155)(String, 'String', function(iterated){
                this._t = String(iterated); // target
                this._i = 0;                // next index
                // 21.1.5.2.1 %StringIteratorPrototype%.next()
            }, function(){
                var O     = this._t
                    , index = this._i
                    , point;
                if(index >= O.length)return {value: undefined, done: true};
                point = $at(O, index);
                this._i += point.length;
                return {value: point, done: false};
            });

            /***/ }),
        /* 177 */
        /***/ (function(module, exports, __webpack_require__) {

            var toInteger = __webpack_require__(165)
                , defined   = __webpack_require__(128);
            // true  -> String#at
            // false -> String#codePointAt
            module.exports = function(TO_STRING){
                return function(that, pos){
                    var s = String(defined(that))
                        , i = toInteger(pos)
                        , l = s.length
                        , a, b;
                    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
                    a = s.charCodeAt(i);
                    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
                        ? TO_STRING ? s.charAt(i) : a
                        : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
                };
            };

            /***/ }),
        /* 178 */
        /***/ (function(module, exports, __webpack_require__) {

            var anObject = __webpack_require__(147)
                , get      = __webpack_require__(179);
            module.exports = __webpack_require__(142).getIterator = function(it){
                var iterFn = get(it);
                if(typeof iterFn != 'function')throw TypeError(it + ' is not iterable!');
                return anObject(iterFn.call(it));
            };

            /***/ }),
        /* 179 */
        /***/ (function(module, exports, __webpack_require__) {

            var classof   = __webpack_require__(180)
                , ITERATOR  = __webpack_require__(173)('iterator')
                , Iterators = __webpack_require__(154);
            module.exports = __webpack_require__(142).getIteratorMethod = function(it){
                if(it != undefined)return it[ITERATOR]
                    || it['@@iterator']
                    || Iterators[classof(it)];
            };

            /***/ }),
        /* 180 */
        /***/ (function(module, exports, __webpack_require__) {

            // getting tag from 19.1.3.6 Object.prototype.toString()
            var cof = __webpack_require__(127)
                , TAG = __webpack_require__(173)('toStringTag')
                // ES3 wrong here
                , ARG = cof(function(){ return arguments; }()) == 'Arguments';

            // fallback for IE11 Script Access Denied error
            var tryGet = function(it, key){
                try {
                    return it[key];
                } catch(e){ /* empty */ }
            };

            module.exports = function(it){
                var O, T, B;
                return it === undefined ? 'Undefined' : it === null ? 'Null'
                    // @@toStringTag case
                    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
                    // builtinTag case
                    : ARG ? cof(O)
                    // ES3 arguments fallback
                    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
            };

            /***/ }),
        /* 181 */
        /***/ (function(module, exports, __webpack_require__) {

            module.exports = { "default": __webpack_require__(182), __esModule: true };

            /***/ }),
        /* 182 */
        /***/ (function(module, exports, __webpack_require__) {

            __webpack_require__(183);
            module.exports = __webpack_require__(142).Object.freeze;

            /***/ }),
        /* 183 */
        /***/ (function(module, exports, __webpack_require__) {

            // 19.1.2.5 Object.freeze(O)
            var isObject = __webpack_require__(133)
                , meta     = __webpack_require__(184).onFreeze;

            __webpack_require__(140)('freeze', function($freeze){
                return function freeze(it){
                    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
                };
            });

            /***/ }),
        /* 184 */
        /***/ (function(module, exports, __webpack_require__) {

            var META     = __webpack_require__(169)('meta')
                , isObject = __webpack_require__(133)
                , has      = __webpack_require__(134)
                , setDesc  = __webpack_require__(146).f
                , id       = 0;
            var isExtensible = Object.isExtensible || function(){
                    return true;
                };
            var FREEZE = !__webpack_require__(137)(function(){
                return isExtensible(Object.preventExtensions({}));
            });
            var setMeta = function(it){
                setDesc(it, META, {value: {
                    i: 'O' + ++id, // object ID
                    w: {}          // weak collections IDs
                }});
            };
            var fastKey = function(it, create){
                // return primitive with prefix
                if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
                if(!has(it, META)){
                    // can't set metadata to uncaught frozen object
                    if(!isExtensible(it))return 'F';
                    // not necessary to add metadata
                    if(!create)return 'E';
                    // add missing metadata
                    setMeta(it);
                    // return object ID
                } return it[META].i;
            };
            var getWeak = function(it, create){
                if(!has(it, META)){
                    // can't set metadata to uncaught frozen object
                    if(!isExtensible(it))return true;
                    // not necessary to add metadata
                    if(!create)return false;
                    // add missing metadata
                    setMeta(it);
                    // return hash weak collections IDs
                } return it[META].w;
            };
            // add metadata on freeze-family methods calling
            var onFreeze = function(it){
                if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
                return it;
            };
            var meta = module.exports = {
                KEY:      META,
                NEED:     false,
                fastKey:  fastKey,
                getWeak:  getWeak,
                onFreeze: onFreeze
            };

            /***/ }),
        /* 185 */
        /***/ (function(module, exports, __webpack_require__) {

            module.exports = { "default": __webpack_require__(186), __esModule: true };

            /***/ }),
        /* 186 */
        /***/ (function(module, exports, __webpack_require__) {

            __webpack_require__(187);
            module.exports = __webpack_require__(142).Object.keys;

            /***/ }),
        /* 187 */
        /***/ (function(module, exports, __webpack_require__) {

            // 19.1.2.14 Object.keys(O)
            var toObject = __webpack_require__(175)
                , $keys    = __webpack_require__(161);

            __webpack_require__(140)('keys', function(){
                return function keys(it){
                    return $keys(toObject(it));
                };
            });

            /***/ }),
        /* 188 */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            exports.__esModule = true;

            var _iterator = __webpack_require__(189);

            var _iterator2 = _interopRequireDefault(_iterator);

            var _symbol = __webpack_require__(192);

            var _symbol2 = _interopRequireDefault(_symbol);

            var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
                return typeof obj === "undefined" ? "undefined" : _typeof(obj);
            } : function (obj) {
                return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
            };

            /***/ }),
        /* 189 */
        /***/ (function(module, exports, __webpack_require__) {

            module.exports = { "default": __webpack_require__(190), __esModule: true };

            /***/ }),
        /* 190 */
        /***/ (function(module, exports, __webpack_require__) {

            __webpack_require__(176);
            __webpack_require__(150);
            module.exports = __webpack_require__(191).f('iterator');

            /***/ }),
        /* 191 */
        /***/ (function(module, exports, __webpack_require__) {

            exports.f = __webpack_require__(173);

            /***/ }),
        /* 192 */
        /***/ (function(module, exports, __webpack_require__) {

            module.exports = { "default": __webpack_require__(193), __esModule: true };

            /***/ }),
        /* 193 */
        /***/ (function(module, exports, __webpack_require__) {

            __webpack_require__(194);
            __webpack_require__(202);
            __webpack_require__(203);
            __webpack_require__(204);
            module.exports = __webpack_require__(142).Symbol;

            /***/ }),
        /* 194 */
        /***/ (function(module, exports, __webpack_require__) {

            'use strict';
            // ECMAScript 6 symbols shim
            var global         = __webpack_require__(139)
                , has            = __webpack_require__(134)
                , DESCRIPTORS    = __webpack_require__(136)
                , $export        = __webpack_require__(141)
                , redefine       = __webpack_require__(157)
                , META           = __webpack_require__(184).KEY
                , $fails         = __webpack_require__(137)
                , shared         = __webpack_require__(168)
                , setToStringTag = __webpack_require__(172)
                , uid            = __webpack_require__(169)
                , wks            = __webpack_require__(173)
                , wksExt         = __webpack_require__(191)
                , wksDefine      = __webpack_require__(195)
                , keyOf          = __webpack_require__(196)
                , enumKeys       = __webpack_require__(197)
                , isArray        = __webpack_require__(199)
                , anObject       = __webpack_require__(147)
                , toIObject      = __webpack_require__(125)
                , toPrimitive    = __webpack_require__(132)
                , createDesc     = __webpack_require__(131)
                , _create        = __webpack_require__(159)
                , gOPNExt        = __webpack_require__(200)
                , $GOPD          = __webpack_require__(129)
                , $DP            = __webpack_require__(146)
                , $keys          = __webpack_require__(161)
                , gOPD           = $GOPD.f
                , dP             = $DP.f
                , gOPN           = gOPNExt.f
                , $Symbol        = global.Symbol
                , $JSON          = global.JSON
                , _stringify     = $JSON && $JSON.stringify
                , PROTOTYPE      = 'prototype'
                , HIDDEN         = wks('_hidden')
                , TO_PRIMITIVE   = wks('toPrimitive')
                , isEnum         = {}.propertyIsEnumerable
                , SymbolRegistry = shared('symbol-registry')
                , AllSymbols     = shared('symbols')
                , OPSymbols      = shared('op-symbols')
                , ObjectProto    = Object[PROTOTYPE]
                , USE_NATIVE     = typeof $Symbol == 'function'
                , QObject        = global.QObject;
            // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
            var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

            // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
            var setSymbolDesc = DESCRIPTORS && $fails(function(){
                return _create(dP({}, 'a', {
                        get: function(){ return dP(this, 'a', {value: 7}).a; }
                    })).a != 7;
            }) ? function(it, key, D){
                var protoDesc = gOPD(ObjectProto, key);
                if(protoDesc)delete ObjectProto[key];
                dP(it, key, D);
                if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
            } : dP;

            var wrap = function(tag){
                var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
                sym._k = tag;
                return sym;
            };

            var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
                return typeof it == 'symbol';
            } : function(it){
                return it instanceof $Symbol;
            };

            var $defineProperty = function defineProperty(it, key, D){
                if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
                anObject(it);
                key = toPrimitive(key, true);
                anObject(D);
                if(has(AllSymbols, key)){
                    if(!D.enumerable){
                        if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
                        it[HIDDEN][key] = true;
                    } else {
                        if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
                        D = _create(D, {enumerable: createDesc(0, false)});
                    } return setSymbolDesc(it, key, D);
                } return dP(it, key, D);
            };
            var $defineProperties = function defineProperties(it, P){
                anObject(it);
                var keys = enumKeys(P = toIObject(P))
                    , i    = 0
                    , l = keys.length
                    , key;
                while(l > i)$defineProperty(it, key = keys[i++], P[key]);
                return it;
            };
            var $create = function create(it, P){
                return P === undefined ? _create(it) : $defineProperties(_create(it), P);
            };
            var $propertyIsEnumerable = function propertyIsEnumerable(key){
                var E = isEnum.call(this, key = toPrimitive(key, true));
                if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
                return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
            };
            var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
                it  = toIObject(it);
                key = toPrimitive(key, true);
                if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
                var D = gOPD(it, key);
                if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
                return D;
            };
            var $getOwnPropertyNames = function getOwnPropertyNames(it){
                var names  = gOPN(toIObject(it))
                    , result = []
                    , i      = 0
                    , key;
                while(names.length > i){
                    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
                } return result;
            };
            var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
                var IS_OP  = it === ObjectProto
                    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
                    , result = []
                    , i      = 0
                    , key;
                while(names.length > i){
                    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
                } return result;
            };

            // 19.4.1.1 Symbol([description])
            if(!USE_NATIVE){
                $Symbol = function Symbol(){
                    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
                    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
                    var $set = function(value){
                        if(this === ObjectProto)$set.call(OPSymbols, value);
                        if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
                        setSymbolDesc(this, tag, createDesc(1, value));
                    };
                    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
                    return wrap(tag);
                };
                redefine($Symbol[PROTOTYPE], 'toString', function toString(){
                    return this._k;
                });

                $GOPD.f = $getOwnPropertyDescriptor;
                $DP.f   = $defineProperty;
                __webpack_require__(201).f = gOPNExt.f = $getOwnPropertyNames;
                __webpack_require__(130).f  = $propertyIsEnumerable;
                __webpack_require__(198).f = $getOwnPropertySymbols;

                if(DESCRIPTORS && !__webpack_require__(156)){
                    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
                }

                wksExt.f = function(name){
                    return wrap(wks(name));
                }
            }

            $export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});

            for(var symbols = (
                // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
                'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
            ).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);

            for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);

            $export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
                // 19.4.2.1 Symbol.for(key)
                'for': function(key){
                    return has(SymbolRegistry, key += '')
                        ? SymbolRegistry[key]
                        : SymbolRegistry[key] = $Symbol(key);
                },
                // 19.4.2.5 Symbol.keyFor(sym)
                keyFor: function keyFor(key){
                    if(isSymbol(key))return keyOf(SymbolRegistry, key);
                    throw TypeError(key + ' is not a symbol!');
                },
                useSetter: function(){ setter = true; },
                useSimple: function(){ setter = false; }
            });

            $export($export.S + $export.F * !USE_NATIVE, 'Object', {
                // 19.1.2.2 Object.create(O [, Properties])
                create: $create,
                // 19.1.2.4 Object.defineProperty(O, P, Attributes)
                defineProperty: $defineProperty,
                // 19.1.2.3 Object.defineProperties(O, Properties)
                defineProperties: $defineProperties,
                // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
                getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
                // 19.1.2.7 Object.getOwnPropertyNames(O)
                getOwnPropertyNames: $getOwnPropertyNames,
                // 19.1.2.8 Object.getOwnPropertySymbols(O)
                getOwnPropertySymbols: $getOwnPropertySymbols
            });

            // 24.3.2 JSON.stringify(value [, replacer [, space]])
            $JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
                    var S = $Symbol();
                    // MS Edge converts symbol values to JSON as {}
                    // WebKit converts symbol values to JSON as null
                    // V8 throws on boxed symbols
                    return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
                })), 'JSON', {
                stringify: function stringify(it){
                    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
                    var args = [it]
                        , i    = 1
                        , replacer, $replacer;
                    while(arguments.length > i)args.push(arguments[i++]);
                    replacer = args[1];
                    if(typeof replacer == 'function')$replacer = replacer;
                    if($replacer || !isArray(replacer))replacer = function(key, value){
                        if($replacer)value = $replacer.call(this, key, value);
                        if(!isSymbol(value))return value;
                    };
                    args[1] = replacer;
                    return _stringify.apply($JSON, args);
                }
            });

            // 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
            $Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(145)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
            // 19.4.3.5 Symbol.prototype[@@toStringTag]
            setToStringTag($Symbol, 'Symbol');
            // 20.2.1.9 Math[@@toStringTag]
            setToStringTag(Math, 'Math', true);
            // 24.3.3 JSON[@@toStringTag]
            setToStringTag(global.JSON, 'JSON', true);

            /***/ }),
        /* 195 */
        /***/ (function(module, exports, __webpack_require__) {

            var global         = __webpack_require__(139)
                , core           = __webpack_require__(142)
                , LIBRARY        = __webpack_require__(156)
                , wksExt         = __webpack_require__(191)
                , defineProperty = __webpack_require__(146).f;
            module.exports = function(name){
                var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
                if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
            };

            /***/ }),
        /* 196 */
        /***/ (function(module, exports, __webpack_require__) {

            var getKeys   = __webpack_require__(161)
                , toIObject = __webpack_require__(125);
            module.exports = function(object, el){
                var O      = toIObject(object)
                    , keys   = getKeys(O)
                    , length = keys.length
                    , index  = 0
                    , key;
                while(length > index)if(O[key = keys[index++]] === el)return key;
            };

            /***/ }),
        /* 197 */
        /***/ (function(module, exports, __webpack_require__) {

            // all enumerable object keys, includes symbols
            var getKeys = __webpack_require__(161)
                , gOPS    = __webpack_require__(198)
                , pIE     = __webpack_require__(130);
            module.exports = function(it){
                var result     = getKeys(it)
                    , getSymbols = gOPS.f;
                if(getSymbols){
                    var symbols = getSymbols(it)
                        , isEnum  = pIE.f
                        , i       = 0
                        , key;
                    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
                } return result;
            };

            /***/ }),
        /* 198 */
        /***/ (function(module, exports) {

            exports.f = Object.getOwnPropertySymbols;

            /***/ }),
        /* 199 */
        /***/ (function(module, exports, __webpack_require__) {

            // 7.2.2 IsArray(argument)
            var cof = __webpack_require__(127);
            module.exports = Array.isArray || function isArray(arg){
                    return cof(arg) == 'Array';
                };

            /***/ }),
        /* 200 */
        /***/ (function(module, exports, __webpack_require__) {

            // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
            var toIObject = __webpack_require__(125)
                , gOPN      = __webpack_require__(201).f
                , toString  = {}.toString;

            var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
                ? Object.getOwnPropertyNames(window) : [];

            var getWindowNames = function(it){
                try {
                    return gOPN(it);
                } catch(e){
                    return windowNames.slice();
                }
            };

            module.exports.f = function getOwnPropertyNames(it){
                return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
            };


            /***/ }),
        /* 201 */
        /***/ (function(module, exports, __webpack_require__) {

            // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
            var $keys      = __webpack_require__(162)
                , hiddenKeys = __webpack_require__(170).concat('length', 'prototype');

            exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
                    return $keys(O, hiddenKeys);
                };

            /***/ }),
        /* 202 */
        /***/ (function(module, exports) {



            /***/ }),
        /* 203 */
        /***/ (function(module, exports, __webpack_require__) {

            __webpack_require__(195)('asyncIterator');

            /***/ }),
        /* 204 */
        /***/ (function(module, exports, __webpack_require__) {

            __webpack_require__(195)('observable');

            /***/ }),
        /* 205 */
        /***/ (function(module, exports, __webpack_require__) {

            module.exports = { "default": __webpack_require__(206), __esModule: true };

            /***/ }),
        /* 206 */
        /***/ (function(module, exports, __webpack_require__) {

            __webpack_require__(207);
            var $Object = __webpack_require__(142).Object;
            module.exports = function defineProperty(it, key, desc){
                return $Object.defineProperty(it, key, desc);
            };

            /***/ }),
        /* 207 */
        /***/ (function(module, exports, __webpack_require__) {

            var $export = __webpack_require__(141);
            // 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
            $export($export.S + $export.F * !__webpack_require__(136), 'Object', {defineProperty: __webpack_require__(146).f});

            /***/ }),
        /* 208 */
        /***/ (function(module, exports) {

            "use strict";

            exports.__esModule = true;

            exports.default = function (instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            };

            /***/ }),
        /* 209 */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            exports.__esModule = true;

            var _defineProperty = __webpack_require__(205);

            var _defineProperty2 = _interopRequireDefault(_defineProperty);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            exports.default = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        (0, _defineProperty2.default)(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            /***/ }),
        /* 210 */
        /***/ (function(module, exports, __webpack_require__) {

            module.exports = { "default": __webpack_require__(211), __esModule: true };

            /***/ }),
        /* 211 */
        /***/ (function(module, exports, __webpack_require__) {

            __webpack_require__(202);
            __webpack_require__(176);
            __webpack_require__(150);
            __webpack_require__(212);
            __webpack_require__(224);
            module.exports = __webpack_require__(142).Map;

            /***/ }),
        /* 212 */
        /***/ (function(module, exports, __webpack_require__) {

            'use strict';
            var strong = __webpack_require__(213);

            // 23.1 Map Objects
            module.exports = __webpack_require__(220)('Map', function(get){
                return function Map(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
            }, {
                // 23.1.3.6 Map.prototype.get(key)
                get: function get(key){
                    var entry = strong.getEntry(this, key);
                    return entry && entry.v;
                },
                // 23.1.3.9 Map.prototype.set(key, value)
                set: function set(key, value){
                    return strong.def(this, key === 0 ? 0 : key, value);
                }
            }, strong, true);

            /***/ }),
        /* 213 */
        /***/ (function(module, exports, __webpack_require__) {

            'use strict';
            var dP          = __webpack_require__(146).f
                , create      = __webpack_require__(159)
                , redefineAll = __webpack_require__(214)
                , ctx         = __webpack_require__(143)
                , anInstance  = __webpack_require__(215)
                , defined     = __webpack_require__(128)
                , forOf       = __webpack_require__(216)
                , $iterDefine = __webpack_require__(155)
                , step        = __webpack_require__(153)
                , setSpecies  = __webpack_require__(219)
                , DESCRIPTORS = __webpack_require__(136)
                , fastKey     = __webpack_require__(184).fastKey
                , SIZE        = DESCRIPTORS ? '_s' : 'size';

            var getEntry = function(that, key){
                // fast case
                var index = fastKey(key), entry;
                if(index !== 'F')return that._i[index];
                // frozen object case
                for(entry = that._f; entry; entry = entry.n){
                    if(entry.k == key)return entry;
                }
            };

            module.exports = {
                getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
                    var C = wrapper(function(that, iterable){
                        anInstance(that, C, NAME, '_i');
                        that._i = create(null); // index
                        that._f = undefined;    // first entry
                        that._l = undefined;    // last entry
                        that[SIZE] = 0;         // size
                        if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
                    });
                    redefineAll(C.prototype, {
                        // 23.1.3.1 Map.prototype.clear()
                        // 23.2.3.2 Set.prototype.clear()
                        clear: function clear(){
                            for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){
                                entry.r = true;
                                if(entry.p)entry.p = entry.p.n = undefined;
                                delete data[entry.i];
                            }
                            that._f = that._l = undefined;
                            that[SIZE] = 0;
                        },
                        // 23.1.3.3 Map.prototype.delete(key)
                        // 23.2.3.4 Set.prototype.delete(value)
                        'delete': function(key){
                            var that  = this
                                , entry = getEntry(that, key);
                            if(entry){
                                var next = entry.n
                                    , prev = entry.p;
                                delete that._i[entry.i];
                                entry.r = true;
                                if(prev)prev.n = next;
                                if(next)next.p = prev;
                                if(that._f == entry)that._f = next;
                                if(that._l == entry)that._l = prev;
                                that[SIZE]--;
                            } return !!entry;
                        },
                        // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
                        // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
                        forEach: function forEach(callbackfn /*, that = undefined */){
                            anInstance(this, C, 'forEach');
                            var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)
                                , entry;
                            while(entry = entry ? entry.n : this._f){
                                f(entry.v, entry.k, this);
                                // revert to the last existing entry
                                while(entry && entry.r)entry = entry.p;
                            }
                        },
                        // 23.1.3.7 Map.prototype.has(key)
                        // 23.2.3.7 Set.prototype.has(value)
                        has: function has(key){
                            return !!getEntry(this, key);
                        }
                    });
                    if(DESCRIPTORS)dP(C.prototype, 'size', {
                        get: function(){
                            return defined(this[SIZE]);
                        }
                    });
                    return C;
                },
                def: function(that, key, value){
                    var entry = getEntry(that, key)
                        , prev, index;
                    // change existing entry
                    if(entry){
                        entry.v = value;
                        // create new entry
                    } else {
                        that._l = entry = {
                            i: index = fastKey(key, true), // <- index
                            k: key,                        // <- key
                            v: value,                      // <- value
                            p: prev = that._l,             // <- previous entry
                            n: undefined,                  // <- next entry
                            r: false                       // <- removed
                        };
                        if(!that._f)that._f = entry;
                        if(prev)prev.n = entry;
                        that[SIZE]++;
                        // add to index
                        if(index !== 'F')that._i[index] = entry;
                    } return that;
                },
                getEntry: getEntry,
                setStrong: function(C, NAME, IS_MAP){
                    // add .keys, .values, .entries, [@@iterator]
                    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
                    $iterDefine(C, NAME, function(iterated, kind){
                        this._t = iterated;  // target
                        this._k = kind;      // kind
                        this._l = undefined; // previous
                    }, function(){
                        var that  = this
                            , kind  = that._k
                            , entry = that._l;
                        // revert to the last existing entry
                        while(entry && entry.r)entry = entry.p;
                        // get next entry
                        if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){
                            // or finish the iteration
                            that._t = undefined;
                            return step(1);
                        }
                        // return step by kind
                        if(kind == 'keys'  )return step(0, entry.k);
                        if(kind == 'values')return step(0, entry.v);
                        return step(0, [entry.k, entry.v]);
                    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);

                    // add [@@species], 23.1.2.2, 23.2.2.2
                    setSpecies(NAME);
                }
            };

            /***/ }),
        /* 214 */
        /***/ (function(module, exports, __webpack_require__) {

            var hide = __webpack_require__(145);
            module.exports = function(target, src, safe){
                for(var key in src){
                    if(safe && target[key])target[key] = src[key];
                    else hide(target, key, src[key]);
                } return target;
            };

            /***/ }),
        /* 215 */
        /***/ (function(module, exports) {

            module.exports = function(it, Constructor, name, forbiddenField){
                if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
                    throw TypeError(name + ': incorrect invocation!');
                } return it;
            };

            /***/ }),
        /* 216 */
        /***/ (function(module, exports, __webpack_require__) {

            var ctx         = __webpack_require__(143)
                , call        = __webpack_require__(217)
                , isArrayIter = __webpack_require__(218)
                , anObject    = __webpack_require__(147)
                , toLength    = __webpack_require__(164)
                , getIterFn   = __webpack_require__(179)
                , BREAK       = {}
                , RETURN      = {};
            var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
                var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
                    , f      = ctx(fn, that, entries ? 2 : 1)
                    , index  = 0
                    , length, step, iterator, result;
                if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
                // fast case for arrays with default iterator
                if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
                    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
                    if(result === BREAK || result === RETURN)return result;
                } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
                    result = call(iterator, f, step.value, entries);
                    if(result === BREAK || result === RETURN)return result;
                }
            };
            exports.BREAK  = BREAK;
            exports.RETURN = RETURN;

            /***/ }),
        /* 217 */
        /***/ (function(module, exports, __webpack_require__) {

            // call something on iterator step with safe closing on error
            var anObject = __webpack_require__(147);
            module.exports = function(iterator, fn, value, entries){
                try {
                    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
                    // 7.4.6 IteratorClose(iterator, completion)
                } catch(e){
                    var ret = iterator['return'];
                    if(ret !== undefined)anObject(ret.call(iterator));
                    throw e;
                }
            };

            /***/ }),
        /* 218 */
        /***/ (function(module, exports, __webpack_require__) {

            // check on default Array iterator
            var Iterators  = __webpack_require__(154)
                , ITERATOR   = __webpack_require__(173)('iterator')
                , ArrayProto = Array.prototype;

            module.exports = function(it){
                return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
            };

            /***/ }),
        /* 219 */
        /***/ (function(module, exports, __webpack_require__) {

            'use strict';
            var global      = __webpack_require__(139)
                , core        = __webpack_require__(142)
                , dP          = __webpack_require__(146)
                , DESCRIPTORS = __webpack_require__(136)
                , SPECIES     = __webpack_require__(173)('species');

            module.exports = function(KEY){
                var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
                if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
                    configurable: true,
                    get: function(){ return this; }
                });
            };

            /***/ }),
        /* 220 */
        /***/ (function(module, exports, __webpack_require__) {

            'use strict';
            var global         = __webpack_require__(139)
                , $export        = __webpack_require__(141)
                , meta           = __webpack_require__(184)
                , fails          = __webpack_require__(137)
                , hide           = __webpack_require__(145)
                , redefineAll    = __webpack_require__(214)
                , forOf          = __webpack_require__(216)
                , anInstance     = __webpack_require__(215)
                , isObject       = __webpack_require__(133)
                , setToStringTag = __webpack_require__(172)
                , dP             = __webpack_require__(146).f
                , each           = __webpack_require__(221)(0)
                , DESCRIPTORS    = __webpack_require__(136);

            module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){
                var Base  = global[NAME]
                    , C     = Base
                    , ADDER = IS_MAP ? 'set' : 'add'
                    , proto = C && C.prototype
                    , O     = {};
                if(!DESCRIPTORS || typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){
                        new C().entries().next();
                    }))){
                    // create collection constructor
                    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
                    redefineAll(C.prototype, methods);
                    meta.NEED = true;
                } else {
                    C = wrapper(function(target, iterable){
                        anInstance(target, C, NAME, '_c');
                        target._c = new Base;
                        if(iterable != undefined)forOf(iterable, IS_MAP, target[ADDER], target);
                    });
                    each('add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON'.split(','),function(KEY){
                        var IS_ADDER = KEY == 'add' || KEY == 'set';
                        if(KEY in proto && !(IS_WEAK && KEY == 'clear'))hide(C.prototype, KEY, function(a, b){
                            anInstance(this, C, KEY);
                            if(!IS_ADDER && IS_WEAK && !isObject(a))return KEY == 'get' ? undefined : false;
                            var result = this._c[KEY](a === 0 ? 0 : a, b);
                            return IS_ADDER ? this : result;
                        });
                    });
                    if('size' in proto)dP(C.prototype, 'size', {
                        get: function(){
                            return this._c.size;
                        }
                    });
                }

                setToStringTag(C, NAME);

                O[NAME] = C;
                $export($export.G + $export.W + $export.F, O);

                if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);

                return C;
            };

            /***/ }),
        /* 221 */
        /***/ (function(module, exports, __webpack_require__) {

            // 0 -> Array#forEach
            // 1 -> Array#map
            // 2 -> Array#filter
            // 3 -> Array#some
            // 4 -> Array#every
            // 5 -> Array#find
            // 6 -> Array#findIndex
            var ctx      = __webpack_require__(143)
                , IObject  = __webpack_require__(126)
                , toObject = __webpack_require__(175)
                , toLength = __webpack_require__(164)
                , asc      = __webpack_require__(222);
            module.exports = function(TYPE, $create){
                var IS_MAP        = TYPE == 1
                    , IS_FILTER     = TYPE == 2
                    , IS_SOME       = TYPE == 3
                    , IS_EVERY      = TYPE == 4
                    , IS_FIND_INDEX = TYPE == 6
                    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX
                    , create        = $create || asc;
                return function($this, callbackfn, that){
                    var O      = toObject($this)
                        , self   = IObject(O)
                        , f      = ctx(callbackfn, that, 3)
                        , length = toLength(self.length)
                        , index  = 0
                        , result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined
                        , val, res;
                    for(;length > index; index++)if(NO_HOLES || index in self){
                        val = self[index];
                        res = f(val, index, O);
                        if(TYPE){
                            if(IS_MAP)result[index] = res;            // map
                            else if(res)switch(TYPE){
                                case 3: return true;                    // some
                                case 5: return val;                     // find
                                case 6: return index;                   // findIndex
                                case 2: result.push(val);               // filter
                            } else if(IS_EVERY)return false;          // every
                        }
                    }
                    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
                };
            };

            /***/ }),
        /* 222 */
        /***/ (function(module, exports, __webpack_require__) {

            // 9.4.2.3 ArraySpeciesCreate(originalArray, length)
            var speciesConstructor = __webpack_require__(223);

            module.exports = function(original, length){
                return new (speciesConstructor(original))(length);
            };

            /***/ }),
        /* 223 */
        /***/ (function(module, exports, __webpack_require__) {

            var isObject = __webpack_require__(133)
                , isArray  = __webpack_require__(199)
                , SPECIES  = __webpack_require__(173)('species');

            module.exports = function(original){
                var C;
                if(isArray(original)){
                    C = original.constructor;
                    // cross-realm fallback
                    if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;
                    if(isObject(C)){
                        C = C[SPECIES];
                        if(C === null)C = undefined;
                    }
                } return C === undefined ? Array : C;
            };

            /***/ }),
        /* 224 */
        /***/ (function(module, exports, __webpack_require__) {

            // https://github.com/DavidBruant/Map-Set.prototype.toJSON
            var $export  = __webpack_require__(141);

            $export($export.P + $export.R, 'Map', {toJSON: __webpack_require__(225)('Map')});

            /***/ }),
        /* 225 */
        /***/ (function(module, exports, __webpack_require__) {

            // https://github.com/DavidBruant/Map-Set.prototype.toJSON
            var classof = __webpack_require__(180)
                , from    = __webpack_require__(226);
            module.exports = function(NAME){
                return function toJSON(){
                    if(classof(this) != NAME)throw TypeError(NAME + "#toJSON isn't generic");
                    return from(this);
                };
            };

            /***/ }),
        /* 226 */
        /***/ (function(module, exports, __webpack_require__) {

            var forOf = __webpack_require__(216);

            module.exports = function(iter, ITERATOR){
                var result = [];
                forOf(iter, false, result.push, result, ITERATOR);
                return result;
            };


            /***/ }),
        /* 227 */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            exports.__esModule = true;

            var _typeof2 = __webpack_require__(188);

            var _typeof3 = _interopRequireDefault(_typeof2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            exports.default = function (self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }

                return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
            };

            /***/ }),
        /* 228 */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            exports.__esModule = true;

            var _setPrototypeOf = __webpack_require__(229);

            var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

            var _create = __webpack_require__(233);

            var _create2 = _interopRequireDefault(_create);

            var _typeof2 = __webpack_require__(188);

            var _typeof3 = _interopRequireDefault(_typeof2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            exports.default = function (subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
                }

                subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
            };

            /***/ }),
        /* 229 */
        /***/ (function(module, exports, __webpack_require__) {

            module.exports = { "default": __webpack_require__(230), __esModule: true };

            /***/ }),
        /* 230 */
        /***/ (function(module, exports, __webpack_require__) {

            __webpack_require__(231);
            module.exports = __webpack_require__(142).Object.setPrototypeOf;

            /***/ }),
        /* 231 */
        /***/ (function(module, exports, __webpack_require__) {

            // 19.1.3.19 Object.setPrototypeOf(O, proto)
            var $export = __webpack_require__(141);
            $export($export.S, 'Object', {setPrototypeOf: __webpack_require__(232).set});

            /***/ }),
        /* 232 */
        /***/ (function(module, exports, __webpack_require__) {

            // Works with __proto__ only. Old v8 can't work with null proto objects.
            /* eslint-disable no-proto */
            var isObject = __webpack_require__(133)
                , anObject = __webpack_require__(147);
            var check = function(O, proto){
                anObject(O);
                if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
            };
            module.exports = {
                set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
                    function(test, buggy, set){
                        try {
                            set = __webpack_require__(143)(Function.call, __webpack_require__(129).f(Object.prototype, '__proto__').set, 2);
                            set(test, []);
                            buggy = !(test instanceof Array);
                        } catch(e){ buggy = true; }
                        return function setPrototypeOf(O, proto){
                            check(O, proto);
                            if(buggy)O.__proto__ = proto;
                            else set(O, proto);
                            return O;
                        };
                    }({}, false) : undefined),
                check: check
            };

            /***/ }),
        /* 233 */
        /***/ (function(module, exports, __webpack_require__) {

            module.exports = { "default": __webpack_require__(234), __esModule: true };

            /***/ }),
        /* 234 */
        /***/ (function(module, exports, __webpack_require__) {

            __webpack_require__(235);
            var $Object = __webpack_require__(142).Object;
            module.exports = function create(P, D){
                return $Object.create(P, D);
            };

            /***/ }),
        /* 235 */
        /***/ (function(module, exports, __webpack_require__) {

            var $export = __webpack_require__(141)
            // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
            $export($export.S, 'Object', {create: __webpack_require__(159)});

            /***/ }),
        /* 236 */
        /***/ (function(module, exports, __webpack_require__) {

            module.exports = { "default": __webpack_require__(237), __esModule: true };

            /***/ }),
        /* 237 */
        /***/ (function(module, exports, __webpack_require__) {

            __webpack_require__(238);
            var $Object = __webpack_require__(142).Object;
            module.exports = function defineProperties(T, D){
                return $Object.defineProperties(T, D);
            };

            /***/ }),
        /* 238 */
        /***/ (function(module, exports, __webpack_require__) {

            var $export = __webpack_require__(141);
            // 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
            $export($export.S + $export.F * !__webpack_require__(136), 'Object', {defineProperties: __webpack_require__(160)});

            /***/ }),
        /* 239 */
        /***/ (function(module, exports, __webpack_require__) {

            var pSlice = Array.prototype.slice;
            var objectKeys = __webpack_require__(240);
            var isArguments = __webpack_require__(241);

            var deepEqual = module.exports = function (actual, expected, opts) {
                if (!opts) opts = {};
                // 7.1. All identical values are equivalent, as determined by ===.
                if (actual === expected) {
                    return true;

                } else if (actual instanceof Date && expected instanceof Date) {
                    return actual.getTime() === expected.getTime();

                    // 7.3. Other pairs that do not both pass typeof value == 'object',
                    // equivalence is determined by ==.
                } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
                    return opts.strict ? actual === expected : actual == expected;

                    // 7.4. For all other Object pairs, including Array objects, equivalence is
                    // determined by having the same number of owned properties (as verified
                    // with Object.prototype.hasOwnProperty.call), the same set of keys
                    // (although not necessarily the same order), equivalent values for every
                    // corresponding key, and an identical 'prototype' property. Note: this
                    // accounts for both named and indexed properties on Arrays.
                } else {
                    return objEquiv(actual, expected, opts);
                }
            }

            function isUndefinedOrNull(value) {
                return value === null || value === undefined;
            }

            function isBuffer (x) {
                if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
                if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
                    return false;
                }
                if (x.length > 0 && typeof x[0] !== 'number') return false;
                return true;
            }

            function objEquiv(a, b, opts) {
                var i, key;
                if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
                    return false;
                // an identical 'prototype' property.
                if (a.prototype !== b.prototype) return false;
                //~~~I've managed to break Object.keys through screwy arguments passing.
                //   Converting to array solves the problem.
                if (isArguments(a)) {
                    if (!isArguments(b)) {
                        return false;
                    }
                    a = pSlice.call(a);
                    b = pSlice.call(b);
                    return deepEqual(a, b, opts);
                }
                if (isBuffer(a)) {
                    if (!isBuffer(b)) {
                        return false;
                    }
                    if (a.length !== b.length) return false;
                    for (i = 0; i < a.length; i++) {
                        if (a[i] !== b[i]) return false;
                    }
                    return true;
                }
                try {
                    var ka = objectKeys(a),
                        kb = objectKeys(b);
                } catch (e) {//happens when one is a string literal and the other isn't
                    return false;
                }
                // having the same number of owned properties (keys incorporates
                // hasOwnProperty)
                if (ka.length != kb.length)
                    return false;
                //the same set of keys (although not necessarily the same order),
                ka.sort();
                kb.sort();
                //~~~cheap key test
                for (i = ka.length - 1; i >= 0; i--) {
                    if (ka[i] != kb[i])
                        return false;
                }
                //equivalent values for every corresponding key, and
                //~~~possibly expensive deep test
                for (i = ka.length - 1; i >= 0; i--) {
                    key = ka[i];
                    if (!deepEqual(a[key], b[key], opts)) return false;
                }
                return typeof a === typeof b;
            }


            /***/ }),
        /* 240 */
        /***/ (function(module, exports) {

            exports = module.exports = typeof Object.keys === 'function'
                ? Object.keys : shim;

            exports.shim = shim;
            function shim (obj) {
                var keys = [];
                for (var key in obj) keys.push(key);
                return keys;
            }


            /***/ }),
        /* 241 */
        /***/ (function(module, exports) {

            var supportsArgumentsClass = (function(){
                    return Object.prototype.toString.call(arguments)
                })() == '[object Arguments]';

            exports = module.exports = supportsArgumentsClass ? supported : unsupported;

            exports.supported = supported;
            function supported(object) {
                return Object.prototype.toString.call(object) == '[object Arguments]';
            };

            exports.unsupported = unsupported;
            function unsupported(object){
                return object &&
                    typeof object == 'object' &&
                    typeof object.length == 'number' &&
                    Object.prototype.hasOwnProperty.call(object, 'callee') &&
                    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
                    false;
            };


            /***/ }),
        /* 242 */
        /***/ (function(module, exports, __webpack_require__) {

            module.exports = { "default": __webpack_require__(243), __esModule: true };

            /***/ }),
        /* 243 */
        /***/ (function(module, exports, __webpack_require__) {

            __webpack_require__(244);
            module.exports = __webpack_require__(142).Object.assign;

            /***/ }),
        /* 244 */
        /***/ (function(module, exports, __webpack_require__) {

            // 19.1.3.1 Object.assign(target, source)
            var $export = __webpack_require__(141);

            $export($export.S + $export.F, 'Object', {assign: __webpack_require__(245)});

            /***/ }),
        /* 245 */
        /***/ (function(module, exports, __webpack_require__) {

            'use strict';
            // 19.1.2.1 Object.assign(target, source, ...)
            var getKeys  = __webpack_require__(161)
                , gOPS     = __webpack_require__(198)
                , pIE      = __webpack_require__(130)
                , toObject = __webpack_require__(175)
                , IObject  = __webpack_require__(126)
                , $assign  = Object.assign;

            // should work with symbols and should have deterministic property order (V8 bug)
            module.exports = !$assign || __webpack_require__(137)(function(){
                var A = {}
                    , B = {}
                    , S = Symbol()
                    , K = 'abcdefghijklmnopqrst';
                A[S] = 7;
                K.split('').forEach(function(k){ B[k] = k; });
                return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
            }) ? function assign(target, source){ // eslint-disable-line no-unused-vars
                var T     = toObject(target)
                    , aLen  = arguments.length
                    , index = 1
                    , getSymbols = gOPS.f
                    , isEnum     = pIE.f;
                while(aLen > index){
                    var S      = IObject(arguments[index++])
                        , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
                        , length = keys.length
                        , j      = 0
                        , key;
                    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
                } return T;
            } : $assign;

            /***/ }),
        /* 246 */
        /***/ (function(module, exports, __webpack_require__) {

            module.exports = { "default": __webpack_require__(247), __esModule: true };

            /***/ }),
        /* 247 */
        /***/ (function(module, exports, __webpack_require__) {

            __webpack_require__(248);
            module.exports = __webpack_require__(142).String.fromCodePoint;

            /***/ }),
        /* 248 */
        /***/ (function(module, exports, __webpack_require__) {

            var $export        = __webpack_require__(141)
                , toIndex        = __webpack_require__(166)
                , fromCharCode   = String.fromCharCode
                , $fromCodePoint = String.fromCodePoint;

            // length should be 1, old FF problem
            $export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
                // 21.1.2.2 String.fromCodePoint(...codePoints)
                fromCodePoint: function fromCodePoint(x){ // eslint-disable-line no-unused-vars
                    var res  = []
                        , aLen = arguments.length
                        , i    = 0
                        , code;
                    while(aLen > i){
                        code = +arguments[i++];
                        if(toIndex(code, 0x10ffff) !== code)throw RangeError(code + ' is not a valid code point');
                        res.push(code < 0x10000
                            ? fromCharCode(code)
                            : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
                        );
                    } return res.join('');
                }
            });

            /***/ }),
        /* 249 */
        /***/ (function(module, exports, __webpack_require__) {

            module.exports = { "default": __webpack_require__(250), __esModule: true };

            /***/ }),
        /* 250 */
        /***/ (function(module, exports, __webpack_require__) {

            __webpack_require__(176);
            __webpack_require__(251);
            module.exports = __webpack_require__(142).Array.from;

            /***/ }),
        /* 251 */
        /***/ (function(module, exports, __webpack_require__) {

            'use strict';
            var ctx            = __webpack_require__(143)
                , $export        = __webpack_require__(141)
                , toObject       = __webpack_require__(175)
                , call           = __webpack_require__(217)
                , isArrayIter    = __webpack_require__(218)
                , toLength       = __webpack_require__(164)
                , createProperty = __webpack_require__(252)
                , getIterFn      = __webpack_require__(179);

            $export($export.S + $export.F * !__webpack_require__(253)(function(iter){ Array.from(iter); }), 'Array', {
                // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
                from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
                    var O       = toObject(arrayLike)
                        , C       = typeof this == 'function' ? this : Array
                        , aLen    = arguments.length
                        , mapfn   = aLen > 1 ? arguments[1] : undefined
                        , mapping = mapfn !== undefined
                        , index   = 0
                        , iterFn  = getIterFn(O)
                        , length, result, step, iterator;
                    if(mapping)mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
                    // if object isn't iterable or it's array with default iterator - use simple case
                    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
                        for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){
                            createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
                        }
                    } else {
                        length = toLength(O.length);
                        for(result = new C(length); length > index; index++){
                            createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
                        }
                    }
                    result.length = index;
                    return result;
                }
            });


            /***/ }),
        /* 252 */
        /***/ (function(module, exports, __webpack_require__) {

            'use strict';
            var $defineProperty = __webpack_require__(146)
                , createDesc      = __webpack_require__(131);

            module.exports = function(object, index, value){
                if(index in object)$defineProperty.f(object, index, createDesc(0, value));
                else object[index] = value;
            };

            /***/ }),
        /* 253 */
        /***/ (function(module, exports, __webpack_require__) {

            var ITERATOR     = __webpack_require__(173)('iterator')
                , SAFE_CLOSING = false;

            try {
                var riter = [7][ITERATOR]();
                riter['return'] = function(){ SAFE_CLOSING = true; };
                Array.from(riter, function(){ throw 2; });
            } catch(e){ /* empty */ }

            module.exports = function(exec, skipClosing){
                if(!skipClosing && !SAFE_CLOSING)return false;
                var safe = false;
                try {
                    var arr  = [7]
                        , iter = arr[ITERATOR]();
                    iter.next = function(){ return {done: safe = true}; };
                    arr[ITERATOR] = function(){ return iter; };
                    exec(arr);
                } catch(e){ /* empty */ }
                return safe;
            };

            /***/ }),
        /* 254 */
        /***/ (function(module, exports, __webpack_require__) {

            module.exports = { "default": __webpack_require__(255), __esModule: true };

            /***/ }),
        /* 255 */
        /***/ (function(module, exports, __webpack_require__) {

            __webpack_require__(202);
            __webpack_require__(176);
            __webpack_require__(150);
            __webpack_require__(256);
            __webpack_require__(257);
            module.exports = __webpack_require__(142).Set;

            /***/ }),
        /* 256 */
        /***/ (function(module, exports, __webpack_require__) {

            'use strict';
            var strong = __webpack_require__(213);

            // 23.2 Set Objects
            module.exports = __webpack_require__(220)('Set', function(get){
                return function Set(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
            }, {
                // 23.2.3.1 Set.prototype.add(value)
                add: function add(value){
                    return strong.def(this, value = value === 0 ? 0 : value, value);
                }
            }, strong);

            /***/ }),
        /* 257 */
        /***/ (function(module, exports, __webpack_require__) {

            // https://github.com/DavidBruant/Map-Set.prototype.toJSON
            var $export  = __webpack_require__(141);

            $export($export.P + $export.R, 'Set', {toJSON: __webpack_require__(225)('Set')});

            /***/ }),
        /* 258 */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(Buffer) {// Generated by CoffeeScript 1.9.1
                var CATEGORY_BITS, CATEGORY_MASK, CATEGORY_SHIFT, COMBINING_BITS, COMBINING_MASK, COMBINING_SHIFT, EAW_BITS, EAW_MASK, EAW_SHIFT, NUMBER_BITS, NUMBER_MASK, SCRIPT_BITS, SCRIPT_MASK, SCRIPT_SHIFT, UnicodeTrie, bits, data, fs, log2, trie;

                UnicodeTrie = __webpack_require__(17);

                data = __webpack_require__(259);



                trie = new UnicodeTrie(Buffer("","base64"));

                log2 = Math.log2 || function(n) {
                        return Math.log(n) / Math.LN2;
                    };

                bits = function(n) {
                    return (log2(n) + 1) | 0;
                };

                CATEGORY_BITS = bits(data.categories.length - 1);

                COMBINING_BITS = bits(data.combiningClasses.length - 1);

                SCRIPT_BITS = bits(data.scripts.length - 1);

                EAW_BITS = bits(data.eaw.length - 1);

                NUMBER_BITS = 10;

                CATEGORY_SHIFT = COMBINING_BITS + SCRIPT_BITS + EAW_BITS + NUMBER_BITS;

                COMBINING_SHIFT = SCRIPT_BITS + EAW_BITS + NUMBER_BITS;

                SCRIPT_SHIFT = EAW_BITS + NUMBER_BITS;

                EAW_SHIFT = NUMBER_BITS;

                CATEGORY_MASK = (1 << CATEGORY_BITS) - 1;

                COMBINING_MASK = (1 << COMBINING_BITS) - 1;

                SCRIPT_MASK = (1 << SCRIPT_BITS) - 1;

                EAW_MASK = (1 << EAW_BITS) - 1;

                NUMBER_MASK = (1 << NUMBER_BITS) - 1;

                exports.getCategory = function(codePoint) {
                    var val;
                    val = trie.get(codePoint);
                    return data.categories[(val >> CATEGORY_SHIFT) & CATEGORY_MASK];
                };

                exports.getCombiningClass = function(codePoint) {
                    var val;
                    val = trie.get(codePoint);
                    return data.combiningClasses[(val >> COMBINING_SHIFT) & COMBINING_MASK];
                };

                exports.getScript = function(codePoint) {
                    var val;
                    val = trie.get(codePoint);
                    return data.scripts[(val >> SCRIPT_SHIFT) & SCRIPT_MASK];
                };

                exports.getEastAsianWidth = function(codePoint) {
                    var val;
                    val = trie.get(codePoint);
                    return data.eaw[(val >> EAW_SHIFT) & EAW_MASK];
                };

                exports.getNumericValue = function(codePoint) {
                    var denominator, exp, num, numerator, val;
                    val = trie.get(codePoint);
                    num = val & NUMBER_MASK;
                    if (num === 0) {
                        return null;
                    } else if (num <= 50) {
                        return num - 1;
                    } else if (num < 0x1e0) {
                        numerator = (num >> 4) - 12;
                        denominator = (num & 0xf) + 1;
                        return numerator / denominator;
                    } else if (num < 0x300) {
                        val = (num >> 5) - 14;
                        exp = (num & 0x1f) + 2;
                        while (exp > 0) {
                            val *= 10;
                            exp--;
                        }
                        return val;
                    } else {
                        val = (num >> 2) - 0xbf;
                        exp = (num & 3) + 1;
                        while (exp > 0) {
                            val *= 60;
                            exp--;
                        }
                        return val;
                    }
                };

                exports.isAlphabetic = function(codePoint) {
                    var ref;
                    return (ref = exports.getCategory(codePoint)) === 'Lu' || ref === 'Ll' || ref === 'Lt' || ref === 'Lm' || ref === 'Lo' || ref === 'Nl';
                };

                exports.isDigit = function(codePoint) {
                    return exports.getCategory(codePoint) === 'Nd';
                };

                exports.isPunctuation = function(codePoint) {
                    var ref;
                    return (ref = exports.getCategory(codePoint)) === 'Pc' || ref === 'Pd' || ref === 'Pe' || ref === 'Pf' || ref === 'Pi' || ref === 'Po' || ref === 'Ps';
                };

                exports.isLowerCase = function(codePoint) {
                    return exports.getCategory(codePoint) === 'Ll';
                };

                exports.isUpperCase = function(codePoint) {
                    return exports.getCategory(codePoint) === 'Lu';
                };

                exports.isTitleCase = function(codePoint) {
                    return exports.getCategory(codePoint) === 'Lt';
                };

                exports.isWhiteSpace = function(codePoint) {
                    var ref;
                    return (ref = exports.getCategory(codePoint)) === 'Zs' || ref === 'Zl' || ref === 'Zp';
                };

                exports.isBaseForm = function(codePoint) {
                    var ref;
                    return (ref = exports.getCategory(codePoint)) === 'Nd' || ref === 'No' || ref === 'Nl' || ref === 'Lu' || ref === 'Ll' || ref === 'Lt' || ref === 'Lm' || ref === 'Lo' || ref === 'Me' || ref === 'Mc';
                };

                exports.isMark = function(codePoint) {
                    var ref;
                    return (ref = exports.getCategory(codePoint)) === 'Mn' || ref === 'Me' || ref === 'Mc';
                };

                /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))

            /***/ }),
        /* 259 */
        /***/ (function(module, exports) {

            module.exports = {"categories":["Cc","Zs","Po","Sc","Ps","Pe","Sm","Pd","Nd","Lu","Sk","Pc","Ll","So","Lo","Pi","Cf","No","Pf","Lt","Lm","Mn","Me","Mc","Nl","Zl","Zp","Cs","Co"],"combiningClasses":["Not_Reordered","Above","Above_Right","Below","Attached_Above_Right","Attached_Below","Overlay","Iota_Subscript","Double_Below","Double_Above","Below_Right","Above_Left","CCC10","CCC11","CCC12","CCC13","CCC14","CCC15","CCC16","CCC17","CCC18","CCC19","CCC20","CCC21","CCC22","CCC23","CCC24","CCC25","CCC30","CCC31","CCC32","CCC27","CCC28","CCC29","CCC33","CCC34","CCC35","CCC36","Nukta","Virama","CCC84","CCC91","CCC103","CCC107","CCC118","CCC122","CCC129","CCC130","CCC132","Attached_Above","Below_Left","Left","Kana_Voicing","CCC26","Right"],"scripts":["Common","Latin","Bopomofo","Inherited","Greek","Coptic","Cyrillic","Armenian","Hebrew","Arabic","Syriac","Thaana","Nko","Samaritan","Mandaic","Devanagari","Bengali","Gurmukhi","Gujarati","Oriya","Tamil","Telugu","Kannada","Malayalam","Sinhala","Thai","Lao","Tibetan","Myanmar","Georgian","Hangul","Ethiopic","Cherokee","Canadian_Aboriginal","Ogham","Runic","Tagalog","Hanunoo","Buhid","Tagbanwa","Khmer","Mongolian","Limbu","Tai_Le","New_Tai_Lue","Buginese","Tai_Tham","Balinese","Sundanese","Batak","Lepcha","Ol_Chiki","Braille","Glagolitic","Tifinagh","Han","Hiragana","Katakana","Yi","Lisu","Vai","Bamum","Syloti_Nagri","Phags_Pa","Saurashtra","Kayah_Li","Rejang","Javanese","Cham","Tai_Viet","Meetei_Mayek","null","Linear_B","Lycian","Carian","Old_Italic","Gothic","Old_Permic","Ugaritic","Old_Persian","Deseret","Shavian","Osmanya","Elbasan","Caucasian_Albanian","Linear_A","Cypriot","Imperial_Aramaic","Palmyrene","Nabataean","Hatran","Phoenician","Lydian","Meroitic_Hieroglyphs","Meroitic_Cursive","Kharoshthi","Old_South_Arabian","Old_North_Arabian","Manichaean","Avestan","Inscriptional_Parthian","Inscriptional_Pahlavi","Psalter_Pahlavi","Old_Turkic","Old_Hungarian","Brahmi","Kaithi","Sora_Sompeng","Chakma","Mahajani","Sharada","Khojki","Multani","Khudawadi","Grantha","Tirhuta","Siddham","Modi","Takri","Ahom","Warang_Citi","Pau_Cin_Hau","Cuneiform","Egyptian_Hieroglyphs","Anatolian_Hieroglyphs","Mro","Bassa_Vah","Pahawh_Hmong","Miao","Duployan","SignWriting","Mende_Kikakui"],"eaw":["N","Na","A","W","H","F"]}

            /***/ }),
        /* 260 */
        /***/ (function(module, exports, __webpack_require__) {

            'use strict';

            function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

            var _slicedToArray = _interopDefault(__webpack_require__(261));
            var _getIterator = _interopDefault(__webpack_require__(148));
            var _defineProperty = _interopDefault(__webpack_require__(265));
            var _regeneratorRuntime = _interopDefault(__webpack_require__(266));
            var _Symbol$iterator = _interopDefault(__webpack_require__(189));
            var _classCallCheck = _interopDefault(__webpack_require__(208));
            var _createClass = _interopDefault(__webpack_require__(209));

            var INITIAL_STATE = 1;
            var FAIL_STATE = 0;

            /**
             * A StateMachine represents a deterministic finite automaton.
             * It can perform matches over a sequence of values, similar to a regular expression.
             */

            var StateMachine = function () {
                function StateMachine(dfa) {
                    _classCallCheck(this, StateMachine);

                    this.stateTable = dfa.stateTable;
                    this.accepting = dfa.accepting;
                    this.tags = dfa.tags;
                }

                /**
                 * Returns an iterable object that yields pattern matches over the input sequence.
                 * Matches are of the form [startIndex, endIndex, tags].
                 */


                _createClass(StateMachine, [{
                    key: 'match',
                    value: function match(str) {
                        var self = this;
                        return _defineProperty({}, _Symbol$iterator, _regeneratorRuntime.mark(function _callee() {
                            var state, startRun, lastAccepting, lastState, p, c;
                            return _regeneratorRuntime.wrap(function _callee$(_context) {
                                while (1) {
                                    switch (_context.prev = _context.next) {
                                        case 0:
                                            state = INITIAL_STATE;
                                            startRun = null;
                                            lastAccepting = null;
                                            lastState = null;
                                            p = 0;

                                        case 5:
                                            if (!(p < str.length)) {
                                                _context.next = 21;
                                                break;
                                            }

                                            c = str[p];


                                            lastState = state;
                                            state = self.stateTable[state][c];

                                            if (!(state === FAIL_STATE)) {
                                                _context.next = 15;
                                                break;
                                            }

                                            if (!(startRun != null && lastAccepting != null && lastAccepting >= startRun)) {
                                                _context.next = 13;
                                                break;
                                            }

                                            _context.next = 13;
                                            return [startRun, lastAccepting, self.tags[lastState]];

                                        case 13:

                                            // reset the state as if we started over from the initial state
                                            state = self.stateTable[INITIAL_STATE][c];
                                            startRun = null;

                                        case 15:

                                            // start a run if not in the failure state
                                            if (state !== FAIL_STATE && startRun == null) {
                                                startRun = p;
                                            }

                                            // if accepting, mark the potential match end
                                            if (self.accepting[state]) {
                                                lastAccepting = p;
                                            }

                                            // reset the state to the initial state if we get into the failure state
                                            if (state === FAIL_STATE) {
                                                state = INITIAL_STATE;
                                            }

                                        case 18:
                                            p++;
                                            _context.next = 5;
                                            break;

                                        case 21:
                                            if (!(startRun != null && lastAccepting != null && lastAccepting >= startRun)) {
                                                _context.next = 24;
                                                break;
                                            }

                                            _context.next = 24;
                                            return [startRun, lastAccepting, self.tags[state]];

                                        case 24:
                                        case 'end':
                                            return _context.stop();
                                    }
                                }
                            }, _callee, this);
                        }));
                    }

                    /**
                     * For each match over the input sequence, action functions matching
                     * the tag definitions in the input pattern are called with the startIndex,
                     * endIndex, and sub-match sequence.
                     */

                }, {
                    key: 'apply',
                    value: function apply(str, actions) {
                        var _iteratorNormalCompletion = true;
                        var _didIteratorError = false;
                        var _iteratorError = undefined;

                        try {
                            for (var _iterator = _getIterator(this.match(str)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                var _step$value = _slicedToArray(_step.value, 3);

                                var start = _step$value[0];
                                var end = _step$value[1];
                                var tags = _step$value[2];
                                var _iteratorNormalCompletion2 = true;
                                var _didIteratorError2 = false;
                                var _iteratorError2 = undefined;

                                try {
                                    for (var _iterator2 = _getIterator(tags), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                                        var tag = _step2.value;

                                        if (typeof actions[tag] === 'function') {
                                            actions[tag](start, end, str.slice(start, end + 1));
                                        }
                                    }
                                } catch (err) {
                                    _didIteratorError2 = true;
                                    _iteratorError2 = err;
                                } finally {
                                    try {
                                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                            _iterator2.return();
                                        }
                                    } finally {
                                        if (_didIteratorError2) {
                                            throw _iteratorError2;
                                        }
                                    }
                                }
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion && _iterator.return) {
                                    _iterator.return();
                                }
                            } finally {
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                        }
                    }
                }]);

                return StateMachine;
            }();

            module.exports = StateMachine;


            /***/ }),
        /* 261 */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            exports.__esModule = true;

            var _isIterable2 = __webpack_require__(262);

            var _isIterable3 = _interopRequireDefault(_isIterable2);

            var _getIterator2 = __webpack_require__(148);

            var _getIterator3 = _interopRequireDefault(_getIterator2);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            exports.default = function () {
                function sliceIterator(arr, i) {
                    var _arr = [];
                    var _n = true;
                    var _d = false;
                    var _e = undefined;

                    try {
                        for (var _i = (0, _getIterator3.default)(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {
                            _arr.push(_s.value);

                            if (i && _arr.length === i) break;
                        }
                    } catch (err) {
                        _d = true;
                        _e = err;
                    } finally {
                        try {
                            if (!_n && _i["return"]) _i["return"]();
                        } finally {
                            if (_d) throw _e;
                        }
                    }

                    return _arr;
                }

                return function (arr, i) {
                    if (Array.isArray(arr)) {
                        return arr;
                    } else if ((0, _isIterable3.default)(Object(arr))) {
                        return sliceIterator(arr, i);
                    } else {
                        throw new TypeError("Invalid attempt to destructure non-iterable instance");
                    }
                };
            }();

            /***/ }),
        /* 262 */
        /***/ (function(module, exports, __webpack_require__) {

            module.exports = { "default": __webpack_require__(263), __esModule: true };

            /***/ }),
        /* 263 */
        /***/ (function(module, exports, __webpack_require__) {

            __webpack_require__(150);
            __webpack_require__(176);
            module.exports = __webpack_require__(264);

            /***/ }),
        /* 264 */
        /***/ (function(module, exports, __webpack_require__) {

            var classof   = __webpack_require__(180)
                , ITERATOR  = __webpack_require__(173)('iterator')
                , Iterators = __webpack_require__(154);
            module.exports = __webpack_require__(142).isIterable = function(it){
                var O = Object(it);
                return O[ITERATOR] !== undefined
                    || '@@iterator' in O
                    || Iterators.hasOwnProperty(classof(O));
            };

            /***/ }),
        /* 265 */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            exports.__esModule = true;

            var _defineProperty = __webpack_require__(205);

            var _defineProperty2 = _interopRequireDefault(_defineProperty);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            exports.default = function (obj, key, value) {
                if (key in obj) {
                    (0, _defineProperty2.default)(obj, key, {
                        value: value,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    });
                } else {
                    obj[key] = value;
                }

                return obj;
            };

            /***/ }),
        /* 266 */
        /***/ (function(module, exports, __webpack_require__) {

            module.exports = __webpack_require__(267);


            /***/ }),
        /* 267 */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(global) {// This method of obtaining a reference to the global object needs to be
                // kept identical to the way it is obtained in runtime.js
                var g =
                    typeof global === "object" ? global :
                        typeof window === "object" ? window :
                            typeof self === "object" ? self : this;

                // Use `getOwnPropertyNames` because not all browsers support calling
                // `hasOwnProperty` on the global `self` object in a worker. See #183.
                var hadRuntime = g.regeneratorRuntime &&
                    Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;

                // Save the old regeneratorRuntime in case it needs to be restored later.
                var oldRuntime = hadRuntime && g.regeneratorRuntime;

                // Force reevalutation of runtime.js.
                g.regeneratorRuntime = undefined;

                module.exports = __webpack_require__(268);

                if (hadRuntime) {
                    // Restore the original runtime.
                    g.regeneratorRuntime = oldRuntime;
                } else {
                    // Remove the global property added by runtime.js.
                    try {
                        delete g.regeneratorRuntime;
                    } catch(e) {
                        g.regeneratorRuntime = undefined;
                    }
                }

                /* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

            /***/ }),
        /* 268 */
        /***/ (function(module, exports) {

            /* WEBPACK VAR INJECTION */(function(global) {/**
             * Copyright (c) 2014, Facebook, Inc.
             * All rights reserved.
             *
             * This source code is licensed under the BSD-style license found in the
             * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
             * additional grant of patent rights can be found in the PATENTS file in
             * the same directory.
             */

            !(function(global) {
                "use strict";

                var Op = Object.prototype;
                var hasOwn = Op.hasOwnProperty;
                var undefined; // More compressible than void 0.
                var $Symbol = typeof Symbol === "function" ? Symbol : {};
                var iteratorSymbol = $Symbol.iterator || "@@iterator";
                var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
                var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

                var inModule = typeof module === "object";
                var runtime = global.regeneratorRuntime;
                if (runtime) {
                    if (inModule) {
                        // If regeneratorRuntime is defined globally and we're in a module,
                        // make the exports object identical to regeneratorRuntime.
                        module.exports = runtime;
                    }
                    // Don't bother evaluating the rest of this file if the runtime was
                    // already defined globally.
                    return;
                }

                // Define the runtime globally (as expected by generated code) as either
                // module.exports (if we're in a module) or a new, empty object.
                runtime = global.regeneratorRuntime = inModule ? module.exports : {};

                function wrap(innerFn, outerFn, self, tryLocsList) {
                    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
                    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
                    var generator = Object.create(protoGenerator.prototype);
                    var context = new Context(tryLocsList || []);

                    // The ._invoke method unifies the implementations of the .next,
                    // .throw, and .return methods.
                    generator._invoke = makeInvokeMethod(innerFn, self, context);

                    return generator;
                }
                runtime.wrap = wrap;

                // Try/catch helper to minimize deoptimizations. Returns a completion
                // record like context.tryEntries[i].completion. This interface could
                // have been (and was previously) designed to take a closure to be
                // invoked without arguments, but in all the cases we care about we
                // already have an existing method we want to call, so there's no need
                // to create a new function object. We can even get away with assuming
                // the method takes exactly one argument, since that happens to be true
                // in every case, so we don't have to touch the arguments object. The
                // only additional allocation required is the completion record, which
                // has a stable shape and so hopefully should be cheap to allocate.
                function tryCatch(fn, obj, arg) {
                    try {
                        return { type: "normal", arg: fn.call(obj, arg) };
                    } catch (err) {
                        return { type: "throw", arg: err };
                    }
                }

                var GenStateSuspendedStart = "suspendedStart";
                var GenStateSuspendedYield = "suspendedYield";
                var GenStateExecuting = "executing";
                var GenStateCompleted = "completed";

                // Returning this object from the innerFn has the same effect as
                // breaking out of the dispatch switch statement.
                var ContinueSentinel = {};

                // Dummy constructor functions that we use as the .constructor and
                // .constructor.prototype properties for functions that return Generator
                // objects. For full spec compliance, you may wish to configure your
                // minifier not to mangle the names of these two functions.
                function Generator() {}
                function GeneratorFunction() {}
                function GeneratorFunctionPrototype() {}

                // This is a polyfill for %IteratorPrototype% for environments that
                // don't natively support it.
                var IteratorPrototype = {};
                IteratorPrototype[iteratorSymbol] = function () {
                    return this;
                };

                var getProto = Object.getPrototypeOf;
                var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
                if (NativeIteratorPrototype &&
                    NativeIteratorPrototype !== Op &&
                    hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
                    // This environment has a native %IteratorPrototype%; use it instead
                    // of the polyfill.
                    IteratorPrototype = NativeIteratorPrototype;
                }

                var Gp = GeneratorFunctionPrototype.prototype =
                    Generator.prototype = Object.create(IteratorPrototype);
                GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
                GeneratorFunctionPrototype.constructor = GeneratorFunction;
                GeneratorFunctionPrototype[toStringTagSymbol] =
                    GeneratorFunction.displayName = "GeneratorFunction";

                // Helper for defining the .next, .throw, and .return methods of the
                // Iterator interface in terms of a single ._invoke method.
                function defineIteratorMethods(prototype) {
                    ["next", "throw", "return"].forEach(function(method) {
                        prototype[method] = function(arg) {
                            return this._invoke(method, arg);
                        };
                    });
                }

                runtime.isGeneratorFunction = function(genFun) {
                    var ctor = typeof genFun === "function" && genFun.constructor;
                    return ctor
                        ? ctor === GeneratorFunction ||
                    // For the native GeneratorFunction constructor, the best we can
                    // do is to check its .name property.
                    (ctor.displayName || ctor.name) === "GeneratorFunction"
                        : false;
                };

                runtime.mark = function(genFun) {
                    if (Object.setPrototypeOf) {
                        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
                    } else {
                        genFun.__proto__ = GeneratorFunctionPrototype;
                        if (!(toStringTagSymbol in genFun)) {
                            genFun[toStringTagSymbol] = "GeneratorFunction";
                        }
                    }
                    genFun.prototype = Object.create(Gp);
                    return genFun;
                };

                // Within the body of any async function, `await x` is transformed to
                // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
                // `hasOwn.call(value, "__await")` to determine if the yielded value is
                // meant to be awaited.
                runtime.awrap = function(arg) {
                    return { __await: arg };
                };

                function AsyncIterator(generator) {
                    function invoke(method, arg, resolve, reject) {
                        var record = tryCatch(generator[method], generator, arg);
                        if (record.type === "throw") {
                            reject(record.arg);
                        } else {
                            var result = record.arg;
                            var value = result.value;
                            if (value &&
                                typeof value === "object" &&
                                hasOwn.call(value, "__await")) {
                                return Promise.resolve(value.__await).then(function(value) {
                                    invoke("next", value, resolve, reject);
                                }, function(err) {
                                    invoke("throw", err, resolve, reject);
                                });
                            }

                            return Promise.resolve(value).then(function(unwrapped) {
                                // When a yielded Promise is resolved, its final value becomes
                                // the .value of the Promise<{value,done}> result for the
                                // current iteration. If the Promise is rejected, however, the
                                // result for this iteration will be rejected with the same
                                // reason. Note that rejections of yielded Promises are not
                                // thrown back into the generator function, as is the case
                                // when an awaited Promise is rejected. This difference in
                                // behavior between yield and await is important, because it
                                // allows the consumer to decide what to do with the yielded
                                // rejection (swallow it and continue, manually .throw it back
                                // into the generator, abandon iteration, whatever). With
                                // await, by contrast, there is no opportunity to examine the
                                // rejection reason outside the generator function, so the
                                // only option is to throw it from the await expression, and
                                // let the generator function handle the exception.
                                result.value = unwrapped;
                                resolve(result);
                            }, reject);
                        }
                    }

                    if (typeof global.process === "object" && global.process.domain) {
                        invoke = global.process.domain.bind(invoke);
                    }

                    var previousPromise;

                    function enqueue(method, arg) {
                        function callInvokeWithMethodAndArg() {
                            return new Promise(function(resolve, reject) {
                                invoke(method, arg, resolve, reject);
                            });
                        }

                        return previousPromise =
                            // If enqueue has been called before, then we want to wait until
                            // all previous Promises have been resolved before calling invoke,
                            // so that results are always delivered in the correct order. If
                            // enqueue has not been called before, then it is important to
                            // call invoke immediately, without waiting on a callback to fire,
                            // so that the async generator function has the opportunity to do
                            // any necessary setup in a predictable way. This predictability
                            // is why the Promise constructor synchronously invokes its
                            // executor callback, and why async functions synchronously
                            // execute code before the first await. Since we implement simple
                            // async functions in terms of async generators, it is especially
                            // important to get this right, even though it requires care.
                            previousPromise ? previousPromise.then(
                                callInvokeWithMethodAndArg,
                                // Avoid propagating failures to Promises returned by later
                                // invocations of the iterator.
                                callInvokeWithMethodAndArg
                            ) : callInvokeWithMethodAndArg();
                    }

                    // Define the unified helper method that is used to implement .next,
                    // .throw, and .return (see defineIteratorMethods).
                    this._invoke = enqueue;
                }

                defineIteratorMethods(AsyncIterator.prototype);
                AsyncIterator.prototype[asyncIteratorSymbol] = function () {
                    return this;
                };
                runtime.AsyncIterator = AsyncIterator;

                // Note that simple async functions are implemented on top of
                // AsyncIterator objects; they just return a Promise for the value of
                // the final result produced by the iterator.
                runtime.async = function(innerFn, outerFn, self, tryLocsList) {
                    var iter = new AsyncIterator(
                        wrap(innerFn, outerFn, self, tryLocsList)
                    );

                    return runtime.isGeneratorFunction(outerFn)
                        ? iter // If outerFn is a generator, return the full iterator.
                        : iter.next().then(function(result) {
                        return result.done ? result.value : iter.next();
                    });
                };

                function makeInvokeMethod(innerFn, self, context) {
                    var state = GenStateSuspendedStart;

                    return function invoke(method, arg) {
                        if (state === GenStateExecuting) {
                            throw new Error("Generator is already running");
                        }

                        if (state === GenStateCompleted) {
                            if (method === "throw") {
                                throw arg;
                            }

                            // Be forgiving, per 25.3.3.3.3 of the spec:
                            // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
                            return doneResult();
                        }

                        context.method = method;
                        context.arg = arg;

                        while (true) {
                            var delegate = context.delegate;
                            if (delegate) {
                                var delegateResult = maybeInvokeDelegate(delegate, context);
                                if (delegateResult) {
                                    if (delegateResult === ContinueSentinel) continue;
                                    return delegateResult;
                                }
                            }

                            if (context.method === "next") {
                                // Setting context._sent for legacy support of Babel's
                                // function.sent implementation.
                                context.sent = context._sent = context.arg;

                            } else if (context.method === "throw") {
                                if (state === GenStateSuspendedStart) {
                                    state = GenStateCompleted;
                                    throw context.arg;
                                }

                                context.dispatchException(context.arg);

                            } else if (context.method === "return") {
                                context.abrupt("return", context.arg);
                            }

                            state = GenStateExecuting;

                            var record = tryCatch(innerFn, self, context);
                            if (record.type === "normal") {
                                // If an exception is thrown from innerFn, we leave state ===
                                // GenStateExecuting and loop back for another invocation.
                                state = context.done
                                    ? GenStateCompleted
                                    : GenStateSuspendedYield;

                                if (record.arg === ContinueSentinel) {
                                    continue;
                                }

                                return {
                                    value: record.arg,
                                    done: context.done
                                };

                            } else if (record.type === "throw") {
                                state = GenStateCompleted;
                                // Dispatch the exception by looping back around to the
                                // context.dispatchException(context.arg) call above.
                                context.method = "throw";
                                context.arg = record.arg;
                            }
                        }
                    };
                }

                // Call delegate.iterator[context.method](context.arg) and handle the
                // result, either by returning a { value, done } result from the
                // delegate iterator, or by modifying context.method and context.arg,
                // setting context.delegate to null, and returning the ContinueSentinel.
                function maybeInvokeDelegate(delegate, context) {
                    var method = delegate.iterator[context.method];
                    if (method === undefined) {
                        // A .throw or .return when the delegate iterator has no .throw
                        // method always terminates the yield* loop.
                        context.delegate = null;

                        if (context.method === "throw") {
                            if (delegate.iterator.return) {
                                // If the delegate iterator has a return method, give it a
                                // chance to clean up.
                                context.method = "return";
                                context.arg = undefined;
                                maybeInvokeDelegate(delegate, context);

                                if (context.method === "throw") {
                                    // If maybeInvokeDelegate(context) changed context.method from
                                    // "return" to "throw", let that override the TypeError below.
                                    return ContinueSentinel;
                                }
                            }

                            context.method = "throw";
                            context.arg = new TypeError(
                                "The iterator does not provide a 'throw' method");
                        }

                        return ContinueSentinel;
                    }

                    var record = tryCatch(method, delegate.iterator, context.arg);

                    if (record.type === "throw") {
                        context.method = "throw";
                        context.arg = record.arg;
                        context.delegate = null;
                        return ContinueSentinel;
                    }

                    var info = record.arg;

                    if (! info) {
                        context.method = "throw";
                        context.arg = new TypeError("iterator result is not an object");
                        context.delegate = null;
                        return ContinueSentinel;
                    }

                    if (info.done) {
                        // Assign the result of the finished delegate to the temporary
                        // variable specified by delegate.resultName (see delegateYield).
                        context[delegate.resultName] = info.value;

                        // Resume execution at the desired location (see delegateYield).
                        context.next = delegate.nextLoc;

                        // If context.method was "throw" but the delegate handled the
                        // exception, let the outer generator proceed normally. If
                        // context.method was "next", forget context.arg since it has been
                        // "consumed" by the delegate iterator. If context.method was
                        // "return", allow the original .return call to continue in the
                        // outer generator.
                        if (context.method !== "return") {
                            context.method = "next";
                            context.arg = undefined;
                        }

                    } else {
                        // Re-yield the result returned by the delegate method.
                        return info;
                    }

                    // The delegate iterator is finished, so forget it and continue with
                    // the outer generator.
                    context.delegate = null;
                    return ContinueSentinel;
                }

                // Define Generator.prototype.{next,throw,return} in terms of the
                // unified ._invoke helper method.
                defineIteratorMethods(Gp);

                Gp[toStringTagSymbol] = "Generator";

                // A Generator should always return itself as the iterator object when the
                // @@iterator function is called on it. Some browsers' implementations of the
                // iterator prototype chain incorrectly implement this, causing the Generator
                // object to not be returned from this call. This ensures that doesn't happen.
                // See https://github.com/facebook/regenerator/issues/274 for more details.
                Gp[iteratorSymbol] = function() {
                    return this;
                };

                Gp.toString = function() {
                    return "[object Generator]";
                };

                function pushTryEntry(locs) {
                    var entry = { tryLoc: locs[0] };

                    if (1 in locs) {
                        entry.catchLoc = locs[1];
                    }

                    if (2 in locs) {
                        entry.finallyLoc = locs[2];
                        entry.afterLoc = locs[3];
                    }

                    this.tryEntries.push(entry);
                }

                function resetTryEntry(entry) {
                    var record = entry.completion || {};
                    record.type = "normal";
                    delete record.arg;
                    entry.completion = record;
                }

                function Context(tryLocsList) {
                    // The root entry object (effectively a try statement without a catch
                    // or a finally block) gives us a place to store values thrown from
                    // locations where there is no enclosing try statement.
                    this.tryEntries = [{ tryLoc: "root" }];
                    tryLocsList.forEach(pushTryEntry, this);
                    this.reset(true);
                }

                runtime.keys = function(object) {
                    var keys = [];
                    for (var key in object) {
                        keys.push(key);
                    }
                    keys.reverse();

                    // Rather than returning an object with a next method, we keep
                    // things simple and return the next function itself.
                    return function next() {
                        while (keys.length) {
                            var key = keys.pop();
                            if (key in object) {
                                next.value = key;
                                next.done = false;
                                return next;
                            }
                        }

                        // To avoid creating an additional object, we just hang the .value
                        // and .done properties off the next function object itself. This
                        // also ensures that the minifier will not anonymize the function.
                        next.done = true;
                        return next;
                    };
                };

                function values(iterable) {
                    if (iterable) {
                        var iteratorMethod = iterable[iteratorSymbol];
                        if (iteratorMethod) {
                            return iteratorMethod.call(iterable);
                        }

                        if (typeof iterable.next === "function") {
                            return iterable;
                        }

                        if (!isNaN(iterable.length)) {
                            var i = -1, next = function next() {
                                while (++i < iterable.length) {
                                    if (hasOwn.call(iterable, i)) {
                                        next.value = iterable[i];
                                        next.done = false;
                                        return next;
                                    }
                                }

                                next.value = undefined;
                                next.done = true;

                                return next;
                            };

                            return next.next = next;
                        }
                    }

                    // Return an iterator with no values.
                    return { next: doneResult };
                }
                runtime.values = values;

                function doneResult() {
                    return { value: undefined, done: true };
                }

                Context.prototype = {
                    constructor: Context,

                    reset: function(skipTempReset) {
                        this.prev = 0;
                        this.next = 0;
                        // Resetting context._sent for legacy support of Babel's
                        // function.sent implementation.
                        this.sent = this._sent = undefined;
                        this.done = false;
                        this.delegate = null;

                        this.method = "next";
                        this.arg = undefined;

                        this.tryEntries.forEach(resetTryEntry);

                        if (!skipTempReset) {
                            for (var name in this) {
                                // Not sure about the optimal order of these conditions:
                                if (name.charAt(0) === "t" &&
                                    hasOwn.call(this, name) &&
                                    !isNaN(+name.slice(1))) {
                                    this[name] = undefined;
                                }
                            }
                        }
                    },

                    stop: function() {
                        this.done = true;

                        var rootEntry = this.tryEntries[0];
                        var rootRecord = rootEntry.completion;
                        if (rootRecord.type === "throw") {
                            throw rootRecord.arg;
                        }

                        return this.rval;
                    },

                    dispatchException: function(exception) {
                        if (this.done) {
                            throw exception;
                        }

                        var context = this;
                        function handle(loc, caught) {
                            record.type = "throw";
                            record.arg = exception;
                            context.next = loc;

                            if (caught) {
                                // If the dispatched exception was caught by a catch block,
                                // then let that catch block handle the exception normally.
                                context.method = "next";
                                context.arg = undefined;
                            }

                            return !! caught;
                        }

                        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                            var entry = this.tryEntries[i];
                            var record = entry.completion;

                            if (entry.tryLoc === "root") {
                                // Exception thrown outside of any try block that could handle
                                // it, so set the completion value of the entire function to
                                // throw the exception.
                                return handle("end");
                            }

                            if (entry.tryLoc <= this.prev) {
                                var hasCatch = hasOwn.call(entry, "catchLoc");
                                var hasFinally = hasOwn.call(entry, "finallyLoc");

                                if (hasCatch && hasFinally) {
                                    if (this.prev < entry.catchLoc) {
                                        return handle(entry.catchLoc, true);
                                    } else if (this.prev < entry.finallyLoc) {
                                        return handle(entry.finallyLoc);
                                    }

                                } else if (hasCatch) {
                                    if (this.prev < entry.catchLoc) {
                                        return handle(entry.catchLoc, true);
                                    }

                                } else if (hasFinally) {
                                    if (this.prev < entry.finallyLoc) {
                                        return handle(entry.finallyLoc);
                                    }

                                } else {
                                    throw new Error("try statement without catch or finally");
                                }
                            }
                        }
                    },

                    abrupt: function(type, arg) {
                        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                            var entry = this.tryEntries[i];
                            if (entry.tryLoc <= this.prev &&
                                hasOwn.call(entry, "finallyLoc") &&
                                this.prev < entry.finallyLoc) {
                                var finallyEntry = entry;
                                break;
                            }
                        }

                        if (finallyEntry &&
                            (type === "break" ||
                            type === "continue") &&
                            finallyEntry.tryLoc <= arg &&
                            arg <= finallyEntry.finallyLoc) {
                            // Ignore the finally entry if control is not jumping to a
                            // location outside the try/catch block.
                            finallyEntry = null;
                        }

                        var record = finallyEntry ? finallyEntry.completion : {};
                        record.type = type;
                        record.arg = arg;

                        if (finallyEntry) {
                            this.method = "next";
                            this.next = finallyEntry.finallyLoc;
                            return ContinueSentinel;
                        }

                        return this.complete(record);
                    },

                    complete: function(record, afterLoc) {
                        if (record.type === "throw") {
                            throw record.arg;
                        }

                        if (record.type === "break" ||
                            record.type === "continue") {
                            this.next = record.arg;
                        } else if (record.type === "return") {
                            this.rval = this.arg = record.arg;
                            this.method = "return";
                            this.next = "end";
                        } else if (record.type === "normal" && afterLoc) {
                            this.next = afterLoc;
                        }

                        return ContinueSentinel;
                    },

                    finish: function(finallyLoc) {
                        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                            var entry = this.tryEntries[i];
                            if (entry.finallyLoc === finallyLoc) {
                                this.complete(entry.completion, entry.afterLoc);
                                resetTryEntry(entry);
                                return ContinueSentinel;
                            }
                        }
                    },

                    "catch": function(tryLoc) {
                        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                            var entry = this.tryEntries[i];
                            if (entry.tryLoc === tryLoc) {
                                var record = entry.completion;
                                if (record.type === "throw") {
                                    var thrown = record.arg;
                                    resetTryEntry(entry);
                                }
                                return thrown;
                            }
                        }

                        // The context.catch method must only be called with a location
                        // argument that corresponds to a known catch block.
                        throw new Error("illegal catch attempt");
                    },

                    delegateYield: function(iterable, resultName, nextLoc) {
                        this.delegate = {
                            iterator: values(iterable),
                            resultName: resultName,
                            nextLoc: nextLoc
                        };

                        if (this.method === "next") {
                            // Deliberately forget the last sent value so that we don't
                            // accidentally pass it on to the delegate.
                            this.arg = undefined;
                        }

                        return ContinueSentinel;
                    }
                };
            })(
                // Among the various tricks for obtaining a reference to the global
                // object, this seems to be the most reliable technique that does not
                // use indirect eval (which violates Content Security Policy).
                typeof global === "object" ? global :
                    typeof window === "object" ? window :
                        typeof self === "object" ? self : this
            );

                /* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

            /***/ }),
        /* 269 */
        /***/ (function(module, exports, __webpack_require__) {

            module.exports = { "default": __webpack_require__(270), __esModule: true };

            /***/ }),
        /* 270 */
        /***/ (function(module, exports, __webpack_require__) {

            __webpack_require__(271);
            module.exports = Math.pow(2, -52);

            /***/ }),
        /* 271 */
        /***/ (function(module, exports, __webpack_require__) {

            // 20.1.2.1 Number.EPSILON
            var $export = __webpack_require__(141);

            $export($export.S, 'Number', {EPSILON: Math.pow(2, -52)});

            /***/ }),
        /* 272 */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(Buffer) {var clone = (function() {
                'use strict';

                /**
                 * Clones (copies) an Object using deep copying.
                 *
                 * This function supports circular references by default, but if you are certain
                 * there are no circular references in your object, you can save some CPU time
                 * by calling clone(obj, false).
                 *
                 * Caution: if `circular` is false and `parent` contains circular references,
                 * your program may enter an infinite loop and crash.
                 *
                 * @param `parent` - the object to be cloned
                 * @param `circular` - set to true if the object to be cloned may contain
                 *    circular references. (optional - true by default)
                 * @param `depth` - set to a number if the object is only to be cloned to
                 *    a particular depth. (optional - defaults to Infinity)
                 * @param `prototype` - sets the prototype to be used when cloning an object.
                 *    (optional - defaults to parent prototype).
                 */
                function clone(parent, circular, depth, prototype) {
                    var filter;
                    if (typeof circular === 'object') {
                        depth = circular.depth;
                        prototype = circular.prototype;
                        filter = circular.filter;
                        circular = circular.circular
                    }
                    // maintain two arrays for circular references, where corresponding parents
                    // and children have the same index
                    var allParents = [];
                    var allChildren = [];

                    var useBuffer = typeof Buffer != 'undefined';

                    if (typeof circular == 'undefined')
                        circular = true;

                    if (typeof depth == 'undefined')
                        depth = Infinity;

                    // recurse this function so we don't reset allParents and allChildren
                    function _clone(parent, depth) {
                        // cloning null always returns null
                        if (parent === null)
                            return null;

                        if (depth == 0)
                            return parent;

                        var child;
                        var proto;
                        if (typeof parent != 'object') {
                            return parent;
                        }

                        if (clone.__isArray(parent)) {
                            child = [];
                        } else if (clone.__isRegExp(parent)) {
                            child = new RegExp(parent.source, __getRegExpFlags(parent));
                            if (parent.lastIndex) child.lastIndex = parent.lastIndex;
                        } else if (clone.__isDate(parent)) {
                            child = new Date(parent.getTime());
                        } else if (useBuffer && Buffer.isBuffer(parent)) {
                            child = new Buffer(parent.length);
                            parent.copy(child);
                            return child;
                        } else {
                            if (typeof prototype == 'undefined') {
                                proto = Object.getPrototypeOf(parent);
                                child = Object.create(proto);
                            }
                            else {
                                child = Object.create(prototype);
                                proto = prototype;
                            }
                        }

                        if (circular) {
                            var index = allParents.indexOf(parent);

                            if (index != -1) {
                                return allChildren[index];
                            }
                            allParents.push(parent);
                            allChildren.push(child);
                        }

                        for (var i in parent) {
                            var attrs;
                            if (proto) {
                                attrs = Object.getOwnPropertyDescriptor(proto, i);
                            }

                            if (attrs && attrs.set == null) {
                                continue;
                            }
                            child[i] = _clone(parent[i], depth - 1);
                        }

                        return child;
                    }

                    return _clone(parent, depth);
                }

                /**
                 * Simple flat clone using prototype, accepts only objects, usefull for property
                 * override on FLAT configuration object (no nested props).
                 *
                 * USE WITH CAUTION! This may not behave as you wish if you do not know how this
                 * works.
                 */
                clone.clonePrototype = function clonePrototype(parent) {
                    if (parent === null)
                        return null;

                    var c = function () {};
                    c.prototype = parent;
                    return new c();
                };

                // private utility functions

                function __objToStr(o) {
                    return Object.prototype.toString.call(o);
                };
                clone.__objToStr = __objToStr;

                function __isDate(o) {
                    return typeof o === 'object' && __objToStr(o) === '[object Date]';
                };
                clone.__isDate = __isDate;

                function __isArray(o) {
                    return typeof o === 'object' && __objToStr(o) === '[object Array]';
                };
                clone.__isArray = __isArray;

                function __isRegExp(o) {
                    return typeof o === 'object' && __objToStr(o) === '[object RegExp]';
                };
                clone.__isRegExp = __isRegExp;

                function __getRegExpFlags(re) {
                    var flags = '';
                    if (re.global) flags += 'g';
                    if (re.ignoreCase) flags += 'i';
                    if (re.multiline) flags += 'm';
                    return flags;
                };
                clone.__getRegExpFlags = __getRegExpFlags;

                return clone;
            })();

                if (typeof module === 'object' && module.exports) {
                    module.exports = clone;
                }

                /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))

            /***/ }),
        /* 273 */
        /***/ (function(module, exports, __webpack_require__) {

            module.exports = __webpack_require__(274).BrotliDecompressBuffer;


            /***/ }),
        /* 274 */
        /***/ (function(module, exports, __webpack_require__) {

            /* Copyright 2013 Google Inc. All Rights Reserved.

             Licensed under the Apache License, Version 2.0 (the "License");
             you may not use this file except in compliance with the License.
             You may obtain a copy of the License at

             http://www.apache.org/licenses/LICENSE-2.0

             Unless required by applicable law or agreed to in writing, software
             distributed under the License is distributed on an "AS IS" BASIS,
             WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             See the License for the specific language governing permissions and
             limitations under the License.
             */

            var BrotliInput = __webpack_require__(275).BrotliInput;
            var BrotliOutput = __webpack_require__(275).BrotliOutput;
            var BrotliBitReader = __webpack_require__(276);
            var BrotliDictionary = __webpack_require__(277);
            var HuffmanCode = __webpack_require__(281).HuffmanCode;
            var BrotliBuildHuffmanTable = __webpack_require__(281).BrotliBuildHuffmanTable;
            var Context = __webpack_require__(282);
            var Prefix = __webpack_require__(283);
            var Transform = __webpack_require__(284);

            var kDefaultCodeLength = 8;
            var kCodeLengthRepeatCode = 16;
            var kNumLiteralCodes = 256;
            var kNumInsertAndCopyCodes = 704;
            var kNumBlockLengthCodes = 26;
            var kLiteralContextBits = 6;
            var kDistanceContextBits = 2;

            var HUFFMAN_TABLE_BITS = 8;
            var HUFFMAN_TABLE_MASK = 0xff;
            /* Maximum possible Huffman table size for an alphabet size of 704, max code
             * length 15 and root table bits 8. */
            var HUFFMAN_MAX_TABLE_SIZE = 1080;

            var CODE_LENGTH_CODES = 18;
            var kCodeLengthCodeOrder = new Uint8Array([
                1, 2, 3, 4, 0, 5, 17, 6, 16, 7, 8, 9, 10, 11, 12, 13, 14, 15,
            ]);

            var NUM_DISTANCE_SHORT_CODES = 16;
            var kDistanceShortCodeIndexOffset = new Uint8Array([
                3, 2, 1, 0, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2
            ]);

            var kDistanceShortCodeValueOffset = new Int8Array([
                0, 0, 0, 0, -1, 1, -2, 2, -3, 3, -1, 1, -2, 2, -3, 3
            ]);

            var kMaxHuffmanTableSize = new Uint16Array([
                256, 402, 436, 468, 500, 534, 566, 598, 630, 662, 694, 726, 758, 790, 822,
                854, 886, 920, 952, 984, 1016, 1048, 1080
            ]);

            function DecodeWindowBits(br) {
                var n;
                if (br.readBits(1) === 0) {
                    return 16;
                }

                n = br.readBits(3);
                if (n > 0) {
                    return 17 + n;
                }

                n = br.readBits(3);
                if (n > 0) {
                    return 8 + n;
                }

                return 17;
            }

            /* Decodes a number in the range [0..255], by reading 1 - 11 bits. */
            function DecodeVarLenUint8(br) {
                if (br.readBits(1)) {
                    var nbits = br.readBits(3);
                    if (nbits === 0) {
                        return 1;
                    } else {
                        return br.readBits(nbits) + (1 << nbits);
                    }
                }
                return 0;
            }

            function MetaBlockLength() {
                this.meta_block_length = 0;
                this.input_end = 0;
                this.is_uncompressed = 0;
                this.is_metadata = false;
            }

            function DecodeMetaBlockLength(br) {
                var out = new MetaBlockLength;
                var size_nibbles;
                var size_bytes;
                var i;

                out.input_end = br.readBits(1);
                if (out.input_end && br.readBits(1)) {
                    return out;
                }

                size_nibbles = br.readBits(2) + 4;
                if (size_nibbles === 7) {
                    out.is_metadata = true;

                    if (br.readBits(1) !== 0)
                        throw new Error('Invalid reserved bit');

                    size_bytes = br.readBits(2);
                    if (size_bytes === 0)
                        return out;

                    for (i = 0; i < size_bytes; i++) {
                        var next_byte = br.readBits(8);
                        if (i + 1 === size_bytes && size_bytes > 1 && next_byte === 0)
                            throw new Error('Invalid size byte');

                        out.meta_block_length |= next_byte << (i * 8);
                    }
                } else {
                    for (i = 0; i < size_nibbles; ++i) {
                        var next_nibble = br.readBits(4);
                        if (i + 1 === size_nibbles && size_nibbles > 4 && next_nibble === 0)
                            throw new Error('Invalid size nibble');

                        out.meta_block_length |= next_nibble << (i * 4);
                    }
                }

                ++out.meta_block_length;

                if (!out.input_end && !out.is_metadata) {
                    out.is_uncompressed = br.readBits(1);
                }

                return out;
            }

            /* Decodes the next Huffman code from bit-stream. */
            function ReadSymbol(table, index, br) {
                var start_index = index;

                var nbits;
                br.fillBitWindow();
                index += (br.val_ >>> br.bit_pos_) & HUFFMAN_TABLE_MASK;
                nbits = table[index].bits - HUFFMAN_TABLE_BITS;
                if (nbits > 0) {
                    br.bit_pos_ += HUFFMAN_TABLE_BITS;
                    index += table[index].value;
                    index += (br.val_ >>> br.bit_pos_) & ((1 << nbits) - 1);
                }
                br.bit_pos_ += table[index].bits;
                return table[index].value;
            }

            function ReadHuffmanCodeLengths(code_length_code_lengths, num_symbols, code_lengths, br) {
                var symbol = 0;
                var prev_code_len = kDefaultCodeLength;
                var repeat = 0;
                var repeat_code_len = 0;
                var space = 32768;

                var table = [];
                for (var i = 0; i < 32; i++)
                    table.push(new HuffmanCode(0, 0));

                BrotliBuildHuffmanTable(table, 0, 5, code_length_code_lengths, CODE_LENGTH_CODES);

                while (symbol < num_symbols && space > 0) {
                    var p = 0;
                    var code_len;

                    br.readMoreInput();
                    br.fillBitWindow();
                    p += (br.val_ >>> br.bit_pos_) & 31;
                    br.bit_pos_ += table[p].bits;
                    code_len = table[p].value & 0xff;
                    if (code_len < kCodeLengthRepeatCode) {
                        repeat = 0;
                        code_lengths[symbol++] = code_len;
                        if (code_len !== 0) {
                            prev_code_len = code_len;
                            space -= 32768 >> code_len;
                        }
                    } else {
                        var extra_bits = code_len - 14;
                        var old_repeat;
                        var repeat_delta;
                        var new_len = 0;
                        if (code_len === kCodeLengthRepeatCode) {
                            new_len = prev_code_len;
                        }
                        if (repeat_code_len !== new_len) {
                            repeat = 0;
                            repeat_code_len = new_len;
                        }
                        old_repeat = repeat;
                        if (repeat > 0) {
                            repeat -= 2;
                            repeat <<= extra_bits;
                        }
                        repeat += br.readBits(extra_bits) + 3;
                        repeat_delta = repeat - old_repeat;
                        if (symbol + repeat_delta > num_symbols) {
                            throw new Error('[ReadHuffmanCodeLengths] symbol + repeat_delta > num_symbols');
                        }

                        for (var x = 0; x < repeat_delta; x++)
                            code_lengths[symbol + x] = repeat_code_len;

                        symbol += repeat_delta;

                        if (repeat_code_len !== 0) {
                            space -= repeat_delta << (15 - repeat_code_len);
                        }
                    }
                }
                if (space !== 0) {
                    throw new Error("[ReadHuffmanCodeLengths] space = " + space);
                }

                for (; symbol < num_symbols; symbol++)
                    code_lengths[symbol] = 0;
            }

            function ReadHuffmanCode(alphabet_size, tables, table, br) {
                var table_size = 0;
                var simple_code_or_skip;
                var code_lengths = new Uint8Array(alphabet_size);

                br.readMoreInput();

                /* simple_code_or_skip is used as follows:
                 1 for simple code;
                 0 for no skipping, 2 skips 2 code lengths, 3 skips 3 code lengths */
                simple_code_or_skip = br.readBits(2);
                if (simple_code_or_skip === 1) {
                    /* Read symbols, codes & code lengths directly. */
                    var i;
                    var max_bits_counter = alphabet_size - 1;
                    var max_bits = 0;
                    var symbols = new Int32Array(4);
                    var num_symbols = br.readBits(2) + 1;
                    while (max_bits_counter) {
                        max_bits_counter >>= 1;
                        ++max_bits;
                    }

                    for (i = 0; i < num_symbols; ++i) {
                        symbols[i] = br.readBits(max_bits) % alphabet_size;
                        code_lengths[symbols[i]] = 2;
                    }
                    code_lengths[symbols[0]] = 1;
                    switch (num_symbols) {
                        case 1:
                            break;
                        case 3:
                            if ((symbols[0] === symbols[1]) ||
                                (symbols[0] === symbols[2]) ||
                                (symbols[1] === symbols[2])) {
                                throw new Error('[ReadHuffmanCode] invalid symbols');
                            }
                            break;
                        case 2:
                            if (symbols[0] === symbols[1]) {
                                throw new Error('[ReadHuffmanCode] invalid symbols');
                            }

                            code_lengths[symbols[1]] = 1;
                            break;
                        case 4:
                            if ((symbols[0] === symbols[1]) ||
                                (symbols[0] === symbols[2]) ||
                                (symbols[0] === symbols[3]) ||
                                (symbols[1] === symbols[2]) ||
                                (symbols[1] === symbols[3]) ||
                                (symbols[2] === symbols[3])) {
                                throw new Error('[ReadHuffmanCode] invalid symbols');
                            }

                            if (br.readBits(1)) {
                                code_lengths[symbols[2]] = 3;
                                code_lengths[symbols[3]] = 3;
                            } else {
                                code_lengths[symbols[0]] = 2;
                            }
                            break;
                    }
                } else {  /* Decode Huffman-coded code lengths. */
                    var i;
                    var code_length_code_lengths = new Uint8Array(CODE_LENGTH_CODES);
                    var space = 32;
                    var num_codes = 0;
                    /* Static Huffman code for the code length code lengths */
                    var huff = [
                        new HuffmanCode(2, 0), new HuffmanCode(2, 4), new HuffmanCode(2, 3), new HuffmanCode(3, 2),
                        new HuffmanCode(2, 0), new HuffmanCode(2, 4), new HuffmanCode(2, 3), new HuffmanCode(4, 1),
                        new HuffmanCode(2, 0), new HuffmanCode(2, 4), new HuffmanCode(2, 3), new HuffmanCode(3, 2),
                        new HuffmanCode(2, 0), new HuffmanCode(2, 4), new HuffmanCode(2, 3), new HuffmanCode(4, 5)
                    ];
                    for (i = simple_code_or_skip; i < CODE_LENGTH_CODES && space > 0; ++i) {
                        var code_len_idx = kCodeLengthCodeOrder[i];
                        var p = 0;
                        var v;
                        br.fillBitWindow();
                        p += (br.val_ >>> br.bit_pos_) & 15;
                        br.bit_pos_ += huff[p].bits;
                        v = huff[p].value;
                        code_length_code_lengths[code_len_idx] = v;
                        if (v !== 0) {
                            space -= (32 >> v);
                            ++num_codes;
                        }
                    }

                    if (!(num_codes === 1 || space === 0))
                        throw new Error('[ReadHuffmanCode] invalid num_codes or space');

                    ReadHuffmanCodeLengths(code_length_code_lengths, alphabet_size, code_lengths, br);
                }

                table_size = BrotliBuildHuffmanTable(tables, table, HUFFMAN_TABLE_BITS, code_lengths, alphabet_size);

                if (table_size === 0) {
                    throw new Error("[ReadHuffmanCode] BuildHuffmanTable failed: ");
                }

                return table_size;
            }

            function ReadBlockLength(table, index, br) {
                var code;
                var nbits;
                code = ReadSymbol(table, index, br);
                nbits = Prefix.kBlockLengthPrefixCode[code].nbits;
                return Prefix.kBlockLengthPrefixCode[code].offset + br.readBits(nbits);
            }

            function TranslateShortCodes(code, ringbuffer, index) {
                var val;
                if (code < NUM_DISTANCE_SHORT_CODES) {
                    index += kDistanceShortCodeIndexOffset[code];
                    index &= 3;
                    val = ringbuffer[index] + kDistanceShortCodeValueOffset[code];
                } else {
                    val = code - NUM_DISTANCE_SHORT_CODES + 1;
                }
                return val;
            }

            function MoveToFront(v, index) {
                var value = v[index];
                var i = index;
                for (; i; --i) v[i] = v[i - 1];
                v[0] = value;
            }

            function InverseMoveToFrontTransform(v, v_len) {
                var mtf = new Uint8Array(256);
                var i;
                for (i = 0; i < 256; ++i) {
                    mtf[i] = i;
                }
                for (i = 0; i < v_len; ++i) {
                    var index = v[i];
                    v[i] = mtf[index];
                    if (index) MoveToFront(mtf, index);
                }
            }

            /* Contains a collection of huffman trees with the same alphabet size. */
            function HuffmanTreeGroup(alphabet_size, num_htrees) {
                this.alphabet_size = alphabet_size;
                this.num_htrees = num_htrees;
                this.codes = new Array(num_htrees + num_htrees * kMaxHuffmanTableSize[(alphabet_size + 31) >>> 5]);
                this.htrees = new Uint32Array(num_htrees);
            }

            HuffmanTreeGroup.prototype.decode = function(br) {
                var i;
                var table_size;
                var next = 0;
                for (i = 0; i < this.num_htrees; ++i) {
                    this.htrees[i] = next;
                    table_size = ReadHuffmanCode(this.alphabet_size, this.codes, next, br);
                    next += table_size;
                }
            };

            function DecodeContextMap(context_map_size, br) {
                var out = { num_htrees: null, context_map: null };
                var use_rle_for_zeros;
                var max_run_length_prefix = 0;
                var table;
                var i;

                br.readMoreInput();
                var num_htrees = out.num_htrees = DecodeVarLenUint8(br) + 1;

                var context_map = out.context_map = new Uint8Array(context_map_size);
                if (num_htrees <= 1) {
                    return out;
                }

                use_rle_for_zeros = br.readBits(1);
                if (use_rle_for_zeros) {
                    max_run_length_prefix = br.readBits(4) + 1;
                }

                table = [];
                for (i = 0; i < HUFFMAN_MAX_TABLE_SIZE; i++) {
                    table[i] = new HuffmanCode(0, 0);
                }

                ReadHuffmanCode(num_htrees + max_run_length_prefix, table, 0, br);

                for (i = 0; i < context_map_size;) {
                    var code;

                    br.readMoreInput();
                    code = ReadSymbol(table, 0, br);
                    if (code === 0) {
                        context_map[i] = 0;
                        ++i;
                    } else if (code <= max_run_length_prefix) {
                        var reps = 1 + (1 << code) + br.readBits(code);
                        while (--reps) {
                            if (i >= context_map_size) {
                                throw new Error("[DecodeContextMap] i >= context_map_size");
                            }
                            context_map[i] = 0;
                            ++i;
                        }
                    } else {
                        context_map[i] = code - max_run_length_prefix;
                        ++i;
                    }
                }
                if (br.readBits(1)) {
                    InverseMoveToFrontTransform(context_map, context_map_size);
                }

                return out;
            }

            function DecodeBlockType(max_block_type, trees, tree_type, block_types, ringbuffers, indexes, br) {
                var ringbuffer = tree_type * 2;
                var index = tree_type;
                var type_code = ReadSymbol(trees, tree_type * HUFFMAN_MAX_TABLE_SIZE, br);
                var block_type;
                if (type_code === 0) {
                    block_type = ringbuffers[ringbuffer + (indexes[index] & 1)];
                } else if (type_code === 1) {
                    block_type = ringbuffers[ringbuffer + ((indexes[index] - 1) & 1)] + 1;
                } else {
                    block_type = type_code - 2;
                }
                if (block_type >= max_block_type) {
                    block_type -= max_block_type;
                }
                block_types[tree_type] = block_type;
                ringbuffers[ringbuffer + (indexes[index] & 1)] = block_type;
                ++indexes[index];
            }

            function CopyUncompressedBlockToOutput(output, len, pos, ringbuffer, ringbuffer_mask, br) {
                var rb_size = ringbuffer_mask + 1;
                var rb_pos = pos & ringbuffer_mask;
                var br_pos = br.pos_ & BrotliBitReader.IBUF_MASK;
                var nbytes;

                /* For short lengths copy byte-by-byte */
                if (len < 8 || br.bit_pos_ + (len << 3) < br.bit_end_pos_) {
                    while (len-- > 0) {
                        br.readMoreInput();
                        ringbuffer[rb_pos++] = br.readBits(8);
                        if (rb_pos === rb_size) {
                            output.write(ringbuffer, rb_size);
                            rb_pos = 0;
                        }
                    }
                    return;
                }

                if (br.bit_end_pos_ < 32) {
                    throw new Error('[CopyUncompressedBlockToOutput] br.bit_end_pos_ < 32');
                }

                /* Copy remaining 0-4 bytes from br.val_ to ringbuffer. */
                while (br.bit_pos_ < 32) {
                    ringbuffer[rb_pos] = (br.val_ >>> br.bit_pos_);
                    br.bit_pos_ += 8;
                    ++rb_pos;
                    --len;
                }

                /* Copy remaining bytes from br.buf_ to ringbuffer. */
                nbytes = (br.bit_end_pos_ - br.bit_pos_) >> 3;
                if (br_pos + nbytes > BrotliBitReader.IBUF_MASK) {
                    var tail = BrotliBitReader.IBUF_MASK + 1 - br_pos;
                    for (var x = 0; x < tail; x++)
                        ringbuffer[rb_pos + x] = br.buf_[br_pos + x];

                    nbytes -= tail;
                    rb_pos += tail;
                    len -= tail;
                    br_pos = 0;
                }

                for (var x = 0; x < nbytes; x++)
                    ringbuffer[rb_pos + x] = br.buf_[br_pos + x];

                rb_pos += nbytes;
                len -= nbytes;

                /* If we wrote past the logical end of the ringbuffer, copy the tail of the
                 ringbuffer to its beginning and flush the ringbuffer to the output. */
                if (rb_pos >= rb_size) {
                    output.write(ringbuffer, rb_size);
                    rb_pos -= rb_size;
                    for (var x = 0; x < rb_pos; x++)
                        ringbuffer[x] = ringbuffer[rb_size + x];
                }

                /* If we have more to copy than the remaining size of the ringbuffer, then we
                 first fill the ringbuffer from the input and then flush the ringbuffer to
                 the output */
                while (rb_pos + len >= rb_size) {
                    nbytes = rb_size - rb_pos;
                    if (br.input_.read(ringbuffer, rb_pos, nbytes) < nbytes) {
                        throw new Error('[CopyUncompressedBlockToOutput] not enough bytes');
                    }
                    output.write(ringbuffer, rb_size);
                    len -= nbytes;
                    rb_pos = 0;
                }

                /* Copy straight from the input onto the ringbuffer. The ringbuffer will be
                 flushed to the output at a later time. */
                if (br.input_.read(ringbuffer, rb_pos, len) < len) {
                    throw new Error('[CopyUncompressedBlockToOutput] not enough bytes');
                }

                /* Restore the state of the bit reader. */
                br.reset();
            }

            /* Advances the bit reader position to the next byte boundary and verifies
             that any skipped bits are set to zero. */
            function JumpToByteBoundary(br) {
                var new_bit_pos = (br.bit_pos_ + 7) & ~7;
                var pad_bits = br.readBits(new_bit_pos - br.bit_pos_);
                return pad_bits == 0;
            }

            function BrotliDecompressedSize(buffer) {
                var input = new BrotliInput(buffer);
                var br = new BrotliBitReader(input);
                DecodeWindowBits(br);
                var out = DecodeMetaBlockLength(br);
                return out.meta_block_length;
            }

            exports.BrotliDecompressedSize = BrotliDecompressedSize;

            function BrotliDecompressBuffer(buffer, output_size) {
                var input = new BrotliInput(buffer);

                if (output_size == null) {
                    output_size = BrotliDecompressedSize(buffer);
                }

                var output_buffer = new Uint8Array(output_size);
                var output = new BrotliOutput(output_buffer);

                BrotliDecompress(input, output);

                if (output.pos < output.buffer.length) {
                    output.buffer = output.buffer.subarray(0, output.pos);
                }

                return output.buffer;
            }

            exports.BrotliDecompressBuffer = BrotliDecompressBuffer;

            function BrotliDecompress(input, output) {
                var i;
                var pos = 0;
                var input_end = 0;
                var window_bits = 0;
                var max_backward_distance;
                var max_distance = 0;
                var ringbuffer_size;
                var ringbuffer_mask;
                var ringbuffer;
                var ringbuffer_end;
                /* This ring buffer holds a few past copy distances that will be used by */
                /* some special distance codes. */
                var dist_rb = [ 16, 15, 11, 4 ];
                var dist_rb_idx = 0;
                /* The previous 2 bytes used for context. */
                var prev_byte1 = 0;
                var prev_byte2 = 0;
                var hgroup = [new HuffmanTreeGroup(0, 0), new HuffmanTreeGroup(0, 0), new HuffmanTreeGroup(0, 0)];
                var block_type_trees;
                var block_len_trees;
                var br;

                /* We need the slack region for the following reasons:
                 - always doing two 8-byte copies for fast backward copying
                 - transforms
                 - flushing the input ringbuffer when decoding uncompressed blocks */
                var kRingBufferWriteAheadSlack = 128 + BrotliBitReader.READ_SIZE;

                br = new BrotliBitReader(input);

                /* Decode window size. */
                window_bits = DecodeWindowBits(br);
                max_backward_distance = (1 << window_bits) - 16;

                ringbuffer_size = 1 << window_bits;
                ringbuffer_mask = ringbuffer_size - 1;
                ringbuffer = new Uint8Array(ringbuffer_size + kRingBufferWriteAheadSlack + BrotliDictionary.maxDictionaryWordLength);
                ringbuffer_end = ringbuffer_size;

                block_type_trees = [];
                block_len_trees = [];
                for (var x = 0; x < 3 * HUFFMAN_MAX_TABLE_SIZE; x++) {
                    block_type_trees[x] = new HuffmanCode(0, 0);
                    block_len_trees[x] = new HuffmanCode(0, 0);
                }

                while (!input_end) {
                    var meta_block_remaining_len = 0;
                    var is_uncompressed;
                    var block_length = [ 1 << 28, 1 << 28, 1 << 28 ];
                    var block_type = [ 0 ];
                    var num_block_types = [ 1, 1, 1 ];
                    var block_type_rb = [ 0, 1, 0, 1, 0, 1 ];
                    var block_type_rb_index = [ 0 ];
                    var distance_postfix_bits;
                    var num_direct_distance_codes;
                    var distance_postfix_mask;
                    var num_distance_codes;
                    var context_map = null;
                    var context_modes = null;
                    var num_literal_htrees;
                    var dist_context_map = null;
                    var num_dist_htrees;
                    var context_offset = 0;
                    var context_map_slice = null;
                    var literal_htree_index = 0;
                    var dist_context_offset = 0;
                    var dist_context_map_slice = null;
                    var dist_htree_index = 0;
                    var context_lookup_offset1 = 0;
                    var context_lookup_offset2 = 0;
                    var context_mode;
                    var htree_command;

                    for (i = 0; i < 3; ++i) {
                        hgroup[i].codes = null;
                        hgroup[i].htrees = null;
                    }

                    br.readMoreInput();

                    var _out = DecodeMetaBlockLength(br);
                    meta_block_remaining_len = _out.meta_block_length;
                    if (pos + meta_block_remaining_len > output.buffer.length) {
                        /* We need to grow the output buffer to fit the additional data. */
                        var tmp = new Uint8Array( pos + meta_block_remaining_len );
                        tmp.set( output.buffer );
                        output.buffer = tmp;
                    }
                    input_end = _out.input_end;
                    is_uncompressed = _out.is_uncompressed;

                    if (_out.is_metadata) {
                        JumpToByteBoundary(br);

                        for (; meta_block_remaining_len > 0; --meta_block_remaining_len) {
                            br.readMoreInput();
                            /* Read one byte and ignore it. */
                            br.readBits(8);
                        }

                        continue;
                    }

                    if (meta_block_remaining_len === 0) {
                        continue;
                    }

                    if (is_uncompressed) {
                        br.bit_pos_ = (br.bit_pos_ + 7) & ~7;
                        CopyUncompressedBlockToOutput(output, meta_block_remaining_len, pos,
                            ringbuffer, ringbuffer_mask, br);
                        pos += meta_block_remaining_len;
                        continue;
                    }

                    for (i = 0; i < 3; ++i) {
                        num_block_types[i] = DecodeVarLenUint8(br) + 1;
                        if (num_block_types[i] >= 2) {
                            ReadHuffmanCode(num_block_types[i] + 2, block_type_trees, i * HUFFMAN_MAX_TABLE_SIZE, br);
                            ReadHuffmanCode(kNumBlockLengthCodes, block_len_trees, i * HUFFMAN_MAX_TABLE_SIZE, br);
                            block_length[i] = ReadBlockLength(block_len_trees, i * HUFFMAN_MAX_TABLE_SIZE, br);
                            block_type_rb_index[i] = 1;
                        }
                    }

                    br.readMoreInput();

                    distance_postfix_bits = br.readBits(2);
                    num_direct_distance_codes = NUM_DISTANCE_SHORT_CODES + (br.readBits(4) << distance_postfix_bits);
                    distance_postfix_mask = (1 << distance_postfix_bits) - 1;
                    num_distance_codes = (num_direct_distance_codes + (48 << distance_postfix_bits));
                    context_modes = new Uint8Array(num_block_types[0]);

                    for (i = 0; i < num_block_types[0]; ++i) {
                        br.readMoreInput();
                        context_modes[i] = (br.readBits(2) << 1);
                    }

                    var _o1 = DecodeContextMap(num_block_types[0] << kLiteralContextBits, br);
                    num_literal_htrees = _o1.num_htrees;
                    context_map = _o1.context_map;

                    var _o2 = DecodeContextMap(num_block_types[2] << kDistanceContextBits, br);
                    num_dist_htrees = _o2.num_htrees;
                    dist_context_map = _o2.context_map;

                    hgroup[0] = new HuffmanTreeGroup(kNumLiteralCodes, num_literal_htrees);
                    hgroup[1] = new HuffmanTreeGroup(kNumInsertAndCopyCodes, num_block_types[1]);
                    hgroup[2] = new HuffmanTreeGroup(num_distance_codes, num_dist_htrees);

                    for (i = 0; i < 3; ++i) {
                        hgroup[i].decode(br);
                    }

                    context_map_slice = 0;
                    dist_context_map_slice = 0;
                    context_mode = context_modes[block_type[0]];
                    context_lookup_offset1 = Context.lookupOffsets[context_mode];
                    context_lookup_offset2 = Context.lookupOffsets[context_mode + 1];
                    htree_command = hgroup[1].htrees[0];

                    while (meta_block_remaining_len > 0) {
                        var cmd_code;
                        var range_idx;
                        var insert_code;
                        var copy_code;
                        var insert_length;
                        var copy_length;
                        var distance_code;
                        var distance;
                        var context;
                        var j;
                        var copy_dst;

                        br.readMoreInput();

                        if (block_length[1] === 0) {
                            DecodeBlockType(num_block_types[1],
                                block_type_trees, 1, block_type, block_type_rb,
                                block_type_rb_index, br);
                            block_length[1] = ReadBlockLength(block_len_trees, HUFFMAN_MAX_TABLE_SIZE, br);
                            htree_command = hgroup[1].htrees[block_type[1]];
                        }
                        --block_length[1];
                        cmd_code = ReadSymbol(hgroup[1].codes, htree_command, br);
                        range_idx = cmd_code >> 6;
                        if (range_idx >= 2) {
                            range_idx -= 2;
                            distance_code = -1;
                        } else {
                            distance_code = 0;
                        }
                        insert_code = Prefix.kInsertRangeLut[range_idx] + ((cmd_code >> 3) & 7);
                        copy_code = Prefix.kCopyRangeLut[range_idx] + (cmd_code & 7);
                        insert_length = Prefix.kInsertLengthPrefixCode[insert_code].offset +
                            br.readBits(Prefix.kInsertLengthPrefixCode[insert_code].nbits);
                        copy_length = Prefix.kCopyLengthPrefixCode[copy_code].offset +
                            br.readBits(Prefix.kCopyLengthPrefixCode[copy_code].nbits);
                        prev_byte1 = ringbuffer[pos-1 & ringbuffer_mask];
                        prev_byte2 = ringbuffer[pos-2 & ringbuffer_mask];
                        for (j = 0; j < insert_length; ++j) {
                            br.readMoreInput();

                            if (block_length[0] === 0) {
                                DecodeBlockType(num_block_types[0],
                                    block_type_trees, 0, block_type, block_type_rb,
                                    block_type_rb_index, br);
                                block_length[0] = ReadBlockLength(block_len_trees, 0, br);
                                context_offset = block_type[0] << kLiteralContextBits;
                                context_map_slice = context_offset;
                                context_mode = context_modes[block_type[0]];
                                context_lookup_offset1 = Context.lookupOffsets[context_mode];
                                context_lookup_offset2 = Context.lookupOffsets[context_mode + 1];
                            }
                            context = (Context.lookup[context_lookup_offset1 + prev_byte1] |
                            Context.lookup[context_lookup_offset2 + prev_byte2]);
                            literal_htree_index = context_map[context_map_slice + context];
                            --block_length[0];
                            prev_byte2 = prev_byte1;
                            prev_byte1 = ReadSymbol(hgroup[0].codes, hgroup[0].htrees[literal_htree_index], br);
                            ringbuffer[pos & ringbuffer_mask] = prev_byte1;
                            if ((pos & ringbuffer_mask) === ringbuffer_mask) {
                                output.write(ringbuffer, ringbuffer_size);
                            }
                            ++pos;
                        }
                        meta_block_remaining_len -= insert_length;
                        if (meta_block_remaining_len <= 0) break;

                        if (distance_code < 0) {
                            var context;

                            br.readMoreInput();
                            if (block_length[2] === 0) {
                                DecodeBlockType(num_block_types[2],
                                    block_type_trees, 2, block_type, block_type_rb,
                                    block_type_rb_index, br);
                                block_length[2] = ReadBlockLength(block_len_trees, 2 * HUFFMAN_MAX_TABLE_SIZE, br);
                                dist_context_offset = block_type[2] << kDistanceContextBits;
                                dist_context_map_slice = dist_context_offset;
                            }
                            --block_length[2];
                            context = (copy_length > 4 ? 3 : copy_length - 2) & 0xff;
                            dist_htree_index = dist_context_map[dist_context_map_slice + context];
                            distance_code = ReadSymbol(hgroup[2].codes, hgroup[2].htrees[dist_htree_index], br);
                            if (distance_code >= num_direct_distance_codes) {
                                var nbits;
                                var postfix;
                                var offset;
                                distance_code -= num_direct_distance_codes;
                                postfix = distance_code & distance_postfix_mask;
                                distance_code >>= distance_postfix_bits;
                                nbits = (distance_code >> 1) + 1;
                                offset = ((2 + (distance_code & 1)) << nbits) - 4;
                                distance_code = num_direct_distance_codes +
                                    ((offset + br.readBits(nbits)) <<
                                    distance_postfix_bits) + postfix;
                            }
                        }

                        /* Convert the distance code to the actual distance by possibly looking */
                        /* up past distnaces from the ringbuffer. */
                        distance = TranslateShortCodes(distance_code, dist_rb, dist_rb_idx);
                        if (distance < 0) {
                            throw new Error('[BrotliDecompress] invalid distance');
                        }

                        if (pos < max_backward_distance &&
                            max_distance !== max_backward_distance) {
                            max_distance = pos;
                        } else {
                            max_distance = max_backward_distance;
                        }

                        copy_dst = pos & ringbuffer_mask;

                        if (distance > max_distance) {
                            if (copy_length >= BrotliDictionary.minDictionaryWordLength &&
                                copy_length <= BrotliDictionary.maxDictionaryWordLength) {
                                var offset = BrotliDictionary.offsetsByLength[copy_length];
                                var word_id = distance - max_distance - 1;
                                var shift = BrotliDictionary.sizeBitsByLength[copy_length];
                                var mask = (1 << shift) - 1;
                                var word_idx = word_id & mask;
                                var transform_idx = word_id >> shift;
                                offset += word_idx * copy_length;
                                if (transform_idx < Transform.kNumTransforms) {
                                    var len = Transform.transformDictionaryWord(ringbuffer, copy_dst, offset, copy_length, transform_idx);
                                    copy_dst += len;
                                    pos += len;
                                    meta_block_remaining_len -= len;
                                    if (copy_dst >= ringbuffer_end) {
                                        output.write(ringbuffer, ringbuffer_size);

                                        for (var _x = 0; _x < (copy_dst - ringbuffer_end); _x++)
                                            ringbuffer[_x] = ringbuffer[ringbuffer_end + _x];
                                    }
                                } else {
                                    throw new Error("Invalid backward reference. pos: " + pos + " distance: " + distance +
                                        " len: " + copy_length + " bytes left: " + meta_block_remaining_len);
                                }
                            } else {
                                throw new Error("Invalid backward reference. pos: " + pos + " distance: " + distance +
                                    " len: " + copy_length + " bytes left: " + meta_block_remaining_len);
                            }
                        } else {
                            if (distance_code > 0) {
                                dist_rb[dist_rb_idx & 3] = distance;
                                ++dist_rb_idx;
                            }

                            if (copy_length > meta_block_remaining_len) {
                                throw new Error("Invalid backward reference. pos: " + pos + " distance: " + distance +
                                    " len: " + copy_length + " bytes left: " + meta_block_remaining_len);
                            }

                            for (j = 0; j < copy_length; ++j) {
                                ringbuffer[pos & ringbuffer_mask] = ringbuffer[(pos - distance) & ringbuffer_mask];
                                if ((pos & ringbuffer_mask) === ringbuffer_mask) {
                                    output.write(ringbuffer, ringbuffer_size);
                                }
                                ++pos;
                                --meta_block_remaining_len;
                            }
                        }

                        /* When we get here, we must have inserted at least one literal and */
                        /* made a copy of at least length two, therefore accessing the last 2 */
                        /* bytes is valid. */
                        prev_byte1 = ringbuffer[(pos - 1) & ringbuffer_mask];
                        prev_byte2 = ringbuffer[(pos - 2) & ringbuffer_mask];
                    }

                    /* Protect pos from overflow, wrap it around at every GB of input data */
                    pos &= 0x3fffffff;
                }

                output.write(ringbuffer, pos & ringbuffer_mask);
            }

            exports.BrotliDecompress = BrotliDecompress;

            BrotliDictionary.init();


            /***/ }),
        /* 275 */
        /***/ (function(module, exports) {

            function BrotliInput(buffer) {
                this.buffer = buffer;
                this.pos = 0;
            }

            BrotliInput.prototype.read = function(buf, i, count) {
                if (this.pos + count > this.buffer.length) {
                    count = this.buffer.length - this.pos;
                }

                for (var p = 0; p < count; p++)
                    buf[i + p] = this.buffer[this.pos + p];

                this.pos += count;
                return count;
            }

            exports.BrotliInput = BrotliInput;

            function BrotliOutput(buf) {
                this.buffer = buf;
                this.pos = 0;
            }

            BrotliOutput.prototype.write = function(buf, count) {
                if (this.pos + count > this.buffer.length)
                    throw new Error('Output buffer is not large enough');

                this.buffer.set(buf.subarray(0, count), this.pos);
                this.pos += count;
                return count;
            };

            exports.BrotliOutput = BrotliOutput;


            /***/ }),
        /* 276 */
        /***/ (function(module, exports) {

            /* Copyright 2013 Google Inc. All Rights Reserved.

             Licensed under the Apache License, Version 2.0 (the "License");
             you may not use this file except in compliance with the License.
             You may obtain a copy of the License at

             http://www.apache.org/licenses/LICENSE-2.0

             Unless required by applicable law or agreed to in writing, software
             distributed under the License is distributed on an "AS IS" BASIS,
             WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             See the License for the specific language governing permissions and
             limitations under the License.

             Bit reading helpers
             */

            var BROTLI_READ_SIZE = 4096;
            var BROTLI_IBUF_SIZE =  (2 * BROTLI_READ_SIZE + 32);
            var BROTLI_IBUF_MASK =  (2 * BROTLI_READ_SIZE - 1);

            var kBitMask = new Uint32Array([
                0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767,
                65535, 131071, 262143, 524287, 1048575, 2097151, 4194303, 8388607, 16777215
            ]);

            /* Input byte buffer, consist of a ringbuffer and a "slack" region where */
            /* bytes from the start of the ringbuffer are copied. */
            function BrotliBitReader(input) {
                this.buf_ = new Uint8Array(BROTLI_IBUF_SIZE);
                this.input_ = input;    /* input callback */

                this.reset();
            }

            BrotliBitReader.READ_SIZE = BROTLI_READ_SIZE;
            BrotliBitReader.IBUF_MASK = BROTLI_IBUF_MASK;

            BrotliBitReader.prototype.reset = function() {
                this.buf_ptr_ = 0;      /* next input will write here */
                this.val_ = 0;          /* pre-fetched bits */
                this.pos_ = 0;          /* byte position in stream */
                this.bit_pos_ = 0;      /* current bit-reading position in val_ */
                this.bit_end_pos_ = 0;  /* bit-reading end position from LSB of val_ */
                this.eos_ = 0;          /* input stream is finished */

                this.readMoreInput();
                for (var i = 0; i < 4; i++) {
                    this.val_ |= this.buf_[this.pos_] << (8 * i);
                    ++this.pos_;
                }

                return this.bit_end_pos_ > 0;
            };

            /* Fills up the input ringbuffer by calling the input callback.

             Does nothing if there are at least 32 bytes present after current position.

             Returns 0 if either:
             - the input callback returned an error, or
             - there is no more input and the position is past the end of the stream.

             After encountering the end of the input stream, 32 additional zero bytes are
             copied to the ringbuffer, therefore it is safe to call this function after
             every 32 bytes of input is read.
             */
            BrotliBitReader.prototype.readMoreInput = function() {
                if (this.bit_end_pos_ > 256) {
                    return;
                } else if (this.eos_) {
                    if (this.bit_pos_ > this.bit_end_pos_)
                        throw new Error('Unexpected end of input ' + this.bit_pos_ + ' ' + this.bit_end_pos_);
                } else {
                    var dst = this.buf_ptr_;
                    var bytes_read = this.input_.read(this.buf_, dst, BROTLI_READ_SIZE);
                    if (bytes_read < 0) {
                        throw new Error('Unexpected end of input');
                    }

                    if (bytes_read < BROTLI_READ_SIZE) {
                        this.eos_ = 1;
                        /* Store 32 bytes of zero after the stream end. */
                        for (var p = 0; p < 32; p++)
                            this.buf_[dst + bytes_read + p] = 0;
                    }

                    if (dst === 0) {
                        /* Copy the head of the ringbuffer to the slack region. */
                        for (var p = 0; p < 32; p++)
                            this.buf_[(BROTLI_READ_SIZE << 1) + p] = this.buf_[p];

                        this.buf_ptr_ = BROTLI_READ_SIZE;
                    } else {
                        this.buf_ptr_ = 0;
                    }

                    this.bit_end_pos_ += bytes_read << 3;
                }
            };

            /* Guarantees that there are at least 24 bits in the buffer. */
            BrotliBitReader.prototype.fillBitWindow = function() {
                while (this.bit_pos_ >= 8) {
                    this.val_ >>>= 8;
                    this.val_ |= this.buf_[this.pos_ & BROTLI_IBUF_MASK] << 24;
                    ++this.pos_;
                    this.bit_pos_ = this.bit_pos_ - 8 >>> 0;
                    this.bit_end_pos_ = this.bit_end_pos_ - 8 >>> 0;
                }
            };

            /* Reads the specified number of bits from Read Buffer. */
            BrotliBitReader.prototype.readBits = function(n_bits) {
                if (32 - this.bit_pos_ < n_bits) {
                    this.fillBitWindow();
                }

                var val = ((this.val_ >>> this.bit_pos_) & kBitMask[n_bits]);
                this.bit_pos_ += n_bits;
                return val;
            };

            module.exports = BrotliBitReader;


            /***/ }),
        /* 277 */
        /***/ (function(module, exports, __webpack_require__) {

            /* Copyright 2013 Google Inc. All Rights Reserved.

             Licensed under the Apache License, Version 2.0 (the "License");
             you may not use this file except in compliance with the License.
             You may obtain a copy of the License at

             http://www.apache.org/licenses/LICENSE-2.0

             Unless required by applicable law or agreed to in writing, software
             distributed under the License is distributed on an "AS IS" BASIS,
             WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             See the License for the specific language governing permissions and
             limitations under the License.

             Collection of static dictionary words.
             */

            var data = __webpack_require__(278);
            exports.init = function() {
                exports.dictionary = data.init();
            };

            exports.offsetsByLength = new Uint32Array([
                0,     0,     0,     0,     0,  4096,  9216, 21504, 35840, 44032,
                53248, 63488, 74752, 87040, 93696, 100864, 104704, 106752, 108928, 113536,
                115968, 118528, 119872, 121280, 122016,
            ]);

            exports.sizeBitsByLength = new Uint8Array([
                0,  0,  0,  0, 10, 10, 11, 11, 10, 10,
                10, 10, 10,  9,  9,  8,  7,  7,  8,  7,
                7,  6,  6,  5,  5,
            ]);

            exports.minDictionaryWordLength = 4;
            exports.maxDictionaryWordLength = 24;


            /***/ }),
        /* 278 */
        /***/ (function(module, exports, __webpack_require__) {

            var base64 = __webpack_require__(279);
            var fs = __webpack_require__(56);

            /**
             * The normal dictionary-data.js is quite large, which makes it
             * unsuitable for browser usage. In order to make it smaller,
             * we read dictionary.bin, which is a compressed version of
             * the dictionary, and on initial load, Brotli decompresses
             * it's own dictionary. é¦ƒæ§£
             */
            exports.init = function() {
                var BrotliDecompressBuffer = __webpack_require__(274).BrotliDecompressBuffer;
                var compressed = base64.toByteArray(__webpack_require__(280));
                return BrotliDecompressBuffer(compressed);
            };


            /***/ }),
        /* 279 */
        /***/ (function(module, exports) {

            'use strict'

            exports.byteLength = byteLength
            exports.toByteArray = toByteArray
            exports.fromByteArray = fromByteArray

            var lookup = []
            var revLookup = []
            var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

            var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
            for (var i = 0, len = code.length; i < len; ++i) {
                lookup[i] = code[i]
                revLookup[code.charCodeAt(i)] = i
            }

            revLookup['-'.charCodeAt(0)] = 62
            revLookup['_'.charCodeAt(0)] = 63

            function placeHoldersCount (b64) {
                var len = b64.length
                if (len % 4 > 0) {
                    throw new Error('Invalid string. Length must be a multiple of 4')
                }

                // the number of equal signs (place holders)
                // if there are two placeholders, than the two characters before it
                // represent one byte
                // if there is only one, then the three characters before it represent 2 bytes
                // this is just a cheap hack to not do indexOf twice
                return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
            }

            function byteLength (b64) {
                // base64 is 4/3 + up to two characters of the original data
                return (b64.length * 3 / 4) - placeHoldersCount(b64)
            }

            function toByteArray (b64) {
                var i, l, tmp, placeHolders, arr
                var len = b64.length
                placeHolders = placeHoldersCount(b64)

                arr = new Arr((len * 3 / 4) - placeHolders)

                // if there are placeholders, only get up to the last complete 4 chars
                l = placeHolders > 0 ? len - 4 : len

                var L = 0

                for (i = 0; i < l; i += 4) {
                    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
                    arr[L++] = (tmp >> 16) & 0xFF
                    arr[L++] = (tmp >> 8) & 0xFF
                    arr[L++] = tmp & 0xFF
                }

                if (placeHolders === 2) {
                    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
                    arr[L++] = tmp & 0xFF
                } else if (placeHolders === 1) {
                    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
                    arr[L++] = (tmp >> 8) & 0xFF
                    arr[L++] = tmp & 0xFF
                }

                return arr
            }

            function tripletToBase64 (num) {
                return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
            }

            function encodeChunk (uint8, start, end) {
                var tmp
                var output = []
                for (var i = start; i < end; i += 3) {
                    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
                    output.push(tripletToBase64(tmp))
                }
                return output.join('')
            }

            function fromByteArray (uint8) {
                var tmp
                var len = uint8.length
                var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
                var output = ''
                var parts = []
                var maxChunkLength = 16383 // must be multiple of 3

                // go through the array every three bytes, we'll deal with trailing stuff later
                for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
                    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
                }

                // pad the end with zeros, but make sure to not forget the extra bytes
                if (extraBytes === 1) {
                    tmp = uint8[len - 1]
                    output += lookup[tmp >> 2]
                    output += lookup[(tmp << 4) & 0x3F]
                    output += '=='
                } else if (extraBytes === 2) {
                    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
                    output += lookup[tmp >> 10]
                    output += lookup[(tmp >> 4) & 0x3F]
                    output += lookup[(tmp << 2) & 0x3F]
                    output += '='
                }

                parts.push(output)

                return parts.join('')
            }


            /***/ }),
        /* 280 */
        /***/ (function(module, exports) {

            module.exports="";


            /***/ }),
        /* 281 */
        /***/ (function(module, exports) {

            function HuffmanCode(bits, value) {
                this.bits = bits;   /* number of bits used for this symbol */
                this.value = value; /* symbol value or table offset */
            }

            exports.HuffmanCode = HuffmanCode;

            var MAX_LENGTH = 15;

            /* Returns reverse(reverse(key, len) + 1, len), where reverse(key, len) is the
             bit-wise reversal of the len least significant bits of key. */
            function GetNextKey(key, len) {
                var step = 1 << (len - 1);
                while (key & step) {
                    step >>= 1;
                }
                return (key & (step - 1)) + step;
            }

            /* Stores code in table[0], table[step], table[2*step], ..., table[end] */
            /* Assumes that end is an integer multiple of step */
            function ReplicateValue(table, i, step, end, code) {
                do {
                    end -= step;
                    table[i + end] = new HuffmanCode(code.bits, code.value);
                } while (end > 0);
            }

            /* Returns the table width of the next 2nd level table. count is the histogram
             of bit lengths for the remaining symbols, len is the code length of the next
             processed symbol */
            function NextTableBitSize(count, len, root_bits) {
                var left = 1 << (len - root_bits);
                while (len < MAX_LENGTH) {
                    left -= count[len];
                    if (left <= 0) break;
                    ++len;
                    left <<= 1;
                }
                return len - root_bits;
            }

            exports.BrotliBuildHuffmanTable = function(root_table, table, root_bits, code_lengths, code_lengths_size) {
                var start_table = table;
                var code;            /* current table entry */
                var len;             /* current code length */
                var symbol;          /* symbol index in original or sorted table */
                var key;             /* reversed prefix code */
                var step;            /* step size to replicate values in current table */
                var low;             /* low bits for current root entry */
                var mask;            /* mask for low bits */
                var table_bits;      /* key length of current table */
                var table_size;      /* size of current table */
                var total_size;      /* sum of root table size and 2nd level table sizes */
                var sorted;          /* symbols sorted by code length */
                var count = new Int32Array(MAX_LENGTH + 1);  /* number of codes of each length */
                var offset = new Int32Array(MAX_LENGTH + 1);  /* offsets in sorted table for each length */

                sorted = new Int32Array(code_lengths_size);

                /* build histogram of code lengths */
                for (symbol = 0; symbol < code_lengths_size; symbol++) {
                    count[code_lengths[symbol]]++;
                }

                /* generate offsets into sorted symbol table by code length */
                offset[1] = 0;
                for (len = 1; len < MAX_LENGTH; len++) {
                    offset[len + 1] = offset[len] + count[len];
                }

                /* sort symbols by length, by symbol order within each length */
                for (symbol = 0; symbol < code_lengths_size; symbol++) {
                    if (code_lengths[symbol] !== 0) {
                        sorted[offset[code_lengths[symbol]]++] = symbol;
                    }
                }

                table_bits = root_bits;
                table_size = 1 << table_bits;
                total_size = table_size;

                /* special case code with only one value */
                if (offset[MAX_LENGTH] === 1) {
                    for (key = 0; key < total_size; ++key) {
                        root_table[table + key] = new HuffmanCode(0, sorted[0] & 0xffff);
                    }

                    return total_size;
                }

                /* fill in root table */
                key = 0;
                symbol = 0;
                for (len = 1, step = 2; len <= root_bits; ++len, step <<= 1) {
                    for (; count[len] > 0; --count[len]) {
                        code = new HuffmanCode(len & 0xff, sorted[symbol++] & 0xffff);
                        ReplicateValue(root_table, table + key, step, table_size, code);
                        key = GetNextKey(key, len);
                    }
                }

                /* fill in 2nd level tables and add pointers to root table */
                mask = total_size - 1;
                low = -1;
                for (len = root_bits + 1, step = 2; len <= MAX_LENGTH; ++len, step <<= 1) {
                    for (; count[len] > 0; --count[len]) {
                        if ((key & mask) !== low) {
                            table += table_size;
                            table_bits = NextTableBitSize(count, len, root_bits);
                            table_size = 1 << table_bits;
                            total_size += table_size;
                            low = key & mask;
                            root_table[start_table + low] = new HuffmanCode((table_bits + root_bits) & 0xff, ((table - start_table) - low) & 0xffff);
                        }
                        code = new HuffmanCode((len - root_bits) & 0xff, sorted[symbol++] & 0xffff);
                        ReplicateValue(root_table, table + (key >> root_bits), step, table_size, code);
                        key = GetNextKey(key, len);
                    }
                }

                return total_size;
            }


            /***/ }),
        /* 282 */
        /***/ (function(module, exports) {

            /* Copyright 2013 Google Inc. All Rights Reserved.

             Licensed under the Apache License, Version 2.0 (the "License");
             you may not use this file except in compliance with the License.
             You may obtain a copy of the License at

             http://www.apache.org/licenses/LICENSE-2.0

             Unless required by applicable law or agreed to in writing, software
             distributed under the License is distributed on an "AS IS" BASIS,
             WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             See the License for the specific language governing permissions and
             limitations under the License.

             Lookup table to map the previous two bytes to a context id.

             There are four different context modeling modes defined here:
             CONTEXT_LSB6: context id is the least significant 6 bits of the last byte,
             CONTEXT_MSB6: context id is the most significant 6 bits of the last byte,
             CONTEXT_UTF8: second-order context model tuned for UTF8-encoded text,
             CONTEXT_SIGNED: second-order context model tuned for signed integers.

             The context id for the UTF8 context model is calculated as follows. If p1
             and p2 are the previous two bytes, we calcualte the context as

             context = kContextLookup[p1] | kContextLookup[p2 + 256].

             If the previous two bytes are ASCII characters (i.e. < 128), this will be
             equivalent to

             context = 4 * context1(p1) + context2(p2),

             where context1 is based on the previous byte in the following way:

             0  : non-ASCII control
             1  : \t, \n, \r
             2  : space
             3  : other punctuation
             4  : " '
             5  : %
             6  : ( < [ {
             7  : ) > ] }
             8  : , ; :
             9  : .
             10 : =
             11 : number
             12 : upper-case vowel
             13 : upper-case consonant
             14 : lower-case vowel
             15 : lower-case consonant

             and context2 is based on the second last byte:

             0 : control, space
             1 : punctuation
             2 : upper-case letter, number
             3 : lower-case letter

             If the last byte is ASCII, and the second last byte is not (in a valid UTF8
             stream it will be a continuation byte, value between 128 and 191), the
             context is the same as if the second last byte was an ASCII control or space.

             If the last byte is a UTF8 lead byte (value >= 192), then the next byte will
             be a continuation byte and the context id is 2 or 3 depending on the LSB of
             the last byte and to a lesser extent on the second last byte if it is ASCII.

             If the last byte is a UTF8 continuation byte, the second last byte can be:
             - continuation byte: the next byte is probably ASCII or lead byte (assuming
             4-byte UTF8 characters are rare) and the context id is 0 or 1.
             - lead byte (192 - 207): next byte is ASCII or lead byte, context is 0 or 1
             - lead byte (208 - 255): next byte is continuation byte, context is 2 or 3

             The possible value combinations of the previous two bytes, the range of
             context ids and the type of the next byte is summarized in the table below:

             |--------\-----------------------------------------------------------------|
             |         \                         Last byte                              |
             | Second   \---------------------------------------------------------------|
             | last byte \    ASCII            |   cont. byte        |   lead byte      |
             |            \   (0-127)          |   (128-191)         |   (192-)         |
             |=============|===================|=====================|==================|
             |  ASCII      | next: ASCII/lead  |  not valid          |  next: cont.     |
             |  (0-127)    | context: 4 - 63   |                     |  context: 2 - 3  |
             |-------------|-------------------|---------------------|------------------|
             |  cont. byte | next: ASCII/lead  |  next: ASCII/lead   |  next: cont.     |
             |  (128-191)  | context: 4 - 63   |  context: 0 - 1     |  context: 2 - 3  |
             |-------------|-------------------|---------------------|------------------|
             |  lead byte  | not valid         |  next: ASCII/lead   |  not valid       |
             |  (192-207)  |                   |  context: 0 - 1     |                  |
             |-------------|-------------------|---------------------|------------------|
             |  lead byte  | not valid         |  next: cont.        |  not valid       |
             |  (208-)     |                   |  context: 2 - 3     |                  |
             |-------------|-------------------|---------------------|------------------|

             The context id for the signed context mode is calculated as:

             context = (kContextLookup[512 + p1] << 3) | kContextLookup[512 + p2].

             For any context modeling modes, the context ids can be calculated by |-ing
             together two lookups from one table using context model dependent offsets:

             context = kContextLookup[offset1 + p1] | kContextLookup[offset2 + p2].

             where offset1 and offset2 are dependent on the context mode.
             */

            var CONTEXT_LSB6         = 0;
            var CONTEXT_MSB6         = 1;
            var CONTEXT_UTF8         = 2;
            var CONTEXT_SIGNED       = 3;

            /* Common context lookup table for all context modes. */
            exports.lookup = new Uint8Array([
                /* CONTEXT_UTF8, last byte. */
                /* ASCII range. */
                0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  4,  0,  0,  4,  0,  0,
                0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
                8, 12, 16, 12, 12, 20, 12, 16, 24, 28, 12, 12, 32, 12, 36, 12,
                44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 32, 32, 24, 40, 28, 12,
                12, 48, 52, 52, 52, 48, 52, 52, 52, 48, 52, 52, 52, 52, 52, 48,
                52, 52, 52, 52, 52, 48, 52, 52, 52, 52, 52, 24, 12, 28, 12, 12,
                12, 56, 60, 60, 60, 56, 60, 60, 60, 56, 60, 60, 60, 60, 60, 56,
                60, 60, 60, 60, 60, 56, 60, 60, 60, 60, 60, 24, 12, 28, 12,  0,
                /* UTF8 continuation byte range. */
                0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
                0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
                0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
                0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
                /* UTF8 lead byte range. */
                2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
                2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
                2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
                2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
                /* CONTEXT_UTF8 second last byte. */
                /* ASCII range. */
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
                1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
                1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 0,
                /* UTF8 continuation byte range. */
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                /* UTF8 lead byte range. */
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                /* CONTEXT_SIGNED, second last byte. */
                0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
                4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
                4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
                4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
                5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7,
                /* CONTEXT_SIGNED, last byte, same as the above values shifted by 3 bits. */
                0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
                16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
                16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
                16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
                24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
                24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
                24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
                24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
                32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
                40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
                40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
                48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 56,
                /* CONTEXT_LSB6, last byte. */
                0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
                16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
                48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
                0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
                16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
                48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
                0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
                16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
                48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
                0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
                16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
                48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
                /* CONTEXT_MSB6, last byte. */
                0,  0,  0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,
                4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,
                8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11,
                12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15,
                16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19,
                20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 23,
                24, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 26, 27, 27, 27, 27,
                28, 28, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 31, 31, 31, 31,
                32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 34, 35, 35, 35, 35,
                36, 36, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39,
                40, 40, 40, 40, 41, 41, 41, 41, 42, 42, 42, 42, 43, 43, 43, 43,
                44, 44, 44, 44, 45, 45, 45, 45, 46, 46, 46, 46, 47, 47, 47, 47,
                48, 48, 48, 48, 49, 49, 49, 49, 50, 50, 50, 50, 51, 51, 51, 51,
                52, 52, 52, 52, 53, 53, 53, 53, 54, 54, 54, 54, 55, 55, 55, 55,
                56, 56, 56, 56, 57, 57, 57, 57, 58, 58, 58, 58, 59, 59, 59, 59,
                60, 60, 60, 60, 61, 61, 61, 61, 62, 62, 62, 62, 63, 63, 63, 63,
                /* CONTEXT_{M,L}SB6, second last byte, */
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            ]);

            exports.lookupOffsets = new Uint16Array([
                /* CONTEXT_LSB6 */
                1024, 1536,
                /* CONTEXT_MSB6 */
                1280, 1536,
                /* CONTEXT_UTF8 */
                0, 256,
                /* CONTEXT_SIGNED */
                768, 512,
            ]);


            /***/ }),
        /* 283 */
        /***/ (function(module, exports) {

            /* Copyright 2013 Google Inc. All Rights Reserved.

             Licensed under the Apache License, Version 2.0 (the "License");
             you may not use this file except in compliance with the License.
             You may obtain a copy of the License at

             http://www.apache.org/licenses/LICENSE-2.0

             Unless required by applicable law or agreed to in writing, software
             distributed under the License is distributed on an "AS IS" BASIS,
             WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             See the License for the specific language governing permissions and
             limitations under the License.

             Lookup tables to map prefix codes to value ranges. This is used during
             decoding of the block lengths, literal insertion lengths and copy lengths.
             */

            /* Represents the range of values belonging to a prefix code: */
            /* [offset, offset + 2^nbits) */
            function PrefixCodeRange(offset, nbits) {
                this.offset = offset;
                this.nbits = nbits;
            }

            exports.kBlockLengthPrefixCode = [
                new PrefixCodeRange(1, 2), new PrefixCodeRange(5, 2), new PrefixCodeRange(9, 2), new PrefixCodeRange(13, 2),
                new PrefixCodeRange(17, 3), new PrefixCodeRange(25, 3), new PrefixCodeRange(33, 3), new PrefixCodeRange(41, 3),
                new PrefixCodeRange(49, 4), new PrefixCodeRange(65, 4), new PrefixCodeRange(81, 4), new PrefixCodeRange(97, 4),
                new PrefixCodeRange(113, 5), new PrefixCodeRange(145, 5), new PrefixCodeRange(177, 5), new PrefixCodeRange(209, 5),
                new PrefixCodeRange(241, 6), new PrefixCodeRange(305, 6), new PrefixCodeRange(369, 7), new PrefixCodeRange(497, 8),
                new PrefixCodeRange(753, 9), new PrefixCodeRange(1265, 10), new PrefixCodeRange(2289, 11), new PrefixCodeRange(4337, 12),
                new PrefixCodeRange(8433, 13), new PrefixCodeRange(16625, 24)
            ];

            exports.kInsertLengthPrefixCode = [
                new PrefixCodeRange(0, 0), new PrefixCodeRange(1, 0), new PrefixCodeRange(2, 0), new PrefixCodeRange(3, 0),
                new PrefixCodeRange(4, 0), new PrefixCodeRange(5, 0), new PrefixCodeRange(6, 1), new PrefixCodeRange(8, 1),
                new PrefixCodeRange(10, 2), new PrefixCodeRange(14, 2), new PrefixCodeRange(18, 3), new PrefixCodeRange(26, 3),
                new PrefixCodeRange(34, 4), new PrefixCodeRange(50, 4), new PrefixCodeRange(66, 5), new PrefixCodeRange(98, 5),
                new PrefixCodeRange(130, 6), new PrefixCodeRange(194, 7), new PrefixCodeRange(322, 8), new PrefixCodeRange(578, 9),
                new PrefixCodeRange(1090, 10), new PrefixCodeRange(2114, 12), new PrefixCodeRange(6210, 14), new PrefixCodeRange(22594, 24),
            ];

            exports.kCopyLengthPrefixCode = [
                new PrefixCodeRange(2, 0), new PrefixCodeRange(3, 0), new PrefixCodeRange(4, 0), new PrefixCodeRange(5, 0),
                new PrefixCodeRange(6, 0), new PrefixCodeRange(7, 0), new PrefixCodeRange(8, 0), new PrefixCodeRange(9, 0),
                new PrefixCodeRange(10, 1), new PrefixCodeRange(12, 1), new PrefixCodeRange(14, 2), new PrefixCodeRange(18, 2),
                new PrefixCodeRange(22, 3), new PrefixCodeRange(30, 3), new PrefixCodeRange(38, 4), new PrefixCodeRange(54, 4),
                new PrefixCodeRange(70, 5), new PrefixCodeRange(102, 5), new PrefixCodeRange(134, 6), new PrefixCodeRange(198, 7),
                new PrefixCodeRange(326, 8), new PrefixCodeRange(582, 9), new PrefixCodeRange(1094, 10), new PrefixCodeRange(2118, 24),
            ];

            exports.kInsertRangeLut = [
                0, 0, 8, 8, 0, 16, 8, 16, 16,
            ];

            exports.kCopyRangeLut = [
                0, 8, 0, 8, 16, 0, 16, 8, 16,
            ];


            /***/ }),
        /* 284 */
        /***/ (function(module, exports, __webpack_require__) {

            /* Copyright 2013 Google Inc. All Rights Reserved.

             Licensed under the Apache License, Version 2.0 (the "License");
             you may not use this file except in compliance with the License.
             You may obtain a copy of the License at

             http://www.apache.org/licenses/LICENSE-2.0

             Unless required by applicable law or agreed to in writing, software
             distributed under the License is distributed on an "AS IS" BASIS,
             WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             See the License for the specific language governing permissions and
             limitations under the License.

             Transformations on dictionary words.
             */

            var BrotliDictionary = __webpack_require__(277);

            var kIdentity       = 0;
            var kOmitLast1      = 1;
            var kOmitLast2      = 2;
            var kOmitLast3      = 3;
            var kOmitLast4      = 4;
            var kOmitLast5      = 5;
            var kOmitLast6      = 6;
            var kOmitLast7      = 7;
            var kOmitLast8      = 8;
            var kOmitLast9      = 9;
            var kUppercaseFirst = 10;
            var kUppercaseAll   = 11;
            var kOmitFirst1     = 12;
            var kOmitFirst2     = 13;
            var kOmitFirst3     = 14;
            var kOmitFirst4     = 15;
            var kOmitFirst5     = 16;
            var kOmitFirst6     = 17;
            var kOmitFirst7     = 18;
            var kOmitFirst8     = 19;
            var kOmitFirst9     = 20;

            function Transform(prefix, transform, suffix) {
                this.prefix = new Uint8Array(prefix.length);
                this.transform = transform;
                this.suffix = new Uint8Array(suffix.length);

                for (var i = 0; i < prefix.length; i++)
                    this.prefix[i] = prefix.charCodeAt(i);

                for (var i = 0; i < suffix.length; i++)
                    this.suffix[i] = suffix.charCodeAt(i);
            }

            var kTransforms = [
                new Transform(         "", kIdentity,       ""           ),
                new Transform(         "", kIdentity,       " "          ),
                new Transform(        " ", kIdentity,       " "          ),
                new Transform(         "", kOmitFirst1,     ""           ),
                new Transform(         "", kUppercaseFirst, " "          ),
                new Transform(         "", kIdentity,       " the "      ),
                new Transform(        " ", kIdentity,       ""           ),
                new Transform(       "s ", kIdentity,       " "          ),
                new Transform(         "", kIdentity,       " of "       ),
                new Transform(         "", kUppercaseFirst, ""           ),
                new Transform(         "", kIdentity,       " and "      ),
                new Transform(         "", kOmitFirst2,     ""           ),
                new Transform(         "", kOmitLast1,      ""           ),
                new Transform(       ", ", kIdentity,       " "          ),
                new Transform(         "", kIdentity,       ", "         ),
                new Transform(        " ", kUppercaseFirst, " "          ),
                new Transform(         "", kIdentity,       " in "       ),
                new Transform(         "", kIdentity,       " to "       ),
                new Transform(       "e ", kIdentity,       " "          ),
                new Transform(         "", kIdentity,       "\""         ),
                new Transform(         "", kIdentity,       "."          ),
                new Transform(         "", kIdentity,       "\">"        ),
                new Transform(         "", kIdentity,       "\n"         ),
                new Transform(         "", kOmitLast3,      ""           ),
                new Transform(         "", kIdentity,       "]"          ),
                new Transform(         "", kIdentity,       " for "      ),
                new Transform(         "", kOmitFirst3,     ""           ),
                new Transform(         "", kOmitLast2,      ""           ),
                new Transform(         "", kIdentity,       " a "        ),
                new Transform(         "", kIdentity,       " that "     ),
                new Transform(        " ", kUppercaseFirst, ""           ),
                new Transform(         "", kIdentity,       ". "         ),
                new Transform(        ".", kIdentity,       ""           ),
                new Transform(        " ", kIdentity,       ", "         ),
                new Transform(         "", kOmitFirst4,     ""           ),
                new Transform(         "", kIdentity,       " with "     ),
                new Transform(         "", kIdentity,       "'"          ),
                new Transform(         "", kIdentity,       " from "     ),
                new Transform(         "", kIdentity,       " by "       ),
                new Transform(         "", kOmitFirst5,     ""           ),
                new Transform(         "", kOmitFirst6,     ""           ),
                new Transform(    " the ", kIdentity,       ""           ),
                new Transform(         "", kOmitLast4,      ""           ),
                new Transform(         "", kIdentity,       ". The "     ),
                new Transform(         "", kUppercaseAll,   ""           ),
                new Transform(         "", kIdentity,       " on "       ),
                new Transform(         "", kIdentity,       " as "       ),
                new Transform(         "", kIdentity,       " is "       ),
                new Transform(         "", kOmitLast7,      ""           ),
                new Transform(         "", kOmitLast1,      "ing "       ),
                new Transform(         "", kIdentity,       "\n\t"       ),
                new Transform(         "", kIdentity,       ":"          ),
                new Transform(        " ", kIdentity,       ". "         ),
                new Transform(         "", kIdentity,       "ed "        ),
                new Transform(         "", kOmitFirst9,     ""           ),
                new Transform(         "", kOmitFirst7,     ""           ),
                new Transform(         "", kOmitLast6,      ""           ),
                new Transform(         "", kIdentity,       "("          ),
                new Transform(         "", kUppercaseFirst, ", "         ),
                new Transform(         "", kOmitLast8,      ""           ),
                new Transform(         "", kIdentity,       " at "       ),
                new Transform(         "", kIdentity,       "ly "        ),
                new Transform(    " the ", kIdentity,       " of "       ),
                new Transform(         "", kOmitLast5,      ""           ),
                new Transform(         "", kOmitLast9,      ""           ),
                new Transform(        " ", kUppercaseFirst, ", "         ),
                new Transform(         "", kUppercaseFirst, "\""         ),
                new Transform(        ".", kIdentity,       "("          ),
                new Transform(         "", kUppercaseAll,   " "          ),
                new Transform(         "", kUppercaseFirst, "\">"        ),
                new Transform(         "", kIdentity,       "=\""        ),
                new Transform(        " ", kIdentity,       "."          ),
                new Transform(    ".com/", kIdentity,       ""           ),
                new Transform(    " the ", kIdentity,       " of the "   ),
                new Transform(         "", kUppercaseFirst, "'"          ),
                new Transform(         "", kIdentity,       ". This "    ),
                new Transform(         "", kIdentity,       ","          ),
                new Transform(        ".", kIdentity,       " "          ),
                new Transform(         "", kUppercaseFirst, "("          ),
                new Transform(         "", kUppercaseFirst, "."          ),
                new Transform(         "", kIdentity,       " not "      ),
                new Transform(        " ", kIdentity,       "=\""        ),
                new Transform(         "", kIdentity,       "er "        ),
                new Transform(        " ", kUppercaseAll,   " "          ),
                new Transform(         "", kIdentity,       "al "        ),
                new Transform(        " ", kUppercaseAll,   ""           ),
                new Transform(         "", kIdentity,       "='"         ),
                new Transform(         "", kUppercaseAll,   "\""         ),
                new Transform(         "", kUppercaseFirst, ". "         ),
                new Transform(        " ", kIdentity,       "("          ),
                new Transform(         "", kIdentity,       "ful "       ),
                new Transform(        " ", kUppercaseFirst, ". "         ),
                new Transform(         "", kIdentity,       "ive "       ),
                new Transform(         "", kIdentity,       "less "      ),
                new Transform(         "", kUppercaseAll,   "'"          ),
                new Transform(         "", kIdentity,       "est "       ),
                new Transform(        " ", kUppercaseFirst, "."          ),
                new Transform(         "", kUppercaseAll,   "\">"        ),
                new Transform(        " ", kIdentity,       "='"         ),
                new Transform(         "", kUppercaseFirst, ","          ),
                new Transform(         "", kIdentity,       "ize "       ),
                new Transform(         "", kUppercaseAll,   "."          ),
                new Transform( "\xc2\xa0", kIdentity,       ""           ),
                new Transform(        " ", kIdentity,       ","          ),
                new Transform(         "", kUppercaseFirst, "=\""        ),
                new Transform(         "", kUppercaseAll,   "=\""        ),
                new Transform(         "", kIdentity,       "ous "       ),
                new Transform(         "", kUppercaseAll,   ", "         ),
                new Transform(         "", kUppercaseFirst, "='"         ),
                new Transform(        " ", kUppercaseFirst, ","          ),
                new Transform(        " ", kUppercaseAll,   "=\""        ),
                new Transform(        " ", kUppercaseAll,   ", "         ),
                new Transform(         "", kUppercaseAll,   ","          ),
                new Transform(         "", kUppercaseAll,   "("          ),
                new Transform(         "", kUppercaseAll,   ". "         ),
                new Transform(        " ", kUppercaseAll,   "."          ),
                new Transform(         "", kUppercaseAll,   "='"         ),
                new Transform(        " ", kUppercaseAll,   ". "         ),
                new Transform(        " ", kUppercaseFirst, "=\""        ),
                new Transform(        " ", kUppercaseAll,   "='"         ),
                new Transform(        " ", kUppercaseFirst, "='"         )
            ];

            exports.kTransforms = kTransforms;
            exports.kNumTransforms = kTransforms.length;

            function ToUpperCase(p, i) {
                if (p[i] < 0xc0) {
                    if (p[i] >= 97 && p[i] <= 122) {
                        p[i] ^= 32;
                    }
                    return 1;
                }

                /* An overly simplified uppercasing model for utf-8. */
                if (p[i] < 0xe0) {
                    p[i + 1] ^= 32;
                    return 2;
                }

                /* An arbitrary transform for three byte characters. */
                p[i + 2] ^= 5;
                return 3;
            }

            exports.transformDictionaryWord = function(dst, idx, word, len, transform) {
                var prefix = kTransforms[transform].prefix;
                var suffix = kTransforms[transform].suffix;
                var t = kTransforms[transform].transform;
                var skip = t < kOmitFirst1 ? 0 : t - (kOmitFirst1 - 1);
                var i = 0;
                var start_idx = idx;
                var uppercase;

                if (skip > len) {
                    skip = len;
                }

                var prefix_pos = 0;
                while (prefix_pos < prefix.length) {
                    dst[idx++] = prefix[prefix_pos++];
                }

                word += skip;
                len -= skip;

                if (t <= kOmitLast9) {
                    len -= t;
                }

                for (i = 0; i < len; i++) {
                    dst[idx++] = BrotliDictionary.dictionary[word + i];
                }

                uppercase = idx - len;

                if (t === kUppercaseFirst) {
                    ToUpperCase(dst, uppercase);
                } else if (t === kUppercaseAll) {
                    while (len > 0) {
                        var step = ToUpperCase(dst, uppercase);
                        uppercase += step;
                        len -= step;
                    }
                }

                var suffix_pos = 0;
                while (suffix_pos < suffix.length) {
                    dst[idx++] = suffix[suffix_pos++];
                }

                return idx - start_idx;
            }


            /***/ }),
        /* 285 */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(__dirname) {// Generated by CoffeeScript 1.12.6
                (function() {
                    var AFMFont, PDFFont, StandardFont, fs,
                        extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
                        hasProp = {}.hasOwnProperty;

                    AFMFont = __webpack_require__(286);

                    PDFFont = __webpack_require__(82);

                    fs = __webpack_require__(56);

                    StandardFont = (function(superClass) {
                        var STANDARD_FONTS;

                        extend(StandardFont, superClass);

                        function StandardFont(document, name1, id) {
                            var ref;
                            this.document = document;
                            this.name = name1;
                            this.id = id;
                            this.font = new AFMFont(STANDARD_FONTS[this.name]());
                            ref = this.font, this.ascender = ref.ascender, this.descender = ref.descender, this.bbox = ref.bbox, this.lineGap = ref.lineGap;
                        }

                        StandardFont.prototype.embed = function() {
                            this.dictionary.data = {
                                Type: 'Font',
                                BaseFont: this.name,
                                Subtype: 'Type1',
                                Encoding: 'WinAnsiEncoding'
                            };
                            return this.dictionary.end();
                        };

                        StandardFont.prototype.encode = function(text) {
                            var advances, encoded, glyph, glyphs, i, j, len, positions;
                            encoded = this.font.encodeText(text);
                            glyphs = this.font.glyphsForString('' + text);
                            advances = this.font.advancesForGlyphs(glyphs);
                            positions = [];
                            for (i = j = 0, len = glyphs.length; j < len; i = ++j) {
                                glyph = glyphs[i];
                                positions.push({
                                    xAdvance: advances[i],
                                    yAdvance: 0,
                                    xOffset: 0,
                                    yOffset: 0,
                                    advanceWidth: this.font.widthOfGlyph(glyph)
                                });
                            }
                            return [encoded, positions];
                        };

                        StandardFont.prototype.widthOfString = function(string, size) {
                            var advance, advances, glyphs, j, len, scale, width;
                            glyphs = this.font.glyphsForString('' + string);
                            advances = this.font.advancesForGlyphs(glyphs);
                            width = 0;
                            for (j = 0, len = advances.length; j < len; j++) {
                                advance = advances[j];
                                width += advance;
                            }
                            scale = size / 1000;
                            return width * scale;
                        };

                        StandardFont.isStandardFont = function(name) {
                            return name in STANDARD_FONTS;
                        };

                        STANDARD_FONTS = {
                            "Courier": function() {
                                return fs.readFileSync(__dirname + "/../font/data/Courier.afm", 'utf8');
                            },
                            "Courier-Bold": function() {
                                return fs.readFileSync(__dirname + "/../font/data/Courier-Bold.afm", 'utf8');
                            },
                            "Courier-Oblique": function() {
                                return fs.readFileSync(__dirname + "/../font/data/Courier-Oblique.afm", 'utf8');
                            },
                            "Courier-BoldOblique": function() {
                                return fs.readFileSync(__dirname + "/../font/data/Courier-BoldOblique.afm", 'utf8');
                            },
                            "Helvetica": function() {
                                return fs.readFileSync(__dirname + "/../font/data/Helvetica.afm", 'utf8');
                            },
                            "Helvetica-Bold": function() {
                                return fs.readFileSync(__dirname + "/../font/data/Helvetica-Bold.afm", 'utf8');
                            },
                            "Helvetica-Oblique": function() {
                                return fs.readFileSync(__dirname + "/../font/data/Helvetica-Oblique.afm", 'utf8');
                            },
                            "Helvetica-BoldOblique": function() {
                                return fs.readFileSync(__dirname + "/../font/data/Helvetica-BoldOblique.afm", 'utf8');
                            },
                            "Times-Roman": function() {
                                return fs.readFileSync(__dirname + "/../font/data/Times-Roman.afm", 'utf8');
                            },
                            "Times-Bold": function() {
                                return fs.readFileSync(__dirname + "/../font/data/Times-Bold.afm", 'utf8');
                            },
                            "Times-Italic": function() {
                                return fs.readFileSync(__dirname + "/../font/data/Times-Italic.afm", 'utf8');
                            },
                            "Times-BoldItalic": function() {
                                return fs.readFileSync(__dirname + "/../font/data/Times-BoldItalic.afm", 'utf8');
                            },
                            "Symbol": function() {
                                return fs.readFileSync(__dirname + "/../font/data/Symbol.afm", 'utf8');
                            },
                            "ZapfDingbats": function() {
                                return fs.readFileSync(__dirname + "/../font/data/ZapfDingbats.afm", 'utf8');
                            }
                        };

                        return StandardFont;

                    })(PDFFont);

                    module.exports = StandardFont;

                }).call(this);

                /* WEBPACK VAR INJECTION */}.call(exports, "/"))

            /***/ }),
        /* 286 */
        /***/ (function(module, exports, __webpack_require__) {

            // Generated by CoffeeScript 1.12.6
            (function() {
                var AFMFont, fs;

                fs = __webpack_require__(56);

                AFMFont = (function() {
                    var WIN_ANSI_MAP, characters;

                    AFMFont.open = function(filename) {
                        return new AFMFont(fs.readFileSync(filename, 'utf8'));
                    };

                    function AFMFont(contents) {
                        var e, i;
                        this.contents = contents;
                        this.attributes = {};
                        this.glyphWidths = {};
                        this.boundingBoxes = {};
                        this.kernPairs = {};
                        this.parse();
                        this.charWidths = (function() {
                            var j, results;
                            results = [];
                            for (i = j = 0; j <= 255; i = ++j) {
                                results.push(this.glyphWidths[characters[i]]);
                            }
                            return results;
                        }).call(this);
                        this.bbox = (function() {
                            var j, len, ref, results;
                            ref = this.attributes['FontBBox'].split(/\s+/);
                            results = [];
                            for (j = 0, len = ref.length; j < len; j++) {
                                e = ref[j];
                                results.push(+e);
                            }
                            return results;
                        }).call(this);
                        this.ascender = +(this.attributes['Ascender'] || 0);
                        this.descender = +(this.attributes['Descender'] || 0);
                        this.lineGap = (this.bbox[3] - this.bbox[1]) - (this.ascender - this.descender);
                    }

                    AFMFont.prototype.parse = function() {
                        var a, j, key, len, line, match, name, ref, section, value;
                        section = '';
                        ref = this.contents.split('\n');
                        for (j = 0, len = ref.length; j < len; j++) {
                            line = ref[j];
                            if (match = line.match(/^Start(\w+)/)) {
                                section = match[1];
                                continue;
                            } else if (match = line.match(/^End(\w+)/)) {
                                section = '';
                                continue;
                            }
                            switch (section) {
                                case 'FontMetrics':
                                    match = line.match(/(^\w+)\s+(.*)/);
                                    key = match[1];
                                    value = match[2];
                                    if (a = this.attributes[key]) {
                                        if (!Array.isArray(a)) {
                                            a = this.attributes[key] = [a];
                                        }
                                        a.push(value);
                                    } else {
                                        this.attributes[key] = value;
                                    }
                                    break;
                                case 'CharMetrics':
                                    if (!/^CH?\s/.test(line)) {
                                        continue;
                                    }
                                    name = line.match(/\bN\s+(\.?\w+)\s*;/)[1];
                                    this.glyphWidths[name] = +line.match(/\bWX\s+(\d+)\s*;/)[1];
                                    break;
                                case 'KernPairs':
                                    match = line.match(/^KPX\s+(\.?\w+)\s+(\.?\w+)\s+(-?\d+)/);
                                    if (match) {
                                        this.kernPairs[match[1] + '\0' + match[2]] = parseInt(match[3]);
                                    }
                            }
                        }
                    };

                    WIN_ANSI_MAP = {
                        402: 131,
                        8211: 150,
                        8212: 151,
                        8216: 145,
                        8217: 146,
                        8218: 130,
                        8220: 147,
                        8221: 148,
                        8222: 132,
                        8224: 134,
                        8225: 135,
                        8226: 149,
                        8230: 133,
                        8364: 128,
                        8240: 137,
                        8249: 139,
                        8250: 155,
                        710: 136,
                        8482: 153,
                        338: 140,
                        339: 156,
                        732: 152,
                        352: 138,
                        353: 154,
                        376: 159,
                        381: 142,
                        382: 158
                    };

                    AFMFont.prototype.encodeText = function(text) {
                        var char, i, j, ref, res;
                        res = [];
                        for (i = j = 0, ref = text.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
                            char = text.charCodeAt(i);
                            char = WIN_ANSI_MAP[char] || char;
                            res.push(char.toString(16));
                        }
                        return res;
                    };

                    AFMFont.prototype.glyphsForString = function(string) {
                        var charCode, glyphs, i, j, ref;
                        glyphs = [];
                        for (i = j = 0, ref = string.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
                            charCode = string.charCodeAt(i);
                            glyphs.push(this.characterToGlyph(charCode));
                        }
                        return glyphs;
                    };

                    AFMFont.prototype.characterToGlyph = function(character) {
                        return characters[WIN_ANSI_MAP[character] || character] || '.notdef';
                    };

                    AFMFont.prototype.widthOfGlyph = function(glyph) {
                        return this.glyphWidths[glyph] || 0;
                    };

                    AFMFont.prototype.getKernPair = function(left, right) {
                        return this.kernPairs[left + '\0' + right] || 0;
                    };

                    AFMFont.prototype.advancesForGlyphs = function(glyphs) {
                        var advances, index, j, left, len, right;
                        advances = [];
                        for (index = j = 0, len = glyphs.length; j < len; index = ++j) {
                            left = glyphs[index];
                            right = glyphs[index + 1];
                            advances.push(this.widthOfGlyph(left) + this.getKernPair(left, right));
                        }
                        return advances;
                    };

                    characters = '.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n\nspace         exclam         quotedbl       numbersign\ndollar        percent        ampersand      quotesingle\nparenleft     parenright     asterisk       plus\ncomma         hyphen         period         slash\nzero          one            two            three\nfour          five           six            seven\neight         nine           colon          semicolon\nless          equal          greater        question\n\nat            A              B              C\nD             E              F              G\nH             I              J              K\nL             M              N              O\nP             Q              R              S\nT             U              V              W\nX             Y              Z              bracketleft\nbackslash     bracketright   asciicircum    underscore\n\ngrave         a              b              c\nd             e              f              g\nh             i              j              k\nl             m              n              o\np             q              r              s\nt             u              v              w\nx             y              z              braceleft\nbar           braceright     asciitilde     .notdef\n\nEuro          .notdef        quotesinglbase florin\nquotedblbase  ellipsis       dagger         daggerdbl\ncircumflex    perthousand    Scaron         guilsinglleft\nOE            .notdef        Zcaron         .notdef\n.notdef       quoteleft      quoteright     quotedblleft\nquotedblright bullet         endash         emdash\ntilde         trademark      scaron         guilsinglright\noe            .notdef        zcaron         ydieresis\n\nspace         exclamdown     cent           sterling\ncurrency      yen            brokenbar      section\ndieresis      copyright      ordfeminine    guillemotleft\nlogicalnot    hyphen         registered     macron\ndegree        plusminus      twosuperior    threesuperior\nacute         mu             paragraph      periodcentered\ncedilla       onesuperior    ordmasculine   guillemotright\nonequarter    onehalf        threequarters  questiondown\n\nAgrave        Aacute         Acircumflex    Atilde\nAdieresis     Aring          AE             Ccedilla\nEgrave        Eacute         Ecircumflex    Edieresis\nIgrave        Iacute         Icircumflex    Idieresis\nEth           Ntilde         Ograve         Oacute\nOcircumflex   Otilde         Odieresis      multiply\nOslash        Ugrave         Uacute         Ucircumflex\nUdieresis     Yacute         Thorn          germandbls\n\nagrave        aacute         acircumflex    atilde\nadieresis     aring          ae             ccedilla\negrave        eacute         ecircumflex    edieresis\nigrave        iacute         icircumflex    idieresis\neth           ntilde         ograve         oacute\nocircumflex   otilde         odieresis      divide\noslash        ugrave         uacute         ucircumflex\nudieresis     yacute         thorn          ydieresis'.split(/\s+/);

                    return AFMFont;

                })();

                module.exports = AFMFont;

            }).call(this);


            /***/ }),
        /* 287 */
        /***/ (function(module, exports, __webpack_require__) {

            // Generated by CoffeeScript 1.12.6
            (function() {
                var EmbeddedFont, PDFFont, PDFObject,
                    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
                    hasProp = {}.hasOwnProperty,
                    slice = [].slice;

                PDFFont = __webpack_require__(82);

                PDFObject = __webpack_require__(57);

                EmbeddedFont = (function(superClass) {
                    var toHex;

                    extend(EmbeddedFont, superClass);

                    function EmbeddedFont(document, font, id) {
                        this.document = document;
                        this.font = font;
                        this.id = id;
                        this.subset = this.font.createSubset();
                        this.unicode = [[0]];
                        this.widths = [this.font.getGlyph(0).advanceWidth];
                        this.name = this.font.postscriptName;
                        this.scale = 1000 / this.font.unitsPerEm;
                        this.ascender = this.font.ascent * this.scale;
                        this.descender = this.font.descent * this.scale;
                        this.lineGap = this.font.lineGap * this.scale;
                        this.bbox = this.font.bbox;
                        this.layoutCache = Object.create(null);
                    }

                    EmbeddedFont.prototype.layoutRun = function(text, features) {
                        var i, j, key, len, position, ref, run;
                        run = this.font.layout(text, features);
                        ref = run.positions;
                        for (i = j = 0, len = ref.length; j < len; i = ++j) {
                            position = ref[i];
                            for (key in position) {
                                position[key] *= this.scale;
                            }
                            position.advanceWidth = run.glyphs[i].advanceWidth * this.scale;
                        }
                        return run;
                    };

                    EmbeddedFont.prototype.layoutCached = function(text) {
                        var cached, run;
                        if (cached = this.layoutCache[text]) {
                            return cached;
                        }
                        run = this.layoutRun(text);
                        this.layoutCache[text] = run;
                        return run;
                    };

                    EmbeddedFont.prototype.layout = function(text, features, onlyWidth) {
                        var advanceWidth, glyphs, index, last, positions, ref, run;
                        if (onlyWidth == null) {
                            onlyWidth = false;
                        }
                        if (features) {
                            return this.layoutRun(text, features);
                        }
                        glyphs = onlyWidth ? null : [];
                        positions = onlyWidth ? null : [];
                        advanceWidth = 0;
                        last = 0;
                        index = 0;
                        while (index <= text.length) {
                            if ((index === text.length && last < index) || ((ref = text.charAt(index)) === ' ' || ref === '\t')) {
                                run = this.layoutCached(text.slice(last, ++index));
                                if (!onlyWidth) {
                                    glyphs.push.apply(glyphs, run.glyphs);
                                    positions.push.apply(positions, run.positions);
                                }
                                advanceWidth += run.advanceWidth;
                                last = index;
                            } else {
                                index++;
                            }
                        }
                        return {
                            glyphs: glyphs,
                            positions: positions,
                            advanceWidth: advanceWidth
                        };
                    };

                    EmbeddedFont.prototype.encode = function(text, features) {
                        var base, base1, gid, glyph, glyphs, i, j, len, positions, ref, res;
                        ref = this.layout(text, features), glyphs = ref.glyphs, positions = ref.positions;
                        res = [];
                        for (i = j = 0, len = glyphs.length; j < len; i = ++j) {
                            glyph = glyphs[i];
                            gid = this.subset.includeGlyph(glyph.id);
                            res.push(('0000' + gid.toString(16)).slice(-4));
                            if ((base = this.widths)[gid] == null) {
                                base[gid] = glyph.advanceWidth * this.scale;
                            }
                            if ((base1 = this.unicode)[gid] == null) {
                                base1[gid] = glyph.codePoints;
                            }
                        }
                        return [res, positions];
                    };

                    EmbeddedFont.prototype.widthOfString = function(string, size, features) {
                        var scale, width;
                        width = this.layout(string, features, true).advanceWidth;
                        scale = size / 1000;
                        return width * scale;
                    };

                    EmbeddedFont.prototype.embed = function() {
                        var bbox, descendantFont, descriptor, familyClass, flags, fontFile, i, isCFF, name, ref, tag;
                        isCFF = this.subset.cff != null;
                        fontFile = this.document.ref();
                        if (isCFF) {
                            fontFile.data.Subtype = 'CIDFontType0C';
                        }
                        this.subset.encodeStream().pipe(fontFile);
                        familyClass = (((ref = this.font['OS/2']) != null ? ref.sFamilyClass : void 0) || 0) >> 8;
                        flags = 0;
                        if (this.font.post.isFixedPitch) {
                            flags |= 1 << 0;
                        }
                        if ((1 <= familyClass && familyClass <= 7)) {
                            flags |= 1 << 1;
                        }
                        flags |= 1 << 2;
                        if (familyClass === 10) {
                            flags |= 1 << 3;
                        }
                        if (this.font.head.macStyle.italic) {
                            flags |= 1 << 6;
                        }
                        tag = ((function() {
                            var j, results;
                            results = [];
                            for (i = j = 0; j < 6; i = ++j) {
                                results.push(String.fromCharCode(Math.random() * 26 + 65));
                            }
                            return results;
                        })()).join('');
                        name = tag + '+' + this.font.postscriptName;
                        bbox = this.font.bbox;
                        descriptor = this.document.ref({
                            Type: 'FontDescriptor',
                            FontName: name,
                            Flags: flags,
                            FontBBox: [bbox.minX * this.scale, bbox.minY * this.scale, bbox.maxX * this.scale, bbox.maxY * this.scale],
                            ItalicAngle: this.font.italicAngle,
                            Ascent: this.ascender,
                            Descent: this.descender,
                            CapHeight: (this.font.capHeight || this.font.ascent) * this.scale,
                            XHeight: (this.font.xHeight || 0) * this.scale,
                            StemV: 0
                        });
                        if (isCFF) {
                            descriptor.data.FontFile3 = fontFile;
                        } else {
                            descriptor.data.FontFile2 = fontFile;
                        }
                        descriptor.end();
                        descendantFont = this.document.ref({
                            Type: 'Font',
                            Subtype: isCFF ? 'CIDFontType0' : 'CIDFontType2',
                            BaseFont: name,
                            CIDSystemInfo: {
                                Registry: new String('Adobe'),
                                Ordering: new String('Identity'),
                                Supplement: 0
                            },
                            FontDescriptor: descriptor,
                            W: [0, this.widths]
                        });
                        descendantFont.end();
                        this.dictionary.data = {
                            Type: 'Font',
                            Subtype: 'Type0',
                            BaseFont: name,
                            Encoding: 'Identity-H',
                            DescendantFonts: [descendantFont],
                            ToUnicode: this.toUnicodeCmap()
                        };
                        return this.dictionary.end();
                    };

                    toHex = function() {
                        var code, codePoints, codes;
                        codePoints = 1 <= arguments.length ? slice.call(arguments, 0) : [];
                        codes = (function() {
                            var j, len, results;
                            results = [];
                            for (j = 0, len = codePoints.length; j < len; j++) {
                                code = codePoints[j];
                                results.push(('0000' + code.toString(16)).slice(-4));
                            }
                            return results;
                        })();
                        return codes.join('');
                    };

                    EmbeddedFont.prototype.toUnicodeCmap = function() {
                        var cmap, codePoints, encoded, entries, j, k, len, len1, ref, value;
                        cmap = this.document.ref();
                        entries = [];
                        ref = this.unicode;
                        for (j = 0, len = ref.length; j < len; j++) {
                            codePoints = ref[j];
                            encoded = [];
                            for (k = 0, len1 = codePoints.length; k < len1; k++) {
                                value = codePoints[k];
                                if (value > 0xffff) {
                                    value -= 0x10000;
                                    encoded.push(toHex(value >>> 10 & 0x3ff | 0xd800));
                                    value = 0xdc00 | value & 0x3ff;
                                }
                                encoded.push(toHex(value));
                            }
                            entries.push("<" + (encoded.join(' ')) + ">");
                        }
                        cmap.end("/CIDInit /ProcSet findresource begin\n12 dict begin\nbegincmap\n/CIDSystemInfo <<\n  /Registry (Adobe)\n  /Ordering (UCS)\n  /Supplement 0\n>> def\n/CMapName /Adobe-Identity-UCS def\n/CMapType 2 def\n1 begincodespacerange\n<0000><ffff>\nendcodespacerange\n1 beginbfrange\n<0000> <" + (toHex(entries.length - 1)) + "> [" + (entries.join(' ')) + "]\nendbfrange\nendcmap\nCMapName currentdict /CMap defineresource pop\nend\nend");
                        return cmap;
                    };

                    return EmbeddedFont;

                })(PDFFont);

                module.exports = EmbeddedFont;

            }).call(this);


            /***/ }),
        /* 288 */
        /***/ (function(module, exports, __webpack_require__) {

            // Generated by CoffeeScript 1.12.6
            (function() {
                var LineWrapper, number;

                LineWrapper = __webpack_require__(289);

                number = __webpack_require__(57).number;

                module.exports = {
                    initText: function() {
                        this.x = 0;
                        this.y = 0;
                        return this._lineGap = 0;
                    },
                    lineGap: function(_lineGap) {
                        this._lineGap = _lineGap;
                        return this;
                    },
                    moveDown: function(lines) {
                        if (lines == null) {
                            lines = 1;
                        }
                        this.y += this.currentLineHeight(true) * lines + this._lineGap;
                        return this;
                    },
                    moveUp: function(lines) {
                        if (lines == null) {
                            lines = 1;
                        }
                        this.y -= this.currentLineHeight(true) * lines + this._lineGap;
                        return this;
                    },
                    _text: function(text, x, y, options, lineCallback) {
                        var j, len, line, ref, wrapper;
                        options = this._initOptions(x, y, options);
                        text = text == null ? '' : '' + text;
                        if (options.wordSpacing) {
                            text = text.replace(/\s{2,}/g, ' ');
                        }
                        if (options.width) {
                            wrapper = this._wrapper;
                            if (!wrapper) {
                                wrapper = new LineWrapper(this, options);
                                wrapper.on('line', lineCallback);
                            }
                            this._wrapper = options.continued ? wrapper : null;
                            this._textOptions = options.continued ? options : null;
                            wrapper.wrap(text, options);
                        } else {
                            ref = text.split('\n');
                            for (j = 0, len = ref.length; j < len; j++) {
                                line = ref[j];
                                lineCallback(line, options);
                            }
                        }
                        return this;
                    },
                    text: function(text, x, y, options) {
                        return this._text(text, x, y, options, this._line.bind(this));
                    },
                    widthOfString: function(string, options) {
                        if (options == null) {
                            options = {};
                        }
                        return this._font.widthOfString(string, this._fontSize, options.features) + (options.characterSpacing || 0) * (string.length - 1);
                    },
                    heightOfString: function(text, options) {
                        var height, lineGap, ref, x, y;
                        if (options == null) {
                            options = {};
                        }
                        ref = this, x = ref.x, y = ref.y;
                        options = this._initOptions(options);
                        options.height = 2e308;
                        lineGap = options.lineGap || this._lineGap || 0;
                        this._text(text, this.x, this.y, options, (function(_this) {
                            return function(line, options) {
                                return _this.y += _this.currentLineHeight(true) + lineGap;
                            };
                        })(this));
                        height = this.y - y;
                        this.x = x;
                        this.y = y;
                        return height;
                    },
                    list: function(list, x, y, options, wrapper) {
                        var flatten, i, indent, itemIndent, items, level, levels, midLine, r;
                        options = this._initOptions(x, y, options);
                        midLine = Math.round((this._font.ascender / 1000 * this._fontSize) / 2);
                        r = options.bulletRadius || Math.round((this._font.ascender / 1000 * this._fontSize) / 3);
                        indent = options.textIndent || r * 5;
                        itemIndent = options.bulletIndent || r * 8;
                        level = 1;
                        items = [];
                        levels = [];
                        flatten = function(list) {
                            var i, item, j, len, results;
                            results = [];
                            for (i = j = 0, len = list.length; j < len; i = ++j) {
                                item = list[i];
                                if (Array.isArray(item)) {
                                    level++;
                                    flatten(item);
                                    results.push(level--);
                                } else {
                                    items.push(item);
                                    results.push(levels.push(level));
                                }
                            }
                            return results;
                        };
                        flatten(list);
                        wrapper = new LineWrapper(this, options);
                        wrapper.on('line', this._line.bind(this));
                        level = 1;
                        i = 0;
                        wrapper.on('firstLine', (function(_this) {
                            return function() {
                                var diff, l;
                                if ((l = levels[i++]) !== level) {
                                    diff = itemIndent * (l - level);
                                    _this.x += diff;
                                    wrapper.lineWidth -= diff;
                                    level = l;
                                }
                                _this.circle(_this.x - indent + r, _this.y + midLine, r);
                                return _this.fill();
                            };
                        })(this));
                        wrapper.on('sectionStart', (function(_this) {
                            return function() {
                                var pos;
                                pos = indent + itemIndent * (level - 1);
                                _this.x += pos;
                                return wrapper.lineWidth -= pos;
                            };
                        })(this));
                        wrapper.on('sectionEnd', (function(_this) {
                            return function() {
                                var pos;
                                pos = indent + itemIndent * (level - 1);
                                _this.x -= pos;
                                return wrapper.lineWidth += pos;
                            };
                        })(this));
                        wrapper.wrap(items.join('\n'), options);
                        return this;
                    },
                    _initOptions: function(x, y, options) {
                        var key, ref, val;
                        if (x == null) {
                            x = {};
                        }
                        if (options == null) {
                            options = {};
                        }
                        if (typeof x === 'object') {
                            options = x;
                            x = null;
                        }
                        options = (function() {
                            var k, opts, v;
                            opts = {};
                            for (k in options) {
                                v = options[k];
                                opts[k] = v;
                            }
                            return opts;
                        })();
                        if (this._textOptions) {
                            ref = this._textOptions;
                            for (key in ref) {
                                val = ref[key];
                                if (key !== 'continued') {
                                    if (options[key] == null) {
                                        options[key] = val;
                                    }
                                }
                            }
                        }
                        if (x != null) {
                            this.x = x;
                        }
                        if (y != null) {
                            this.y = y;
                        }
                        if (options.lineBreak !== false) {
                            if (options.width == null) {
                                options.width = this.page.width - this.x - this.page.margins.right;
                            }
                        }
                        options.columns || (options.columns = 0);
                        if (options.columnGap == null) {
                            options.columnGap = 18;
                        }
                        return options;
                    },
                    _line: function(text, options, wrapper) {
                        var lineGap;
                        if (options == null) {
                            options = {};
                        }
                        this._fragment(text, this.x, this.y, options);
                        lineGap = options.lineGap || this._lineGap || 0;
                        if (!wrapper) {
                            return this.x += this.widthOfString(text);
                        } else {
                            return this.y += this.currentLineHeight(true) + lineGap;
                        }
                    },
                    _fragment: function(text, x, y, options) {
                        var addSegment, align, base, characterSpacing, commands, d, encoded, encodedWord, flush, hadOffset, i, j, key, last, len, len1, lineWidth, lineY, m, mode, name, pos, positions, positionsWord, ref, ref1, ref2, renderedWidth, scale, space, spaceWidth, textWidth, val, word, wordSpacing, words;
                        text = ('' + text).replace(/\n/g, '');
                        if (text.length === 0) {
                            return;
                        }
                        align = options.align || 'left';
                        wordSpacing = options.wordSpacing || 0;
                        characterSpacing = options.characterSpacing || 0;
                        if (options.width) {
                            switch (align) {
                                case 'right':
                                    textWidth = this.widthOfString(text.replace(/\s+$/, ''), options);
                                    x += options.lineWidth - textWidth;
                                    break;
                                case 'center':
                                    x += options.lineWidth / 2 - options.textWidth / 2;
                                    break;
                                case 'justify':
                                    words = text.trim().split(/\s+/);
                                    textWidth = this.widthOfString(text.replace(/\s+/g, ''), options);
                                    spaceWidth = this.widthOfString(' ') + characterSpacing;
                                    wordSpacing = Math.max(0, (options.lineWidth - textWidth) / Math.max(1, words.length - 1) - spaceWidth);
                            }
                        }
                        renderedWidth = options.textWidth + (wordSpacing * (options.wordCount - 1)) + (characterSpacing * (text.length - 1));
                        if (options.link) {
                            this.link(x, y, renderedWidth, this.currentLineHeight(), options.link);
                        }
                        if (options.underline || options.strike) {
                            this.save();
                            if (!options.stroke) {
                                this.strokeColor.apply(this, this._fillColor);
                            }
                            lineWidth = this._fontSize < 10 ? 0.5 : Math.floor(this._fontSize / 10);
                            this.lineWidth(lineWidth);
                            d = options.underline ? 1 : 2;
                            lineY = y + this.currentLineHeight() / d;
                            if (options.underline) {
                                lineY -= lineWidth;
                            }
                            this.moveTo(x, lineY);
                            this.lineTo(x + renderedWidth, lineY);
                            this.stroke();
                            this.restore();
                        }
                        this.save();
                        this.transform(1, 0, 0, -1, 0, this.page.height);
                        y = this.page.height - y - (this._font.ascender / 1000 * this._fontSize);
                        if ((base = this.page.fonts)[name = this._font.id] == null) {
                            base[name] = this._font.ref();
                        }
                        this.addContent("BT");
                        this.addContent("1 0 0 1 " + (number(x)) + " " + (number(y)) + " Tm");
                        this.addContent("/" + this._font.id + " " + (number(this._fontSize)) + " Tf");
                        mode = options.fill && options.stroke ? 2 : options.stroke ? 1 : 0;
                        if (mode) {
                            this.addContent(mode + " Tr");
                        }
                        if (characterSpacing) {
                            this.addContent((number(characterSpacing)) + " Tc");
                        }
                        if (wordSpacing) {
                            words = text.trim().split(/\s+/);
                            wordSpacing += this.widthOfString(' ') + characterSpacing;
                            wordSpacing *= 1000 / this._fontSize;
                            encoded = [];
                            positions = [];
                            for (j = 0, len = words.length; j < len; j++) {
                                word = words[j];
                                ref = this._font.encode(word, options.features), encodedWord = ref[0], positionsWord = ref[1];
                                encoded.push.apply(encoded, encodedWord);
                                positions.push.apply(positions, positionsWord);
                                space = {};
                                ref1 = positions[positions.length - 1];
                                for (key in ref1) {
                                    val = ref1[key];
                                    space[key] = val;
                                }
                                space.xAdvance += wordSpacing;
                                positions[positions.length - 1] = space;
                            }
                        } else {
                            ref2 = this._font.encode(text, options.features), encoded = ref2[0], positions = ref2[1];
                        }
                        scale = this._fontSize / 1000;
                        commands = [];
                        last = 0;
                        hadOffset = false;
                        addSegment = (function(_this) {
                            return function(cur) {
                                var advance, hex;
                                if (last < cur) {
                                    hex = encoded.slice(last, cur).join('');
                                    advance = positions[cur - 1].xAdvance - positions[cur - 1].advanceWidth;
                                    commands.push("<" + hex + "> " + (number(-advance)));
                                }
                                return last = cur;
                            };
                        })(this);
                        flush = (function(_this) {
                            return function(i) {
                                addSegment(i);
                                if (commands.length > 0) {
                                    _this.addContent("[" + (commands.join(' ')) + "] TJ");
                                    return commands.length = 0;
                                }
                            };
                        })(this);
                        for (i = m = 0, len1 = positions.length; m < len1; i = ++m) {
                            pos = positions[i];
                            if (pos.xOffset || pos.yOffset) {
                                flush(i);
                                this.addContent("1 0 0 1 " + (number(x + pos.xOffset * scale)) + " " + (number(y + pos.yOffset * scale)) + " Tm");
                                flush(i + 1);
                                hadOffset = true;
                            } else {
                                if (hadOffset) {
                                    this.addContent("1 0 0 1 " + (number(x)) + " " + (number(y)) + " Tm");
                                    hadOffset = false;
                                }
                                if (pos.xAdvance - pos.advanceWidth !== 0) {
                                    addSegment(i + 1);
                                }
                            }
                            x += pos.xAdvance * scale;
                        }
                        flush(i);
                        this.addContent("ET");
                        return this.restore();
                    }
                };

            }).call(this);


            /***/ }),
        /* 289 */
        /***/ (function(module, exports, __webpack_require__) {

            // Generated by CoffeeScript 1.12.6
            (function() {
                var EventEmitter, LineBreaker, LineWrapper,
                    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
                    hasProp = {}.hasOwnProperty;

                EventEmitter = __webpack_require__(32).EventEmitter;

                LineBreaker = __webpack_require__(16);

                LineWrapper = (function(superClass) {
                    extend(LineWrapper, superClass);

                    function LineWrapper(document, options) {
                        var ref;
                        this.document = document;
                        this.indent = options.indent || 0;
                        this.characterSpacing = options.characterSpacing || 0;
                        this.wordSpacing = options.wordSpacing === 0;
                        this.columns = options.columns || 1;
                        this.columnGap = (ref = options.columnGap) != null ? ref : 18;
                        this.lineWidth = (options.width - (this.columnGap * (this.columns - 1))) / this.columns;
                        this.spaceLeft = this.lineWidth;
                        this.startX = this.document.x;
                        this.startY = this.document.y;
                        this.column = 1;
                        this.ellipsis = options.ellipsis;
                        this.continuedX = 0;
                        this.features = options.features;
                        if (options.height != null) {
                            this.height = options.height;
                            this.maxY = this.startY + options.height;
                        } else {
                            this.maxY = this.document.page.maxY();
                        }
                        this.on('firstLine', (function(_this) {
                            return function(options) {
                                var indent;
                                indent = _this.continuedX || _this.indent;
                                _this.document.x += indent;
                                _this.lineWidth -= indent;
                                return _this.once('line', function() {
                                    _this.document.x -= indent;
                                    _this.lineWidth += indent;
                                    if (options.continued && !_this.continuedX) {
                                        _this.continuedX = _this.indent;
                                    }
                                    if (!options.continued) {
                                        return _this.continuedX = 0;
                                    }
                                });
                            };
                        })(this));
                        this.on('lastLine', (function(_this) {
                            return function(options) {
                                var align;
                                align = options.align;
                                if (align === 'justify') {
                                    options.align = 'left';
                                }
                                _this.lastLine = true;
                                return _this.once('line', function() {
                                    _this.document.y += options.paragraphGap || 0;
                                    options.align = align;
                                    return _this.lastLine = false;
                                });
                            };
                        })(this));
                    }

                    LineWrapper.prototype.wordWidth = function(word) {
                        return this.document.widthOfString(word, this) + this.characterSpacing + this.wordSpacing;
                    };

                    LineWrapper.prototype.eachWord = function(text, fn) {
                        var bk, breaker, fbk, l, last, lbk, shouldContinue, w, word, wordWidths;
                        breaker = new LineBreaker(text);
                        last = null;
                        wordWidths = Object.create(null);
                        while (bk = breaker.nextBreak()) {
                            word = text.slice((last != null ? last.position : void 0) || 0, bk.position);
                            w = wordWidths[word] != null ? wordWidths[word] : wordWidths[word] = this.wordWidth(word);
                            if (w > this.lineWidth + this.continuedX) {
                                lbk = last;
                                fbk = {};
                                while (word.length) {
                                    l = word.length;
                                    while (w > this.spaceLeft) {
                                        w = this.wordWidth(word.slice(0, --l));
                                    }
                                    fbk.required = l < word.length;
                                    shouldContinue = fn(word.slice(0, l), w, fbk, lbk);
                                    lbk = {
                                        required: false
                                    };
                                    word = word.slice(l);
                                    w = this.wordWidth(word);
                                    if (shouldContinue === false) {
                                        break;
                                    }
                                }
                            } else {
                                shouldContinue = fn(word, w, bk, last);
                            }
                            if (shouldContinue === false) {
                                break;
                            }
                            last = bk;
                        }
                    };

                    LineWrapper.prototype.wrap = function(text, options) {
                        var buffer, emitLine, lc, nextY, textWidth, wc, y;
                        if (options.indent != null) {
                            this.indent = options.indent;
                        }
                        if (options.characterSpacing != null) {
                            this.characterSpacing = options.characterSpacing;
                        }
                        if (options.wordSpacing != null) {
                            this.wordSpacing = options.wordSpacing;
                        }
                        if (options.ellipsis != null) {
                            this.ellipsis = options.ellipsis;
                        }
                        nextY = this.document.y + this.document.currentLineHeight(true);
                        if (this.document.y > this.maxY || nextY > this.maxY) {
                            this.nextSection();
                        }
                        buffer = '';
                        textWidth = 0;
                        wc = 0;
                        lc = 0;
                        y = this.document.y;
                        emitLine = (function(_this) {
                            return function() {
                                options.textWidth = textWidth + _this.wordSpacing * (wc - 1);
                                options.wordCount = wc;
                                options.lineWidth = _this.lineWidth;
                                y = _this.document.y;
                                _this.emit('line', buffer, options, _this);
                                return lc++;
                            };
                        })(this);
                        this.emit('sectionStart', options, this);
                        this.eachWord(text, (function(_this) {
                            return function(word, w, bk, last) {
                                var lh, shouldContinue;
                                if ((last == null) || last.required) {
                                    _this.emit('firstLine', options, _this);
                                    _this.spaceLeft = _this.lineWidth;
                                }
                                if (w <= _this.spaceLeft) {
                                    buffer += word;
                                    textWidth += w;
                                    wc++;
                                }
                                if (bk.required || w > _this.spaceLeft) {
                                    if (bk.required) {
                                        _this.emit('lastLine', options, _this);
                                    }
                                    lh = _this.document.currentLineHeight(true);
                                    if ((_this.height != null) && _this.ellipsis && _this.document.y + lh * 2 > _this.maxY && _this.column >= _this.columns) {
                                        if (_this.ellipsis === true) {
                                            _this.ellipsis = 'éˆ¥ï¿½';
                                        }
                                        buffer = buffer.replace(/\s+$/, '');
                                        textWidth = _this.wordWidth(buffer + _this.ellipsis);
                                        while (textWidth > _this.lineWidth) {
                                            buffer = buffer.slice(0, -1).replace(/\s+$/, '');
                                            textWidth = _this.wordWidth(buffer + _this.ellipsis);
                                        }
                                        buffer = buffer + _this.ellipsis;
                                    }
                                    if (bk.required && w > _this.spaceLeft) {
                                        buffer = word;
                                        textWidth = w;
                                        wc = 1;
                                    }
                                    emitLine();
                                    if (_this.document.y + lh > _this.maxY) {
                                        shouldContinue = _this.nextSection();
                                        if (!shouldContinue) {
                                            wc = 0;
                                            buffer = '';
                                            return false;
                                        }
                                    }
                                    if (bk.required) {
                                        _this.spaceLeft = _this.lineWidth;
                                        buffer = '';
                                        textWidth = 0;
                                        return wc = 0;
                                    } else {
                                        _this.spaceLeft = _this.lineWidth - w;
                                        buffer = word;
                                        textWidth = w;
                                        return wc = 1;
                                    }
                                } else {
                                    return _this.spaceLeft -= w;
                                }
                            };
                        })(this));
                        if (wc > 0) {
                            this.emit('lastLine', options, this);
                            emitLine();
                        }
                        this.emit('sectionEnd', options, this);
                        if (options.continued === true) {
                            if (lc > 1) {
                                this.continuedX = 0;
                            }
                            this.continuedX += options.textWidth;
                            return this.document.y = y;
                        } else {
                            return this.document.x = this.startX;
                        }
                    };

                    LineWrapper.prototype.nextSection = function(options) {
                        var ref;
                        this.emit('sectionEnd', options, this);
                        if (++this.column > this.columns) {
                            if (this.height != null) {
                                return false;
                            }
                            this.document.addPage();
                            this.column = 1;
                            this.startY = this.document.page.margins.top;
                            this.maxY = this.document.page.maxY();
                            this.document.x = this.startX;
                            if (this.document._fillColor) {
                                (ref = this.document).fillColor.apply(ref, this.document._fillColor);
                            }
                            this.emit('pageBreak', options, this);
                        } else {
                            this.document.x += this.lineWidth + this.columnGap;
                            this.document.y = this.startY;
                            this.emit('columnBreak', options, this);
                        }
                        this.emit('sectionStart', options, this);
                        return true;
                    };

                    return LineWrapper;

                })(EventEmitter);

                module.exports = LineWrapper;

            }).call(this);


            /***/ }),
        /* 290 */
        /***/ (function(module, exports, __webpack_require__) {

            // Generated by CoffeeScript 1.12.6
            (function() {
                var PDFImage;

                PDFImage = __webpack_require__(291);

                module.exports = {
                    initImages: function() {
                        this._imageRegistry = {};
                        return this._imageCount = 0;
                    },
                    image: function(src, x, y, options) {
                        var base, bh, bp, bw, h, hp, image, ip, name, ref, ref1, ref2, ref3, w, wp;
                        if (options == null) {
                            options = {};
                        }
                        if (typeof x === 'object') {
                            options = x;
                            x = null;
                        }
                        x = (ref = x != null ? x : options.x) != null ? ref : this.x;
                        y = (ref1 = y != null ? y : options.y) != null ? ref1 : this.y;
                        if (typeof src === 'string') {
                            image = this._imageRegistry[src];
                        }
                        if (!image) {
                            if (src.width && src.height) {
                                image = src;
                            } else {
                                image = this.openImage(src);
                            }
                        }
                        if (!image.obj) {
                            image.embed(this);
                        }
                        if ((base = this.page.xobjects)[name = image.label] == null) {
                            base[name] = image.obj;
                        }
                        w = options.width || image.width;
                        h = options.height || image.height;
                        if (options.width && !options.height) {
                            wp = w / image.width;
                            w = image.width * wp;
                            h = image.height * wp;
                        } else if (options.height && !options.width) {
                            hp = h / image.height;
                            w = image.width * hp;
                            h = image.height * hp;
                        } else if (options.scale) {
                            w = image.width * options.scale;
                            h = image.height * options.scale;
                        } else if (options.fit) {
                            ref2 = options.fit, bw = ref2[0], bh = ref2[1];
                            bp = bw / bh;
                            ip = image.width / image.height;
                            if (ip > bp) {
                                w = bw;
                                h = bw / ip;
                            } else {
                                h = bh;
                                w = bh * ip;
                            }
                        } else if (options.cover) {
                            ref3 = options.cover, bw = ref3[0], bh = ref3[1];
                            bp = bw / bh;
                            ip = image.width / image.height;
                            if (ip > bp) {
                                h = bh;
                                w = bh * ip;
                            } else {
                                w = bw;
                                h = bw / ip;
                            }
                        }
                        if (options.fit || options.cover) {
                            if (options.align === 'center') {
                                x = x + bw / 2 - w / 2;
                            } else if (options.align === 'right') {
                                x = x + bw - w;
                            }
                            if (options.valign === 'center') {
                                y = y + bh / 2 - h / 2;
                            } else if (options.valign === 'bottom') {
                                y = y + bh - h;
                            }
                        }
                        if (this.y === y) {
                            this.y += h;
                        }
                        this.save();
                        this.transform(w, 0, 0, -h, x, y + h);
                        this.addContent("/" + image.label + " Do");
                        this.restore();
                        return this;
                    },
                    openImage: function(src) {
                        var image;
                        if (typeof src === 'string') {
                            image = this._imageRegistry[src];
                        }
                        if (!image) {
                            image = PDFImage.open(src, 'I' + (++this._imageCount));
                            if (typeof src === 'string') {
                                this._imageRegistry[src] = image;
                            }
                        }
                        return image;
                    }
                };

            }).call(this);


            /***/ }),
        /* 291 */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(Buffer) {// Generated by CoffeeScript 1.12.6

                /*
                 PDFImage - embeds images in PDF documents
                 By Devon Govett
                 */

                (function() {
                    var Data, JPEG, PDFImage, PNG, fs;

                    fs = __webpack_require__(56);

                    Data = __webpack_require__(292);

                    JPEG = __webpack_require__(293);

                    PNG = __webpack_require__(294);

                    PDFImage = (function() {
                        function PDFImage() {}

                        PDFImage.open = function(src, label) {
                            var data, match;
                            if (Buffer.isBuffer(src)) {
                                data = src;
                            } else if (src instanceof ArrayBuffer) {
                                data = new Buffer(new Uint8Array(src));
                            } else {
                                if (match = /^data:.+;base64,(.*)$/.exec(src)) {
                                    data = new Buffer(match[1], 'base64');
                                } else {
                                    data = fs.readFileSync(src);
                                    if (!data) {
                                        return;
                                    }
                                }
                            }
                            if (data[0] === 0xff && data[1] === 0xd8) {
                                return new JPEG(data, label);
                            } else if (data[0] === 0x89 && data.toString('ascii', 1, 4) === 'PNG') {
                                return new PNG(data, label);
                            } else {
                                throw new Error('Unknown image format.');
                            }
                        };

                        return PDFImage;

                    })();

                    module.exports = PDFImage;

                }).call(this);

                /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))

            /***/ }),
        /* 292 */
        /***/ (function(module, exports) {

            // Generated by CoffeeScript 1.12.6
            (function() {
                var Data;

                Data = (function() {
                    function Data(data) {
                        this.data = data != null ? data : [];
                        this.pos = 0;
                        this.length = this.data.length;
                    }

                    Data.prototype.readByte = function() {
                        return this.data[this.pos++];
                    };

                    Data.prototype.writeByte = function(byte) {
                        return this.data[this.pos++] = byte;
                    };

                    Data.prototype.byteAt = function(index) {
                        return this.data[index];
                    };

                    Data.prototype.readBool = function() {
                        return !!this.readByte();
                    };

                    Data.prototype.writeBool = function(val) {
                        return this.writeByte(val ? 1 : 0);
                    };

                    Data.prototype.readUInt32 = function() {
                        var b1, b2, b3, b4;
                        b1 = this.readByte() * 0x1000000;
                        b2 = this.readByte() << 16;
                        b3 = this.readByte() << 8;
                        b4 = this.readByte();
                        return b1 + b2 + b3 + b4;
                    };

                    Data.prototype.writeUInt32 = function(val) {
                        this.writeByte((val >>> 24) & 0xff);
                        this.writeByte((val >> 16) & 0xff);
                        this.writeByte((val >> 8) & 0xff);
                        return this.writeByte(val & 0xff);
                    };

                    Data.prototype.readInt32 = function() {
                        var int;
                        int = this.readUInt32();
                        if (int >= 0x80000000) {
                            return int - 0x100000000;
                        } else {
                            return int;
                        }
                    };

                    Data.prototype.writeInt32 = function(val) {
                        if (val < 0) {
                            val += 0x100000000;
                        }
                        return this.writeUInt32(val);
                    };

                    Data.prototype.readUInt16 = function() {
                        var b1, b2;
                        b1 = this.readByte() << 8;
                        b2 = this.readByte();
                        return b1 | b2;
                    };

                    Data.prototype.writeUInt16 = function(val) {
                        this.writeByte((val >> 8) & 0xff);
                        return this.writeByte(val & 0xff);
                    };

                    Data.prototype.readInt16 = function() {
                        var int;
                        int = this.readUInt16();
                        if (int >= 0x8000) {
                            return int - 0x10000;
                        } else {
                            return int;
                        }
                    };

                    Data.prototype.writeInt16 = function(val) {
                        if (val < 0) {
                            val += 0x10000;
                        }
                        return this.writeUInt16(val);
                    };

                    Data.prototype.readString = function(length) {
                        var i, j, ref, ret;
                        ret = [];
                        for (i = j = 0, ref = length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
                            ret[i] = String.fromCharCode(this.readByte());
                        }
                        return ret.join('');
                    };

                    Data.prototype.writeString = function(val) {
                        var i, j, ref, results;
                        results = [];
                        for (i = j = 0, ref = val.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
                            results.push(this.writeByte(val.charCodeAt(i)));
                        }
                        return results;
                    };

                    Data.prototype.stringAt = function(pos, length) {
                        this.pos = pos;
                        return this.readString(length);
                    };

                    Data.prototype.readShort = function() {
                        return this.readInt16();
                    };

                    Data.prototype.writeShort = function(val) {
                        return this.writeInt16(val);
                    };

                    Data.prototype.readLongLong = function() {
                        var b1, b2, b3, b4, b5, b6, b7, b8;
                        b1 = this.readByte();
                        b2 = this.readByte();
                        b3 = this.readByte();
                        b4 = this.readByte();
                        b5 = this.readByte();
                        b6 = this.readByte();
                        b7 = this.readByte();
                        b8 = this.readByte();
                        if (b1 & 0x80) {
                            return ((b1 ^ 0xff) * 0x100000000000000 + (b2 ^ 0xff) * 0x1000000000000 + (b3 ^ 0xff) * 0x10000000000 + (b4 ^ 0xff) * 0x100000000 + (b5 ^ 0xff) * 0x1000000 + (b6 ^ 0xff) * 0x10000 + (b7 ^ 0xff) * 0x100 + (b8 ^ 0xff) + 1) * -1;
                        }
                        return b1 * 0x100000000000000 + b2 * 0x1000000000000 + b3 * 0x10000000000 + b4 * 0x100000000 + b5 * 0x1000000 + b6 * 0x10000 + b7 * 0x100 + b8;
                    };

                    Data.prototype.writeLongLong = function(val) {
                        var high, low;
                        high = Math.floor(val / 0x100000000);
                        low = val & 0xffffffff;
                        this.writeByte((high >> 24) & 0xff);
                        this.writeByte((high >> 16) & 0xff);
                        this.writeByte((high >> 8) & 0xff);
                        this.writeByte(high & 0xff);
                        this.writeByte((low >> 24) & 0xff);
                        this.writeByte((low >> 16) & 0xff);
                        this.writeByte((low >> 8) & 0xff);
                        return this.writeByte(low & 0xff);
                    };

                    Data.prototype.readInt = function() {
                        return this.readInt32();
                    };

                    Data.prototype.writeInt = function(val) {
                        return this.writeInt32(val);
                    };

                    Data.prototype.slice = function(start, end) {
                        return this.data.slice(start, end);
                    };

                    Data.prototype.read = function(bytes) {
                        var buf, i, j, ref;
                        buf = [];
                        for (i = j = 0, ref = bytes; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
                            buf.push(this.readByte());
                        }
                        return buf;
                    };

                    Data.prototype.write = function(bytes) {
                        var byte, j, len, results;
                        results = [];
                        for (j = 0, len = bytes.length; j < len; j++) {
                            byte = bytes[j];
                            results.push(this.writeByte(byte));
                        }
                        return results;
                    };

                    return Data;

                })();

                module.exports = Data;

            }).call(this);


            /***/ }),
        /* 293 */
        /***/ (function(module, exports, __webpack_require__) {

            // Generated by CoffeeScript 1.12.6
            (function() {
                var JPEG, fs,
                    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

                fs = __webpack_require__(56);

                JPEG = (function() {
                    var MARKERS;

                    MARKERS = [0xFFC0, 0xFFC1, 0xFFC2, 0xFFC3, 0xFFC5, 0xFFC6, 0xFFC7, 0xFFC8, 0xFFC9, 0xFFCA, 0xFFCB, 0xFFCC, 0xFFCD, 0xFFCE, 0xFFCF];

                    function JPEG(data, label) {
                        var channels, marker, pos;
                        this.data = data;
                        this.label = label;
                        if (this.data.readUInt16BE(0) !== 0xFFD8) {
                            throw "SOI not found in JPEG";
                        }
                        pos = 2;
                        while (pos < this.data.length) {
                            marker = this.data.readUInt16BE(pos);
                            pos += 2;
                            if (indexOf.call(MARKERS, marker) >= 0) {
                                break;
                            }
                            pos += this.data.readUInt16BE(pos);
                        }
                        if (indexOf.call(MARKERS, marker) < 0) {
                            throw "Invalid JPEG.";
                        }
                        pos += 2;
                        this.bits = this.data[pos++];
                        this.height = this.data.readUInt16BE(pos);
                        pos += 2;
                        this.width = this.data.readUInt16BE(pos);
                        pos += 2;
                        channels = this.data[pos++];
                        this.colorSpace = (function() {
                            switch (channels) {
                                case 1:
                                    return 'DeviceGray';
                                case 3:
                                    return 'DeviceRGB';
                                case 4:
                                    return 'DeviceCMYK';
                            }
                        })();
                        this.obj = null;
                    }

                    JPEG.prototype.embed = function(document) {
                        if (this.obj) {
                            return;
                        }
                        this.obj = document.ref({
                            Type: 'XObject',
                            Subtype: 'Image',
                            BitsPerComponent: this.bits,
                            Width: this.width,
                            Height: this.height,
                            ColorSpace: this.colorSpace,
                            Filter: 'DCTDecode'
                        });
                        if (this.colorSpace === 'DeviceCMYK') {
                            this.obj.data['Decode'] = [1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0];
                        }
                        this.obj.end(this.data);
                        return this.data = null;
                    };

                    return JPEG;

                })();

                module.exports = JPEG;

            }).call(this);


            /***/ }),
        /* 294 */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(Buffer) {// Generated by CoffeeScript 1.12.6
                (function() {
                    var PNG, PNGImage, zlib;

                    zlib = __webpack_require__(59);

                    PNG = __webpack_require__(295);

                    PNGImage = (function() {
                        function PNGImage(data, label) {
                            this.label = label;
                            this.image = new PNG(data);
                            this.width = this.image.width;
                            this.height = this.image.height;
                            this.imgData = this.image.imgData;
                            this.obj = null;
                        }

                        PNGImage.prototype.embed = function(document) {
                            var k, len1, mask, palette, params, rgb, val, x;
                            this.document = document;
                            if (this.obj) {
                                return;
                            }
                            this.obj = this.document.ref({
                                Type: 'XObject',
                                Subtype: 'Image',
                                BitsPerComponent: this.image.bits,
                                Width: this.width,
                                Height: this.height,
                                Filter: 'FlateDecode'
                            });
                            if (!this.image.hasAlphaChannel) {
                                params = this.document.ref({
                                    Predictor: 15,
                                    Colors: this.image.colors,
                                    BitsPerComponent: this.image.bits,
                                    Columns: this.width
                                });
                                this.obj.data['DecodeParms'] = params;
                                params.end();
                            }
                            if (this.image.palette.length === 0) {
                                this.obj.data['ColorSpace'] = this.image.colorSpace;
                            } else {
                                palette = this.document.ref();
                                palette.end(new Buffer(this.image.palette));
                                this.obj.data['ColorSpace'] = ['Indexed', 'DeviceRGB', (this.image.palette.length / 3) - 1, palette];
                            }
                            if (this.image.transparency.grayscale) {
                                val = this.image.transparency.greyscale;
                                return this.obj.data['Mask'] = [val, val];
                            } else if (this.image.transparency.rgb) {
                                rgb = this.image.transparency.rgb;
                                mask = [];
                                for (k = 0, len1 = rgb.length; k < len1; k++) {
                                    x = rgb[k];
                                    mask.push(x, x);
                                }
                                return this.obj.data['Mask'] = mask;
                            } else if (this.image.transparency.indexed) {
                                return this.loadIndexedAlphaChannel();
                            } else if (this.image.hasAlphaChannel) {
                                return this.splitAlphaChannel();
                            } else {
                                return this.finalize();
                            }
                        };

                        PNGImage.prototype.finalize = function() {
                            var sMask;
                            if (this.alphaChannel) {
                                sMask = this.document.ref({
                                    Type: 'XObject',
                                    Subtype: 'Image',
                                    Height: this.height,
                                    Width: this.width,
                                    BitsPerComponent: 8,
                                    Filter: 'FlateDecode',
                                    ColorSpace: 'DeviceGray',
                                    Decode: [0, 1]
                                });
                                sMask.end(this.alphaChannel);
                                this.obj.data['SMask'] = sMask;
                            }
                            this.obj.end(this.imgData);
                            this.image = null;
                            return this.imgData = null;
                        };

                        PNGImage.prototype.splitAlphaChannel = function() {
                            return this.image.decodePixels((function(_this) {
                                return function(pixels) {
                                    var a, alphaChannel, colorByteSize, done, i, imgData, len, p, pixelCount;
                                    colorByteSize = _this.image.colors * _this.image.bits / 8;
                                    pixelCount = _this.width * _this.height;
                                    imgData = new Buffer(pixelCount * colorByteSize);
                                    alphaChannel = new Buffer(pixelCount);
                                    i = p = a = 0;
                                    len = pixels.length;
                                    while (i < len) {
                                        imgData[p++] = pixels[i++];
                                        imgData[p++] = pixels[i++];
                                        imgData[p++] = pixels[i++];
                                        alphaChannel[a++] = pixels[i++];
                                    }
                                    done = 0;
                                    zlib.deflate(imgData, function(err, imgData1) {
                                        _this.imgData = imgData1;
                                        if (err) {
                                            throw err;
                                        }
                                        if (++done === 2) {
                                            return _this.finalize();
                                        }
                                    });
                                    return zlib.deflate(alphaChannel, function(err, alphaChannel1) {
                                        _this.alphaChannel = alphaChannel1;
                                        if (err) {
                                            throw err;
                                        }
                                        if (++done === 2) {
                                            return _this.finalize();
                                        }
                                    });
                                };
                            })(this));
                        };

                        PNGImage.prototype.loadIndexedAlphaChannel = function(fn) {
                            var transparency;
                            transparency = this.image.transparency.indexed;
                            return this.image.decodePixels((function(_this) {
                                return function(pixels) {
                                    var alphaChannel, i, j, k, ref;
                                    alphaChannel = new Buffer(_this.width * _this.height);
                                    i = 0;
                                    for (j = k = 0, ref = pixels.length; k < ref; j = k += 1) {
                                        alphaChannel[i++] = transparency[pixels[j]];
                                    }
                                    return zlib.deflate(alphaChannel, function(err, alphaChannel1) {
                                        _this.alphaChannel = alphaChannel1;
                                        if (err) {
                                            throw err;
                                        }
                                        return _this.finalize();
                                    });
                                };
                            })(this));
                        };

                        return PNGImage;

                    })();

                    module.exports = PNGImage;

                }).call(this);

                /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))

            /***/ }),
        /* 295 */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(Buffer) {// Generated by CoffeeScript 1.4.0

                /*
                 # MIT LICENSE
                 # Copyright (c) 2011 Devon Govett
                 #
                 # Permission is hereby granted, free of charge, to any person obtaining a copy of this
                 # software and associated documentation files (the "Software"), to deal in the Software
                 # without restriction, including without limitation the rights to use, copy, modify, merge,
                 # publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
                 # to whom the Software is furnished to do so, subject to the following conditions:
                 #
                 # The above copyright notice and this permission notice shall be included in all copies or
                 # substantial portions of the Software.
                 #
                 # THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
                 # BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
                 # NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                 # DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                 # OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
                 */


                (function() {
                    var PNG, fs, zlib;

                    fs = __webpack_require__(56);

                    zlib = __webpack_require__(59);

                    module.exports = PNG = (function() {

                        PNG.decode = function(path, fn) {
                            return fs.readFile(path, function(err, file) {
                                var png;
                                png = new PNG(file);
                                return png.decode(function(pixels) {
                                    return fn(pixels);
                                });
                            });
                        };

                        PNG.load = function(path) {
                            var file;
                            file = fs.readFileSync(path);
                            return new PNG(file);
                        };

                        function PNG(data) {
                            var chunkSize, colors, i, index, key, section, short, text, _i, _j, _ref;
                            this.data = data;
                            this.pos = 8;
                            this.palette = [];
                            this.imgData = [];
                            this.transparency = {};
                            this.text = {};
                            while (true) {
                                chunkSize = this.readUInt32();
                                section = ((function() {
                                    var _i, _results;
                                    _results = [];
                                    for (i = _i = 0; _i < 4; i = ++_i) {
                                        _results.push(String.fromCharCode(this.data[this.pos++]));
                                    }
                                    return _results;
                                }).call(this)).join('');
                                switch (section) {
                                    case 'IHDR':
                                        this.width = this.readUInt32();
                                        this.height = this.readUInt32();
                                        this.bits = this.data[this.pos++];
                                        this.colorType = this.data[this.pos++];
                                        this.compressionMethod = this.data[this.pos++];
                                        this.filterMethod = this.data[this.pos++];
                                        this.interlaceMethod = this.data[this.pos++];
                                        break;
                                    case 'PLTE':
                                        this.palette = this.read(chunkSize);
                                        break;
                                    case 'IDAT':
                                        for (i = _i = 0; _i < chunkSize; i = _i += 1) {
                                            this.imgData.push(this.data[this.pos++]);
                                        }
                                        break;
                                    case 'tRNS':
                                        this.transparency = {};
                                        switch (this.colorType) {
                                            case 3:
                                                this.transparency.indexed = this.read(chunkSize);
                                                short = 255 - this.transparency.indexed.length;
                                                if (short > 0) {
                                                    for (i = _j = 0; 0 <= short ? _j < short : _j > short; i = 0 <= short ? ++_j : --_j) {
                                                        this.transparency.indexed.push(255);
                                                    }
                                                }
                                                break;
                                            case 0:
                                                this.transparency.grayscale = this.read(chunkSize)[0];
                                                break;
                                            case 2:
                                                this.transparency.rgb = this.read(chunkSize);
                                        }
                                        break;
                                    case 'tEXt':
                                        text = this.read(chunkSize);
                                        index = text.indexOf(0);
                                        key = String.fromCharCode.apply(String, text.slice(0, index));
                                        this.text[key] = String.fromCharCode.apply(String, text.slice(index + 1));
                                        break;
                                    case 'IEND':
                                        this.colors = (function() {
                                            switch (this.colorType) {
                                                case 0:
                                                case 3:
                                                case 4:
                                                    return 1;
                                                case 2:
                                                case 6:
                                                    return 3;
                                            }
                                        }).call(this);
                                        this.hasAlphaChannel = (_ref = this.colorType) === 4 || _ref === 6;
                                        colors = this.colors + (this.hasAlphaChannel ? 1 : 0);
                                        this.pixelBitlength = this.bits * colors;
                                        this.colorSpace = (function() {
                                            switch (this.colors) {
                                                case 1:
                                                    return 'DeviceGray';
                                                case 3:
                                                    return 'DeviceRGB';
                                            }
                                        }).call(this);
                                        this.imgData = new Buffer(this.imgData);
                                        return;
                                    default:
                                        this.pos += chunkSize;
                                }
                                this.pos += 4;
                                if (this.pos > this.data.length) {
                                    throw new Error("Incomplete or corrupt PNG file");
                                }
                            }
                            return;
                        }

                        PNG.prototype.read = function(bytes) {
                            var i, _i, _results;
                            _results = [];
                            for (i = _i = 0; 0 <= bytes ? _i < bytes : _i > bytes; i = 0 <= bytes ? ++_i : --_i) {
                                _results.push(this.data[this.pos++]);
                            }
                            return _results;
                        };

                        PNG.prototype.readUInt32 = function() {
                            var b1, b2, b3, b4;
                            b1 = this.data[this.pos++] << 24;
                            b2 = this.data[this.pos++] << 16;
                            b3 = this.data[this.pos++] << 8;
                            b4 = this.data[this.pos++];
                            return b1 | b2 | b3 | b4;
                        };

                        PNG.prototype.readUInt16 = function() {
                            var b1, b2;
                            b1 = this.data[this.pos++] << 8;
                            b2 = this.data[this.pos++];
                            return b1 | b2;
                        };

                        PNG.prototype.decodePixels = function(fn) {
                            var _this = this;
                            return zlib.inflate(this.imgData, function(err, data) {
                                var byte, c, col, i, left, length, p, pa, paeth, pb, pc, pixelBytes, pixels, pos, row, scanlineLength, upper, upperLeft, _i, _j, _k, _l, _m;
                                if (err) {
                                    throw err;
                                }
                                pixelBytes = _this.pixelBitlength / 8;
                                scanlineLength = pixelBytes * _this.width;
                                pixels = new Buffer(scanlineLength * _this.height);
                                length = data.length;
                                row = 0;
                                pos = 0;
                                c = 0;
                                while (pos < length) {
                                    switch (data[pos++]) {
                                        case 0:
                                            for (i = _i = 0; _i < scanlineLength; i = _i += 1) {
                                                pixels[c++] = data[pos++];
                                            }
                                            break;
                                        case 1:
                                            for (i = _j = 0; _j < scanlineLength; i = _j += 1) {
                                                byte = data[pos++];
                                                left = i < pixelBytes ? 0 : pixels[c - pixelBytes];
                                                pixels[c++] = (byte + left) % 256;
                                            }
                                            break;
                                        case 2:
                                            for (i = _k = 0; _k < scanlineLength; i = _k += 1) {
                                                byte = data[pos++];
                                                col = (i - (i % pixelBytes)) / pixelBytes;
                                                upper = row && pixels[(row - 1) * scanlineLength + col * pixelBytes + (i % pixelBytes)];
                                                pixels[c++] = (upper + byte) % 256;
                                            }
                                            break;
                                        case 3:
                                            for (i = _l = 0; _l < scanlineLength; i = _l += 1) {
                                                byte = data[pos++];
                                                col = (i - (i % pixelBytes)) / pixelBytes;
                                                left = i < pixelBytes ? 0 : pixels[c - pixelBytes];
                                                upper = row && pixels[(row - 1) * scanlineLength + col * pixelBytes + (i % pixelBytes)];
                                                pixels[c++] = (byte + Math.floor((left + upper) / 2)) % 256;
                                            }
                                            break;
                                        case 4:
                                            for (i = _m = 0; _m < scanlineLength; i = _m += 1) {
                                                byte = data[pos++];
                                                col = (i - (i % pixelBytes)) / pixelBytes;
                                                left = i < pixelBytes ? 0 : pixels[c - pixelBytes];
                                                if (row === 0) {
                                                    upper = upperLeft = 0;
                                                } else {
                                                    upper = pixels[(row - 1) * scanlineLength + col * pixelBytes + (i % pixelBytes)];
                                                    upperLeft = col && pixels[(row - 1) * scanlineLength + (col - 1) * pixelBytes + (i % pixelBytes)];
                                                }
                                                p = left + upper - upperLeft;
                                                pa = Math.abs(p - left);
                                                pb = Math.abs(p - upper);
                                                pc = Math.abs(p - upperLeft);
                                                if (pa <= pb && pa <= pc) {
                                                    paeth = left;
                                                } else if (pb <= pc) {
                                                    paeth = upper;
                                                } else {
                                                    paeth = upperLeft;
                                                }
                                                pixels[c++] = (byte + paeth) % 256;
                                            }
                                            break;
                                        default:
                                            throw new Error("Invalid filter algorithm: " + data[pos - 1]);
                                    }
                                    row++;
                                }
                                return fn(pixels);
                            });
                        };

                        PNG.prototype.decodePalette = function() {
                            var c, i, length, palette, pos, ret, transparency, _i, _ref, _ref1;
                            palette = this.palette;
                            transparency = this.transparency.indexed || [];
                            ret = new Buffer(transparency.length + palette.length);
                            pos = 0;
                            length = palette.length;
                            c = 0;
                            for (i = _i = 0, _ref = palette.length; _i < _ref; i = _i += 3) {
                                ret[pos++] = palette[i];
                                ret[pos++] = palette[i + 1];
                                ret[pos++] = palette[i + 2];
                                ret[pos++] = (_ref1 = transparency[c++]) != null ? _ref1 : 255;
                            }
                            return ret;
                        };

                        PNG.prototype.copyToImageData = function(imageData, pixels) {
                            var alpha, colors, data, i, input, j, k, length, palette, v, _ref;
                            colors = this.colors;
                            palette = null;
                            alpha = this.hasAlphaChannel;
                            if (this.palette.length) {
                                palette = (_ref = this._decodedPalette) != null ? _ref : this._decodedPalette = this.decodePalette();
                                colors = 4;
                                alpha = true;
                            }
                            data = (imageData != null ? imageData.data : void 0) || imageData;
                            length = data.length;
                            input = palette || pixels;
                            i = j = 0;
                            if (colors === 1) {
                                while (i < length) {
                                    k = palette ? pixels[i / 4] * 4 : j;
                                    v = input[k++];
                                    data[i++] = v;
                                    data[i++] = v;
                                    data[i++] = v;
                                    data[i++] = alpha ? input[k++] : 255;
                                    j = k;
                                }
                            } else {
                                while (i < length) {
                                    k = palette ? pixels[i / 4] * 4 : j;
                                    data[i++] = input[k++];
                                    data[i++] = input[k++];
                                    data[i++] = input[k++];
                                    data[i++] = alpha ? input[k++] : 255;
                                    j = k;
                                }
                            }
                        };

                        PNG.prototype.decode = function(fn) {
                            var ret,
                                _this = this;
                            ret = new Buffer(this.width * this.height * 4);
                            return this.decodePixels(function(pixels) {
                                _this.copyToImageData(ret, pixels);
                                return fn(ret);
                            });
                        };

                        return PNG;

                    })();

                }).call(this);

                /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))

            /***/ }),
        /* 296 */
        /***/ (function(module, exports) {

            // Generated by CoffeeScript 1.12.6
            (function() {
                module.exports = {
                    annotate: function(x, y, w, h, options) {
                        var key, ref, val;
                        options.Type = 'Annot';
                        options.Rect = this._convertRect(x, y, w, h);
                        options.Border = [0, 0, 0];
                        if (options.Subtype !== 'Link') {
                            if (options.C == null) {
                                options.C = this._normalizeColor(options.color || [0, 0, 0]);
                            }
                        }
                        delete options.color;
                        if (typeof options.Dest === 'string') {
                            options.Dest = new String(options.Dest);
                        }
                        for (key in options) {
                            val = options[key];
                            options[key[0].toUpperCase() + key.slice(1)] = val;
                        }
                        ref = this.ref(options);
                        this.page.annotations.push(ref);
                        ref.end();
                        return this;
                    },
                    note: function(x, y, w, h, contents, options) {
                        if (options == null) {
                            options = {};
                        }
                        options.Subtype = 'Text';
                        options.Contents = new String(contents);
                        options.Name = 'Comment';
                        if (options.color == null) {
                            options.color = [243, 223, 92];
                        }
                        return this.annotate(x, y, w, h, options);
                    },
                    link: function(x, y, w, h, url, options) {
                        if (options == null) {
                            options = {};
                        }
                        options.Subtype = 'Link';
                        options.A = this.ref({
                            S: 'URI',
                            URI: new String(url)
                        });
                        options.A.end();
                        return this.annotate(x, y, w, h, options);
                    },
                    _markup: function(x, y, w, h, options) {
                        var ref1, x1, x2, y1, y2;
                        if (options == null) {
                            options = {};
                        }
                        ref1 = this._convertRect(x, y, w, h), x1 = ref1[0], y1 = ref1[1], x2 = ref1[2], y2 = ref1[3];
                        options.QuadPoints = [x1, y2, x2, y2, x1, y1, x2, y1];
                        options.Contents = new String;
                        return this.annotate(x, y, w, h, options);
                    },
                    highlight: function(x, y, w, h, options) {
                        if (options == null) {
                            options = {};
                        }
                        options.Subtype = 'Highlight';
                        if (options.color == null) {
                            options.color = [241, 238, 148];
                        }
                        return this._markup(x, y, w, h, options);
                    },
                    underline: function(x, y, w, h, options) {
                        if (options == null) {
                            options = {};
                        }
                        options.Subtype = 'Underline';
                        return this._markup(x, y, w, h, options);
                    },
                    strike: function(x, y, w, h, options) {
                        if (options == null) {
                            options = {};
                        }
                        options.Subtype = 'StrikeOut';
                        return this._markup(x, y, w, h, options);
                    },
                    lineAnnotation: function(x1, y1, x2, y2, options) {
                        if (options == null) {
                            options = {};
                        }
                        options.Subtype = 'Line';
                        options.Contents = new String;
                        options.L = [x1, this.page.height - y1, x2, this.page.height - y2];
                        return this.annotate(x1, y1, x2, y2, options);
                    },
                    rectAnnotation: function(x, y, w, h, options) {
                        if (options == null) {
                            options = {};
                        }
                        options.Subtype = 'Square';
                        options.Contents = new String;
                        return this.annotate(x, y, w, h, options);
                    },
                    ellipseAnnotation: function(x, y, w, h, options) {
                        if (options == null) {
                            options = {};
                        }
                        options.Subtype = 'Circle';
                        options.Contents = new String;
                        return this.annotate(x, y, w, h, options);
                    },
                    textAnnotation: function(x, y, w, h, text, options) {
                        if (options == null) {
                            options = {};
                        }
                        options.Subtype = 'FreeText';
                        options.Contents = new String(text);
                        options.DA = new String;
                        return this.annotate(x, y, w, h, options);
                    },
                    _convertRect: function(x1, y1, w, h) {
                        var m0, m1, m2, m3, m4, m5, ref1, x2, y2;
                        y2 = y1;
                        y1 += h;
                        x2 = x1 + w;
                        ref1 = this._ctm, m0 = ref1[0], m1 = ref1[1], m2 = ref1[2], m3 = ref1[3], m4 = ref1[4], m5 = ref1[5];
                        x1 = m0 * x1 + m2 * y1 + m4;
                        y1 = m1 * x1 + m3 * y1 + m5;
                        x2 = m0 * x2 + m2 * y2 + m4;
                        y2 = m1 * x2 + m3 * y2 + m5;
                        return [x1, y1, x2, y2];
                    }
                };

            }).call(this);


            /***/ }),
        /* 297 */
        /***/ (function(module, exports) {

            /* jslint node: true */
            'use strict';

            module.exports = {
                '4A0': [4767.87, 6740.79],
                '2A0': [3370.39, 4767.87],
                A0: [2383.94, 3370.39],
                A1: [1683.78, 2383.94],
                A2: [1190.55, 1683.78],
                A3: [841.89, 1190.55],
                A4: [595.28, 841.89],
                A5: [419.53, 595.28],
                A6: [297.64, 419.53],
                A7: [209.76, 297.64],
                A8: [147.40, 209.76],
                A9: [104.88, 147.40],
                A10: [73.70, 104.88],
                B0: [2834.65, 4008.19],
                B1: [2004.09, 2834.65],
                B2: [1417.32, 2004.09],
                B3: [1000.63, 1417.32],
                B4: [708.66, 1000.63],
                B5: [498.90, 708.66],
                B6: [354.33, 498.90],
                B7: [249.45, 354.33],
                B8: [175.75, 249.45],
                B9: [124.72, 175.75],
                B10: [87.87, 124.72],
                C0: [2599.37, 3676.54],
                C1: [1836.85, 2599.37],
                C2: [1298.27, 1836.85],
                C3: [918.43, 1298.27],
                C4: [649.13, 918.43],
                C5: [459.21, 649.13],
                C6: [323.15, 459.21],
                C7: [229.61, 323.15],
                C8: [161.57, 229.61],
                C9: [113.39, 161.57],
                C10: [79.37, 113.39],
                RA0: [2437.80, 3458.27],
                RA1: [1729.13, 2437.80],
                RA2: [1218.90, 1729.13],
                RA3: [864.57, 1218.90],
                RA4: [609.45, 864.57],
                SRA0: [2551.18, 3628.35],
                SRA1: [1814.17, 2551.18],
                SRA2: [1275.59, 1814.17],
                SRA3: [907.09, 1275.59],
                SRA4: [637.80, 907.09],
                EXECUTIVE: [521.86, 756.00],
                FOLIO: [612.00, 936.00],
                LEGAL: [612.00, 1008.00],
                LETTER: [612.00, 792.00],
                TABLOID: [792.00, 1224.00]
            };


            /***/ }),
        /* 298 */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(Buffer) {/* jslint node: true */
                'use strict';

                var PDFImage = __webpack_require__(291);

                function ImageMeasure(pdfKitDoc, imageDictionary) {
                    this.pdfKitDoc = pdfKitDoc;
                    this.imageDictionary = imageDictionary || {};
                }

                ImageMeasure.prototype.measureImage = function (src) {
                    var image, label;
                    var that = this;

                    if (!this.pdfKitDoc._imageRegistry[src]) {
                        label = 'I' + (++this.pdfKitDoc._imageCount);
                        try {
                            image = PDFImage.open(realImageSrc(src), label);
                        } catch (error) {
                            image = null;
                        }
                        if (image === null || image === undefined) {
                            throw 'invalid image, images dictionary should contain dataURL entries (or local file paths in node.js)';
                        }
                        image.embed(this.pdfKitDoc);
                        this.pdfKitDoc._imageRegistry[src] = image;
                    } else {
                        image = this.pdfKitDoc._imageRegistry[src];
                    }

                    return {width: image.width, height: image.height};

                    function realImageSrc(src) {
                        var img = that.imageDictionary[src];

                        if (!img) {
                            return src;
                        }

                        var index = img.indexOf('base64,');
                        if (index < 0) {
                            return that.imageDictionary[src];
                        }

                        return new Buffer(img.substring(index + 7), 'base64');
                    }
                };

                module.exports = ImageMeasure;

                /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))

            /***/ }),
        /* 299 */
        /***/ (function(module, exports) {

            /* jslint node: true */
            'use strict';

            function groupDecorations(line) {
                var groups = [], curGroup = null;
                for (var i = 0, l = line.inlines.length; i < l; i++) {
                    var inline = line.inlines[i];
                    var decoration = inline.decoration;
                    if (!decoration) {
                        curGroup = null;
                        continue;
                    }
                    var color = inline.decorationColor || inline.color || 'black';
                    var style = inline.decorationStyle || 'solid';
                    decoration = Array.isArray(decoration) ? decoration : [decoration];
                    for (var ii = 0, ll = decoration.length; ii < ll; ii++) {
                        var deco = decoration[ii];
                        if (!curGroup || deco !== curGroup.decoration ||
                            style !== curGroup.decorationStyle || color !== curGroup.decorationColor ||
                            deco === 'lineThrough') {

                            curGroup = {
                                line: line,
                                decoration: deco,
                                decorationColor: color,
                                decorationStyle: style,
                                inlines: [inline]
                            };
                            groups.push(curGroup);
                        } else {
                            curGroup.inlines.push(inline);
                        }
                    }
                }

                return groups;
            }

            function drawDecoration(group, x, y, pdfKitDoc) {
                function maxInline() {
                    var max = 0;
                    for (var i = 0, l = group.inlines.length; i < l; i++) {
                        var inl = group.inlines[i];
                        max = inl.fontSize > max ? i : max;
                    }
                    return group.inlines[max];
                }
                function width() {
                    var sum = 0;
                    for (var i = 0, l = group.inlines.length; i < l; i++) {
                        sum += group.inlines[i].width;
                    }
                    return sum;
                }
                var firstInline = group.inlines[0],
                    biggerInline = maxInline(),
                    totalWidth = width(),
                    lineAscent = group.line.getAscenderHeight(),
                    ascent = biggerInline.font.ascender / 1000 * biggerInline.fontSize,
                    height = biggerInline.height,
                    descent = height - ascent;

                var lw = 0.5 + Math.floor(Math.max(biggerInline.fontSize - 8, 0) / 2) * 0.12;

                switch (group.decoration) {
                    case 'underline':
                        y += lineAscent + descent * 0.45;
                        break;
                    case 'overline':
                        y += lineAscent - (ascent * 0.85);
                        break;
                    case 'lineThrough':
                        y += lineAscent - (ascent * 0.25);
                        break;
                    default:
                        throw 'Unkown decoration : ' + group.decoration;
                }
                pdfKitDoc.save();

                if (group.decorationStyle === 'double') {
                    var gap = Math.max(0.5, lw * 2);
                    pdfKitDoc.fillColor(group.decorationColor)
                        .rect(x + firstInline.x, y - lw / 2, totalWidth, lw / 2).fill()
                        .rect(x + firstInline.x, y + gap - lw / 2, totalWidth, lw / 2).fill();
                } else if (group.decorationStyle === 'dashed') {
                    var nbDashes = Math.ceil(totalWidth / (3.96 + 2.84));
                    var rdx = x + firstInline.x;
                    pdfKitDoc.rect(rdx, y, totalWidth, lw).clip();
                    pdfKitDoc.fillColor(group.decorationColor);
                    for (var i = 0; i < nbDashes; i++) {
                        pdfKitDoc.rect(rdx, y - lw / 2, 3.96, lw).fill();
                        rdx += 3.96 + 2.84;
                    }
                } else if (group.decorationStyle === 'dotted') {
                    var nbDots = Math.ceil(totalWidth / (lw * 3));
                    var rx = x + firstInline.x;
                    pdfKitDoc.rect(rx, y, totalWidth, lw).clip();
                    pdfKitDoc.fillColor(group.decorationColor);
                    for (var ii = 0; ii < nbDots; ii++) {
                        pdfKitDoc.rect(rx, y - lw / 2, lw, lw).fill();
                        rx += (lw * 3);
                    }
                } else if (group.decorationStyle === 'wavy') {
                    var sh = 0.7, sv = 1;
                    var nbWaves = Math.ceil(totalWidth / (sh * 2)) + 1;
                    var rwx = x + firstInline.x - 1;
                    pdfKitDoc.rect(x + firstInline.x, y - sv, totalWidth, y + sv).clip();
                    pdfKitDoc.lineWidth(0.24);
                    pdfKitDoc.moveTo(rwx, y);
                    for (var iii = 0; iii < nbWaves; iii++) {
                        pdfKitDoc.bezierCurveTo(rwx + sh, y - sv, rwx + sh * 2, y - sv, rwx + sh * 3, y)
                            .bezierCurveTo(rwx + sh * 4, y + sv, rwx + sh * 5, y + sv, rwx + sh * 6, y);
                        rwx += sh * 6;
                    }
                    pdfKitDoc.stroke(group.decorationColor);

                } else {
                    pdfKitDoc.fillColor(group.decorationColor)
                        .rect(x + firstInline.x, y - lw / 2, totalWidth, lw)
                        .fill();
                }
                pdfKitDoc.restore();
            }

            function drawDecorations(line, x, y, pdfKitDoc) {
                var groups = groupDecorations(line);
                for (var i = 0, l = groups.length; i < l; i++) {
                    drawDecoration(groups[i], x, y, pdfKitDoc);
                }
            }

            function drawBackground(line, x, y, pdfKitDoc) {
                var height = line.getHeight();
                for (var i = 0, l = line.inlines.length; i < l; i++) {
                    var inline = line.inlines[i];
                    if (inline.background) {
                        var justifyShift = (inline.justifyShift || 0);
                        pdfKitDoc.fillColor(inline.background)
                            .rect(x + inline.x - justifyShift, y, inline.width + justifyShift, height)
                            .fill();
                    }
                }
            }

            module.exports = {
                drawBackground: drawBackground,
                drawDecorations: drawDecorations
            };

            /***/ }),
        /* 300 */
        /***/ (function(module, exports, __webpack_require__) {

            var __WEBPACK_AMD_DEFINE_RESULT__;/* FileSaver.js
             * A saveAs() FileSaver implementation.
             * 1.3.2
             * 2016-06-16 18:25:19
             *
             * By Eli Grey, http://eligrey.com
             * License: MIT
             *   See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md
             */

            /*global self */
            /*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */

            /*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */

            var saveAs = saveAs || (function(view) {
                    "use strict";
                    // IE <10 is explicitly unsupported
                    if (typeof view === "undefined" || typeof navigator !== "undefined" && /MSIE [1-9]\./.test(navigator.userAgent)) {
                        return;
                    }
                    var
                        doc = view.document
                        // only get URL when necessary in case Blob.js hasn't overridden it yet
                        , get_URL = function() {
                            return view.URL || view.webkitURL || view;
                        }
                        , save_link = doc ? doc.createElementNS("http://www.w3.org/1999/xhtml", "a") : []
                        , can_use_save_link = "download" in save_link
                        , click = function(node) {
                            var event = new MouseEvent("click");
                            node.dispatchEvent(event);
                        }
                        , is_safari = /constructor/i.test(view.HTMLElement) || view.safari
                        , is_chrome_ios =/CriOS\/[\d]+/.test(navigator.userAgent)
                        , throw_outside = function(ex) {
                            (view.setImmediate || view.setTimeout)(function() {
                                throw ex;
                            }, 0);
                        }
                        , force_saveable_type = "application/octet-stream"
                        // the Blob API is fundamentally broken as there is no "downloadfinished" event to subscribe to
                        , arbitrary_revoke_timeout = 1000 * 40 // in ms
                        , revoke = function(file) {
                            var revoker = function() {
                                if (typeof file === "string") { // file is an object URL
                                    get_URL().revokeObjectURL(file);
                                } else { // file is a File
                                    file.remove();
                                }
                            };
                            setTimeout(revoker, arbitrary_revoke_timeout);
                        }
                        , dispatch = function(filesaver, event_types, event) {
                            event_types = [].concat(event_types);
                            var i = event_types.length;
                            while (i--) {
                                var listener = filesaver["on" + event_types[i]];
                                if (typeof listener === "function") {
                                    try {
                                        listener.call(filesaver, event || filesaver);
                                    } catch (ex) {
                                        throw_outside(ex);
                                    }
                                }
                            }
                        }
                        , auto_bom = function(blob) {
                            // prepend BOM for UTF-8 XML and text/* types (including HTML)
                            // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF
                            if (/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type)) {
                                return new Blob([String.fromCharCode(0xFEFF), blob], {type: blob.type});
                            }
                            return blob;
                        }
                        , FileSaver = function(blob, name, no_auto_bom) {
                            if (!no_auto_bom) {
                                blob = auto_bom(blob);
                            }
                            // First try a.download, then web filesystem, then object URLs
                            var
                                filesaver = this
                                , type = blob.type
                                , force = type === force_saveable_type
                                , object_url
                                , dispatch_all = function() {
                                    dispatch(filesaver, "writestart progress write writeend".split(" "));
                                }
                                // on any filesys errors revert to saving with object URLs
                                , fs_error = function() {
                                    if ((is_chrome_ios || (force && is_safari)) && view.FileReader) {
                                        // Safari doesn't allow downloading of blob urls
                                        var reader = new FileReader();
                                        reader.onloadend = function() {
                                            var url = is_chrome_ios ? reader.result : reader.result.replace(/^data:[^;]*;/, 'data:attachment/file;');
                                            var popup = view.open(url, '_blank');
                                            if(!popup) view.location.href = url;
                                            url=undefined; // release reference before dispatching
                                            filesaver.readyState = filesaver.DONE;
                                            dispatch_all();
                                        };
                                        reader.readAsDataURL(blob);
                                        filesaver.readyState = filesaver.INIT;
                                        return;
                                    }
                                    // don't create more object URLs than needed
                                    if (!object_url) {
                                        object_url = get_URL().createObjectURL(blob);
                                    }
                                    if (force) {
                                        view.location.href = object_url;
                                    } else {
                                        var opened = view.open(object_url, "_blank");
                                        if (!opened) {
                                            // Apple does not allow window.open, see https://developer.apple.com/library/safari/documentation/Tools/Conceptual/SafariExtensionGuide/WorkingwithWindowsandTabs/WorkingwithWindowsandTabs.html
                                            view.location.href = object_url;
                                        }
                                    }
                                    filesaver.readyState = filesaver.DONE;
                                    dispatch_all();
                                    revoke(object_url);
                                }
                                ;
                            filesaver.readyState = filesaver.INIT;

                            if (can_use_save_link) {
                                object_url = get_URL().createObjectURL(blob);
                                setTimeout(function() {
                                    save_link.href = object_url;
                                    save_link.download = name;
                                    click(save_link);
                                    dispatch_all();
                                    revoke(object_url);
                                    filesaver.readyState = filesaver.DONE;
                                });
                                return;
                            }

                            fs_error();
                        }
                        , FS_proto = FileSaver.prototype
                        , saveAs = function(blob, name, no_auto_bom) {
                            return new FileSaver(blob, name || blob.name || "download", no_auto_bom);
                        }
                        ;
                    // IE 10+ (native saveAs)
                    if (typeof navigator !== "undefined" && navigator.msSaveOrOpenBlob) {
                        return function(blob, name, no_auto_bom) {
                            name = name || blob.name || "download";

                            if (!no_auto_bom) {
                                blob = auto_bom(blob);
                            }
                            return navigator.msSaveOrOpenBlob(blob, name);
                        };
                    }

                    FS_proto.abort = function(){};
                    FS_proto.readyState = FS_proto.INIT = 0;
                    FS_proto.WRITING = 1;
                    FS_proto.DONE = 2;

                    FS_proto.error =
                        FS_proto.onwritestart =
                            FS_proto.onprogress =
                                FS_proto.onwrite =
                                    FS_proto.onabort =
                                        FS_proto.onerror =
                                            FS_proto.onwriteend =
                                                null;

                    return saveAs;
                }(
                    typeof self !== "undefined" && self
                    || typeof window !== "undefined" && window
                    || this.content
                ));
            // `self` is undefined in Firefox for Android content script context
            // while `this` is nsIContentFrameMessageManager
            // with an attribute `content` that corresponds to the window

            if (typeof module !== "undefined" && module.exports) {
                module.exports.saveAs = saveAs;
            } else if (("function" !== "undefined" && __webpack_require__(301) !== null) && (__webpack_require__(302) !== null)) {
                !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
                    return saveAs;
                }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
            }


            /***/ }),
        /* 301 */
        /***/ (function(module, exports) {

            module.exports = function() { throw new Error("define cannot be used indirect"); };


            /***/ }),
        /* 302 */
        /***/ (function(module, exports) {

            /* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {module.exports = __webpack_amd_options__;

                /* WEBPACK VAR INJECTION */}.call(exports, {}))

            /***/ })
        /******/ ])
});
;
